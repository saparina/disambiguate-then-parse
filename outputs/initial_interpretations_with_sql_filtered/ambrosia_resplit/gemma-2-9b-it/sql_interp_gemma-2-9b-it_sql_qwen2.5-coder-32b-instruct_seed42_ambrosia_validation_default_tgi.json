{
  "results": [
    {
      "db_file": "data/attachment/Hospitality/attachment_1tab_val_event_space/attachment_1tab_val_event_space.sqlite",
      "db_dump": "CREATE TABLE Bookings(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    EventSpaceId INTEGER,\n    Date DATE,\n    Time TIME,\n    NumberOfGuests INT,\n    FOREIGN KEY(EventSpaceId) REFERENCES EventSpaces(id));\nCREATE TABLE Customers(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    Email TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE EventSpaces(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Event_Space TEXT ,\n    Capacity INT,\n    Address TEXT,\n    ContactInfo TEXT);\nCREATE TABLE Payments(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    BookingId INTEGER,\n    Amount DECIMAL(10, 2),\n    PaymentDate DATE,\n    CustomerId INTEGER,\n    FOREIGN KEY(BookingId) REFERENCES Bookings(id),\n    FOREIGN KEY(CustomerId) REFERENCES Customers(id));\n\nINSERT INTO \"Bookings\" (id,EventSpaceId,Date,Time,NumberOfGuests) VALUES (1,1,'2023-01-01','15:00',100),(2,2,'2023-01-02','19:00',80),(3,3,'2023-01-03','10:00',120),(4,4,'2023-01-04','14:00',60),(5,5,'2023-01-05','18:00',150),(6,6,'2023-01-06','21:00',100),(7,7,'2023-01-07','15:00',90),(8,8,'2023-01-08','19:00',70),(9,9,'2023-01-09','10:00',80),(10,10,'2023-01-10','14:00',110),(11,11,'2023-01-11','18:00',120),(12,12,'2023-01-12','21:00',130);\nINSERT INTO \"Customers\" (id,FirstName,LastName,Email,PhoneNumber) VALUES (1,'John','Doe','johndoe@example.com','+1-555-555-5555'),(2,'Jane','Smith','janesmith@example.com','+1-555-555-5556'),(3,'Michael','Williams','mwilliams@example.com','+1-555-555-5557'),(4,'Emily','Johnson','emilyjohnson@example.com','+1-555-555-5558'),(5,'David','Brown','davidbrown@example.com','+1-555-555-5559'),(6,'Laura','Taylor','lataylor@example.com','+1-555-555-5560');\nINSERT INTO \"EventSpaces\" (id,Name,Event_Space,Capacity,Address,ContactInfo) VALUES (1,'Grand Ballroom','Banquet Hall',200,'123 Main St','+1-800-123-4567'),(2,'Presidents Suite','Banquet Hall',150,'456 Elm Street','+1-800-987-6543'),(3,'Meeting Room A','Conference Room',200,'789 Oak Avenue','+1-800-555-1234'),(4,'Boardroom B','Conference Room',100,'135 Pine Drive','+1-800-555-5678'),(5,'Garden Terrace','Outdoor Space',120,'404 Maple Road','+1-800-111-2222'),(6,'Rooftop Lounge','Indoor/Outdoor Space',80,'567 Cedar Lane','+1-800-333-4444'),(7,'Wintergarten','Banquet Hall',250,'987 Palm Boulevard','+1-800-777-8888'),(8,'The Atrium','Banquet Hall',180,'321 Birch Way','+1-800-900-1000'),(9,'Executive Boardroom','Conference Room',120,'777 Willow Circle','+1-800-111-2222'),(10,'Pavilion','Outdoor Space',150,'123 Spruce Trail','+1-800-333-4444');\nINSERT INTO \"Payments\" (id,BookingId,Amount,PaymentDate,CustomerId) VALUES (1,1,1000,'2023-01-01',1),(2,2,800,'2023-01-02',2),(3,3,1200,'2023-01-03',3),(4,4,900,'2023-01-04',4),(5,5,1100,'2023-01-05',5),(6,6,1000,'2023-01-06',1),(7,7,900,'2023-01-07',2),(8,8,1200,'2023-01-08',3),(9,9,1100,'2023-01-09',4),(10,10,1000,'2023-01-10',5),(11,11,1200,'2023-01-11',6),(12,12,1300,'2023-01-12',7);\n",
      "question": "Show all banquet halls and conference rooms where either can hold 200 people. Show them in one table.",
      "gold_queries": [
        "SELECT EventSpaces.Name \r\nFROM EventSpaces\r\nWHERE (EventSpaces.Event_Space = \"Banquet Hall\" OR EventSpaces.Event_Space = \"Conference Room\") AND EventSpaces.Capacity = 200"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Find all EventSpaces that have an Event_Space value of 'Banquet Hall' with a Capacity greater than or equal to 200, and also find all EventSpaces with an Event_Space value of 'Conference Room' and a Capacity greater than or equal to 200",
          "sql_queries": [
            "SELECT Name FROM EventSpaces WHERE Event_Space = 'Banquet Hall' AND Capacity >= 200\nUNION\nSELECT Name FROM EventSpaces WHERE Event_Space = 'Conference Room' AND Capacity >= 200"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve EventSpaces where Event_Space = 'Banquet Hall' and Capacity >= 200 AND EventSpaces.Event_Space = 'Conference Room' AND Capacity >= 200",
          "sql_queries": [
            "SELECT Name, Event_Space, Capacity FROM EventSpaces WHERE (Event_Space = 'Banquet Hall' AND Capacity >= 200) OR (EventSpaces.Event_Space = 'Conference Room' AND Capacity >= 200)"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Create a table containing all EventSpaces with 'Banquet Hall' as Event_Space and Capacity at least 200, or 'Conference Room' as Event_Space and Capacity at least 200.",
          "sql_queries": [
            "SELECT Name, Event_Space, Capacity, Address, ContactInfo\nFROM EventSpaces\nWHERE (Event_Space = 'Banquet Hall' AND Capacity >= 200)\n   OR (Event_Space = 'Conference Room' AND Capacity >= 200)"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Select the distinct EventSpaces where Event_Space is 'Banquet Hall' and Capacity is 200 or Event_Space is 'Conference Room' and Capacity is 200",
          "sql_queries": [
            "SELECT DISTINCT Name \nFROM EventSpaces \nWHERE (Event_Space = 'Banquet Hall' AND Capacity = 200) \n   OR (Event_Space = 'Conference Room' AND Capacity = 200)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_1tab_val_event_space/attachment_1tab_val_event_space.sqlite",
      "db_dump": "CREATE TABLE Bookings(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    EventSpaceId INTEGER,\n    Date DATE,\n    Time TIME,\n    NumberOfGuests INT,\n    FOREIGN KEY(EventSpaceId) REFERENCES EventSpaces(id));\nCREATE TABLE Customers(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    Email TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE EventSpaces(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Event_Space TEXT ,\n    Capacity INT,\n    Address TEXT,\n    ContactInfo TEXT);\nCREATE TABLE Payments(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    BookingId INTEGER,\n    Amount DECIMAL(10, 2),\n    PaymentDate DATE,\n    CustomerId INTEGER,\n    FOREIGN KEY(BookingId) REFERENCES Bookings(id),\n    FOREIGN KEY(CustomerId) REFERENCES Customers(id));\n\nINSERT INTO \"Bookings\" (id,EventSpaceId,Date,Time,NumberOfGuests) VALUES (1,1,'2023-01-01','15:00',100),(2,2,'2023-01-02','19:00',80),(3,3,'2023-01-03','10:00',120),(4,4,'2023-01-04','14:00',60),(5,5,'2023-01-05','18:00',150),(6,6,'2023-01-06','21:00',100),(7,7,'2023-01-07','15:00',90),(8,8,'2023-01-08','19:00',70),(9,9,'2023-01-09','10:00',80),(10,10,'2023-01-10','14:00',110),(11,11,'2023-01-11','18:00',120),(12,12,'2023-01-12','21:00',130);\nINSERT INTO \"Customers\" (id,FirstName,LastName,Email,PhoneNumber) VALUES (1,'John','Doe','johndoe@example.com','+1-555-555-5555'),(2,'Jane','Smith','janesmith@example.com','+1-555-555-5556'),(3,'Michael','Williams','mwilliams@example.com','+1-555-555-5557'),(4,'Emily','Johnson','emilyjohnson@example.com','+1-555-555-5558'),(5,'David','Brown','davidbrown@example.com','+1-555-555-5559'),(6,'Laura','Taylor','lataylor@example.com','+1-555-555-5560');\nINSERT INTO \"EventSpaces\" (id,Name,Event_Space,Capacity,Address,ContactInfo) VALUES (1,'Grand Ballroom','Banquet Hall',200,'123 Main St','+1-800-123-4567'),(2,'Presidents Suite','Banquet Hall',150,'456 Elm Street','+1-800-987-6543'),(3,'Meeting Room A','Conference Room',200,'789 Oak Avenue','+1-800-555-1234'),(4,'Boardroom B','Conference Room',100,'135 Pine Drive','+1-800-555-5678'),(5,'Garden Terrace','Outdoor Space',120,'404 Maple Road','+1-800-111-2222'),(6,'Rooftop Lounge','Indoor/Outdoor Space',80,'567 Cedar Lane','+1-800-333-4444'),(7,'Wintergarten','Banquet Hall',250,'987 Palm Boulevard','+1-800-777-8888'),(8,'The Atrium','Banquet Hall',180,'321 Birch Way','+1-800-900-1000'),(9,'Executive Boardroom','Conference Room',120,'777 Willow Circle','+1-800-111-2222'),(10,'Pavilion','Outdoor Space',150,'123 Spruce Trail','+1-800-333-4444');\nINSERT INTO \"Payments\" (id,BookingId,Amount,PaymentDate,CustomerId) VALUES (1,1,1000,'2023-01-01',1),(2,2,800,'2023-01-02',2),(3,3,1200,'2023-01-03',3),(4,4,900,'2023-01-04',4),(5,5,1100,'2023-01-05',5),(6,6,1000,'2023-01-06',1),(7,7,900,'2023-01-07',2),(8,8,1200,'2023-01-08',3),(9,9,1100,'2023-01-09',4),(10,10,1000,'2023-01-10',5),(11,11,1200,'2023-01-11',6),(12,12,1300,'2023-01-12',7);\n",
      "question": "List all banquet halls and conference rooms with a 200 person capacity. Show them in one table.",
      "gold_queries": [
        "SELECT EventSpaces.Name \r\nFROM EventSpaces\r\nWHERE (EventSpaces.Event_Space = \"Banquet Hall\" OR EventSpaces.Event_Space = \"Conference Room\") AND EventSpaces.Capacity = 200",
        "SELECT EventSpaces.Name \r\nFROM EventSpaces\r\nWHERE EventSpaces.Event_Space = \"Banquet Hall\" OR EventSpaces.Event_Space = \"Conference Room\" AND EventSpaces.Capacity = 200"
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Return all EventSpaces with a Capacity of 200 and Event_Space either 'Banquet Hall' or 'Conference Room'.",
          "sql_queries": [
            "SELECT Name, Event_Space, Capacity, Address, ContactInfo FROM EventSpaces WHERE Capacity = 200 AND Event_Space IN ('Banquet Hall', 'Conference Room')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Combine data from EventSpaces and Bookings to list all banquet halls and conference rooms with 200 capacity.",
          "sql_queries": [
            "SELECT EventSpaces.Name, EventSpaces.Event_Space \nFROM EventSpaces \nJOIN Bookings ON EventSpaces.id = Bookings.EventSpaceId \nWHERE EventSpaces.Capacity = 200 \nAND (EventSpaces.Event_Space = 'Banquet Hall' OR EventSpaces.Event_Space = 'Conference Room')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Display Bookings for event spaces that are  both 'Banquet Hall' or 'Conference Room' with a Capacity of 200.",
          "sql_queries": [
            "SELECT B.id, B.EventSpaceId, B.Date, B.Time, B.NumberOfGuests\nFROM Bookings B\nJOIN EventSpaces ES ON B.EventSpaceId = ES.id\nWHERE ES.Event_Space IN ('Banquet Hall', 'Conference Room') AND ES.Capacity = 200"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_1tab_val_event_space/attachment_1tab_val_event_space.sqlite",
      "db_dump": "CREATE TABLE Bookings(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    EventSpaceId INTEGER,\n    Date DATE,\n    Time TIME,\n    NumberOfGuests INT,\n    FOREIGN KEY(EventSpaceId) REFERENCES EventSpaces(id));\nCREATE TABLE Customers(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    Email TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE EventSpaces(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Event_Space TEXT ,\n    Capacity INT,\n    Address TEXT,\n    ContactInfo TEXT);\nCREATE TABLE Payments(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    BookingId INTEGER,\n    Amount DECIMAL(10, 2),\n    PaymentDate DATE,\n    CustomerId INTEGER,\n    FOREIGN KEY(BookingId) REFERENCES Bookings(id),\n    FOREIGN KEY(CustomerId) REFERENCES Customers(id));\n\nINSERT INTO \"Bookings\" (id,EventSpaceId,Date,Time,NumberOfGuests) VALUES (1,1,'2023-01-01','15:00',100),(2,2,'2023-01-02','19:00',80),(3,3,'2023-01-03','10:00',120),(4,4,'2023-01-04','14:00',60),(5,5,'2023-01-05','18:00',150),(6,6,'2023-01-06','21:00',100),(7,7,'2023-01-07','15:00',90),(8,8,'2023-01-08','19:00',70),(9,9,'2023-01-09','10:00',80),(10,10,'2023-01-10','14:00',110),(11,11,'2023-01-11','18:00',120),(12,12,'2023-01-12','21:00',130);\nINSERT INTO \"Customers\" (id,FirstName,LastName,Email,PhoneNumber) VALUES (1,'John','Doe','johndoe@example.com','+1-555-555-5555'),(2,'Jane','Smith','janesmith@example.com','+1-555-555-5556'),(3,'Michael','Williams','mwilliams@example.com','+1-555-555-5557'),(4,'Emily','Johnson','emilyjohnson@example.com','+1-555-555-5558'),(5,'David','Brown','davidbrown@example.com','+1-555-555-5559'),(6,'Laura','Taylor','lataylor@example.com','+1-555-555-5560');\nINSERT INTO \"EventSpaces\" (id,Name,Event_Space,Capacity,Address,ContactInfo) VALUES (1,'Grand Ballroom','Banquet Hall',200,'123 Main St','+1-800-123-4567'),(2,'Presidents Suite','Banquet Hall',150,'456 Elm Street','+1-800-987-6543'),(3,'Meeting Room A','Conference Room',200,'789 Oak Avenue','+1-800-555-1234'),(4,'Boardroom B','Conference Room',100,'135 Pine Drive','+1-800-555-5678'),(5,'Garden Terrace','Outdoor Space',120,'404 Maple Road','+1-800-111-2222'),(6,'Rooftop Lounge','Indoor/Outdoor Space',80,'567 Cedar Lane','+1-800-333-4444'),(7,'Wintergarten','Banquet Hall',250,'987 Palm Boulevard','+1-800-777-8888'),(8,'The Atrium','Banquet Hall',180,'321 Birch Way','+1-800-900-1000'),(9,'Executive Boardroom','Conference Room',120,'777 Willow Circle','+1-800-111-2222'),(10,'Pavilion','Outdoor Space',150,'123 Spruce Trail','+1-800-333-4444');\nINSERT INTO \"Payments\" (id,BookingId,Amount,PaymentDate,CustomerId) VALUES (1,1,1000,'2023-01-01',1),(2,2,800,'2023-01-02',2),(3,3,1200,'2023-01-03',3),(4,4,900,'2023-01-04',4),(5,5,1100,'2023-01-05',5),(6,6,1000,'2023-01-06',1),(7,7,900,'2023-01-07',2),(8,8,1200,'2023-01-08',3),(9,9,1100,'2023-01-09',4),(10,10,1000,'2023-01-10',5),(11,11,1200,'2023-01-11',6),(12,12,1300,'2023-01-12',7);\n",
      "question": "List all of the banquet halls, in addition show the 200 capacity conference rooms. Show them in one table.",
      "gold_queries": [
        "SELECT EventSpaces.Name \r\nFROM EventSpaces\r\nWHERE EventSpaces.Event_Space = \"Banquet Hall\" OR EventSpaces.Event_Space = \"Conference Room\" AND EventSpaces.Capacity = 200"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Retrieve all records from the `EventSpaces` table where `Event_Space` is 'Banquet Hall', and all records where `Event_Space` is 'Conference Room' and `Capacity` is 200, combining the results into a single table.",
          "sql_queries": [
            "SELECT * FROM EventSpaces WHERE Event_Space = 'Banquet Hall'\nUNION\nSELECT * FROM EventSpaces WHERE Event_Space = 'Conference Room' AND Capacity = 200"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Construct a single table containing data from `EventSpaces` representing both Banquet Halls and Conference Rooms with 200 capacity.",
          "sql_queries": [
            "SELECT Name, Event_Space, Capacity, Address, ContactInfo \nFROM EventSpaces \nWHERE (Event_Space = 'Banquet Hall' OR Event_Space = 'Conference Room') AND Capacity = 200"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Create a combined table with 'Banquet Hall' event spaces and 'Conference Room' event spaces having a capacity of 200.",
          "sql_queries": [
            "SELECT Name, Event_Space, Capacity, Address, ContactInfo FROM EventSpaces WHERE Event_Space IN ('Banquet Hall', 'Conference Room') AND Capacity = 200"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Select all rows from `EventSpaces` with 'Banquet Hall' as Event_Space, and rows where both 'Event_Space' is 'Conference Room' AND 'Capacity' is 200. Display the combined results.",
          "sql_queries": [
            "SELECT * FROM EventSpaces WHERE Event_Space = 'Banquet Hall' UNION SELECT * FROM EventSpaces WHERE Event_Space = 'Conference Room' AND Capacity = 200"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_1tab_ref_dining/attachment_1tab_ref_dining.sqlite",
      "db_dump": "CREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    EmailAddress TEXT,\n    PhoneNumber TEXT\n);\nCREATE TABLE FoodTypes(\n    FoodTypeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    TypeName TEXT\n);\nCREATE TABLE Orders(\n    OrderID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    TotalAmount NUMERIC,\n    OrderDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID),\n    FOREIGN KEY(OrderID) REFERENCES Products(ProductID)\n);\nCREATE TABLE Products(\n    ProductID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Dining INT DEFAULT 0 , -- 0=None, 1=Meals Prepared On Site, 2=Takeaway, 3=Other\n    Best_Before TEXT,\n    FOREIGN KEY(Dining) REFERENCES FoodTypes(FoodTypeID)\n);\n\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,EmailAddress,PhoneNumber) VALUES (1,'John','Smith','johnsmith@example.com','+123456789'),(2,'Jane','Doe','janedoe@example.com','+098765432');\nINSERT INTO \"FoodTypes\" (FoodTypeID,TypeName) VALUES (1,'Prepared Meal'),(2,'Takeaway');\nINSERT INTO \"Orders\" (OrderID,CustomerID,TotalAmount,OrderDate) VALUES (1,1,100,'2024-03-13 11:03:54'),(2,2,150,'2024-03-13 11:03:54');\nINSERT INTO \"Products\" (ProductID,Name,Dining,Best_Before) VALUES (1,'Pizza',1,'10.11.2018'),(2,'Burger',1,'11.11.2018'),(3,'Salad',2,'10.11.2018'),(4,'Coffee',2,'12.11.2018');\n",
      "question": "What prepared meals have a best before date of 10.11.2018 and what takeaway products have the same best before date? Show them in one table.",
      "gold_queries": [
        "SELECT Products.name \r\nFROM FoodTypes JOIN Products ON FoodTypes.FoodTypeID = Products.Dining\r\nWHERE (FoodTypes.TypeName = \"Prepared Meal\" OR FoodTypes.TypeName = \"Takeaway\") AND Products.Best_Before = \"10.11.2018\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Show a table containing prepared meals with a best before date of '10.11.2018' and a separate column for takeaway products with the same best before date.",
          "sql_queries": [
            "SELECT \n    (SELECT Name FROM Products WHERE Dining = 1 AND Best_Before = '10.11.2018') AS PreparedMeals,\n    (SELECT Name FROM Products WHERE Dining = 2 AND Best_Before = '10.11.2018') AS TakeawayProducts"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Retrieve prepared meals with a best before date of '10.11.2018' and takeaway products with the same best before date, combining them into a single result set.",
          "sql_queries": [
            "SELECT Name FROM Products WHERE Dining = 1 AND Best_Before = '10.11.2018' UNION SELECT Name FROM Products WHERE Dining = 2 AND Best_Before = '10.11.2018'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Present a unified table showing the names of prepared meals and takeaway products both with a best before date of '10.11.2018'.",
          "sql_queries": [
            "SELECT Name FROM Products WHERE Best_Before = '10.11.2018' AND Dining IN (1, 2)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "List prepared meals and takeaway products, separated by categories, both having a best before date of '10.11.2018'.",
          "sql_queries": [
            "SELECT TypeName, Name\nFROM Products\nJOIN FoodTypes ON Products.Dining = FoodTypes.FoodTypeID\nWHERE Best_Before = '10.11.2018' AND TypeName IN ('Prepared Meal', 'Takeaway')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Generate a table displaying all products (prepared meals and takeaways) whose best before date is '10.11.2018', categorized by type.",
          "sql_queries": [
            "SELECT ft.TypeName, p.Name, p.Best_Before \nFROM Products p \nJOIN FoodTypes ft ON p.Dining = ft.FoodTypeID \nWHERE p.Best_Before = '10.11.2018' AND ft.FoodTypeID IN (1, 2)"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.6,
        "f1_score": 0.7499999999999999,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_1tab_ref_dining/attachment_1tab_ref_dining.sqlite",
      "db_dump": "CREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    EmailAddress TEXT,\n    PhoneNumber TEXT\n);\nCREATE TABLE FoodTypes(\n    FoodTypeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    TypeName TEXT\n);\nCREATE TABLE Orders(\n    OrderID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    TotalAmount NUMERIC,\n    OrderDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID),\n    FOREIGN KEY(OrderID) REFERENCES Products(ProductID)\n);\nCREATE TABLE Products(\n    ProductID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Dining INT DEFAULT 0 , -- 0=None, 1=Meals Prepared On Site, 2=Takeaway, 3=Other\n    Best_Before TEXT,\n    FOREIGN KEY(Dining) REFERENCES FoodTypes(FoodTypeID)\n);\n\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,EmailAddress,PhoneNumber) VALUES (1,'John','Smith','johnsmith@example.com','+123456789'),(2,'Jane','Doe','janedoe@example.com','+098765432');\nINSERT INTO \"FoodTypes\" (FoodTypeID,TypeName) VALUES (1,'Prepared Meal'),(2,'Takeaway');\nINSERT INTO \"Orders\" (OrderID,CustomerID,TotalAmount,OrderDate) VALUES (1,1,100,'2024-03-13 11:03:54'),(2,2,150,'2024-03-13 11:03:54');\nINSERT INTO \"Products\" (ProductID,Name,Dining,Best_Before) VALUES (1,'Pizza',1,'10.11.2018'),(2,'Burger',1,'11.11.2018'),(3,'Salad',2,'10.11.2018'),(4,'Coffee',2,'12.11.2018');\n",
      "question": "List all prepared meals and also list takeaway products with a best before date of 10.11.2018. Show them in one table.",
      "gold_queries": [
        "SELECT Products.name \r\nFROM FoodTypes JOIN Products ON FoodTypes.FoodTypeID = Products.Dining\r\nWHERE FoodTypes.TypeName = \"Prepared Meal\" OR FoodTypes.TypeName = \"Takeaway\" AND Products.Best_Before = \"10.11.2018\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Retrieve products where Dining is 1 and products where Dining is 2 and Best_Before = '10.11.2018', combining the results into a single table.",
          "sql_queries": [
            "SELECT Name FROM Products WHERE Dining = 1 UNION SELECT Name FROM Products WHERE Dining = 2 AND Best_Before = '10.11.2018'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Select all rows from Products where Dining is 1, and all rows where Dining is 2 and Best_Before = '10.11.2018', presenting them in a combined table.",
          "sql_queries": [
            "SELECT Name, Dining, Best_Before FROM Products WHERE Dining = 1 UNION SELECT Name, Dining, Best_Before FROM Products WHERE Dining = 2 AND Best_Before = '10.11.2018'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Display a joint listing of all products categorized as \"Prepared Meals\" and all takeaway products with a specific expiration date (\"10.11.2018\").",
          "sql_queries": [
            "SELECT Products.Name \nFROM Products \nJOIN FoodTypes ON Products.Dining = FoodTypes.FoodTypeID \nWHERE FoodTypes.TypeName = 'Prepared Meal' \nUNION \nSELECT Name \nFROM Products \nWHERE Dining = 2 AND Best_Before = '10.11.2018'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.6666666666666666,
        "f1_score": 0.8,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_1tab_ref_dining/attachment_1tab_ref_dining.sqlite",
      "db_dump": "CREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    EmailAddress TEXT,\n    PhoneNumber TEXT\n);\nCREATE TABLE FoodTypes(\n    FoodTypeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    TypeName TEXT\n);\nCREATE TABLE Orders(\n    OrderID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    TotalAmount NUMERIC,\n    OrderDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID),\n    FOREIGN KEY(OrderID) REFERENCES Products(ProductID)\n);\nCREATE TABLE Products(\n    ProductID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Dining INT DEFAULT 0 , -- 0=None, 1=Meals Prepared On Site, 2=Takeaway, 3=Other\n    Best_Before TEXT,\n    FOREIGN KEY(Dining) REFERENCES FoodTypes(FoodTypeID)\n);\n\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,EmailAddress,PhoneNumber) VALUES (1,'John','Smith','johnsmith@example.com','+123456789'),(2,'Jane','Doe','janedoe@example.com','+098765432');\nINSERT INTO \"FoodTypes\" (FoodTypeID,TypeName) VALUES (1,'Prepared Meal'),(2,'Takeaway');\nINSERT INTO \"Orders\" (OrderID,CustomerID,TotalAmount,OrderDate) VALUES (1,1,100,'2024-03-13 11:03:54'),(2,2,150,'2024-03-13 11:03:54');\nINSERT INTO \"Products\" (ProductID,Name,Dining,Best_Before) VALUES (1,'Pizza',1,'10.11.2018'),(2,'Burger',1,'11.11.2018'),(3,'Salad',2,'10.11.2018'),(4,'Coffee',2,'12.11.2018');\n",
      "question": "Show me prepared meals and takeaway products with a best before date of 10.11.2018. Show them in one table.",
      "gold_queries": [
        "SELECT Products.name \r\nFROM FoodTypes JOIN Products ON FoodTypes.FoodTypeID = Products.Dining\r\nWHERE (FoodTypes.TypeName = \"Prepared Meal\" OR FoodTypes.TypeName = \"Takeaway\") AND Products.Best_Before = \"10.11.2018\"",
        "SELECT Products.name \r\nFROM FoodTypes JOIN Products ON FoodTypes.FoodTypeID = Products.Dining\r\nWHERE FoodTypes.TypeName = \"Prepared Meal\" OR FoodTypes.TypeName = \"Takeaway\" AND Products.Best_Before = \"10.11.2018\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "SELECT DISTINCT p.Name",
          "sql_queries": [
            "SELECT DISTINCT p.Name FROM Products p\n"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "WHERE Dining IN (1,2) AND Best_Before = '10.11.2018'",
          "sql_queries": [
            "SELECT Name FROM Products WHERE Dining IN (1,2) AND Best_Before = '10.11.2018'"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "SELECT p.Name",
          "sql_queries": [
            "SELECT p.Name\nFROM Products p"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "JOIN FoodTypes ft ON p.Dining = ft.FoodTypeID",
          "sql_queries": [
            "SELECT p.Name, ft.TypeName\nFROM Products p\nJOIN FoodTypes ft ON p.Dining = ft.FoodTypeID"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "WHERE ft.TypeName IN ('Prepared Meal', 'Takeaway') AND p.Best_Before = '10.11.2018'",
          "sql_queries": [
            "SELECT p.Name\nFROM Products p\nJOIN FoodTypes ft ON p.Dining = ft.FoodTypeID\nWHERE ft.TypeName IN ('Prepared Meal', 'Takeaway') AND p.Best_Before = '10.11.2018'"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "FROM Products p",
          "sql_queries": [
            "SELECT p.Name, p.Dining, p.Best_Before FROM Products p"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "WHERE ft.TypeName IN ('Prepared Meal', 'Takeaway')",
          "sql_queries": [
            "SELECT p.Name, ft.TypeName\nFROM Products p\nJOIN FoodTypes ft ON p.Dining = ft.FoodTypeID\nWHERE ft.TypeName IN ('Prepared Meal', 'Takeaway')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "FROM Products",
          "sql_queries": [
            "SELECT Name FROM Products"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "SELECT Products.Name",
          "sql_queries": [
            "SELECT Products.Name\n"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT Products.Name\n",
                "original_exception": "no such column: Products.Name"
              }
            ],
            "all_found": false
          }
        },
        {
          "interpretation": "AND p.Best_Before = '10.11.2018'",
          "sql_queries": [
            "SELECT p.Name \nFROM Products p \nWHERE p.Best_Before = '10.11.2018'"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.3,
        "f1_score": 0.37499999999999994,
        "num_queries": 10,
        "num_unique_queries": 10,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [
          {
            "query": "SELECT Products.Name\n",
            "original_exception": "no such column: Products.Name"
          }
        ],
        "all_found": false
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_1tab_val_activity/attachment_1tab_val_activity.sqlite",
      "db_dump": "CREATE TABLE Activities(\n    ID INTEGER PRIMARY KEY,\n    ActivityName TEXT UNIQUE);\nCREATE TABLE Locations(\n    ID INTEGER PRIMARY KEY,\n    LocationName TEXT UNIQUE);\nCREATE TABLE Markets(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Activity TEXT,\n    Location TEXT);\nCREATE TABLE Tourists(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Activity TEXT,\n    Location TEXT);\nCREATE TABLE VisitRecords(\n    ID INTEGER PRIMARY KEY,\n    VisitorID INTEGER,\n    TouristAttractionID INTEGER,\n    LocalMarketID INTEGER,\n    FOREIGN KEY (VisitorID) REFERENCES Visitors(ID),\n    FOREIGN KEY (TouristAttractionID) REFERENCES Tourists(ID),\n    FOREIGN KEY (LocalMarketID) REFERENCES Markets(ID));\nCREATE TABLE Visitors(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    DateOfVisit DATETIME);\n\nINSERT INTO \"Activities\" (ID,ActivityName) VALUES (1,'The Eiffel Tower'),(2,'Colosseum'),(3,'Statue of Liberty'),(4,'Great Wall of China'),(5,'Christ the Redeemer');\nINSERT INTO \"Locations\" (ID,LocationName) VALUES (1,'Paris'),(2,'Rome'),(3,'New York City'),(4,'Beijing'),(5,'Rio de Janeiro');\nINSERT INTO \"Markets\" (ID,Name,Activity,Location) VALUES (1,'Central Food Market','Local Market','Portobello'),(2,'Downtown Groceries','Local Market','Somewhere Else'),(3,'Harbor Bazaar','Local Market','Another Place'),(4,'Uptown Fare','Local Market','Yet Another Place'),(5,'Riverfront Pantry','Local Market','A Different Place');\nINSERT INTO \"Tourists\" (ID,Name,Activity,Location) VALUES (1,'John Doe','Tourist Attraction','Portobello'),(2,'Jane Smith','Tourist Attraction','Somewhere Else'),(3,'Alice Johnson','Local Market','Portobello'),(4,'Bob Brown','Local Market','Somewhere Else'),(5,'Charlie Davis','Tourist Attraction','Another Place');\nINSERT INTO \"VisitRecords\" (ID,VisitorID,TouristAttractionID,LocalMarketID) VALUES (1,1,1,1),(2,1,2,2),(3,2,3,3),(4,2,4,4),(5,3,5,5);\nINSERT INTO \"Visitors\" (ID,Name,DateOfVisit) VALUES (1,'Michael Thompson','2023-01-01 10:00:00'),(2,'Emily Watson','2023-01-02 12:00:00'),(3,'David Jackson','2023-01-03 14:00:00'),(4,'Sophia King','2023-01-04 16:00:00'),(5,'Liam Scott','2023-01-05 18:00:00');\n",
      "question": "What tourists visited tourist attractions at Portobello and what tourists visited local markets in the same location? Show them in one table.",
      "gold_queries": [
        "SELECT Tourists.Name \r\nFROM Tourists\r\nWHERE (Tourists.Activity = \"Tourist Attraction\" OR Tourists.Activity = \"Local Market\") AND Tourists.Location = \"Portobello\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Return a single table that combines information about tourists who visited Portobello tourist attractions and tourists who visited Portobello local markets.",
          "sql_queries": [
            "SELECT Tourists.Name, Tourists.Activity\nFROM Tourists\nJOIN VisitRecords ON Tourists.ID = VisitRecords.VisitorID\nJOIN Markets ON VisitRecords.LocalMarketID = Markets.ID\nWHERE Markets.Location = 'Portobello'\nUNION\nSELECT Tourists.Name, Tourists.Activity\nFROM Tourists\nJOIN VisitRecords ON Tourists.ID = VisitRecords.TouristAttractionID\nJOIN Markets ON Tourists.Location = Markets.Location\nWHERE Markets.Location = 'Portobello'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Show a table with two columns, one for tourists who visited Portobello tourist attractions and one for tourists who visited Portobello local markets.",
          "sql_queries": [
            "SELECT \n    T1.Name AS TouristAttractionVisitor,\n    T2.Name AS LocalMarketVisitor\nFROM \n    Tourists T1\nLEFT JOIN \n    Tourists T2 \nON \n    T1.Activity = T2.Activity \nWHERE \n    T1.Location = 'Portobello' AND T1.Activity = 'Tourist Attraction'\n    AND T2.Location = 'Portobello' AND T2.Activity = 'Local Market'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Identify the tourists who visited both tourist attractions and local markets in Portobello.",
          "sql_queries": [
            "SELECT T.Name\nFROM Tourists T\nJOIN VisitRecords VR ON T.ID = VR.TouristAttractionID\nWHERE T.Activity = 'Tourist Attraction' AND T.Location = 'Portobello'\nINTERSECT\nSELECT T.Name\nFROM Tourists T\nJOIN VisitRecords VR ON T.ID = VR.LocalMarketID\nWHERE T.Activity = 'Local Market' AND T.Location = 'Portobello'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all tourists who visited either a tourist attraction or a local market in Portobello, regardless of whether they visited both.",
          "sql_queries": [
            "SELECT DISTINCT Tourists.Name \nFROM Tourists \nJOIN VisitRecords ON Tourists.ID = VisitRecords.TouristAttractionID OR Tourists.ID = VisitRecords.LocalMarketID \nJOIN Markets ON VisitRecords.LocalMarketID = Markets.ID \nWHERE Markets.Location = 'Portobello' \nUNION \nSELECT DISTINCT Tourists.Name \nFROM Tourists \nJOIN VisitRecords ON Tourists.ID = VisitRecords.TouristAttractionID \nJOIN Activities ON VisitRecords.TouristAttractionID = Activities.ID \nWHERE Tourists.Location = 'Portobello'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_1tab_val_activity/attachment_1tab_val_activity.sqlite",
      "db_dump": "CREATE TABLE Activities(\n    ID INTEGER PRIMARY KEY,\n    ActivityName TEXT UNIQUE);\nCREATE TABLE Locations(\n    ID INTEGER PRIMARY KEY,\n    LocationName TEXT UNIQUE);\nCREATE TABLE Markets(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Activity TEXT,\n    Location TEXT);\nCREATE TABLE Tourists(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Activity TEXT,\n    Location TEXT);\nCREATE TABLE VisitRecords(\n    ID INTEGER PRIMARY KEY,\n    VisitorID INTEGER,\n    TouristAttractionID INTEGER,\n    LocalMarketID INTEGER,\n    FOREIGN KEY (VisitorID) REFERENCES Visitors(ID),\n    FOREIGN KEY (TouristAttractionID) REFERENCES Tourists(ID),\n    FOREIGN KEY (LocalMarketID) REFERENCES Markets(ID));\nCREATE TABLE Visitors(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    DateOfVisit DATETIME);\n\nINSERT INTO \"Activities\" (ID,ActivityName) VALUES (1,'The Eiffel Tower'),(2,'Colosseum'),(3,'Statue of Liberty'),(4,'Great Wall of China'),(5,'Christ the Redeemer');\nINSERT INTO \"Locations\" (ID,LocationName) VALUES (1,'Paris'),(2,'Rome'),(3,'New York City'),(4,'Beijing'),(5,'Rio de Janeiro');\nINSERT INTO \"Markets\" (ID,Name,Activity,Location) VALUES (1,'Central Food Market','Local Market','Portobello'),(2,'Downtown Groceries','Local Market','Somewhere Else'),(3,'Harbor Bazaar','Local Market','Another Place'),(4,'Uptown Fare','Local Market','Yet Another Place'),(5,'Riverfront Pantry','Local Market','A Different Place');\nINSERT INTO \"Tourists\" (ID,Name,Activity,Location) VALUES (1,'John Doe','Tourist Attraction','Portobello'),(2,'Jane Smith','Tourist Attraction','Somewhere Else'),(3,'Alice Johnson','Local Market','Portobello'),(4,'Bob Brown','Local Market','Somewhere Else'),(5,'Charlie Davis','Tourist Attraction','Another Place');\nINSERT INTO \"VisitRecords\" (ID,VisitorID,TouristAttractionID,LocalMarketID) VALUES (1,1,1,1),(2,1,2,2),(3,2,3,3),(4,2,4,4),(5,3,5,5);\nINSERT INTO \"Visitors\" (ID,Name,DateOfVisit) VALUES (1,'Michael Thompson','2023-01-01 10:00:00'),(2,'Emily Watson','2023-01-02 12:00:00'),(3,'David Jackson','2023-01-03 14:00:00'),(4,'Sophia King','2023-01-04 16:00:00'),(5,'Liam Scott','2023-01-05 18:00:00');\n",
      "question": "List all tourists that visited tourist attractions and also list tourists that visited local markets in Portobello. Show them in one table.",
      "gold_queries": [
        "SELECT Tourists.Name \r\nFROM Tourists\r\nWHERE Tourists.Activity = \"Tourist Attraction\" OR Tourists.Activity = \"Local Market\" AND Tourists.Location = \"Portobello\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Extract a combined list of tourists who interacted with tourist attractions and those who visited local markets in Portobello, displaying the information in a single table.",
          "sql_queries": [
            "SELECT Name FROM Tourists WHERE Activity = 'Tourist Attraction' AND Location = 'Portobello'\nUNION\nSELECT Name FROM Tourists WHERE Activity = 'Local Market' AND Location = 'Portobello'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Find all tourists who visited tourist attractions and also visited local markets located in Portobello, presenting the results as a unified table.",
          "sql_queries": [
            "SELECT Name FROM Tourists WHERE ID IN (SELECT TouristAttractionID FROM VisitRecords) INTERSECT SELECT Name FROM Tourists WHERE Location = 'Portobello' AND ID IN (SELECT LocalMarketID FROM VisitRecords)"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all tourists who visited tourist attractions and separately list tourists who visited local markets in Portobello, combining them into a single table.",
          "sql_queries": [
            "SELECT T1.Name FROM Tourists AS T1 INNER JOIN VisitRecords AS T2 ON T1.ID = T2.TouristAttractionID UNION SELECT T1.Name FROM Tourists AS T1 INNER JOIN VisitRecords AS T2 ON T1.ID = T2.LocalMarketID WHERE T1.Location = 'Portobello'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_1tab_val_activity/attachment_1tab_val_activity.sqlite",
      "db_dump": "CREATE TABLE Activities(\n    ID INTEGER PRIMARY KEY,\n    ActivityName TEXT UNIQUE);\nCREATE TABLE Locations(\n    ID INTEGER PRIMARY KEY,\n    LocationName TEXT UNIQUE);\nCREATE TABLE Markets(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Activity TEXT,\n    Location TEXT);\nCREATE TABLE Tourists(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Activity TEXT,\n    Location TEXT);\nCREATE TABLE VisitRecords(\n    ID INTEGER PRIMARY KEY,\n    VisitorID INTEGER,\n    TouristAttractionID INTEGER,\n    LocalMarketID INTEGER,\n    FOREIGN KEY (VisitorID) REFERENCES Visitors(ID),\n    FOREIGN KEY (TouristAttractionID) REFERENCES Tourists(ID),\n    FOREIGN KEY (LocalMarketID) REFERENCES Markets(ID));\nCREATE TABLE Visitors(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    DateOfVisit DATETIME);\n\nINSERT INTO \"Activities\" (ID,ActivityName) VALUES (1,'The Eiffel Tower'),(2,'Colosseum'),(3,'Statue of Liberty'),(4,'Great Wall of China'),(5,'Christ the Redeemer');\nINSERT INTO \"Locations\" (ID,LocationName) VALUES (1,'Paris'),(2,'Rome'),(3,'New York City'),(4,'Beijing'),(5,'Rio de Janeiro');\nINSERT INTO \"Markets\" (ID,Name,Activity,Location) VALUES (1,'Central Food Market','Local Market','Portobello'),(2,'Downtown Groceries','Local Market','Somewhere Else'),(3,'Harbor Bazaar','Local Market','Another Place'),(4,'Uptown Fare','Local Market','Yet Another Place'),(5,'Riverfront Pantry','Local Market','A Different Place');\nINSERT INTO \"Tourists\" (ID,Name,Activity,Location) VALUES (1,'John Doe','Tourist Attraction','Portobello'),(2,'Jane Smith','Tourist Attraction','Somewhere Else'),(3,'Alice Johnson','Local Market','Portobello'),(4,'Bob Brown','Local Market','Somewhere Else'),(5,'Charlie Davis','Tourist Attraction','Another Place');\nINSERT INTO \"VisitRecords\" (ID,VisitorID,TouristAttractionID,LocalMarketID) VALUES (1,1,1,1),(2,1,2,2),(3,2,3,3),(4,2,4,4),(5,3,5,5);\nINSERT INTO \"Visitors\" (ID,Name,DateOfVisit) VALUES (1,'Michael Thompson','2023-01-01 10:00:00'),(2,'Emily Watson','2023-01-02 12:00:00'),(3,'David Jackson','2023-01-03 14:00:00'),(4,'Sophia King','2023-01-04 16:00:00'),(5,'Liam Scott','2023-01-05 18:00:00');\n",
      "question": "Provide me with the tourists that visited tourist attractions and local markets in Portobello. Show them in one table.",
      "gold_queries": [
        "SELECT Tourists.Name \r\nFROM Tourists\r\nWHERE (Tourists.Activity = \"Tourist Attraction\" OR Tourists.Activity = \"Local Market\") AND Tourists.Location = \"Portobello\"",
        "SELECT Tourists.Name \r\nFROM Tourists\r\nWHERE Tourists.Activity = \"Tourist Attraction\" OR Tourists.Activity = \"Local Market\" AND Tourists.Location = \"Portobello\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Tourists who visited a local market in Portobello and a tourist attraction, regardless of whether that attraction was in Portobello.",
          "sql_queries": [
            "SELECT DISTINCT T.Name\nFROM Tourists T\nJOIN VisitRecords VR ON T.ID = VR.VisitorID\nJOIN Markets M ON VR.LocalMarketID = M.ID\nWHERE M.Location = 'Portobello' AND T.Activity = 'Local Market'\nINTERSECT\nSELECT DISTINCT T.Name\nFROM Tourists T\nJOIN VisitRecords VR ON T.ID = VR.TouristAttractionID\nWHERE T.Activity = 'Tourist Attraction'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Tourists who visited a tourist attraction in Portobello and a local market in Portobello, regardless of the specific attraction or market.",
          "sql_queries": [
            "SELECT DISTINCT T.Name\nFROM Tourists T\nINNER JOIN VisitRecords VR ON T.ID = VR.VisitorID\nWHERE T.Activity = 'Tourist Attraction' AND T.Location = 'Portobello'\nINTERSECT\nSELECT DISTINCT T.Name\nFROM Tourists T\nINNER JOIN VisitRecords VR ON T.ID = VR.VisitorID\nWHERE T.Activity = 'Local Market' AND T.Location = 'Portobello'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Tourists whose visited Portobello and made visits to both a tourist attraction and a local market, even if they were in different locations within Portobello.",
          "sql_queries": [
            "SELECT DISTINCT T.Name\nFROM Tourists T\nJOIN VisitRecords VR ON T.ID = VR.TouristAttractionID OR T.ID = VR.LocalMarketID\nWHERE T.Location = 'Portobello'\nAND EXISTS (\n    SELECT 1 FROM VisitRecords VR2 WHERE VR2.TouristAttractionID = T.ID\n)\nAND EXISTS (\n    SELECT 1 FROM VisitRecords VR3 WHERE VR3.LocalMarketID = T.ID\n)"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Tourists who visited both a tourist attraction and a local market in Portobello, regardless of the specific tourist attraction or local market.",
          "sql_queries": [
            "SELECT Name FROM Tourists WHERE ID IN (SELECT TouristAttractionID FROM VisitRecords WHERE VisitorID IN (SELECT ID FROM Visitors)) AND ID IN (SELECT LocalMarketID FROM VisitRecords WHERE VisitorID IN (SELECT ID FROM Visitors)) AND Location = 'Portobello'"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Tourists who visited both 'The Eiffel Tower' in Portobello and a local market in Portobello.",
          "sql_queries": [
            "SELECT DISTINCT T.Name\nFROM Tourists T\nJOIN VisitRecords VR ON T.ID = VR.TouristAttractionID\nJOIN Markets M ON VR.LocalMarketID = M.ID\nWHERE T.Activity = 'Tourist Attraction' AND T.Location = 'Portobello' AND T.Name IN (\n    SELECT Name\n    FROM Tourists\n    WHERE Activity = 'Local Market' AND Location = 'Portobello'\n)"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.4,
        "f1_score": 0.4444444444444445,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_1tab_val_beverage_professional/attachment_1tab_val_beverage_professional.sqlite",
      "db_dump": "CREATE TABLE Beverages (\n    id INTEGER PRIMARY KEY,\n    Name TEXT,\n    Type TEXT ,\n    Price REAL\n);\nCREATE TABLE Employees (\n    id INTEGER PRIMARY KEY,\n    Professional_id INTEGER,\n    Date_of_birth DATE,\n    Email TEXT,\n    Phone_number VARCHAR(15),\n    FOREIGN KEY (Professional_id) REFERENCES Professionals(id)\n);\nCREATE TABLE Orders (\n    id INTEGER PRIMARY KEY,\n    Ordered_by INTEGER,\n    Item_name TEXT,\n    Quantity INTEGER,\n    Date_ordered TIMESTAMP,\n    Total_amount REAL,\n    FOREIGN KEY (Ordered_by) REFERENCES Reservations(id)\n);\nCREATE TABLE Professionals (\n    id INTEGER PRIMARY KEY,\n    Position TEXT \n, FullName TEXT);\nCREATE TABLE Reservations (\n    id INTEGER PRIMARY KEY,\n    Customer_id INTEGER,\n    Table_Number INTEGER,\n    Reservation_date TIMESTAMP,\n    Party_size INTEGER,\n    Total_cost REAL,\n    Foreign Key (Customer_id) References Customers(id)\n);\nCREATE TABLE Restaurants (\n    id INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT,\n    Opening_hours TEXT\n);\n\nINSERT INTO \"Beverages\" (id,Name,Type,Price) VALUES (1,'Coca Cola','Soft Drink',2.99),(2,'Red Wine','Wine',8.99),(3,'Whiskey Sour','Cocktail',7.99),(4,'Beer','Alcoholic Beverage',5.99),(5,'Champagne','Sparkling Wine',15.99),(6,'Pinot Noir','Wine',10.99),(7,'Old Fashioned','Cocktail',8.99);\nINSERT INTO \"Employees\" (id,Professional_id,Date_of_birth,Email,Phone_number) VALUES (1,1,'2000-01-01','john.doe@example.com','+1234567890'),(2,2,'2001-02-02','jane.smith@example.com','+0987654321'),(3,3,'1999-03-03','alice.williams@example.com','+1112223334'),(4,4,'1998-04-04','bob.johnson@example.com','+44332211556'),(5,5,'1997-05-05','alex.martinez@example.com','+7788990011'),(6,6,'1996-06-06','alex.turner@example.com','+2233445566');\nINSERT INTO \"Orders\" (id,Ordered_by,Item_name,Quantity,Date_ordered,Total_amount) VALUES (1,1,'Steak',2,'2023-01-01 19:30:00',70.0),(2,2,'Pizza Margherita',3,'2023-01-02 20:30:00',45.0),(3,3,'White Burgundy',4,'2023-01-03 19:30:00',53.96),(4,4,'Bloody Mary',2,'2023-01-04 20:30:00',17.98);\nINSERT INTO \"Professionals\" (id,Position,FullName) VALUES (1,'Manager','John Doe'),(2,'Chef','Jane Smith'),(3,'Sommelier','Alice Williams'),(4,'Bartender','Bob Johnson'),(5,'Sommelier','Alex Martinez'),(6,'Bartender','Alex Turner');\nINSERT INTO \"Reservations\" (id,Customer_id,Table_Number,Reservation_date,Party_size,Total_cost) VALUES (1,1,1,'2023-01-01 19:00:00',4,200.0),(2,2,2,'2023-01-02 20:00:00',2,100.0),(3,3,3,'2023-01-03 19:00:00',6,300.0),(4,4,4,'2023-01-04 20:00:00',5,250.0);\nINSERT INTO \"Restaurants\" (id,Name,Location,Opening_hours) VALUES (1,'The Fancy Bistro','New York City','Monday - Sunday: 10 AM - 11 PM'),(2,'Le Jardin Secret','Paris','Monday - Friday: 10 AM - 10 PM, Saturday - Sunday: 11 AM - 11 PM');\n",
      "question": "List all sommeliers with the first name of Alex and all bartenders with first name of Alex Show them in one table.",
      "gold_queries": [
        "SELECT Professionals.FullName\r\nFROM Professionals\r\nWHERE (Professionals.Position = \"Sommelier\" OR Professionals.Position = \"Bartender\") AND Professionals.FullName LIKE \"Alex %\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Union",
          "sql_queries": [
            "SELECT Name FROM Beverages UNION SELECT Name FROM Restaurants"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Select 'FullName' from Professionals where Position = 'Bartender' and SUBSTR(FullName,1,4) = 'Alex'",
          "sql_queries": [
            "SELECT FullName FROM Professionals WHERE Position = 'Bartender' AND SUBSTR(FullName, 1, 4) = 'Alex'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Select 'FullName' from Professionals where Position = 'Sommelier' and SUBSTR(FullName,1,4) = 'Alex'",
          "sql_queries": [
            "SELECT FullName FROM Professionals WHERE Position = 'Sommelier' AND SUBSTR(FullName,1,4) = 'Alex'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_1tab_val_beverage_professional/attachment_1tab_val_beverage_professional.sqlite",
      "db_dump": "CREATE TABLE Beverages (\n    id INTEGER PRIMARY KEY,\n    Name TEXT,\n    Type TEXT ,\n    Price REAL\n);\nCREATE TABLE Employees (\n    id INTEGER PRIMARY KEY,\n    Professional_id INTEGER,\n    Date_of_birth DATE,\n    Email TEXT,\n    Phone_number VARCHAR(15),\n    FOREIGN KEY (Professional_id) REFERENCES Professionals(id)\n);\nCREATE TABLE Orders (\n    id INTEGER PRIMARY KEY,\n    Ordered_by INTEGER,\n    Item_name TEXT,\n    Quantity INTEGER,\n    Date_ordered TIMESTAMP,\n    Total_amount REAL,\n    FOREIGN KEY (Ordered_by) REFERENCES Reservations(id)\n);\nCREATE TABLE Professionals (\n    id INTEGER PRIMARY KEY,\n    Position TEXT \n, FullName TEXT);\nCREATE TABLE Reservations (\n    id INTEGER PRIMARY KEY,\n    Customer_id INTEGER,\n    Table_Number INTEGER,\n    Reservation_date TIMESTAMP,\n    Party_size INTEGER,\n    Total_cost REAL,\n    Foreign Key (Customer_id) References Customers(id)\n);\nCREATE TABLE Restaurants (\n    id INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT,\n    Opening_hours TEXT\n);\n\nINSERT INTO \"Beverages\" (id,Name,Type,Price) VALUES (1,'Coca Cola','Soft Drink',2.99),(2,'Red Wine','Wine',8.99),(3,'Whiskey Sour','Cocktail',7.99),(4,'Beer','Alcoholic Beverage',5.99),(5,'Champagne','Sparkling Wine',15.99),(6,'Pinot Noir','Wine',10.99),(7,'Old Fashioned','Cocktail',8.99);\nINSERT INTO \"Employees\" (id,Professional_id,Date_of_birth,Email,Phone_number) VALUES (1,1,'2000-01-01','john.doe@example.com','+1234567890'),(2,2,'2001-02-02','jane.smith@example.com','+0987654321'),(3,3,'1999-03-03','alice.williams@example.com','+1112223334'),(4,4,'1998-04-04','bob.johnson@example.com','+44332211556'),(5,5,'1997-05-05','alex.martinez@example.com','+7788990011'),(6,6,'1996-06-06','alex.turner@example.com','+2233445566');\nINSERT INTO \"Orders\" (id,Ordered_by,Item_name,Quantity,Date_ordered,Total_amount) VALUES (1,1,'Steak',2,'2023-01-01 19:30:00',70.0),(2,2,'Pizza Margherita',3,'2023-01-02 20:30:00',45.0),(3,3,'White Burgundy',4,'2023-01-03 19:30:00',53.96),(4,4,'Bloody Mary',2,'2023-01-04 20:30:00',17.98);\nINSERT INTO \"Professionals\" (id,Position,FullName) VALUES (1,'Manager','John Doe'),(2,'Chef','Jane Smith'),(3,'Sommelier','Alice Williams'),(4,'Bartender','Bob Johnson'),(5,'Sommelier','Alex Martinez'),(6,'Bartender','Alex Turner');\nINSERT INTO \"Reservations\" (id,Customer_id,Table_Number,Reservation_date,Party_size,Total_cost) VALUES (1,1,1,'2023-01-01 19:00:00',4,200.0),(2,2,2,'2023-01-02 20:00:00',2,100.0),(3,3,3,'2023-01-03 19:00:00',6,300.0),(4,4,4,'2023-01-04 20:00:00',5,250.0);\nINSERT INTO \"Restaurants\" (id,Name,Location,Opening_hours) VALUES (1,'The Fancy Bistro','New York City','Monday - Sunday: 10 AM - 11 PM'),(2,'Le Jardin Secret','Paris','Monday - Friday: 10 AM - 10 PM, Saturday - Sunday: 11 AM - 11 PM');\n",
      "question": "Show me all sommeliers and bartenders called Alex Show them in one table.",
      "gold_queries": [
        "SELECT Professionals.FullName\r\nFROM Professionals\r\nWHERE (Professionals.Position = \"Sommelier\" OR Professionals.Position = \"Bartender\") AND Professionals.FullName LIKE \"Alex %\"",
        "SELECT Professionals.FullName\r\nFROM Professionals\r\nWHERE Professionals.Position = \"Sommelier\" OR Professionals.Position = \"Bartender\" AND Professionals.FullName LIKE \"Alex %\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Select a.FullName From Professionals a Inner Join Professionals b ON a.Position = 'Sommelier' AND b.Position = 'Bartender' WHERE a.FullName = 'Alex' OR b.FullName = 'Alex'",
          "sql_queries": [
            "SELECT a.FullName FROM Professionals a INNER JOIN Professionals b ON a.Position = 'Sommelier' AND b.Position = 'Bartender' WHERE a.FullName = 'Alex' OR b.FullName = 'Alex'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Select Distinct Professionals.FullName From Professionals WHERE Professionals.Position = 'Sommelier' OR Professionals.Position = 'Bartender'",
          "sql_queries": [
            "SELECT DISTINCT FullName FROM Professionals WHERE Position = 'Sommelier' OR Position = 'Bartender'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Select FullName From Professionals WHERE FullName = 'Alex' AND (Position = 'Sommelier' OR Position = 'Bartender')",
          "sql_queries": [
            "SELECT FullName FROM Professionals WHERE FullName = 'Alex' AND (Position = 'Sommelier' OR Position = 'Bartender')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_1tab_val_beverage_professional/attachment_1tab_val_beverage_professional.sqlite",
      "db_dump": "CREATE TABLE Beverages (\n    id INTEGER PRIMARY KEY,\n    Name TEXT,\n    Type TEXT ,\n    Price REAL\n);\nCREATE TABLE Employees (\n    id INTEGER PRIMARY KEY,\n    Professional_id INTEGER,\n    Date_of_birth DATE,\n    Email TEXT,\n    Phone_number VARCHAR(15),\n    FOREIGN KEY (Professional_id) REFERENCES Professionals(id)\n);\nCREATE TABLE Orders (\n    id INTEGER PRIMARY KEY,\n    Ordered_by INTEGER,\n    Item_name TEXT,\n    Quantity INTEGER,\n    Date_ordered TIMESTAMP,\n    Total_amount REAL,\n    FOREIGN KEY (Ordered_by) REFERENCES Reservations(id)\n);\nCREATE TABLE Professionals (\n    id INTEGER PRIMARY KEY,\n    Position TEXT \n, FullName TEXT);\nCREATE TABLE Reservations (\n    id INTEGER PRIMARY KEY,\n    Customer_id INTEGER,\n    Table_Number INTEGER,\n    Reservation_date TIMESTAMP,\n    Party_size INTEGER,\n    Total_cost REAL,\n    Foreign Key (Customer_id) References Customers(id)\n);\nCREATE TABLE Restaurants (\n    id INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT,\n    Opening_hours TEXT\n);\n\nINSERT INTO \"Beverages\" (id,Name,Type,Price) VALUES (1,'Coca Cola','Soft Drink',2.99),(2,'Red Wine','Wine',8.99),(3,'Whiskey Sour','Cocktail',7.99),(4,'Beer','Alcoholic Beverage',5.99),(5,'Champagne','Sparkling Wine',15.99),(6,'Pinot Noir','Wine',10.99),(7,'Old Fashioned','Cocktail',8.99);\nINSERT INTO \"Employees\" (id,Professional_id,Date_of_birth,Email,Phone_number) VALUES (1,1,'2000-01-01','john.doe@example.com','+1234567890'),(2,2,'2001-02-02','jane.smith@example.com','+0987654321'),(3,3,'1999-03-03','alice.williams@example.com','+1112223334'),(4,4,'1998-04-04','bob.johnson@example.com','+44332211556'),(5,5,'1997-05-05','alex.martinez@example.com','+7788990011'),(6,6,'1996-06-06','alex.turner@example.com','+2233445566');\nINSERT INTO \"Orders\" (id,Ordered_by,Item_name,Quantity,Date_ordered,Total_amount) VALUES (1,1,'Steak',2,'2023-01-01 19:30:00',70.0),(2,2,'Pizza Margherita',3,'2023-01-02 20:30:00',45.0),(3,3,'White Burgundy',4,'2023-01-03 19:30:00',53.96),(4,4,'Bloody Mary',2,'2023-01-04 20:30:00',17.98);\nINSERT INTO \"Professionals\" (id,Position,FullName) VALUES (1,'Manager','John Doe'),(2,'Chef','Jane Smith'),(3,'Sommelier','Alice Williams'),(4,'Bartender','Bob Johnson'),(5,'Sommelier','Alex Martinez'),(6,'Bartender','Alex Turner');\nINSERT INTO \"Reservations\" (id,Customer_id,Table_Number,Reservation_date,Party_size,Total_cost) VALUES (1,1,1,'2023-01-01 19:00:00',4,200.0),(2,2,2,'2023-01-02 20:00:00',2,100.0),(3,3,3,'2023-01-03 19:00:00',6,300.0),(4,4,4,'2023-01-04 20:00:00',5,250.0);\nINSERT INTO \"Restaurants\" (id,Name,Location,Opening_hours) VALUES (1,'The Fancy Bistro','New York City','Monday - Sunday: 10 AM - 11 PM'),(2,'Le Jardin Secret','Paris','Monday - Friday: 10 AM - 10 PM, Saturday - Sunday: 11 AM - 11 PM');\n",
      "question": "Show all sommeliers and also show all bartenders with first name of Alex. Show them in one table.",
      "gold_queries": [
        "SELECT Professionals.FullName\r\nFROM Professionals\r\nWHERE Professionals.Position = \"Sommelier\" OR Professionals.Position = \"Bartender\" AND Professionals.FullName LIKE \"Alex %\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Display all rows from \"Professionals\" where \"Position\" equals \"Sommelier\" or \"Bartender\" and \"FullName\" starts with \"Alex\".",
          "sql_queries": [
            "SELECT * FROM Professionals WHERE Position IN ('Sommelier', 'Bartender') AND FullName LIKE 'Alex%'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Output a unified view of professionals with \"Sommelier\" or \"Bartender\" positions and first name \"Alex\".",
          "sql_queries": [
            "SELECT FullName FROM Professionals WHERE Position IN ('Sommelier', 'Bartender') AND FullName LIKE 'Alex %'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Create a single table containing details of all sommeliers and bartenders named Alex.",
          "sql_queries": [
            "SELECT FullName, Position FROM Professionals WHERE (Position = 'Sommelier' OR Position = 'Bartender') AND FullName LIKE 'Alex%'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve a combined result set of sommeliers and bartenders named Alex.",
          "sql_queries": [
            "SELECT FullName FROM Professionals WHERE (Position = 'Sommelier' OR Position = 'Bartender') AND FullName LIKE 'Alex%'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_1tab_ref_construction_jobs/attachment_1tab_ref_construction_jobs.sqlite",
      "db_dump": "CREATE TABLE Applicants(\n    applicantID INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber CHAR(10),\n    resumePath TEXT);\nCREATE TABLE Construction_Jobs(\n    constructionJobID INTEGER PRIMARY KEY AUTOINCREMENT,\n    jobTitle TEXT,\n    jobDescription TEXT,\n    requiredSkills TEXT,\n    constructionJobType TEXT,\n    designSoftware TEXT,\n    FOREIGN KEY(designSoftware) REFERENCES Design_Software_Expertise(softwareName));\nCREATE TABLE Design_Software_Expertise(\n    softwareID INTEGER PRIMARY KEY AUTOINCREMENT,\n    softwareName TEXT UNIQUE);\nCREATE TABLE Employed_in_Construction_Jobs(\n    employedID INTEGER PRIMARY KEY AUTOINCREMENT,\n    applicantID INTEGER,\n    constructionJobID INTEGER,\n    startDate DATE,\n    endDate DATE,\n    FOREIGN KEY(applicantID) REFERENCES Applicants(applicantID),\n    FOREIGN KEY(constructionJobID) REFERENCES Construction_Jobs(constructionJobID));\nCREATE TABLE Employers(\n    employerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    companyName TEXT,\n    location TEXT);\n\nINSERT INTO \"Applicants\" (applicantID,firstName,lastName,email,phoneNumber,resumePath) VALUES (1,'John','Doe','john.doe@example.com','+1 (123) 456-7890','https://www.example.com/resume/johndoe.pdf'),(2,'Jane','Smith','jane.smith@example.com','+1 (123) 456-7891','https://www.example.com/resume/janesmith.pdf'),(3,'Alice','Johnson','alice.johnson@example.com','+1 (123) 456-7892','https://www.example.com/resume/alicejohnson.pdf'),(4,'Tom','Williams','tom.williams@example.com','+1 (123) 456-7893','https://www.example.com/resume/tomwilliams.pdf'),(5,'Lucy','Brown','lucy.brown@example.com','+1 (123) 456-7894','https://www.example.com/resume/lucybrown.pdf');\nINSERT INTO \"Construction_Jobs\" (constructionJobID,jobTitle,jobDescription,requiredSkills,constructionJobType,designSoftware) VALUES (1,'Senior Civil Engineer','Plan, design, and supervise construction projects.','Strong math and communication skills; Knowledge of building codes and regulations.','Civil Engineering','AutoCAD'),(2,'Civil Engineer','Plan, design, and supervise construction projects.','Strong math and communication skills; Knowledge of building codes and regulations.','Civil Engineering','Revit'),(3,'Senior Architect','Design buildings and spaces, ensuring functionality and aesthetics.','Creative thinking, attention to detail, and knowledge of architectural principles.','Architecture','AutoCAD'),(4,'Architect','Design buildings and spaces, ensuring functionality and aesthetics.','Creative thinking, attention to detail, and knowledge of architectural principles.','Architecture','Rhino');\nINSERT INTO \"Design_Software_Expertise\" (softwareID,softwareName) VALUES (1,'AutoCAD'),(2,'Revit'),(3,'Rhino'),(4,'SketchUp'),(5,'Adobe Illustrator');\nINSERT INTO \"Employed_in_Construction_Jobs\" (employedID,applicantID,constructionJobID,startDate,endDate) VALUES (1,1,1,'2023-01-15','2023-12-31'),(2,2,2,'2023-02-15','2023-12-31'),(3,3,3,'2023-03-15','2023-12-31'),(4,4,4,'2023-04-15','2023-12-31'),(5,5,5,'2023-05-15','2023-12-31');\nINSERT INTO \"Employers\" (employerID,companyName,location) VALUES (1,'CompanyA','New York'),(2,'CompanyB','Los Angeles'),(3,'CompanyC','Chicago'),(4,'CompanyD','Miami'),(5,'CompanyE','Houston');\n",
      "question": "Show civil engineering jobs and architecture jobs that use AutoCAD software. Show them in one table.",
      "gold_queries": [
        "SELECT Construction_Jobs.jobTitle \r\nFROM Construction_Jobs JOIN Design_Software_Expertise ON Construction_Jobs.designSoftware = Design_Software_Expertise.softwareName\r\nWHERE (Construction_Jobs.ConstructionJobType = \"Civil Engineering\" OR Construction_Jobs.ConstructionJobType = \"Architecture\") AND Design_Software_Expertise.softwareName = \"AutoCAD\"",
        "SELECT Construction_Jobs.jobTitle \r\nFROM Construction_Jobs JOIN Design_Software_Expertise ON Construction_Jobs.designSoftware = Design_Software_Expertise.softwareName\r\nWHERE Construction_Jobs.ConstructionJobType = \"Civil Engineering\" OR Construction_Jobs.ConstructionJobType = \"Architecture\" AND Design_Software_Expertise.softwareName = \"AutoCAD\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List all civil engineering and architecture jobs that require AutoCAD, in a single table, including relevant details such as job title, description, and required skills.",
          "sql_queries": [
            "SELECT jobTitle, jobDescription, requiredSkills \nFROM Construction_Jobs \nWHERE (constructionJobType = 'Civil Engineering' OR constructionJobType = 'Architecture') \nAND designSoftware = 'AutoCAD'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Combine data from Construction_Jobs and Design_Software_Expertise on the condition that constructionJobType is 'Civil Engineering' or 'Architecture' and  softwareName is 'AutoCAD'. Display the combined data as a single table.",
          "sql_queries": [
            "SELECT C.jobTitle, C.jobDescription, C.requiredSkills, C.constructionJobType, C.designSoftware, D.softwareName\nFROM Construction_Jobs C\nJOIN Design_Software_Expertise D ON C.designSoftware = D.softwareName\nWHERE C.constructionJobType IN ('Civil Engineering', 'Architecture') AND D.softwareName = 'AutoCAD'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve records from Construction_Jobs where jobTitle falls into either 'Civil Engineering' or 'Architecture' and designSoftware is 'AutoCAD'. Present these records in a single table.",
          "sql_queries": [
            "SELECT * FROM Construction_Jobs WHERE constructionJobType IN ('Civil Engineering', 'Architecture') AND designSoftware = 'AutoCAD'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_1tab_ref_construction_jobs/attachment_1tab_ref_construction_jobs.sqlite",
      "db_dump": "CREATE TABLE Applicants(\n    applicantID INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber CHAR(10),\n    resumePath TEXT);\nCREATE TABLE Construction_Jobs(\n    constructionJobID INTEGER PRIMARY KEY AUTOINCREMENT,\n    jobTitle TEXT,\n    jobDescription TEXT,\n    requiredSkills TEXT,\n    constructionJobType TEXT,\n    designSoftware TEXT,\n    FOREIGN KEY(designSoftware) REFERENCES Design_Software_Expertise(softwareName));\nCREATE TABLE Design_Software_Expertise(\n    softwareID INTEGER PRIMARY KEY AUTOINCREMENT,\n    softwareName TEXT UNIQUE);\nCREATE TABLE Employed_in_Construction_Jobs(\n    employedID INTEGER PRIMARY KEY AUTOINCREMENT,\n    applicantID INTEGER,\n    constructionJobID INTEGER,\n    startDate DATE,\n    endDate DATE,\n    FOREIGN KEY(applicantID) REFERENCES Applicants(applicantID),\n    FOREIGN KEY(constructionJobID) REFERENCES Construction_Jobs(constructionJobID));\nCREATE TABLE Employers(\n    employerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    companyName TEXT,\n    location TEXT);\n\nINSERT INTO \"Applicants\" (applicantID,firstName,lastName,email,phoneNumber,resumePath) VALUES (1,'John','Doe','john.doe@example.com','+1 (123) 456-7890','https://www.example.com/resume/johndoe.pdf'),(2,'Jane','Smith','jane.smith@example.com','+1 (123) 456-7891','https://www.example.com/resume/janesmith.pdf'),(3,'Alice','Johnson','alice.johnson@example.com','+1 (123) 456-7892','https://www.example.com/resume/alicejohnson.pdf'),(4,'Tom','Williams','tom.williams@example.com','+1 (123) 456-7893','https://www.example.com/resume/tomwilliams.pdf'),(5,'Lucy','Brown','lucy.brown@example.com','+1 (123) 456-7894','https://www.example.com/resume/lucybrown.pdf');\nINSERT INTO \"Construction_Jobs\" (constructionJobID,jobTitle,jobDescription,requiredSkills,constructionJobType,designSoftware) VALUES (1,'Senior Civil Engineer','Plan, design, and supervise construction projects.','Strong math and communication skills; Knowledge of building codes and regulations.','Civil Engineering','AutoCAD'),(2,'Civil Engineer','Plan, design, and supervise construction projects.','Strong math and communication skills; Knowledge of building codes and regulations.','Civil Engineering','Revit'),(3,'Senior Architect','Design buildings and spaces, ensuring functionality and aesthetics.','Creative thinking, attention to detail, and knowledge of architectural principles.','Architecture','AutoCAD'),(4,'Architect','Design buildings and spaces, ensuring functionality and aesthetics.','Creative thinking, attention to detail, and knowledge of architectural principles.','Architecture','Rhino');\nINSERT INTO \"Design_Software_Expertise\" (softwareID,softwareName) VALUES (1,'AutoCAD'),(2,'Revit'),(3,'Rhino'),(4,'SketchUp'),(5,'Adobe Illustrator');\nINSERT INTO \"Employed_in_Construction_Jobs\" (employedID,applicantID,constructionJobID,startDate,endDate) VALUES (1,1,1,'2023-01-15','2023-12-31'),(2,2,2,'2023-02-15','2023-12-31'),(3,3,3,'2023-03-15','2023-12-31'),(4,4,4,'2023-04-15','2023-12-31'),(5,5,5,'2023-05-15','2023-12-31');\nINSERT INTO \"Employers\" (employerID,companyName,location) VALUES (1,'CompanyA','New York'),(2,'CompanyB','Los Angeles'),(3,'CompanyC','Chicago'),(4,'CompanyD','Miami'),(5,'CompanyE','Houston');\n",
      "question": "What civil engineering jobs use AutoCAD and what architecture jobs use the same software? Show them in one table.",
      "gold_queries": [
        "SELECT Construction_Jobs.jobTitle \r\nFROM Construction_Jobs JOIN Design_Software_Expertise ON Construction_Jobs.designSoftware = Design_Software_Expertise.softwareName\r\nWHERE (Construction_Jobs.ConstructionJobType = \"Civil Engineering\" OR Construction_Jobs.ConstructionJobType = \"Architecture\") AND Design_Software_Expertise.softwareName = \"AutoCAD\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Select * FROM Construction_Jobs WHERE jobTitle LIKE '%Civil Engineer%' AND designSoftware = 'AutoCAD' UNION Select * FROM Construction_Jobs WHERE jobTitle LIKE '%Architect%' AND designSoftware = 'AutoCAD';",
          "sql_queries": [
            "SELECT * FROM Construction_Jobs WHERE jobTitle LIKE '%Civil Engineer%' AND designSoftware = 'AutoCAD' UNION SELECT * FROM Construction_Jobs WHERE jobTitle LIKE '%Architect%' AND designSoftware = 'AutoCAD'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Select c.jobTitle, c.designSoftware FROM Construction_Jobs c JOIN Design_Software_Expertise dse ON c.designSoftware = dse.softwareName JOIN Applicants a ON c.constructionJobID = a.applicantID  WHERE  dse.softwareName = 'AutoCAD' AND c.jobTitle LIKE '%Civil Engineer%' OR c.jobTitle LIKE '%Architect%';",
          "sql_queries": [
            "SELECT c.jobTitle, c.designSoftware \nFROM Construction_Jobs c \nJOIN Design_Software_Expertise dse ON c.designSoftware = dse.softwareName \nJOIN Employed_in_Construction_Jobs e ON c.constructionJobID = e.constructionJobID \nJOIN Applicants a ON e.applicantID = a.applicantID  \nWHERE dse.softwareName = 'AutoCAD' \nAND (c.jobTitle LIKE '%Civil Engineer%' OR c.jobTitle LIKE '%Architect%')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Select * FROM Construction_Jobs WHERE jobTitle LIKE '%Civil Engineer%' AND designSoftware = 'AutoCAD';",
          "sql_queries": [
            "SELECT * FROM Construction_Jobs WHERE jobTitle LIKE '%Civil Engineer%' AND designSoftware = 'AutoCAD'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_1tab_ref_construction_jobs/attachment_1tab_ref_construction_jobs.sqlite",
      "db_dump": "CREATE TABLE Applicants(\n    applicantID INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber CHAR(10),\n    resumePath TEXT);\nCREATE TABLE Construction_Jobs(\n    constructionJobID INTEGER PRIMARY KEY AUTOINCREMENT,\n    jobTitle TEXT,\n    jobDescription TEXT,\n    requiredSkills TEXT,\n    constructionJobType TEXT,\n    designSoftware TEXT,\n    FOREIGN KEY(designSoftware) REFERENCES Design_Software_Expertise(softwareName));\nCREATE TABLE Design_Software_Expertise(\n    softwareID INTEGER PRIMARY KEY AUTOINCREMENT,\n    softwareName TEXT UNIQUE);\nCREATE TABLE Employed_in_Construction_Jobs(\n    employedID INTEGER PRIMARY KEY AUTOINCREMENT,\n    applicantID INTEGER,\n    constructionJobID INTEGER,\n    startDate DATE,\n    endDate DATE,\n    FOREIGN KEY(applicantID) REFERENCES Applicants(applicantID),\n    FOREIGN KEY(constructionJobID) REFERENCES Construction_Jobs(constructionJobID));\nCREATE TABLE Employers(\n    employerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    companyName TEXT,\n    location TEXT);\n\nINSERT INTO \"Applicants\" (applicantID,firstName,lastName,email,phoneNumber,resumePath) VALUES (1,'John','Doe','john.doe@example.com','+1 (123) 456-7890','https://www.example.com/resume/johndoe.pdf'),(2,'Jane','Smith','jane.smith@example.com','+1 (123) 456-7891','https://www.example.com/resume/janesmith.pdf'),(3,'Alice','Johnson','alice.johnson@example.com','+1 (123) 456-7892','https://www.example.com/resume/alicejohnson.pdf'),(4,'Tom','Williams','tom.williams@example.com','+1 (123) 456-7893','https://www.example.com/resume/tomwilliams.pdf'),(5,'Lucy','Brown','lucy.brown@example.com','+1 (123) 456-7894','https://www.example.com/resume/lucybrown.pdf');\nINSERT INTO \"Construction_Jobs\" (constructionJobID,jobTitle,jobDescription,requiredSkills,constructionJobType,designSoftware) VALUES (1,'Senior Civil Engineer','Plan, design, and supervise construction projects.','Strong math and communication skills; Knowledge of building codes and regulations.','Civil Engineering','AutoCAD'),(2,'Civil Engineer','Plan, design, and supervise construction projects.','Strong math and communication skills; Knowledge of building codes and regulations.','Civil Engineering','Revit'),(3,'Senior Architect','Design buildings and spaces, ensuring functionality and aesthetics.','Creative thinking, attention to detail, and knowledge of architectural principles.','Architecture','AutoCAD'),(4,'Architect','Design buildings and spaces, ensuring functionality and aesthetics.','Creative thinking, attention to detail, and knowledge of architectural principles.','Architecture','Rhino');\nINSERT INTO \"Design_Software_Expertise\" (softwareID,softwareName) VALUES (1,'AutoCAD'),(2,'Revit'),(3,'Rhino'),(4,'SketchUp'),(5,'Adobe Illustrator');\nINSERT INTO \"Employed_in_Construction_Jobs\" (employedID,applicantID,constructionJobID,startDate,endDate) VALUES (1,1,1,'2023-01-15','2023-12-31'),(2,2,2,'2023-02-15','2023-12-31'),(3,3,3,'2023-03-15','2023-12-31'),(4,4,4,'2023-04-15','2023-12-31'),(5,5,5,'2023-05-15','2023-12-31');\nINSERT INTO \"Employers\" (employerID,companyName,location) VALUES (1,'CompanyA','New York'),(2,'CompanyB','Los Angeles'),(3,'CompanyC','Chicago'),(4,'CompanyD','Miami'),(5,'CompanyE','Houston');\n",
      "question": "Provide a list of all civil engineering jobs and also provide a list of architecture jobs that use AutoCAD software. Show them in one table.",
      "gold_queries": [
        "SELECT Construction_Jobs.jobTitle \r\nFROM Construction_Jobs JOIN Design_Software_Expertise ON Construction_Jobs.designSoftware = Design_Software_Expertise.softwareName\r\nWHERE Construction_Jobs.ConstructionJobType = \"Civil Engineering\" OR Construction_Jobs.ConstructionJobType = \"Architecture\" AND Design_Software_Expertise.softwareName = \"AutoCAD\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Retrieve all jobs with \"Civil Engineering\" as the job type and use AutoCAD as the design software.",
          "sql_queries": [
            "SELECT * FROM Construction_Jobs WHERE constructionJobType = 'Civil Engineering' AND designSoftware = 'AutoCAD'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Find all job titles related to civil engineering and architecture that list AutoCAD as a required design software.",
          "sql_queries": [
            "SELECT jobTitle FROM Construction_Jobs WHERE constructionJobType IN ('Civil Engineering', 'Architecture') AND designSoftware = 'AutoCAD'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Present a table combining all civil engineering jobs and a separate list of architecture jobs utilizing AutoCAD.",
          "sql_queries": [
            "SELECT * FROM Construction_Jobs WHERE constructionJobType = 'Architecture' AND designSoftware = 'AutoCAD'",
            "SELECT * FROM Construction_Jobs WHERE constructionJobType = 'Civil Engineering'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List distinct civil engineering and architecture jobs, indicating those using AutoCAD.",
          "sql_queries": [
            "SELECT DISTINCT jobTitle, CASE WHEN designSoftware = 'AutoCAD' THEN 'Uses AutoCAD' ELSE 'Does not use AutoCAD' END AS autoCADUsage\nFROM Construction_Jobs\nWHERE constructionJobType IN ('Civil Engineering', 'Architecture')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Job Postings/scope_tech_startups_tech_jobs/scope_tech_startups_tech_jobs.sqlite",
      "db_dump": "CREATE TABLE Tech_Jobs (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    job_title TEXT,\n    description TEXT\n);\nCREATE TABLE Tech_Startups (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Tech_Startups_Tech_Jobs (\n    PRIMARY KEY (tech_startup_id, tech_job_id)\n);\n\nINSERT INTO \"Tech_Jobs\" (id,job_title,description) VALUES (1,'Product Manager','Managing product development from conception to launch.'),(2,'Software Engineer','Developing software applications using various programming languages.'),(3,'Data Scientist','Analyzing data to provide insights and make data-driven decisions.'),(4,'Marketing Specialist','Creating marketing strategies to promote products and services.'),(5,'Designer','Designing user interfaces and experiences for digital products.');\nINSERT INTO \"Tech_Startups\" (id,name,location) VALUES (1,'Startup1','San Francisco'),(2,'Startup2','New York'),(3,'Startup3','Los Angeles'),(4,'Startup4','Boston'),(5,'Startup5','Austin');\nINSERT INTO \"Tech_Startups_Tech_Jobs\" (tech_startup_id,tech_job_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\n",
      "question": "For each tech startup, list information about the jobs they have.",
      "gold_queries": [
        "select tech_startups.name , tech_jobs.job_title , tech_jobs.description from Tech_Startups_Tech_Jobs join Tech_Jobs on Tech_Startups_Tech_Jobs.tech_job_id = Tech_Jobs.id join Tech_Startups on Tech_Startups_Tech_Jobs.tech_startup_id = Tech_Startups.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For each Tech_Startup, list its id, name, location, and all corresponding job titles.",
          "sql_queries": [
            "SELECT TS.id, TS.name, TS.location, TJ.job_title\nFROM Tech_Startups AS TS\nJOIN Tech_Startups_Tech_Jobs AS TSTJ ON TS.id = TSTJ.tech_startup_id\nJOIN Tech_Jobs AS TJ ON TSTJ.tech_job_id = TJ.id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve the names and locations of all Tech_Startups.",
          "sql_queries": [
            "SELECT name, location FROM Tech_Startups"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all Tech_Jobs and their descriptions, grouped by Tech_Startup name and location.",
          "sql_queries": [
            "SELECT T3.name, T3.location, T2.job_title, T2.description\nFROM Tech_Startups_Tech_Jobs AS T1\nJOIN Tech_Jobs AS T2 ON T1.tech_job_id = T2.id\nJOIN Tech_Startups AS T3 ON T1.tech_startup_id = T3.id\nGROUP BY T3.name, T3.location, T2.job_title, T2.description"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Query the Tech_Startups_Tech_Jobs table to identify the Tech_Job_id for each Tech_Startup.",
          "sql_queries": [
            "SELECT tech_startup_id, tech_job_id FROM Tech_Startups_Tech_Jobs"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Output a table with columns for Tech_Startup name and location, and a separate column for each job title present in the Tech_Startups_Tech_Jobs table.",
          "sql_queries": [
            "SELECT \n    s.name, \n    s.location, \n    MAX(CASE WHEN j.job_title = 'Product Manager' THEN 'Yes' ELSE 'No' END) AS 'Product Manager',\n    MAX(CASE WHEN j.job_title = 'Software Engineer' THEN 'Yes' ELSE 'No' END) AS 'Software Engineer',\n    MAX(CASE WHEN j.job_title = 'Data Scientist' THEN 'Yes' ELSE 'No' END) AS 'Data Scientist',\n    MAX(CASE WHEN j.job_title = 'Marketing Specialist' THEN 'Yes' ELSE 'No' END) AS 'Marketing Specialist',\n    MAX(CASE WHEN j.job_title = 'Designer' THEN 'Yes' ELSE 'No' END) AS 'Designer'\nFROM \n    Tech_Startups s\nLEFT JOIN \n    Tech_Startups_Tech_Jobs stj ON s.id = stj.tech_startup_id\nLEFT JOIN \n    Tech_Jobs j ON stj.tech_job_id = j.id\nGROUP BY \n    s.id, s.name, s.location"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Present the data in a format that highlights the relationship between Tech_Startups and Tech_Jobs.",
          "sql_queries": [
            "SELECT T2.name AS Startup, T3.job_title AS Job\nFROM Tech_Startups_Tech_Jobs AS T1\nJOIN Tech_Startups AS T2 ON T1.tech_startup_id = T2.id\nJOIN Tech_Jobs AS T3 ON T1.tech_job_id = T3.id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Job Postings/scope_tech_startups_tech_jobs/scope_tech_startups_tech_jobs.sqlite",
      "db_dump": "CREATE TABLE Tech_Jobs (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    job_title TEXT,\n    description TEXT\n);\nCREATE TABLE Tech_Startups (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Tech_Startups_Tech_Jobs (\n    PRIMARY KEY (tech_startup_id, tech_job_id)\n);\n\nINSERT INTO \"Tech_Jobs\" (id,job_title,description) VALUES (1,'Product Manager','Managing product development from conception to launch.'),(2,'Software Engineer','Developing software applications using various programming languages.'),(3,'Data Scientist','Analyzing data to provide insights and make data-driven decisions.'),(4,'Marketing Specialist','Creating marketing strategies to promote products and services.'),(5,'Designer','Designing user interfaces and experiences for digital products.');\nINSERT INTO \"Tech_Startups\" (id,name,location) VALUES (1,'Startup1','San Francisco'),(2,'Startup2','New York'),(3,'Startup3','Los Angeles'),(4,'Startup4','Boston'),(5,'Startup5','Austin');\nINSERT INTO \"Tech_Startups_Tech_Jobs\" (tech_startup_id,tech_job_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\n",
      "question": "Give me the titles and descriptions of the jobs that every tech startup has.",
      "gold_queries": [
        "SELECT Tech_Jobs.job_title, Tech_Jobs.description  from Tech_Startups_Tech_Jobs join Tech_Jobs on Tech_Startups_Tech_Jobs.tech_job_id = Tech_Jobs.id join Tech_Startups on Tech_Startups_Tech_Jobs.tech_startup_id = Tech_Startups.id   GROUP BY Tech_Startups_Tech_Jobs.tech_job_id HAVING COUNT(DISTINCT Tech_Startups_Tech_Jobs.tech_startup_id) = (SELECT COUNT(*) FROM  Tech_Startups)",
        "select tech_startups.name , tech_jobs.job_title , tech_jobs.description from Tech_Startups_Tech_Jobs join Tech_Jobs on Tech_Startups_Tech_Jobs.tech_job_id = Tech_Jobs.id join Tech_Startups on Tech_Startups_Tech_Jobs.tech_startup_id = Tech_Startups.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Return all job titles and descriptions that any TECH_STARTUP offers.",
          "sql_queries": [
            "SELECT DISTINCT T1.job_title, T1.description FROM Tech_Jobs AS T1 JOIN Tech_Startups_Tech_Jobs AS T2 ON T1.id = T2.tech_job_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all unique job titles and descriptions present in the TECH_JOBS table, regardless of startup association.",
          "sql_queries": [
            "SELECT DISTINCT job_title, description FROM Tech_Jobs"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "For each TECH_STARTUP, return a list of job titles and descriptions associated with it via the TECH_STARTUPS_TECH_JOBS table.",
          "sql_queries": [
            "SELECT TS.name, TJ.job_title, TJ.description\nFROM Tech_Startups TS\nJOIN Tech_Startups_Tech_Jobs TSTJ ON TS.id = TSTJ.tech_startup_id\nJOIN Tech_Jobs TJ ON TSTJ.tech_job_id = TJ.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Identify the TECH_JOBS held by all TECH_STARTUPS, providing titles and descriptions.",
          "sql_queries": [
            "SELECT T1.job_title, T1.description FROM Tech_Jobs AS T1 INNER JOIN Tech_Startups_Tech_Jobs AS T2 ON T1.id = T2.tech_job_id GROUP BY T1.id HAVING COUNT(DISTINCT T2.tech_startup_id) = (SELECT COUNT(*) FROM Tech_Startups)"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve the job title and description for all TECH_JOBS records.",
          "sql_queries": [
            "SELECT job_title, description FROM Tech_Jobs"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.4,
        "f1_score": 0.5714285714285715,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/scope/Job Postings/scope_tech_startups_tech_jobs/scope_tech_startups_tech_jobs.sqlite",
      "db_dump": "CREATE TABLE Tech_Jobs (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    job_title TEXT,\n    description TEXT\n);\nCREATE TABLE Tech_Startups (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Tech_Startups_Tech_Jobs (\n    PRIMARY KEY (tech_startup_id, tech_job_id)\n);\n\nINSERT INTO \"Tech_Jobs\" (id,job_title,description) VALUES (1,'Product Manager','Managing product development from conception to launch.'),(2,'Software Engineer','Developing software applications using various programming languages.'),(3,'Data Scientist','Analyzing data to provide insights and make data-driven decisions.'),(4,'Marketing Specialist','Creating marketing strategies to promote products and services.'),(5,'Designer','Designing user interfaces and experiences for digital products.');\nINSERT INTO \"Tech_Startups\" (id,name,location) VALUES (1,'Startup1','San Francisco'),(2,'Startup2','New York'),(3,'Startup3','Los Angeles'),(4,'Startup4','Boston'),(5,'Startup5','Austin');\nINSERT INTO \"Tech_Startups_Tech_Jobs\" (tech_startup_id,tech_job_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\n",
      "question": "What is the tech job description of each tech startup?",
      "gold_queries": [
        "SELECT Tech_Jobs.description  from Tech_Startups_Tech_Jobs join Tech_Jobs on Tech_Startups_Tech_Jobs.tech_job_id = Tech_Jobs.id join Tech_Startups on Tech_Startups_Tech_Jobs.tech_startup_id = Tech_Startups.id   GROUP BY Tech_Startups_Tech_Jobs.tech_job_id HAVING COUNT(DISTINCT Tech_Startups_Tech_Jobs.tech_startup_id) = (SELECT COUNT(*) FROM  Tech_Startups)",
        "select tech_startups.name , tech_jobs.description from Tech_Startups_Tech_Jobs join Tech_Jobs on Tech_Startups_Tech_Jobs.tech_job_id = Tech_Jobs.id join Tech_Startups on Tech_Startups_Tech_Jobs.tech_startup_id = Tech_Startups.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For each tech startup, return a description of the typical tech job performed there.",
          "sql_queries": [
            "SELECT TS.name, TJ.description\nFROM Tech_Startups_Tech_Jobs TSTJ\nJOIN Tech_Startups TS ON TSTJ.tech_startup_id = TS.id\nJOIN Tech_Jobs TJ ON TSTJ.tech_job_id = TJ.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Provide a summary of the technical responsibilities of each role at every tech startup.",
          "sql_queries": [
            "SELECT T2.name AS StartupName, T1.job_title AS JobTitle, T1.description AS Responsibilities\nFROM Tech_Jobs_Tech_Startups AS TJTS\nJOIN Tech_Startups AS T2 ON TJTS.tech_startup_id = T2.id\nJOIN Tech_Jobs AS T1 ON TJTS.tech_job_id = T1.id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT T2.name AS StartupName, T1.job_title AS JobTitle, T1.description AS Responsibilities\nFROM Tech_Jobs_Tech_Startups AS TJTS\nJOIN Tech_Startups AS T2 ON TJTS.tech_startup_id = T2.id\nJOIN Tech_Jobs AS T1 ON TJTS.tech_job_id = T1.id",
                "original_exception": "no such table: Tech_Jobs_Tech_Startups"
              }
            ],
            "all_found": false
          }
        },
        {
          "interpretation": "List the job descriptions associated with every tech job held by each tech startup.",
          "sql_queries": [
            "SELECT T2.name, T3.description \nFROM Tech_Startups_Tech_Jobs AS T1 \nJOIN Tech_Startups AS T2 ON T1.tech_startup_id = T2.id \nJOIN Tech_Jobs AS T3 ON T1.tech_job_id = T3.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Give me a list of all unique job titles offered by each tech startup.",
          "sql_queries": [
            "SELECT T2.name, T1.job_title\nFROM Tech_Jobs AS T1\nJOIN Tech_Startups_Tech_Jobs AS T3 ON T1.id = T3.tech_job_id\nJOIN Tech_Startups AS T2 ON T3.tech_startup_id = T2.id\nGROUP BY T2.name, T1.job_title"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.5,
        "f1_score": 0.5,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [
          {
            "query": "SELECT T2.name AS StartupName, T1.job_title AS JobTitle, T1.description AS Responsibilities\nFROM Tech_Jobs_Tech_Startups AS TJTS\nJOIN Tech_Startups AS T2 ON TJTS.tech_startup_id = T2.id\nJOIN Tech_Jobs AS T1 ON TJTS.tech_job_id = T1.id",
            "original_exception": "no such table: Tech_Jobs_Tech_Startups"
          }
        ],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/scope/Job Postings/scope_tech_startups_tech_jobs/scope_tech_startups_tech_jobs.sqlite",
      "db_dump": "CREATE TABLE Tech_Jobs (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    job_title TEXT,\n    description TEXT\n);\nCREATE TABLE Tech_Startups (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Tech_Startups_Tech_Jobs (\n    PRIMARY KEY (tech_startup_id, tech_job_id)\n);\n\nINSERT INTO \"Tech_Jobs\" (id,job_title,description) VALUES (1,'Product Manager','Managing product development from conception to launch.'),(2,'Software Engineer','Developing software applications using various programming languages.'),(3,'Data Scientist','Analyzing data to provide insights and make data-driven decisions.'),(4,'Marketing Specialist','Creating marketing strategies to promote products and services.'),(5,'Designer','Designing user interfaces and experiences for digital products.');\nINSERT INTO \"Tech_Startups\" (id,name,location) VALUES (1,'Startup1','San Francisco'),(2,'Startup2','New York'),(3,'Startup3','Los Angeles'),(4,'Startup4','Boston'),(5,'Startup5','Austin');\nINSERT INTO \"Tech_Startups_Tech_Jobs\" (tech_startup_id,tech_job_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\n",
      "question": "What information is there about the jobs all tech startups have in common?",
      "gold_queries": [
        "SELECT Tech_Jobs.job_title, Tech_Jobs.description  from Tech_Startups_Tech_Jobs join Tech_Jobs on Tech_Startups_Tech_Jobs.tech_job_id = Tech_Jobs.id join Tech_Startups on Tech_Startups_Tech_Jobs.tech_startup_id = Tech_Startups.id   GROUP BY Tech_Startups_Tech_Jobs.tech_job_id HAVING COUNT(DISTINCT Tech_Startups_Tech_Jobs.tech_startup_id) = (SELECT COUNT(*) FROM  Tech_Startups)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Are there any common job requirements for all tech startups?",
          "sql_queries": [
            "SELECT job_title \nFROM Tech_Jobs \nWHERE id IN (\n    SELECT tech_job_id \n    FROM Tech_Startups_Tech_Jobs \n    GROUP BY tech_job_id \n    HAVING COUNT(DISTINCT tech_startup_id) = (SELECT COUNT(*) FROM Tech_Startups)\n)"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Which job descriptions are shared by all tech startups?",
          "sql_queries": [
            "SELECT description \nFROM Tech_Jobs \nWHERE id IN (\n    SELECT tech_job_id \n    FROM Tech_Startups_Tech_Jobs \n    GROUP BY tech_job_id \n    HAVING COUNT(DISTINCT tech_startup_id) = (SELECT COUNT(*) FROM Tech_Startups)\n)"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "What job titles are held by tech startups?",
          "sql_queries": [
            "SELECT DISTINCT job_title FROM Tech_Jobs"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "What tech jobs are present in all tech startups' employee lists?",
          "sql_queries": [
            "SELECT T1.job_title\nFROM Tech_Jobs AS T1\nJOIN Tech_Startups_Tech_Jobs AS T2 ON T1.id = T2.tech_job_id\nGROUP BY T1.job_title\nHAVING COUNT(DISTINCT T2.tech_startup_id) = (SELECT COUNT(*) FROM Tech_Startups)"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "What is the intersection of job_title across all tech startups?",
          "sql_queries": [
            "SELECT job_title FROM Tech_Jobs WHERE id IN (SELECT tech_job_id FROM Tech_Startups_Tech_Jobs GROUP BY tech_job_id HAVING COUNT(DISTINCT tech_startup_id) = (SELECT COUNT(*) FROM Tech_Startups))"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Job Postings/scope_tech_startups_tech_jobs/scope_tech_startups_tech_jobs.sqlite",
      "db_dump": "CREATE TABLE Tech_Jobs (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    job_title TEXT,\n    description TEXT\n);\nCREATE TABLE Tech_Startups (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Tech_Startups_Tech_Jobs (\n    PRIMARY KEY (tech_startup_id, tech_job_id)\n);\n\nINSERT INTO \"Tech_Jobs\" (id,job_title,description) VALUES (1,'Product Manager','Managing product development from conception to launch.'),(2,'Software Engineer','Developing software applications using various programming languages.'),(3,'Data Scientist','Analyzing data to provide insights and make data-driven decisions.'),(4,'Marketing Specialist','Creating marketing strategies to promote products and services.'),(5,'Designer','Designing user interfaces and experiences for digital products.');\nINSERT INTO \"Tech_Startups\" (id,name,location) VALUES (1,'Startup1','San Francisco'),(2,'Startup2','New York'),(3,'Startup3','Los Angeles'),(4,'Startup4','Boston'),(5,'Startup5','Austin');\nINSERT INTO \"Tech_Startups_Tech_Jobs\" (tech_startup_id,tech_job_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\n",
      "question": "For every startup, list the jobs they have.",
      "gold_queries": [
        "select tech_startups.name , tech_jobs.job_title from Tech_Startups_Tech_Jobs join Tech_Jobs on Tech_Startups_Tech_Jobs.tech_job_id = Tech_Jobs.id join Tech_Startups on Tech_Startups_Tech_Jobs.tech_startup_id = Tech_Startups.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Provide a list of job titles for each startup, ordered by startup name.",
          "sql_queries": [
            "SELECT S.name, J.job_title\nFROM Tech_Startups_Tech_Jobs AS TJ\nJOIN Tech_Startups AS S ON TJ.tech_startup_id = S.id\nJOIN Tech_Jobs AS J ON TJ.tech_job_id = J.id\nORDER BY S.name"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "List the job titles held by each tech startup.",
          "sql_queries": [
            "SELECT T2.job_title, T1.name \nFROM Tech_Startups_Tech_Jobs AS TSJ \nJOIN Tech_Jobs AS T2 ON TSJ.tech_job_id = T2.id \nJOIN Tech_Startups AS T1 ON TSJ.tech_startup_id = T1.id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Show a unique list of job_titles present within each Tech_Startup.",
          "sql_queries": [
            "SELECT T2.name, T1.job_title \nFROM Tech_Jobs AS T1 \nJOIN Tech_Startups_Tech_Jobs AS T2J ON T1.id = T2J.tech_job_id \nJOIN Tech_Startups AS T2 ON T2J.tech_startup_id = T2.id \nGROUP BY T2.name, T1.job_title"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "For each tech startup, retrieve the associated job descriptions.",
          "sql_queries": [
            "SELECT TS.name, TJ.description\nFROM Tech_Startups_Tech_Jobs TSTJ\nJOIN Tech_Startups TS ON TSTJ.tech_startup_id = TS.id\nJOIN Tech_Jobs TJ ON TSTJ.tech_job_id = TJ.id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.75,
        "f1_score": 0.8571428571428571,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/scope/Job Postings/scope_tech_startups_tech_jobs/scope_tech_startups_tech_jobs.sqlite",
      "db_dump": "CREATE TABLE Tech_Jobs (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    job_title TEXT,\n    description TEXT\n);\nCREATE TABLE Tech_Startups (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Tech_Startups_Tech_Jobs (\n    PRIMARY KEY (tech_startup_id, tech_job_id)\n);\n\nINSERT INTO \"Tech_Jobs\" (id,job_title,description) VALUES (1,'Product Manager','Managing product development from conception to launch.'),(2,'Software Engineer','Developing software applications using various programming languages.'),(3,'Data Scientist','Analyzing data to provide insights and make data-driven decisions.'),(4,'Marketing Specialist','Creating marketing strategies to promote products and services.'),(5,'Designer','Designing user interfaces and experiences for digital products.');\nINSERT INTO \"Tech_Startups\" (id,name,location) VALUES (1,'Startup1','San Francisco'),(2,'Startup2','New York'),(3,'Startup3','Los Angeles'),(4,'Startup4','Boston'),(5,'Startup5','Austin');\nINSERT INTO \"Tech_Startups_Tech_Jobs\" (tech_startup_id,tech_job_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\n",
      "question": "Show me the jobs each startup has.",
      "gold_queries": [
        "SELECT Tech_Jobs.job_title  from Tech_Startups_Tech_Jobs join Tech_Jobs on Tech_Startups_Tech_Jobs.tech_job_id = Tech_Jobs.id join Tech_Startups on Tech_Startups_Tech_Jobs.tech_startup_id = Tech_Startups.id   GROUP BY Tech_Startups_Tech_Jobs.tech_job_id HAVING COUNT(DISTINCT Tech_Startups_Tech_Jobs.tech_startup_id) = (SELECT COUNT(*) FROM  Tech_Startups)",
        "select tech_startups.name , tech_jobs.job_title from Tech_Startups_Tech_Jobs join Tech_Jobs on Tech_Startups_Tech_Jobs.tech_job_id = Tech_Jobs.id join Tech_Startups on Tech_Startups_Tech_Jobs.tech_startup_id = Tech_Startups.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List each startup and its corresponding job assignments.",
          "sql_queries": [
            "SELECT S.name, J.job_title\nFROM Tech_Startups_Tech_Jobs AS TSTJ\nJOIN Tech_Startups AS S ON TSTJ.tech_startup_id = S.id\nJOIN Tech_Jobs AS J ON TSTJ.tech_job_id = J.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve a list of all jobs present in the database, grouped by the startups that offer them.",
          "sql_queries": [
            "SELECT T2.name AS Startup, T1.job_title AS Job\nFROM Tech_Jobs AS T1\nJOIN Tech_Startups_Tech_Jobs AS TSTJ ON T1.id = TSTJ.tech_job_id\nJOIN Tech_Startups AS T2 ON TSTJ.tech_startup_id = T2.id\nGROUP BY T2.name, T1.job_title"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Show the job titles held by each startup.",
          "sql_queries": [
            "SELECT T2.name, T1.job_title \nFROM Tech_Startups_Tech_Jobs AS T3 \nJOIN Tech_Jobs AS T1 ON T3.tech_job_id = T1.id \nJOIN Tech_Startups AS T2 ON T3.tech_startup_id = T2.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Display the distinct tech jobs offered by each startup.",
          "sql_queries": [
            "SELECT T2.name, DISTINCT T3.job_title \nFROM Tech_Startups_Tech_Jobs AS T1 \nJOIN Tech_Startups AS T2 ON T1.tech_startup_id = T2.id \nJOIN Tech_Jobs AS T3 ON T1.tech_job_id = T3.id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT T2.name, DISTINCT T3.job_title \nFROM Tech_Startups_Tech_Jobs AS T1 \nJOIN Tech_Startups AS T2 ON T1.tech_startup_id = T2.id \nJOIN Tech_Jobs AS T3 ON T1.tech_job_id = T3.id",
                "original_exception": "near \"DISTINCT\": syntax error"
              }
            ],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.75,
        "f1_score": 0.6,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [
          {
            "query": "SELECT T2.name, DISTINCT T3.job_title \nFROM Tech_Startups_Tech_Jobs AS T1 \nJOIN Tech_Startups AS T2 ON T1.tech_startup_id = T2.id \nJOIN Tech_Jobs AS T3 ON T1.tech_job_id = T3.id",
            "original_exception": "near \"DISTINCT\": syntax error"
          }
        ],
        "all_found": false
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/scope/Job Postings/scope_tech_startups_tech_jobs/scope_tech_startups_tech_jobs.sqlite",
      "db_dump": "CREATE TABLE Tech_Jobs (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    job_title TEXT,\n    description TEXT\n);\nCREATE TABLE Tech_Startups (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Tech_Startups_Tech_Jobs (\n    PRIMARY KEY (tech_startup_id, tech_job_id)\n);\n\nINSERT INTO \"Tech_Jobs\" (id,job_title,description) VALUES (1,'Product Manager','Managing product development from conception to launch.'),(2,'Software Engineer','Developing software applications using various programming languages.'),(3,'Data Scientist','Analyzing data to provide insights and make data-driven decisions.'),(4,'Marketing Specialist','Creating marketing strategies to promote products and services.'),(5,'Designer','Designing user interfaces and experiences for digital products.');\nINSERT INTO \"Tech_Startups\" (id,name,location) VALUES (1,'Startup1','San Francisco'),(2,'Startup2','New York'),(3,'Startup3','Los Angeles'),(4,'Startup4','Boston'),(5,'Startup5','Austin');\nINSERT INTO \"Tech_Startups_Tech_Jobs\" (tech_startup_id,tech_job_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\n",
      "question": "For each tech startup, what is the corresponding tech job description?",
      "gold_queries": [
        "select tech_startups.name , tech_jobs.description from Tech_Startups_Tech_Jobs join Tech_Jobs on Tech_Startups_Tech_Jobs.tech_job_id = Tech_Jobs.id join Tech_Startups on Tech_Startups_Tech_Jobs.tech_startup_id = Tech_Startups.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Show me the descriptions of all the jobs present in each tech startup.",
          "sql_queries": [
            "SELECT Tech_Startups.name, Tech_Jobs.description \nFROM Tech_Startups \nJOIN Tech_Startups_Tech_Jobs ON Tech_Startups.id = Tech_Startups_Tech_Jobs.tech_startup_id \nJOIN Tech_Jobs ON Tech_Startups_Tech_Jobs.tech_job_id = Tech_Jobs.id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "List the job descriptions for all tech jobs associated with each tech startup.",
          "sql_queries": [
            "SELECT Tech_Startups.name, Tech_Jobs.description\nFROM Tech_Startups\nJOIN Tech_Startups_Tech_Jobs ON Tech_Startups.id = Tech_Startups_Tech_Jobs.tech_startup_id\nJOIN Tech_Jobs ON Tech_Startups_Tech_Jobs.tech_job_id = Tech_Jobs.id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "For each tech startup, list the job descriptions corresponding to the filled tech jobs.",
          "sql_queries": [
            "SELECT T2.name, T3.description\nFROM Tech_Startups_Tech_Jobs AS T1\nJOIN Tech_Startups AS T2 ON T1.tech_startup_id = T2.id\nJOIN Tech_Jobs AS T3 ON T1.tech_job_id = T3.id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Generate a report of tech startup names and the descriptions of all jobs they employ.",
          "sql_queries": [
            "SELECT Ts.name, Tj.description\nFROM Tech_Startups AS Ts\nJOIN Tech_Startups_Tech_Jobs AS Tstj ON Ts.id = Tstj.tech_startup_id\nJOIN Tech_Jobs AS Tj ON Tstj.tech_job_id = Tj.id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "For each tech startup, retrieve its associated job titles.",
          "sql_queries": [
            "SELECT T2.name, T3.job_title \nFROM Tech_Startups_Tech_Jobs AS T1 \nJOIN Tech_Startups AS T2 ON T1.tech_startup_id = T2.id \nJOIN Tech_Jobs AS T3 ON T1.tech_job_id = T3.id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.8,
        "f1_score": 0.888888888888889,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 4
    },
    {
      "db_file": "data/scope/Job Postings/scope_tech_startups_tech_jobs/scope_tech_startups_tech_jobs.sqlite",
      "db_dump": "CREATE TABLE Tech_Jobs (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    job_title TEXT,\n    description TEXT\n);\nCREATE TABLE Tech_Startups (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Tech_Startups_Tech_Jobs (\n    PRIMARY KEY (tech_startup_id, tech_job_id)\n);\n\nINSERT INTO \"Tech_Jobs\" (id,job_title,description) VALUES (1,'Product Manager','Managing product development from conception to launch.'),(2,'Software Engineer','Developing software applications using various programming languages.'),(3,'Data Scientist','Analyzing data to provide insights and make data-driven decisions.'),(4,'Marketing Specialist','Creating marketing strategies to promote products and services.'),(5,'Designer','Designing user interfaces and experiences for digital products.');\nINSERT INTO \"Tech_Startups\" (id,name,location) VALUES (1,'Startup1','San Francisco'),(2,'Startup2','New York'),(3,'Startup3','Los Angeles'),(4,'Startup4','Boston'),(5,'Startup5','Austin');\nINSERT INTO \"Tech_Startups_Tech_Jobs\" (tech_startup_id,tech_job_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\n",
      "question": "What tech job description is common to all tech startups?",
      "gold_queries": [
        "SELECT Tech_Jobs.description  from Tech_Startups_Tech_Jobs join Tech_Jobs on Tech_Startups_Tech_Jobs.tech_job_id = Tech_Jobs.id join Tech_Startups on Tech_Startups_Tech_Jobs.tech_startup_id = Tech_Startups.id   GROUP BY Tech_Startups_Tech_Jobs.tech_job_id HAVING COUNT(DISTINCT Tech_Startups_Tech_Jobs.tech_startup_id) = (SELECT COUNT(*) FROM  Tech_Startups)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What job_title appears in the descriptions of all startups in Tech_Startups?",
          "sql_queries": [
            "SELECT job_title FROM Tech_Jobs WHERE description = (SELECT description FROM Tech_Jobs WHERE id IN (SELECT tech_job_id FROM Tech_Startups_Tech_Jobs) GROUP BY description HAVING COUNT(*) = (SELECT COUNT(*) FROM Tech_Startups))"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Determine the unique tech job available in every single tech startup.",
          "sql_queries": [
            "SELECT T1.job_title\nFROM Tech_Jobs AS T1\nJOIN Tech_Startups_Tech_Jobs AS T2 ON T1.id = T2.tech_job_id\nGROUP BY T1.job_title\nHAVING COUNT(DISTINCT T2.tech_startup_id) = (SELECT COUNT(*) FROM Tech_Startups)"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Identify the tech job that is offered by every startup in the database.",
          "sql_queries": [
            "SELECT job_title FROM Tech_Jobs WHERE id IN (SELECT tech_job_id FROM Tech_Startups_Tech_Jobs GROUP BY tech_job_id HAVING COUNT(DISTINCT tech_startup_id) = (SELECT COUNT(*) FROM Tech_Startups))"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Find the job description that is shared by all startups related to Tech Jobs.",
          "sql_queries": [
            "SELECT description FROM Tech_Jobs WHERE id IN (SELECT tech_job_id FROM Tech_Startups_Tech_Jobs GROUP BY tech_job_id HAVING COUNT(DISTINCT tech_startup_id) = (SELECT COUNT(*) FROM Tech_Startups))"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Which tech job is listed in Tech_Startups_Tech_Jobs for every tech startup?",
          "sql_queries": [
            "SELECT job_title\nFROM Tech_Jobs\nWHERE id IN (\n    SELECT tech_job_id\n    FROM Tech_Startups_Tech_Jobs\n    GROUP BY tech_job_id\n    HAVING COUNT(DISTINCT tech_startup_id) = (SELECT COUNT(*) FROM Tech_Startups)\n)"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Job Postings/scope_tech_startups_tech_jobs/scope_tech_startups_tech_jobs.sqlite",
      "db_dump": "CREATE TABLE Tech_Jobs (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    job_title TEXT,\n    description TEXT\n);\nCREATE TABLE Tech_Startups (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Tech_Startups_Tech_Jobs (\n    PRIMARY KEY (tech_startup_id, tech_job_id)\n);\n\nINSERT INTO \"Tech_Jobs\" (id,job_title,description) VALUES (1,'Product Manager','Managing product development from conception to launch.'),(2,'Software Engineer','Developing software applications using various programming languages.'),(3,'Data Scientist','Analyzing data to provide insights and make data-driven decisions.'),(4,'Marketing Specialist','Creating marketing strategies to promote products and services.'),(5,'Designer','Designing user interfaces and experiences for digital products.');\nINSERT INTO \"Tech_Startups\" (id,name,location) VALUES (1,'Startup1','San Francisco'),(2,'Startup2','New York'),(3,'Startup3','Los Angeles'),(4,'Startup4','Boston'),(5,'Startup5','Austin');\nINSERT INTO \"Tech_Startups_Tech_Jobs\" (tech_startup_id,tech_job_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\n",
      "question": "What are jobs that all startups have in common?",
      "gold_queries": [
        "SELECT Tech_Jobs.job_title  from Tech_Startups_Tech_Jobs join Tech_Jobs on Tech_Startups_Tech_Jobs.tech_job_id = Tech_Jobs.id join Tech_Startups on Tech_Startups_Tech_Jobs.tech_startup_id = Tech_Startups.id   GROUP BY Tech_Startups_Tech_Jobs.tech_job_id HAVING COUNT(DISTINCT Tech_Startups_Tech_Jobs.tech_startup_id) = (SELECT COUNT(*) FROM  Tech_Startups)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What job titles are present in the Tech_Startups_Tech_Jobs table for all startups?",
          "sql_queries": [
            "SELECT T1.job_title \nFROM Tech_Jobs AS T1 \nJOIN Tech_Startups_Tech_Jobs AS T2 ON T1.id = T2.tech_job_id \nGROUP BY T1.job_title \nHAVING COUNT(DISTINCT T2.tech_startup_id) = (SELECT COUNT(*) FROM Tech_Startups)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Which job types are offered by every tech startup in the database?",
          "sql_queries": [
            "SELECT job_title FROM Tech_Jobs WHERE id IN (SELECT tech_job_id FROM Tech_Startups_Tech_Jobs GROUP BY tech_job_id HAVING COUNT(tech_startup_id) = (SELECT COUNT(*) FROM Tech_Startups))"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "What job descriptions are shared by all startups?",
          "sql_queries": [
            "SELECT T2.description FROM Tech_Startups_Tech_Jobs AS T1 JOIN Tech_Jobs AS T2 ON T1.tech_job_id = T2.id GROUP BY T2.description HAVING COUNT(DISTINCT T1.tech_startup_id) = (SELECT COUNT(*) FROM Tech_Startups)"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Identify any job classifications that appear in every startup's list.",
          "sql_queries": [
            "SELECT job_title\nFROM Tech_Jobs\nWHERE id IN (\n    SELECT tech_job_id\n    FROM Tech_Startups_Tech_Jobs\n    GROUP BY tech_job_id\n    HAVING COUNT(DISTINCT tech_startup_id) = (SELECT COUNT(*) FROM Tech_Startups)\n)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "What is the intersection of the job set for all startups?",
          "sql_queries": [
            "SELECT job_title\nFROM Tech_Jobs\nWHERE id IN (\n    SELECT tech_job_id\n    FROM Tech_Startups_Tech_Jobs\n    GROUP BY tech_job_id\n    HAVING COUNT(DISTINCT tech_startup_id) = (SELECT COUNT(*) FROM Tech_Startups)\n)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.75,
        "f1_score": 0.8571428571428571,
        "num_queries": 5,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 4
    },
    {
      "db_file": "data/vague/Hospitality/vague_2tabs_chef/vague_2tabs_chef.sqlite",
      "db_dump": "CREATE TABLE Executive_chef (\n    chef_id INTEGER PRIMARY KEY,\n    full_name TEXT);\nCREATE TABLE Menu_items (\n    menu_item_id INTEGER PRIMARY KEY,\n    item_name TEXT,\n    description TEXT,\n    price DECIMAL(5,2) \n);\nCREATE TABLE Order_details (\n    detail_id INTEGER PRIMARY KEY,\n    quantity INTEGER ,\n    menu_item_id INTEGER,\n    order_id INTEGER,\n    FOREIGN KEY(menu_item_id) REFERENCES Menu_items(menu_item_id),\n    FOREIGN KEY(order_id) REFERENCES Orders(order_id)\n);\nCREATE TABLE Orders (\n    order_id INTEGER PRIMARY KEY,\n    customer_name TEXT,\n    date DATE,\n    total_amount DECIMAL(7,2),\n    restaurant_id INTEGER,\n    FOREIGN KEY(restaurant_id) REFERENCES Restaurant(restaurant_id)\n);\nCREATE TABLE Restaurant (\n    restaurant_id INTEGER PRIMARY KEY,\n    name TEXT,\n    address TEXT,\n    executive_chef_id INTEGER,\n    SOUS_CHEF_ID INTEGER,\n    FOREIGN KEY(executive_chef_id) REFERENCES Executive_chef(chef_id),\n    FOREIGN KEY(SOUS_CHEF_ID) REFERENCES Sous_chef(sous_id)\n);\nCREATE TABLE Sous_chef (\n    sous_id INTEGER PRIMARY KEY,\n    executive_chef_id INTEGER, full_name TEXT,\n    FOREIGN KEY(executive_chef_id) REFERENCES Executive_chef(chef_id)\n);\n\nINSERT INTO \"Executive_chef\" (chef_id,full_name) VALUES (1,'John Doe'),(2,'Jane Smith'),(3,'Michael Johnson');\nINSERT INTO \"Menu_items\" (menu_item_id,item_name,description,price) VALUES (1,'Steak','Grilled Steak with Veggies',30.99),(2,'Salmon','Grilled Salmon with Rice',25.8),(3,'Pasta','Spaghetti Bolognese',15.6),(4,'Pizza','Margherita Pizza',12.5),(5,'Burger','Cheeseburger and Fries',10.8);\nINSERT INTO \"Order_details\" (detail_id,quantity,menu_item_id,order_id) VALUES (1,2,1,1),(2,1,2,2),(3,1,3,3),(4,1,1,4),(5,1,4,5);\nINSERT INTO \"Orders\" (order_id,customer_name,date,total_amount,restaurant_id) VALUES (1,'Customer A','2021-08-10',60.2,1),(2,'Customer B','2021-08-11',45.5,2),(3,'Customer C','2021-08-12',75.3,3),(4,'Customer D','2021-08-13',80.5,1),(5,'Customer E','2021-08-14',55.2,2);\nINSERT INTO \"Restaurant\" (restaurant_id,name,address,executive_chef_id,SOUS_CHEF_ID) VALUES (1,'The Ritz','Main Street',1,1),(2,'Le Grande','East Side',2,2),(3,'Ocean View','Beach Road',3,3);\nINSERT INTO \"Sous_chef\" (sous_id,executive_chef_id,full_name) VALUES (1,1,'Alice Brown'),(2,2,'Bob White'),(3,3,'Charlie Green');\n",
      "question": "Show me the sous chef who cooks pizza?",
      "gold_queries": [
        "Select \r\nc.Full_name\r\nFROM Sous_chef C \r\nJOIN Restaurant R ON c.Sous_id = r.Sous_chef_id\r\nJOIN Orders O ON R.restaurant_id = O.restaurant_id\r\nJOIN Order_details OD ON O.order_id = OD.order_id\r\nJOIN Menu_items m ON OD.menu_item_id = m.menu_item_id\r\nWHERE  m.item_name = 'Pizza'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Find the sous chef who works at a restaurant that has pizza on its menu.",
          "sql_queries": [
            "SELECT s.full_name \nFROM Sous_chef s \nJOIN Restaurant r ON s.executive_chef_id = r.executive_chef_id \nJOIN Menu_items m ON r.restaurant_id = m.restaurant_id \nWHERE m.item_name = 'Pizza'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT s.full_name \nFROM Sous_chef s \nJOIN Restaurant r ON s.executive_chef_id = r.executive_chef_id \nJOIN Menu_items m ON r.restaurant_id = m.restaurant_id \nWHERE m.item_name = 'Pizza'",
                "original_exception": "no such column: m.restaurant_id"
              }
            ],
            "all_found": false
          }
        },
        {
          "interpretation": "Find the sous chef who is directly responsible for preparing pizza dishes.",
          "sql_queries": [
            "SELECT Sous_chef.full_name \nFROM Sous_chef \nJOIN Restaurant ON Sous_chef.sous_id = Restaurant.SOUS_CHEF_ID \nJOIN Orders ON Restaurant.restaurant_id = Orders.restaurant_id \nJOIN Order_details ON Orders.order_id = Order_details.order_id \nJOIN Menu_items ON Order_details.menu_item_id = Menu_items.menu_item_id \nWHERE Menu_items.item_name = 'Pizza'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [
          {
            "query": "SELECT s.full_name \nFROM Sous_chef s \nJOIN Restaurant r ON s.executive_chef_id = r.executive_chef_id \nJOIN Menu_items m ON r.restaurant_id = m.restaurant_id \nWHERE m.item_name = 'Pizza'",
            "original_exception": "no such column: m.restaurant_id"
          }
        ],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Hospitality/vague_2tabs_chef/vague_2tabs_chef.sqlite",
      "db_dump": "CREATE TABLE Executive_chef (\n    chef_id INTEGER PRIMARY KEY,\n    full_name TEXT);\nCREATE TABLE Menu_items (\n    menu_item_id INTEGER PRIMARY KEY,\n    item_name TEXT,\n    description TEXT,\n    price DECIMAL(5,2) \n);\nCREATE TABLE Order_details (\n    detail_id INTEGER PRIMARY KEY,\n    quantity INTEGER ,\n    menu_item_id INTEGER,\n    order_id INTEGER,\n    FOREIGN KEY(menu_item_id) REFERENCES Menu_items(menu_item_id),\n    FOREIGN KEY(order_id) REFERENCES Orders(order_id)\n);\nCREATE TABLE Orders (\n    order_id INTEGER PRIMARY KEY,\n    customer_name TEXT,\n    date DATE,\n    total_amount DECIMAL(7,2),\n    restaurant_id INTEGER,\n    FOREIGN KEY(restaurant_id) REFERENCES Restaurant(restaurant_id)\n);\nCREATE TABLE Restaurant (\n    restaurant_id INTEGER PRIMARY KEY,\n    name TEXT,\n    address TEXT,\n    executive_chef_id INTEGER,\n    SOUS_CHEF_ID INTEGER,\n    FOREIGN KEY(executive_chef_id) REFERENCES Executive_chef(chef_id),\n    FOREIGN KEY(SOUS_CHEF_ID) REFERENCES Sous_chef(sous_id)\n);\nCREATE TABLE Sous_chef (\n    sous_id INTEGER PRIMARY KEY,\n    executive_chef_id INTEGER, full_name TEXT,\n    FOREIGN KEY(executive_chef_id) REFERENCES Executive_chef(chef_id)\n);\n\nINSERT INTO \"Executive_chef\" (chef_id,full_name) VALUES (1,'John Doe'),(2,'Jane Smith'),(3,'Michael Johnson');\nINSERT INTO \"Menu_items\" (menu_item_id,item_name,description,price) VALUES (1,'Steak','Grilled Steak with Veggies',30.99),(2,'Salmon','Grilled Salmon with Rice',25.8),(3,'Pasta','Spaghetti Bolognese',15.6),(4,'Pizza','Margherita Pizza',12.5),(5,'Burger','Cheeseburger and Fries',10.8);\nINSERT INTO \"Order_details\" (detail_id,quantity,menu_item_id,order_id) VALUES (1,2,1,1),(2,1,2,2),(3,1,3,3),(4,1,1,4),(5,1,4,5);\nINSERT INTO \"Orders\" (order_id,customer_name,date,total_amount,restaurant_id) VALUES (1,'Customer A','2021-08-10',60.2,1),(2,'Customer B','2021-08-11',45.5,2),(3,'Customer C','2021-08-12',75.3,3),(4,'Customer D','2021-08-13',80.5,1),(5,'Customer E','2021-08-14',55.2,2);\nINSERT INTO \"Restaurant\" (restaurant_id,name,address,executive_chef_id,SOUS_CHEF_ID) VALUES (1,'The Ritz','Main Street',1,1),(2,'Le Grande','East Side',2,2),(3,'Ocean View','Beach Road',3,3);\nINSERT INTO \"Sous_chef\" (sous_id,executive_chef_id,full_name) VALUES (1,1,'Alice Brown'),(2,2,'Bob White'),(3,3,'Charlie Green');\n",
      "question": "Show me the executive and sous chefs who cook pizza?",
      "gold_queries": [
        "Select \r\nc.Full_name, C.full_name \r\nFROM Executive_chef C \r\nJOIN Restaurant R ON c.chef_id = r.executive_chef_id\r\nJOIN Orders O ON R.restaurant_id = O.restaurant_id\r\nJOIN Order_details OD ON O.order_id = OD.order_id\r\nJOIN Menu_items m ON OD.menu_item_id = m.menu_item_id\r\n JOIN Sous_chef SC ON SC.Sous_id = r.Sous_chef_id WHERE  m.item_name = 'Pizza'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List the executive and sous chefs whose restaurants offer pizza.",
          "sql_queries": [
            "SELECT E.full_name AS Executive_Chef, S.full_name AS Sous_Chef\nFROM Orders O\nJOIN Order_details OD ON O.order_id = OD.order_id\nJOIN Menu_items M ON OD.menu_item_id = M.menu_item_id\nJOIN Restaurant R ON O.restaurant_id = R.restaurant_id\nJOIN Executive_chef E ON R.executive_chef_id = E.chef_id\nJOIN Sous_chef S ON R.sous_chef_id = S.sous_id\nWHERE M.item_name = 'Pizza'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve the names of all executive chefs and sous chefs from restaurants that serve pizza.",
          "sql_queries": [
            "SELECT DISTINCT EC.full_name, SC.full_name \nFROM Executive_chef EC \nJOIN Restaurant R ON EC.chef_id = R.executive_chef_id \nJOIN Sous_chef SC ON R.sous_chef_id = SC.sous_id \nJOIN Order_details OD ON R.restaurant_id = OD.order_id \nJOIN Menu_items MI ON OD.menu_item_id = MI.menu_item_id \nWHERE MI.item_name = 'Pizza'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Find the executive chefs and sous chefs associated with restaurants that have pizza on their menu.",
          "sql_queries": [
            "SELECT e.full_name as Executive_Chef, s.full_name as Sous_Chef\nFROM Restaurant r\nJOIN Executive_chef e ON r.executive_chef_id = e.chef_id\nJOIN Sous_chef s ON r.SOUS_CHEF_ID = s.sous_id\nJOIN Menu_items m ON r.restaurant_id = (\n    SELECT restaurant_id\n    FROM Orders o\n    JOIN Order_details od ON o.order_id = od.order_id\n    JOIN Menu_items m ON od.menu_item_id = m.menu_item_id\n    WHERE m.item_name = 'Pizza'\n)"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Identify the chefs responsible for creating the pizza menu items.",
          "sql_queries": [
            "SELECT Chef.full_name \nFROM Executive_chef Chef \nJOIN Restaurant Restaurant ON Chef.chef_id = Restaurant.executive_chef_id \nJOIN Menu_items MenuItem ON Restaurant.restaurant_id = MenuItem.restaurant_id \nWHERE MenuItem.item_name = 'Pizza'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT Chef.full_name \nFROM Executive_chef Chef \nJOIN Restaurant Restaurant ON Chef.chef_id = Restaurant.executive_chef_id \nJOIN Menu_items MenuItem ON Restaurant.restaurant_id = MenuItem.restaurant_id \nWHERE MenuItem.item_name = 'Pizza'",
                "original_exception": "no such column: MenuItem.restaurant_id"
              }
            ],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [
          {
            "query": "SELECT Chef.full_name \nFROM Executive_chef Chef \nJOIN Restaurant Restaurant ON Chef.chef_id = Restaurant.executive_chef_id \nJOIN Menu_items MenuItem ON Restaurant.restaurant_id = MenuItem.restaurant_id \nWHERE MenuItem.item_name = 'Pizza'",
            "original_exception": "no such column: MenuItem.restaurant_id"
          }
        ],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Hospitality/vague_2tabs_chef/vague_2tabs_chef.sqlite",
      "db_dump": "CREATE TABLE Executive_chef (\n    chef_id INTEGER PRIMARY KEY,\n    full_name TEXT);\nCREATE TABLE Menu_items (\n    menu_item_id INTEGER PRIMARY KEY,\n    item_name TEXT,\n    description TEXT,\n    price DECIMAL(5,2) \n);\nCREATE TABLE Order_details (\n    detail_id INTEGER PRIMARY KEY,\n    quantity INTEGER ,\n    menu_item_id INTEGER,\n    order_id INTEGER,\n    FOREIGN KEY(menu_item_id) REFERENCES Menu_items(menu_item_id),\n    FOREIGN KEY(order_id) REFERENCES Orders(order_id)\n);\nCREATE TABLE Orders (\n    order_id INTEGER PRIMARY KEY,\n    customer_name TEXT,\n    date DATE,\n    total_amount DECIMAL(7,2),\n    restaurant_id INTEGER,\n    FOREIGN KEY(restaurant_id) REFERENCES Restaurant(restaurant_id)\n);\nCREATE TABLE Restaurant (\n    restaurant_id INTEGER PRIMARY KEY,\n    name TEXT,\n    address TEXT,\n    executive_chef_id INTEGER,\n    SOUS_CHEF_ID INTEGER,\n    FOREIGN KEY(executive_chef_id) REFERENCES Executive_chef(chef_id),\n    FOREIGN KEY(SOUS_CHEF_ID) REFERENCES Sous_chef(sous_id)\n);\nCREATE TABLE Sous_chef (\n    sous_id INTEGER PRIMARY KEY,\n    executive_chef_id INTEGER, full_name TEXT,\n    FOREIGN KEY(executive_chef_id) REFERENCES Executive_chef(chef_id)\n);\n\nINSERT INTO \"Executive_chef\" (chef_id,full_name) VALUES (1,'John Doe'),(2,'Jane Smith'),(3,'Michael Johnson');\nINSERT INTO \"Menu_items\" (menu_item_id,item_name,description,price) VALUES (1,'Steak','Grilled Steak with Veggies',30.99),(2,'Salmon','Grilled Salmon with Rice',25.8),(3,'Pasta','Spaghetti Bolognese',15.6),(4,'Pizza','Margherita Pizza',12.5),(5,'Burger','Cheeseburger and Fries',10.8);\nINSERT INTO \"Order_details\" (detail_id,quantity,menu_item_id,order_id) VALUES (1,2,1,1),(2,1,2,2),(3,1,3,3),(4,1,1,4),(5,1,4,5);\nINSERT INTO \"Orders\" (order_id,customer_name,date,total_amount,restaurant_id) VALUES (1,'Customer A','2021-08-10',60.2,1),(2,'Customer B','2021-08-11',45.5,2),(3,'Customer C','2021-08-12',75.3,3),(4,'Customer D','2021-08-13',80.5,1),(5,'Customer E','2021-08-14',55.2,2);\nINSERT INTO \"Restaurant\" (restaurant_id,name,address,executive_chef_id,SOUS_CHEF_ID) VALUES (1,'The Ritz','Main Street',1,1),(2,'Le Grande','East Side',2,2),(3,'Ocean View','Beach Road',3,3);\nINSERT INTO \"Sous_chef\" (sous_id,executive_chef_id,full_name) VALUES (1,1,'Alice Brown'),(2,2,'Bob White'),(3,3,'Charlie Green');\n",
      "question": "Please list all the chefs in alphabetical order by their name",
      "gold_queries": [
        "SELECT c.Full_name \r\nFROM Executive_chef C ORDER BY Full_name",
        "SELECT c.Full_name\r\nFROM Sous_chef C ORDER BY Full_name",
        "SELECT c.Full_name, C.full_name \r\nFROM Executive_chef C JOIN Restaurant R ON c.chef_id = r.executive_chef_id JOIN Sous_chef SC ON SC.Sous_id = r.Sous_chef_id ORDER BY C.Full_name, SC.Full_name"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Sort all individuals identified as \"chef\" in the database by their full name alphabetically.",
          "sql_queries": [
            "SELECT full_name FROM Executive_chef UNION SELECT full_name FROM Sous_chef ORDER BY full_name"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all chefs in the Executive_chef table in alphabetical order by full_name.",
          "sql_queries": [
            "SELECT full_name FROM Executive_chef ORDER BY full_name"
          ],
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.3333333333333333,
        "precision": 0.5,
        "f1_score": 0.4,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Hospitality/vague_2tabs_chef/vague_2tabs_chef.sqlite",
      "db_dump": "CREATE TABLE Executive_chef (\n    chef_id INTEGER PRIMARY KEY,\n    full_name TEXT);\nCREATE TABLE Menu_items (\n    menu_item_id INTEGER PRIMARY KEY,\n    item_name TEXT,\n    description TEXT,\n    price DECIMAL(5,2) \n);\nCREATE TABLE Order_details (\n    detail_id INTEGER PRIMARY KEY,\n    quantity INTEGER ,\n    menu_item_id INTEGER,\n    order_id INTEGER,\n    FOREIGN KEY(menu_item_id) REFERENCES Menu_items(menu_item_id),\n    FOREIGN KEY(order_id) REFERENCES Orders(order_id)\n);\nCREATE TABLE Orders (\n    order_id INTEGER PRIMARY KEY,\n    customer_name TEXT,\n    date DATE,\n    total_amount DECIMAL(7,2),\n    restaurant_id INTEGER,\n    FOREIGN KEY(restaurant_id) REFERENCES Restaurant(restaurant_id)\n);\nCREATE TABLE Restaurant (\n    restaurant_id INTEGER PRIMARY KEY,\n    name TEXT,\n    address TEXT,\n    executive_chef_id INTEGER,\n    SOUS_CHEF_ID INTEGER,\n    FOREIGN KEY(executive_chef_id) REFERENCES Executive_chef(chef_id),\n    FOREIGN KEY(SOUS_CHEF_ID) REFERENCES Sous_chef(sous_id)\n);\nCREATE TABLE Sous_chef (\n    sous_id INTEGER PRIMARY KEY,\n    executive_chef_id INTEGER, full_name TEXT,\n    FOREIGN KEY(executive_chef_id) REFERENCES Executive_chef(chef_id)\n);\n\nINSERT INTO \"Executive_chef\" (chef_id,full_name) VALUES (1,'John Doe'),(2,'Jane Smith'),(3,'Michael Johnson');\nINSERT INTO \"Menu_items\" (menu_item_id,item_name,description,price) VALUES (1,'Steak','Grilled Steak with Veggies',30.99),(2,'Salmon','Grilled Salmon with Rice',25.8),(3,'Pasta','Spaghetti Bolognese',15.6),(4,'Pizza','Margherita Pizza',12.5),(5,'Burger','Cheeseburger and Fries',10.8);\nINSERT INTO \"Order_details\" (detail_id,quantity,menu_item_id,order_id) VALUES (1,2,1,1),(2,1,2,2),(3,1,3,3),(4,1,1,4),(5,1,4,5);\nINSERT INTO \"Orders\" (order_id,customer_name,date,total_amount,restaurant_id) VALUES (1,'Customer A','2021-08-10',60.2,1),(2,'Customer B','2021-08-11',45.5,2),(3,'Customer C','2021-08-12',75.3,3),(4,'Customer D','2021-08-13',80.5,1),(5,'Customer E','2021-08-14',55.2,2);\nINSERT INTO \"Restaurant\" (restaurant_id,name,address,executive_chef_id,SOUS_CHEF_ID) VALUES (1,'The Ritz','Main Street',1,1),(2,'Le Grande','East Side',2,2),(3,'Ocean View','Beach Road',3,3);\nINSERT INTO \"Sous_chef\" (sous_id,executive_chef_id,full_name) VALUES (1,1,'Alice Brown'),(2,2,'Bob White'),(3,3,'Charlie Green');\n",
      "question": "List all the executive chefs in alphabetical order by their name.",
      "gold_queries": [
        "SELECT c.Full_name \r\nFROM Executive_chef C ORDER BY Full_name"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Select distinct \"full_name\" values from the \"Executive_chef\" table, ordered alphabetically.",
          "sql_queries": [
            "SELECT DISTINCT full_name FROM Executive_chef ORDER BY full_name"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Retrieve all entries from the \"Executive_chef\" table sorted alphabetically by the \"full_name\" column.",
          "sql_queries": [
            "SELECT full_name FROM Executive_chef ORDER BY full_name"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Hospitality/vague_2tabs_chef/vague_2tabs_chef.sqlite",
      "db_dump": "CREATE TABLE Executive_chef (\n    chef_id INTEGER PRIMARY KEY,\n    full_name TEXT);\nCREATE TABLE Menu_items (\n    menu_item_id INTEGER PRIMARY KEY,\n    item_name TEXT,\n    description TEXT,\n    price DECIMAL(5,2) \n);\nCREATE TABLE Order_details (\n    detail_id INTEGER PRIMARY KEY,\n    quantity INTEGER ,\n    menu_item_id INTEGER,\n    order_id INTEGER,\n    FOREIGN KEY(menu_item_id) REFERENCES Menu_items(menu_item_id),\n    FOREIGN KEY(order_id) REFERENCES Orders(order_id)\n);\nCREATE TABLE Orders (\n    order_id INTEGER PRIMARY KEY,\n    customer_name TEXT,\n    date DATE,\n    total_amount DECIMAL(7,2),\n    restaurant_id INTEGER,\n    FOREIGN KEY(restaurant_id) REFERENCES Restaurant(restaurant_id)\n);\nCREATE TABLE Restaurant (\n    restaurant_id INTEGER PRIMARY KEY,\n    name TEXT,\n    address TEXT,\n    executive_chef_id INTEGER,\n    SOUS_CHEF_ID INTEGER,\n    FOREIGN KEY(executive_chef_id) REFERENCES Executive_chef(chef_id),\n    FOREIGN KEY(SOUS_CHEF_ID) REFERENCES Sous_chef(sous_id)\n);\nCREATE TABLE Sous_chef (\n    sous_id INTEGER PRIMARY KEY,\n    executive_chef_id INTEGER, full_name TEXT,\n    FOREIGN KEY(executive_chef_id) REFERENCES Executive_chef(chef_id)\n);\n\nINSERT INTO \"Executive_chef\" (chef_id,full_name) VALUES (1,'John Doe'),(2,'Jane Smith'),(3,'Michael Johnson');\nINSERT INTO \"Menu_items\" (menu_item_id,item_name,description,price) VALUES (1,'Steak','Grilled Steak with Veggies',30.99),(2,'Salmon','Grilled Salmon with Rice',25.8),(3,'Pasta','Spaghetti Bolognese',15.6),(4,'Pizza','Margherita Pizza',12.5),(5,'Burger','Cheeseburger and Fries',10.8);\nINSERT INTO \"Order_details\" (detail_id,quantity,menu_item_id,order_id) VALUES (1,2,1,1),(2,1,2,2),(3,1,3,3),(4,1,1,4),(5,1,4,5);\nINSERT INTO \"Orders\" (order_id,customer_name,date,total_amount,restaurant_id) VALUES (1,'Customer A','2021-08-10',60.2,1),(2,'Customer B','2021-08-11',45.5,2),(3,'Customer C','2021-08-12',75.3,3),(4,'Customer D','2021-08-13',80.5,1),(5,'Customer E','2021-08-14',55.2,2);\nINSERT INTO \"Restaurant\" (restaurant_id,name,address,executive_chef_id,SOUS_CHEF_ID) VALUES (1,'The Ritz','Main Street',1,1),(2,'Le Grande','East Side',2,2),(3,'Ocean View','Beach Road',3,3);\nINSERT INTO \"Sous_chef\" (sous_id,executive_chef_id,full_name) VALUES (1,1,'Alice Brown'),(2,2,'Bob White'),(3,3,'Charlie Green');\n",
      "question": "List all the sous chefs in alphabetical order by their name.",
      "gold_queries": [
        "SELECT c.Full_name\r\nFROM Sous_chef C ORDER BY Full_name"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Retrieve the names of all sous chefs and sort them alphabetically.",
          "sql_queries": [
            "SELECT full_name FROM Sous_chef ORDER BY full_name"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "List all sous chefs from the Sous_chef table in alphabetical order of their full_name attribute.",
          "sql_queries": [
            "SELECT full_name FROM Sous_chef ORDER BY full_name"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 2,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Hospitality/vague_2tabs_chef/vague_2tabs_chef.sqlite",
      "db_dump": "CREATE TABLE Executive_chef (\n    chef_id INTEGER PRIMARY KEY,\n    full_name TEXT);\nCREATE TABLE Menu_items (\n    menu_item_id INTEGER PRIMARY KEY,\n    item_name TEXT,\n    description TEXT,\n    price DECIMAL(5,2) \n);\nCREATE TABLE Order_details (\n    detail_id INTEGER PRIMARY KEY,\n    quantity INTEGER ,\n    menu_item_id INTEGER,\n    order_id INTEGER,\n    FOREIGN KEY(menu_item_id) REFERENCES Menu_items(menu_item_id),\n    FOREIGN KEY(order_id) REFERENCES Orders(order_id)\n);\nCREATE TABLE Orders (\n    order_id INTEGER PRIMARY KEY,\n    customer_name TEXT,\n    date DATE,\n    total_amount DECIMAL(7,2),\n    restaurant_id INTEGER,\n    FOREIGN KEY(restaurant_id) REFERENCES Restaurant(restaurant_id)\n);\nCREATE TABLE Restaurant (\n    restaurant_id INTEGER PRIMARY KEY,\n    name TEXT,\n    address TEXT,\n    executive_chef_id INTEGER,\n    SOUS_CHEF_ID INTEGER,\n    FOREIGN KEY(executive_chef_id) REFERENCES Executive_chef(chef_id),\n    FOREIGN KEY(SOUS_CHEF_ID) REFERENCES Sous_chef(sous_id)\n);\nCREATE TABLE Sous_chef (\n    sous_id INTEGER PRIMARY KEY,\n    executive_chef_id INTEGER, full_name TEXT,\n    FOREIGN KEY(executive_chef_id) REFERENCES Executive_chef(chef_id)\n);\n\nINSERT INTO \"Executive_chef\" (chef_id,full_name) VALUES (1,'John Doe'),(2,'Jane Smith'),(3,'Michael Johnson');\nINSERT INTO \"Menu_items\" (menu_item_id,item_name,description,price) VALUES (1,'Steak','Grilled Steak with Veggies',30.99),(2,'Salmon','Grilled Salmon with Rice',25.8),(3,'Pasta','Spaghetti Bolognese',15.6),(4,'Pizza','Margherita Pizza',12.5),(5,'Burger','Cheeseburger and Fries',10.8);\nINSERT INTO \"Order_details\" (detail_id,quantity,menu_item_id,order_id) VALUES (1,2,1,1),(2,1,2,2),(3,1,3,3),(4,1,1,4),(5,1,4,5);\nINSERT INTO \"Orders\" (order_id,customer_name,date,total_amount,restaurant_id) VALUES (1,'Customer A','2021-08-10',60.2,1),(2,'Customer B','2021-08-11',45.5,2),(3,'Customer C','2021-08-12',75.3,3),(4,'Customer D','2021-08-13',80.5,1),(5,'Customer E','2021-08-14',55.2,2);\nINSERT INTO \"Restaurant\" (restaurant_id,name,address,executive_chef_id,SOUS_CHEF_ID) VALUES (1,'The Ritz','Main Street',1,1),(2,'Le Grande','East Side',2,2),(3,'Ocean View','Beach Road',3,3);\nINSERT INTO \"Sous_chef\" (sous_id,executive_chef_id,full_name) VALUES (1,1,'Alice Brown'),(2,2,'Bob White'),(3,3,'Charlie Green');\n",
      "question": "Show me any chef who cooks pizza",
      "gold_queries": [
        "Select \r\nc.Full_name\r\nFROM Executive_chef C \r\nJOIN Restaurant R ON c.chef_id = r.executive_chef_id\r\nJOIN Orders O ON R.restaurant_id = O.restaurant_id\r\nJOIN Order_details OD ON O.order_id = OD.order_id\r\nJOIN Menu_items m ON OD.menu_item_id = m.menu_item_id\r\nWHERE  m.item_name = 'Pizza'",
        "Select \r\nc.Full_name\r\nFROM Sous_chef C \r\nJOIN Restaurant R ON c.Sous_id = r.Sous_chef_id\r\nJOIN Orders O ON R.restaurant_id = O.restaurant_id\r\nJOIN Order_details OD ON O.order_id = OD.order_id\r\nJOIN Menu_items m ON OD.menu_item_id = m.menu_item_id\r\nWHERE  m.item_name = 'Pizza'",
        "Select \r\nc.Full_name, C.full_name \r\nFROM Executive_chef C \r\nJOIN Restaurant R ON c.chef_id = r.executive_chef_id\r\nJOIN Orders O ON R.restaurant_id = O.restaurant_id\r\nJOIN Order_details OD ON O.order_id = OD.order_id\r\nJOIN Menu_items m ON OD.menu_item_id = m.menu_item_id\r\n JOIN Sous_chef SC ON SC.Sous_id = r.Sous_chef_id WHERE  m.item_name = 'Pizza'"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Find the IDs of all chefs associated with restaurants that have pizza on their menu.",
          "sql_queries": [
            "SELECT DISTINCT R.executive_chef_id\nFROM Restaurant R\nJOIN Orders O ON R.restaurant_id = O.restaurant_id\nJOIN Order_details OD ON O.order_id = OD.order_id\nJOIN Menu_items MI ON OD.menu_item_id = MI.menu_item_id\nWHERE MI.item_name = 'Pizza'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List the names of all executives chefs whose restaurants have a menu item named 'Pizza'.",
          "sql_queries": [
            "SELECT EC.full_name \nFROM Executive_chef EC \nJOIN Restaurant R ON EC.chef_id = R.executive_chef_id \nJOIN Orders O ON R.restaurant_id = O.restaurant_id \nJOIN Order_details OD ON O.order_id = OD.order_id \nJOIN Menu_items MI ON OD.menu_item_id = MI.menu_item_id \nWHERE MI.item_name = 'Pizza'"
          ],
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve the full names of all chefs who work at restaurants that offer pizza.",
          "sql_queries": [
            "SELECT DISTINCT EC.full_name\nFROM Executive_chef EC\nJOIN Restaurant R ON EC.chef_id = R.executive_chef_id\nJOIN Menu_items MI ON R.restaurant_id = (SELECT restaurant_id FROM Orders O JOIN Order_details OD ON O.order_id = OD.order_id WHERE OD.menu_item_id = (SELECT menu_item_id FROM Menu_items WHERE item_name = 'Pizza') GROUP BY restaurant_id)"
          ],
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Identify any chef who has prepared at least one pizza order.",
          "sql_queries": [
            "SELECT DISTINCT e.full_name\nFROM Executive_chef e\nJOIN Restaurant r ON e.chef_id = r.executive_chef_id\nJOIN Orders o ON r.restaurant_id = o.restaurant_id\nJOIN Order_details od ON o.order_id = od.order_id\nJOIN Menu_items m ON od.menu_item_id = m.menu_item_id\nWHERE m.item_name = 'Pizza'"
          ],
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.3333333333333333,
        "precision": 0.75,
        "f1_score": 0.46153846153846156,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/vague/Hospitality/vague_2tabs_chef/vague_2tabs_chef.sqlite",
      "db_dump": "CREATE TABLE Executive_chef (\n    chef_id INTEGER PRIMARY KEY,\n    full_name TEXT);\nCREATE TABLE Menu_items (\n    menu_item_id INTEGER PRIMARY KEY,\n    item_name TEXT,\n    description TEXT,\n    price DECIMAL(5,2) \n);\nCREATE TABLE Order_details (\n    detail_id INTEGER PRIMARY KEY,\n    quantity INTEGER ,\n    menu_item_id INTEGER,\n    order_id INTEGER,\n    FOREIGN KEY(menu_item_id) REFERENCES Menu_items(menu_item_id),\n    FOREIGN KEY(order_id) REFERENCES Orders(order_id)\n);\nCREATE TABLE Orders (\n    order_id INTEGER PRIMARY KEY,\n    customer_name TEXT,\n    date DATE,\n    total_amount DECIMAL(7,2),\n    restaurant_id INTEGER,\n    FOREIGN KEY(restaurant_id) REFERENCES Restaurant(restaurant_id)\n);\nCREATE TABLE Restaurant (\n    restaurant_id INTEGER PRIMARY KEY,\n    name TEXT,\n    address TEXT,\n    executive_chef_id INTEGER,\n    SOUS_CHEF_ID INTEGER,\n    FOREIGN KEY(executive_chef_id) REFERENCES Executive_chef(chef_id),\n    FOREIGN KEY(SOUS_CHEF_ID) REFERENCES Sous_chef(sous_id)\n);\nCREATE TABLE Sous_chef (\n    sous_id INTEGER PRIMARY KEY,\n    executive_chef_id INTEGER, full_name TEXT,\n    FOREIGN KEY(executive_chef_id) REFERENCES Executive_chef(chef_id)\n);\n\nINSERT INTO \"Executive_chef\" (chef_id,full_name) VALUES (1,'John Doe'),(2,'Jane Smith'),(3,'Michael Johnson');\nINSERT INTO \"Menu_items\" (menu_item_id,item_name,description,price) VALUES (1,'Steak','Grilled Steak with Veggies',30.99),(2,'Salmon','Grilled Salmon with Rice',25.8),(3,'Pasta','Spaghetti Bolognese',15.6),(4,'Pizza','Margherita Pizza',12.5),(5,'Burger','Cheeseburger and Fries',10.8);\nINSERT INTO \"Order_details\" (detail_id,quantity,menu_item_id,order_id) VALUES (1,2,1,1),(2,1,2,2),(3,1,3,3),(4,1,1,4),(5,1,4,5);\nINSERT INTO \"Orders\" (order_id,customer_name,date,total_amount,restaurant_id) VALUES (1,'Customer A','2021-08-10',60.2,1),(2,'Customer B','2021-08-11',45.5,2),(3,'Customer C','2021-08-12',75.3,3),(4,'Customer D','2021-08-13',80.5,1),(5,'Customer E','2021-08-14',55.2,2);\nINSERT INTO \"Restaurant\" (restaurant_id,name,address,executive_chef_id,SOUS_CHEF_ID) VALUES (1,'The Ritz','Main Street',1,1),(2,'Le Grande','East Side',2,2),(3,'Ocean View','Beach Road',3,3);\nINSERT INTO \"Sous_chef\" (sous_id,executive_chef_id,full_name) VALUES (1,1,'Alice Brown'),(2,2,'Bob White'),(3,3,'Charlie Green');\n",
      "question": "Show me the executive chef who cooks pizza?",
      "gold_queries": [
        "Select \r\nc.Full_name\r\nFROM Executive_chef C \r\nJOIN Restaurant R ON c.chef_id = r.executive_chef_id\r\nJOIN Orders O ON R.restaurant_id = O.restaurant_id\r\nJOIN Order_details OD ON O.order_id = OD.order_id\r\nJOIN Menu_items m ON OD.menu_item_id = m.menu_item_id\r\nWHERE  m.item_name = 'Pizza'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Find the executive chef whose restaurant has pizza on the menu.",
          "sql_queries": [
            "SELECT EC.full_name \nFROM Executive_chef EC\nJOIN Restaurant R ON EC.chef_id = R.executive_chef_id\nJOIN Menu_items MI ON MI.menu_item_id = OD.menu_item_id\nJOIN Order_details OD ON OD.order_id = O.order_id\nJOIN Orders O ON O.restaurant_id = R.restaurant_id\nWHERE MI.item_name = 'Pizza'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Show me the chef_id of the executive chef who works for a restaurant serving pizza.",
          "sql_queries": [
            "SELECT R.executive_chef_id \nFROM Restaurant R \nJOIN Orders O ON R.restaurant_id = O.restaurant_id \nJOIN Order_details OD ON O.order_id = OD.order_id \nJOIN Menu_items MI ON OD.menu_item_id = MI.menu_item_id \nWHERE MI.item_name = 'Pizza' \nGROUP BY R.executive_chef_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Show me the full name of the executive chef whose restaurant serves pizza.",
          "sql_queries": [
            "SELECT T1.full_name \nFROM Executive_chef AS T1 \nJOIN Restaurant AS T2 ON T1.chef_id = T2.executive_chef_id \nJOIN Orders AS T3 ON T2.restaurant_id = T3.restaurant_id \nJOIN Order_details AS T4 ON T3.order_id = T4.order_id \nJOIN Menu_items AS T5 ON T4.menu_item_id = T5.menu_item_id \nWHERE T5.item_name = 'Pizza' \nLIMIT 1"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.6666666666666666,
        "f1_score": 0.8,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Hospitality/vague_2tabs_chef/vague_2tabs_chef.sqlite",
      "db_dump": "CREATE TABLE Executive_chef (\n    chef_id INTEGER PRIMARY KEY,\n    full_name TEXT);\nCREATE TABLE Menu_items (\n    menu_item_id INTEGER PRIMARY KEY,\n    item_name TEXT,\n    description TEXT,\n    price DECIMAL(5,2) \n);\nCREATE TABLE Order_details (\n    detail_id INTEGER PRIMARY KEY,\n    quantity INTEGER ,\n    menu_item_id INTEGER,\n    order_id INTEGER,\n    FOREIGN KEY(menu_item_id) REFERENCES Menu_items(menu_item_id),\n    FOREIGN KEY(order_id) REFERENCES Orders(order_id)\n);\nCREATE TABLE Orders (\n    order_id INTEGER PRIMARY KEY,\n    customer_name TEXT,\n    date DATE,\n    total_amount DECIMAL(7,2),\n    restaurant_id INTEGER,\n    FOREIGN KEY(restaurant_id) REFERENCES Restaurant(restaurant_id)\n);\nCREATE TABLE Restaurant (\n    restaurant_id INTEGER PRIMARY KEY,\n    name TEXT,\n    address TEXT,\n    executive_chef_id INTEGER,\n    SOUS_CHEF_ID INTEGER,\n    FOREIGN KEY(executive_chef_id) REFERENCES Executive_chef(chef_id),\n    FOREIGN KEY(SOUS_CHEF_ID) REFERENCES Sous_chef(sous_id)\n);\nCREATE TABLE Sous_chef (\n    sous_id INTEGER PRIMARY KEY,\n    executive_chef_id INTEGER, full_name TEXT,\n    FOREIGN KEY(executive_chef_id) REFERENCES Executive_chef(chef_id)\n);\n\nINSERT INTO \"Executive_chef\" (chef_id,full_name) VALUES (1,'John Doe'),(2,'Jane Smith'),(3,'Michael Johnson');\nINSERT INTO \"Menu_items\" (menu_item_id,item_name,description,price) VALUES (1,'Steak','Grilled Steak with Veggies',30.99),(2,'Salmon','Grilled Salmon with Rice',25.8),(3,'Pasta','Spaghetti Bolognese',15.6),(4,'Pizza','Margherita Pizza',12.5),(5,'Burger','Cheeseburger and Fries',10.8);\nINSERT INTO \"Order_details\" (detail_id,quantity,menu_item_id,order_id) VALUES (1,2,1,1),(2,1,2,2),(3,1,3,3),(4,1,1,4),(5,1,4,5);\nINSERT INTO \"Orders\" (order_id,customer_name,date,total_amount,restaurant_id) VALUES (1,'Customer A','2021-08-10',60.2,1),(2,'Customer B','2021-08-11',45.5,2),(3,'Customer C','2021-08-12',75.3,3),(4,'Customer D','2021-08-13',80.5,1),(5,'Customer E','2021-08-14',55.2,2);\nINSERT INTO \"Restaurant\" (restaurant_id,name,address,executive_chef_id,SOUS_CHEF_ID) VALUES (1,'The Ritz','Main Street',1,1),(2,'Le Grande','East Side',2,2),(3,'Ocean View','Beach Road',3,3);\nINSERT INTO \"Sous_chef\" (sous_id,executive_chef_id,full_name) VALUES (1,1,'Alice Brown'),(2,2,'Bob White'),(3,3,'Charlie Green');\n",
      "question": "List all the executive chefs and sous chefs in alphabetical order by their name.",
      "gold_queries": [
        "SELECT c.Full_name, C.full_name \r\nFROM Executive_chef C JOIN Restaurant R ON c.chef_id = r.executive_chef_id JOIN Sous_chef SC ON SC.Sous_id = r.Sous_chef_id ORDER BY C.Full_name, SC.Full_name"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "SELECT full_name FROM Sous_chef ORDER BY full_name ASC",
          "sql_queries": [
            "SELECT full_name FROM Sous_chef ORDER BY full_name ASC"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "SELECT full_name FROM Executive_chef ORDER BY full_name ASC",
          "sql_queries": [
            "SELECT full_name FROM Executive_chef ORDER BY full_name ASC"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "SELECT e.full_name, s.full_name",
          "sql_queries": [
            "SELECT e.full_name, s.full_name\nFROM Executive_chef e\nJOIN Sous_chef s ON e.chef_id = s.executive_chef_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "FROM Executive_chef e",
          "sql_queries": [
            "SELECT full_name FROM Executive_chef"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Select full_name FROM Executive_chef ORDER BY full_name ASC UNION ALL Select full_name FROM Sous_chef ORDER BY full_name ASC",
          "sql_queries": [
            "SELECT full_name FROM Executive_chef ORDER BY full_name ASC UNION ALL SELECT full_name FROM Sous_chef ORDER BY full_name ASC\n"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT full_name FROM Executive_chef ORDER BY full_name ASC UNION ALL SELECT full_name FROM Sous_chef ORDER BY full_name ASC\n",
                "original_exception": "ORDER BY clause should come after UNION ALL not before"
              }
            ],
            "all_found": false
          }
        },
        {
          "interpretation": "JOIN Sous_chef s ON e.chef_id = s.executive_chef_id",
          "sql_queries": [
            "SELECT e.full_name, s.full_name \nFROM Executive_chef e \nJOIN Sous_chef s ON e.chef_id = s.executive_chef_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "ORDER BY e.full_name, s.full_name;",
          "sql_queries": [
            "SELECT e.full_name, s.full_name\nFROM Executive_chef e\nJOIN Sous_chef s ON e.chef_id = s.executive_chef_id\nORDER BY e.full_name, s.full_name"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 7,
        "num_unique_queries": 7,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [
          {
            "query": "SELECT full_name FROM Executive_chef ORDER BY full_name ASC UNION ALL SELECT full_name FROM Sous_chef ORDER BY full_name ASC\n",
            "original_exception": "ORDER BY clause should come after UNION ALL not before"
          }
        ],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_background/vague_2cols_background.sqlite",
      "db_dump": "CREATE TABLE Article (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    author_id INTEGER,\n    publication_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY(author_id) REFERENCES Author(id));\nCREATE TABLE Author (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT UNIQUE);\nCREATE TABLE Journalist (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT,\n    education TEXT,\n    experience INTEGER,\n    photojournalist BOOLEAN DEFAULT FALSE);\nCREATE TABLE Publication (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    publisher_id INTEGER,\n    publication_name TEXT,\n    start_year INTEGER,\n    end_year INTEGER,\n    FOREIGN KEY(publisher_id) REFERENCES Publisher(id));\nCREATE TABLE Publisher (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    address TEXT,\n    contact_email TEXT UNIQUE);\n\nINSERT INTO \"Article\" (id,title,content,author_id,publication_date) VALUES (1,'Sample Title','Sample Content',1,'2024-02-19 14:11:16'),(2,'Another Sample Title','More Sample Content',2,'2024-02-19 14:11:16');\nINSERT INTO \"Author\" (id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com');\nINSERT INTO \"Journalist\" (id,name,email,education,experience,photojournalist) VALUES (1,'Tom Brown','tom@example.com','Bachelor of Arts',5,1),(2,'Alice Green','alice@example.com','Master of Science',8,0);\nINSERT INTO \"Publication\" (id,publisher_id,publication_name,start_year,end_year) VALUES (1,1,'The Daily Sun',1900,NULL),(2,2,'The Weekly Herald',1975,NULL);\nINSERT INTO \"Publisher\" (id,name,address,contact_email) VALUES (1,'Daily News Group','123 Main St.','editor@dailynewsgroup.com'),(2,'Weekly Chronicles','456 Elm St.','editor@weeklychronicles.com');\n",
      "question": "What is the education and experience of the photojournalist?",
      "gold_queries": [
        "SELECT education, experience FROM Journalist WHERE photojournalist = 1"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Education and experience of all photojournalists in the database",
          "sql_queries": [
            "SELECT education, experience FROM Journalist WHERE photojournalist = TRUE"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Education and experience of any person who is identified as a photojournalist in the database",
          "sql_queries": [
            "SELECT education, experience\nFROM Journalist\nWHERE photojournalist = TRUE"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Education and experience of the photojournalist in the Journalist table",
          "sql_queries": [
            "SELECT education, experience FROM Journalist WHERE photojournalist = TRUE"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Education and experience of a specific photojournalist, if the question is asking for a named individual",
          "sql_queries": [
            "SELECT education, experience FROM Journalist WHERE name = 'Specific Photojournalist Name' AND photojournalist = 1"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.6666666666666666,
        "f1_score": 0.8,
        "num_queries": 4,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_background/vague_2cols_background.sqlite",
      "db_dump": "CREATE TABLE Article (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    author_id INTEGER,\n    publication_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY(author_id) REFERENCES Author(id));\nCREATE TABLE Author (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT UNIQUE);\nCREATE TABLE Journalist (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT,\n    education TEXT,\n    experience INTEGER,\n    photojournalist BOOLEAN DEFAULT FALSE);\nCREATE TABLE Publication (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    publisher_id INTEGER,\n    publication_name TEXT,\n    start_year INTEGER,\n    end_year INTEGER,\n    FOREIGN KEY(publisher_id) REFERENCES Publisher(id));\nCREATE TABLE Publisher (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    address TEXT,\n    contact_email TEXT UNIQUE);\n\nINSERT INTO \"Article\" (id,title,content,author_id,publication_date) VALUES (1,'Sample Title','Sample Content',1,'2024-02-19 14:11:16'),(2,'Another Sample Title','More Sample Content',2,'2024-02-19 14:11:16');\nINSERT INTO \"Author\" (id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com');\nINSERT INTO \"Journalist\" (id,name,email,education,experience,photojournalist) VALUES (1,'Tom Brown','tom@example.com','Bachelor of Arts',5,1),(2,'Alice Green','alice@example.com','Master of Science',8,0);\nINSERT INTO \"Publication\" (id,publisher_id,publication_name,start_year,end_year) VALUES (1,1,'The Daily Sun',1900,NULL),(2,2,'The Weekly Herald',1975,NULL);\nINSERT INTO \"Publisher\" (id,name,address,contact_email) VALUES (1,'Daily News Group','123 Main St.','editor@dailynewsgroup.com'),(2,'Weekly Chronicles','456 Elm St.','editor@weeklychronicles.com');\n",
      "question": "What is the experience of the photojournalist?",
      "gold_queries": [
        "SELECT experience FROM Journalist WHERE photojournalist = 1"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "The total years of experience of all photojournalists.",
          "sql_queries": [
            "SELECT SUM(experience) FROM Journalist WHERE photojournalist = TRUE"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "The experience level of the photojournalist.",
          "sql_queries": [
            "SELECT experience FROM Journalist WHERE photojournalist = TRUE"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_background/vague_2cols_background.sqlite",
      "db_dump": "CREATE TABLE Article (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    author_id INTEGER,\n    publication_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY(author_id) REFERENCES Author(id));\nCREATE TABLE Author (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT UNIQUE);\nCREATE TABLE Journalist (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT,\n    education TEXT,\n    experience INTEGER,\n    photojournalist BOOLEAN DEFAULT FALSE);\nCREATE TABLE Publication (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    publisher_id INTEGER,\n    publication_name TEXT,\n    start_year INTEGER,\n    end_year INTEGER,\n    FOREIGN KEY(publisher_id) REFERENCES Publisher(id));\nCREATE TABLE Publisher (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    address TEXT,\n    contact_email TEXT UNIQUE);\n\nINSERT INTO \"Article\" (id,title,content,author_id,publication_date) VALUES (1,'Sample Title','Sample Content',1,'2024-02-19 14:11:16'),(2,'Another Sample Title','More Sample Content',2,'2024-02-19 14:11:16');\nINSERT INTO \"Author\" (id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com');\nINSERT INTO \"Journalist\" (id,name,email,education,experience,photojournalist) VALUES (1,'Tom Brown','tom@example.com','Bachelor of Arts',5,1),(2,'Alice Green','alice@example.com','Master of Science',8,0);\nINSERT INTO \"Publication\" (id,publisher_id,publication_name,start_year,end_year) VALUES (1,1,'The Daily Sun',1900,NULL),(2,2,'The Weekly Herald',1975,NULL);\nINSERT INTO \"Publisher\" (id,name,address,contact_email) VALUES (1,'Daily News Group','123 Main St.','editor@dailynewsgroup.com'),(2,'Weekly Chronicles','456 Elm St.','editor@weeklychronicles.com');\n",
      "question": "What is the background of the journalist named Alice?",
      "gold_queries": [
        "SELECT education FROM Journalist WHERE name LIKE 'Alice%'",
        "SELECT experience FROM Journalist WHERE name LIKE 'Alice%'",
        "SELECT education, experience FROM Journalist WHERE name LIKE 'Alice%'"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Is Alice Green a photojournalist?",
          "sql_queries": [
            "SELECT photojournalist FROM Journalist WHERE name = 'Alice Green'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "What is Alice Green's educational history?",
          "sql_queries": [
            "SELECT education FROM Journalist WHERE name = 'Alice Green'"
          ],
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "What is Alice Green's work experience?",
          "sql_queries": [
            "SELECT experience FROM Journalist WHERE name = 'Alice Green'"
          ],
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "What does Alice Green's profile look like in the Journalist table?",
          "sql_queries": [
            "SELECT name, email, education, experience, photojournalist FROM Journalist WHERE name = 'Alice Green'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "What are all the details about Alice Green?",
          "sql_queries": [
            "SELECT * FROM Journalist WHERE name = 'Alice Green'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.6666666666666666,
        "precision": 0.4,
        "f1_score": 0.5,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_background/vague_2cols_background.sqlite",
      "db_dump": "CREATE TABLE Article (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    author_id INTEGER,\n    publication_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY(author_id) REFERENCES Author(id));\nCREATE TABLE Author (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT UNIQUE);\nCREATE TABLE Journalist (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT,\n    education TEXT,\n    experience INTEGER,\n    photojournalist BOOLEAN DEFAULT FALSE);\nCREATE TABLE Publication (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    publisher_id INTEGER,\n    publication_name TEXT,\n    start_year INTEGER,\n    end_year INTEGER,\n    FOREIGN KEY(publisher_id) REFERENCES Publisher(id));\nCREATE TABLE Publisher (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    address TEXT,\n    contact_email TEXT UNIQUE);\n\nINSERT INTO \"Article\" (id,title,content,author_id,publication_date) VALUES (1,'Sample Title','Sample Content',1,'2024-02-19 14:11:16'),(2,'Another Sample Title','More Sample Content',2,'2024-02-19 14:11:16');\nINSERT INTO \"Author\" (id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com');\nINSERT INTO \"Journalist\" (id,name,email,education,experience,photojournalist) VALUES (1,'Tom Brown','tom@example.com','Bachelor of Arts',5,1),(2,'Alice Green','alice@example.com','Master of Science',8,0);\nINSERT INTO \"Publication\" (id,publisher_id,publication_name,start_year,end_year) VALUES (1,1,'The Daily Sun',1900,NULL),(2,2,'The Weekly Herald',1975,NULL);\nINSERT INTO \"Publisher\" (id,name,address,contact_email) VALUES (1,'Daily News Group','123 Main St.','editor@dailynewsgroup.com'),(2,'Weekly Chronicles','456 Elm St.','editor@weeklychronicles.com');\n",
      "question": "What is the education of the journalist named Alice?",
      "gold_queries": [
        "SELECT education FROM Journalist WHERE name LIKE 'Alice%'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What is the degree or field of study of Alice Green?",
          "sql_queries": [
            "SELECT education FROM Journalist WHERE name = 'Alice Green'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Which educational qualification does Alice Green possess?",
          "sql_queries": [
            "SELECT education FROM Journalist WHERE name = 'Alice Green'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "What is the education level of the journalist Alice Green?",
          "sql_queries": [
            "SELECT education FROM Journalist WHERE name = 'Alice Green'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 3,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_background/vague_2cols_background.sqlite",
      "db_dump": "CREATE TABLE Article (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    author_id INTEGER,\n    publication_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY(author_id) REFERENCES Author(id));\nCREATE TABLE Author (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT UNIQUE);\nCREATE TABLE Journalist (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT,\n    education TEXT,\n    experience INTEGER,\n    photojournalist BOOLEAN DEFAULT FALSE);\nCREATE TABLE Publication (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    publisher_id INTEGER,\n    publication_name TEXT,\n    start_year INTEGER,\n    end_year INTEGER,\n    FOREIGN KEY(publisher_id) REFERENCES Publisher(id));\nCREATE TABLE Publisher (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    address TEXT,\n    contact_email TEXT UNIQUE);\n\nINSERT INTO \"Article\" (id,title,content,author_id,publication_date) VALUES (1,'Sample Title','Sample Content',1,'2024-02-19 14:11:16'),(2,'Another Sample Title','More Sample Content',2,'2024-02-19 14:11:16');\nINSERT INTO \"Author\" (id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com');\nINSERT INTO \"Journalist\" (id,name,email,education,experience,photojournalist) VALUES (1,'Tom Brown','tom@example.com','Bachelor of Arts',5,1),(2,'Alice Green','alice@example.com','Master of Science',8,0);\nINSERT INTO \"Publication\" (id,publisher_id,publication_name,start_year,end_year) VALUES (1,1,'The Daily Sun',1900,NULL),(2,2,'The Weekly Herald',1975,NULL);\nINSERT INTO \"Publisher\" (id,name,address,contact_email) VALUES (1,'Daily News Group','123 Main St.','editor@dailynewsgroup.com'),(2,'Weekly Chronicles','456 Elm St.','editor@weeklychronicles.com');\n",
      "question": "What is the education of the photojournalist?",
      "gold_queries": [
        "SELECT education FROM Journalist WHERE photojournalist = 1"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What educational background is typically required to become a photojournalist?",
          "sql_queries": [
            "SELECT DISTINCT education FROM Journalist WHERE photojournalist = 1"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Within the given dataset, what is the education of the specific individual who is classified as a photojournalist?",
          "sql_queries": [
            "SELECT education FROM Journalist WHERE photojournalist = TRUE"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "What is the education level of an individual identified as a photojournalist?",
          "sql_queries": [
            "SELECT education FROM Journalist WHERE photojournalist = 1"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_background/vague_2cols_background.sqlite",
      "db_dump": "CREATE TABLE Article (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    author_id INTEGER,\n    publication_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY(author_id) REFERENCES Author(id));\nCREATE TABLE Author (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT UNIQUE);\nCREATE TABLE Journalist (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT,\n    education TEXT,\n    experience INTEGER,\n    photojournalist BOOLEAN DEFAULT FALSE);\nCREATE TABLE Publication (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    publisher_id INTEGER,\n    publication_name TEXT,\n    start_year INTEGER,\n    end_year INTEGER,\n    FOREIGN KEY(publisher_id) REFERENCES Publisher(id));\nCREATE TABLE Publisher (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    address TEXT,\n    contact_email TEXT UNIQUE);\n\nINSERT INTO \"Article\" (id,title,content,author_id,publication_date) VALUES (1,'Sample Title','Sample Content',1,'2024-02-19 14:11:16'),(2,'Another Sample Title','More Sample Content',2,'2024-02-19 14:11:16');\nINSERT INTO \"Author\" (id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com');\nINSERT INTO \"Journalist\" (id,name,email,education,experience,photojournalist) VALUES (1,'Tom Brown','tom@example.com','Bachelor of Arts',5,1),(2,'Alice Green','alice@example.com','Master of Science',8,0);\nINSERT INTO \"Publication\" (id,publisher_id,publication_name,start_year,end_year) VALUES (1,1,'The Daily Sun',1900,NULL),(2,2,'The Weekly Herald',1975,NULL);\nINSERT INTO \"Publisher\" (id,name,address,contact_email) VALUES (1,'Daily News Group','123 Main St.','editor@dailynewsgroup.com'),(2,'Weekly Chronicles','456 Elm St.','editor@weeklychronicles.com');\n",
      "question": "What is the experience of the journalist named Alice?",
      "gold_queries": [
        "SELECT experience FROM Journalist WHERE name LIKE 'Alice%'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Which Journalist has the name \"Alice\", and what experience level does that journalist possess?",
          "sql_queries": [
            "SELECT name, experience FROM Journalist WHERE name = 'Alice'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "For the journalist Alice, what is the value stored in the \"experience\" field?",
          "sql_queries": [
            "SELECT experience FROM Journalist WHERE name = 'Alice Green'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "What is the value of the \"experience\" column for the Journalist row where \"name\" is \"Alice\"?",
          "sql_queries": [
            "SELECT experience FROM Journalist WHERE name = 'Alice'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_background/vague_2cols_background.sqlite",
      "db_dump": "CREATE TABLE Article (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    author_id INTEGER,\n    publication_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY(author_id) REFERENCES Author(id));\nCREATE TABLE Author (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT UNIQUE);\nCREATE TABLE Journalist (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT,\n    education TEXT,\n    experience INTEGER,\n    photojournalist BOOLEAN DEFAULT FALSE);\nCREATE TABLE Publication (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    publisher_id INTEGER,\n    publication_name TEXT,\n    start_year INTEGER,\n    end_year INTEGER,\n    FOREIGN KEY(publisher_id) REFERENCES Publisher(id));\nCREATE TABLE Publisher (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    address TEXT,\n    contact_email TEXT UNIQUE);\n\nINSERT INTO \"Article\" (id,title,content,author_id,publication_date) VALUES (1,'Sample Title','Sample Content',1,'2024-02-19 14:11:16'),(2,'Another Sample Title','More Sample Content',2,'2024-02-19 14:11:16');\nINSERT INTO \"Author\" (id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com');\nINSERT INTO \"Journalist\" (id,name,email,education,experience,photojournalist) VALUES (1,'Tom Brown','tom@example.com','Bachelor of Arts',5,1),(2,'Alice Green','alice@example.com','Master of Science',8,0);\nINSERT INTO \"Publication\" (id,publisher_id,publication_name,start_year,end_year) VALUES (1,1,'The Daily Sun',1900,NULL),(2,2,'The Weekly Herald',1975,NULL);\nINSERT INTO \"Publisher\" (id,name,address,contact_email) VALUES (1,'Daily News Group','123 Main St.','editor@dailynewsgroup.com'),(2,'Weekly Chronicles','456 Elm St.','editor@weeklychronicles.com');\n",
      "question": "What is the educational and experience background of the journalist named Alice?",
      "gold_queries": [
        "SELECT education, experience FROM Journalist WHERE name LIKE 'Alice%'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Retrieve the values for education and experience from the Journalist table for the record where name is 'Alice'.",
          "sql_queries": [
            "SELECT education, experience FROM Journalist WHERE name = 'Alice'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Find the journalist named Alice and list their education and experience.",
          "sql_queries": [
            "SELECT education, experience FROM Journalist WHERE name = 'Alice Green'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Select education, experience from Journalist where name = 'Alice Green';",
          "sql_queries": [
            "SELECT education, experience FROM Journalist WHERE name = 'Alice Green'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Which Journalist named Alice possesses what education and experience?",
          "sql_queries": [
            "SELECT education, experience FROM Journalist WHERE name = 'Alice Green'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Give me the educational and experiential details of the journalist called Alice.",
          "sql_queries": [
            "SELECT education, experience FROM Journalist WHERE name = 'Alice'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 5,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_background/vague_2cols_background.sqlite",
      "db_dump": "CREATE TABLE Article (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    author_id INTEGER,\n    publication_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY(author_id) REFERENCES Author(id));\nCREATE TABLE Author (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT UNIQUE);\nCREATE TABLE Journalist (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT,\n    education TEXT,\n    experience INTEGER,\n    photojournalist BOOLEAN DEFAULT FALSE);\nCREATE TABLE Publication (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    publisher_id INTEGER,\n    publication_name TEXT,\n    start_year INTEGER,\n    end_year INTEGER,\n    FOREIGN KEY(publisher_id) REFERENCES Publisher(id));\nCREATE TABLE Publisher (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    address TEXT,\n    contact_email TEXT UNIQUE);\n\nINSERT INTO \"Article\" (id,title,content,author_id,publication_date) VALUES (1,'Sample Title','Sample Content',1,'2024-02-19 14:11:16'),(2,'Another Sample Title','More Sample Content',2,'2024-02-19 14:11:16');\nINSERT INTO \"Author\" (id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com');\nINSERT INTO \"Journalist\" (id,name,email,education,experience,photojournalist) VALUES (1,'Tom Brown','tom@example.com','Bachelor of Arts',5,1),(2,'Alice Green','alice@example.com','Master of Science',8,0);\nINSERT INTO \"Publication\" (id,publisher_id,publication_name,start_year,end_year) VALUES (1,1,'The Daily Sun',1900,NULL),(2,2,'The Weekly Herald',1975,NULL);\nINSERT INTO \"Publisher\" (id,name,address,contact_email) VALUES (1,'Daily News Group','123 Main St.','editor@dailynewsgroup.com'),(2,'Weekly Chronicles','456 Elm St.','editor@weeklychronicles.com');\n",
      "question": "What is the background of the photojournalist in the table?",
      "gold_queries": [
        "SELECT education FROM Journalist WHERE photojournalist = 1",
        "SELECT experience FROM Journalist WHERE photojournalist = 1",
        "SELECT education, experience FROM Journalist WHERE photojournalist = 1"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What is the history and context surrounding the photojournalist in the database?",
          "sql_queries": [
            "SELECT name, email, education, experience, photojournalist FROM Journalist WHERE photojournalist = 1"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "What is the biographical information about the photojournalist?",
          "sql_queries": [
            "SELECT name, email, education, experience FROM Journalist WHERE photojournalist = TRUE"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "What are the personal and professional details of the photojournalist?",
          "sql_queries": [
            "SELECT name, email, education, experience FROM Journalist WHERE photojournalist = TRUE"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "What are the relevant data points about the photojournalist's history in the provided tables?",
          "sql_queries": [
            "SELECT name, email, education, experience FROM Journalist WHERE photojournalist = TRUE"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "What can be inferred about the photojournalist's background based on their experience and education?",
          "sql_queries": [
            "SELECT education, experience FROM Journalist WHERE photojournalist = TRUE"
          ],
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "What is the educational and experiential background of the photojournalist?",
          "sql_queries": [
            "SELECT education, experience FROM Journalist WHERE photojournalist = TRUE"
          ],
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.3333333333333333,
        "precision": 0.3333333333333333,
        "f1_score": 0.3333333333333333,
        "num_queries": 6,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_2tab_val_accommodation2/attachment_2tab_val_accommodation2.sqlite",
      "db_dump": "CREATE TABLE Bookings(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    guestId INTEGER,\n    chaletId INTEGER,\n    bookingDate DATETIME,\n    totalCost REAL,\n    FOREIGN KEY(guestId) REFERENCES Guests(id),\n    FOREIGN KEY(chaletId) REFERENCES Chalets(id)\n);\nCREATE TABLE Cabins(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    cabinName TEXT,\n    pricePerNight REAL ,\n    location TEXT,\n    capacity INTEGER\n);\nCREATE TABLE Chalets(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    chaletName TEXT,\n    pricePerNight REAL ,\n    location TEXT,\n    capacity INTEGER\n);\nCREATE TABLE Guests(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstname TEXT,\n    lastname TEXT,\n    email TEXT,\n    phoneNumber VARCHAR(15),\n    checkIn DATETIME,\n    checkOut DATETIME\n);\nCREATE TABLE Reviews(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    guestId INTEGER,\n    chaletId INTEGER,\n    rating INTEGER ,\n    comment TEXT,\n    reviewDate DATETIME,\n    FOREIGN KEY(guestId) REFERENCES Guests(id),\n    FOREIGN KEY(chaletId) REFERENCES Chalets(id)\n);\n\nINSERT INTO \"Bookings\" (id,guestId,chaletId,bookingDate,totalCost) VALUES (1,1,1,'2022-01-01 00:00:00',1000.0),(2,2,2,'2022-01-01 00:00:00',1200.0),(3,3,3,'2022-01-01 00:00:00',1500.0),(4,4,4,'2022-01-01 00:00:00',1800.0),(5,5,5,'2022-01-01 00:00:00',2000.0);\nINSERT INTO \"Cabins\" (id,cabinName,pricePerNight,location,capacity) VALUES (1,'Lakeshore',200.0,'Lake',4),(2,'Riverview',300.0,'Riverside',6),(3,'Seaside',250.0,'Coast',8),(4,'Woodside',150.0,'Forest',4),(5,'Valley',275.0,'Hills',6);\nINSERT INTO \"Chalets\" (id,chaletName,pricePerNight,location,capacity) VALUES (1,'Aurora',200.0,'Alps',6),(2,'Sunshine',300.0,'Beach',8),(3,'Moonlight',250.0,'City',10),(4,'Starlight',150.0,'Forest',8),(5,'Dawn',275.0,'Mountain',6);\nINSERT INTO \"Guests\" (id,firstname,lastname,email,phoneNumber,checkIn,checkOut) VALUES (1,'John','Doe','john@gmail.com','1234567890','2022-01-01 10:00:00','2022-01-05 15:00:00'),(2,'Jane','Smith','jane@gmail.com','0987654321','2022-01-01 15:00:00','2022-01-05 10:00:00'),(3,'Jack','Brown','jack@gmail.com','1112223334','2022-01-01 12:00:00','2022-01-05 11:00:00'),(4,'Samantha','White','samantha@gmail.com','4321123456','2022-01-01 13:00:00','2022-01-05 12:00:00'),(5,'Emma','Black','emma@gmail.com','3456789123','2022-01-01 14:00:00','2022-01-05 13:00:00');\nINSERT INTO \"Reviews\" (id,guestId,chaletId,rating,comment,reviewDate) VALUES (1,1,1,5,'Great stay!','2022-01-01 00:00:00'),(2,2,2,4,'Good experience!','2022-01-01 00:00:00'),(3,3,3,3,'Fine, could have been better.','2022-01-01 00:00:00'),(4,4,4,5,'Excellent service!','2022-01-01 00:00:00'),(5,5,5,4,'Good value for money.','2022-01-01 00:00:00');\n",
      "question": "Display chalets and cabins that cost $200 per night. Show them in one table.",
      "gold_queries": [
        "SELECT Chalets.chaletName as name\r\nFROM Chalets\r\nWHERE Chalets.pricePerNight = 200.0\r\nUNION\r\nSELECT Cabins.cabinName as name\r\nFROM Cabins\r\nWHERE Cabins.pricePerNight = 200.0",
        "SELECT Chalets.chaletName as name\r\nFROM Chalets\r\nUNION\r\nSELECT Cabins.cabinName as name\r\nFROM Cabins\r\nWHERE Cabins.pricePerNight = 200.0"
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Showing chalets and cabins that cost $200 per night",
          "sql_queries": [
            "SELECT chaletName FROM Chalets WHERE pricePerNight = 200 UNION SELECT cabinName FROM Cabins WHERE pricePerNight = 200"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Displaying chalets and cabins priced at $1000.0",
          "sql_queries": [
            "SELECT chaletName FROM Chalets WHERE pricePerNight = 1000.0\nUNION\nSELECT cabinName FROM Cabins WHERE pricePerNight = 1000.0"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Showing chalets and cabins with a price per night equal to $200.0",
          "sql_queries": [
            "SELECT chaletName FROM Chalets WHERE pricePerNight = 200.0 UNION SELECT cabinName FROM Cabins WHERE pricePerNight = 200.0"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Identifying chalets and cabins with a nightly rate of $200.",
          "sql_queries": [
            "SELECT chaletName FROM Chalets WHERE pricePerNight = 200 UNION SELECT cabinName FROM Cabins WHERE pricePerNight = 200"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.6666666666666666,
        "f1_score": 0.5714285714285715,
        "num_queries": 4,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_2tab_val_accommodation2/attachment_2tab_val_accommodation2.sqlite",
      "db_dump": "CREATE TABLE Bookings(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    guestId INTEGER,\n    chaletId INTEGER,\n    bookingDate DATETIME,\n    totalCost REAL,\n    FOREIGN KEY(guestId) REFERENCES Guests(id),\n    FOREIGN KEY(chaletId) REFERENCES Chalets(id)\n);\nCREATE TABLE Cabins(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    cabinName TEXT,\n    pricePerNight REAL ,\n    location TEXT,\n    capacity INTEGER\n);\nCREATE TABLE Chalets(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    chaletName TEXT,\n    pricePerNight REAL ,\n    location TEXT,\n    capacity INTEGER\n);\nCREATE TABLE Guests(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstname TEXT,\n    lastname TEXT,\n    email TEXT,\n    phoneNumber VARCHAR(15),\n    checkIn DATETIME,\n    checkOut DATETIME\n);\nCREATE TABLE Reviews(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    guestId INTEGER,\n    chaletId INTEGER,\n    rating INTEGER ,\n    comment TEXT,\n    reviewDate DATETIME,\n    FOREIGN KEY(guestId) REFERENCES Guests(id),\n    FOREIGN KEY(chaletId) REFERENCES Chalets(id)\n);\n\nINSERT INTO \"Bookings\" (id,guestId,chaletId,bookingDate,totalCost) VALUES (1,1,1,'2022-01-01 00:00:00',1000.0),(2,2,2,'2022-01-01 00:00:00',1200.0),(3,3,3,'2022-01-01 00:00:00',1500.0),(4,4,4,'2022-01-01 00:00:00',1800.0),(5,5,5,'2022-01-01 00:00:00',2000.0);\nINSERT INTO \"Cabins\" (id,cabinName,pricePerNight,location,capacity) VALUES (1,'Lakeshore',200.0,'Lake',4),(2,'Riverview',300.0,'Riverside',6),(3,'Seaside',250.0,'Coast',8),(4,'Woodside',150.0,'Forest',4),(5,'Valley',275.0,'Hills',6);\nINSERT INTO \"Chalets\" (id,chaletName,pricePerNight,location,capacity) VALUES (1,'Aurora',200.0,'Alps',6),(2,'Sunshine',300.0,'Beach',8),(3,'Moonlight',250.0,'City',10),(4,'Starlight',150.0,'Forest',8),(5,'Dawn',275.0,'Mountain',6);\nINSERT INTO \"Guests\" (id,firstname,lastname,email,phoneNumber,checkIn,checkOut) VALUES (1,'John','Doe','john@gmail.com','1234567890','2022-01-01 10:00:00','2022-01-05 15:00:00'),(2,'Jane','Smith','jane@gmail.com','0987654321','2022-01-01 15:00:00','2022-01-05 10:00:00'),(3,'Jack','Brown','jack@gmail.com','1112223334','2022-01-01 12:00:00','2022-01-05 11:00:00'),(4,'Samantha','White','samantha@gmail.com','4321123456','2022-01-01 13:00:00','2022-01-05 12:00:00'),(5,'Emma','Black','emma@gmail.com','3456789123','2022-01-01 14:00:00','2022-01-05 13:00:00');\nINSERT INTO \"Reviews\" (id,guestId,chaletId,rating,comment,reviewDate) VALUES (1,1,1,5,'Great stay!','2022-01-01 00:00:00'),(2,2,2,4,'Good experience!','2022-01-01 00:00:00'),(3,3,3,3,'Fine, could have been better.','2022-01-01 00:00:00'),(4,4,4,5,'Excellent service!','2022-01-01 00:00:00'),(5,5,5,4,'Good value for money.','2022-01-01 00:00:00');\n",
      "question": "Can you show chalets and cabins that cost $200 per night? Show them in one table.",
      "gold_queries": [
        "SELECT Chalets.chaletName as name\r\nFROM Chalets\r\nWHERE Chalets.pricePerNight = 200.0\r\nUNION\r\nSELECT Cabins.cabinName as name\r\nFROM Cabins\r\nWHERE Cabins.pricePerNight = 200.0"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "SELECT chaletName,pricePerNight FROM Chalets WHERE pricePerNight = 200.0",
          "sql_queries": [
            "SELECT chaletName, pricePerNight FROM Chalets WHERE pricePerNight = 200.0\n"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "SELECT cabinName,pricePerNight FROM Cabins WHERE pricePerNight = 200",
          "sql_queries": [
            "SELECT cabinName, pricePerNight FROM Cabins WHERE pricePerNight = 200"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "SELECT chaletName,pricePerNight FROM Chalets WHERE pricePerNight = 200",
          "sql_queries": [
            "SELECT chaletName, pricePerNight FROM Chalets WHERE pricePerNight = 200\n"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "SELECT * FROM Chalets WHERE pricePerNight = 200.0 UNION SELECT * FROM Cabins WHERE pricePerNight = 200.0",
          "sql_queries": [
            "SELECT * FROM Chalets WHERE pricePerNight = 200.0 UNION SELECT * FROM Cabins WHERE pricePerNight = 200.0\n"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "SELECT cabinName,pricePerNight FROM Cabins WHERE pricePerNight = 200.0",
          "sql_queries": [
            "SELECT cabinName, pricePerNight FROM Cabins WHERE pricePerNight = 200.0"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "UNION",
          "sql_queries": [
            "SELECT firstname, lastname FROM Guests WHERE checkIn = '2022-01-01 10:00:00'\nUNION\nSELECTfirstname, lastname FROM Guests WHERE checkOut = '2022-01-05 10:00:00'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT firstname, lastname FROM Guests WHERE checkIn = '2022-01-01 10:00:00'\nUNION\nSELECTfirstname, lastname FROM Guests WHERE checkOut = '2022-01-05 10:00:00'",
                "original_exception": "near \"SELECTfirstname\": syntax error"
              }
            ],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [
          {
            "query": "SELECT firstname, lastname FROM Guests WHERE checkIn = '2022-01-01 10:00:00'\nUNION\nSELECTfirstname, lastname FROM Guests WHERE checkOut = '2022-01-05 10:00:00'",
            "original_exception": "near \"SELECTfirstname\": syntax error"
          }
        ],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_2tab_val_accommodation2/attachment_2tab_val_accommodation2.sqlite",
      "db_dump": "CREATE TABLE Bookings(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    guestId INTEGER,\n    chaletId INTEGER,\n    bookingDate DATETIME,\n    totalCost REAL,\n    FOREIGN KEY(guestId) REFERENCES Guests(id),\n    FOREIGN KEY(chaletId) REFERENCES Chalets(id)\n);\nCREATE TABLE Cabins(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    cabinName TEXT,\n    pricePerNight REAL ,\n    location TEXT,\n    capacity INTEGER\n);\nCREATE TABLE Chalets(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    chaletName TEXT,\n    pricePerNight REAL ,\n    location TEXT,\n    capacity INTEGER\n);\nCREATE TABLE Guests(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstname TEXT,\n    lastname TEXT,\n    email TEXT,\n    phoneNumber VARCHAR(15),\n    checkIn DATETIME,\n    checkOut DATETIME\n);\nCREATE TABLE Reviews(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    guestId INTEGER,\n    chaletId INTEGER,\n    rating INTEGER ,\n    comment TEXT,\n    reviewDate DATETIME,\n    FOREIGN KEY(guestId) REFERENCES Guests(id),\n    FOREIGN KEY(chaletId) REFERENCES Chalets(id)\n);\n\nINSERT INTO \"Bookings\" (id,guestId,chaletId,bookingDate,totalCost) VALUES (1,1,1,'2022-01-01 00:00:00',1000.0),(2,2,2,'2022-01-01 00:00:00',1200.0),(3,3,3,'2022-01-01 00:00:00',1500.0),(4,4,4,'2022-01-01 00:00:00',1800.0),(5,5,5,'2022-01-01 00:00:00',2000.0);\nINSERT INTO \"Cabins\" (id,cabinName,pricePerNight,location,capacity) VALUES (1,'Lakeshore',200.0,'Lake',4),(2,'Riverview',300.0,'Riverside',6),(3,'Seaside',250.0,'Coast',8),(4,'Woodside',150.0,'Forest',4),(5,'Valley',275.0,'Hills',6);\nINSERT INTO \"Chalets\" (id,chaletName,pricePerNight,location,capacity) VALUES (1,'Aurora',200.0,'Alps',6),(2,'Sunshine',300.0,'Beach',8),(3,'Moonlight',250.0,'City',10),(4,'Starlight',150.0,'Forest',8),(5,'Dawn',275.0,'Mountain',6);\nINSERT INTO \"Guests\" (id,firstname,lastname,email,phoneNumber,checkIn,checkOut) VALUES (1,'John','Doe','john@gmail.com','1234567890','2022-01-01 10:00:00','2022-01-05 15:00:00'),(2,'Jane','Smith','jane@gmail.com','0987654321','2022-01-01 15:00:00','2022-01-05 10:00:00'),(3,'Jack','Brown','jack@gmail.com','1112223334','2022-01-01 12:00:00','2022-01-05 11:00:00'),(4,'Samantha','White','samantha@gmail.com','4321123456','2022-01-01 13:00:00','2022-01-05 12:00:00'),(5,'Emma','Black','emma@gmail.com','3456789123','2022-01-01 14:00:00','2022-01-05 13:00:00');\nINSERT INTO \"Reviews\" (id,guestId,chaletId,rating,comment,reviewDate) VALUES (1,1,1,5,'Great stay!','2022-01-01 00:00:00'),(2,2,2,4,'Good experience!','2022-01-01 00:00:00'),(3,3,3,3,'Fine, could have been better.','2022-01-01 00:00:00'),(4,4,4,5,'Excellent service!','2022-01-01 00:00:00'),(5,5,5,4,'Good value for money.','2022-01-01 00:00:00');\n",
      "question": "List all chalets and also display cabins that cost $200 per night. Show them in one table.",
      "gold_queries": [
        "SELECT Chalets.chaletName as name\r\nFROM Chalets\r\nUNION\r\nSELECT Cabins.cabinName as name\r\nFROM Cabins\r\nWHERE Cabins.pricePerNight = 200.0"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Retrieve all rows from the Chalets table.",
          "sql_queries": [
            "SELECT * FROM Chalets"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Combine the results of the two previous queries into a single table.",
          "sql_queries": [
            "SELECT * FROM (\n    SELECT firstname, lastname, email, phoneNumber, chaletName, pricePerNight, location, capacity, totalCost\n    FROM Guests\n    JOIN Bookings ON Guests.id = Bookings.guestId\n    JOIN Chalets ON Bookings.chaletId = Chalets.id\n) AS Combined1\nUNION ALL\nSELECT * FROM (\n    SELECT firstname, lastname, email, phoneNumber, cabinName, pricePerNight, location, capacity, 0 AS totalCost\n    FROM Guests\n    JOIN Bookings ON Guests.id = Bookings.guestId\n    JOIN Cabins ON Bookings.chaletId = Cabins.id\n) AS Combined2"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve all rows from the Cabins table where pricePerNight is equal to 200.",
          "sql_queries": [
            "SELECT * FROM Cabins WHERE pricePerNight = 200"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_2tab_val_cleaning_professional/attachment_2tab_val_cleaning_professional.sqlite",
      "db_dump": "CREATE TABLE GuestRooms(\n    room_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    hotel_name TEXT,\n    room_number INTEGER,\n    capacity INTEGER ,\n    amenities TEXT\n);\nCREATE TABLE Housekeeping(\n    id INTEGER PRIMARY KEY,\n    housekeeper TEXT,\n    hotel TEXT,\n    shift_start TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    shift_end TIMESTAMP\n);\nCREATE TABLE LaundryService(\n    id INTEGER PRIMARY KEY,\n    laundry_attendant TEXT,\n    hotel TEXT,\n    shift_start TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    shift_end TIMESTAMP\n);\nCREATE TABLE MaintenanceRequests(\n    request_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    description TEXT,\n    requested_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    resolved_at TIMESTAMP,\n    status TEXT \n);\nCREATE TABLE Reservations(\n    reservation_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    guest_name TEXT,\n    email TEXT,\n    phone_number TEXT,\n    checkin_date DATE,\n    checkout_date DATE,\n    room_id INTEGER,\n    FOREIGN KEY (room_id) REFERENCES GuestRooms(room_id)\n);\n\nINSERT INTO \"GuestRooms\" (room_id,hotel_name,room_number,capacity,amenities) VALUES (1,'The Grand Hotel',101,2,'TV, Mini Fridge, Air Conditioner'),(2,'Ritz Carlton',301,3,'TV, Mini Fridge, Air Conditioner, Balcony');\nINSERT INTO \"Housekeeping\" (id,housekeeper,hotel,shift_start,shift_end) VALUES (1,'John Doe','The Grand Hotel','2024-03-13 17:44:11',NULL),(2,'Jane Smith','Ritz Carlton','2024-03-13 17:44:11',NULL);\nINSERT INTO \"LaundryService\" (id,laundry_attendant,hotel,shift_start,shift_end) VALUES (1,'Mary Johnson','The Grand Hotel','2024-03-13 17:44:11',NULL),(2,'Tom Brown','Four Seasons','2024-03-13 17:44:11',NULL);\nINSERT INTO \"MaintenanceRequests\" (request_id,description,requested_at,resolved_at,status) VALUES (1,'Leaky faucet in Room 101','2024-03-13 17:44:11',NULL,'Pending'),(2,'Broken air conditioner in Room 301','2024-03-13 17:44:11','2023-01-02','Resolved');\nINSERT INTO \"Reservations\" (reservation_id,guest_name,email,phone_number,checkin_date,checkout_date,room_id) VALUES (1,'Alice Jones','alice@example.com','+1 9876543210','2023-01-01','2023-01-05',1),(2,'Bob Smith','bob@example.com','+1 5556667777','2023-02-01','2023-02-05',2);\n",
      "question": "List all housekeepers and also display laundry service attendants working at The Grand Hotel. Show them in one table.",
      "gold_queries": [
        "SELECT Housekeeping.housekeeper as name\r\nFROM Housekeeping\r\nUNION\r\nSELECT LaundryService.laundry_attendant as name\r\nFROM LaundryService\r\nWHERE LaundryService.hotel = \"The Grand Hotel\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Show a list of housekeepers from the Housekeeping table and laundry attendants from the LaundryService table, filtering by hotels where 'hotel' is equal to 'The Grand Hotel'.",
          "sql_queries": [
            "SELECT housekeeper FROM Housekeeping WHERE hotel = 'The Grand Hotel' UNION SELECT laundry_attendant FROM LaundryService WHERE hotel = 'The Grand Hotel'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all housekeepers and laundry attendants working at The Grand Hotel, combined into one table.",
          "sql_queries": [
            "SELECT housekeeper AS staff_name FROM Housekeeping WHERE hotel = 'The Grand Hotel'\nUNION\nSELECT laundry_attendant AS staff_name FROM LaundryService WHERE hotel = 'The Grand Hotel'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all housekeepers employed by The Grand Hotel and all laundry service attendants at The Grand Hotel in a single table.",
          "sql_queries": [
            "SELECT housekeeper AS staff, 'Housekeeper' AS role FROM Housekeeping WHERE hotel = 'The Grand Hotel' UNION SELECT laundry_attendant AS staff, 'Laundry Attendant' AS role FROM LaundryService WHERE hotel = 'The Grand Hotel'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_2tab_val_cleaning_professional/attachment_2tab_val_cleaning_professional.sqlite",
      "db_dump": "CREATE TABLE GuestRooms(\n    room_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    hotel_name TEXT,\n    room_number INTEGER,\n    capacity INTEGER ,\n    amenities TEXT\n);\nCREATE TABLE Housekeeping(\n    id INTEGER PRIMARY KEY,\n    housekeeper TEXT,\n    hotel TEXT,\n    shift_start TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    shift_end TIMESTAMP\n);\nCREATE TABLE LaundryService(\n    id INTEGER PRIMARY KEY,\n    laundry_attendant TEXT,\n    hotel TEXT,\n    shift_start TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    shift_end TIMESTAMP\n);\nCREATE TABLE MaintenanceRequests(\n    request_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    description TEXT,\n    requested_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    resolved_at TIMESTAMP,\n    status TEXT \n);\nCREATE TABLE Reservations(\n    reservation_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    guest_name TEXT,\n    email TEXT,\n    phone_number TEXT,\n    checkin_date DATE,\n    checkout_date DATE,\n    room_id INTEGER,\n    FOREIGN KEY (room_id) REFERENCES GuestRooms(room_id)\n);\n\nINSERT INTO \"GuestRooms\" (room_id,hotel_name,room_number,capacity,amenities) VALUES (1,'The Grand Hotel',101,2,'TV, Mini Fridge, Air Conditioner'),(2,'Ritz Carlton',301,3,'TV, Mini Fridge, Air Conditioner, Balcony');\nINSERT INTO \"Housekeeping\" (id,housekeeper,hotel,shift_start,shift_end) VALUES (1,'John Doe','The Grand Hotel','2024-03-13 17:44:11',NULL),(2,'Jane Smith','Ritz Carlton','2024-03-13 17:44:11',NULL);\nINSERT INTO \"LaundryService\" (id,laundry_attendant,hotel,shift_start,shift_end) VALUES (1,'Mary Johnson','The Grand Hotel','2024-03-13 17:44:11',NULL),(2,'Tom Brown','Four Seasons','2024-03-13 17:44:11',NULL);\nINSERT INTO \"MaintenanceRequests\" (request_id,description,requested_at,resolved_at,status) VALUES (1,'Leaky faucet in Room 101','2024-03-13 17:44:11',NULL,'Pending'),(2,'Broken air conditioner in Room 301','2024-03-13 17:44:11','2023-01-02','Resolved');\nINSERT INTO \"Reservations\" (reservation_id,guest_name,email,phone_number,checkin_date,checkout_date,room_id) VALUES (1,'Alice Jones','alice@example.com','+1 9876543210','2023-01-01','2023-01-05',1),(2,'Bob Smith','bob@example.com','+1 5556667777','2023-02-01','2023-02-05',2);\n",
      "question": "What housekeepers and laundry service attendants are employed at the Grand Hotel? Show them in one table.",
      "gold_queries": [
        "SELECT Housekeeping.housekeeper as name\r\nFROM Housekeeping\r\nWHERE Housekeeping.hotel = \"The Grand Hotel\"\r\nUNION\r\nSELECT LaundryService.laundry_attendant as name\r\nFROM LaundryService\r\nWHERE LaundryService.hotel = \"The Grand Hotel\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Return a list of all housekeepers and laundry service attendants who are employed at The Grand Hotel, sorted alphabetically by name.",
          "sql_queries": [
            "SELECT housekeeper FROM Housekeeping WHERE hotel = 'The Grand Hotel' UNION SELECT laundry_attendant FROM LaundryService WHERE hotel = 'The Grand Hotel' ORDER BY housekeeper"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Return a list of all housekeepers and laundry service attendants at The Grand Hotel, combined in a single table, with columns for name and role.",
          "sql_queries": [
            "SELECT housekeeper AS name, 'Housekeeper' AS role FROM Housekeeping WHERE hotel = 'The Grand Hotel'\nUNION\nSELECT laundry_attendant AS name, 'Laundry Service Attendant' AS role FROM LaundryService WHERE hotel = 'The Grand Hotel'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Return a list of all housekeepers and laundry service attendants who work at The Grand Hotel, grouped by their respective roles, in a single table.",
          "sql_queries": [
            "SELECT 'Housekeeper' AS role, housekeeper FROM Housekeeping WHERE hotel = 'The Grand Hotel'\nUNION ALL\nSELECT 'Laundry Attendant' AS role, laundry_attendant FROM LaundryService WHERE hotel = 'The Grand Hotel'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Return a list of unique housekeepers and laundry attendants independently, with a column indicating their role (housekeeper or laundry attendant), where they are employed.",
          "sql_queries": [
            "SELECT DISTINCT housekeeper AS staff, 'Housekeeper' AS role, hotel FROM Housekeeping\nUNION\nSELECT DISTINCT laundry_attendant AS staff, 'Laundry Attendant' AS role, hotel FROM LaundryService"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_2tab_val_cleaning_professional/attachment_2tab_val_cleaning_professional.sqlite",
      "db_dump": "CREATE TABLE GuestRooms(\n    room_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    hotel_name TEXT,\n    room_number INTEGER,\n    capacity INTEGER ,\n    amenities TEXT\n);\nCREATE TABLE Housekeeping(\n    id INTEGER PRIMARY KEY,\n    housekeeper TEXT,\n    hotel TEXT,\n    shift_start TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    shift_end TIMESTAMP\n);\nCREATE TABLE LaundryService(\n    id INTEGER PRIMARY KEY,\n    laundry_attendant TEXT,\n    hotel TEXT,\n    shift_start TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    shift_end TIMESTAMP\n);\nCREATE TABLE MaintenanceRequests(\n    request_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    description TEXT,\n    requested_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    resolved_at TIMESTAMP,\n    status TEXT \n);\nCREATE TABLE Reservations(\n    reservation_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    guest_name TEXT,\n    email TEXT,\n    phone_number TEXT,\n    checkin_date DATE,\n    checkout_date DATE,\n    room_id INTEGER,\n    FOREIGN KEY (room_id) REFERENCES GuestRooms(room_id)\n);\n\nINSERT INTO \"GuestRooms\" (room_id,hotel_name,room_number,capacity,amenities) VALUES (1,'The Grand Hotel',101,2,'TV, Mini Fridge, Air Conditioner'),(2,'Ritz Carlton',301,3,'TV, Mini Fridge, Air Conditioner, Balcony');\nINSERT INTO \"Housekeeping\" (id,housekeeper,hotel,shift_start,shift_end) VALUES (1,'John Doe','The Grand Hotel','2024-03-13 17:44:11',NULL),(2,'Jane Smith','Ritz Carlton','2024-03-13 17:44:11',NULL);\nINSERT INTO \"LaundryService\" (id,laundry_attendant,hotel,shift_start,shift_end) VALUES (1,'Mary Johnson','The Grand Hotel','2024-03-13 17:44:11',NULL),(2,'Tom Brown','Four Seasons','2024-03-13 17:44:11',NULL);\nINSERT INTO \"MaintenanceRequests\" (request_id,description,requested_at,resolved_at,status) VALUES (1,'Leaky faucet in Room 101','2024-03-13 17:44:11',NULL,'Pending'),(2,'Broken air conditioner in Room 301','2024-03-13 17:44:11','2023-01-02','Resolved');\nINSERT INTO \"Reservations\" (reservation_id,guest_name,email,phone_number,checkin_date,checkout_date,room_id) VALUES (1,'Alice Jones','alice@example.com','+1 9876543210','2023-01-01','2023-01-05',1),(2,'Bob Smith','bob@example.com','+1 5556667777','2023-02-01','2023-02-05',2);\n",
      "question": "Display housekeepers and laundry service attendants working at the Grand Hotel. Show them in one table.",
      "gold_queries": [
        "SELECT Housekeeping.housekeeper as name\r\nFROM Housekeeping\r\nWHERE Housekeeping.hotel = \"The Grand Hotel\"\r\nUNION\r\nSELECT LaundryService.laundry_attendant as name\r\nFROM LaundryService\r\nWHERE LaundryService.hotel = \"The Grand Hotel\"",
        "SELECT Housekeeping.housekeeper as name\r\nFROM Housekeeping\r\nUNION\r\nSELECT LaundryService.laundry_attendant as name\r\nFROM LaundryService\r\nWHERE LaundryService.hotel = \"The Grand Hotel\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Present a combined view of housekeepers and laundry service attendants working at The Grand Hotel.",
          "sql_queries": [
            "SELECT housekeeper AS staff_name, 'Housekeeper' AS role FROM Housekeeping WHERE hotel = 'The Grand Hotel' UNION SELECT laundry_attendant AS staff_name, 'Laundry Attendant' AS role FROM LaundryService WHERE hotel = 'The Grand Hotel'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all housekeepers and laundry service attendants who are assigned to The Grand Hotel.",
          "sql_queries": [
            "SELECT housekeeper FROM Housekeeping WHERE hotel = 'The Grand Hotel' UNION SELECT laundry_attendant FROM LaundryService WHERE hotel = 'The Grand Hotel'"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Show all entries from Housekeeping and LaundryService tables where hotel is \"The Grand Hotel\".",
          "sql_queries": [
            "SELECT * FROM LaundryService WHERE hotel = 'The Grand Hotel'",
            "SELECT * FROM Housekeeping WHERE hotel = 'The Grand Hotel'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Output a merged query result containing  housekeepers and laundry attendants from The Grand Hotel in a single table format.",
          "sql_queries": [
            "SELECT housekeeper AS staff, 'Housekeeper' AS role FROM Housekeeping WHERE hotel = 'The Grand Hotel'\nUNION\nSELECT laundry_attendant AS staff, 'Laundry Attendant' AS role FROM LaundryService WHERE hotel = 'The Grand Hotel'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Create a single table combining housekeepers and laundry attendants from The Grand Hotel.",
          "sql_queries": [
            "SELECT housekeeper AS staff, 'Housekeeping' AS role FROM Housekeeping WHERE hotel = 'The Grand Hotel'\nUNION\nSELECT laundry_attendant AS staff, 'LaundryService' AS role FROM LaundryService WHERE hotel = 'The Grand Hotel'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.16666666666666666,
        "f1_score": 0.25,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Filmmaking/attachment_1tab_val_animation_studio/attachment_1tab_val_animation_studio.sqlite",
      "db_dump": "CREATE TABLE Actor(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    birthYear INTEGER\n);\nCREATE TABLE Director(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    birthYear INTEGER\n);\nCREATE TABLE Film(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    releaseDate DATE,\n    duration INTEGER,\n    animationStudio TEXT,\n    awards TEXT,\n    FOREIGN KEY(animationStudio) REFERENCES Studio(name)\n);\nCREATE TABLE FilmActors(\n    filmID INTEGER,\n    actorID INTEGER,\n    role TEXT,\n    FOREIGN KEY(filmID) REFERENCES Film(id),\n    FOREIGN KEY(actorID) REFERENCES Actor(id),\n    PRIMARY KEY(filmID, actorID)\n);\nCREATE TABLE FilmDirectors(\n    filmID INTEGER,\n    directorID INTEGER,\n    FOREIGN KEY(filmID) REFERENCES Film(id),\n    FOREIGN KEY(directorID) REFERENCES Director(id),\n    PRIMARY KEY(filmID, directorID)\n);\nCREATE TABLE FilmGenres(\n    filmID INTEGER,\n    genreID INTEGER,\n    FOREIGN KEY(filmID) REFERENCES Film(id),\n    FOREIGN KEY(genreID) REFERENCES Genre(id),\n    PRIMARY KEY(filmID, genreID)\n);\nCREATE TABLE Genre(\n    id INTEGER PRIMARY KEY,\n    genreName TEXT\n);\n\nINSERT INTO \"Actor\" (id,name,birthYear) VALUES (1,'Tom Hanks',1954),(2,'Tim Allen',1953),(3,'David Hyde Pierce',1951),(4,'Ian Holm',1931),(5,'Billy Crystal',1941);\nINSERT INTO \"Director\" (id,name,birthYear) VALUES (1,'John Lasseter',1957),(2,'Andrew Stanton',1961),(3,'Adam Foucher',1970),(4,'Chris Buck',1960),(5,'Erik de la Espriella',1970);\nINSERT INTO \"Film\" (id,title,releaseDate,duration,animationStudio,awards) VALUES (1,'Toy Story','1995-03-26',82,'Pixar','Golden Globe'),(2,'Finding Nemo','2003-07-06',100,'Pixar','Oscar'),(3,'Shrek','2001-04-18',88,'DreamWorks','Golden Globe'),(4,'Madagascar','2005-05-04',89,'DreamWorks','Nickelodeon Kids Choice Award');\nINSERT INTO \"FilmActors\" (filmID,actorID,role) VALUES (1,1,'Woody'),(1,2,'Buzz Lightyear'),(2,3,'Marlin'),(2,4,'Dory'),(3,5,'Donkey');\nINSERT INTO \"Genre\" (id,genreName) VALUES (1,'Animated Comedy'),(2,'Family Adventure'),(3,'Action/Adventure'),(4,'Drama'),(5,'Mystery');\n",
      "question": "Give me Pixar films and DreamWorks films that won Golden Globe. Show them in one table.",
      "gold_queries": [
        "SELECT Film.title \r\nFROM Film\r\nWHERE (Film.animationStudio = \"Pixar\" OR Film.animationStudio = \"DreamWorks\") AND Film.awards = \"Golden Globe\"",
        "SELECT Film.title \r\nFROM Film\r\nWHERE Film.animationStudio = \"Pixar\" OR Film.animationStudio = \"DreamWorks\" AND Film.awards = \"Golden Globe\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List all Pixar and DreamWorks films, filtered by \"Golden Globe\" presence in \"awards\",  within a combined table.",
          "sql_queries": [
            "SELECT title, animationStudio, awards FROM Film WHERE awards LIKE '%Golden Globe%' AND (animationStudio = 'Pixar' OR animationStudio = 'DreamWorks')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Generate a table containing Pixar and DreamWorks films that have received a Golden Globe award.",
          "sql_queries": [
            "SELECT title FROM Film WHERE (animationStudio = 'Pixar' OR animationStudio = 'DreamWorks') AND awards LIKE '%Golden Globe%'"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Consolidate Pixar and DreamWorks films with \"Golden Globe\" in the \"awards\" column into a unified table.",
          "sql_queries": [
            "SELECT title, releaseDate, duration, animationStudio, awards\nFROM Film\nWHERE (animationStudio = 'Pixar' OR animationStudio = 'DreamWorks') AND awards = 'Golden Globe'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve Pixar and DreamWorks films that won a Golden Globe award, presenting the results in a single table.",
          "sql_queries": [
            "SELECT title FROM Film WHERE animationStudio IN ('Pixar', 'DreamWorks') AND awards = 'Golden Globe'"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.5,
        "f1_score": 0.5,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/attachment/Filmmaking/attachment_1tab_val_animation_studio/attachment_1tab_val_animation_studio.sqlite",
      "db_dump": "CREATE TABLE Actor(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    birthYear INTEGER\n);\nCREATE TABLE Director(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    birthYear INTEGER\n);\nCREATE TABLE Film(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    releaseDate DATE,\n    duration INTEGER,\n    animationStudio TEXT,\n    awards TEXT,\n    FOREIGN KEY(animationStudio) REFERENCES Studio(name)\n);\nCREATE TABLE FilmActors(\n    filmID INTEGER,\n    actorID INTEGER,\n    role TEXT,\n    FOREIGN KEY(filmID) REFERENCES Film(id),\n    FOREIGN KEY(actorID) REFERENCES Actor(id),\n    PRIMARY KEY(filmID, actorID)\n);\nCREATE TABLE FilmDirectors(\n    filmID INTEGER,\n    directorID INTEGER,\n    FOREIGN KEY(filmID) REFERENCES Film(id),\n    FOREIGN KEY(directorID) REFERENCES Director(id),\n    PRIMARY KEY(filmID, directorID)\n);\nCREATE TABLE FilmGenres(\n    filmID INTEGER,\n    genreID INTEGER,\n    FOREIGN KEY(filmID) REFERENCES Film(id),\n    FOREIGN KEY(genreID) REFERENCES Genre(id),\n    PRIMARY KEY(filmID, genreID)\n);\nCREATE TABLE Genre(\n    id INTEGER PRIMARY KEY,\n    genreName TEXT\n);\n\nINSERT INTO \"Actor\" (id,name,birthYear) VALUES (1,'Tom Hanks',1954),(2,'Tim Allen',1953),(3,'David Hyde Pierce',1951),(4,'Ian Holm',1931),(5,'Billy Crystal',1941);\nINSERT INTO \"Director\" (id,name,birthYear) VALUES (1,'John Lasseter',1957),(2,'Andrew Stanton',1961),(3,'Adam Foucher',1970),(4,'Chris Buck',1960),(5,'Erik de la Espriella',1970);\nINSERT INTO \"Film\" (id,title,releaseDate,duration,animationStudio,awards) VALUES (1,'Toy Story','1995-03-26',82,'Pixar','Golden Globe'),(2,'Finding Nemo','2003-07-06',100,'Pixar','Oscar'),(3,'Shrek','2001-04-18',88,'DreamWorks','Golden Globe'),(4,'Madagascar','2005-05-04',89,'DreamWorks','Nickelodeon Kids Choice Award');\nINSERT INTO \"FilmActors\" (filmID,actorID,role) VALUES (1,1,'Woody'),(1,2,'Buzz Lightyear'),(2,3,'Marlin'),(2,4,'Dory'),(3,5,'Donkey');\nINSERT INTO \"Genre\" (id,genreName) VALUES (1,'Animated Comedy'),(2,'Family Adventure'),(3,'Action/Adventure'),(4,'Drama'),(5,'Mystery');\n",
      "question": "What Pixar films won a Golden Globe and what DreamWorks films won the same award? Show them in one table.",
      "gold_queries": [
        "SELECT Film.title \r\nFROM Film\r\nWHERE (Film.animationStudio = \"Pixar\" OR Film.animationStudio = \"DreamWorks\") AND Film.awards = \"Golden Globe\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Present a table showing the intersection of Pixar films and Golden Globe winners, alongside a separate table with DreamWorks films and Golden Globe winners.",
          "sql_queries": [
            "SELECT title FROM Film WHERE animationStudio = 'DreamWorks' AND awards = 'Golden Globe'",
            "SELECT title FROM Film WHERE animationStudio = 'Pixar' AND awards = 'Golden Globe'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all Pixar films awarded a Golden Globe, and all DreamWorks films awarded a Golden Globe, consolidated in a single result set.",
          "sql_queries": [
            "SELECT title FROM Film WHERE animationStudio = 'Pixar' AND awards = 'Golden Globe' UNION SELECT title FROM Film WHERE animationStudio = 'DreamWorks' AND awards = 'Golden Globe'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Generate a table containing two columns: one listing all Pixar Golden Globe award winners and another listing all DreamWorks Golden Globe award winners.",
          "sql_queries": [
            "SELECT title AS Pixar_Winners FROM Film WHERE animationStudio = 'Pixar' AND awards = 'Golden Globe'\nUNION\nSELECT title AS DreamWorks_Winners FROM Film WHERE animationStudio = 'DreamWorks' AND awards = 'Golden Globe'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/attachment/Filmmaking/attachment_1tab_val_animation_studio/attachment_1tab_val_animation_studio.sqlite",
      "db_dump": "CREATE TABLE Actor(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    birthYear INTEGER\n);\nCREATE TABLE Director(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    birthYear INTEGER\n);\nCREATE TABLE Film(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    releaseDate DATE,\n    duration INTEGER,\n    animationStudio TEXT,\n    awards TEXT,\n    FOREIGN KEY(animationStudio) REFERENCES Studio(name)\n);\nCREATE TABLE FilmActors(\n    filmID INTEGER,\n    actorID INTEGER,\n    role TEXT,\n    FOREIGN KEY(filmID) REFERENCES Film(id),\n    FOREIGN KEY(actorID) REFERENCES Actor(id),\n    PRIMARY KEY(filmID, actorID)\n);\nCREATE TABLE FilmDirectors(\n    filmID INTEGER,\n    directorID INTEGER,\n    FOREIGN KEY(filmID) REFERENCES Film(id),\n    FOREIGN KEY(directorID) REFERENCES Director(id),\n    PRIMARY KEY(filmID, directorID)\n);\nCREATE TABLE FilmGenres(\n    filmID INTEGER,\n    genreID INTEGER,\n    FOREIGN KEY(filmID) REFERENCES Film(id),\n    FOREIGN KEY(genreID) REFERENCES Genre(id),\n    PRIMARY KEY(filmID, genreID)\n);\nCREATE TABLE Genre(\n    id INTEGER PRIMARY KEY,\n    genreName TEXT\n);\n\nINSERT INTO \"Actor\" (id,name,birthYear) VALUES (1,'Tom Hanks',1954),(2,'Tim Allen',1953),(3,'David Hyde Pierce',1951),(4,'Ian Holm',1931),(5,'Billy Crystal',1941);\nINSERT INTO \"Director\" (id,name,birthYear) VALUES (1,'John Lasseter',1957),(2,'Andrew Stanton',1961),(3,'Adam Foucher',1970),(4,'Chris Buck',1960),(5,'Erik de la Espriella',1970);\nINSERT INTO \"Film\" (id,title,releaseDate,duration,animationStudio,awards) VALUES (1,'Toy Story','1995-03-26',82,'Pixar','Golden Globe'),(2,'Finding Nemo','2003-07-06',100,'Pixar','Oscar'),(3,'Shrek','2001-04-18',88,'DreamWorks','Golden Globe'),(4,'Madagascar','2005-05-04',89,'DreamWorks','Nickelodeon Kids Choice Award');\nINSERT INTO \"FilmActors\" (filmID,actorID,role) VALUES (1,1,'Woody'),(1,2,'Buzz Lightyear'),(2,3,'Marlin'),(2,4,'Dory'),(3,5,'Donkey');\nINSERT INTO \"Genre\" (id,genreName) VALUES (1,'Animated Comedy'),(2,'Family Adventure'),(3,'Action/Adventure'),(4,'Drama'),(5,'Mystery');\n",
      "question": "Provide a list of all Pixar films and also provide a list of all DreamWorks films that won a Golden Globe. Show them in one table.",
      "gold_queries": [
        "SELECT Film.title \r\nFROM Film\r\nWHERE Film.animationStudio = \"Pixar\" OR Film.animationStudio = \"DreamWorks\" AND Film.awards = \"Golden Globe\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Merge all Pixar films in any order",
          "sql_queries": [
            "SELECT * FROM Film WHERE animationStudio = 'Pixar'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Identify each Pixar film and each DreamWorks film that has won a Golden Globe in a single query",
          "sql_queries": [
            "SELECT title FROM Film WHERE animationStudio = 'Pixar' AND awards = 'Golden Globe' UNION SELECT title FROM Film WHERE animationStudio = 'DreamWorks' AND awards = 'Golden Globe'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all Pixar films and all DreamWorks films that feature columns relating to Golden Globe wins",
          "sql_queries": [
            "SELECT title, awards FROM Film WHERE animationStudio = 'Pixar' AND awards = 'Golden Globe' UNION SELECT title, awards FROM Film WHERE animationStudio = 'DreamWorks' AND awards = 'Golden Globe'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Create a table with a  column for Pixar films and a separate column for DreamWorks films that won a Golden Globe",
          "sql_queries": [
            "SELECT \n    (SELECT COUNT(*) FROM Film WHERE animationStudio = 'Pixar') AS PixarFilms,\n    (SELECT COUNT(*) FROM Film WHERE animationStudio = 'DreamWorks' AND awards LIKE '%Golden Globe%') AS DreamWorksGoldenGlobeFilms"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Merge all DreamWorks films that have won a Golden Globe in any order",
          "sql_queries": [
            "SELECT title FROM Film WHERE animationStudio = 'DreamWorks' AND awards = 'Golden Globe'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Combine the sets of Pixar films and DreamWorks films winning Golden Globe awards without merging the information on how they achieved the status.",
          "sql_queries": [
            "SELECT title FROM Film WHERE animationStudio  =  'Pixar' AND awards  =  'Golden Globe' UNION SELECT title FROM Film WHERE animationStudio  =  'DreamWorks' AND awards  =  'Golden Globe'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all Pixar films alongside all DreamWorks films that have won a Golden Globe, with clear identifiers for each studio's films",
          "sql_queries": [
            "SELECT title, 'Pixar' as studio FROM Film WHERE animationStudio = 'Pixar' AND awards LIKE '%Golden Globe%' UNION SELECT title, 'DreamWorks' as studio FROM Film WHERE animationStudio = 'DreamWorks' AND awards LIKE '%Golden Globe%'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 7,
        "num_unique_queries": 7,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Filmmaking/attachment_1tab_val_film_industry_company/attachment_1tab_val_film_industry_company.sqlite",
      "db_dump": "CREATE TABLE Actors(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    First_Name TEXT,\n    Last_Name TEXT,\n    Date_of_Birth DATE,\n    Nationality TEXT);\nCREATE TABLE Companies(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Film_Industry_Type TEXT ,\n    Number_Of_Employees INT,\n    Annual_Revenue REAL,\n    Founded DATE);\nCREATE TABLE Directors(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Birth_Place TEXT,\n    Years_Experience INT);\nCREATE TABLE Films(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Director_Name TEXT,\n    Production_Companies TEXT,\n    Distribution_Companies TEXT,\n    Release_Date DATE,\n    Running_Time INT,\n    Genre TEXT,\n    Box_Office_Earnings REAL);\nCREATE TABLE Producers(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Birth_Place TEXT,\n    Total_Movies_Produced INT);\n\nINSERT INTO \"Actors\" (id,First_Name,Last_Name,Date_of_Birth,Nationality) VALUES (1,'Tom','Hanks','1956-07-09','USA'),(2,'Meryl','Streep','1949-06-22','USA');\nINSERT INTO \"Companies\" (id,Name,Film_Industry_Type,Number_Of_Employees,Annual_Revenue,Founded) VALUES (1,'Big Studios','Production Company',500,123456789.0,'2000-01-01'),(2,'Little Movies','Production Company',300,543212345.0,'2010-01-01'),(3,'Global Distribs','Distribution Company',500,654321234.0,'2005-01-01'),(4,'Small Screen','Distribution Company',400,765432123.0,'2015-01-01');\nINSERT INTO \"Directors\" (id,Name,Birth_Place,Years_Experience) VALUES (1,'John Doe','New York, USA',20),(2,'Jane Smith','London, UK',15);\nINSERT INTO \"Films\" (id,Title,Director_Name,Production_Companies,Distribution_Companies,Release_Date,Running_Time,Genre,Box_Office_Earnings) VALUES (1,'Blockbuster Movie','John Doe','Big Studios','Global Distribs','2021-01-01',120,'Action',100000000.0),(2,'Art House Film','Jane Smith','Little Movies','Small Screen','2021-06-01',90,'Drama',5000000.0);\nINSERT INTO \"Producers\" (id,Name,Birth_Place,Total_Movies_Produced) VALUES (1,'Alice Johnson','Los Angeles, USA',10),(2,'Bob Brown','Toronto, Canada',15);\n",
      "question": "Show both production and distribution companies with 500 employees. Show them in one table.",
      "gold_queries": [
        "SELECT Companies.Name \r\nFROM Companies\r\nWHERE (Companies.Film_Industry_Type = \"Production Company\" OR Companies.Film_Industry_Type = \"Distribution Company\") AND Companies.Number_Of_Employees = 500"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List all companies from Companies with Number_Of_Employees equal to 500",
          "sql_queries": [
            "SELECT Name FROM Companies WHERE Number_Of_Employees = 500"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Find all companies in the Companies table with 500 employees, and display their Name.",
          "sql_queries": [
            "SELECT Name FROM Companies WHERE Number_Of_Employees = 500"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Combine the PRODUCTION_COMPANIES and DISTRIBUTION_COMPANIES columns from the Films table, excluding duplicates, and show only the companies with Number_Of_Employees equal to 500 from the Companies table.",
          "sql_queries": [
            "SELECT DISTINCT C.Name \nFROM Companies C \nJOIN Films F ON C.Name IN (F.Production_Companies, F.Distribution_Companies) \nWHERE C.Number_Of_Employees = 500"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 3,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/attachment/Filmmaking/attachment_1tab_val_film_industry_company/attachment_1tab_val_film_industry_company.sqlite",
      "db_dump": "CREATE TABLE Actors(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    First_Name TEXT,\n    Last_Name TEXT,\n    Date_of_Birth DATE,\n    Nationality TEXT);\nCREATE TABLE Companies(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Film_Industry_Type TEXT ,\n    Number_Of_Employees INT,\n    Annual_Revenue REAL,\n    Founded DATE);\nCREATE TABLE Directors(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Birth_Place TEXT,\n    Years_Experience INT);\nCREATE TABLE Films(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Director_Name TEXT,\n    Production_Companies TEXT,\n    Distribution_Companies TEXT,\n    Release_Date DATE,\n    Running_Time INT,\n    Genre TEXT,\n    Box_Office_Earnings REAL);\nCREATE TABLE Producers(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Birth_Place TEXT,\n    Total_Movies_Produced INT);\n\nINSERT INTO \"Actors\" (id,First_Name,Last_Name,Date_of_Birth,Nationality) VALUES (1,'Tom','Hanks','1956-07-09','USA'),(2,'Meryl','Streep','1949-06-22','USA');\nINSERT INTO \"Companies\" (id,Name,Film_Industry_Type,Number_Of_Employees,Annual_Revenue,Founded) VALUES (1,'Big Studios','Production Company',500,123456789.0,'2000-01-01'),(2,'Little Movies','Production Company',300,543212345.0,'2010-01-01'),(3,'Global Distribs','Distribution Company',500,654321234.0,'2005-01-01'),(4,'Small Screen','Distribution Company',400,765432123.0,'2015-01-01');\nINSERT INTO \"Directors\" (id,Name,Birth_Place,Years_Experience) VALUES (1,'John Doe','New York, USA',20),(2,'Jane Smith','London, UK',15);\nINSERT INTO \"Films\" (id,Title,Director_Name,Production_Companies,Distribution_Companies,Release_Date,Running_Time,Genre,Box_Office_Earnings) VALUES (1,'Blockbuster Movie','John Doe','Big Studios','Global Distribs','2021-01-01',120,'Action',100000000.0),(2,'Art House Film','Jane Smith','Little Movies','Small Screen','2021-06-01',90,'Drama',5000000.0);\nINSERT INTO \"Producers\" (id,Name,Birth_Place,Total_Movies_Produced) VALUES (1,'Alice Johnson','Los Angeles, USA',10),(2,'Bob Brown','Toronto, Canada',15);\n",
      "question": "Show all the production companies and add just the distribution companies with 500 employees. Show them in one table.",
      "gold_queries": [
        "SELECT Companies.Name \r\nFROM Companies\r\nWHERE Companies.Film_Industry_Type = \"Production Company\" OR Companies.Film_Industry_Type = \"Distribution Company\" AND Companies.Number_Of_Employees = 500"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List all production companies and, for each, list the distribution companies with exactly 500 employees.",
          "sql_queries": [
            "SELECT DISTINCT F.Production_Companies, C.Name \nFROM Films F \nJOIN Companies C ON F.Distribution_Companies = C.Name \nWHERE C.Number_Of_Employees = 500"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Show a table with all production companies and a separate column for distribution companies with 500 employees, merging the two into a single table.",
          "sql_queries": [
            "SELECT Name AS Production_Companies, NULL AS Distribution_Companies\nFROM Companies\nWHERE Number_Of_Employees = 500\nUNION\nSELECT NULL AS Production_Companies, Name AS Distribution_Companies\nFROM Companies\nWHERE Number_Of_Employees = 500"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Show a table with all production companies and a column for distribution companies with 500 employees.",
          "sql_queries": [
            "SELECT Production_Companies, Distribution_Companies \nFROM Films \nWHERE Distribution_Companies IN (\n    SELECT Name \n    FROM Companies \n    WHERE Number_Of_Employees = 500\n)"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Filmmaking/attachment_1tab_val_film_industry_company/attachment_1tab_val_film_industry_company.sqlite",
      "db_dump": "CREATE TABLE Actors(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    First_Name TEXT,\n    Last_Name TEXT,\n    Date_of_Birth DATE,\n    Nationality TEXT);\nCREATE TABLE Companies(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Film_Industry_Type TEXT ,\n    Number_Of_Employees INT,\n    Annual_Revenue REAL,\n    Founded DATE);\nCREATE TABLE Directors(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Birth_Place TEXT,\n    Years_Experience INT);\nCREATE TABLE Films(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Director_Name TEXT,\n    Production_Companies TEXT,\n    Distribution_Companies TEXT,\n    Release_Date DATE,\n    Running_Time INT,\n    Genre TEXT,\n    Box_Office_Earnings REAL);\nCREATE TABLE Producers(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Birth_Place TEXT,\n    Total_Movies_Produced INT);\n\nINSERT INTO \"Actors\" (id,First_Name,Last_Name,Date_of_Birth,Nationality) VALUES (1,'Tom','Hanks','1956-07-09','USA'),(2,'Meryl','Streep','1949-06-22','USA');\nINSERT INTO \"Companies\" (id,Name,Film_Industry_Type,Number_Of_Employees,Annual_Revenue,Founded) VALUES (1,'Big Studios','Production Company',500,123456789.0,'2000-01-01'),(2,'Little Movies','Production Company',300,543212345.0,'2010-01-01'),(3,'Global Distribs','Distribution Company',500,654321234.0,'2005-01-01'),(4,'Small Screen','Distribution Company',400,765432123.0,'2015-01-01');\nINSERT INTO \"Directors\" (id,Name,Birth_Place,Years_Experience) VALUES (1,'John Doe','New York, USA',20),(2,'Jane Smith','London, UK',15);\nINSERT INTO \"Films\" (id,Title,Director_Name,Production_Companies,Distribution_Companies,Release_Date,Running_Time,Genre,Box_Office_Earnings) VALUES (1,'Blockbuster Movie','John Doe','Big Studios','Global Distribs','2021-01-01',120,'Action',100000000.0),(2,'Art House Film','Jane Smith','Little Movies','Small Screen','2021-06-01',90,'Drama',5000000.0);\nINSERT INTO \"Producers\" (id,Name,Birth_Place,Total_Movies_Produced) VALUES (1,'Alice Johnson','Los Angeles, USA',10),(2,'Bob Brown','Toronto, Canada',15);\n",
      "question": "Show all the production companies and distribution companies with 500 employees. Show them in one table.",
      "gold_queries": [
        "SELECT Companies.Name \r\nFROM Companies\r\nWHERE (Companies.Film_Industry_Type = \"Production Company\" OR Companies.Film_Industry_Type = \"Distribution Company\") AND Companies.Number_Of_Employees = 500",
        "SELECT Companies.Name \r\nFROM Companies\r\nWHERE Companies.Film_Industry_Type = \"Production Company\" OR Companies.Film_Industry_Type = \"Distribution Company\" AND Companies.Number_Of_Employees = 500"
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Retrieve the names of production companies and distribution companies that have 500 employees.",
          "sql_queries": [
            "SELECT Name FROM Companies WHERE Number_Of_Employees = 500"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all production companies and distribution companies with 500 employees in a unified table.",
          "sql_queries": [
            "SELECT Name, Film_Industry_Type, Number_Of_Employees FROM Companies WHERE Number_Of_Employees = 500 UNION SELECT Production_Companies, 'Production Company' AS Film_Industry_Type, 500 FROM Films WHERE Production_Companies IN (SELECT Name FROM Companies WHERE Number_Of_Employees = 500) UNION SELECT Distribution_Companies, 'Distribution Company' AS Film_Industry_Type, 500 FROM Films WHERE Distribution_Companies IN (SELECT Name FROM Companies WHERE Number_Of_Employees = 500)"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Combine production company and distribution company data into a single table showing those with 500 employees.",
          "sql_queries": [
            "SELECT Name, Film_Industry_Type, Number_Of_Employees, Annual_Revenue, Founded\nFROM Companies\nWHERE Number_Of_Employees = 500"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Let me know if you have any other questions.",
          "sql_queries": [
            "SELECT Title FROM Films WHERE Genre = 'Action'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.25,
        "f1_score": 0.3333333333333333,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Filmmaking/attachment_1tab_val_genre2/attachment_1tab_val_genre2.sqlite",
      "db_dump": "CREATE TABLE Actors(\n    ActorID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    DateOfBirth DATE);\nCREATE TABLE Casts(\n    FilmID INTEGER,\n    ActorID INTEGER,\n    Role TEXT,\n    FOREIGN KEY (ActorID) REFERENCES Actors(ActorID),\n    FOREIGN KEY (FilmID) REFERENCES Films(FilmID));\nCREATE TABLE Directors(\n    DirectorID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    BirthDate DATE);\nCREATE TABLE Films(\n    FilmID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Genre TEXT,\n    Release_Year INT ,\n    DirectorID INTEGER,\n    ProducerID INTEGER,\n    FOREIGN KEY (DirectorID) REFERENCES Directors(DirectorID),\n    FOREIGN KEY (ProducerID) REFERENCES Producers(ProducerID));\nCREATE TABLE Producers(\n    ProducerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    ProductionCompany TEXT);\n\nINSERT INTO \"Actors\" (ActorID,Name,DateOfBirth) VALUES (1,'Chris Evans','1981-05-13'),(2,'Scarlett Johansson','1984-11-22'),(3,'Ryan Reynolds','1976-10-23'),(4,'Anne Hathaway','1982-11-12'),(5,'Christopher Nolan','1970-07-30');\nINSERT INTO \"Casts\" (FilmID,ActorID,Role) VALUES (1,1,'Leading Man'),(1,2,'Supporting Actor'),(2,3,'Funny Sidekick'),(2,4,'Serious Best Friend'),(3,5,'Wise Mentor');\nINSERT INTO \"Directors\" (DirectorID,Name,BirthDate) VALUES (1,'John Doe','1980-07-30'),(2,'Jane Smith','1965-01-15'),(3,'Michael Johnson','1992-11-23'),(4,'Emily Davis','1978-05-28'),(5,'William Brown','1950-12-04');\nINSERT INTO \"Films\" (FilmID,Title,Genre,Release_Year,DirectorID,ProducerID) VALUES (1,'Animated Fun','Animation',2021,1,1),(2,'A Comic Adventure','Comedy',2021,2,2),(3,'The Silent Clown','Comedy',1999,3,3),(4,'Fantastic Journey','Animation',2019,4,4),(5,'Dream Chasers','Drama',2005,5,5);\nINSERT INTO \"Producers\" (ProducerID,Name,ProductionCompany) VALUES (1,'Alice Green','Green Studios'),(2,'Robert White','White Pictures'),(3,'David Black','Black Entertainment'),(4,'Carol Blue','Blue Vision'),(5,'Peter Gray','Gray Media');\n",
      "question": "List all animation films and also list comedies that were released in 2021. Show them in one table.",
      "gold_queries": [
        "SELECT Films.Title \r\nFROM Films\r\nWHERE Films.Genre = \"Animation\" OR Films.Genre = \"Comedy\" AND Films.Release_Year = 2021"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "How can I display both films of genre 'Animation' and those comedies released in 2021 within a single table?",
          "sql_queries": [
            "SELECT Title, Genre, Release_Year FROM Films WHERE Genre = 'Animation' OR (Genre = 'Comedy' AND Release_Year = 2021)"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Create a new table containing the information from Films for entries where Genre is 'Animation' and entries where Genre is 'Comedy' AND Release_Year is 2021.",
          "sql_queries": [],
          "metrics": {
            "recall": 0.0,
            "precision": 0,
            "f1_score": 0,
            "num_queries": 0,
            "num_unique_queries": 0,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Select all fields from Films where Genre = 'Animation' UNION SELECT all fields from Films where Genre = 'Comedy' AND Release_Year = 2021.",
          "sql_queries": [
            "SELECT * FROM Films WHERE Genre = 'Animation' UNION SELECT * FROM Films WHERE Genre = 'Comedy' AND Release_Year = 2021"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Implement a database query to retrieve both animated films and comedies from the year 2021, merging the results into one output table.",
          "sql_queries": [
            "SELECT Title, Genre, Release_Year \nFROM Films \nWHERE (Genre = 'Animation' AND Release_Year = 2021) \nOR (Genre = 'Comedy' AND Release_Year = 2021)"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Combine the results of two separate queries: one for animation films and another for comedies released in 2021, into a single table.",
          "sql_queries": [
            "SELECT Title, Genre, Release_Year FROM Films WHERE Genre = 'Animation' UNION SELECT Title, Genre, Release_Year FROM Films WHERE Genre = 'Comedy' AND Release_Year = 2021"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all films where Genre = 'Animation' and list all films where Genre = 'Comedy' AND Release_Year = 2021 in one combined table.",
          "sql_queries": [
            "SELECT Title, Genre, Release_Year FROM Films WHERE Genre = 'Animation' UNION SELECT Title, Genre, Release_Year FROM Films WHERE Genre = 'Comedy' AND Release_Year = 2021"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Filmmaking/attachment_1tab_val_genre2/attachment_1tab_val_genre2.sqlite",
      "db_dump": "CREATE TABLE Actors(\n    ActorID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    DateOfBirth DATE);\nCREATE TABLE Casts(\n    FilmID INTEGER,\n    ActorID INTEGER,\n    Role TEXT,\n    FOREIGN KEY (ActorID) REFERENCES Actors(ActorID),\n    FOREIGN KEY (FilmID) REFERENCES Films(FilmID));\nCREATE TABLE Directors(\n    DirectorID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    BirthDate DATE);\nCREATE TABLE Films(\n    FilmID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Genre TEXT,\n    Release_Year INT ,\n    DirectorID INTEGER,\n    ProducerID INTEGER,\n    FOREIGN KEY (DirectorID) REFERENCES Directors(DirectorID),\n    FOREIGN KEY (ProducerID) REFERENCES Producers(ProducerID));\nCREATE TABLE Producers(\n    ProducerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    ProductionCompany TEXT);\n\nINSERT INTO \"Actors\" (ActorID,Name,DateOfBirth) VALUES (1,'Chris Evans','1981-05-13'),(2,'Scarlett Johansson','1984-11-22'),(3,'Ryan Reynolds','1976-10-23'),(4,'Anne Hathaway','1982-11-12'),(5,'Christopher Nolan','1970-07-30');\nINSERT INTO \"Casts\" (FilmID,ActorID,Role) VALUES (1,1,'Leading Man'),(1,2,'Supporting Actor'),(2,3,'Funny Sidekick'),(2,4,'Serious Best Friend'),(3,5,'Wise Mentor');\nINSERT INTO \"Directors\" (DirectorID,Name,BirthDate) VALUES (1,'John Doe','1980-07-30'),(2,'Jane Smith','1965-01-15'),(3,'Michael Johnson','1992-11-23'),(4,'Emily Davis','1978-05-28'),(5,'William Brown','1950-12-04');\nINSERT INTO \"Films\" (FilmID,Title,Genre,Release_Year,DirectorID,ProducerID) VALUES (1,'Animated Fun','Animation',2021,1,1),(2,'A Comic Adventure','Comedy',2021,2,2),(3,'The Silent Clown','Comedy',1999,3,3),(4,'Fantastic Journey','Animation',2019,4,4),(5,'Dream Chasers','Drama',2005,5,5);\nINSERT INTO \"Producers\" (ProducerID,Name,ProductionCompany) VALUES (1,'Alice Green','Green Studios'),(2,'Robert White','White Pictures'),(3,'David Black','Black Entertainment'),(4,'Carol Blue','Blue Vision'),(5,'Peter Gray','Gray Media');\n",
      "question": "What animation films were released in 2021 and what comedies were released in the same year? Show them in one table.",
      "gold_queries": [
        "SELECT Films.Title \r\nFROM Films\r\nWHERE (Films.Genre = \"Animation\" OR Films.Genre = \"Comedy\") AND Films.Release_Year = 2021"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Union",
          "sql_queries": [
            "SELECT Title FROM Films WHERE Genre = 'Animation'\nUNION\nSELECT Title FROM Films WHERE Genre = 'Comedy'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Select Films.Title, Films.Genre",
          "sql_queries": [
            "SELECT Films.Title, Films.Genre"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT Films.Title, Films.Genre",
                "original_exception": "no such column: Films.Title"
              }
            ],
            "all_found": false
          }
        },
        {
          "interpretation": "Where Films.Genre = 'Comedy' And Films.Release_Year = 2021;",
          "sql_queries": [
            "SELECT Title FROM Films WHERE Genre = 'Comedy' AND Release_Year = 2021"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Produce a list encompassing both animated movies and comedic films premiered in 2021, displaying their respective titles and genres in a unified table format.",
          "sql_queries": [
            "SELECT Title, Genre FROM Films WHERE (Genre = 'Animation' OR Genre = 'Comedy') AND Release_Year = 2021"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "From Films",
          "sql_queries": [
            "SELECT Title, Genre, Release_Year FROM Films"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Where Films.Genre = 'Animation' And Films.Release_Year = 2021",
          "sql_queries": [
            "SELECT Title FROM Films WHERE Genre = 'Animation' AND Release_Year = 2021"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve titles and genres of animation films released in 2021, along with titles and genres of comedies released in 2021, combining them into a single result set.",
          "sql_queries": [
            "SELECT Title, Genre FROM Films WHERE Genre = 'Animation' AND Release_Year = 2021 UNION SELECT Title, Genre FROM Films WHERE Genre = 'Comedy' AND Release_Year = 2021"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 7,
        "num_unique_queries": 7,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [
          {
            "query": "SELECT Films.Title, Films.Genre",
            "original_exception": "no such column: Films.Title"
          }
        ],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Filmmaking/attachment_1tab_val_genre2/attachment_1tab_val_genre2.sqlite",
      "db_dump": "CREATE TABLE Actors(\n    ActorID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    DateOfBirth DATE);\nCREATE TABLE Casts(\n    FilmID INTEGER,\n    ActorID INTEGER,\n    Role TEXT,\n    FOREIGN KEY (ActorID) REFERENCES Actors(ActorID),\n    FOREIGN KEY (FilmID) REFERENCES Films(FilmID));\nCREATE TABLE Directors(\n    DirectorID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    BirthDate DATE);\nCREATE TABLE Films(\n    FilmID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Genre TEXT,\n    Release_Year INT ,\n    DirectorID INTEGER,\n    ProducerID INTEGER,\n    FOREIGN KEY (DirectorID) REFERENCES Directors(DirectorID),\n    FOREIGN KEY (ProducerID) REFERENCES Producers(ProducerID));\nCREATE TABLE Producers(\n    ProducerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    ProductionCompany TEXT);\n\nINSERT INTO \"Actors\" (ActorID,Name,DateOfBirth) VALUES (1,'Chris Evans','1981-05-13'),(2,'Scarlett Johansson','1984-11-22'),(3,'Ryan Reynolds','1976-10-23'),(4,'Anne Hathaway','1982-11-12'),(5,'Christopher Nolan','1970-07-30');\nINSERT INTO \"Casts\" (FilmID,ActorID,Role) VALUES (1,1,'Leading Man'),(1,2,'Supporting Actor'),(2,3,'Funny Sidekick'),(2,4,'Serious Best Friend'),(3,5,'Wise Mentor');\nINSERT INTO \"Directors\" (DirectorID,Name,BirthDate) VALUES (1,'John Doe','1980-07-30'),(2,'Jane Smith','1965-01-15'),(3,'Michael Johnson','1992-11-23'),(4,'Emily Davis','1978-05-28'),(5,'William Brown','1950-12-04');\nINSERT INTO \"Films\" (FilmID,Title,Genre,Release_Year,DirectorID,ProducerID) VALUES (1,'Animated Fun','Animation',2021,1,1),(2,'A Comic Adventure','Comedy',2021,2,2),(3,'The Silent Clown','Comedy',1999,3,3),(4,'Fantastic Journey','Animation',2019,4,4),(5,'Dream Chasers','Drama',2005,5,5);\nINSERT INTO \"Producers\" (ProducerID,Name,ProductionCompany) VALUES (1,'Alice Green','Green Studios'),(2,'Robert White','White Pictures'),(3,'David Black','Black Entertainment'),(4,'Carol Blue','Blue Vision'),(5,'Peter Gray','Gray Media');\n",
      "question": "Show animation films and comedy films released in 2021. Show them in one table.",
      "gold_queries": [
        "SELECT Films.Title \r\nFROM Films\r\nWHERE (Films.Genre = \"Animation\" OR Films.Genre = \"Comedy\") AND Films.Release_Year = 2021",
        "SELECT Films.Title \r\nFROM Films\r\nWHERE Films.Genre = \"Animation\" OR Films.Genre = \"Comedy\" AND Films.Release_Year = 2021"
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Present a combined table with animation films and comedy films from 2021, regardless of overlap in genres.",
          "sql_queries": [
            "SELECT Title, Genre, Release_Year FROM Films WHERE (Genre = 'Animation' OR Genre = 'Comedy') AND Release_Year = 2021"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Show all films with Genre='Animation' or Genre='Comedy' where Release_Year=2021.",
          "sql_queries": [
            "SELECT Title FROM Films WHERE (Genre='Animation' OR Genre='Comedy') AND Release_Year=2021"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Show a single table combining films with Genre='Animation' and Genre='Comedy' released in 2021.",
          "sql_queries": [
            "SELECT Title, Genre, Release_Year FROM Films WHERE (Genre='Animation' OR Genre='Comedy') AND Release_Year=2021"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Display films categorized as both Animation and Comedy that were released in 2021.",
          "sql_queries": [
            "SELECT Title FROM Films WHERE Genre = 'Animation' AND Genre = 'Comedy' AND Release_Year = 2021"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.25,
        "f1_score": 0.3333333333333333,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Filmmaking/attachment_1tab_val_genre3/attachment_1tab_val_genre3.sqlite",
      "db_dump": "CREATE TABLE Actors(\n    ActorID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    BirthDate DATE\n);\nCREATE TABLE Directors(\n    DirectorID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    BirthDate DATE\n);\nCREATE TABLE Movies(\n    MovieID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Genre TEXT,\n    Budget TEXT,\n    ReleaseYear INT,\n    DirectorID INTEGER,\n    FOREIGN KEY(DirectorID) REFERENCES Directors(DirectorID)\n);\nCREATE TABLE Roles(\n    RoleID INTEGER PRIMARY KEY AUTOINCREMENT,\n    MovieID INTEGER,\n    ActorID INTEGER,\n    CharacterName TEXT,\n    FOREIGN KEY(MovieID) REFERENCES Movies(MovieID),\n    FOREIGN KEY(ActorID) REFERENCES Actors(ActorID)\n);\n\nINSERT INTO \"Actors\" (ActorID,FirstName,LastName,BirthDate) VALUES (1,'Tom','Hanks','1956-07-09'),(2,'Emma','Stone','1988-11-06'),(3,'Leonardo','DiCaprio','1974-11-11');\nINSERT INTO \"Directors\" (DirectorID,Name,BirthDate) VALUES (1,'John Doe','1985-07-06'),(2,'Jane Smith','1990-03-12'),(3,'Alice Brown','1975-10-24');\nINSERT INTO \"Movies\" (MovieID,Title,Genre,Budget,ReleaseYear,DirectorID) VALUES (1,'Scary Night','Horror','20 million USD',2010,1),(2,'Silent Shadows','Horror','15 million USD',2005,2),(3,'Chilling Escape','Thriller','20 million USD',2009,3),(4,'Twisted Minds','Thriller','10 million USD',2015,3),(5,'Action Adventure','Adventure','12 million USD',2012,1),(6,'Fantasy Quest','Fantasy','15 million USD',2011,2);\nINSERT INTO \"Roles\" (RoleID,MovieID,ActorID,CharacterName) VALUES (1,1,1,'Jack'),(2,2,1,'Samantha'),(3,3,2,'David'),(4,4,3,'Lucy'),(5,5,1,'Kevin'),(6,6,3,'Rachel');\n",
      "question": "List both horror and thriller films where either have a $20M budget. Show them in one table.",
      "gold_queries": [
        "SELECT Movies.Title \r\nFROM Movies\r\nWHERE (Movies.Genre = \"Horror\" OR Movies.Genre = \"Thriller\") AND Movies.Budget = \"20 million USD\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "FROM Movies m",
          "sql_queries": [
            "SELECT Title, Genre, ReleaseYear FROM Movies m"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "SELECT Movies.* FROM Movies JOIN Roles ON Movies.MovieID = Roles.MovieID WHERE (Movies.Genre = 'Horror' OR Movies.Genre = 'Thriller') AND Movies.Budget = '20 million USD';",
          "sql_queries": [
            "SELECT Movies.* FROM Movies JOIN Roles ON Movies.MovieID = Roles.MovieID WHERE (Movies.Genre = 'Horror' OR Movies.Genre = 'Thriller') AND Movies.Budget = '20 million USD'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "SELECT  m.*",
          "sql_queries": [
            "SELECT m.* FROM Movies m"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Select * FROM Movies WHERE Genre IN ('Horror', 'Thriller') AND Budget = '20 million USD';",
          "sql_queries": [
            "SELECT * FROM Movies WHERE Genre IN ('Horror', 'Thriller') AND Budget = '20 million USD'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "JOIN Roles r ON m.MovieID = r.MovieID WHERE m.Genre IN ('Horror', 'Thriller') AND m.Budget = '20 million USD';",
          "sql_queries": [
            "SELECT r.ActorID, r.MovieID, r.CharacterName \nFROM Movies m \nJOIN Roles r ON m.MovieID = r.MovieID \nWHERE m.Genre IN ('Horror', 'Thriller') AND m.Budget = '20 million USD'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Filmmaking/attachment_1tab_val_genre3/attachment_1tab_val_genre3.sqlite",
      "db_dump": "CREATE TABLE Actors(\n    ActorID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    BirthDate DATE\n);\nCREATE TABLE Directors(\n    DirectorID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    BirthDate DATE\n);\nCREATE TABLE Movies(\n    MovieID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Genre TEXT,\n    Budget TEXT,\n    ReleaseYear INT,\n    DirectorID INTEGER,\n    FOREIGN KEY(DirectorID) REFERENCES Directors(DirectorID)\n);\nCREATE TABLE Roles(\n    RoleID INTEGER PRIMARY KEY AUTOINCREMENT,\n    MovieID INTEGER,\n    ActorID INTEGER,\n    CharacterName TEXT,\n    FOREIGN KEY(MovieID) REFERENCES Movies(MovieID),\n    FOREIGN KEY(ActorID) REFERENCES Actors(ActorID)\n);\n\nINSERT INTO \"Actors\" (ActorID,FirstName,LastName,BirthDate) VALUES (1,'Tom','Hanks','1956-07-09'),(2,'Emma','Stone','1988-11-06'),(3,'Leonardo','DiCaprio','1974-11-11');\nINSERT INTO \"Directors\" (DirectorID,Name,BirthDate) VALUES (1,'John Doe','1985-07-06'),(2,'Jane Smith','1990-03-12'),(3,'Alice Brown','1975-10-24');\nINSERT INTO \"Movies\" (MovieID,Title,Genre,Budget,ReleaseYear,DirectorID) VALUES (1,'Scary Night','Horror','20 million USD',2010,1),(2,'Silent Shadows','Horror','15 million USD',2005,2),(3,'Chilling Escape','Thriller','20 million USD',2009,3),(4,'Twisted Minds','Thriller','10 million USD',2015,3),(5,'Action Adventure','Adventure','12 million USD',2012,1),(6,'Fantasy Quest','Fantasy','15 million USD',2011,2);\nINSERT INTO \"Roles\" (RoleID,MovieID,ActorID,CharacterName) VALUES (1,1,1,'Jack'),(2,2,1,'Samantha'),(3,3,2,'David'),(4,4,3,'Lucy'),(5,5,1,'Kevin'),(6,6,3,'Rachel');\n",
      "question": "Please list horrors and thrillers with a $20M budget. Show them in one table.",
      "gold_queries": [
        "SELECT Movies.Title \r\nFROM Movies\r\nWHERE (Movies.Genre = \"Horror\" OR Movies.Genre = \"Thriller\") AND Movies.Budget = \"20 million USD\"",
        "SELECT Movies.Title \r\nFROM Movies\r\nWHERE Movies.Genre = \"Horror\" OR Movies.Genre = \"Thriller\" AND Movies.Budget = \"20 million USD\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Present a single table containing horror and thriller movies having a budget of 20 million USD.",
          "sql_queries": [
            "SELECT Title, Genre, Budget FROM Movies WHERE Genre IN ('Horror', 'Thriller') AND Budget = '20 million USD'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all movies with the genre \"Horror\" or \"Thriller\" and a budget of \"20 million USD\".",
          "sql_queries": [
            "SELECT Title FROM Movies WHERE Genre IN ('Horror', 'Thriller') AND Budget = '20 million USD'"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve movies categorized as \"Horror\" or \"Thriller\" where the \"Budget\" column equals \"20 million USD\".",
          "sql_queries": [
            "SELECT Title FROM Movies WHERE Genre IN ('Horror', 'Thriller') AND Budget = '20 million USD'"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.5,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/attachment/Filmmaking/attachment_2tab_val_genre3/attachment_2tab_val_genre3.sqlite",
      "db_dump": "CREATE TABLE Action_Movies(\n    id INTEGER PRIMARY KEY,\n    Title TEXT,\n    Director TEXT,\n    ReleaseYear INTEGER,\n    Duration INT\n);\nCREATE TABLE Actors(\n    id INTEGER PRIMARY KEY,\n    Name TEXT,\n    BirthDate TEXT,\n    Nationality TEXT\n);\nCREATE TABLE Awards(\n    id INTEGER PRIMARY KEY,\n    AwardType TEXT,\n    RecipientId INTEGER,\n);\nCREATE TABLE Directors(\n    id INTEGER PRIMARY KEY,\n    Name TEXT,\n    BirthDate TEXT,\n    Nationality TEXT\n);\nCREATE TABLE Movie_Ratings(\n    id INTEGER PRIMARY KEY,\n    Rating TEXT,\n    ReviewerName TEXT\n);\nCREATE TABLE Romantic_Comedies(\n    id INTEGER PRIMARY KEY,\n    Title TEXT,\n    Director TEXT,\n    ReleaseYear INTEGER,\n    Duration INT\n);\n\nINSERT INTO \"Action_Movies\" (id,Title,Director,ReleaseYear,Duration) VALUES (1,'The Dark Knight','Christopher Nolan',2008,163),(2,'Inception','Christopher Nolan',2010,148),(3,'Mad Max: Fury Road','George Miller',2015,120),(4,'John Wick','Chad Stahelski',2014,131),(5,'Avatar','James Cameron',2009,178);\nINSERT INTO \"Actors\" (id,Name,BirthDate,Nationality) VALUES (1,'Leonardo DiCaprio','11/11/1974','American'),(2,'Tom Hanks','07/09/1956','American'),(3,'Cate Blanchett','05/14/1969','Australian'),(4,'Kristen Stewart','04/09/1990','American'),(5,'Anne Hathaway','11/12/1982','American');\nINSERT INTO \"Awards\" (id,AwardType,RecipientId) VALUES (1,'Best Actor',1),(2,'Best Supporting Actor',2),(3,'Best Actress',3),(4,'Best Supporting Actress',4),(5,'Best Picture',5);\nINSERT INTO \"Directors\" (id,Name,BirthDate,Nationality) VALUES (1,'Christopher Nolan','07/30/1970','English'),(2,'George Miller','03/03/1942','Australian'),(3,'Chad Stahelski','06/04/1971','American'),(4,'Rob Reiner','03/29/1947','American'),(5,'Nora Ephron','06/19/1941','American');\nINSERT INTO \"Movie_Ratings\" (id,Rating,ReviewerName) VALUES (1,'A+','Peter Travers'),(2,'B','Owen Gleiberman'),(3,'A-','Todd McCarthy'),(4,'A','Michael Phillips'),(5,'B+','Ann Hornaday');\nINSERT INTO \"Romantic_Comedies\" (id,Title,Director,ReleaseYear,Duration) VALUES (1,'When Harry Met Sally','Rob Reiner',1989,100),(2,'Sleepless In Seattle','Nora Ephron',1993,105),(3,'Pretty Woman','Garry Marshall',1990,119),(4,'Notting Hill','Roger Michell',1999,120),(5,'Love Actually','Richard Curtis',2003,135);\n",
      "question": "What action movies run for 120 minutes and what romantic comedies have the same duration? Show them in one table.",
      "gold_queries": [
        "SELECT Action_Movies.title\r\nFROM Action_Movies\r\nWHERE Action_Movies.Duration = 120\r\nUNION\r\nSELECT Romantic_Comedies.title\r\nFROM Romantic_Comedies\r\nWHERE Romantic_Comedies.Duration = 120"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List action movies that are 120 minutes long, then list romantic comedies with the same duration.",
          "sql_queries": [
            "SELECT Title FROM Action_Movies WHERE Duration = 120\nUNION\nSELECT Title FROM Romantic_Comedies WHERE Duration = 120"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Display  active movie titles running 120 minutes alongside romantic comedies with the same runtime.",
          "sql_queries": [
            "SELECT Title FROM Action_Movies WHERE Duration = 120 UNION SELECT Title FROM Romantic_Comedies WHERE Duration = 120"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Find the action movies with a duration of 120 minutes, then list romantic comedies with the same duration, combining them into a single output table.",
          "sql_queries": [
            "SELECT Title, Director, ReleaseYear, Duration FROM Action_Movies WHERE Duration = 120\nUNION\nSELECT Title, Director, ReleaseYear, Duration FROM Romantic_Comedies WHERE Duration = 120"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Action movies with a duration of 120 minutes and the corresponding romantic comedies.",
          "sql_queries": [
            "SELECT Title FROM Action_Movies WHERE Duration = 120 UNION SELECT Title FROM Romantic_Comedies WHERE Duration = 120"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Produce a table showing action movies with a 120 minute runtime and romantic comedies with the same runtime.",
          "sql_queries": [
            "SELECT Title, Director, ReleaseYear, Duration FROM Action_Movies WHERE Duration = 120 UNION SELECT Title, Director, ReleaseYear, Duration FROM Romantic_Comedies WHERE Duration = 120"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 5,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/attachment/Filmmaking/attachment_2tab_val_genre3/attachment_2tab_val_genre3.sqlite",
      "db_dump": "CREATE TABLE Action_Movies(\n    id INTEGER PRIMARY KEY,\n    Title TEXT,\n    Director TEXT,\n    ReleaseYear INTEGER,\n    Duration INT\n);\nCREATE TABLE Actors(\n    id INTEGER PRIMARY KEY,\n    Name TEXT,\n    BirthDate TEXT,\n    Nationality TEXT\n);\nCREATE TABLE Awards(\n    id INTEGER PRIMARY KEY,\n    AwardType TEXT,\n    RecipientId INTEGER,\n);\nCREATE TABLE Directors(\n    id INTEGER PRIMARY KEY,\n    Name TEXT,\n    BirthDate TEXT,\n    Nationality TEXT\n);\nCREATE TABLE Movie_Ratings(\n    id INTEGER PRIMARY KEY,\n    Rating TEXT,\n    ReviewerName TEXT\n);\nCREATE TABLE Romantic_Comedies(\n    id INTEGER PRIMARY KEY,\n    Title TEXT,\n    Director TEXT,\n    ReleaseYear INTEGER,\n    Duration INT\n);\n\nINSERT INTO \"Action_Movies\" (id,Title,Director,ReleaseYear,Duration) VALUES (1,'The Dark Knight','Christopher Nolan',2008,163),(2,'Inception','Christopher Nolan',2010,148),(3,'Mad Max: Fury Road','George Miller',2015,120),(4,'John Wick','Chad Stahelski',2014,131),(5,'Avatar','James Cameron',2009,178);\nINSERT INTO \"Actors\" (id,Name,BirthDate,Nationality) VALUES (1,'Leonardo DiCaprio','11/11/1974','American'),(2,'Tom Hanks','07/09/1956','American'),(3,'Cate Blanchett','05/14/1969','Australian'),(4,'Kristen Stewart','04/09/1990','American'),(5,'Anne Hathaway','11/12/1982','American');\nINSERT INTO \"Awards\" (id,AwardType,RecipientId) VALUES (1,'Best Actor',1),(2,'Best Supporting Actor',2),(3,'Best Actress',3),(4,'Best Supporting Actress',4),(5,'Best Picture',5);\nINSERT INTO \"Directors\" (id,Name,BirthDate,Nationality) VALUES (1,'Christopher Nolan','07/30/1970','English'),(2,'George Miller','03/03/1942','Australian'),(3,'Chad Stahelski','06/04/1971','American'),(4,'Rob Reiner','03/29/1947','American'),(5,'Nora Ephron','06/19/1941','American');\nINSERT INTO \"Movie_Ratings\" (id,Rating,ReviewerName) VALUES (1,'A+','Peter Travers'),(2,'B','Owen Gleiberman'),(3,'A-','Todd McCarthy'),(4,'A','Michael Phillips'),(5,'B+','Ann Hornaday');\nINSERT INTO \"Romantic_Comedies\" (id,Title,Director,ReleaseYear,Duration) VALUES (1,'When Harry Met Sally','Rob Reiner',1989,100),(2,'Sleepless In Seattle','Nora Ephron',1993,105),(3,'Pretty Woman','Garry Marshall',1990,119),(4,'Notting Hill','Roger Michell',1999,120),(5,'Love Actually','Richard Curtis',2003,135);\n",
      "question": "List all action movies and also list romantic comedies with a duration of 120 minutes. Show them in one table.",
      "gold_queries": [
        "SELECT Action_Movies.title\r\nFROM Action_Movies\r\nUNION\r\nSELECT Romantic_Comedies.title\r\nFROM Romantic_Comedies\r\nWHERE Romantic_Comedies.Duration = 120"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Create a single table that includes all action movies and a subset of romantic comedies that have a duration of 120 minutes.",
          "sql_queries": [
            "SELECT Title, Director, ReleaseYear, Duration FROM Action_Movies\nUNION\nSELECT Title, Director, ReleaseYear, Duration FROM Romantic_Comedies WHERE Duration = 120"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Combine the results of two separate queries: (1) retrieving all action movies and (2) retrieving romantic comedies with a duration of 120 minutes into a single unified table.",
          "sql_queries": [
            "SELECT Title, Director, ReleaseYear, Duration FROM Action_Movies \nUNION \nSELECT Title, Director, ReleaseYear, Duration FROM Romantic_Comedies WHERE Duration = 120"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all action movies along with romantic comedies with a duration of 120 minutes in a single table.",
          "sql_queries": [
            "SELECT Title, Director, ReleaseYear, Duration FROM Action_Movies WHERE Duration = 120 UNION SELECT Title, Director, ReleaseYear, Duration FROM Romantic_Comedies WHERE Duration = 120"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Present the action movies and the specified romantic comedies side-by-side in a merged table format.",
          "sql_queries": [
            "SELECT Title, Director, ReleaseYear, Duration, 'Action_Movies' AS MovieType\nFROM Action_Movies\nUNION ALL\nSELECT Title, Director, ReleaseYear, Duration, 'Romantic_Comedies' AS MovieType\nFROM Romantic_Comedies\nWHERE Title IN ('When Harry Met Sally', 'Sleepless In Seattle', 'Pretty Woman', 'Notting Hill', 'Love Actually')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Filmmaking/attachment_2tab_val_genre3/attachment_2tab_val_genre3.sqlite",
      "db_dump": "CREATE TABLE Action_Movies(\n    id INTEGER PRIMARY KEY,\n    Title TEXT,\n    Director TEXT,\n    ReleaseYear INTEGER,\n    Duration INT\n);\nCREATE TABLE Actors(\n    id INTEGER PRIMARY KEY,\n    Name TEXT,\n    BirthDate TEXT,\n    Nationality TEXT\n);\nCREATE TABLE Awards(\n    id INTEGER PRIMARY KEY,\n    AwardType TEXT,\n    RecipientId INTEGER,\n);\nCREATE TABLE Directors(\n    id INTEGER PRIMARY KEY,\n    Name TEXT,\n    BirthDate TEXT,\n    Nationality TEXT\n);\nCREATE TABLE Movie_Ratings(\n    id INTEGER PRIMARY KEY,\n    Rating TEXT,\n    ReviewerName TEXT\n);\nCREATE TABLE Romantic_Comedies(\n    id INTEGER PRIMARY KEY,\n    Title TEXT,\n    Director TEXT,\n    ReleaseYear INTEGER,\n    Duration INT\n);\n\nINSERT INTO \"Action_Movies\" (id,Title,Director,ReleaseYear,Duration) VALUES (1,'The Dark Knight','Christopher Nolan',2008,163),(2,'Inception','Christopher Nolan',2010,148),(3,'Mad Max: Fury Road','George Miller',2015,120),(4,'John Wick','Chad Stahelski',2014,131),(5,'Avatar','James Cameron',2009,178);\nINSERT INTO \"Actors\" (id,Name,BirthDate,Nationality) VALUES (1,'Leonardo DiCaprio','11/11/1974','American'),(2,'Tom Hanks','07/09/1956','American'),(3,'Cate Blanchett','05/14/1969','Australian'),(4,'Kristen Stewart','04/09/1990','American'),(5,'Anne Hathaway','11/12/1982','American');\nINSERT INTO \"Awards\" (id,AwardType,RecipientId) VALUES (1,'Best Actor',1),(2,'Best Supporting Actor',2),(3,'Best Actress',3),(4,'Best Supporting Actress',4),(5,'Best Picture',5);\nINSERT INTO \"Directors\" (id,Name,BirthDate,Nationality) VALUES (1,'Christopher Nolan','07/30/1970','English'),(2,'George Miller','03/03/1942','Australian'),(3,'Chad Stahelski','06/04/1971','American'),(4,'Rob Reiner','03/29/1947','American'),(5,'Nora Ephron','06/19/1941','American');\nINSERT INTO \"Movie_Ratings\" (id,Rating,ReviewerName) VALUES (1,'A+','Peter Travers'),(2,'B','Owen Gleiberman'),(3,'A-','Todd McCarthy'),(4,'A','Michael Phillips'),(5,'B+','Ann Hornaday');\nINSERT INTO \"Romantic_Comedies\" (id,Title,Director,ReleaseYear,Duration) VALUES (1,'When Harry Met Sally','Rob Reiner',1989,100),(2,'Sleepless In Seattle','Nora Ephron',1993,105),(3,'Pretty Woman','Garry Marshall',1990,119),(4,'Notting Hill','Roger Michell',1999,120),(5,'Love Actually','Richard Curtis',2003,135);\n",
      "question": "Show action movies and romantic comedies that run for 120 minutes. Show them in one table.",
      "gold_queries": [
        "SELECT Action_Movies.title\r\nFROM Action_Movies\r\nWHERE Action_Movies.Duration = 120\r\nUNION\r\nSELECT Romantic_Comedies.title\r\nFROM Romantic_Comedies\r\nWHERE Romantic_Comedies.Duration = 120",
        "SELECT Action_Movies.title\r\nFROM Action_Movies\r\nUNION\r\nSELECT Romantic_Comedies.title\r\nFROM Romantic_Comedies\r\nWHERE Romantic_Comedies.Duration = 120"
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Display the titles of Action_Movies and Romantic_Comedies with a runtime of 120 minutes.",
          "sql_queries": [
            "SELECT Title FROM Action_Movies WHERE Duration = 120 UNION SELECT Title FROM Romantic_Comedies WHERE Duration = 120"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "JOIN Romantic_Comedies AS r ON a.Duration = r.Duration",
          "sql_queries": [
            "SELECT a.Title, r.Title\nFROM Action_Movies AS a\nJOIN Romantic_Comedies AS r ON a.Duration = r.Duration"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "(SELECT * FROM Action_Movies WHERE Duration = 120) UNION ALL",
          "sql_queries": [],
          "metrics": {
            "recall": 0.0,
            "precision": 0,
            "f1_score": 0,
            "num_queries": 0,
            "num_unique_queries": 0,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Select * FROM Action_Movies AS a",
          "sql_queries": [
            "SELECT * FROM Action_Movies AS a"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Select Title FROM Action_Movies WHERE Duration = 120;",
          "sql_queries": [
            "SELECT Title FROM Action_Movies WHERE Duration = 120"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "WHERE a.Duration = 120;",
          "sql_queries": [
            "SELECT Title FROM Action_Movies WHERE Duration = 120"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Select *, \"Action Movies\", \"Romantic Comedies\" FROM",
          "sql_queries": [
            "SELECT * FROM Action_Movies UNION SELECT * FROM Romantic_Comedies"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "(SELECT * FROM Romantic_Comedies WHERE Duration = 120)",
          "sql_queries": [
            "SELECT * FROM Romantic_Comedies WHERE Duration = 120"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Select Title FROM Romantic_Comedies WHERE Duration = 120;",
          "sql_queries": [
            "SELECT Title FROM Romantic_Comedies WHERE Duration = 120"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "UNION ALL",
          "sql_queries": [
            "SELECT Title FROM Action_Movies UNION ALL SELECT Title FROM Romantic_Comedies"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Provide a combined list of Action_Movies and Romantic_Comedies with a duration of 120 minutes.",
          "sql_queries": [
            "SELECT Title FROM Action_Movies WHERE Duration = 120 UNION SELECT Title FROM Romantic_Comedies WHERE Duration = 120"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 7,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.25,
        "f1_score": 0.3333333333333333,
        "num_queries": 10,
        "num_unique_queries": 8,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/attachment/Filmmaking/attachment_1tab_val_genre3/attachment_1tab_val_genre3.sqlite",
      "db_dump": "CREATE TABLE Actors(\n    ActorID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    BirthDate DATE\n);\nCREATE TABLE Directors(\n    DirectorID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    BirthDate DATE\n);\nCREATE TABLE Movies(\n    MovieID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Genre TEXT,\n    Budget TEXT,\n    ReleaseYear INT,\n    DirectorID INTEGER,\n    FOREIGN KEY(DirectorID) REFERENCES Directors(DirectorID)\n);\nCREATE TABLE Roles(\n    RoleID INTEGER PRIMARY KEY AUTOINCREMENT,\n    MovieID INTEGER,\n    ActorID INTEGER,\n    CharacterName TEXT,\n    FOREIGN KEY(MovieID) REFERENCES Movies(MovieID),\n    FOREIGN KEY(ActorID) REFERENCES Actors(ActorID)\n);\n\nINSERT INTO \"Actors\" (ActorID,FirstName,LastName,BirthDate) VALUES (1,'Tom','Hanks','1956-07-09'),(2,'Emma','Stone','1988-11-06'),(3,'Leonardo','DiCaprio','1974-11-11');\nINSERT INTO \"Directors\" (DirectorID,Name,BirthDate) VALUES (1,'John Doe','1985-07-06'),(2,'Jane Smith','1990-03-12'),(3,'Alice Brown','1975-10-24');\nINSERT INTO \"Movies\" (MovieID,Title,Genre,Budget,ReleaseYear,DirectorID) VALUES (1,'Scary Night','Horror','20 million USD',2010,1),(2,'Silent Shadows','Horror','15 million USD',2005,2),(3,'Chilling Escape','Thriller','20 million USD',2009,3),(4,'Twisted Minds','Thriller','10 million USD',2015,3),(5,'Action Adventure','Adventure','12 million USD',2012,1),(6,'Fantasy Quest','Fantasy','15 million USD',2011,2);\nINSERT INTO \"Roles\" (RoleID,MovieID,ActorID,CharacterName) VALUES (1,1,1,'Jack'),(2,2,1,'Samantha'),(3,3,2,'David'),(4,4,3,'Lucy'),(5,5,1,'Kevin'),(6,6,3,'Rachel');\n",
      "question": "Show all horror films, also show just the thrillers with a $20M budget. Show them in one table.",
      "gold_queries": [
        "SELECT Movies.Title \r\nFROM Movies\r\nWHERE Movies.Genre = \"Horror\" OR Movies.Genre = \"Thriller\" AND Movies.Budget = \"20 million USD\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Generate a single table showing information about all horror movies followed by information about all thriller movies with a budget of '$20 million USD'.",
          "sql_queries": [
            "SELECT Title, Genre, Budget, ReleaseYear FROM Movies WHERE Genre = 'Horror' UNION ALL SELECT Title, Genre, Budget, ReleaseYear FROM Movies WHERE Genre = 'Thriller' AND Budget = '20 million USD'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Present a table containing all horror and thriller movies, with a distinction or column indicating budget values of '$20 million USD' within the thriller category.",
          "sql_queries": [
            "SELECT Title, Genre, CASE WHEN Genre = 'Thriller' AND Budget = '20 million USD' THEN 'High' ELSE 'Standard' END AS BudgetLevel\nFROM Movies\nWHERE Genre IN ('Horror', 'Thriller')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Display two separate result sets: one showing all horror films and another showing thrillers with a budget of '$20 million USD'.",
          "sql_queries": [
            "SELECT Title FROM Movies WHERE Genre = 'Horror'",
            "SELECT Title FROM Movies WHERE Genre = 'Thriller' AND Budget = '20 million USD'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve all movies of genre 'Horror' and movies of genre 'Thriller' with a budget of '$20 million USD', combining the results into a single table.",
          "sql_queries": [
            "SELECT Title FROM Movies WHERE Genre = 'Horror' UNION SELECT Title FROM Movies WHERE Genre = 'Thriller' AND Budget = '20 million USD'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Filmmaking/attachment_1tab_val_writer/attachment_1tab_val_writer.sqlite",
      "db_dump": "CREATE TABLE Director (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    BirthDate DATE\n);\nCREATE TABLE Director_Film (\n    directorId INTEGER,\n    filmId INTEGER,\n    FOREIGN KEY(directorId) REFERENCES Director(id),\n    FOREIGN KEY(filmId) REFERENCES Film(id),\n    PRIMARY KEY(directorId, filmId)\n);\nCREATE TABLE Film (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    ReleaseYear INTEGER,\n    Genre TEXT\n);\nCREATE TABLE Film_Screenplay (\n    filmId INTEGER,\n    scriptId INTEGER,\n    FOREIGN KEY(scriptId) REFERENCES Script(id),\n    FOREIGN KEY(filmId) REFERENCES Film(id),\n    PRIMARY KEY(filmId, scriptId)\n);\nCREATE TABLE Screenplay (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Year WRITER INT\n);\nCREATE TABLE Writer (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Type TEXT, -- Could be either 'screenwriter', 'playwright', or others\n    Education TEXT\n);\n\nINSERT INTO \"Director\" (id,Name,BirthDate) VALUES (1,'Christopher Nolan','30 July 1970'),(2,'Lana Wachowski','21 June 1968'),(3,'David Fincher','August 22, 1962'),(4,'Quentin Tarantino','March 27, 1963'),(5,'Martin Scorsese','November 17, 1942');\nINSERT INTO \"Director_Film\" (directorId,filmId) VALUES (1,1),(2,2),(3,3),(4,4),(5,5);\nINSERT INTO \"Film\" (id,Title,ReleaseYear,Genre) VALUES (1,'Inception',2010,'Science Fiction'),(2,'The Matrix',1999,'Science Fiction'),(3,'Fight Club',1999,'Drama'),(4,'Pulp Fiction',1994,'Crime'),(5,'Goodfellas',1990,'Crime');\nINSERT INTO \"Film_Screenplay\" (filmId,scriptId) VALUES (1,1),(2,2),(3,3),(4,4),(5,5);\nINSERT INTO \"Screenplay\" (id,Title,Year) VALUES (1,'Inception',1),(2,'The Matrix',2),(3,'Fight Club',3),(4,'Pulp Fiction',4),(5,'Goodfellas',5);\nINSERT INTO \"Writer\" (id,Name,Type,Education) VALUES (1,'John Doe','Screenwriter','New York University'),(2,'Jane Smith','Screenwriter','University of California Los Angeles'),(3,'Bob Johnson','Playwright','New York University'),(4,'Alice Brown','Playwright','Columbia University'),(5,'Tom Green','Screenwriter','American Film Institute'),(6,'Mary White','Director','UCLA School of Theater, Film and Television');\n",
      "question": "Provide a list of all screenwriters and also provide a list of playwrights who have studied at New York University. Show them in one table.",
      "gold_queries": [
        "SELECT Writer.name \r\nFROM Writer\r\nWHERE Writer.Type = \"Screenwriter\" OR Writer.Type = \"Playwright\" AND Writer.Education = \"New York University\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Create a table with two columns, one labelled 'Screenwriters' and the other 'Playwrights', both containing the names of individuals who studied at NYU.",
          "sql_queries": [
            "SELECT \n    CASE WHEN Education = 'New York University' AND Type = 'Screenwriter' THEN Name END AS Screenwriters,\n    CASE WHEN Education = 'New York University' AND Type = 'Playwright' THEN Name END AS Playwrights\nFROM Writer"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all screenwriters and playwrights from NYU in a single table.",
          "sql_queries": [
            "SELECT Name, Type FROM Writer WHERE Type IN ('Screenwriter', 'Playwright') AND Education = 'New York University'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve a table containing two separate lists: screenwriters and playwrights who studied at NYU.",
          "sql_queries": [
            "SELECT Name FROM Writer WHERE Type = 'Screenwriter' AND Education = 'New York University' UNION SELECT Name FROM Writer WHERE Type = 'Playwright' AND Education = 'New York University'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Generate a table with columns for 'Type' and 'Education', listing all NYU-educated screenwriters and playwrights.",
          "sql_queries": [
            "SELECT Type, Education FROM Writer WHERE Education = 'New York University' AND Type IN ('Screenwriter', 'Playwright')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Filmmaking/attachment_1tab_val_writer/attachment_1tab_val_writer.sqlite",
      "db_dump": "CREATE TABLE Director (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    BirthDate DATE\n);\nCREATE TABLE Director_Film (\n    directorId INTEGER,\n    filmId INTEGER,\n    FOREIGN KEY(directorId) REFERENCES Director(id),\n    FOREIGN KEY(filmId) REFERENCES Film(id),\n    PRIMARY KEY(directorId, filmId)\n);\nCREATE TABLE Film (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    ReleaseYear INTEGER,\n    Genre TEXT\n);\nCREATE TABLE Film_Screenplay (\n    filmId INTEGER,\n    scriptId INTEGER,\n    FOREIGN KEY(scriptId) REFERENCES Script(id),\n    FOREIGN KEY(filmId) REFERENCES Film(id),\n    PRIMARY KEY(filmId, scriptId)\n);\nCREATE TABLE Screenplay (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Year WRITER INT\n);\nCREATE TABLE Writer (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Type TEXT, -- Could be either 'screenwriter', 'playwright', or others\n    Education TEXT\n);\n\nINSERT INTO \"Director\" (id,Name,BirthDate) VALUES (1,'Christopher Nolan','30 July 1970'),(2,'Lana Wachowski','21 June 1968'),(3,'David Fincher','August 22, 1962'),(4,'Quentin Tarantino','March 27, 1963'),(5,'Martin Scorsese','November 17, 1942');\nINSERT INTO \"Director_Film\" (directorId,filmId) VALUES (1,1),(2,2),(3,3),(4,4),(5,5);\nINSERT INTO \"Film\" (id,Title,ReleaseYear,Genre) VALUES (1,'Inception',2010,'Science Fiction'),(2,'The Matrix',1999,'Science Fiction'),(3,'Fight Club',1999,'Drama'),(4,'Pulp Fiction',1994,'Crime'),(5,'Goodfellas',1990,'Crime');\nINSERT INTO \"Film_Screenplay\" (filmId,scriptId) VALUES (1,1),(2,2),(3,3),(4,4),(5,5);\nINSERT INTO \"Screenplay\" (id,Title,Year) VALUES (1,'Inception',1),(2,'The Matrix',2),(3,'Fight Club',3),(4,'Pulp Fiction',4),(5,'Goodfellas',5);\nINSERT INTO \"Writer\" (id,Name,Type,Education) VALUES (1,'John Doe','Screenwriter','New York University'),(2,'Jane Smith','Screenwriter','University of California Los Angeles'),(3,'Bob Johnson','Playwright','New York University'),(4,'Alice Brown','Playwright','Columbia University'),(5,'Tom Green','Screenwriter','American Film Institute'),(6,'Mary White','Director','UCLA School of Theater, Film and Television');\n",
      "question": "Show screenwriters and playwrights who have studied at New York University. Show them in one table.",
      "gold_queries": [
        "SELECT Writer.name \r\nFROM Writer\r\nWHERE (Writer.Type = \"Screenwriter\" OR Writer.Type = \"Playwright\") AND Writer.Education = \"New York University\"",
        "SELECT Writer.name \r\nFROM Writer\r\nWHERE Writer.Type = \"Screenwriter\" OR Writer.Type = \"Playwright\" AND Writer.Education = \"New York University\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Consolidate all writers from the Writer table into a single table, filtering for those whose Education is 'New York University' and identifying their Type as either 'screenwriter' or 'playwright'.",
          "sql_queries": [
            "SELECT Name, Type FROM Writer WHERE Education = 'New York University' AND Type IN ('screenwriter', 'playwright')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Show the names of all screenwriters and playwrights who studied at New York University, grouped by their Writer Type.",
          "sql_queries": [
            "SELECT Name, Type FROM Writer WHERE Education = 'New York University' GROUP BY Type"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Display separate tables for writers of type 'screenwriter' and 'playwright' who studied at New York University.",
          "sql_queries": [
            "SELECT Name, Type, Education FROM Writer WHERE Type = 'playwright' AND Education = 'New York University'",
            "SELECT Name, Type, Education FROM Writer WHERE Type = 'screenwriter' AND Education = 'New York University'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Generate a query that retrieves the Name and Education of all writers from the Writer table whose education is 'New York University' and whose Type is either \"screenwriter\" or \"playwright\".",
          "sql_queries": [
            "SELECT Name, Education FROM Writer WHERE Education = 'New York University' AND Type IN ('screenwriter', 'playwright')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all writers from the Writer table who have a ‘New York University’ in the Education column, regardless of their Type.",
          "sql_queries": [
            "SELECT Name FROM Writer WHERE Education = 'New York University'"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.16666666666666666,
        "f1_score": 0.25,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Filmmaking/attachment_1tab_val_writer/attachment_1tab_val_writer.sqlite",
      "db_dump": "CREATE TABLE Director (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    BirthDate DATE\n);\nCREATE TABLE Director_Film (\n    directorId INTEGER,\n    filmId INTEGER,\n    FOREIGN KEY(directorId) REFERENCES Director(id),\n    FOREIGN KEY(filmId) REFERENCES Film(id),\n    PRIMARY KEY(directorId, filmId)\n);\nCREATE TABLE Film (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    ReleaseYear INTEGER,\n    Genre TEXT\n);\nCREATE TABLE Film_Screenplay (\n    filmId INTEGER,\n    scriptId INTEGER,\n    FOREIGN KEY(scriptId) REFERENCES Script(id),\n    FOREIGN KEY(filmId) REFERENCES Film(id),\n    PRIMARY KEY(filmId, scriptId)\n);\nCREATE TABLE Screenplay (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Year WRITER INT\n);\nCREATE TABLE Writer (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Type TEXT, -- Could be either 'screenwriter', 'playwright', or others\n    Education TEXT\n);\n\nINSERT INTO \"Director\" (id,Name,BirthDate) VALUES (1,'Christopher Nolan','30 July 1970'),(2,'Lana Wachowski','21 June 1968'),(3,'David Fincher','August 22, 1962'),(4,'Quentin Tarantino','March 27, 1963'),(5,'Martin Scorsese','November 17, 1942');\nINSERT INTO \"Director_Film\" (directorId,filmId) VALUES (1,1),(2,2),(3,3),(4,4),(5,5);\nINSERT INTO \"Film\" (id,Title,ReleaseYear,Genre) VALUES (1,'Inception',2010,'Science Fiction'),(2,'The Matrix',1999,'Science Fiction'),(3,'Fight Club',1999,'Drama'),(4,'Pulp Fiction',1994,'Crime'),(5,'Goodfellas',1990,'Crime');\nINSERT INTO \"Film_Screenplay\" (filmId,scriptId) VALUES (1,1),(2,2),(3,3),(4,4),(5,5);\nINSERT INTO \"Screenplay\" (id,Title,Year) VALUES (1,'Inception',1),(2,'The Matrix',2),(3,'Fight Club',3),(4,'Pulp Fiction',4),(5,'Goodfellas',5);\nINSERT INTO \"Writer\" (id,Name,Type,Education) VALUES (1,'John Doe','Screenwriter','New York University'),(2,'Jane Smith','Screenwriter','University of California Los Angeles'),(3,'Bob Johnson','Playwright','New York University'),(4,'Alice Brown','Playwright','Columbia University'),(5,'Tom Green','Screenwriter','American Film Institute'),(6,'Mary White','Director','UCLA School of Theater, Film and Television');\n",
      "question": "Which screenwriters have studied at New York University which playwrights have studied at the same university? Show them in one table.",
      "gold_queries": [
        "SELECT Writer.name \r\nFROM Writer\r\nWHERE (Writer.Type = \"Screenwriter\" OR Writer.Type = \"Playwright\") AND Writer.Education = \"New York University\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Which screenwriters studied at NYU and which playwrights also studied at NYU?",
          "sql_queries": [
            "SELECT Name FROM Writer WHERE Type = 'Screenwriter' AND Education = 'New York University' UNION SELECT Name FROM Writer WHERE Type = 'Playwright' AND Education = 'New York University'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Find screenwriters and playwrights from NYU and display them in a single table.",
          "sql_queries": [
            "SELECT Name, Type FROM Writer WHERE (Type = 'Screenwriter' OR Type = 'Playwright') AND Education = 'New York University'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Give a table showing only the names of screenwriters and playwrights who attended NYU.",
          "sql_queries": [
            "SELECT Name FROM Writer WHERE Education = 'New York University' AND Type IN ('Screenwriter', 'Playwright')"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "List the screenwriters from NYU, and separately list the playwrights from NYU, in one table.",
          "sql_queries": [
            "SELECT Name, Type FROM Writer WHERE Education = 'New York University' AND (Type = 'Screenwriter' OR Type = 'Playwright')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/attachment/Journalism/attachment_1tab_ref_information_gathering_methods/attachment_1tab_ref_information_gathering_methods.sqlite",
      "db_dump": "CREATE TABLE Article_Source(\n    article_source_id INTEGER PRIMARY KEY,\n    news_article_id INTEGER,\n    source_id INTEGER,\n    FOREIGN KEY (news_article_id) REFERENCES News_Article(article_id),\n    FOREIGN KEY (source_id) REFERENCES Source(source_id)\n);\nCREATE TABLE Information_Gathering_Method(\n    id INTEGER PRIMARY KEY,\n    method TEXT\n);\nCREATE TABLE News_Article(\n    article_id INTEGER PRIMARY KEY,\n    title TEXT,\n    content TEXT,\n    date DATE,\n    author_id INTEGER,\n    information_gathering_method_id INTEGER,\n    participant_type_id INTEGER,\n    FOREIGN KEY (author_id) REFERENCES Author(author_id),\n    FOREIGN KEY (information_gathering_method_id) REFERENCES Information_Gathering_Method(id),\n    FOREIGN KEY (participant_type_id) REFERENCES Participant_Type(id)\n);\nCREATE TABLE Participant_Type(\n    id INTEGER PRIMARY KEY,\n    type TEXT\n);\nCREATE TABLE Quote(\n    quote_id INTEGER PRIMARY KEY,\n    text TEXT,\n    start_time TIME,\n    end_time TIME,\n    news_article_id INTEGER,\n    speaker_id INTEGER,\n    FOREIGN KEY (news_article_id) REFERENCES News_Article(article_id),\n    FOREIGN KEY (speaker_id) REFERENCES Speaker(speaker_id)\n);\nCREATE TABLE Source(\n    source_id INTEGER PRIMARY KEY,\n    name TEXT,\n    url TEXT UNIQUE\n);\nCREATE TABLE Speaker(\n    speaker_id INTEGER PRIMARY KEY,\n    name TEXT,\n    role TEXT\n);\n\nINSERT INTO \"Article_Source\" (article_source_id,news_article_id,source_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4);\nINSERT INTO \"Information_Gathering_Method\" (id,method) VALUES (1,'Press Conference'),(2,'Interview');\nINSERT INTO \"News_Article\" (article_id,title,content,date,author_id,information_gathering_method_id,participant_type_id) VALUES (1,'First Press Conference','Details about the press conference...','2023-01-01',1,1,1),(2,'Second Press Conference','Details about the press conference...','2023-01-02',2,1,2),(3,'Interview with Politician','Details about the interview...','2023-01-03',3,2,1),(4,'Interview with Activist','Details about the activist interview...','2023-01-04',4,2,2);\nINSERT INTO \"Participant_Type\" (id,type) VALUES (1,'Politician'),(2,'Business Leader'),(3,'Activist');\nINSERT INTO \"Quote\" (quote_id,text,start_time,end_time,news_article_id,speaker_id) VALUES (1,'Quote from politician at first press conference.','00:00:05','00:00:15',1,1),(2,'Quote from business leader at second press conference.','00:00:06','00:00:17',2,2),(3,'Quote from politician during the interview.','00:00:08','00:00:19',3,3),(4,'Quote from activist during the interview.','00:00:09','00:00:21',4,4);\nINSERT INTO \"Source\" (source_id,name,url) VALUES (1,'Official Government Website','https://www.govsite.com/'),(2,'Company Blog','https://blog.company.com/'),(3,'News Channel','https://newschannel.tv/'),(4,'Alternative Media Outlet','https://alternativemedia.org/');\nINSERT INTO \"Speaker\" (speaker_id,name,role) VALUES (1,'John Doe','Politician'),(2,'Jane Smith','Business Leader'),(3,'Bob Johnson','Politician'),(4,'Emma Brown','Activist');\n",
      "question": "What press conferences were attended by politicians and what interviews did they also attend? Show them in one table.",
      "gold_queries": [
        "SELECT News_Article.Title \r\nFROM Information_Gathering_Method JOIN News_Article ON Information_Gathering_Method.id = News_Article.information_gathering_method_id JOIN Participant_Type ON News_Article.participant_type_id = Participant_Type.id\r\nWHERE (Information_Gathering_Method.method = \"Press Conference\" OR Information_Gathering_Method.method = \"Interview\") AND Participant_Type.type = \"Politician\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Determine the specific \"Press Conference\" news articles attended by politicians and fetch corresponding \"Interview\" articles where politicians were also involved, presenting the results in a unified table.",
          "sql_queries": [
            "SELECT title, date FROM News_Article WHERE participant_type_id = 1 AND information_gathering_method_id = 1\nUNION\nSELECT title, date FROM News_Article WHERE participant_type_id = 1 AND information_gathering_method_id = 2"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve the titles and dates of news articles classified as \"Press Conference\" that involved politicians and display any related \"Interview\" articles with politicians, consolidating this information into a single table.",
          "sql_queries": [
            "SELECT ta.title, ta.date\nFROM News_Article ta\nJOIN Information_Gathering_Method tig ON ta.information_gathering_method_id = tig.id\nJOIN Participant_Type tp ON ta.participant_type_id = tp.id\nWHERE (tig.method = 'Press Conference' AND tp.type = 'Politician')\nUNION\nSELECT ta.title, ta.date\nFROM News_Article ta\nJOIN Information_Gathering_Method tig ON ta.information_gathering_method_id = tig.id\nJOIN Participant_Type tp ON ta.participant_type_id = tp.id\nWHERE tig.method = 'Interview' AND tp.type = 'Politician'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all news articles categorized as \"Press Conference\" where the participant type is \"Politician\" and also list any associated \"Interview\" news articles where the same participant type \"Politician\" is present.",
          "sql_queries": [
            "SELECT title \nFROM News_Article \nJOIN Information_Gathering_Method ON News_Article.information_gathering_method_id = Information_Gathering_Method.id \nJOIN Participant_Type ON News_Article.participant_type_id = Participant_Type.id \nWHERE Information_Gathering_Method.method = 'Press Conference' AND Participant_Type.type = 'Politician'\nUNION\nSELECT title \nFROM News_Article \nJOIN Information_Gathering_Method ON News_Article.information_gathering_method_id = Information_Gathering_Method.id \nJOIN Participant_Type ON News_Article.participant_type_id = Participant_Type.id \nWHERE Information_Gathering_Method.method = 'Interview' AND Participant_Type.type = 'Politician'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Identify all \"Press Conference\" news articles with \"Politician\" participants and list any associated \"Interview\" articles featuring \"Politician\" participants in a combined table.",
          "sql_queries": [
            "SELECT na2.title, na2.content, na2.date, pt.type, igm.method\nFROM News_Article na2\nJOIN Participant_Type pt ON na2.participant_type_id = pt.id\nJOIN Information_Gathering_Method igm ON na2.information_gathering_method_id = igm.id\nWHERE igm.method = 'Interview' AND pt.type = 'Politician'",
            "SELECT na1.title, na1.content, na1.date, pt.type, igm.method\nFROM News_Article na1\nJOIN Participant_Type pt ON na1.participant_type_id = pt.id\nJOIN Information_Gathering_Method igm ON na1.information_gathering_method_id = igm.id\nWHERE igm.method = 'Press Conference' AND pt.type = 'Politician'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "For each \"Press Conference\" news article with a \"Politician\" participant, present the article details along with any corresponding \"Interview\" news articles involving a \"Politician\" participant, formatted within a single table.",
          "sql_queries": [
            "SELECT na1.title, na1.content, na1.date\nFROM News_Article na1\nJOIN Information_Gathering_Method igm1 ON na1.information_gathering_method_id = igm1.id\nJOIN Participant_Type pt1 ON na1.participant_type_id = pt1.id\nWHERE igm1.method = 'Press Conference' AND pt1.type = 'Politician'\nUNION ALL\nSELECT na2.title, na2.content, na2.date\nFROM News_Article na2\nJOIN Information_Gathering_Method igm2 ON na2.information_gathering_method_id = igm2.id\nJOIN Participant_Type pt2 ON na2.participant_type_id = pt2.id\nWHERE igm2.method = 'Interview' AND pt2.type = 'Politician'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.16666666666666666,
        "f1_score": 0.2857142857142857,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Journalism/attachment_1tab_ref_information_gathering_methods/attachment_1tab_ref_information_gathering_methods.sqlite",
      "db_dump": "CREATE TABLE Article_Source(\n    article_source_id INTEGER PRIMARY KEY,\n    news_article_id INTEGER,\n    source_id INTEGER,\n    FOREIGN KEY (news_article_id) REFERENCES News_Article(article_id),\n    FOREIGN KEY (source_id) REFERENCES Source(source_id)\n);\nCREATE TABLE Information_Gathering_Method(\n    id INTEGER PRIMARY KEY,\n    method TEXT\n);\nCREATE TABLE News_Article(\n    article_id INTEGER PRIMARY KEY,\n    title TEXT,\n    content TEXT,\n    date DATE,\n    author_id INTEGER,\n    information_gathering_method_id INTEGER,\n    participant_type_id INTEGER,\n    FOREIGN KEY (author_id) REFERENCES Author(author_id),\n    FOREIGN KEY (information_gathering_method_id) REFERENCES Information_Gathering_Method(id),\n    FOREIGN KEY (participant_type_id) REFERENCES Participant_Type(id)\n);\nCREATE TABLE Participant_Type(\n    id INTEGER PRIMARY KEY,\n    type TEXT\n);\nCREATE TABLE Quote(\n    quote_id INTEGER PRIMARY KEY,\n    text TEXT,\n    start_time TIME,\n    end_time TIME,\n    news_article_id INTEGER,\n    speaker_id INTEGER,\n    FOREIGN KEY (news_article_id) REFERENCES News_Article(article_id),\n    FOREIGN KEY (speaker_id) REFERENCES Speaker(speaker_id)\n);\nCREATE TABLE Source(\n    source_id INTEGER PRIMARY KEY,\n    name TEXT,\n    url TEXT UNIQUE\n);\nCREATE TABLE Speaker(\n    speaker_id INTEGER PRIMARY KEY,\n    name TEXT,\n    role TEXT\n);\n\nINSERT INTO \"Article_Source\" (article_source_id,news_article_id,source_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4);\nINSERT INTO \"Information_Gathering_Method\" (id,method) VALUES (1,'Press Conference'),(2,'Interview');\nINSERT INTO \"News_Article\" (article_id,title,content,date,author_id,information_gathering_method_id,participant_type_id) VALUES (1,'First Press Conference','Details about the press conference...','2023-01-01',1,1,1),(2,'Second Press Conference','Details about the press conference...','2023-01-02',2,1,2),(3,'Interview with Politician','Details about the interview...','2023-01-03',3,2,1),(4,'Interview with Activist','Details about the activist interview...','2023-01-04',4,2,2);\nINSERT INTO \"Participant_Type\" (id,type) VALUES (1,'Politician'),(2,'Business Leader'),(3,'Activist');\nINSERT INTO \"Quote\" (quote_id,text,start_time,end_time,news_article_id,speaker_id) VALUES (1,'Quote from politician at first press conference.','00:00:05','00:00:15',1,1),(2,'Quote from business leader at second press conference.','00:00:06','00:00:17',2,2),(3,'Quote from politician during the interview.','00:00:08','00:00:19',3,3),(4,'Quote from activist during the interview.','00:00:09','00:00:21',4,4);\nINSERT INTO \"Source\" (source_id,name,url) VALUES (1,'Official Government Website','https://www.govsite.com/'),(2,'Company Blog','https://blog.company.com/'),(3,'News Channel','https://newschannel.tv/'),(4,'Alternative Media Outlet','https://alternativemedia.org/');\nINSERT INTO \"Speaker\" (speaker_id,name,role) VALUES (1,'John Doe','Politician'),(2,'Jane Smith','Business Leader'),(3,'Bob Johnson','Politician'),(4,'Emma Brown','Activist');\n",
      "question": "Show press conferences and interviews attended by politicians. Show them in one table.",
      "gold_queries": [
        "SELECT News_Article.Title \r\nFROM Information_Gathering_Method JOIN News_Article ON Information_Gathering_Method.id = News_Article.information_gathering_method_id JOIN Participant_Type ON News_Article.participant_type_id = Participant_Type.id\r\nWHERE (Information_Gathering_Method.method = \"Press Conference\" OR Information_Gathering_Method.method = \"Interview\") AND Participant_Type.type = \"Politician\"",
        "SELECT News_Article.Title \r\nFROM Information_Gathering_Method JOIN News_Article ON Information_Gathering_Method.id = News_Article.information_gathering_method_id JOIN Participant_Type ON News_Article.participant_type_id = Participant_Type.id\r\nWHERE Information_Gathering_Method.method = \"Press Conference\" OR Information_Gathering_Method.method = \"Interview\" AND Participant_Type.type = \"Politician\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Retrieve all news articles classified as \"Press Conference\" or \"Interview\" where \"participant_type_id\" is associated with \"Politician\".",
          "sql_queries": [
            "SELECT title, content, date\nFROM News_Article\nJOIN Information_Gathering_Method ON News_Article.information_gathering_method_id = Information_Gathering_Method.id\nJOIN Participant_Type ON News_Article.participant_type_id = Participant_Type.id\nWHERE Information_Gathering_Method.method IN ('Press Conference', 'Interview')\nAND Participant_Type.type = 'Politician'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Display a merged table containing information about \"Press Conference\" and \"Interview\" news articles solely focused on politicians.",
          "sql_queries": [
            "SELECT News_Article.title, News_Article.content, News_Article.date, Participant_Type.type, Information_Gathering_Method.method\nFROM News_Article\nJOIN Participant_Type ON News_Article.participant_type_id = Participant_Type.id\nJOIN Information_Gathering_Method ON News_Article.information_gathering_method_id = Information_Gathering_Method.id\nWHERE Participant_Type.type = 'Politician' AND Information_Gathering_Method.method IN ('Press Conference', 'Interview')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List news articles from \"Press Conference\" and \"Interview\" categories that involved politicians, combining them into a single table.",
          "sql_queries": [
            "SELECT na.title, na.content, na.date, igm.method, pt.type\nFROM News_Article na\nJOIN Information_Gathering_Method igm ON na.information_gathering_method_id = igm.id\nJOIN Participant_Type pt ON na.participant_type_id = pt.id\nWHERE igm.method IN ('Press Conference', 'Interview') AND pt.type = 'Politician'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Generate a single table showcasing \"Press Conference\" and \"Interview\" news articles featuring politicians.",
          "sql_queries": [
            "SELECT NA.title \nFROM News_Article NA \nJOIN Participant_Type PT ON NA.participant_type_id = PT.id \nJOIN Information_Gathering_Method IGM ON NA.information_gathering_method_id = IGM.id \nWHERE IGM.method IN ('Press Conference', 'Interview') AND PT.type = 'Politician'"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Present a unified table displaying details of both \"Press Conference\" and \"Interview\" news articles involving politicians.",
          "sql_queries": [
            "SELECT News_Article.title, News_Article.content, News_Article.date, Information_Gathering_Method.method, Participant_Type.type\nFROM News_Article\nJOIN Information_Gathering_Method ON News_Article.information_gathering_method_id = Information_Gathering_Method.id\nJOIN Participant_Type ON News_Article.participant_type_id = Participant_Type.id\nWHERE Information_Gathering_Method.method IN ('Press Conference', 'Interview')\nAND Participant_Type.type = 'Politician'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.2,
        "f1_score": 0.28571428571428575,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Journalism/attachment_1tab_ref_information_gathering_methods/attachment_1tab_ref_information_gathering_methods.sqlite",
      "db_dump": "CREATE TABLE Article_Source(\n    article_source_id INTEGER PRIMARY KEY,\n    news_article_id INTEGER,\n    source_id INTEGER,\n    FOREIGN KEY (news_article_id) REFERENCES News_Article(article_id),\n    FOREIGN KEY (source_id) REFERENCES Source(source_id)\n);\nCREATE TABLE Information_Gathering_Method(\n    id INTEGER PRIMARY KEY,\n    method TEXT\n);\nCREATE TABLE News_Article(\n    article_id INTEGER PRIMARY KEY,\n    title TEXT,\n    content TEXT,\n    date DATE,\n    author_id INTEGER,\n    information_gathering_method_id INTEGER,\n    participant_type_id INTEGER,\n    FOREIGN KEY (author_id) REFERENCES Author(author_id),\n    FOREIGN KEY (information_gathering_method_id) REFERENCES Information_Gathering_Method(id),\n    FOREIGN KEY (participant_type_id) REFERENCES Participant_Type(id)\n);\nCREATE TABLE Participant_Type(\n    id INTEGER PRIMARY KEY,\n    type TEXT\n);\nCREATE TABLE Quote(\n    quote_id INTEGER PRIMARY KEY,\n    text TEXT,\n    start_time TIME,\n    end_time TIME,\n    news_article_id INTEGER,\n    speaker_id INTEGER,\n    FOREIGN KEY (news_article_id) REFERENCES News_Article(article_id),\n    FOREIGN KEY (speaker_id) REFERENCES Speaker(speaker_id)\n);\nCREATE TABLE Source(\n    source_id INTEGER PRIMARY KEY,\n    name TEXT,\n    url TEXT UNIQUE\n);\nCREATE TABLE Speaker(\n    speaker_id INTEGER PRIMARY KEY,\n    name TEXT,\n    role TEXT\n);\n\nINSERT INTO \"Article_Source\" (article_source_id,news_article_id,source_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4);\nINSERT INTO \"Information_Gathering_Method\" (id,method) VALUES (1,'Press Conference'),(2,'Interview');\nINSERT INTO \"News_Article\" (article_id,title,content,date,author_id,information_gathering_method_id,participant_type_id) VALUES (1,'First Press Conference','Details about the press conference...','2023-01-01',1,1,1),(2,'Second Press Conference','Details about the press conference...','2023-01-02',2,1,2),(3,'Interview with Politician','Details about the interview...','2023-01-03',3,2,1),(4,'Interview with Activist','Details about the activist interview...','2023-01-04',4,2,2);\nINSERT INTO \"Participant_Type\" (id,type) VALUES (1,'Politician'),(2,'Business Leader'),(3,'Activist');\nINSERT INTO \"Quote\" (quote_id,text,start_time,end_time,news_article_id,speaker_id) VALUES (1,'Quote from politician at first press conference.','00:00:05','00:00:15',1,1),(2,'Quote from business leader at second press conference.','00:00:06','00:00:17',2,2),(3,'Quote from politician during the interview.','00:00:08','00:00:19',3,3),(4,'Quote from activist during the interview.','00:00:09','00:00:21',4,4);\nINSERT INTO \"Source\" (source_id,name,url) VALUES (1,'Official Government Website','https://www.govsite.com/'),(2,'Company Blog','https://blog.company.com/'),(3,'News Channel','https://newschannel.tv/'),(4,'Alternative Media Outlet','https://alternativemedia.org/');\nINSERT INTO \"Speaker\" (speaker_id,name,role) VALUES (1,'John Doe','Politician'),(2,'Jane Smith','Business Leader'),(3,'Bob Johnson','Politician'),(4,'Emma Brown','Activist');\n",
      "question": "List all press conferences and also list interviews attended by politicians. Show them in one table.",
      "gold_queries": [
        "SELECT News_Article.Title \r\nFROM Information_Gathering_Method JOIN News_Article ON Information_Gathering_Method.id = News_Article.information_gathering_method_id JOIN Participant_Type ON News_Article.participant_type_id = Participant_Type.id\r\nWHERE Information_Gathering_Method.method = \"Press Conference\" OR Information_Gathering_Method.method = \"Interview\" AND Participant_Type.type = \"Politician\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Consider news articles with 'Press Conference' information_gathering_method, and another set with 'Interview' method where participant_type_id is 'Politician', combining them into a single output table.",
          "sql_queries": [
            "SELECT title, content \nFROM News_Article \nWHERE information_gathering_method_id = 1 \nUNION \nSELECT title, content \nFROM News_Article \nWHERE information_gathering_method_id = 2 AND participant_type_id = 1"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve all articles from 'News_Article' table where information_gathering_method is 'Press Conference', and all articless where participant_type_id in 'Politician' AND information_gathering_method is 'Interview', displayed in a combined table.",
          "sql_queries": [
            "SELECT title, content, date, author_id, information_gathering_method_id, participant_type_id \nFROM News_Article \nWHERE information_gathering_method_id = (SELECT id FROM Information_Gathering_Method WHERE method = 'Press Conference')\nUNION\nSELECT title, content, date, author_id, information_gathering_method_id, participant_type_id \nFROM News_Article \nWHERE participant_type_id = (SELECT id FROM Participant_Type WHERE type = 'Politician') \nAND information_gathering_method_id = (SELECT id FROM Information_Gathering_Method WHERE method = 'Interview')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all news articles where the information gathering method is 'Press Conference' and also list news articles where participant_type_id is 'Politician' and information_gathering_method_id is 'Interview'. Show them in a single table.",
          "sql_queries": [
            "SELECT title FROM News_Article WHERE information_gathering_method_id = (SELECT id FROM Information_Gathering_Method WHERE method = 'Press Conference') UNION SELECT title FROM News_Article WHERE participant_type_id = 1 AND information_gathering_method_id = (SELECT id FROM Information_Gathering_Method WHERE method = 'Interview')"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Generate a unified table containing information about press conferences and interviews with politicians.",
          "sql_queries": [
            "SELECT na.title, na.content, na.date, igm.method, pt.type, q.text, q.start_time, q.end_time, s.name AS speaker_name, s.role\nFROM News_Article na\nJOIN Information_Gathering_Method igm ON na.information_gathering_method_id = igm.id\nJOIN Participant_Type pt ON na.participant_type_id = pt.id\nJOIN Quote q ON na.article_id = q.news_article_id\nJOIN Speaker s ON q.speaker_id = s.speaker_id\nWHERE igm.method IN ('Press Conference', 'Interview') AND pt.type = 'Politician'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Create a single table showing all press conference news articles along with news articles that feature interviews with politicians.",
          "sql_queries": [
            "SELECT title, content, date \nFROM News_Article \nWHERE information_gathering_method_id = 1 \nUNION \nSELECT title, content, date \nFROM News_Article \nWHERE information_gathering_method_id = 2 AND participant_type_id = 1"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Journalism/attachment_1tab_ref_journalism_awards/attachment_1tab_ref_journalism_awards.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    ArticleID INTEGER PRIMARY KEY,\n    Title TEXT,\n    Content TEXT,\n    DatePublished DATETIME,\n    AuthorID INTEGER,\n    PublisherID INTEGER,\n    FOREIGN KEY(AuthorID) REFERENCES Authors(AuthorID),\n    FOREIGN KEY(PublisherID) REFERENCES Publications(PublisherID));\nCREATE TABLE Authors(\n    AuthorID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT);\nCREATE TABLE Awards(\n    AwardID INTEGER PRIMARY KEY,\n    AwardType TEXT);\nCREATE TABLE Publications(\n    PublisherID INTEGER PRIMARY KEY,\n    Name TEXT,\n    YearOfEstablishment INT);\nCREATE TABLE \"Winners\"(\n    `id` INTEGER PRIMARY KEY AUTOINCREMENT,\n    WinningArticleID INTEGER,\n    Year INTEGER,\n    AwardID INTEGER,\n    FOREIGN KEY(WinningArticleID) REFERENCES Articles(ArticleID),\n    FOREIGN KEY(AwardID) REFERENCES Awards(AwardID));\n\nINSERT INTO \"Articles\" (ArticleID,Title,Content,DatePublished,AuthorID,PublisherID) VALUES (1,'The Rise of AI','AI has revolutionized many industries...','2023-06-15',1,1),(2,'Climate Change Crisis','Human activities have caused climate change...','2023-06-16',2,2),(3,'Technology Trends','The future of technology looks promising...','2023-06-17',3,3),(4,'Economic Outlook','Global economy faces challenges ahead...','2023-06-18',4,4),(5,'Political Updates','Latest political news from around the world...','2023-06-19',5,5);\nINSERT INTO \"Authors\" (AuthorID,FirstName,LastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Bob','Johnson'),(4,'Mary','Williams'),(5,'Tom','Brown');\nINSERT INTO \"Awards\" (AwardID,AwardType) VALUES (1,'Pulitzer Prize'),(2,'George Polk Award');\nINSERT INTO \"Publications\" (PublisherID,Name,YearOfEstablishment) VALUES (1,'New York Times',1851),(2,'Washington Post',1877),(3,'Los Angeles Times',1881),(4,'Chicago Tribune',1847),(5,'USA Today',1982);\nINSERT INTO \"Winners\" (id,WinningArticleID,Year,AwardID) VALUES (1,1,2010,1),(2,2,2011,1),(3,3,2010,2),(4,4,2012,2),(5,5,2013,2);\n",
      "question": "Provide a list of all the articles that won the Pulitzer Prize and also provide a list of articles that won the George Polk Awards in 2010. Show them in one table.",
      "gold_queries": [
        "SELECT Articles.Title \r\nFROM Awards JOIN Winners ON Awards.AwardID = Winners.AwardID JOIN Articles ON Articles.ArticleID = Winners.WinningArticleID\r\nWHERE Awards.AwardType = \"Pulitzer Prize\" OR Awards.AwardType = \"George Polk Award\" AND Winners.Year = 2010"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Find articles that received either the Pulitzer Prize or the George Polk Award in 2010",
          "sql_queries": [
            "SELECT A.Title \nFROM Articles A \nJOIN Winners W ON A.ArticleID = W.WinningArticleID \nJOIN Awards AW ON W.AwardID = AW.AwardID \nWHERE (AW.AwardType = 'Pulitzer Prize' OR AW.AwardType = 'George Polk Award') \nAND W.Year = 2010"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all articles and their associated awards, including those not won in 2010.",
          "sql_queries": [
            "SELECT A.Title, AW.AwardType \nFROM Articles A \nLEFT JOIN Winners W ON A.ArticleID = W.WinningArticleID \nLEFT JOIN Awards AW ON W.AwardID = AW.AwardID \nWHERE W.Year != 2010 OR W.Year IS NULL"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Give two tables: one for Pulitzer Prize winners and one for George Polk Award winners in 2010",
          "sql_queries": [
            "SELECT a.ArticleID, a.Title, aw.AwardType\nFROM Articles a\nJOIN Winners w ON a.ArticleID = w.WinningArticleID\nJOIN Awards aw ON w.AwardID = aw.AwardID\nWHERE aw.AwardType = 'George Polk Award' AND w.Year = 2010",
            "SELECT a.ArticleID, a.Title, aw.AwardType\nFROM Articles a\nJOIN Winners w ON a.ArticleID = w.WinningArticleID\nJOIN Awards aw ON w.AwardID = aw.AwardID\nWHERE aw.AwardType = 'Pulitzer Prize' AND w.Year = 2010"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Return all articles that have a corresponding entry in the 'Winners' table",
          "sql_queries": [
            "SELECT A.Title, A.Content FROM Articles A JOIN Winners W ON A.ArticleID = W.WinningArticleID"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all articles that won a Pulitzer Prize, separated by articles that won a George Polk Award in 2010",
          "sql_queries": [
            "SELECT a.Title \nFROM Articles a \nJOIN Winners w ON a.ArticleID = w.WinningArticleID \nJOIN Awards aw ON w.AwardID = aw.AwardID \nWHERE w.Year = 2010 AND aw.AwardType = 'Pulitzer Prize'",
            "SELECT a.Title \nFROM Articles a \nJOIN Winners w ON a.ArticleID = w.WinningArticleID \nJOIN Awards aw ON w.AwardID = aw.AwardID \nWHERE w.Year = 2010 AND aw.AwardType = 'George Polk Award'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 7,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 7,
        "num_unique_queries": 7,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Journalism/attachment_1tab_ref_journalism_awards/attachment_1tab_ref_journalism_awards.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    ArticleID INTEGER PRIMARY KEY,\n    Title TEXT,\n    Content TEXT,\n    DatePublished DATETIME,\n    AuthorID INTEGER,\n    PublisherID INTEGER,\n    FOREIGN KEY(AuthorID) REFERENCES Authors(AuthorID),\n    FOREIGN KEY(PublisherID) REFERENCES Publications(PublisherID));\nCREATE TABLE Authors(\n    AuthorID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT);\nCREATE TABLE Awards(\n    AwardID INTEGER PRIMARY KEY,\n    AwardType TEXT);\nCREATE TABLE Publications(\n    PublisherID INTEGER PRIMARY KEY,\n    Name TEXT,\n    YearOfEstablishment INT);\nCREATE TABLE \"Winners\"(\n    `id` INTEGER PRIMARY KEY AUTOINCREMENT,\n    WinningArticleID INTEGER,\n    Year INTEGER,\n    AwardID INTEGER,\n    FOREIGN KEY(WinningArticleID) REFERENCES Articles(ArticleID),\n    FOREIGN KEY(AwardID) REFERENCES Awards(AwardID));\n\nINSERT INTO \"Articles\" (ArticleID,Title,Content,DatePublished,AuthorID,PublisherID) VALUES (1,'The Rise of AI','AI has revolutionized many industries...','2023-06-15',1,1),(2,'Climate Change Crisis','Human activities have caused climate change...','2023-06-16',2,2),(3,'Technology Trends','The future of technology looks promising...','2023-06-17',3,3),(4,'Economic Outlook','Global economy faces challenges ahead...','2023-06-18',4,4),(5,'Political Updates','Latest political news from around the world...','2023-06-19',5,5);\nINSERT INTO \"Authors\" (AuthorID,FirstName,LastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Bob','Johnson'),(4,'Mary','Williams'),(5,'Tom','Brown');\nINSERT INTO \"Awards\" (AwardID,AwardType) VALUES (1,'Pulitzer Prize'),(2,'George Polk Award');\nINSERT INTO \"Publications\" (PublisherID,Name,YearOfEstablishment) VALUES (1,'New York Times',1851),(2,'Washington Post',1877),(3,'Los Angeles Times',1881),(4,'Chicago Tribune',1847),(5,'USA Today',1982);\nINSERT INTO \"Winners\" (id,WinningArticleID,Year,AwardID) VALUES (1,1,2010,1),(2,2,2011,1),(3,3,2010,2),(4,4,2012,2),(5,5,2013,2);\n",
      "question": "Show articles that won Pulitzer Prize or George Polk Award in 2010. Show them in one table.",
      "gold_queries": [
        "SELECT Articles.Title \r\nFROM Awards JOIN Winners ON Awards.AwardID = Winners.AwardID JOIN Articles ON Articles.ArticleID = Winners.WinningArticleID\r\nWHERE (Awards.AwardType = \"Pulitzer Prize\" OR Awards.AwardType = \"George Polk Award\") AND Winners.Year = 2010",
        "SELECT Articles.Title \r\nFROM Awards JOIN Winners ON Awards.AwardID = Winners.AwardID JOIN Articles ON Articles.ArticleID = Winners.WinningArticleID\r\nWHERE Awards.AwardType = \"Pulitzer Prize\" OR Awards.AwardType = \"George Polk Award\" AND Winners.Year = 2010"
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List every article associated with both Pulitzer Prize and George Polk Award wins in the year 2010, combining the information into a single table.",
          "sql_queries": [
            "SELECT a.ArticleID, a.Title \nFROM Articles a \nJOIN Winners w1 ON a.ArticleID = w1.WinningArticleID \nJOIN Awards aw1 ON w1.AwardID = aw1.AwardID \nJOIN Winners w2 ON a.ArticleID = w2.WinningArticleID \nJOIN Awards aw2 ON w2.AwardID = aw2.AwardID \nWHERE aw1.AwardType = 'Pulitzer Prize' \nAND aw2.AwardType = 'George Polk Award' \nAND w1.Year = 2010 \nAND w2.Year = 2010"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Present articles winning either the Pulitzer Prize or George Polk Award during the year 2010 in a single table format.",
          "sql_queries": [
            "SELECT a.Title, a.DatePublished, aw.AwardType\nFROM Articles a\nJOIN Winners w ON a.ArticleID = w.WinningArticleID\nJOIN Awards aw ON w.AwardID = aw.AwardID\nWHERE w.Year = 2010 AND aw.AwardType IN ('Pulitzer Prize', 'George Polk Award')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Generate a table containing articles that received either Pulitzer Prize or George Polk Award in 2010.",
          "sql_queries": [
            "SELECT A.Title, A.Content\nFROM Articles A\nJOIN Winners W ON A.ArticleID = W.WinningArticleID\nJOIN Awards AW ON W.AwardID = AW.AwardID\nWHERE AW.AwardType IN ('Pulitzer Prize', 'George Polk Award') AND W.Year = 2010"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Display all articles from the \"Winners\" table that correspond to Pulitzer Prize or George Polk Award wins in 2010, consolidated into one table.",
          "sql_queries": [
            "SELECT A.ArticleID, A.Title, A.Content, A.DatePublished, A.AuthorID, A.PublisherID, AW.AwardType, W.Year\nFROM Winners W\nJOIN Articles A ON W.WinningArticleID = A.ArticleID\nJOIN Awards AW ON W.AwardID = AW.AwardID\nWHERE AW.AwardType IN ('Pulitzer Prize', 'George Polk Award') AND W.Year = 2010"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve articles awarded the Pulitzer Prize or George Polk Award in 2010.",
          "sql_queries": [
            "SELECT A.Title \nFROM Articles A \nJOIN Winners W ON A.ArticleID = W.WinningArticleID \nJOIN Awards AW ON W.AwardID = AW.AwardID \nWHERE AW.AwardType IN ('Pulitzer Prize', 'George Polk Award') AND W.Year = 2010"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.2,
        "f1_score": 0.28571428571428575,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Journalism/attachment_1tab_ref_journalism_awards/attachment_1tab_ref_journalism_awards.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    ArticleID INTEGER PRIMARY KEY,\n    Title TEXT,\n    Content TEXT,\n    DatePublished DATETIME,\n    AuthorID INTEGER,\n    PublisherID INTEGER,\n    FOREIGN KEY(AuthorID) REFERENCES Authors(AuthorID),\n    FOREIGN KEY(PublisherID) REFERENCES Publications(PublisherID));\nCREATE TABLE Authors(\n    AuthorID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT);\nCREATE TABLE Awards(\n    AwardID INTEGER PRIMARY KEY,\n    AwardType TEXT);\nCREATE TABLE Publications(\n    PublisherID INTEGER PRIMARY KEY,\n    Name TEXT,\n    YearOfEstablishment INT);\nCREATE TABLE \"Winners\"(\n    `id` INTEGER PRIMARY KEY AUTOINCREMENT,\n    WinningArticleID INTEGER,\n    Year INTEGER,\n    AwardID INTEGER,\n    FOREIGN KEY(WinningArticleID) REFERENCES Articles(ArticleID),\n    FOREIGN KEY(AwardID) REFERENCES Awards(AwardID));\n\nINSERT INTO \"Articles\" (ArticleID,Title,Content,DatePublished,AuthorID,PublisherID) VALUES (1,'The Rise of AI','AI has revolutionized many industries...','2023-06-15',1,1),(2,'Climate Change Crisis','Human activities have caused climate change...','2023-06-16',2,2),(3,'Technology Trends','The future of technology looks promising...','2023-06-17',3,3),(4,'Economic Outlook','Global economy faces challenges ahead...','2023-06-18',4,4),(5,'Political Updates','Latest political news from around the world...','2023-06-19',5,5);\nINSERT INTO \"Authors\" (AuthorID,FirstName,LastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Bob','Johnson'),(4,'Mary','Williams'),(5,'Tom','Brown');\nINSERT INTO \"Awards\" (AwardID,AwardType) VALUES (1,'Pulitzer Prize'),(2,'George Polk Award');\nINSERT INTO \"Publications\" (PublisherID,Name,YearOfEstablishment) VALUES (1,'New York Times',1851),(2,'Washington Post',1877),(3,'Los Angeles Times',1881),(4,'Chicago Tribune',1847),(5,'USA Today',1982);\nINSERT INTO \"Winners\" (id,WinningArticleID,Year,AwardID) VALUES (1,1,2010,1),(2,2,2011,1),(3,3,2010,2),(4,4,2012,2),(5,5,2013,2);\n",
      "question": "Which articles won Pulitzer Prizes in 2010 and which articles won George Polk Awards in the same year? Show them in one table.",
      "gold_queries": [
        "SELECT Articles.Title \r\nFROM Awards JOIN Winners ON Awards.AwardID = Winners.AwardID JOIN Articles ON Articles.ArticleID = Winners.WinningArticleID\r\nWHERE (Awards.AwardType = \"Pulitzer Prize\" OR Awards.AwardType = \"George Polk Award\") AND Winners.Year = 2010"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List the Articles that won the Pulitzer Prize or George Polk Award in 2010",
          "sql_queries": [
            "SELECT A.Title \nFROM Articles A \nJOIN Winners W ON A.ArticleID = W.WinningArticleID \nJOIN Awards AW ON W.AwardID = AW.AwardID \nWHERE AW.AwardType IN ('Pulitzer Prize', 'George Polk Award') \nAND W.Year = 2010"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Present the Articles that won either the Pulitzer Prize or the George Polk Award in 2010 in a combined table.",
          "sql_queries": [
            "SELECT A.Title, A.Content, AW.AwardType\nFROM Articles A\nJOIN Winners W ON A.ArticleID = W.WinningArticleID\nJOIN Awards AW ON W.AwardID = AW.AwardID\nWHERE W.Year = 2010 AND AW.AwardType IN ('Pulitzer Prize', 'George Polk Award')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Return a table combining information about Articles that won either the Pulitzer Prize or the George Polk Award in 2010, including columns for the Award Type, Article Title, and Winning Year.",
          "sql_queries": [
            "SELECT A.AwardType, Ar.Title, W.Year\nFROM Winners W\nJOIN Awards A ON W.AwardID = A.AwardID\nJOIN Articles Ar ON W.WinningArticleID = Ar.ArticleID\nWHERE A.AwardType IN ('Pulitzer Prize', 'George Polk Award') AND W.Year = 2010"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Show the Articles that won a Pulitzer Prize in 2010 and also the Articles that won a George Polk Award in 2010 in a single table.",
          "sql_queries": [
            "SELECT a.ArticleID, a.Title\nFROM Articles a\nJOIN Winners w ON a.ArticleID = w.WinningArticleID\nJOIN Awards ad ON w.AwardID = ad.AwardID\nWHERE (ad.AwardType = 'Pulitzer Prize' AND w.Year = 2010)\n   OR (ad.AwardType = 'George Polk Award' AND w.Year = 2010)"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all Articles that won a Pulitzer Prize in 2010",
          "sql_queries": [
            "SELECT A.Title FROM Articles A JOIN Winners W ON A.ArticleID = W.WinningArticleID JOIN Awards AW ON W.AwardID = AW.AwardID WHERE AW.AwardType = 'Pulitzer Prize' AND W.Year = 2010"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all Articles that won a George Polk Award in 2010",
          "sql_queries": [
            "SELECT Articles.Title \nFROM Articles \nINNER JOIN Winners ON Articles.ArticleID = Winners.WinningArticleID \nINNER JOIN Awards ON Winners.AwardID = Awards.AwardID \nWHERE Awards.AwardType = 'George Polk Award' AND Winners.Year = 2010"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.16666666666666666,
        "f1_score": 0.2857142857142857,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Journalism/attachment_2tab_val_media_formats/attachment_2tab_val_media_formats.sqlite",
      "db_dump": "CREATE TABLE Articles (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    AuthorName TEXT,\n    PublicationDate DATE);\nCREATE TABLE AudioDocuments (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Description TEXT,\n    Length INTEGER ,\n    ReleaseDate DATE);\nCREATE TABLE Authors (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    BirthDate DATE);\nCREATE TABLE Newspapers (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Location TEXT);\nCREATE TABLE Podcasts (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Description TEXT,\n    Length INTEGER ,\n    ReleaseDate DATE);\n\nINSERT INTO \"Articles\" (id,Title,AuthorName,PublicationDate) VALUES (1,'News Article 1','John Doe','2023-01-01'),(2,'News Article 2','Jane Smith','2023-02-01'),(3,'News Article 3','Michael Johnson','2023-03-01'),(4,'News Article 4','Emily Brown','2023-04-01'),(5,'News Article 5','David Wilson','2023-05-01');\nINSERT INTO \"AudioDocuments\" (id,Title,Description,Length,ReleaseDate) VALUES (1,'First Documentary','The history of journalism in detail.',70,'2023-01-01'),(2,'Second Documentary','A documentary about modern media.',80,'2023-02-01'),(3,'Third Documentary','Unraveling mysteries one episode at a time.',90,'2023-03-01'),(4,'Fourth Documentary','The future of journalism explored.',60,'2023-04-01'),(5,'Fifth Documentary','Investigating important issues worldwide.',50,'2023-05-01');\nINSERT INTO \"Authors\" (id,FirstName,LastName,BirthDate) VALUES (1,'John','Doe','1980-01-01'),(2,'Jane','Smith','1985-02-01'),(3,'Michael','Johnson','1990-03-01'),(4,'Emily','Brown','1995-04-01'),(5,'David','Wilson','1998-05-01');\nINSERT INTO \"Newspapers\" (id,Name,Location) VALUES (1,'Daily Times','New York City'),(2,'Metro News','London'),(3,'Herald Sun','Australia'),(4,'Los Angeles Gazette','California'),(5,'Canada Post','Toronto');\nINSERT INTO \"Podcasts\" (id,Title,Description,Length,ReleaseDate) VALUES (1,'First Podcast','This is the first podcast.',20,'2023-01-01'),(2,'Second Podcast','Another interesting podcast.',30,'2023-02-01'),(3,'Third Podcast','A long podcast on a variety of topics.',60,'2023-03-01'),(4,'Fourth Podcast','A short but insightful podcast.',15,'2023-04-01'),(5,'Fifth Podcast','Exploring new ideas and concepts.',45,'2023-05-01');\n",
      "question": "Display podcasts and audio documents lasting 60 minutes. Show them in one table.",
      "gold_queries": [
        "SELECT Podcasts.title\r\nFROM Podcasts\r\nWHERE Podcasts.Length = 60\r\nUNION\r\nSELECT AudioDocuments.title\r\nFROM AudioDocuments\r\nWHERE AudioDocuments.Length = 60",
        "SELECT Podcasts.title\r\nFROM Podcasts\r\nUNION\r\nSELECT AudioDocuments.title\r\nFROM AudioDocuments\r\nWHERE AudioDocuments.Length = 60"
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Output a combined table containing podcasts and audio documents, sorted by Length and only showing entries with a Length of 60 minutes.",
          "sql_queries": [
            "SELECT Title, Description, Length, ReleaseDate FROM AudioDocuments WHERE Length = 60\nUNION ALL\nSELECT Title, Description, Length, ReleaseDate FROM Podcasts WHERE Length = 60\nORDER BY Length"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Display all podcasts and audio documents where the Length is 60 minutes.",
          "sql_queries": [
            "SELECT Title, Description, Length, ReleaseDate FROM AudioDocuments WHERE Length = 60\nUNION\nSELECT Title, Description, Length, ReleaseDate FROM Podcasts WHERE Length = 60"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Combine podcasts and audio documents into a single table, filtering for entries with a Length of 60 minutes.",
          "sql_queries": [
            "SELECT Title, Description, Length, ReleaseDate FROM Podcasts WHERE Length = 60 UNION SELECT Title, Description, Length, ReleaseDate FROM AudioDocuments WHERE Length = 60"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Display podcasts with a Length of 60 minutes and audio documents with a Length of 60 minutes.",
          "sql_queries": [
            "SELECT Title, Description, Length, ReleaseDate FROM Podcasts WHERE Length = 60\nUNION\nSELECT Title, Description, Length, ReleaseDate FROM AudioDocuments WHERE Length = 60"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Journalism/attachment_2tab_val_media_formats/attachment_2tab_val_media_formats.sqlite",
      "db_dump": "CREATE TABLE Articles (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    AuthorName TEXT,\n    PublicationDate DATE);\nCREATE TABLE AudioDocuments (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Description TEXT,\n    Length INTEGER ,\n    ReleaseDate DATE);\nCREATE TABLE Authors (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    BirthDate DATE);\nCREATE TABLE Newspapers (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Location TEXT);\nCREATE TABLE Podcasts (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Description TEXT,\n    Length INTEGER ,\n    ReleaseDate DATE);\n\nINSERT INTO \"Articles\" (id,Title,AuthorName,PublicationDate) VALUES (1,'News Article 1','John Doe','2023-01-01'),(2,'News Article 2','Jane Smith','2023-02-01'),(3,'News Article 3','Michael Johnson','2023-03-01'),(4,'News Article 4','Emily Brown','2023-04-01'),(5,'News Article 5','David Wilson','2023-05-01');\nINSERT INTO \"AudioDocuments\" (id,Title,Description,Length,ReleaseDate) VALUES (1,'First Documentary','The history of journalism in detail.',70,'2023-01-01'),(2,'Second Documentary','A documentary about modern media.',80,'2023-02-01'),(3,'Third Documentary','Unraveling mysteries one episode at a time.',90,'2023-03-01'),(4,'Fourth Documentary','The future of journalism explored.',60,'2023-04-01'),(5,'Fifth Documentary','Investigating important issues worldwide.',50,'2023-05-01');\nINSERT INTO \"Authors\" (id,FirstName,LastName,BirthDate) VALUES (1,'John','Doe','1980-01-01'),(2,'Jane','Smith','1985-02-01'),(3,'Michael','Johnson','1990-03-01'),(4,'Emily','Brown','1995-04-01'),(5,'David','Wilson','1998-05-01');\nINSERT INTO \"Newspapers\" (id,Name,Location) VALUES (1,'Daily Times','New York City'),(2,'Metro News','London'),(3,'Herald Sun','Australia'),(4,'Los Angeles Gazette','California'),(5,'Canada Post','Toronto');\nINSERT INTO \"Podcasts\" (id,Title,Description,Length,ReleaseDate) VALUES (1,'First Podcast','This is the first podcast.',20,'2023-01-01'),(2,'Second Podcast','Another interesting podcast.',30,'2023-02-01'),(3,'Third Podcast','A long podcast on a variety of topics.',60,'2023-03-01'),(4,'Fourth Podcast','A short but insightful podcast.',15,'2023-04-01'),(5,'Fifth Podcast','Exploring new ideas and concepts.',45,'2023-05-01');\n",
      "question": "List all podcasts and also display audio documents lasting 60 minutes. Show them in one table.",
      "gold_queries": [
        "SELECT Podcasts.title\r\nFROM Podcasts\r\nUNION\r\nSELECT AudioDocuments.title\r\nFROM AudioDocuments\r\nWHERE AudioDocuments.Length = 60"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Return two columns: one for podcasts and one for 60-minute audio documents.",
          "sql_queries": [
            "SELECT T1.Title AS Podcasts, T2.Title AS AudioDocuments\nFROM Podcasts T1\nJOIN AudioDocuments T2 ON T2.Length = 60"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Show podcasts and audio documents with a length of 60 minutes in a single table.",
          "sql_queries": [
            "SELECT Title, Description, Length, ReleaseDate FROM AudioDocuments WHERE Length = 60\nUNION\nSELECT Title, Description, Length, ReleaseDate FROM Podcasts WHERE Length = 60"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all podcasts and filter audio documents to include those with a length of 60 minutes in a combined table.",
          "sql_queries": [
            "SELECT Title, Description, Length, ReleaseDate FROM Podcasts UNION SELECT Title, Description, Length, ReleaseDate FROM AudioDocuments WHERE Length = 60"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Create a single table containing a list of podcasts and a separate list of audio documents with a duration of 60 minutes.",
          "sql_queries": [
            "SELECT Title FROM Podcasts UNION SELECT Title FROM AudioDocuments WHERE Length = 60"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Journalism/attachment_2tab_val_media_formats/attachment_2tab_val_media_formats.sqlite",
      "db_dump": "CREATE TABLE Articles (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    AuthorName TEXT,\n    PublicationDate DATE);\nCREATE TABLE AudioDocuments (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Description TEXT,\n    Length INTEGER ,\n    ReleaseDate DATE);\nCREATE TABLE Authors (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    BirthDate DATE);\nCREATE TABLE Newspapers (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Location TEXT);\nCREATE TABLE Podcasts (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Description TEXT,\n    Length INTEGER ,\n    ReleaseDate DATE);\n\nINSERT INTO \"Articles\" (id,Title,AuthorName,PublicationDate) VALUES (1,'News Article 1','John Doe','2023-01-01'),(2,'News Article 2','Jane Smith','2023-02-01'),(3,'News Article 3','Michael Johnson','2023-03-01'),(4,'News Article 4','Emily Brown','2023-04-01'),(5,'News Article 5','David Wilson','2023-05-01');\nINSERT INTO \"AudioDocuments\" (id,Title,Description,Length,ReleaseDate) VALUES (1,'First Documentary','The history of journalism in detail.',70,'2023-01-01'),(2,'Second Documentary','A documentary about modern media.',80,'2023-02-01'),(3,'Third Documentary','Unraveling mysteries one episode at a time.',90,'2023-03-01'),(4,'Fourth Documentary','The future of journalism explored.',60,'2023-04-01'),(5,'Fifth Documentary','Investigating important issues worldwide.',50,'2023-05-01');\nINSERT INTO \"Authors\" (id,FirstName,LastName,BirthDate) VALUES (1,'John','Doe','1980-01-01'),(2,'Jane','Smith','1985-02-01'),(3,'Michael','Johnson','1990-03-01'),(4,'Emily','Brown','1995-04-01'),(5,'David','Wilson','1998-05-01');\nINSERT INTO \"Newspapers\" (id,Name,Location) VALUES (1,'Daily Times','New York City'),(2,'Metro News','London'),(3,'Herald Sun','Australia'),(4,'Los Angeles Gazette','California'),(5,'Canada Post','Toronto');\nINSERT INTO \"Podcasts\" (id,Title,Description,Length,ReleaseDate) VALUES (1,'First Podcast','This is the first podcast.',20,'2023-01-01'),(2,'Second Podcast','Another interesting podcast.',30,'2023-02-01'),(3,'Third Podcast','A long podcast on a variety of topics.',60,'2023-03-01'),(4,'Fourth Podcast','A short but insightful podcast.',15,'2023-04-01'),(5,'Fifth Podcast','Exploring new ideas and concepts.',45,'2023-05-01');\n",
      "question": "What podcasts and audio documents are 60 minutes long? Show them in one table.",
      "gold_queries": [
        "SELECT Podcasts.title\r\nFROM Podcasts\r\nWHERE Podcasts.Length = 60\r\nUNION\r\nSELECT AudioDocuments.title\r\nFROM AudioDocuments\r\nWHERE AudioDocuments.Length = 60"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "SELECT Title FROM Podcasts WHERE Length = 60; SELECT Title FROM AudioDocuments WHERE Length = 60;",
          "sql_queries": [
            "SELECT Title FROM AudioDocuments WHERE Length = 60",
            "SELECT Title FROM Podcasts WHERE Length = 60"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Select * FROM Podcasts WHERE Length = 60 UNION ALL Select * FROM AudioDocuments WHERE Length = 60;",
          "sql_queries": [
            "SELECT * FROM Podcasts WHERE Length = 60 UNION ALL SELECT * FROM AudioDocuments WHERE Length = 60"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_1tab_val_medical_professionals/attachment_1tab_val_medical_professionals.sqlite",
      "db_dump": "CREATE TABLE Departments(\n    DepartmentID INTEGER PRIMARY KEY,\n    DepartmentName TEXT,\n    HospitalID INTEGER,\n    FOREIGN KEY (HospitalID) REFERENCES Hospitals(HospitalID));\nCREATE TABLE Employees(\n    EmployeeID INTEGER PRIMARY KEY,\n    Email TEXT,\n    PhoneNumber TEXT,\n    MedicalProfession TEXT, --This field will contain Nurse, Physicians Assistants and others.\n    Patient TEXT --This field will contain patient names like Anne Buche and others.\n, FullName TEXT);\nCREATE TABLE Hospitals(\n    HospitalID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT);\nCREATE TABLE JobPostings(\n    JobPostID INTEGER PRIMARY KEY,\n    PositionTitle TEXT,\n    Description TEXT,\n    Requirements TEXT,\n    StartDate DATE,\n    EndDate DATE,\n    Salary DECIMAL(10,2),\n    Vacancy INT ,\n    DepartmentID INTEGER,\n    FOREIGN KEY (DepartmentID) REFERENCES Departments(DepartmentID));\n\nINSERT INTO \"Departments\" (DepartmentID,DepartmentName,HospitalID) VALUES (1,'Cardiac Surgery',1),(2,'Neurosurgery',2),(3,'Orthopedics',3),(4,'Pediatrics',4),(5,'Emergency Medicine',5);\nINSERT INTO \"Employees\" (EmployeeID,Email,PhoneNumber,MedicalProfession,Patient,FullName) VALUES (1,'jane.doe@example.com','555-1234','Nurse','Anne Buche','Jane Doe'),(2,'mike.smith@example.com','555-5678','Nurse','Alice Johnson','Mike Smith'),(3,'linda.williams@example.com','555-9012','Physician''s Assistant','Anne Buche','Linda Williams'),(4,'tom.brown@example.com','555-1234','Physician''s Assistant','David Lee','Tom Brown'),(5,'karen.green@example.com','555-9876','Doctor',NULL,'Karen Green');\nINSERT INTO \"Hospitals\" (HospitalID,Name,Location) VALUES (1,'St. Mary''s Hospital','New York'),(2,'Mount Sinai Hospital','Chicago'),(3,'Rush University Medical Center','Chicago'),(4,'Yale New Haven Health','Connecticut'),(5,'John Hopkins Medicine','Baltimore');\nINSERT INTO \"JobPostings\" (JobPostID,PositionTitle,Description,Requirements,StartDate,EndDate,Salary,Vacancy,DepartmentID) VALUES (1,'Cardiovascular Nurse','Experience in cardiac care.','BLS certification required.','2023-01-01','2023-12-31',65000,3,1),(2,'Neurology Nurse','Neurosurgical experience necessary.','ACLS certification required.','2023-02-01','2023-12-31',60000,2,2),(3,'Orthopaedic PA','Assisting with orthopaedic surgeries.','Certified PAs only.','2023-03-01','2023-12-31',65000,1,3),(4,'Pediatric Nurse','Pediatric nursing experience required.','CPR certified.','2023-04-01','2023-12-31',60000,4,4),(5,'EM Resident','ER experience essential.','MD degree required.','2023-05-01','2023-12-31',55000,5,5);\n",
      "question": "Provide me with all nurses and also with all physician assistants who work with Anne Buche. Show them in one table.",
      "gold_queries": [
        "SELECT Employees.FullName\r\nFROM Employees\r\nWHERE Employees.MedicalProfession = \"Nurse\" OR Employees.MedicalProfession = \"Physician's Assistant\" AND Employees.Patient = \"Anne Buche\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Select e.FullName, e.MedicalProfession",
          "sql_queries": [
            "SELECT e.FullName, e.MedicalProfession FROM Employees e"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Where e.Patient = 'Anne Buche';",
          "sql_queries": [
            "SELECT Email, PhoneNumber, MedicalProfession, FullName\nFROM Employees e\nWHERE e.Patient = 'Anne Buche'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve all nurses and physician assistants whose 'Patient' field in the 'Employees' table is 'Anne Buche' and present the information in a consolidated table including their full name and medical profession.",
          "sql_queries": [
            "SELECT FullName, MedicalProfession FROM Employees WHERE Patient = 'Anne Buche' AND (MedicalProfession = 'Nurse' OR MedicalProfession = 'Physician''s Assistant')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "From Employees e",
          "sql_queries": [
            "SELECT Email, PhoneNumber FROM Employees WHERE Patient = 'Anne Buche'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_1tab_val_medical_professionals/attachment_1tab_val_medical_professionals.sqlite",
      "db_dump": "CREATE TABLE Departments(\n    DepartmentID INTEGER PRIMARY KEY,\n    DepartmentName TEXT,\n    HospitalID INTEGER,\n    FOREIGN KEY (HospitalID) REFERENCES Hospitals(HospitalID));\nCREATE TABLE Employees(\n    EmployeeID INTEGER PRIMARY KEY,\n    Email TEXT,\n    PhoneNumber TEXT,\n    MedicalProfession TEXT, --This field will contain Nurse, Physicians Assistants and others.\n    Patient TEXT --This field will contain patient names like Anne Buche and others.\n, FullName TEXT);\nCREATE TABLE Hospitals(\n    HospitalID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT);\nCREATE TABLE JobPostings(\n    JobPostID INTEGER PRIMARY KEY,\n    PositionTitle TEXT,\n    Description TEXT,\n    Requirements TEXT,\n    StartDate DATE,\n    EndDate DATE,\n    Salary DECIMAL(10,2),\n    Vacancy INT ,\n    DepartmentID INTEGER,\n    FOREIGN KEY (DepartmentID) REFERENCES Departments(DepartmentID));\n\nINSERT INTO \"Departments\" (DepartmentID,DepartmentName,HospitalID) VALUES (1,'Cardiac Surgery',1),(2,'Neurosurgery',2),(3,'Orthopedics',3),(4,'Pediatrics',4),(5,'Emergency Medicine',5);\nINSERT INTO \"Employees\" (EmployeeID,Email,PhoneNumber,MedicalProfession,Patient,FullName) VALUES (1,'jane.doe@example.com','555-1234','Nurse','Anne Buche','Jane Doe'),(2,'mike.smith@example.com','555-5678','Nurse','Alice Johnson','Mike Smith'),(3,'linda.williams@example.com','555-9012','Physician''s Assistant','Anne Buche','Linda Williams'),(4,'tom.brown@example.com','555-1234','Physician''s Assistant','David Lee','Tom Brown'),(5,'karen.green@example.com','555-9876','Doctor',NULL,'Karen Green');\nINSERT INTO \"Hospitals\" (HospitalID,Name,Location) VALUES (1,'St. Mary''s Hospital','New York'),(2,'Mount Sinai Hospital','Chicago'),(3,'Rush University Medical Center','Chicago'),(4,'Yale New Haven Health','Connecticut'),(5,'John Hopkins Medicine','Baltimore');\nINSERT INTO \"JobPostings\" (JobPostID,PositionTitle,Description,Requirements,StartDate,EndDate,Salary,Vacancy,DepartmentID) VALUES (1,'Cardiovascular Nurse','Experience in cardiac care.','BLS certification required.','2023-01-01','2023-12-31',65000,3,1),(2,'Neurology Nurse','Neurosurgical experience necessary.','ACLS certification required.','2023-02-01','2023-12-31',60000,2,2),(3,'Orthopaedic PA','Assisting with orthopaedic surgeries.','Certified PAs only.','2023-03-01','2023-12-31',65000,1,3),(4,'Pediatric Nurse','Pediatric nursing experience required.','CPR certified.','2023-04-01','2023-12-31',60000,4,4),(5,'EM Resident','ER experience essential.','MD degree required.','2023-05-01','2023-12-31',55000,5,5);\n",
      "question": "Provide me with all nurses and physician assistants for Anne Buche. Show them in one table.",
      "gold_queries": [
        "SELECT Employees.FullName\r\nFROM Employees\r\nWHERE (Employees.MedicalProfession = \"Nurse\" OR Employees.MedicalProfession = \"Physician's Assistant\") AND Employees.Patient = \"Anne Buche\"",
        "SELECT Employees.FullName\r\nFROM Employees\r\nWHERE Employees.MedicalProfession = \"Nurse\" OR Employees.MedicalProfession = \"Physician's Assistant\" AND Employees.Patient = \"Anne Buche\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Retrieve all Employees where Patient is 'Anne Buche' and MedicalProfession is either 'Nurse' or 'Physician''s Assistant'.",
          "sql_queries": [
            "SELECT FullName, Email, PhoneNumber, MedicalProfession, Patient \nFROM Employees \nWHERE Patient = 'Anne Buche' AND MedicalProfession IN ('Nurse', 'Physician''s Assistant')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Group Employees by Patient 'Anne Buche' and filter by MedicalProfession 'Nurse' and MedicalProfession 'Physician''s Assistant'",
          "sql_queries": [
            "SELECT Patient, FullName \nFROM Employees \nWHERE Patient = 'Anne Buche' \n  AND MedicalProfession IN ('Nurse', 'Physician''s Assistant') \nGROUP BY Patient, FullName"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Find all individuals in the Employees table with 'Anne Buche' listed as their Patient and whose MedicalProfession is either 'Nurse' or 'Physician''s Assistant'.",
          "sql_queries": [
            "SELECT FullName FROM Employees WHERE Patient = 'Anne Buche' AND MedicalProfession IN ('Nurse', 'Physician''s Assistant')"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Construct a single table containing the details of all nurses and physician assistants associated with the patient 'Anne Buche'.",
          "sql_queries": [
            "SELECT MedicalProfession, FullName, Email, PhoneNumber FROM Employees WHERE Patient = 'Anne Buche' AND MedicalProfession IN ('Nurse', 'Physician''s Assistant')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.25,
        "f1_score": 0.3333333333333333,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_1tab_val_medical_professionals/attachment_1tab_val_medical_professionals.sqlite",
      "db_dump": "CREATE TABLE Departments(\n    DepartmentID INTEGER PRIMARY KEY,\n    DepartmentName TEXT,\n    HospitalID INTEGER,\n    FOREIGN KEY (HospitalID) REFERENCES Hospitals(HospitalID));\nCREATE TABLE Employees(\n    EmployeeID INTEGER PRIMARY KEY,\n    Email TEXT,\n    PhoneNumber TEXT,\n    MedicalProfession TEXT, --This field will contain Nurse, Physicians Assistants and others.\n    Patient TEXT --This field will contain patient names like Anne Buche and others.\n, FullName TEXT);\nCREATE TABLE Hospitals(\n    HospitalID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT);\nCREATE TABLE JobPostings(\n    JobPostID INTEGER PRIMARY KEY,\n    PositionTitle TEXT,\n    Description TEXT,\n    Requirements TEXT,\n    StartDate DATE,\n    EndDate DATE,\n    Salary DECIMAL(10,2),\n    Vacancy INT ,\n    DepartmentID INTEGER,\n    FOREIGN KEY (DepartmentID) REFERENCES Departments(DepartmentID));\n\nINSERT INTO \"Departments\" (DepartmentID,DepartmentName,HospitalID) VALUES (1,'Cardiac Surgery',1),(2,'Neurosurgery',2),(3,'Orthopedics',3),(4,'Pediatrics',4),(5,'Emergency Medicine',5);\nINSERT INTO \"Employees\" (EmployeeID,Email,PhoneNumber,MedicalProfession,Patient,FullName) VALUES (1,'jane.doe@example.com','555-1234','Nurse','Anne Buche','Jane Doe'),(2,'mike.smith@example.com','555-5678','Nurse','Alice Johnson','Mike Smith'),(3,'linda.williams@example.com','555-9012','Physician''s Assistant','Anne Buche','Linda Williams'),(4,'tom.brown@example.com','555-1234','Physician''s Assistant','David Lee','Tom Brown'),(5,'karen.green@example.com','555-9876','Doctor',NULL,'Karen Green');\nINSERT INTO \"Hospitals\" (HospitalID,Name,Location) VALUES (1,'St. Mary''s Hospital','New York'),(2,'Mount Sinai Hospital','Chicago'),(3,'Rush University Medical Center','Chicago'),(4,'Yale New Haven Health','Connecticut'),(5,'John Hopkins Medicine','Baltimore');\nINSERT INTO \"JobPostings\" (JobPostID,PositionTitle,Description,Requirements,StartDate,EndDate,Salary,Vacancy,DepartmentID) VALUES (1,'Cardiovascular Nurse','Experience in cardiac care.','BLS certification required.','2023-01-01','2023-12-31',65000,3,1),(2,'Neurology Nurse','Neurosurgical experience necessary.','ACLS certification required.','2023-02-01','2023-12-31',60000,2,2),(3,'Orthopaedic PA','Assisting with orthopaedic surgeries.','Certified PAs only.','2023-03-01','2023-12-31',65000,1,3),(4,'Pediatric Nurse','Pediatric nursing experience required.','CPR certified.','2023-04-01','2023-12-31',60000,4,4),(5,'EM Resident','ER experience essential.','MD degree required.','2023-05-01','2023-12-31',55000,5,5);\n",
      "question": "Provide me with both nurses for Anne Buche and her physician assistants. Show them in one table.",
      "gold_queries": [
        "SELECT Employees.FullName\r\nFROM Employees\r\nWHERE (Employees.MedicalProfession = \"Nurse\" OR Employees.MedicalProfession = \"Physician's Assistant\") AND Employees.Patient = \"Anne Buche\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Retrieve the EmployeeID, Email, PhoneNumber, MedicalProfession, and FullName for all Employees where Patient is 'Anne Buche' and MedicalProfession is 'Nurse' or 'Physician's Assistant'.",
          "sql_queries": [
            "SELECT EmployeeID, Email, PhoneNumber, MedicalProfession, FullName FROM Employees WHERE Patient = 'Anne Buche' AND MedicalProfession IN ('Nurse', 'Physician''s Assistant')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Show all employees associated with Anne Buche, separated by Nurse and Physician Assistant roles, in a single table with columns for EmployeeID, Email, PhoneNumber, MedicalProfession, and FullName.",
          "sql_queries": [
            "SELECT EmployeeID, Email, PhoneNumber, MedicalProfession, FullName\nFROM Employees\nWHERE Patient = 'Anne Buche'\nORDER BY MedicalProfession"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List the EmployeeID, Email, PhoneNumber, MedicalProfession, and FullName of all nurses and physician assistants who treat Anne Buche, combining the results in a single table.",
          "sql_queries": [
            "SELECT EmployeeID, Email, PhoneNumber, MedicalProfession, FullName \nFROM Employees \nWHERE Patient = 'Anne Buche' AND MedicalProfession IN ('Nurse', 'Physician''s Assistant')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_1tab_val_roles/attachment_1tab_val_roles.sqlite",
      "db_dump": "CREATE TABLE Companies (ID INTEGER PRIMARY KEY AUTOINCREMENT, Name TEXT);\nCREATE TABLE Education_Requirements (ID INTEGER PRIMARY KEY AUTOINCREMENT, Degree_Required TEXT, Years_Experience INTEGER);\nCREATE TABLE Locations (ID INTEGER PRIMARY KEY AUTOINCREMENT, City TEXT, State TEXT, Country TEXT);\n\nINSERT INTO \"Companies\" (ID,Name) VALUES (1,'ABC Corporation'),(2,'XYZ Industries'),(3,'MNO Consultancy'),(4,'PQR Bank'),(5,'LST Technology');\nINSERT INTO \"Education_Requirements\" (ID,Degree_Required,Years_Experience) VALUES (1,'Bachelor''s degree',2),(2,'Master''s degree',3),(3,'PhD',5),(4,'Bachelor''s degree',1),(5,'Associate degree',0);\nINSERT INTO \"JobPostings\" (ID,CompanyID,LocationID,Title,Description,Roles,Data) VALUES (1,1,1,'Economist - Demographics Analyst','Analyze demographic trends for economic forecasting.','Economist','Demographics'),(2,2,2,'Economist - Market Researcher','Conduct market research and analyze economic indicators.','Economist','Market'),(3,3,3,'Statistician - Demographics Expert','Apply statistical methods to study demographic patterns.','Statistician','Demographics'),(4,4,4,'Statistician - Financial Analyst','Use statistics to assess financial risks and opportunities.','Statistician','Financial'),(5,5,5,'Software Engineer - Full Stack Developer','Design and develop full stack software solutions.','Engineer',NULL);\nINSERT INTO \"Locations\" (ID,City,State,Country) VALUES (1,'New York','NY','USA'),(2,'Chicago','IL','USA'),(3,'London','England','UK'),(4,'Paris','Ile-de-France','France'),(5,'Tokyo','Tokyo','Japan');\n",
      "question": "What jobs are available for economists and what jobs are available for statisticians working with demographic data? Show them in one table.",
      "gold_queries": [
        "SELECT JobPostings.title \r\nFROM JobPostings\r\nWHERE JobPostings.Roles = \"Economist\" OR JobPostings.Roles = \"Statistician\" AND JobPostings.Data = \"Demographics\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Generate a table displaying unique job titles for Economists and Statisticians working with demographic data, extracted from the \"Roles\" and \"Data\" columns.",
          "sql_queries": [
            "SELECT DISTINCT Title FROM JobPostings WHERE Roles IN ('Economist', 'Statistician') AND Data = 'Demographics'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Find all instances where either \"Economist\" or \"Statistician\" is in the \"Roles\" column, and \"Demographics\" is in the \"Data\" column, returning a consolidated list of job titles.",
          "sql_queries": [
            "SELECT Title FROM JobPostings WHERE Roles IN ('Economist', 'Statistician') AND Data = 'Demographics'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve a list of job postings with \"Economist\" or \"Statistician\" in the \"Roles\" column and \"Demographics\" in the \"Data\" column.",
          "sql_queries": [
            "SELECT * FROM JobPostings WHERE Roles IN ('Economist', 'Statistician') AND Data = 'Demographics'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all distinct job titles where the \"Roles\" column contains \"Economist\" or \"Statistician\" and the \"Data\" column contains \"Demographics\".",
          "sql_queries": [
            "SELECT DISTINCT Title FROM JobPostings WHERE Roles IN ('Economist', 'Statistician') AND Data = 'Demographics'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Query for job postings with \"Economist\" or \"Statistician\" in \"Roles\" and \"Demographics\" in \"Data\". Group the results by \"JobTitle\".",
          "sql_queries": [
            "SELECT Title AS JobTitle\nFROM JobPostings\nWHERE Roles IN ('Economist', 'Statistician') AND Data = 'Demographics'\nGROUP BY JobTitle"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_1tab_val_roles/attachment_1tab_val_roles.sqlite",
      "db_dump": "CREATE TABLE Companies (ID INTEGER PRIMARY KEY AUTOINCREMENT, Name TEXT);\nCREATE TABLE Education_Requirements (ID INTEGER PRIMARY KEY AUTOINCREMENT, Degree_Required TEXT, Years_Experience INTEGER);\nCREATE TABLE Locations (ID INTEGER PRIMARY KEY AUTOINCREMENT, City TEXT, State TEXT, Country TEXT);\n\nINSERT INTO \"Companies\" (ID,Name) VALUES (1,'ABC Corporation'),(2,'XYZ Industries'),(3,'MNO Consultancy'),(4,'PQR Bank'),(5,'LST Technology');\nINSERT INTO \"Education_Requirements\" (ID,Degree_Required,Years_Experience) VALUES (1,'Bachelor''s degree',2),(2,'Master''s degree',3),(3,'PhD',5),(4,'Bachelor''s degree',1),(5,'Associate degree',0);\nINSERT INTO \"JobPostings\" (ID,CompanyID,LocationID,Title,Description,Roles,Data) VALUES (1,1,1,'Economist - Demographics Analyst','Analyze demographic trends for economic forecasting.','Economist','Demographics'),(2,2,2,'Economist - Market Researcher','Conduct market research and analyze economic indicators.','Economist','Market'),(3,3,3,'Statistician - Demographics Expert','Apply statistical methods to study demographic patterns.','Statistician','Demographics'),(4,4,4,'Statistician - Financial Analyst','Use statistics to assess financial risks and opportunities.','Statistician','Financial'),(5,5,5,'Software Engineer - Full Stack Developer','Design and develop full stack software solutions.','Engineer',NULL);\nINSERT INTO \"Locations\" (ID,City,State,Country) VALUES (1,'New York','NY','USA'),(2,'Chicago','IL','USA'),(3,'London','England','UK'),(4,'Paris','Ile-de-France','France'),(5,'Tokyo','Tokyo','Japan');\n",
      "question": "What jobs are available for economists and statisticians working with demographic data? Show them in one table.",
      "gold_queries": [
        "SELECT JobPostings.title \r\nFROM JobPostings\r\nWHERE (JobPostings.Roles = \"Economist\" OR JobPostings.Roles = \"Statistician\") AND JobPostings.Data = \"Demographics\"",
        "SELECT JobPostings.title \r\nFROM JobPostings\r\nWHERE JobPostings.Roles = \"Economist\" OR JobPostings.Roles = \"Statistician\" AND JobPostings.Data = \"Demographics\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Present a consolidated table encompassing all job postings relevant to economists and statisticians working with demographic data, regardless of specific role classifications.",
          "sql_queries": [
            "SELECT JP.ID, C.Name AS CompanyName, L.City, L.State, L.Country, JP.Title, JP.Description\nFROM JobPostings JP\nJOIN Companies C ON JP.CompanyID = C.ID\nJOIN Locations L ON JP.LocationID = L.ID\nWHERE (JP.Roles = 'Economist' OR JP.Roles = 'Statistician') AND JP.Data = 'Demographics'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Find all job postings for economists and statisticians that focus on demographics, regardless of specific keywords in the Description.",
          "sql_queries": [
            "SELECT Title, Description, Roles, Data\nFROM JobPostings\nWHERE Roles IN ('Economist', 'Statistician') AND Data = 'Demographics'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all job postings for economists and statisticians, but filter them based on the Data field containing \"Demographics\".",
          "sql_queries": [
            "SELECT Title, Description, Roles, Data \nFROM JobPostings \nWHERE (Roles = 'Economist' OR Roles = 'Statistician') AND Data = 'Demographics'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve all job postings where the Title contains \"Economist\" or \"Statistician\" and the Roles contains \"Demographics\".",
          "sql_queries": [
            "SELECT Title, Description, Roles, Data FROM JobPostings WHERE (Title LIKE '%Economist%' OR Title LIKE '%Statistician%') AND Roles = 'Demographics'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Show a table with all job titles for economists and statisticians that involve demographic data, extracted from the Description field.",
          "sql_queries": [
            "SELECT Title \nFROM JobPostings \nWHERE (Roles = 'Economist' OR Roles = 'Statistician') \nAND Description LIKE '%demographic%'"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.2,
        "f1_score": 0.28571428571428575,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_1tab_val_roles/attachment_1tab_val_roles.sqlite",
      "db_dump": "CREATE TABLE Companies (ID INTEGER PRIMARY KEY AUTOINCREMENT, Name TEXT);\nCREATE TABLE Education_Requirements (ID INTEGER PRIMARY KEY AUTOINCREMENT, Degree_Required TEXT, Years_Experience INTEGER);\nCREATE TABLE Locations (ID INTEGER PRIMARY KEY AUTOINCREMENT, City TEXT, State TEXT, Country TEXT);\n\nINSERT INTO \"Companies\" (ID,Name) VALUES (1,'ABC Corporation'),(2,'XYZ Industries'),(3,'MNO Consultancy'),(4,'PQR Bank'),(5,'LST Technology');\nINSERT INTO \"Education_Requirements\" (ID,Degree_Required,Years_Experience) VALUES (1,'Bachelor''s degree',2),(2,'Master''s degree',3),(3,'PhD',5),(4,'Bachelor''s degree',1),(5,'Associate degree',0);\nINSERT INTO \"JobPostings\" (ID,CompanyID,LocationID,Title,Description,Roles,Data) VALUES (1,1,1,'Economist - Demographics Analyst','Analyze demographic trends for economic forecasting.','Economist','Demographics'),(2,2,2,'Economist - Market Researcher','Conduct market research and analyze economic indicators.','Economist','Market'),(3,3,3,'Statistician - Demographics Expert','Apply statistical methods to study demographic patterns.','Statistician','Demographics'),(4,4,4,'Statistician - Financial Analyst','Use statistics to assess financial risks and opportunities.','Statistician','Financial'),(5,5,5,'Software Engineer - Full Stack Developer','Design and develop full stack software solutions.','Engineer',NULL);\nINSERT INTO \"Locations\" (ID,City,State,Country) VALUES (1,'New York','NY','USA'),(2,'Chicago','IL','USA'),(3,'London','England','UK'),(4,'Paris','Ile-de-France','France'),(5,'Tokyo','Tokyo','Japan');\n",
      "question": "Show job posts of economists who work with demographic data and job posts of statisticians who work with the same data type. Show them in one table.",
      "gold_queries": [
        "SELECT JobPostings.title \r\nFROM JobPostings\r\nWHERE (JobPostings.Roles = \"Economist\" OR JobPostings.Roles = \"Statistician\") AND JobPostings.Data = \"Demographics\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Retrieve all job postings where the \"Data\" column contains \"Demographics\" and the Title mentions either \"Economist\" or \"Statistician\". Display the results in a unified table.",
          "sql_queries": [
            "SELECT * FROM JobPostings WHERE Data = 'Demographics' AND (Title LIKE '%Economist%' OR Title LIKE '%Statistician%')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve job postings where the Title contains \"Economist\" and the Description contains \"Demographics\" AND retrieve job postings where the Title contains \"Statistician\" and the Description contains \"Demographics\". Present the results in a single table.",
          "sql_queries": [
            "SELECT * \nFROM JobPostings \nWHERE (Title LIKE '%Economist%' AND Description LIKE '%Demographics%') \nOR (Title LIKE '%Statistician%' AND Description LIKE '%Demographics%')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve job postings with a corresponding Role of \"Economist\" and \"Data\" value of \"Demographics\", and job postings with a corresponding Role of \"Statistician\" and \"Data\" value of \"Demographics\". Combine the results into a single table.",
          "sql_queries": [
            "SELECT * FROM JobPostings WHERE Role = 'Economist' AND Data = 'Demographics' UNION SELECT * FROM JobPostings WHERE Role = 'Statistician' AND Data = 'Demographics'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT * FROM JobPostings WHERE Role = 'Economist' AND Data = 'Demographics' UNION SELECT * FROM JobPostings WHERE Role = 'Statistician' AND Data = 'Demographics'",
                "original_exception": "no such column: Role"
              }
            ],
            "all_found": false
          }
        },
        {
          "interpretation": "Find all job postings for economists and statisticians that involve demographic data analysis, regardless of whether the terms \"Demographics\" appear in the Description or other columns. Output the combined results in a single table.",
          "sql_queries": [
            "SELECT * FROM JobPostings WHERE (Roles = 'Economist' AND Description LIKE '%demographics%')\nUNION\nSELECT * FROM JobPostings WHERE (Roles = 'Statistician' AND Description LIKE '%demographics%')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [
          {
            "query": "SELECT * FROM JobPostings WHERE Role = 'Economist' AND Data = 'Demographics' UNION SELECT * FROM JobPostings WHERE Role = 'Statistician' AND Data = 'Demographics'",
            "original_exception": "no such column: Role"
          }
        ],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_1tab_ref_specialist_doctors/attachment_1tab_ref_specialist_doctors.sqlite",
      "db_dump": "CREATE TABLE \"Doctors\"(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    specialist_doctor TEXT,\n    hospital_id INTEGER REFERENCES Hospitals(id));\nCREATE TABLE Hospitals(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT UNIQUE);\nCREATE TABLE Jobs(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    description TEXT,\n    location TEXT,\n    salary INTEGER,\n    hospital_id INTEGER REFERENCES Hospitals(id));\n\nINSERT INTO \"Doctors\" (id,name,specialist_doctor,hospital_id) VALUES (1,'Dr. Jane Smith','Radiologist',1),(2,'Dr. John Brown','Radiologist',2),(3,'Ms. Mary Johnson','Ultrasound Technician',1),(4,'Mr. Mike Davis','Ultrasound Technician',2),(5,'Dr. Sarah Wilson','Cardiologist',3),(6,'Dr. James White','Gastroenterologist',4),(7,'Dr. Jennifer Green','Neurologist',1),(8,'Dr. David Black','Orthopedic Surgeon',2);\nINSERT INTO \"Hospitals\" (id,name) VALUES (1,'Western Medical Center'),(2,'Eastern General Hospital'),(3,'Northern Healthcare'),(4,'Central Care Clinic'),(5,'City Urgent Care');\nINSERT INTO \"Jobs\" (id,title,description,location,salary,hospital_id) VALUES (1,'CT Scan Technician','Perform CT scans on patients.','New York City',90000,1),(2,'MRI Tech','Operate MRI machines.','New York City',85000,1),(3,'ER Physician','Treat emergency cases.','New York City',200000,1),(4,'Anesthesia Nurse','Monitor patient during surgeries.','New York City',100000,1),(5,'Pharmacist','Dispense medications.','New York City',95000,1),(6,'Family Medicine Doctor','Diagnose and treat illnesses.','Chicago',160000,2),(7,'Dietitian','Create diet plans for patients.','Chicago',70000,2);\n",
      "question": "Show the staff from Wester Medical Centre who work as radiologists or ultrasound technicians. Show them in one table.",
      "gold_queries": [
        "SELECT Doctors.name \r\nFROM Doctors JOIN Hospitals ON Doctors.hospital_id = Hospitals.id\r\nWHERE (Doctors.specialist_doctor = \"Radiologist\" OR Doctors.specialist_doctor = \"Ultrasound Technician\") AND Hospitals.name = \"Western Medical Center\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List all doctor and nurse employees of 'Western Medical Center' whose specialties include radiology or ultrasound.",
          "sql_queries": [
            "SELECT D.name \nFROM Doctors D \nJOIN Hospitals H ON D.hospital_id = H.id \nWHERE H.name = 'Western Medical Center' \nAND (D.specialist_doctor = 'Radiologist' OR D.specialist_doctor = 'Ultrasound Technician')"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Display a list of individuals employed at 'Western Medical Center' whose job title is either 'Radiologist' or 'Ultrasound Technician'.",
          "sql_queries": [
            "SELECT Doctors.name \nFROM Doctors \nJOIN Hospitals ON Doctors.hospital_id = Hospitals.id \nWHERE Hospitals.name = 'Western Medical Center' \nAND Doctors.specialist_doctor IN ('Radiologist', 'Ultrasound Technician')"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Show all doctors with titles 'Radiologist' or 'Ultrasound Technician' who are affiliated with 'Western Medical Center'.",
          "sql_queries": [
            "SELECT Doctors.name \nFROM Doctors \nJOIN Hospitals ON Doctors.hospital_id = Hospitals.id \nWHERE Doctors.specialist_doctor IN ('Radiologist', 'Ultrasound Technician') \nAND Hospitals.name = 'Western Medical Center'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Retrieve names and IDs of all staff members at 'Western Medical Center' who specialize in radiology or ultrasound technology.",
          "sql_queries": [
            "SELECT D.name, D.id \nFROM Doctors D \nJOIN Hospitals H ON D.hospital_id = H.id \nWHERE H.name = 'Western Medical Center' AND (D.specialist_doctor = 'Radiologist' OR D.specialist_doctor = 'Ultrasound Technician')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.75,
        "f1_score": 0.8571428571428571,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_1tab_ref_specialist_doctors/attachment_1tab_ref_specialist_doctors.sqlite",
      "db_dump": "CREATE TABLE \"Doctors\"(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    specialist_doctor TEXT,\n    hospital_id INTEGER REFERENCES Hospitals(id));\nCREATE TABLE Hospitals(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT UNIQUE);\nCREATE TABLE Jobs(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    description TEXT,\n    location TEXT,\n    salary INTEGER,\n    hospital_id INTEGER REFERENCES Hospitals(id));\n\nINSERT INTO \"Doctors\" (id,name,specialist_doctor,hospital_id) VALUES (1,'Dr. Jane Smith','Radiologist',1),(2,'Dr. John Brown','Radiologist',2),(3,'Ms. Mary Johnson','Ultrasound Technician',1),(4,'Mr. Mike Davis','Ultrasound Technician',2),(5,'Dr. Sarah Wilson','Cardiologist',3),(6,'Dr. James White','Gastroenterologist',4),(7,'Dr. Jennifer Green','Neurologist',1),(8,'Dr. David Black','Orthopedic Surgeon',2);\nINSERT INTO \"Hospitals\" (id,name) VALUES (1,'Western Medical Center'),(2,'Eastern General Hospital'),(3,'Northern Healthcare'),(4,'Central Care Clinic'),(5,'City Urgent Care');\nINSERT INTO \"Jobs\" (id,title,description,location,salary,hospital_id) VALUES (1,'CT Scan Technician','Perform CT scans on patients.','New York City',90000,1),(2,'MRI Tech','Operate MRI machines.','New York City',85000,1),(3,'ER Physician','Treat emergency cases.','New York City',200000,1),(4,'Anesthesia Nurse','Monitor patient during surgeries.','New York City',100000,1),(5,'Pharmacist','Dispense medications.','New York City',95000,1),(6,'Family Medicine Doctor','Diagnose and treat illnesses.','Chicago',160000,2),(7,'Dietitian','Create diet plans for patients.','Chicago',70000,2);\n",
      "question": "Give me all radiologists across all hospitals and just the ultrasound technicians who work at Western Medical Centre. Show them in one table.",
      "gold_queries": [
        "SELECT Doctors.name \r\nFROM Doctors JOIN Hospitals ON Doctors.hospital_id = Hospitals.id\r\nWHERE Doctors.specialist_doctor = \"Radiologist\" OR Doctors.specialist_doctor = \"Ultrasound Technician\" AND Hospitals.name = \"Western Medical Center\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Create a combined table showing radiologists from every hospital and a subset of ultrasound technicians specified by the hospital 'Western Medical Center'.",
          "sql_queries": [
            "SELECT name, specialist_doctor, hospital_id \nFROM Doctors \nWHERE specialist_doctor = 'Radiologist' \nUNION \nSELECT name, specialist_doctor, hospital_id \nFROM Doctors \nWHERE specialist_doctor = 'Ultrasound Technician' AND hospital_id = (SELECT id FROM Hospitals WHERE name = 'Western Medical Center')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Display an aggregated table containing two columns: one for radiologists from all hospitals and the other for ultrasound technicians exclusive to 'Western Medical Center'.",
          "sql_queries": [
            "SELECT \n    COUNT(CASE WHEN specialist_doctor = 'Radiologist' THEN 1 END) AS Total_Radiologists,\n    COUNT(CASE WHEN specialist_doctor = 'Ultrasound Technician' AND hospital_id = (SELECT id FROM Hospitals WHERE name = 'Western Medical Center') THEN 1 END) AS Ultrasound_Technicians_Western_Medical_Center\nFROM Doctors"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all radiologists in the 'Hospitals' table, and list all ultrasound technicians who work at 'Western Medical Center' in a single table.",
          "sql_queries": [
            "SELECT T1.name FROM Doctors AS T1 JOIN Hospitals AS T2 ON T1.hospital_id = T2.id WHERE T1.specialist_doctor = 'Radiologist' UNION SELECT T1.name FROM Doctors AS T1 JOIN Hospitals AS T2 ON T1.hospital_id = T2.id WHERE T1.specialist_doctor = 'Ultrasound Technician' AND T2.name = 'Western Medical Center'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_1tab_ref_specialist_doctors/attachment_1tab_ref_specialist_doctors.sqlite",
      "db_dump": "CREATE TABLE \"Doctors\"(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    specialist_doctor TEXT,\n    hospital_id INTEGER REFERENCES Hospitals(id));\nCREATE TABLE Hospitals(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT UNIQUE);\nCREATE TABLE Jobs(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    description TEXT,\n    location TEXT,\n    salary INTEGER,\n    hospital_id INTEGER REFERENCES Hospitals(id));\n\nINSERT INTO \"Doctors\" (id,name,specialist_doctor,hospital_id) VALUES (1,'Dr. Jane Smith','Radiologist',1),(2,'Dr. John Brown','Radiologist',2),(3,'Ms. Mary Johnson','Ultrasound Technician',1),(4,'Mr. Mike Davis','Ultrasound Technician',2),(5,'Dr. Sarah Wilson','Cardiologist',3),(6,'Dr. James White','Gastroenterologist',4),(7,'Dr. Jennifer Green','Neurologist',1),(8,'Dr. David Black','Orthopedic Surgeon',2);\nINSERT INTO \"Hospitals\" (id,name) VALUES (1,'Western Medical Center'),(2,'Eastern General Hospital'),(3,'Northern Healthcare'),(4,'Central Care Clinic'),(5,'City Urgent Care');\nINSERT INTO \"Jobs\" (id,title,description,location,salary,hospital_id) VALUES (1,'CT Scan Technician','Perform CT scans on patients.','New York City',90000,1),(2,'MRI Tech','Operate MRI machines.','New York City',85000,1),(3,'ER Physician','Treat emergency cases.','New York City',200000,1),(4,'Anesthesia Nurse','Monitor patient during surgeries.','New York City',100000,1),(5,'Pharmacist','Dispense medications.','New York City',95000,1),(6,'Family Medicine Doctor','Diagnose and treat illnesses.','Chicago',160000,2),(7,'Dietitian','Create diet plans for patients.','Chicago',70000,2);\n",
      "question": "Show all radiologists and ultrasound technicians at Western Medical Centre. Show them in one table.",
      "gold_queries": [
        "SELECT Doctors.name \r\nFROM Doctors JOIN Hospitals ON Doctors.hospital_id = Hospitals.id\r\nWHERE (Doctors.specialist_doctor = \"Radiologist\" OR Doctors.specialist_doctor = \"Ultrasound Technician\") AND Hospitals.name = \"Western Medical Center\"",
        "SELECT Doctors.name \r\nFROM Doctors JOIN Hospitals ON Doctors.hospital_id = Hospitals.id\r\nWHERE Doctors.specialist_doctor = \"Radiologist\" OR Doctors.specialist_doctor = \"Ultrasound Technician\" AND Hospitals.name = \"Western Medical Center\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Display a single table containing all doctors with \"Radiologist\" or \"Ultrasound Technician\" as their specialist_doctor, who work at the hospital with an id of 1.",
          "sql_queries": [
            "SELECT name, specialist_doctor FROM Doctors WHERE specialist_doctor IN ('Radiologist', 'Ultrasound Technician') AND hospital_id = 1"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Create one consolidated table displaying both radiologists and ultrasound technicians from the Doctors table, specifically those affiliated with the hospital with the name \"Western Medical Center\".",
          "sql_queries": [
            "SELECT d.name, d.specialist_doctor\nFROM Doctors d\nJOIN Hospitals h ON d.hospital_id = h.id\nWHERE h.name = 'Western Medical Center' AND (d.specialist_doctor = 'Radiologist' OR d.specialist_doctor = 'Ultrasound Technician')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Return a table that combines information from the Doctors table for radiologists and ultrasound technicians, filtering by hospital_id = 1.",
          "sql_queries": [
            "SELECT name, specialist_doctor, hospital_id FROM Doctors WHERE specialist_doctor IN ('Radiologist', 'Ultrasound Technician') AND hospital_id = 1"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all individuals identified as \"Radiologist\" or \"Ultrasound Technician\" from the Doctors table, but only those associated with the hospital named \"Western Medical Center\".",
          "sql_queries": [
            "SELECT name FROM Doctors WHERE specialist_doctor IN ('Radiologist', 'Ultrasound Technician') AND hospital_id = (SELECT id FROM Hospitals WHERE name = 'Western Medical Center')"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.25,
        "f1_score": 0.3333333333333333,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_1tab_val_creative_industry_professions/attachment_1tab_val_creative_industry_professions.sqlite",
      "db_dump": "CREATE TABLE Company(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    address TEXT,\n    website TEXT UNIQUE);\nCREATE TABLE Department(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT UNIQUE);\nCREATE TABLE Employee(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    employee_name TEXT,\n    hire_date DATE);\nCREATE TABLE Position(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    creative_industry_profession TEXT ,\n    office TEXT,\n    salary NUMERIC(10,2));\n\nINSERT INTO \"Company\" (id,name,address,website) VALUES (1,'Company A','Address A','www.companya.com'),(2,'Company B','Address B','www.companyb.com'),(3,'Company C','Address C','www.companys.com'),(4,'Company D','Address D','www.companyd.com'),(5,'Company E','Address E','www.companye.com');\nINSERT INTO \"Department\" (id,company_id,name) VALUES (1,1,'Department A'),(2,1,'Department B'),(3,2,'Department X'),(4,3,'Department Y'),(5,4,'Department Z');\nINSERT INTO \"Employee\" (id,position_id,employee_name,hire_date) VALUES (1,1,'John Doe','2021-01-01'),(2,2,'Jane Smith','2021-02-01'),(3,3,'Alice Johnson','2021-03-01'),(4,4,'Bob Brown','2021-04-01'),(5,5,'Charlie Green','2021-05-01');\nINSERT INTO \"Position\" (id,department_id,title,creative_industry_profession,office,salary) VALUES (1,1,'Position A','Graphic Designer','2/7 London Street',60000),(2,1,'Position B','Software Engineer','2/9 London Street',80000),(3,2,'Position C','Graphic Designer','3/4 New York Avenue',55000),(4,3,'Position D','Data Analyst','3/2 San Francisco Way',70000),(5,4,'Position E','Web Developer','2/7 London Street',75000);\n",
      "question": "List all graphic designer positions and also list web developer positions at 2/7 London Street offices. Show them in one table.",
      "gold_queries": [
        "SELECT Position.title \r\nFROM Position\r\nWHERE Position.creative_industry_profession = \"Graphic Designer\" OR Position.creative_industry_profession = \"Web Developer\" AND Position.office = \"2/7 London Street\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List the rows from the 'Position' table where 'creative_industry_profession' is 'Graphic Designer'. Also list the rows from the 'Position' table where 'title' is 'Web Developer' and 'office' is '2/7 London Street'. Combine these lists into one table.",
          "sql_queries": [
            "SELECT * FROM Position WHERE creative_industry_profession = 'Graphic Designer'\nUNION\nSELECT * FROM Position WHERE title = 'Web Developer' AND office = '2/7 London Street'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all records from 'Position' that match either 'Graphic Designer' for creative industry profession or 'Web Developer' and '2/7 London Street' for office.",
          "sql_queries": [
            "SELECT * FROM Position WHERE creative_industry_profession = 'Graphic Designer' OR (title = 'Web Developer' AND office = '2/7 London Street')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all positions with 'Graphic Designer' as the title and all positions with 'Web Developer' as the title. Show them in a single table.",
          "sql_queries": [
            "SELECT * FROM Position WHERE title = 'Graphic Designer' OR title = 'Web Developer'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_1tab_val_creative_industry_professions/attachment_1tab_val_creative_industry_professions.sqlite",
      "db_dump": "CREATE TABLE Company(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    address TEXT,\n    website TEXT UNIQUE);\nCREATE TABLE Department(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT UNIQUE);\nCREATE TABLE Employee(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    employee_name TEXT,\n    hire_date DATE);\nCREATE TABLE Position(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    creative_industry_profession TEXT ,\n    office TEXT,\n    salary NUMERIC(10,2));\n\nINSERT INTO \"Company\" (id,name,address,website) VALUES (1,'Company A','Address A','www.companya.com'),(2,'Company B','Address B','www.companyb.com'),(3,'Company C','Address C','www.companys.com'),(4,'Company D','Address D','www.companyd.com'),(5,'Company E','Address E','www.companye.com');\nINSERT INTO \"Department\" (id,company_id,name) VALUES (1,1,'Department A'),(2,1,'Department B'),(3,2,'Department X'),(4,3,'Department Y'),(5,4,'Department Z');\nINSERT INTO \"Employee\" (id,position_id,employee_name,hire_date) VALUES (1,1,'John Doe','2021-01-01'),(2,2,'Jane Smith','2021-02-01'),(3,3,'Alice Johnson','2021-03-01'),(4,4,'Bob Brown','2021-04-01'),(5,5,'Charlie Green','2021-05-01');\nINSERT INTO \"Position\" (id,department_id,title,creative_industry_profession,office,salary) VALUES (1,1,'Position A','Graphic Designer','2/7 London Street',60000),(2,1,'Position B','Software Engineer','2/9 London Street',80000),(3,2,'Position C','Graphic Designer','3/4 New York Avenue',55000),(4,3,'Position D','Data Analyst','3/2 San Francisco Way',70000),(5,4,'Position E','Web Developer','2/7 London Street',75000);\n",
      "question": "Show graphic designer positions and web developer positions at 2/7 London Street offices. Show them in one table.",
      "gold_queries": [
        "SELECT Position.title \r\nFROM Position\r\nWHERE (Position.creative_industry_profession = \"Graphic Designer\" OR Position.creative_industry_profession = \"Web Developer\") AND Position.office = \"2/7 London Street\"",
        "SELECT Position.title \r\nFROM Position\r\nWHERE Position.creative_industry_profession = \"Graphic Designer\" OR Position.creative_industry_profession = \"Web Developer\" AND Position.office = \"2/7 London Street\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Display a single table containing all positions with titles 'Graphic Designer' and 'Web Developer' that are located at the office '2/7 London Street'.",
          "sql_queries": [
            "SELECT title, creative_industry_profession, office, salary \nFROM Position \nWHERE title IN ('Graphic Designer', 'Web Developer') \nAND office = '2/7 London Street'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve positions with titles 'Graphic Designer' and 'Web Developer',  grouped by office location and filtered to include only those offices located at '2/7 London Street'.",
          "sql_queries": [
            "SELECT office, title\nFROM Position\nWHERE title IN ('Graphic Designer', 'Web Developer') AND office = '2/7 London Street'\nGROUP BY office, title"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve all positions with title 'Graphic Designer' and 'Web Developer' where office is '2/7 London Street'.",
          "sql_queries": [
            "SELECT * FROM Position WHERE title IN ('Graphic Designer', 'Web Developer') AND office = '2/7 London Street'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_1tab_val_creative_industry_professions/attachment_1tab_val_creative_industry_professions.sqlite",
      "db_dump": "CREATE TABLE Company(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    address TEXT,\n    website TEXT UNIQUE);\nCREATE TABLE Department(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT UNIQUE);\nCREATE TABLE Employee(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    employee_name TEXT,\n    hire_date DATE);\nCREATE TABLE Position(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    creative_industry_profession TEXT ,\n    office TEXT,\n    salary NUMERIC(10,2));\n\nINSERT INTO \"Company\" (id,name,address,website) VALUES (1,'Company A','Address A','www.companya.com'),(2,'Company B','Address B','www.companyb.com'),(3,'Company C','Address C','www.companys.com'),(4,'Company D','Address D','www.companyd.com'),(5,'Company E','Address E','www.companye.com');\nINSERT INTO \"Department\" (id,company_id,name) VALUES (1,1,'Department A'),(2,1,'Department B'),(3,2,'Department X'),(4,3,'Department Y'),(5,4,'Department Z');\nINSERT INTO \"Employee\" (id,position_id,employee_name,hire_date) VALUES (1,1,'John Doe','2021-01-01'),(2,2,'Jane Smith','2021-02-01'),(3,3,'Alice Johnson','2021-03-01'),(4,4,'Bob Brown','2021-04-01'),(5,5,'Charlie Green','2021-05-01');\nINSERT INTO \"Position\" (id,department_id,title,creative_industry_profession,office,salary) VALUES (1,1,'Position A','Graphic Designer','2/7 London Street',60000),(2,1,'Position B','Software Engineer','2/9 London Street',80000),(3,2,'Position C','Graphic Designer','3/4 New York Avenue',55000),(4,3,'Position D','Data Analyst','3/2 San Francisco Way',70000),(5,4,'Position E','Web Developer','2/7 London Street',75000);\n",
      "question": "What graphic designer positions are at 2/7 London Street offices and what web developer positions are at the same location? Show them in one table.",
      "gold_queries": [
        "SELECT Position.title \r\nFROM Position\r\nWHERE (Position.creative_industry_profession = \"Graphic Designer\" OR Position.creative_industry_profession = \"Web Developer\") AND Position.office = \"2/7 London Street\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Find the graphic designer positions located at \"2/7 London Street\" and, in a separate column, list the web developer positions also located at \"2/7 London Street.\"",
          "sql_queries": [
            "SELECT \n    (SELECT title FROM Position WHERE creative_industry_profession = 'Graphic Designer' AND office = '2/7 London Street') AS Graphic_Designer,\n    (SELECT title FROM Position WHERE creative_industry_profession = 'Web Developer' AND office = '2/7 London Street') AS Web_Developer"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Retrieve all positions with the title \"Graphic Designer\" and office \"2/7 London Street,\" and all positions with the title \"Web Developer\" and office \"2/7 London Street,\" combining the results into a single table.",
          "sql_queries": [
            "SELECT title, creative_industry_profession, office, salary \nFROM Position \nWHERE (title = 'Graphic Designer' AND office = '2/7 London Street') \n   OR (title = 'Web Developer' AND office = '2/7 London Street')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_2tab_val_information_management_jobs/attachment_2tab_val_information_management_jobs.sqlite",
      "db_dump": "CREATE TABLE Applicants(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    email TEXT,\n    phone TEXT);\nCREATE TABLE ApplicationsSubmitted(\n    application_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    resume TEXT,\n    cover_letter TEXT);\nCREATE TABLE Archivists(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    age INT,\n    experience INT,\n    location TEXT);\nCREATE TABLE Employers(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    company_name TEXT,\n    address TEXT,\n    contact_info TEXT);\nCREATE TABLE JobsPosted(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    position TEXT,\n    description TEXT,\n    start_date DATE,\n    end_date DATE);\nCREATE TABLE Librarians(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    age INT,\n    experience INT,\n    location TEXT);\n\nINSERT INTO \"Applicants\" (id,first_name,last_name,email,phone) VALUES (1,'Alexander','Anderson','alex@email.com','+1234567890'),(2,'Laura','Garcia','laura@email.com','+0987654321');\nINSERT INTO \"ApplicationsSubmitted\" (application_id,applicant_id,job_posting_id,resume,cover_letter) VALUES (1,1,1,'resume1.pdf','cover_letter1.txt'),(2,2,2,'resume2.pdf','cover_letter2.txt');\nINSERT INTO \"Archivists\" (id,name,age,experience,location) VALUES (1,'Michael Johnson',28,7,'University''s Main Library'),(2,'Emily Davis',33,6,'British Museum');\nINSERT INTO \"Employers\" (id,company_name,address,contact_info) VALUES (1,'ABC Company','123 Street, City','+1234567890'),(2,'XYZ Company','456 Avenue, Town','+0987654321');\nINSERT INTO \"JobsPosted\" (id,employer_id,position,description,start_date,end_date) VALUES (1,1,'Librarian','Responsible for managing library resources.','2022-01-01','2023-12-31'),(2,2,'Curator','Manage museum exhibits and collections.','2022-07-01','2023-06-30');\nINSERT INTO \"Librarians\" (id,name,age,experience,location) VALUES (1,'John Doe',30,2,'University''s Main Library'),(2,'Jane Smith',31,5,'New York Public Library');\n",
      "question": "Which librarians are located at University's main library and which archivists are located at the same place? Show them in one table.",
      "gold_queries": [
        "SELECT Librarians.name\r\nFROM Librarians\r\nWHERE Librarians.location = \"University's Main Library\"\r\nUNION\r\nSELECT Archivists.name\r\nFROM Archivists\r\nWHERE Archivists.location = \"University's Main Library\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Identify librarians working at the University's Main Library and identify the matching archivists working at the same location, displaying the information in a combined table.",
          "sql_queries": [
            "SELECT Librarians.name AS librarian_name, Librarians.age AS librarian_age, Librarians.experience AS librarian_experience, Archivists.name AS archivist_name, Archivists.age AS archivist_age, Archivists.experience AS archivist_experience\nFROM Librarians\nJOIN Archivists ON Librarians.location = Archivists.location\nWHERE Librarians.location = 'University''s Main Library'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Find all librarians at the University's Main Library and all archivists at the University's Main Library, presenting the results in a single table.",
          "sql_queries": [
            "SELECT name, age, experience, location FROM Librarians WHERE location = 'University''s Main Library' UNION SELECT name, age, experience, location FROM Archivists WHERE location = 'University''s Main Library'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List librarians situated at the University's Main Library and their corresponding archivist colleagues who share the same location in a unified table.",
          "sql_queries": [
            "SELECT Librarians.name AS librarian_name, Archivists.name AS archivist_name\nFROM Librarians\nJOIN Archivists ON Librarians.location = Archivists.location\nWHERE Librarians.location = 'University''s Main Library'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_2tab_val_information_management_jobs/attachment_2tab_val_information_management_jobs.sqlite",
      "db_dump": "CREATE TABLE Applicants(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    email TEXT,\n    phone TEXT);\nCREATE TABLE ApplicationsSubmitted(\n    application_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    resume TEXT,\n    cover_letter TEXT);\nCREATE TABLE Archivists(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    age INT,\n    experience INT,\n    location TEXT);\nCREATE TABLE Employers(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    company_name TEXT,\n    address TEXT,\n    contact_info TEXT);\nCREATE TABLE JobsPosted(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    position TEXT,\n    description TEXT,\n    start_date DATE,\n    end_date DATE);\nCREATE TABLE Librarians(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    age INT,\n    experience INT,\n    location TEXT);\n\nINSERT INTO \"Applicants\" (id,first_name,last_name,email,phone) VALUES (1,'Alexander','Anderson','alex@email.com','+1234567890'),(2,'Laura','Garcia','laura@email.com','+0987654321');\nINSERT INTO \"ApplicationsSubmitted\" (application_id,applicant_id,job_posting_id,resume,cover_letter) VALUES (1,1,1,'resume1.pdf','cover_letter1.txt'),(2,2,2,'resume2.pdf','cover_letter2.txt');\nINSERT INTO \"Archivists\" (id,name,age,experience,location) VALUES (1,'Michael Johnson',28,7,'University''s Main Library'),(2,'Emily Davis',33,6,'British Museum');\nINSERT INTO \"Employers\" (id,company_name,address,contact_info) VALUES (1,'ABC Company','123 Street, City','+1234567890'),(2,'XYZ Company','456 Avenue, Town','+0987654321');\nINSERT INTO \"JobsPosted\" (id,employer_id,position,description,start_date,end_date) VALUES (1,1,'Librarian','Responsible for managing library resources.','2022-01-01','2023-12-31'),(2,2,'Curator','Manage museum exhibits and collections.','2022-07-01','2023-06-30');\nINSERT INTO \"Librarians\" (id,name,age,experience,location) VALUES (1,'John Doe',30,2,'University''s Main Library'),(2,'Jane Smith',31,5,'New York Public Library');\n",
      "question": "Provide a list of all librarians and also provide a list of archivists that are located at University's main library. Show them in one table.",
      "gold_queries": [
        "SELECT Librarians.name\r\nFROM Librarians\r\nUNION\r\nSELECT Archivists.name\r\nFROM Archivists\r\nWHERE Archivists.location = \"University's Main Library\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List all librarians and archivists at University's Main Library in a single table.",
          "sql_queries": [
            "SELECT 'Librarian' AS profession, name, age, experience, location FROM Librarians WHERE location = 'University''s Main Library'\nUNION\nSELECT 'Archivist' AS profession, name, age, experience, location FROM Archivists WHERE location = 'University''s Main Library'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Show two separate tables: one with all librarians and another with archivists at University's Main Library.",
          "sql_queries": [
            "SELECT name, age, experience, location FROM Archivists WHERE location = 'University''s Main Library'",
            "SELECT name, age, experience, location FROM Librarians WHERE location = 'University''s Main Library'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all librarians and only the archivists located at University's Main Library.",
          "sql_queries": [
            "SELECT name FROM Librarians UNION SELECT name FROM Archivists WHERE location = 'University''s Main Library'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_2tab_val_information_management_jobs/attachment_2tab_val_information_management_jobs.sqlite",
      "db_dump": "CREATE TABLE Applicants(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    email TEXT,\n    phone TEXT);\nCREATE TABLE ApplicationsSubmitted(\n    application_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    resume TEXT,\n    cover_letter TEXT);\nCREATE TABLE Archivists(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    age INT,\n    experience INT,\n    location TEXT);\nCREATE TABLE Employers(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    company_name TEXT,\n    address TEXT,\n    contact_info TEXT);\nCREATE TABLE JobsPosted(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    position TEXT,\n    description TEXT,\n    start_date DATE,\n    end_date DATE);\nCREATE TABLE Librarians(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    age INT,\n    experience INT,\n    location TEXT);\n\nINSERT INTO \"Applicants\" (id,first_name,last_name,email,phone) VALUES (1,'Alexander','Anderson','alex@email.com','+1234567890'),(2,'Laura','Garcia','laura@email.com','+0987654321');\nINSERT INTO \"ApplicationsSubmitted\" (application_id,applicant_id,job_posting_id,resume,cover_letter) VALUES (1,1,1,'resume1.pdf','cover_letter1.txt'),(2,2,2,'resume2.pdf','cover_letter2.txt');\nINSERT INTO \"Archivists\" (id,name,age,experience,location) VALUES (1,'Michael Johnson',28,7,'University''s Main Library'),(2,'Emily Davis',33,6,'British Museum');\nINSERT INTO \"Employers\" (id,company_name,address,contact_info) VALUES (1,'ABC Company','123 Street, City','+1234567890'),(2,'XYZ Company','456 Avenue, Town','+0987654321');\nINSERT INTO \"JobsPosted\" (id,employer_id,position,description,start_date,end_date) VALUES (1,1,'Librarian','Responsible for managing library resources.','2022-01-01','2023-12-31'),(2,2,'Curator','Manage museum exhibits and collections.','2022-07-01','2023-06-30');\nINSERT INTO \"Librarians\" (id,name,age,experience,location) VALUES (1,'John Doe',30,2,'University''s Main Library'),(2,'Jane Smith',31,5,'New York Public Library');\n",
      "question": "List librarians and archivists that are located at University's main library. Show them in one table.",
      "gold_queries": [
        "SELECT Librarians.name\r\nFROM Librarians\r\nWHERE Librarians.location = \"University's Main Library\"\r\nUNION\r\nSELECT Archivists.name\r\nFROM Archivists\r\nWHERE Archivists.location = \"University's Main Library\"",
        "SELECT Librarians.name\r\nFROM Librarians\r\nUNION\r\nSELECT Archivists.name\r\nFROM Archivists\r\nWHERE Archivists.location = \"University's Main Library\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List librarians and archivists working in the University's Main Library with combined name, age, experience information.",
          "sql_queries": [
            "SELECT name || ' ' || age || ' ' || experience AS info\nFROM Librarians\nWHERE location = 'University''s Main Library'\nUNION\nSELECT name || ' ' || age || ' ' || experience AS info\nFROM Archivists\nWHERE location = 'University''s Main Library'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "SELECT DISTINCT a.name, a.age, a.experience FROM Archivists a WHERE a.location = 'University''s Main Library';",
          "sql_queries": [
            "SELECT DISTINCT a.name, a.age, a.experience FROM Archivists a WHERE a.location = 'University''s Main Library'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Combine librarian and archivist data for the \"University's Main Library\" location.",
          "sql_queries": [
            "SELECT name, age, experience FROM Librarians WHERE location = 'University''s Main Library' UNION SELECT name, age, experience FROM Archivists WHERE location = 'University''s Main Library'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "SELECT DISTINCT l.name, l.age, l.experience FROM Librarians l WHERE l.location = 'University''s Main Library'",
          "sql_queries": [
            "SELECT DISTINCT l.name, l.age, l.experience FROM Librarians l WHERE l.location = 'University''s Main Library'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Select l.name, l.age, l.experience FROM Librarians l JOIN Archivists a ON l.location = a.location WHERE l.location = 'University''s Main Library';",
          "sql_queries": [
            "SELECT l.name, l.age, l.experience FROM Librarians l JOIN Archivists a ON l.location = a.location WHERE l.location = 'University''s Main Library'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Return joint table of librarians and archivists in \"University's Main Library\".",
          "sql_queries": [
            "SELECT Librarians.name AS librarian_name, Librarians.age AS librarian_age, Librarians.experience AS librarian_experience, Archivists.name AS archivist_name, Archivists.age AS archivist_age, Archivists.experience AS archivist_experience\nFROM Librarians\nJOIN Archivists ON Librarians.location = Archivists.location\nWHERE Librarians.location = 'University''s Main Library'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "UNION",
          "sql_queries": [
            "SELECT name FROM Archivists UNION SELECT name FROM Librarians"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 7,
        "num_unique_queries": 7,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Banking/attachment_2tab_ref_types_of_banks/attachment_2tab_ref_types_of_banks.sqlite",
      "db_dump": "CREATE TABLE Account (\n    id INTEGER PRIMARY KEY,\n    account_number INTEGER,\n    balance INTEGER DEFAULT 0,\n    commercial_bank_id INTEGER REFERENCES Commercial_Bank(id),\n    FOREIGN KEY(commercial_bank_id) REFERENCES Commercial_Bank(id));\nCREATE TABLE Central_Bank (\n    id INTEGER PRIMARY KEY,\n    central_bank_name TEXT,\n    country_id INTEGER REFERENCES Country(id));\nCREATE TABLE Commercial_Bank (\n    id INTEGER PRIMARY KEY,\n    commercial_bank_name TEXT,\n    country_id INTEGER REFERENCES Country(id));\nCREATE TABLE Country (\n    id INTEGER PRIMARY KEY,\n    name TEXT UNIQUE);\n\nINSERT INTO \"Account\" (id,account_number,balance,commercial_bank_id) VALUES (1,123456789,0,1),(2,987654321,0,2);\nINSERT INTO \"Central_Bank\" (id,central_bank_name,country_id) VALUES (1,'Federal Reserve',1),(2,'Bank of England',2);\nINSERT INTO \"Commercial_Bank\" (id,commercial_bank_name,country_id) VALUES (1,'Citibank',1),(2,'Barclays',2);\nINSERT INTO \"Country\" (id,name) VALUES (1,'USA'),(2,'UK');\n",
      "question": "Show all central banks and commercial banks either of which operate in the USA. Show them in one table.",
      "gold_queries": [
        "SELECT Central_Bank.central_bank_name AS bank_name\r\nFROM Country JOIN Central_Bank ON Country.id = Central_Bank.country_id\r\nWHERE Country.name = \"USA\"\r\nUNION\r\nSELECT Commercial_Bank.commercial_bank_name AS bank_name\r\nFROM Country JOIN Commercial_Bank ON Country.id = Commercial_Bank.country_id\r\nWHERE Country.name = \"USA\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List all central banks and commercial banks with a country_id of 1.",
          "sql_queries": [
            "SELECT central_bank_name FROM Central_Bank WHERE country_id = 1 UNION SELECT commercial_bank_name FROM Commercial_Bank WHERE country_id = 1"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Return a single table showing all central banks and commercial banks, grouping by their associated country_id and filtering for country_id 1.",
          "sql_queries": [
            "SELECT T1.central_bank_name, T2.commercial_bank_name \nFROM Central_Bank AS T1 \nJOIN Commercial_Bank AS T2 ON T1.country_id = T2.country_id \nWHERE T1.country_id = 1"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Display a table containing all central banks and commercial banks, regardless of country_id, with an additional column indicating whether they operate in the USA.",
          "sql_queries": [
            "SELECT central_bank.central_bank_name AS bank_name, 'Central Bank' AS bank_type, CASE WHEN country.name = 'USA' THEN 'Yes' ELSE 'No' END AS operates_in_usa\nFROM Central_Bank central_bank\nJOIN Country country ON central_bank.country_id = country.id",
            "SELECT commercial_bank.commercial_bank_name AS bank_name, 'Commercial Bank' AS bank_type, CASE WHEN country.name = 'USA' THEN 'Yes' ELSE 'No' END AS operates_in_usa\nFROM Commercial_Bank commercial_bank\nJOIN Country country ON commercial_bank.country_id = country.id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Query for all central banks and commercial banks and then apply a WHERE clause to select only those entries where the country_id equals 1.",
          "sql_queries": [
            "SELECT central_bank_name FROM Central_Bank WHERE country_id = 1\nUNION\nSELECT commercial_bank_name FROM Commercial_Bank WHERE country_id = 1"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.6,
        "f1_score": 0.7499999999999999,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/attachment/Banking/attachment_1tab_ref_terms/attachment_1tab_ref_terms.sqlite",
      "db_dump": "CREATE TABLE AccountTypes (\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    TypeName TEXT UNIQUE\n);\nCREATE TABLE BankAccounts (\n    AccountNumber CHAR(10) PRIMARY KEY,\n    CustomerID INT,\n    OpenDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    CurrentBalance REAL ,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(ID)\n);\nCREATE TABLE Banks (\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    HeadQuarters TEXT\n);\nCREATE TABLE Customers (\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE,\n    Email TEXT UNIQUE\n);\nCREATE TABLE Loans (\n    LoanID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber CHAR(10),\n    Amount DECIMAL(15, 2),\n    StartDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    EndDate TIMESTAMP,\n    ForeignKeyAccountNumber CHAR(10) REFERENCES BankAccounts(AccountNumber),\n    FOREIGN KEY (ForeignKeyAccountNumber) REFERENCES BankAccounts(AccountNumber)\n);\nCREATE TABLE Terms (\n    TermId INTEGER PRIMARY KEY AUTOINCREMENT,\n    Description TEXT,\n    \"Value\" REAL,\n    AccountTypeID INT,\n    LOAN_ID INT,\n    FOREIGN KEY (AccountTypeID) REFERENCES AccountTypes(ID),\n    FOREIGN KEY (LOAN_ID) REFERENCES Loans(LoanID)\n);\n\nINSERT INTO \"AccountTypes\" (ID,TypeName) VALUES (1,'Checking'),(2,'Savings'),(3,'Money Market'),(4,'CD'),(5,'IRA');\nINSERT INTO \"BankAccounts\" (AccountNumber,CustomerID,OpenDate,CurrentBalance) VALUES ('1834293214',1,'2021-06-01 10:00:00',10000.0),('2834293214',2,'2021-07-01 10:00:00',20000.0),('3834293214',3,'2021-08-01 10:00:00',30000.0),('4834293214',4,'2021-09-01 10:00:00',40000.0),('5834293214',5,'2021-10-01 10:00:00',50000.0);\nINSERT INTO \"Banks\" (ID,Name,HeadQuarters) VALUES (1,'Bank A','New York'),(2,'Bank B','London'),(3,'Bank C','Paris'),(4,'Bank D','Tokyo'),(5,'Bank E','Los Angeles');\nINSERT INTO \"Customers\" (ID,FirstName,LastName,DateOfBirth,Email) VALUES (1,'John','Doe','1976-05-15','john.doe@example.com'),(2,'Jane','Smith','1980-08-20','jane.smith@example.com'),(3,'Peter','Black','1992-12-01','peter.black@example.com'),(4,'Alice','White','1985-03-17','alice.white@example.com'),(5,'Tom','Green','1995-07-05','tom.green@example.com');\nINSERT INTO \"Loans\" (LoanID,AccountNumber,Amount,StartDate,EndDate,ForeignKeyAccountNumber) VALUES (1,'1834293214',10000,'2021-06-01 10:00:00','2026-06-01 10:00:00','1834293214'),(2,'2834293214',15000,'2021-07-01 10:00:00','2027-07-01 10:00:00','2834293214'),(3,'3834293214',20000,'2021-08-01 10:00:00','2028-08-01 10:00:00','3834293214'),(4,'4834293214',25000,'2021-09-01 10:00:00','2029-09-01 10:00:00','4834293214'),(5,'5834293214',30000,'2021-10-01 10:00:00','2030-10-01 10:00:00','5834293214');\nINSERT INTO \"Terms\" (TermId,Description,Value,AccountTypeID,LOAN_ID) VALUES (1,'Monthly Interest Rate',0.05,1,1),(2,'Monthly Interest Rate',0.06,2,2),(3,'Annual Percentage Rate',0.03,1,1),(4,'Annual Percentage Rate',0.07,2,2),(5,'Some other value',0.05,3,3),(6,'Another term',0.04,4,4);\n",
      "question": "Display monthly interest rates and annual percentage rates of bank accounts with a balance of 20,000. Show them in one table.",
      "gold_queries": [
        "SELECT Terms.Value \r\nFROM Terms JOIN Loans ON Terms.LOAN_ID = Loans.LoanID JOIN BankAccounts ON Loans.ForeignKeyAccountNumber = BankAccounts.AccountNumber\r\nWHERE (Terms.Description = \"Monthly Interest Rate\" OR Terms.Description = \"Annual Percentage Rate\") AND BankAccounts.CurrentBalance = 20000.0",
        "SELECT Terms.Value \r\nFROM Terms JOIN Loans ON Terms.LOAN_ID = Loans.LoanID JOIN BankAccounts ON Loans.ForeignKeyAccountNumber = BankAccounts.AccountNumber\r\nWHERE Terms.Description = \"Monthly Interest Rate\" OR Terms.Description = \"Annual Percentage Rate\" AND BankAccounts.CurrentBalance = 20000.0"
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "AND t1.Description = 'Monthly Interest Rate';",
          "sql_queries": [
            "SELECT t1.Description, t1.Value\nFROM Terms t1\nWHERE t1.Description = 'Monthly Interest Rate'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "AND ba.CurrentBalance = 20000;",
          "sql_queries": [
            "SELECT ba.AccountNumber\nFROM BankAccounts ba\nWHERE ba.CurrentBalance = 20000"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "JOIN BankAccounts ba ON t1.AccountTypeID = (SELECT AccountTypeID FROM AccountTypes WHERE TypeName = ba.TypeName)",
          "sql_queries": [
            "SELECT t1.Description, t1.Value\nFROM Terms t1\nJOIN BankAccounts ba ON t1.AccountTypeID = (SELECT AccountTypeID FROM AccountTypes WHERE TypeName = ba.TypeName)\n"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT t1.Description, t1.Value\nFROM Terms t1\nJOIN BankAccounts ba ON t1.AccountTypeID = (SELECT AccountTypeID FROM AccountTypes WHERE TypeName = ba.TypeName)\n",
                "original_exception": "no such column: ba.TypeName"
              }
            ],
            "all_found": false
          }
        },
        {
          "interpretation": "WHERE ba.CurrentBalance = 20000",
          "sql_queries": [
            "SELECT CustomerID, OpenDate, CurrentBalance FROM BankAccounts ba WHERE ba.CurrentBalance = 20000"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Select t1.Description, t1.\"Value\" AS MonthlyInterest, t2.Description AS APR, t2.\"Value\" AS APRValue",
          "sql_queries": [
            "SELECT t1.Description, t1.\"Value\" AS MonthlyInterest, t2.Description AS APR, t2.\"Value\" AS APRValue\nFROM Terms t1\nJOIN Terms t2 ON t1.LOAN_ID = t2.LOAN_ID AND t1.AccountTypeID = t2.AccountTypeID\nWHERE t1.Description = 'Monthly Interest Rate' AND t2.Description = 'Annual Percentage Rate'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Display monthly interest rate for accounts with a balance of 20,000.",
          "sql_queries": [
            "SELECT T2.Value \nFROM BankAccounts AS T1 \nJOIN Terms AS T2 ON T1.AccountNumber = T2.LOAN_ID \nWHERE T1.CurrentBalance = 20000 AND T2.Description = 'Monthly Interest Rate'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "WHERE ba.TypeName IN ('Savings','Money Market')",
          "sql_queries": [
            "SELECT ba.TypeName \nFROM AccountTypes ba \nWHERE ba.TypeName IN ('Savings','Money Market')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Select t1.Description, t1.\"Value\" AS MonthlyInterest",
          "sql_queries": [
            "SELECT t1.Description, t1.\"Value\" AS MonthlyInterest\nFROM Terms t1\nWHERE t1.Description = 'Monthly Interest Rate'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "FROM Terms t1",
          "sql_queries": [
            "SELECT t1.Description, t1.Value\nFROM Terms t1\n"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "JOIN Terms t2 ON t1.AccountTypeID = t2.AccountTypeID",
          "sql_queries": [
            "SELECT t1.TypeName, t2.Description, t2.Value\nFROM AccountTypes t1\nJOIN Terms t2 ON t1.ID = t2.AccountTypeID"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 9,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 10,
        "num_unique_queries": 10,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [
          {
            "query": "SELECT t1.Description, t1.Value\nFROM Terms t1\nJOIN BankAccounts ba ON t1.AccountTypeID = (SELECT AccountTypeID FROM AccountTypes WHERE TypeName = ba.TypeName)\n",
            "original_exception": "no such column: ba.TypeName"
          }
        ],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Banking/attachment_1tab_val_investment_company/attachment_1tab_val_investment_company.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountNumber INTEGER PRIMARY KEY,\n    Balance REAL ,\n    CustomerID INTEGER,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Email TEXT UNIQUE\n);\nCREATE TABLE InvestmentCompanies(\n    CompanyID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Type TEXT,\n    FundingAmount REAL\n);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY,\n    Date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    Amount REAL,\n    AccountNumber INTEGER,\n    CompanyID INTEGER,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber),\n    FOREIGN KEY (CompanyID) REFERENCES InvestmentCompanies(CompanyID)\n);\n\nINSERT INTO \"Accounts\" (AccountNumber,Balance,CustomerID) VALUES (1,1234.67,1),(2,-543.98,2),(3,7654.32,3),(4,-234.56,4),(5,12345.67,5);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,Email) VALUES (1,'John','Doe','john@example.com'),(2,'Jane','Smith','jane@example.com'),(3,'Bob','Building','bob@example.com'),(4,'Alice','Adams','alice@example.com'),(5,'Tom','Turner','tom@example.com');\nINSERT INTO \"InvestmentCompanies\" (CompanyID,Name,Type,FundingAmount) VALUES (1,'Pinnacle Growth Equity','Growth Equity Firm',5000000.0),(2,'Summit Equity Partners','Growth Equity Firm',6000000.0),(3,'Innovate Venture Capital','Venture Capital Trust',5000000.0),(4,'Frontier VC Group','Venture Capital Trust',4000000.0),(5,'Elite Private Equity','Private Equity Firm',7000000.0);\nINSERT INTO \"Transactions\" (TransactionID,Date,Amount,AccountNumber,CompanyID) VALUES (1,'2024-03-07 22:58:27',1000.0,1,1),(2,'2024-03-07 22:58:27',-500.0,2,2),(3,'2024-03-07 22:58:27',700.0,3,3),(4,'2024-03-07 22:58:27',-300.0,4,4),(5,'2024-03-07 22:58:27',1500.0,5,5);\n",
      "question": "Show all of the growth equity firms and the venture capital trusts where either have 5M funding. Show them in one table.",
      "gold_queries": [
        "SELECT InvestmentCompanies.Name \r\nFROM InvestmentCompanies\r\nWHERE (InvestmentCompanies.Type = \"Growth Equity Firm\" OR InvestmentCompanies.Type = \"Venture Capital Trust\") AND InvestmentCompanies.FundingAmount = 5000000.0"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Show a single table with columns CompanyID, Name, and Type, displaying all growth equity firms and venture capital trusts having a FundingAmount of 5,000,000.",
          "sql_queries": [
            "SELECT CompanyID, Name, Type FROM InvestmentCompanies WHERE (Type = 'Growth Equity Firm' OR Type = 'Venture Capital Trust') AND FundingAmount = 5000000"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Show a table containing two columns: CompanyID and Name, listing all growth equity firms and venture capital trusts with a FundingAmount of 5000000.",
          "sql_queries": [
            "SELECT CompanyID, Name FROM InvestmentCompanies WHERE Type IN ('Growth Equity Firm', 'Venture Capital Trust') AND FundingAmount = 5000000"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Present a combined table listing all companies that are either growth equity firms or venture capital trusts with a FundingAmount equal to 5,000,000.",
          "sql_queries": [
            "SELECT Name, Type, FundingAmount FROM InvestmentCompanies WHERE Type = 'Growth Equity Firm' OR (Type = 'Venture Capital Trust' AND FundingAmount = 5000000)"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Banking/attachment_1tab_val_investment_company/attachment_1tab_val_investment_company.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountNumber INTEGER PRIMARY KEY,\n    Balance REAL ,\n    CustomerID INTEGER,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Email TEXT UNIQUE\n);\nCREATE TABLE InvestmentCompanies(\n    CompanyID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Type TEXT,\n    FundingAmount REAL\n);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY,\n    Date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    Amount REAL,\n    AccountNumber INTEGER,\n    CompanyID INTEGER,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber),\n    FOREIGN KEY (CompanyID) REFERENCES InvestmentCompanies(CompanyID)\n);\n\nINSERT INTO \"Accounts\" (AccountNumber,Balance,CustomerID) VALUES (1,1234.67,1),(2,-543.98,2),(3,7654.32,3),(4,-234.56,4),(5,12345.67,5);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,Email) VALUES (1,'John','Doe','john@example.com'),(2,'Jane','Smith','jane@example.com'),(3,'Bob','Building','bob@example.com'),(4,'Alice','Adams','alice@example.com'),(5,'Tom','Turner','tom@example.com');\nINSERT INTO \"InvestmentCompanies\" (CompanyID,Name,Type,FundingAmount) VALUES (1,'Pinnacle Growth Equity','Growth Equity Firm',5000000.0),(2,'Summit Equity Partners','Growth Equity Firm',6000000.0),(3,'Innovate Venture Capital','Venture Capital Trust',5000000.0),(4,'Frontier VC Group','Venture Capital Trust',4000000.0),(5,'Elite Private Equity','Private Equity Firm',7000000.0);\nINSERT INTO \"Transactions\" (TransactionID,Date,Amount,AccountNumber,CompanyID) VALUES (1,'2024-03-07 22:58:27',1000.0,1,1),(2,'2024-03-07 22:58:27',-500.0,2,2),(3,'2024-03-07 22:58:27',700.0,3,3),(4,'2024-03-07 22:58:27',-300.0,4,4),(5,'2024-03-07 22:58:27',1500.0,5,5);\n",
      "question": "Show all growth equity firms and venture capital trusts with 5M funding. Show them in one table.",
      "gold_queries": [
        "SELECT InvestmentCompanies.Name \r\nFROM InvestmentCompanies\r\nWHERE (InvestmentCompanies.Type = \"Growth Equity Firm\" OR InvestmentCompanies.Type = \"Venture Capital Trust\") AND InvestmentCompanies.FundingAmount = 5000000.0",
        "SELECT InvestmentCompanies.Name \r\nFROM InvestmentCompanies\r\nWHERE InvestmentCompanies.Type = \"Growth Equity Firm\" OR InvestmentCompanies.Type = \"Venture Capital Trust\" AND InvestmentCompanies.FundingAmount = 5000000.0"
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "SELECT * FROM GrowthEquityVentureCapital5M;",
          "sql_queries": [
            "SELECT Name FROM InvestmentCompanies WHERE Type IN ('Growth Equity Firm', 'Venture Capital Trust') AND FundingAmount = 5000000.0"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "SELECT Type, Name, FundingAmount FROM InvestmentCompanies WHERE (Type = 'Growth Equity Firm' AND FundingAmount = 5000000.0) OR (Type = 'Venture Capital Trust' AND FundingAmount = 5000000.0);",
          "sql_queries": [
            "SELECT Type, Name, FundingAmount FROM InvestmentCompanies WHERE (Type = 'Growth Equity Firm' AND FundingAmount = 5000000.0) OR (Type = 'Venture Capital Trust' AND FundingAmount = 5000000.0)"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "SELECT CompanyName FROM InvestmentCompanies WHERE Type IN ('Growth Equity Firm', 'Venture Capital Trust') AND FundingAmount = 5000000.0;",
          "sql_queries": [
            "SELECT Name FROM InvestmentCompanies WHERE Type IN ('Growth Equity Firm', 'Venture Capital Trust') AND FundingAmount = 5000000.0"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "CREATE VIEW GrowthEquityVentureCapital5M AS SELECT Name, Type, FundingAmount FROM InvestmentCompanies WHERE Type IN ('Growth Equity Firm', 'Venture Capital Trust') AND FundingAmount = 5000000.0;",
          "sql_queries": [],
          "metrics": {
            "recall": 0.0,
            "precision": 0,
            "f1_score": 0,
            "num_queries": 0,
            "num_unique_queries": 0,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "SELECT * FROM InvestmentCompanies WHERE Type IN ('Growth Equity Firm', 'Venture Capital Trust') AND FundingAmount = 5000000.0;",
          "sql_queries": [
            "SELECT * FROM InvestmentCompanies WHERE Type IN ('Growth Equity Firm', 'Venture Capital Trust') AND FundingAmount = 5000000.0"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.3333333333333333,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/attachment/Banking/attachment_1tab_val_investment_company/attachment_1tab_val_investment_company.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountNumber INTEGER PRIMARY KEY,\n    Balance REAL ,\n    CustomerID INTEGER,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Email TEXT UNIQUE\n);\nCREATE TABLE InvestmentCompanies(\n    CompanyID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Type TEXT,\n    FundingAmount REAL\n);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY,\n    Date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    Amount REAL,\n    AccountNumber INTEGER,\n    CompanyID INTEGER,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber),\n    FOREIGN KEY (CompanyID) REFERENCES InvestmentCompanies(CompanyID)\n);\n\nINSERT INTO \"Accounts\" (AccountNumber,Balance,CustomerID) VALUES (1,1234.67,1),(2,-543.98,2),(3,7654.32,3),(4,-234.56,4),(5,12345.67,5);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,Email) VALUES (1,'John','Doe','john@example.com'),(2,'Jane','Smith','jane@example.com'),(3,'Bob','Building','bob@example.com'),(4,'Alice','Adams','alice@example.com'),(5,'Tom','Turner','tom@example.com');\nINSERT INTO \"InvestmentCompanies\" (CompanyID,Name,Type,FundingAmount) VALUES (1,'Pinnacle Growth Equity','Growth Equity Firm',5000000.0),(2,'Summit Equity Partners','Growth Equity Firm',6000000.0),(3,'Innovate Venture Capital','Venture Capital Trust',5000000.0),(4,'Frontier VC Group','Venture Capital Trust',4000000.0),(5,'Elite Private Equity','Private Equity Firm',7000000.0);\nINSERT INTO \"Transactions\" (TransactionID,Date,Amount,AccountNumber,CompanyID) VALUES (1,'2024-03-07 22:58:27',1000.0,1,1),(2,'2024-03-07 22:58:27',-500.0,2,2),(3,'2024-03-07 22:58:27',700.0,3,3),(4,'2024-03-07 22:58:27',-300.0,4,4),(5,'2024-03-07 22:58:27',1500.0,5,5);\n",
      "question": "Show all the growth equity firms, also show the venture capital trusts, but just those with 5M of funding. Show them in one table.",
      "gold_queries": [
        "SELECT InvestmentCompanies.Name \r\nFROM InvestmentCompanies\r\nWHERE InvestmentCompanies.Type = \"Growth Equity Firm\" OR InvestmentCompanies.Type = \"Venture Capital Trust\" AND InvestmentCompanies.FundingAmount = 5000000.0"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "SELECT * FROM InvestmentCompanies WHERE Type = 'Venture Capital Trust' AND FundingAmount = 5000000.0",
          "sql_queries": [
            "SELECT * FROM InvestmentCompanies WHERE Type = 'Venture Capital Trust' AND FundingAmount = 5000000.0"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Show all rows from InvestmentCompanies where Type = 'Growth Equity Firm' UNION ALL Show all rows from InvestmentCompanies where Type = 'Venture Capital Trust' AND FundingAmount = 5000000.0",
          "sql_queries": [
            "SELECT * FROM InvestmentCompanies WHERE Type = 'Growth Equity Firm' UNION ALL SELECT * FROM InvestmentCompanies WHERE Type = 'Venture Capital Trust' AND FundingAmount = 5000000.0"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "CREATE TABLE X AS SELECT * FROM InvestmentCompanies WHERE Type = 'Growth Equity Firm'",
          "sql_queries": [],
          "metrics": {
            "recall": 0.0,
            "precision": 0,
            "f1_score": 0,
            "num_queries": 0,
            "num_unique_queries": 0,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "JOIN (SELECT * FROM InvestmentCompanies WHERE Type = 'Growth Equity Firm') AS g ON TRUE",
          "sql_queries": [
            "SELECT * FROM InvestmentCompanies\nJOIN (SELECT * FROM InvestmentCompanies WHERE Type = 'Growth Equity Firm') AS g ON TRUE"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "SELECT i.* FROM InvestmentCompanies i",
          "sql_queries": [
            "SELECT i.* FROM InvestmentCompanies i\n"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "JOIN (SELECT * FROM InvestmentCompanies WHERE Type = 'Venture Capital Trust' AND FundingAmount = 5000000.0) AS v ON TRUE",
          "sql_queries": [
            "SELECT * \nFROM InvestmentCompanies \nJOIN (SELECT * FROM InvestmentCompanies WHERE Type = 'Venture Capital Trust' AND FundingAmount = 5000000.0) AS v ON TRUE\n"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "SELECT * FROM InvestmentCompanies WHERE Type = 'Growth Equity Firm'",
          "sql_queries": [
            "SELECT * FROM InvestmentCompanies WHERE Type = 'Growth Equity Firm'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "LEFT JOIN (SELECT * FROM InvestmentCompanies WHERE Type = 'Growth Equity Firm') AS g ON TRUE",
          "sql_queries": [
            "SELECT * FROM InvestmentCompanies AS i LEFT JOIN (SELECT * FROM InvestmentCompanies WHERE Type = 'Growth Equity Firm') AS g ON TRUE"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "LEFT JOIN (SELECT * FROM InvestmentCompanies WHERE Type = 'Venture Capital Trust' AND FundingAmount = 5000000.0) AS v ON TRUE",
          "sql_queries": [
            "SELECT * FROM InvestmentCompanies LEFT JOIN (SELECT * FROM InvestmentCompanies WHERE Type = 'Venture Capital Trust' AND FundingAmount = 5000000.0) AS v ON TRUE"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "UNION",
          "sql_queries": [
            "SELECT FirstName, LastName \nFROM Customers \nWHERE CustomerID IN (SELECT CustomerID FROM Accounts WHERE Balance > 0)\nUNION\nSELECT FirstName, LastName \nFROM Customers \nWHERE CustomerID IN (SELECT CustomerID FROM Transactions WHERE Amount > 1000)"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 7,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 9,
        "num_unique_queries": 9,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Banking/attachment_1tab_ref_terms/attachment_1tab_ref_terms.sqlite",
      "db_dump": "CREATE TABLE AccountTypes (\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    TypeName TEXT UNIQUE\n);\nCREATE TABLE BankAccounts (\n    AccountNumber CHAR(10) PRIMARY KEY,\n    CustomerID INT,\n    OpenDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    CurrentBalance REAL ,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(ID)\n);\nCREATE TABLE Banks (\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    HeadQuarters TEXT\n);\nCREATE TABLE Customers (\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE,\n    Email TEXT UNIQUE\n);\nCREATE TABLE Loans (\n    LoanID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber CHAR(10),\n    Amount DECIMAL(15, 2),\n    StartDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    EndDate TIMESTAMP,\n    ForeignKeyAccountNumber CHAR(10) REFERENCES BankAccounts(AccountNumber),\n    FOREIGN KEY (ForeignKeyAccountNumber) REFERENCES BankAccounts(AccountNumber)\n);\nCREATE TABLE Terms (\n    TermId INTEGER PRIMARY KEY AUTOINCREMENT,\n    Description TEXT,\n    \"Value\" REAL,\n    AccountTypeID INT,\n    LOAN_ID INT,\n    FOREIGN KEY (AccountTypeID) REFERENCES AccountTypes(ID),\n    FOREIGN KEY (LOAN_ID) REFERENCES Loans(LoanID)\n);\n\nINSERT INTO \"AccountTypes\" (ID,TypeName) VALUES (1,'Checking'),(2,'Savings'),(3,'Money Market'),(4,'CD'),(5,'IRA');\nINSERT INTO \"BankAccounts\" (AccountNumber,CustomerID,OpenDate,CurrentBalance) VALUES ('1834293214',1,'2021-06-01 10:00:00',10000.0),('2834293214',2,'2021-07-01 10:00:00',20000.0),('3834293214',3,'2021-08-01 10:00:00',30000.0),('4834293214',4,'2021-09-01 10:00:00',40000.0),('5834293214',5,'2021-10-01 10:00:00',50000.0);\nINSERT INTO \"Banks\" (ID,Name,HeadQuarters) VALUES (1,'Bank A','New York'),(2,'Bank B','London'),(3,'Bank C','Paris'),(4,'Bank D','Tokyo'),(5,'Bank E','Los Angeles');\nINSERT INTO \"Customers\" (ID,FirstName,LastName,DateOfBirth,Email) VALUES (1,'John','Doe','1976-05-15','john.doe@example.com'),(2,'Jane','Smith','1980-08-20','jane.smith@example.com'),(3,'Peter','Black','1992-12-01','peter.black@example.com'),(4,'Alice','White','1985-03-17','alice.white@example.com'),(5,'Tom','Green','1995-07-05','tom.green@example.com');\nINSERT INTO \"Loans\" (LoanID,AccountNumber,Amount,StartDate,EndDate,ForeignKeyAccountNumber) VALUES (1,'1834293214',10000,'2021-06-01 10:00:00','2026-06-01 10:00:00','1834293214'),(2,'2834293214',15000,'2021-07-01 10:00:00','2027-07-01 10:00:00','2834293214'),(3,'3834293214',20000,'2021-08-01 10:00:00','2028-08-01 10:00:00','3834293214'),(4,'4834293214',25000,'2021-09-01 10:00:00','2029-09-01 10:00:00','4834293214'),(5,'5834293214',30000,'2021-10-01 10:00:00','2030-10-01 10:00:00','5834293214');\nINSERT INTO \"Terms\" (TermId,Description,Value,AccountTypeID,LOAN_ID) VALUES (1,'Monthly Interest Rate',0.05,1,1),(2,'Monthly Interest Rate',0.06,2,2),(3,'Annual Percentage Rate',0.03,1,1),(4,'Annual Percentage Rate',0.07,2,2),(5,'Some other value',0.05,3,3),(6,'Another term',0.04,4,4);\n",
      "question": "List all monthly interest rates and also list annual percentage rates of bank accounts with a balance of 20,000. Show them in one table.",
      "gold_queries": [
        "SELECT Terms.Value \r\nFROM Terms JOIN Loans ON Terms.LOAN_ID = Loans.LoanID JOIN BankAccounts ON Loans.ForeignKeyAccountNumber = BankAccounts.AccountNumber\r\nWHERE Terms.Description = \"Monthly Interest Rate\" OR Terms.Description = \"Annual Percentage Rate\" AND BankAccounts.CurrentBalance = 20000.0"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List all distinct \"Monthly Interest Rate\" and \"Annual Percentage Rate\" values from the \"Terms\" table, filtered by the associated bank account IDs which have a \"CurrentBalance\" of 20,000 in the \"BankAccounts\" table.",
          "sql_queries": [
            "SELECT DISTINCT T.Value\nFROM Terms T\nJOIN Loans L ON T.LOAN_ID = L.LoanID\nJOIN BankAccounts BA ON BA.AccountNumber = L.AccountNumber\nWHERE BA.CurrentBalance = 20000\nAND T.Description IN ('Monthly Interest Rate', 'Annual Percentage Rate')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "For each bank account with a \"CurrentBalance\" of 20,000, retrieve its associated \"Monthly Interest Rate\" and \"Annual Percentage Rate\" values from the \"Terms\" table.",
          "sql_queries": [
            "SELECT T2.Description, T2.Value\nFROM BankAccounts AS BA\nJOIN Terms AS T2 ON BA.AccountNumber = T2.LOAN_ID\nWHERE BA.CurrentBalance = 20000\n  AND T2.Description IN ('Monthly Interest Rate', 'Annual Percentage Rate')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all \"Monthly Interest Rate\" and \"Annual Percentage Rate\" values from the \"Terms\" table for bank accounts where the \"CurrentBalance\" in the \"BankAccounts\" table is 20,000.",
          "sql_queries": [
            "SELECT T.Description, T.Value\nFROM Terms T\nJOIN Loans L ON T.LOAN_ID = L.LoanID\nJOIN BankAccounts BA ON L.AccountNumber = BA.AccountNumber\nWHERE BA.CurrentBalance = 20000\nAND T.Description IN ('Monthly Interest Rate', 'Annual Percentage Rate')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Find all entries in the \"Terms\" table that have a corresponding \"BankAccount\" with a \"CurrentBalance\" of 20,000 and then list the \"Monthly Interest Rate\" and \"Annual Percentage Rate\" values.",
          "sql_queries": [
            "SELECT T.Description, T.Value \nFROM Terms T \nJOIN Loans L ON T.LOAN_ID = L.LoanID \nJOIN BankAccounts BA ON L.ForeignKeyAccountNumber = BA.AccountNumber \nWHERE BA.CurrentBalance = 20000 AND T.Description IN ('Monthly Interest Rate', 'Annual Percentage Rate')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Banking/attachment_2tab_ref_types_of_banks/attachment_2tab_ref_types_of_banks.sqlite",
      "db_dump": "CREATE TABLE Account (\n    id INTEGER PRIMARY KEY,\n    account_number INTEGER,\n    balance INTEGER DEFAULT 0,\n    commercial_bank_id INTEGER REFERENCES Commercial_Bank(id),\n    FOREIGN KEY(commercial_bank_id) REFERENCES Commercial_Bank(id));\nCREATE TABLE Central_Bank (\n    id INTEGER PRIMARY KEY,\n    central_bank_name TEXT,\n    country_id INTEGER REFERENCES Country(id));\nCREATE TABLE Commercial_Bank (\n    id INTEGER PRIMARY KEY,\n    commercial_bank_name TEXT,\n    country_id INTEGER REFERENCES Country(id));\nCREATE TABLE Country (\n    id INTEGER PRIMARY KEY,\n    name TEXT UNIQUE);\n\nINSERT INTO \"Account\" (id,account_number,balance,commercial_bank_id) VALUES (1,123456789,0,1),(2,987654321,0,2);\nINSERT INTO \"Central_Bank\" (id,central_bank_name,country_id) VALUES (1,'Federal Reserve',1),(2,'Bank of England',2);\nINSERT INTO \"Commercial_Bank\" (id,commercial_bank_name,country_id) VALUES (1,'Citibank',1),(2,'Barclays',2);\nINSERT INTO \"Country\" (id,name) VALUES (1,'USA'),(2,'UK');\n",
      "question": "List all central banks and commercial banks that operate in the USA. Show them in one table.",
      "gold_queries": [
        "SELECT Central_Bank.central_bank_name AS bank_name\r\nFROM Country JOIN Central_Bank ON Country.id = Central_Bank.country_id\r\nWHERE Country.name = \"USA\"\r\nUNION\r\nSELECT Commercial_Bank.commercial_bank_name AS bank_name\r\nFROM Country JOIN Commercial_Bank ON Country.id = Commercial_Bank.country_id\r\nWHERE Country.name = \"USA\"",
        "SELECT Central_Bank.central_bank_name AS bank_name\r\nFROM Country JOIN Central_Bank ON Country.id = Central_Bank.country_id\r\nUNION\r\nSELECT Commercial_Bank.commercial_bank_name AS bank_name\r\nFROM Country JOIN Commercial_Bank ON Country.id = Commercial_Bank.country_id\r\nWHERE Country.name = \"USA\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "FROM Central_Bank",
          "sql_queries": [
            "SELECT central_bank_name FROM Central_Bank"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Select c.central_bank_name, cb.commercial_bank_name",
          "sql_queries": [
            "SELECT c.central_bank_name, cb.commercial_bank_name\nFROM Central_Bank c\nJOIN Commercial_Bank cb ON c.country_id = cb.country_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Join Commercial_Bank cb ON c.country_id = cb.country_id",
          "sql_queries": [
            "SELECT c.name, cb.commercial_bank_name\nFROM Country c\nJOIN Commercial_Bank cb ON c.id = cb.country_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Where c.country_id = (Select id From Country Where name = 'USA')",
          "sql_queries": [
            "SELECT c.central_bank_name \nFROM Central_Bank c \nWHERE c.country_id = (SELECT id FROM Country WHERE name = 'USA')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "SELECT central_bank_name, commercial_bank_name",
          "sql_queries": [
            "SELECT Central_Bank.central_bank_name, Commercial_Bank.commercial_bank_name\nFROM Central_Bank\nJOIN Commercial_Bank ON Central_Bank.id = Commercial_Bank.country_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "JOIN Commercial_Bank ON Central_Bank.country_id = Commercial_Bank.country_id",
          "sql_queries": [
            "SELECT Central_Bank.central_bank_name, Commercial_Bank.commercial_bank_name \nFROM Central_Bank \nJOIN Commercial_Bank ON Central_Bank.country_id = Commercial_Bank.country_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "WHERE Central_Bank.country_id IN (SELECT id FROM Country WHERE name = 'USA')",
          "sql_queries": [
            "SELECT * FROM Central_Bank WHERE Central_Bank.country_id IN (SELECT id FROM Country WHERE name = 'USA')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "From Central_Bank c",
          "sql_queries": [
            "SELECT central_bank_name FROM Central_Bank c"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 8,
        "num_unique_queries": 8,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Banking/attachment_2tab_ref_types_of_banks/attachment_2tab_ref_types_of_banks.sqlite",
      "db_dump": "CREATE TABLE Account (\n    id INTEGER PRIMARY KEY,\n    account_number INTEGER,\n    balance INTEGER DEFAULT 0,\n    commercial_bank_id INTEGER REFERENCES Commercial_Bank(id),\n    FOREIGN KEY(commercial_bank_id) REFERENCES Commercial_Bank(id));\nCREATE TABLE Central_Bank (\n    id INTEGER PRIMARY KEY,\n    central_bank_name TEXT,\n    country_id INTEGER REFERENCES Country(id));\nCREATE TABLE Commercial_Bank (\n    id INTEGER PRIMARY KEY,\n    commercial_bank_name TEXT,\n    country_id INTEGER REFERENCES Country(id));\nCREATE TABLE Country (\n    id INTEGER PRIMARY KEY,\n    name TEXT UNIQUE);\n\nINSERT INTO \"Account\" (id,account_number,balance,commercial_bank_id) VALUES (1,123456789,0,1),(2,987654321,0,2);\nINSERT INTO \"Central_Bank\" (id,central_bank_name,country_id) VALUES (1,'Federal Reserve',1),(2,'Bank of England',2);\nINSERT INTO \"Commercial_Bank\" (id,commercial_bank_name,country_id) VALUES (1,'Citibank',1),(2,'Barclays',2);\nINSERT INTO \"Country\" (id,name) VALUES (1,'USA'),(2,'UK');\n",
      "question": "Show all central banks and only those commercial banks which operate in the USA. Show them in one table.",
      "gold_queries": [
        "SELECT Central_Bank.central_bank_name AS bank_name\r\nFROM Country JOIN Central_Bank ON Country.id = Central_Bank.country_id\r\nUNION\r\nSELECT Commercial_Bank.commercial_bank_name AS bank_name\r\nFROM Country JOIN Commercial_Bank ON Country.id = Commercial_Bank.country_id\r\nWHERE Country.name = \"USA\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "SHOW ALL ROWS FROM Central_Bank;",
          "sql_queries": [
            "SELECT * FROM Central_Bank"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "JOIN Commercial_Bank cb ON c.country_id = cb.country_id",
          "sql_queries": [
            "SELECT cb.commercial_bank_name, c.name\nFROM Commercial_Bank cb\nJOIN Country c ON cb.country_id = c.id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "SELECT c.central_bank_name",
          "sql_queries": [
            "SELECT c.central_bank_name FROM Central_Bank c"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "SELECT cb.commercial_bank_name",
          "sql_queries": [
            "SELECT cb.commercial_bank_name FROM Commercial_Bank cb"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "WHERE cb.country_id = 1",
          "sql_queries": [
            "SELECT c.commercial_bank_name\nFROM Commercial_Bank c\nJOIN Country cb ON c.country_id = cb.id\nWHERE cb.country_id = 1"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT c.commercial_bank_name\nFROM Commercial_Bank c\nJOIN Country cb ON c.country_id = cb.id\nWHERE cb.country_id = 1",
                "original_exception": "no such column: cb.country_id"
              }
            ],
            "all_found": false
          }
        },
        {
          "interpretation": "SELECT c.central_bank_name, cb.commercial_bank_name",
          "sql_queries": [
            "SELECT c.central_bank_name, cb.commercial_bank_name\nFROM Central_Bank c\nJOIN Commercial_Bank cb ON c.country_id = cb.country_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "FROM Commercial_Bank cb",
          "sql_queries": [
            "SELECT commercial_bank_name FROM Commercial_Bank cb"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "FROM Central_Bank c",
          "sql_queries": [
            "SELECT c.central_bank_name, c.country_id FROM Central_Bank c\n"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "A combined resultset of all entries in Central_Bank and a subset of entries in Commercial_Bank, filtered by country.",
          "sql_queries": [
            "SELECT central_bank_name, country_id FROM Central_Bank\nUNION\nSELECT commercial_bank_name, country_id FROM Commercial_Bank WHERE country_id = 1"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "WHERE c.country_id IN (SELECT cb.country_id FROM Commercial_Bank cb WHERE cb.country_id = 1);",
          "sql_queries": [
            "SELECT * FROM Country c WHERE c.country_id IN (SELECT cb.country_id FROM Commercial_Bank cb WHERE cb.country_id = 1)"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT * FROM Country c WHERE c.country_id IN (SELECT cb.country_id FROM Commercial_Bank cb WHERE cb.country_id = 1)",
                "original_exception": "no such column: c.country_id"
              }
            ],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 8,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 10,
        "num_unique_queries": 10,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [
          {
            "query": "SELECT c.commercial_bank_name\nFROM Commercial_Bank c\nJOIN Country cb ON c.country_id = cb.id\nWHERE cb.country_id = 1",
            "original_exception": "no such column: cb.country_id"
          },
          {
            "query": "SELECT * FROM Country c WHERE c.country_id IN (SELECT cb.country_id FROM Commercial_Bank cb WHERE cb.country_id = 1)",
            "original_exception": "no such column: c.country_id"
          }
        ],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Banking/attachment_2tab_val_products/attachment_2tab_val_products.sqlite",
      "db_dump": "CREATE TABLE Customers(\n    id INTEGER PRIMARY KEY,\n    CustomerName TEXT,\n    EmailAddress TEXT,\n    PhoneNumber VARCHAR(10),\n    AccountBalance REAL\n);\nCREATE TABLE Exchange_traded_Products(\n    id INTEGER PRIMARY KEY,\n    ProductName TEXT,\n    TickerSymbol TEXT,\n    AssetClass TEXT,\n    TotalAssets REAL,\n    ExitFee DECIMAL(5,2)\n);\nCREATE TABLE Orders(\n    OrderID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerId INTEGER,\n    ProductType TEXT,\n    Quantity INTEGER ,\n    Price PERSON,\n    DateOrdered DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (CustomerId) REFERENCES Customers(id)\n);\nCREATE TABLE Transactions(\n    TransactionId INTEGER PRIMARY KEY AUTOINCREMENT,\n    OrderId INTEGER,\n    Amount REAL,\n    Fees REAL,\n    PaymentMethod TEXT,\n    Status TEXT ,\n    ProcessDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (OrderId) REFERENCES Orders(OrderID)\n);\nCREATE TABLE Unit_investment_Trusts(\n    id INTEGER PRIMARY KEY,\n    TrustName TEXT,\n    TickerSymbol TEXT,\n    NetAssetValue REAL,\n    NumberOfUnits INTEGER,\n    ExitFee DECIMAL(5,2)\n);\n\nINSERT INTO \"Customers\" (id,CustomerName,EmailAddress,PhoneNumber,AccountBalance) VALUES (1,'John Doe','johndoe@example.com','1234567890',5000.0),(2,'Jane Smith','janesmith@example.com','0987654321',10000.0),(3,'Alice Johnson','alicejohnson@example.com','5555555555',15000.0),(4,'Bob Brown','bobbrown@example.com','5555555556',20000.0),(5,'Charlie Green','charliegreen@example.com','5555555557',25000.0);\nINSERT INTO \"Exchange_traded_Products\" (id,ProductName,TickerSymbol,AssetClass,TotalAssets,ExitFee) VALUES (1,'AAPL','AAPL','Equity',239.67,0.01),(2,'MSFT','MSFT','Equity',286.21,0.015),(3,'GOOG','GOOG','Equity',262.33,0.01),(4,'AMZN','AMZN','Equity',356.33,0.01),(5,'TSLA','TSLA','Equity',109.86,0.01);\nINSERT INTO \"Orders\" (OrderID,CustomerId,ProductType,Quantity,Price,DateOrdered) VALUES (1,1,'Exchange_traded_product',10,100,'2022-01-01 12:00:00'),(2,2,'Exchange_traded_product',5,120,'2022-01-01 12:01:00'),(3,3,'Exchange_traded_product',10,110,'2022-01-01 12:02:00'),(4,4,'Exchange_traded_product',15,130,'2022-01-01 12:03:00'),(5,5,'Exchange_traded_product',20,140,'2022-01-01 12:04:00');\nINSERT INTO \"Transactions\" (TransactionId,OrderId,Amount,Fees,PaymentMethod,Status,ProcessDate) VALUES (1,1,1000.0,20.0,'Debit Card','Completed','2022-01-01 12:00:00'),(2,2,600.0,12.0,'PayPal','Completed','2022-01-01 12:01:00'),(3,3,1100.0,22.0,'Bank Transfer','Completed','2022-01-01 12:02:00'),(4,4,1300.0,24.0,'Check','Completed','2022-01-01 12:03:00'),(5,5,1400.0,26.0,'Wire Transfer','Completed','2022-01-01 12:04:00');\nINSERT INTO \"Unit_investment_Trusts\" (id,TrustName,TickerSymbol,NetAssetValue,NumberOfUnits,ExitFee) VALUES (1,'ABCD','ABCD',10.0,100000,0.01),(2,'EFGH','EFGH',12.5,80000,0.015),(3,'IJKL','IJKL',8.2,50000,0.01),(4,'MNOP','MNOP',7.6,60000,0.015),(5,'QRST','QRST',9.8,75000,0.01);\n",
      "question": "List all exchange-traded products and also display unit investment trusts with an exit fee of 0.01. Show them in one table.",
      "gold_queries": [
        "SELECT Exchange_traded_Products.ProductName as name\r\nFROM Exchange_traded_Products\r\nUNION\r\nSELECT Unit_investment_Trusts.TrustName as name\r\nFROM Unit_investment_Trusts\r\nWHERE Unit_investment_Trusts.ExitFee = 0.01"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Display the listings of Exchange-traded_Products and Unit_investment_Trusts in a unified table with appropriate column headings",
          "sql_queries": [
            "SELECT ProductName AS Name, TickerSymbol, AssetClass, TotalAssets AS TotalValue, ExitFee FROM Exchange_traded_Products\nUNION\nSELECT TrustName AS Name, TickerSymbol, 'Unit Investment Trust' AS AssetClass, NetAssetValue * NumberOfUnits AS TotalValue, ExitFee FROM Unit_investment_Trusts"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve all rows from Exchange_traded_Products",
          "sql_queries": [
            "SELECT * FROM Exchange_traded_Products"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Combine the results from the two previous queries into a single table",
          "sql_queries": [
            "SELECT OrderID, CustomerId, ProductType, Quantity, Price, DateOrdered FROM Orders UNION SELECT OrderId, CustomerId, ProductType, Quantity, Price, DateOrdered FROM Orders"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Include data from both Exchange_traded_Products and Unit_investment_Trusts tables in the final result",
          "sql_queries": [
            "SELECT TickerSymbol, AssetClass, TotalAssets, ExitFee FROM Exchange_traded_Products UNION SELECT TickerSymbol, 'Unit Investment Trust' AS AssetClass, NetAssetValue AS TotalAssets, ExitFee FROM Unit_investment_Trusts"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Select only rows from Unit_investment_Trusts where ExitFee = 0.01",
          "sql_queries": [
            "SELECT * FROM Unit_investment_Trusts WHERE ExitFee = 0.01"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Banking/attachment_2tab_val_products/attachment_2tab_val_products.sqlite",
      "db_dump": "CREATE TABLE Customers(\n    id INTEGER PRIMARY KEY,\n    CustomerName TEXT,\n    EmailAddress TEXT,\n    PhoneNumber VARCHAR(10),\n    AccountBalance REAL\n);\nCREATE TABLE Exchange_traded_Products(\n    id INTEGER PRIMARY KEY,\n    ProductName TEXT,\n    TickerSymbol TEXT,\n    AssetClass TEXT,\n    TotalAssets REAL,\n    ExitFee DECIMAL(5,2)\n);\nCREATE TABLE Orders(\n    OrderID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerId INTEGER,\n    ProductType TEXT,\n    Quantity INTEGER ,\n    Price PERSON,\n    DateOrdered DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (CustomerId) REFERENCES Customers(id)\n);\nCREATE TABLE Transactions(\n    TransactionId INTEGER PRIMARY KEY AUTOINCREMENT,\n    OrderId INTEGER,\n    Amount REAL,\n    Fees REAL,\n    PaymentMethod TEXT,\n    Status TEXT ,\n    ProcessDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (OrderId) REFERENCES Orders(OrderID)\n);\nCREATE TABLE Unit_investment_Trusts(\n    id INTEGER PRIMARY KEY,\n    TrustName TEXT,\n    TickerSymbol TEXT,\n    NetAssetValue REAL,\n    NumberOfUnits INTEGER,\n    ExitFee DECIMAL(5,2)\n);\n\nINSERT INTO \"Customers\" (id,CustomerName,EmailAddress,PhoneNumber,AccountBalance) VALUES (1,'John Doe','johndoe@example.com','1234567890',5000.0),(2,'Jane Smith','janesmith@example.com','0987654321',10000.0),(3,'Alice Johnson','alicejohnson@example.com','5555555555',15000.0),(4,'Bob Brown','bobbrown@example.com','5555555556',20000.0),(5,'Charlie Green','charliegreen@example.com','5555555557',25000.0);\nINSERT INTO \"Exchange_traded_Products\" (id,ProductName,TickerSymbol,AssetClass,TotalAssets,ExitFee) VALUES (1,'AAPL','AAPL','Equity',239.67,0.01),(2,'MSFT','MSFT','Equity',286.21,0.015),(3,'GOOG','GOOG','Equity',262.33,0.01),(4,'AMZN','AMZN','Equity',356.33,0.01),(5,'TSLA','TSLA','Equity',109.86,0.01);\nINSERT INTO \"Orders\" (OrderID,CustomerId,ProductType,Quantity,Price,DateOrdered) VALUES (1,1,'Exchange_traded_product',10,100,'2022-01-01 12:00:00'),(2,2,'Exchange_traded_product',5,120,'2022-01-01 12:01:00'),(3,3,'Exchange_traded_product',10,110,'2022-01-01 12:02:00'),(4,4,'Exchange_traded_product',15,130,'2022-01-01 12:03:00'),(5,5,'Exchange_traded_product',20,140,'2022-01-01 12:04:00');\nINSERT INTO \"Transactions\" (TransactionId,OrderId,Amount,Fees,PaymentMethod,Status,ProcessDate) VALUES (1,1,1000.0,20.0,'Debit Card','Completed','2022-01-01 12:00:00'),(2,2,600.0,12.0,'PayPal','Completed','2022-01-01 12:01:00'),(3,3,1100.0,22.0,'Bank Transfer','Completed','2022-01-01 12:02:00'),(4,4,1300.0,24.0,'Check','Completed','2022-01-01 12:03:00'),(5,5,1400.0,26.0,'Wire Transfer','Completed','2022-01-01 12:04:00');\nINSERT INTO \"Unit_investment_Trusts\" (id,TrustName,TickerSymbol,NetAssetValue,NumberOfUnits,ExitFee) VALUES (1,'ABCD','ABCD',10.0,100000,0.01),(2,'EFGH','EFGH',12.5,80000,0.015),(3,'IJKL','IJKL',8.2,50000,0.01),(4,'MNOP','MNOP',7.6,60000,0.015),(5,'QRST','QRST',9.8,75000,0.01);\n",
      "question": "Display exchange-traded products and unit investment trusts with an exit fee of 0.01. Show them in one table.",
      "gold_queries": [
        "SELECT Exchange_traded_Products.ProductName as name\r\nFROM Exchange_traded_Products\r\nWHERE Exchange_traded_Products.ExitFee = 0.01\r\nUNION\r\nSELECT Unit_investment_Trusts.TrustName as name\r\nFROM Unit_investment_Trusts\r\nWHERE Unit_investment_Trusts.ExitFee = 0.01",
        "SELECT Exchange_traded_Products.ProductName as name\r\nFROM Exchange_traded_Products\r\nUNION\r\nSELECT Unit_investment_Trusts.TrustName as name\r\nFROM Unit_investment_Trusts\r\nWHERE Unit_investment_Trusts.ExitFee = 0.01"
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Create a new table containing a selected subset of exchange-traded products and unit investment trusts, filtering by an exit fee of 0.01.",
          "sql_queries": [],
          "metrics": {
            "recall": 0.0,
            "precision": 0,
            "f1_score": 0,
            "num_queries": 0,
            "num_unique_queries": 0,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List the exchange-traded products and unit investment trusts with an exit fee column value of 0.01.  Display these in a single table.",
          "sql_queries": [
            "SELECT ProductName AS Name, TickerSymbol, AssetClass, ExitFee FROM Exchange_traded_Products WHERE ExitFee = 0.01\nUNION\nSELECT TrustName AS Name, TickerSymbol, 'Unit Investment Trust' AS AssetClass, ExitFee FROM Unit_investment_Trusts WHERE ExitFee = 0.01"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Combine the exchange-traded products and unit investment trusts tables where the exit fee is 0.01.",
          "sql_queries": [
            "SELECT ProductName AS Name, TickerSymbol, AssetClass, TotalAssets AS Assets, ExitFee FROM Exchange_traded_Products WHERE ExitFee = 0.01\nUNION\nSELECT TrustName AS Name, TickerSymbol, 'Unit Investment Trust' AS AssetClass, NetAssetValue * NumberOfUnits AS Assets, ExitFee FROM Unit_investment_Trusts WHERE ExitFee = 0.01"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Output a single table with two columns, one for exchange-traded products and one for unit investment trusts, both filtered using a condition of exit fee equal to 0.01.",
          "sql_queries": [
            "SELECT \n    NULL AS Exchange_traded_products, \n    TrustName AS Unit_investment_trusts \nFROM \n    Unit_investment_Trusts \nWHERE \n    ExitFee = 0.01",
            "SELECT \n    ProductName AS Exchange_traded_products, \n    NULL AS Unit_investment_trusts \nFROM \n    Exchange_traded_Products \nWHERE \n    ExitFee = 0.01"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve all exchange-traded products and unit investment trusts where exit fee is equal to 0.01 and present them in a single table.",
          "sql_queries": [
            "SELECT ProductName AS Name, TickerSymbol, AssetClass, TotalAssets AS Assets, ExitFee FROM Exchange_traded_Products WHERE ExitFee = 0.01\nUNION\nSELECT TrustName AS Name, TickerSymbol, 'Unit Investment Trust' AS AssetClass, NetAssetValue * NumberOfUnits AS Assets, ExitFee FROM Unit_investment_Trusts WHERE ExitFee = 0.01"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Education/attachment_1tab_ref_educational_methods/attachment_1tab_ref_educational_methods.sqlite",
      "db_dump": "CREATE TABLE Classes(\n    classID INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    startDate DATE,\n    endDate DATE,\n    EducatorID INT REFERENCES Educators(educatorID),\n    FOREIGN KEY (classID) REFERENCES Enrollments(classID));\nCREATE TABLE CourseMaterials(\n    materialID INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    url TEXT UNIQUE);\nCREATE TABLE Curriculums(\n    curriculumID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    EducatorID INT REFERENCES Educators(educatorID));\nCREATE TABLE Educators(\n    educatorID INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    subject TEXT);\nCREATE TABLE Enrollments(\n    enrollmentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StudentID INT REFERENCES Students(studentID),\n    classID INT REFERENCES Classes(classID),\n    courseMaterialID INT REFERENCES CourseMaterials(materialID));\nCREATE TABLE Lessons(\n    lessonID INTEGER PRIMARY KEY AUTOINCREMENT,\n    content TEXT,\n    educationalMethod TEXT,\n    curriculumID INT REFERENCES Curriculums(curriculumID),\n    classID INT REFERENCES Classes(classID));\nCREATE TABLE Students(\n    studentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    dateOfBirth DATE);\n\nINSERT INTO \"Classes\" (classID,title,startDate,endDate,EducatorID) VALUES (1,'Math Class A','2023-09-01','2023-12-20',1),(2,'English Class B','2023-09-01','2023-12-20',2);\nINSERT INTO \"CourseMaterials\" (materialID,title,url) VALUES (1,'Algebra Book','https://example.com/algebra-book'),(2,'Grammar Guide','https://example.com/grammar-guide');\nINSERT INTO \"Curriculums\" (curriculumID,name,EducatorID) VALUES (1,'Grade 6 Mathematics',1),(2,'Grade 7 English',2);\nINSERT INTO \"Educators\" (educatorID,firstName,lastName,subject) VALUES (1,'Michael','Johnson','Mathematics'),(2,'Emily','Williams','English');\nINSERT INTO \"Enrollments\" (enrollmentID,StudentID,classID,courseMaterialID) VALUES (1,1,1,1),(2,2,2,2);\nINSERT INTO \"Lessons\" (lessonID,content,educationalMethod,curriculumID,classID) VALUES (1,'Lesson on linear equations','Online Learning',1,1),(2,'Lesson on sentence structure','Online Learning',2,2),(3,'Introduction to algebra','Classroom Teaching',1,3),(4,'Vocabulary building','Classroom Teaching',2,4);\nINSERT INTO \"Students\" (studentID,firstName,lastName,dateOfBirth) VALUES (1,'John','Doe','2003-01-01'),(2,'Jane','Smith','2004-02-02');\n",
      "question": "What is the content of online and classroom lessons taught by Emily Williams? Show them in one table.",
      "gold_queries": [
        "SELECT Lessons.content \r\nFROM Lessons JOIN Curriculums ON Lessons.curriculumID = Curriculums.curriculumID JOIN Educators ON Educators.educatorID =  Curriculums.EducatorID\r\nWHERE (Lessons.educationalMethod = 'Online Learning' OR Lessons.educationalMethod = 'Classroom Teaching') AND Educators.firstName = 'Emily' AND Educators.lastName = 'Williams'"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Display content of lessons taught by Emily Williams,  categorized by educational method (Online Learning, Classroom Teaching).",
          "sql_queries": [
            "SELECT Lessons.content, Lessons.educationalMethod\nFROM Lessons\nJOIN Curriculums ON Lessons.curriculumID = Curriculums.curriculumID\nJOIN Educators ON Curriculums.EducatorID = Educators.educatorID\nWHERE Educators.firstName = 'Emily' AND Educators.lastName = 'Williams'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Find all lessons taught by Emily Williams.",
          "sql_queries": [
            "SELECT L.content, L.educationalMethod\nFROM Lessons L\nJOIN Classes C ON L.classID = C.classID\nJOIN Educators E ON C.EducatorID = E.educatorID\nWHERE E.firstName = 'Emily' AND E.lastName = 'Williams'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List lessons filtered by Emily Williams' name,  showing both online and classroom modalities.",
          "sql_queries": [
            "SELECT L.content, L.educationalMethod\nFROM Lessons L\nJOIN Curriculums C ON L.curriculumID = C.curriculumID\nJOIN Educators E ON C.EducatorID = E.educatorID\nWHERE E.firstName = 'Emily' AND E.lastName = 'Williams'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Identify lessons taught by Emily Williams with educational methods \"Online Learning\" or \"Classroom Teaching.\"",
          "sql_queries": [
            "SELECT T1.content \nFROM Lessons AS T1 \nJOIN Curriculums AS T2 ON T1.curriculumID = T2.curriculumID \nJOIN Educators AS T3 ON T2.EducatorID = T3.educatorID \nWHERE T3.firstName = 'Emily' AND T3.lastName = 'Williams' AND T1.educationalMethod IN ('Online Learning', 'Classroom Teaching')"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Retrieve content of lessons for types 'Online Learning' and 'Classroom Teaching' where the Educator is Emily Williams.",
          "sql_queries": [
            "SELECT L.content\nFROM Lessons L\nJOIN Classes C ON L.classID = C.classID\nJOIN Educators E ON C.EducatorID = E.educatorID\nWHERE L.educationalMethod IN ('Online Learning', 'Classroom Teaching') AND E.firstName = 'Emily' AND E.lastName = 'Williams'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Education/attachment_1tab_ref_educational_methods/attachment_1tab_ref_educational_methods.sqlite",
      "db_dump": "CREATE TABLE Classes(\n    classID INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    startDate DATE,\n    endDate DATE,\n    EducatorID INT REFERENCES Educators(educatorID),\n    FOREIGN KEY (classID) REFERENCES Enrollments(classID));\nCREATE TABLE CourseMaterials(\n    materialID INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    url TEXT UNIQUE);\nCREATE TABLE Curriculums(\n    curriculumID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    EducatorID INT REFERENCES Educators(educatorID));\nCREATE TABLE Educators(\n    educatorID INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    subject TEXT);\nCREATE TABLE Enrollments(\n    enrollmentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StudentID INT REFERENCES Students(studentID),\n    classID INT REFERENCES Classes(classID),\n    courseMaterialID INT REFERENCES CourseMaterials(materialID));\nCREATE TABLE Lessons(\n    lessonID INTEGER PRIMARY KEY AUTOINCREMENT,\n    content TEXT,\n    educationalMethod TEXT,\n    curriculumID INT REFERENCES Curriculums(curriculumID),\n    classID INT REFERENCES Classes(classID));\nCREATE TABLE Students(\n    studentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    dateOfBirth DATE);\n\nINSERT INTO \"Classes\" (classID,title,startDate,endDate,EducatorID) VALUES (1,'Math Class A','2023-09-01','2023-12-20',1),(2,'English Class B','2023-09-01','2023-12-20',2);\nINSERT INTO \"CourseMaterials\" (materialID,title,url) VALUES (1,'Algebra Book','https://example.com/algebra-book'),(2,'Grammar Guide','https://example.com/grammar-guide');\nINSERT INTO \"Curriculums\" (curriculumID,name,EducatorID) VALUES (1,'Grade 6 Mathematics',1),(2,'Grade 7 English',2);\nINSERT INTO \"Educators\" (educatorID,firstName,lastName,subject) VALUES (1,'Michael','Johnson','Mathematics'),(2,'Emily','Williams','English');\nINSERT INTO \"Enrollments\" (enrollmentID,StudentID,classID,courseMaterialID) VALUES (1,1,1,1),(2,2,2,2);\nINSERT INTO \"Lessons\" (lessonID,content,educationalMethod,curriculumID,classID) VALUES (1,'Lesson on linear equations','Online Learning',1,1),(2,'Lesson on sentence structure','Online Learning',2,2),(3,'Introduction to algebra','Classroom Teaching',1,3),(4,'Vocabulary building','Classroom Teaching',2,4);\nINSERT INTO \"Students\" (studentID,firstName,lastName,dateOfBirth) VALUES (1,'John','Doe','2003-01-01'),(2,'Jane','Smith','2004-02-02');\n",
      "question": "Provide content for all the online learning lessons and also the content of classroom teaching lessons taught by Emily Williams. Show them in one table.",
      "gold_queries": [
        "SELECT Lessons.content \r\nFROM Lessons JOIN Curriculums ON Lessons.curriculumID = Curriculums.curriculumID JOIN Educators ON Educators.educatorID =  Curriculums.EducatorID\r\nWHERE Lessons.educationalMethod = 'Online Learning' OR Lessons.educationalMethod = 'Classroom Teaching' AND Educators.firstName = 'Emily' AND Educators.lastName = 'Williams'"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Retrieve content for lessons taught by an educator with the name \"Emily Williams\", filtered by \"Online Learning\" and \"Classroom Teaching\" educational methods.",
          "sql_queries": [
            "SELECT L.content \nFROM Lessons L \nJOIN Curriculums C ON L.curriculumID = C.curriculumID \nJOIN Educators E ON C.EducatorID = E.educatorID \nWHERE E.firstName = 'Emily' AND E.lastName = 'Williams' \nAND L.educationalMethod IN ('Online Learning', 'Classroom Teaching')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve content for all lessons taught by an educator with the name \"Emily Williams\" regardless of educational method.",
          "sql_queries": [
            "SELECT content\nFROM Lessons\nJOIN Classes ON Lessons.classID = Classes.classID\nJOIN Educators ON Classes.EducatorID = Educators.educatorID\nWHERE Educators.firstName = 'Emily' AND Educators.lastName = 'Williams'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve content for all lessons associated with the \"Online Learning\" educational method.",
          "sql_queries": [
            "SELECT content FROM Lessons WHERE educationalMethod = 'Online Learning'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve content for lessons associated with the \"Online Learning\" educational method and additionally, lessons taught by an educator with the name \"Emily Williams\".",
          "sql_queries": [
            "SELECT content FROM Lessons WHERE educationalMethod = 'Online Learning' UNION SELECT content FROM Lessons WHERE classID IN (SELECT classID FROM Classes WHERE EducatorID = (SELECT educatorID FROM Educators WHERE firstName = 'Emily' AND lastName = 'Williams'))"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Education/attachment_1tab_ref_educational_methods/attachment_1tab_ref_educational_methods.sqlite",
      "db_dump": "CREATE TABLE Classes(\n    classID INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    startDate DATE,\n    endDate DATE,\n    EducatorID INT REFERENCES Educators(educatorID),\n    FOREIGN KEY (classID) REFERENCES Enrollments(classID));\nCREATE TABLE CourseMaterials(\n    materialID INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    url TEXT UNIQUE);\nCREATE TABLE Curriculums(\n    curriculumID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    EducatorID INT REFERENCES Educators(educatorID));\nCREATE TABLE Educators(\n    educatorID INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    subject TEXT);\nCREATE TABLE Enrollments(\n    enrollmentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StudentID INT REFERENCES Students(studentID),\n    classID INT REFERENCES Classes(classID),\n    courseMaterialID INT REFERENCES CourseMaterials(materialID));\nCREATE TABLE Lessons(\n    lessonID INTEGER PRIMARY KEY AUTOINCREMENT,\n    content TEXT,\n    educationalMethod TEXT,\n    curriculumID INT REFERENCES Curriculums(curriculumID),\n    classID INT REFERENCES Classes(classID));\nCREATE TABLE Students(\n    studentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    dateOfBirth DATE);\n\nINSERT INTO \"Classes\" (classID,title,startDate,endDate,EducatorID) VALUES (1,'Math Class A','2023-09-01','2023-12-20',1),(2,'English Class B','2023-09-01','2023-12-20',2);\nINSERT INTO \"CourseMaterials\" (materialID,title,url) VALUES (1,'Algebra Book','https://example.com/algebra-book'),(2,'Grammar Guide','https://example.com/grammar-guide');\nINSERT INTO \"Curriculums\" (curriculumID,name,EducatorID) VALUES (1,'Grade 6 Mathematics',1),(2,'Grade 7 English',2);\nINSERT INTO \"Educators\" (educatorID,firstName,lastName,subject) VALUES (1,'Michael','Johnson','Mathematics'),(2,'Emily','Williams','English');\nINSERT INTO \"Enrollments\" (enrollmentID,StudentID,classID,courseMaterialID) VALUES (1,1,1,1),(2,2,2,2);\nINSERT INTO \"Lessons\" (lessonID,content,educationalMethod,curriculumID,classID) VALUES (1,'Lesson on linear equations','Online Learning',1,1),(2,'Lesson on sentence structure','Online Learning',2,2),(3,'Introduction to algebra','Classroom Teaching',1,3),(4,'Vocabulary building','Classroom Teaching',2,4);\nINSERT INTO \"Students\" (studentID,firstName,lastName,dateOfBirth) VALUES (1,'John','Doe','2003-01-01'),(2,'Jane','Smith','2004-02-02');\n",
      "question": "Show the content of online lessons and classroom lessons taught by Emily Williams. Show them in one table.",
      "gold_queries": [
        "SELECT Lessons.content \r\nFROM Lessons JOIN Curriculums ON Lessons.curriculumID = Curriculums.curriculumID JOIN Educators ON Educators.educatorID =  Curriculums.EducatorID\r\nWHERE (Lessons.educationalMethod = 'Online Learning' OR Lessons.educationalMethod = 'Classroom Teaching') AND Educators.firstName = 'Emily' AND Educators.lastName = 'Williams'",
        "SELECT Lessons.content \r\nFROM Lessons JOIN Curriculums ON Lessons.curriculumID = Curriculums.curriculumID JOIN Educators ON Educators.educatorID =  Curriculums.EducatorID\r\nWHERE Lessons.educationalMethod = 'Online Learning' OR Lessons.educationalMethod = 'Classroom Teaching' AND Educators.firstName = 'Emily' AND Educators.lastName = 'Williams'"
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Create a single table listing the lessons given by Emily Williams, with columns for content and educational method, and filtered to include only online and classroom lessons.",
          "sql_queries": [
            "SELECT L.content, L.educationalMethod \nFROM Lessons L \nJOIN Curriculums C ON L.curriculumID = C.curriculumID \nJOIN Educators E ON C.EducatorID = E.educatorID \nWHERE E.firstName = 'Emily' AND E.lastName = 'Williams' \nAND L.educationalMethod IN ('Online Learning', 'Classroom Teaching')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve the content and educational methods of all lessons taught by Emily Williams, categorized by teaching method.",
          "sql_queries": [
            "SELECT Lessons.content, Lessons.educationalMethod\nFROM Lessons\nJOIN Curriculums ON Lessons.curriculumID = Curriculums.curriculumID\nJOIN Educators ON Curriculums.educatorID = Educators.educatorID\nWHERE Educators.firstName = 'Emily' AND Educators.lastName = 'Williams'\nORDER BY Lessons.educationalMethod"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Display a unified table containing the content of online and classroom lessons instructed by Emily Williams, distinguishing between the two methods within the table.",
          "sql_queries": [
            "SELECT L.content, L.educationalMethod\nFROM Lessons L\nJOIN Curriculums C ON L.curriculumID = C.curriculumID\nJOIN Educators E ON C.EducatorID = E.educatorID\nWHERE E.firstName = 'Emily' AND E.lastName = 'Williams'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Banking/attachment_2tab_val_products/attachment_2tab_val_products.sqlite",
      "db_dump": "CREATE TABLE Customers(\n    id INTEGER PRIMARY KEY,\n    CustomerName TEXT,\n    EmailAddress TEXT,\n    PhoneNumber VARCHAR(10),\n    AccountBalance REAL\n);\nCREATE TABLE Exchange_traded_Products(\n    id INTEGER PRIMARY KEY,\n    ProductName TEXT,\n    TickerSymbol TEXT,\n    AssetClass TEXT,\n    TotalAssets REAL,\n    ExitFee DECIMAL(5,2)\n);\nCREATE TABLE Orders(\n    OrderID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerId INTEGER,\n    ProductType TEXT,\n    Quantity INTEGER ,\n    Price PERSON,\n    DateOrdered DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (CustomerId) REFERENCES Customers(id)\n);\nCREATE TABLE Transactions(\n    TransactionId INTEGER PRIMARY KEY AUTOINCREMENT,\n    OrderId INTEGER,\n    Amount REAL,\n    Fees REAL,\n    PaymentMethod TEXT,\n    Status TEXT ,\n    ProcessDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (OrderId) REFERENCES Orders(OrderID)\n);\nCREATE TABLE Unit_investment_Trusts(\n    id INTEGER PRIMARY KEY,\n    TrustName TEXT,\n    TickerSymbol TEXT,\n    NetAssetValue REAL,\n    NumberOfUnits INTEGER,\n    ExitFee DECIMAL(5,2)\n);\n\nINSERT INTO \"Customers\" (id,CustomerName,EmailAddress,PhoneNumber,AccountBalance) VALUES (1,'John Doe','johndoe@example.com','1234567890',5000.0),(2,'Jane Smith','janesmith@example.com','0987654321',10000.0),(3,'Alice Johnson','alicejohnson@example.com','5555555555',15000.0),(4,'Bob Brown','bobbrown@example.com','5555555556',20000.0),(5,'Charlie Green','charliegreen@example.com','5555555557',25000.0);\nINSERT INTO \"Exchange_traded_Products\" (id,ProductName,TickerSymbol,AssetClass,TotalAssets,ExitFee) VALUES (1,'AAPL','AAPL','Equity',239.67,0.01),(2,'MSFT','MSFT','Equity',286.21,0.015),(3,'GOOG','GOOG','Equity',262.33,0.01),(4,'AMZN','AMZN','Equity',356.33,0.01),(5,'TSLA','TSLA','Equity',109.86,0.01);\nINSERT INTO \"Orders\" (OrderID,CustomerId,ProductType,Quantity,Price,DateOrdered) VALUES (1,1,'Exchange_traded_product',10,100,'2022-01-01 12:00:00'),(2,2,'Exchange_traded_product',5,120,'2022-01-01 12:01:00'),(3,3,'Exchange_traded_product',10,110,'2022-01-01 12:02:00'),(4,4,'Exchange_traded_product',15,130,'2022-01-01 12:03:00'),(5,5,'Exchange_traded_product',20,140,'2022-01-01 12:04:00');\nINSERT INTO \"Transactions\" (TransactionId,OrderId,Amount,Fees,PaymentMethod,Status,ProcessDate) VALUES (1,1,1000.0,20.0,'Debit Card','Completed','2022-01-01 12:00:00'),(2,2,600.0,12.0,'PayPal','Completed','2022-01-01 12:01:00'),(3,3,1100.0,22.0,'Bank Transfer','Completed','2022-01-01 12:02:00'),(4,4,1300.0,24.0,'Check','Completed','2022-01-01 12:03:00'),(5,5,1400.0,26.0,'Wire Transfer','Completed','2022-01-01 12:04:00');\nINSERT INTO \"Unit_investment_Trusts\" (id,TrustName,TickerSymbol,NetAssetValue,NumberOfUnits,ExitFee) VALUES (1,'ABCD','ABCD',10.0,100000,0.01),(2,'EFGH','EFGH',12.5,80000,0.015),(3,'IJKL','IJKL',8.2,50000,0.01),(4,'MNOP','MNOP',7.6,60000,0.015),(5,'QRST','QRST',9.8,75000,0.01);\n",
      "question": "What exchange-traded products and unit investment trusts have an exit fee of 0.01? Show them in one table.",
      "gold_queries": [
        "SELECT Exchange_traded_Products.ProductName as name\r\nFROM Exchange_traded_Products\r\nWHERE Exchange_traded_Products.ExitFee = 0.01\r\nUNION\r\nSELECT Unit_investment_Trusts.TrustName as name\r\nFROM Unit_investment_Trusts\r\nWHERE Unit_investment_Trusts.ExitFee = 0.01"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Return all distinct exchange-traded products and unit investment trusts having an exit fee of 0.01.",
          "sql_queries": [
            "SELECT DISTINCT ProductName FROM Exchange_traded_Products WHERE ExitFee = 0.01\nUNION\nSELECT DISTINCT TrustName FROM Unit_investment_Trusts WHERE ExitFee = 0.01"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Identify and list the exchange-traded products and unit investment trusts with an exit fee equal to 0.01, presenting the results in a single combined table.",
          "sql_queries": [
            "SELECT ProductName AS Name, TickerSymbol, 'Exchange_traded_Products' AS Type\nFROM Exchange_traded_Products\nWHERE ExitFee = 0.01\nUNION\nSELECT TrustName AS Name, TickerSymbol, 'Unit_investment_Trusts' AS Type\nFROM Unit_investment_Trusts\nWHERE ExitFee = 0.01"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Return a table containing all exchange-traded products and unit investment trusts with an exit fee of 0.01.",
          "sql_queries": [
            "SELECT ProductName, TickerSymbol FROM Exchange_traded_Products WHERE ExitFee = 0.01\nUNION\nSELECT TrustName, TickerSymbol FROM Unit_investment_Trusts WHERE ExitFee = 0.01"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Banking/attachment_1tab_ref_terms/attachment_1tab_ref_terms.sqlite",
      "db_dump": "CREATE TABLE AccountTypes (\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    TypeName TEXT UNIQUE\n);\nCREATE TABLE BankAccounts (\n    AccountNumber CHAR(10) PRIMARY KEY,\n    CustomerID INT,\n    OpenDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    CurrentBalance REAL ,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(ID)\n);\nCREATE TABLE Banks (\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    HeadQuarters TEXT\n);\nCREATE TABLE Customers (\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE,\n    Email TEXT UNIQUE\n);\nCREATE TABLE Loans (\n    LoanID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber CHAR(10),\n    Amount DECIMAL(15, 2),\n    StartDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    EndDate TIMESTAMP,\n    ForeignKeyAccountNumber CHAR(10) REFERENCES BankAccounts(AccountNumber),\n    FOREIGN KEY (ForeignKeyAccountNumber) REFERENCES BankAccounts(AccountNumber)\n);\nCREATE TABLE Terms (\n    TermId INTEGER PRIMARY KEY AUTOINCREMENT,\n    Description TEXT,\n    \"Value\" REAL,\n    AccountTypeID INT,\n    LOAN_ID INT,\n    FOREIGN KEY (AccountTypeID) REFERENCES AccountTypes(ID),\n    FOREIGN KEY (LOAN_ID) REFERENCES Loans(LoanID)\n);\n\nINSERT INTO \"AccountTypes\" (ID,TypeName) VALUES (1,'Checking'),(2,'Savings'),(3,'Money Market'),(4,'CD'),(5,'IRA');\nINSERT INTO \"BankAccounts\" (AccountNumber,CustomerID,OpenDate,CurrentBalance) VALUES ('1834293214',1,'2021-06-01 10:00:00',10000.0),('2834293214',2,'2021-07-01 10:00:00',20000.0),('3834293214',3,'2021-08-01 10:00:00',30000.0),('4834293214',4,'2021-09-01 10:00:00',40000.0),('5834293214',5,'2021-10-01 10:00:00',50000.0);\nINSERT INTO \"Banks\" (ID,Name,HeadQuarters) VALUES (1,'Bank A','New York'),(2,'Bank B','London'),(3,'Bank C','Paris'),(4,'Bank D','Tokyo'),(5,'Bank E','Los Angeles');\nINSERT INTO \"Customers\" (ID,FirstName,LastName,DateOfBirth,Email) VALUES (1,'John','Doe','1976-05-15','john.doe@example.com'),(2,'Jane','Smith','1980-08-20','jane.smith@example.com'),(3,'Peter','Black','1992-12-01','peter.black@example.com'),(4,'Alice','White','1985-03-17','alice.white@example.com'),(5,'Tom','Green','1995-07-05','tom.green@example.com');\nINSERT INTO \"Loans\" (LoanID,AccountNumber,Amount,StartDate,EndDate,ForeignKeyAccountNumber) VALUES (1,'1834293214',10000,'2021-06-01 10:00:00','2026-06-01 10:00:00','1834293214'),(2,'2834293214',15000,'2021-07-01 10:00:00','2027-07-01 10:00:00','2834293214'),(3,'3834293214',20000,'2021-08-01 10:00:00','2028-08-01 10:00:00','3834293214'),(4,'4834293214',25000,'2021-09-01 10:00:00','2029-09-01 10:00:00','4834293214'),(5,'5834293214',30000,'2021-10-01 10:00:00','2030-10-01 10:00:00','5834293214');\nINSERT INTO \"Terms\" (TermId,Description,Value,AccountTypeID,LOAN_ID) VALUES (1,'Monthly Interest Rate',0.05,1,1),(2,'Monthly Interest Rate',0.06,2,2),(3,'Annual Percentage Rate',0.03,1,1),(4,'Annual Percentage Rate',0.07,2,2),(5,'Some other value',0.05,3,3),(6,'Another term',0.04,4,4);\n",
      "question": "What are monthly interest rates of bank accounts with a balance of 20,000 and what are annual percentage rates of bank accounts with the same balance? Show them in one table.",
      "gold_queries": [
        "SELECT Terms.Value \r\nFROM Terms JOIN Loans ON Terms.LOAN_ID = Loans.LoanID JOIN BankAccounts ON Loans.ForeignKeyAccountNumber = BankAccounts.AccountNumber\r\nWHERE (Terms.Description = \"Monthly Interest Rate\" OR Terms.Description = \"Annual Percentage Rate\") AND BankAccounts.CurrentBalance = 20000.0"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Find the monthly interest rates for bank accounts containing 20,000 and their corresponding annual percentage rates in a combined table.",
          "sql_queries": [
            "SELECT T1.Description AS MonthlyInterestRate, T2.Description AS AnnualPercentageRate \nFROM Terms T1 \nJOIN Terms T2 \nON T1.LOAN_ID = T2.LOAN_ID \nWHERE T1.Description = 'Monthly Interest Rate' \nAND T2.Description = 'Annual Percentage Rate' \nAND T1.LOAN_ID = (SELECT LoanID FROM Loans WHERE ForeignKeyAccountNumber IN (SELECT AccountNumber FROM BankAccounts WHERE CurrentBalance = 20000))"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Present in a table format the monthly interest rates and annual percentage rates for every bank account having a balance of 20,000.",
          "sql_queries": [
            "SELECT \n    ba.AccountNumber, \n    t1.Value AS MonthlyInterestRate, \n    t2.Value AS AnnualPercentageRate\nFROM \n    BankAccounts ba\nJOIN \n    Terms t1 ON ba.AccountNumber = t1.LOAN_ID AND t1.Description = 'Monthly Interest Rate'\nJOIN \n    Terms t2 ON ba.AccountNumber = t2.LOAN_ID AND t2.Description = 'Annual Percentage Rate'\nWHERE \n    ba.CurrentBalance = 20000"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "What are the monthly interest rates and annual percentage rates for all bank accounts with a balance of 20,000, displayed in a single table?",
          "sql_queries": [
            "SELECT T.Value AS MonthlyInterestRate, T2.Value AS AnnualPercentageRate\nFROM Terms T\nJOIN Terms T2 ON T.LOAN_ID = T2.LOAN_ID\nJOIN Loans L ON T.LOAN_ID = L.LoanID\nJOIN BankAccounts BA ON L.AccountNumber = BA.AccountNumber\nWHERE BA.CurrentBalance = 20000\nAND T.Description = 'Monthly Interest Rate'\nAND T2.Description = 'Annual Percentage Rate'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "List the monthly interest rates and annual percentage rates of bank accounts with a balance of 20,000, organized into a single table.",
          "sql_queries": [
            "SELECT T.Description, T.Value\nFROM Terms T\nJOIN Loans L ON T.LOAN_ID = L.LoanID\nJOIN BankAccounts BA ON L.ForeignKeyAccountNumber = BA.AccountNumber\nWHERE BA.CurrentBalance = 20000\nAND T.Description IN ('Monthly Interest Rate', 'Annual Percentage Rate')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve and display in a single table the monthly interest rates and annual percentage rates associated with bank accounts having a balance of 20,000.",
          "sql_queries": [
            "SELECT T.Description, T.Value\nFROM Terms T\nWHERE T.AccountTypeID IN (\n    SELECT A.AccountTypeID\n    FROM AccountTypes A\n    JOIN BankAccounts B ON A.ID = A.AccountTypeID\n    WHERE B.CurrentBalance = 20000\n) AND T.Description IN ('Monthly Interest Rate', 'Annual Percentage Rate')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT T.Description, T.Value\nFROM Terms T\nWHERE T.AccountTypeID IN (\n    SELECT A.AccountTypeID\n    FROM AccountTypes A\n    JOIN BankAccounts B ON A.ID = A.AccountTypeID\n    WHERE B.CurrentBalance = 20000\n) AND T.Description IN ('Monthly Interest Rate', 'Annual Percentage Rate')",
                "original_exception": "no such column: A.AccountTypeID"
              }
            ],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [
          {
            "query": "SELECT T.Description, T.Value\nFROM Terms T\nWHERE T.AccountTypeID IN (\n    SELECT A.AccountTypeID\n    FROM AccountTypes A\n    JOIN BankAccounts B ON A.ID = A.AccountTypeID\n    WHERE B.CurrentBalance = 20000\n) AND T.Description IN ('Monthly Interest Rate', 'Annual Percentage Rate')",
            "original_exception": "no such column: A.AccountTypeID"
          }
        ],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Airport/attachment_1tab_val_development_projects/attachment_1tab_val_development_projects.sqlite",
      "db_dump": "CREATE TABLE Aircraft(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Model VARCHAR(50),\n    Capacity INTEGER,\n    Manufacturer VARCHAR(50),\n    Year INT);\nCREATE TABLE Development_Projects(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    ProjectName TEXT,\n    Increased_Capacity TEXT,\n    StartDate DATE,\n    EndDate DATE,\n    Cost REAL);\nCREATE TABLE Flight(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    DepartureTime TIME,\n    ArrivalTime TIME,\n    Origin VARCHAR(50),\n    Destination VARCHAR(50),\n    AircraftID INTEGER,\n    FOREIGN KEY (AircraftID) REFERENCES Aircraft(ID));\nCREATE TABLE Staff(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name VARCHAR(50),\n    Position VARCHAR(50),\n    Salary REAL,\n    HireDate DATE);\n\nINSERT INTO \"Aircraft\" (ID,Model,Capacity,Manufacturer,Year) VALUES (1,'Boeing 737 MAX',230,'Boeing',2022),(2,'Airbus A320neo',180,'Airbus',2021),(3,'Embraer E195-E2',120,'Embraer',2019),(4,'Bombardier CRJ900',90,'Bombardier',2018),(5,'De Havilland Canada DHC-8 Q400',78,'De Havilland Canada',2017);\nINSERT INTO \"Development_Projects\" (ID,ProjectName,Increased_Capacity,StartDate,EndDate,Cost) VALUES (1,'Airport Expansion','1000 Passengers per Day','2023-01-01','2023-12-31',1000000.0),(2,'Airport Expansion','500 Passengers per Day','2024-01-01','2024-12-31',800000.0),(3,'Renovation','1000 Passengers per Day','2023-07-01','2023-12-31',600000.0),(4,'Renovation','500 Passengers per Day','2024-01-01','2024-12-31',500000.0),(5,'Terminal Upgrade','200 Passengers per Day','2023-09-01','2023-12-31',400000.0);\nINSERT INTO \"Flight\" (ID,DepartureTime,ArrivalTime,Origin,Destination,AircraftID) VALUES (1,'07:00 AM','08:30 AM','New York','Los Angeles',1),(2,'09:00 AM','10:30 AM','Chicago','Miami',2),(3,'11:00 AM','12:30 PM','San Francisco','Honolulu',3),(4,'01:00 PM','03:30 PM','Dallas','Atlanta',4),(5,'03:00 PM','05:30 PM','Philadelphia','Orlando',5);\nINSERT INTO \"Staff\" (ID,Name,Position,Salary,HireDate) VALUES (1,'John Doe','Pilot',75000.0,'2021-01-01'),(2,'Jane Smith','Flight Attendant',50000.0,'2020-07-01'),(3,'Tom Johnson','Mechanic',55000.0,'2019-01-01'),(4,'Emily Brown','Air Traffic Controller',60000.0,'2018-01-01'),(5,'William Davis','Security Officer',40000.0,'2017-01-01');\n",
      "question": "Give me all the airport expansions and also give me all renovations that increased capacity to 1000 passengers per day. Show them in one table.",
      "gold_queries": [
        "SELECT Development_Projects.ProjectName \r\nFROM Development_Projects\r\nWHERE Development_Projects.ProjectName = \"Airport Expansion\" OR Development_Projects.ProjectName = \"Renovation\" AND Development_Projects.Increased_Capacity = \"1000 Passengers per Day\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List all 'Airport Expansion' and 'Renovation' projects with an increased capacity of 1000 passengers per day unified in a single table",
          "sql_queries": [
            "SELECT * FROM Development_Projects WHERE (ProjectName = 'Airport Expansion' OR ProjectName = 'Renovation') AND Increased_Capacity = '1000 Passengers per Day'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Generate a single table containing all entries from 'Airport Expansion' and 'Renovation' projects where the increased capacity is equal to 1000 passengers per day",
          "sql_queries": [
            "SELECT * FROM Development_Projects WHERE ProjectName IN ('Airport Expansion', 'Renovation') AND Increased_Capacity = '1000 Passengers per Day'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Combine the results of two separate queries: one for projects named 'Airport Expansion' and another for renovations increasing capacity by 1000 passengers per day into a single table",
          "sql_queries": [
            "SELECT ProjectName, Increased_Capacity, StartDate, EndDate, Cost\nFROM Development_Projects\nWHERE ProjectName = 'Airport Expansion'\nUNION\nSELECT ProjectName, Increased_Capacity, StartDate, EndDate, Cost\nFROM Development_Projects\nWHERE Increased_Capacity = '1000 Passengers per Day'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve all rows from Development_Projects where ProjectName = 'Airport Expansion' and all rows where ProjectName = 'Renovation' and Increased_Capacity = '1000 Passengers per Day'",
          "sql_queries": [
            "SELECT * FROM Development_Projects WHERE ProjectName = 'Airport Expansion' UNION SELECT * FROM Development_Projects WHERE ProjectName = 'Renovation' AND Increased_Capacity = '1000 Passengers per Day'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Present all records from the 'Airport Expansion' and 'Renovation' categories, filtering for projects specifically boosting capacity to 1000 passengers per day, in a consolidated table",
          "sql_queries": [
            "SELECT * FROM Development_Projects WHERE (ProjectName = 'Airport Expansion' OR ProjectName = 'Renovation') AND Increased_Capacity = '1000 Passengers per Day'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Airport/attachment_1tab_val_development_projects/attachment_1tab_val_development_projects.sqlite",
      "db_dump": "CREATE TABLE Aircraft(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Model VARCHAR(50),\n    Capacity INTEGER,\n    Manufacturer VARCHAR(50),\n    Year INT);\nCREATE TABLE Development_Projects(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    ProjectName TEXT,\n    Increased_Capacity TEXT,\n    StartDate DATE,\n    EndDate DATE,\n    Cost REAL);\nCREATE TABLE Flight(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    DepartureTime TIME,\n    ArrivalTime TIME,\n    Origin VARCHAR(50),\n    Destination VARCHAR(50),\n    AircraftID INTEGER,\n    FOREIGN KEY (AircraftID) REFERENCES Aircraft(ID));\nCREATE TABLE Staff(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name VARCHAR(50),\n    Position VARCHAR(50),\n    Salary REAL,\n    HireDate DATE);\n\nINSERT INTO \"Aircraft\" (ID,Model,Capacity,Manufacturer,Year) VALUES (1,'Boeing 737 MAX',230,'Boeing',2022),(2,'Airbus A320neo',180,'Airbus',2021),(3,'Embraer E195-E2',120,'Embraer',2019),(4,'Bombardier CRJ900',90,'Bombardier',2018),(5,'De Havilland Canada DHC-8 Q400',78,'De Havilland Canada',2017);\nINSERT INTO \"Development_Projects\" (ID,ProjectName,Increased_Capacity,StartDate,EndDate,Cost) VALUES (1,'Airport Expansion','1000 Passengers per Day','2023-01-01','2023-12-31',1000000.0),(2,'Airport Expansion','500 Passengers per Day','2024-01-01','2024-12-31',800000.0),(3,'Renovation','1000 Passengers per Day','2023-07-01','2023-12-31',600000.0),(4,'Renovation','500 Passengers per Day','2024-01-01','2024-12-31',500000.0),(5,'Terminal Upgrade','200 Passengers per Day','2023-09-01','2023-12-31',400000.0);\nINSERT INTO \"Flight\" (ID,DepartureTime,ArrivalTime,Origin,Destination,AircraftID) VALUES (1,'07:00 AM','08:30 AM','New York','Los Angeles',1),(2,'09:00 AM','10:30 AM','Chicago','Miami',2),(3,'11:00 AM','12:30 PM','San Francisco','Honolulu',3),(4,'01:00 PM','03:30 PM','Dallas','Atlanta',4),(5,'03:00 PM','05:30 PM','Philadelphia','Orlando',5);\nINSERT INTO \"Staff\" (ID,Name,Position,Salary,HireDate) VALUES (1,'John Doe','Pilot',75000.0,'2021-01-01'),(2,'Jane Smith','Flight Attendant',50000.0,'2020-07-01'),(3,'Tom Johnson','Mechanic',55000.0,'2019-01-01'),(4,'Emily Brown','Air Traffic Controller',60000.0,'2018-01-01'),(5,'William Davis','Security Officer',40000.0,'2017-01-01');\n",
      "question": "Give me both airport expansions that increased capacity to 1000 passengers per day and renovations that increased capacity to the same number. Show them in one table.",
      "gold_queries": [
        "SELECT Development_Projects.ProjectName \r\nFROM Development_Projects\r\nWHERE (Development_Projects.ProjectName = \"Airport Expansion\" OR Development_Projects.ProjectName = \"Renovation\") AND Development_Projects.Increased_Capacity = \"1000 Passengers per Day\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Present in a single table, all Development_Projects where ProjectName is either 'Airport Expansion' or 'Renovation' and Increased_Capacity is '1000 Passengers per Day'.",
          "sql_queries": [
            "SELECT * FROM Development_Projects WHERE ProjectName IN ('Airport Expansion', 'Renovation') AND Increased_Capacity = '1000 Passengers per Day'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Combine the results of two separate queries: one for Airport Expansions with Increased_Capacity '1000 Passengers per Day' and another for Renovations with the same Increased_Capacity.",
          "sql_queries": [
            "SELECT * FROM Development_Projects WHERE ProjectName = 'Airport Expansion' AND Increased_Capacity = '1000 Passengers per Day'\nUNION\nSELECT * FROM Development_Projects WHERE ProjectName = 'Renovation' AND Increased_Capacity = '1000 Passengers per Day'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Find all Development_Projects with Increased_Capacity = '1000 Passengers per Day', filtering for ProjectName entries that are 'Airport Expansion' or 'Renovation'.",
          "sql_queries": [
            "SELECT ProjectName, Increased_Capacity, StartDate, EndDate, Cost \nFROM Development_Projects \nWHERE Increased_Capacity = '1000 Passengers per Day' AND ProjectName IN ('Airport Expansion', 'Renovation')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Airport/attachment_1tab_val_development_projects/attachment_1tab_val_development_projects.sqlite",
      "db_dump": "CREATE TABLE Aircraft(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Model VARCHAR(50),\n    Capacity INTEGER,\n    Manufacturer VARCHAR(50),\n    Year INT);\nCREATE TABLE Development_Projects(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    ProjectName TEXT,\n    Increased_Capacity TEXT,\n    StartDate DATE,\n    EndDate DATE,\n    Cost REAL);\nCREATE TABLE Flight(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    DepartureTime TIME,\n    ArrivalTime TIME,\n    Origin VARCHAR(50),\n    Destination VARCHAR(50),\n    AircraftID INTEGER,\n    FOREIGN KEY (AircraftID) REFERENCES Aircraft(ID));\nCREATE TABLE Staff(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name VARCHAR(50),\n    Position VARCHAR(50),\n    Salary REAL,\n    HireDate DATE);\n\nINSERT INTO \"Aircraft\" (ID,Model,Capacity,Manufacturer,Year) VALUES (1,'Boeing 737 MAX',230,'Boeing',2022),(2,'Airbus A320neo',180,'Airbus',2021),(3,'Embraer E195-E2',120,'Embraer',2019),(4,'Bombardier CRJ900',90,'Bombardier',2018),(5,'De Havilland Canada DHC-8 Q400',78,'De Havilland Canada',2017);\nINSERT INTO \"Development_Projects\" (ID,ProjectName,Increased_Capacity,StartDate,EndDate,Cost) VALUES (1,'Airport Expansion','1000 Passengers per Day','2023-01-01','2023-12-31',1000000.0),(2,'Airport Expansion','500 Passengers per Day','2024-01-01','2024-12-31',800000.0),(3,'Renovation','1000 Passengers per Day','2023-07-01','2023-12-31',600000.0),(4,'Renovation','500 Passengers per Day','2024-01-01','2024-12-31',500000.0),(5,'Terminal Upgrade','200 Passengers per Day','2023-09-01','2023-12-31',400000.0);\nINSERT INTO \"Flight\" (ID,DepartureTime,ArrivalTime,Origin,Destination,AircraftID) VALUES (1,'07:00 AM','08:30 AM','New York','Los Angeles',1),(2,'09:00 AM','10:30 AM','Chicago','Miami',2),(3,'11:00 AM','12:30 PM','San Francisco','Honolulu',3),(4,'01:00 PM','03:30 PM','Dallas','Atlanta',4),(5,'03:00 PM','05:30 PM','Philadelphia','Orlando',5);\nINSERT INTO \"Staff\" (ID,Name,Position,Salary,HireDate) VALUES (1,'John Doe','Pilot',75000.0,'2021-01-01'),(2,'Jane Smith','Flight Attendant',50000.0,'2020-07-01'),(3,'Tom Johnson','Mechanic',55000.0,'2019-01-01'),(4,'Emily Brown','Air Traffic Controller',60000.0,'2018-01-01'),(5,'William Davis','Security Officer',40000.0,'2017-01-01');\n",
      "question": "Give me all airport expansions and renovations that increased capacity to 1000 passengers per day. Show them in one table.",
      "gold_queries": [
        "SELECT Development_Projects.ProjectName \r\nFROM Development_Projects\r\nWHERE (Development_Projects.ProjectName = \"Airport Expansion\" OR Development_Projects.ProjectName = \"Renovation\") AND Development_Projects.Increased_Capacity = \"1000 Passengers per Day\"",
        "SELECT Development_Projects.ProjectName \r\nFROM Development_Projects\r\nWHERE Development_Projects.ProjectName = \"Airport Expansion\" OR Development_Projects.ProjectName = \"Renovation\" AND Development_Projects.Increased_Capacity = \"1000 Passengers per Day\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Return a combined view consisting of projects labeled as \"Airport Expansion\" and \"Renovation\" that aimed to increase capacity by  '1000 Passengers per Day'.",
          "sql_queries": [
            "SELECT * FROM Development_Projects WHERE ProjectName IN ('Airport Expansion', 'Renovation') AND Increased_Capacity = '1000 Passengers per Day'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all Development_Projects where ProjectName is 'Airport Expansion' and Increased_Capacity = '1000 Passengers per Day'.",
          "sql_queries": [
            "SELECT * FROM Development_Projects WHERE ProjectName = 'Airport Expansion' AND Increased_Capacity = '1000 Passengers per Day'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all Development_Projects where ProjectName is 'Renovation' and Increased_Capacity = '1000 Passengers per Day'.",
          "sql_queries": [
            "SELECT ProjectName, Increased_Capacity, StartDate, EndDate, Cost FROM Development_Projects WHERE ProjectName = 'Renovation' AND Increased_Capacity = '1000 Passengers per Day'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Find Development_Projects with '1000 Passengers per Day' as Increased_Capacity, regardless of ProjectName if those projects are classified as airport expansions or renovations.",
          "sql_queries": [
            "SELECT ProjectName, Increased_Capacity, StartDate, EndDate, Cost\nFROM Development_Projects\nWHERE Increased_Capacity = '1000 Passengers per Day'\nAND (ProjectName LIKE '%Airport Expansion%'\nOR ProjectName LIKE '%Renovation%')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all Development_Projects where ProjectName is either 'Airport Expansion' or 'Renovation' and Increased_Capacity = '1000 Passengers per Day'.",
          "sql_queries": [
            "SELECT * FROM Development_Projects WHERE ProjectName IN ('Airport Expansion', 'Renovation') AND Increased_Capacity = '1000 Passengers per Day'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Airport/attachment_2tab_val_arrival_facilities/attachment_2tab_val_arrival_facilities.sqlite",
      "db_dump": "CREATE TABLE arrival_hall (\n    id INTEGER PRIMARY KEY,\n    terminal_id INTEGER REFERENCES terminal(id),\n    Arrival_Hall TEXT,\n    Maximum_Capacity INT,\n    number_of_gates INT\n);\nCREATE TABLE baggage_reclaim (\n    id INTEGER PRIMARY KEY,\n    terminal_id INTEGER REFERENCES terminal(id),\n    Baggage_Reclaim TEXT,\n    Maximum_Capacity INT,\n    number_of_carousels INT\n);\nCREATE TABLE flight (\n    id INTEGER PRIMARY KEY,\n    terminal_id INTEGER REFERENCES terminal(id)\n);\nCREATE TABLE terminal (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    location TEXT\n);\n\nINSERT INTO \"arrival_hall\" (id,terminal_id,Arrival_Hall,Maximum_Capacity,number_of_gates) VALUES (1,1,'A Hall 1',500,10),(2,1,'A Hall 2',600,8),(3,2,'B Hall 1',700,12),(4,2,'B Hall 2',900,15);\nINSERT INTO \"baggage_reclaim\" (id,terminal_id,Baggage_Reclaim,Maximum_Capacity,number_of_carousels) VALUES (1,1,'A Reclaim 1',500,3),(2,1,'A Reclaim 2',600,5),(3,2,'B Reclaim 1',700,4),(4,2,'B Reclaim 2',900,7);\nINSERT INTO \"flight\" (id,terminal_id) VALUES (1,1),(2,2);\nINSERT INTO \"terminal\" (id,name,location) VALUES (1,'Terminal A','Gate A1'),(2,'Terminal B','Gate B2');\n",
      "question": "Show a list of all arrival halls and also provide a list of baggage reclaims with a maximum capacity of 500. Show them in one table.",
      "gold_queries": [
        "SELECT arrival_hall.Arrival_Hall as name\r\nFROM arrival_hall\r\nUNION\r\nSELECT baggage_reclaim.Baggage_Reclaim as name\r\nFROM baggage_reclaim\r\nWHERE baggage_reclaim.Maximum_Capacity = 500"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Create a single table that includes all columns from arrival_hall and a subset of columns from baggage_reclaim where Maximum_Capacity = 500",
          "sql_queries": [
            "SELECT arrival_hall.*, baggage_reclaim.Baggage_Reclaim, baggage_reclaim.number_of_carousels \nFROM arrival_hall \nJOIN baggage_reclaim ON arrival_hall.terminal_id = baggage_reclaim.terminal_id \nWHERE baggage_reclaim.Maximum_Capacity = 500"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Query the database for arrival_hall and baggage_reclaim data meeting specified criteria, presenting the results as a concatenated list.",
          "sql_queries": [
            "SELECT Arrival_Hall || ', ' || Baggage_Reclaim AS Concatenated_Data\nFROM arrival_hall\nJOIN baggage_reclaim ON arrival_hall.terminal_id = baggage_reclaim.terminal_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Combine all data from arrival_hall and baggage_reclaim into one table, filtering baggage_reclaim rows by Maximum_Capacity = 500",
          "sql_queries": [
            "SELECT * FROM arrival_hall UNION SELECT * FROM baggage_reclaim WHERE Maximum_Capacity = 500"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Output two separate tables: one containing all arrival_hall data, and one containing only baggage_reclaim data with Maximum_Capacity = 500",
          "sql_queries": [
            "SELECT * FROM arrival_hall",
            "SELECT * FROM baggage_reclaim WHERE Maximum_Capacity = 500"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve all rows from arrival_hall and a subset of rows from baggage_reclaim where Maximum_Capacity = 500",
          "sql_queries": [
            "SELECT * FROM arrival_hall UNION SELECT * FROM baggage_reclaim WHERE Maximum_Capacity = 500"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 6,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Airport/attachment_2tab_val_arrival_facilities/attachment_2tab_val_arrival_facilities.sqlite",
      "db_dump": "CREATE TABLE arrival_hall (\n    id INTEGER PRIMARY KEY,\n    terminal_id INTEGER REFERENCES terminal(id),\n    Arrival_Hall TEXT,\n    Maximum_Capacity INT,\n    number_of_gates INT\n);\nCREATE TABLE baggage_reclaim (\n    id INTEGER PRIMARY KEY,\n    terminal_id INTEGER REFERENCES terminal(id),\n    Baggage_Reclaim TEXT,\n    Maximum_Capacity INT,\n    number_of_carousels INT\n);\nCREATE TABLE flight (\n    id INTEGER PRIMARY KEY,\n    terminal_id INTEGER REFERENCES terminal(id)\n);\nCREATE TABLE terminal (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    location TEXT\n);\n\nINSERT INTO \"arrival_hall\" (id,terminal_id,Arrival_Hall,Maximum_Capacity,number_of_gates) VALUES (1,1,'A Hall 1',500,10),(2,1,'A Hall 2',600,8),(3,2,'B Hall 1',700,12),(4,2,'B Hall 2',900,15);\nINSERT INTO \"baggage_reclaim\" (id,terminal_id,Baggage_Reclaim,Maximum_Capacity,number_of_carousels) VALUES (1,1,'A Reclaim 1',500,3),(2,1,'A Reclaim 2',600,5),(3,2,'B Reclaim 1',700,4),(4,2,'B Reclaim 2',900,7);\nINSERT INTO \"flight\" (id,terminal_id) VALUES (1,1),(2,2);\nINSERT INTO \"terminal\" (id,name,location) VALUES (1,'Terminal A','Gate A1'),(2,'Terminal B','Gate B2');\n",
      "question": "Which arrival halls have a maximum capacity of 500 and which baggage reclaims have the same capacity? Show them in one table.",
      "gold_queries": [
        "SELECT arrival_hall.Arrival_Hall as name\r\nFROM arrival_hall\r\nWHERE arrival_hall.Maximum_Capacity = 500\r\nUNION\r\nSELECT baggage_reclaim.Baggage_Reclaim as name\r\nFROM baggage_reclaim\r\nWHERE baggage_reclaim.Maximum_Capacity = 500"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Find arrival halls with maximum capacity 500 and corresponding baggage reclaim locations with the same maximum capacity.",
          "sql_queries": [
            "SELECT T1.Arrival_Hall, T2.Baggage_Reclaim \nFROM arrival_hall AS T1 \nJOIN baggage_reclaim AS T2 ON T1.terminal_id = T2.terminal_id \nWHERE T1.Maximum_Capacity = 500 AND T2.Maximum_Capacity = 500"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Retrieve a list of arrival hall names with a maximum capacity of 500, and for each, list the corresponding baggage reclaim names with the same maximum capacity.",
          "sql_queries": [
            "SELECT ah.Arrival_Hall, br.Baggage_Reclaim\nFROM arrival_hall ah\nJOIN baggage_reclaim br ON ah.terminal_id = br.terminal_id\nWHERE ah.Maximum_Capacity = 500 AND br.Maximum_Capacity = 500"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "List arrival halls and baggage reclaims where \"Maximum_Capacity\" equals 500 in a combined table.",
          "sql_queries": [
            "SELECT Arrival_Hall AS Facility FROM arrival_hall WHERE Maximum_Capacity = 500\nUNION\nSELECT Baggage_Reclaim AS Facility FROM baggage_reclaim WHERE Maximum_Capacity = 500"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Identify arrival halls and baggage reclaims with a maximum capacity of 500, displaying them in a single table.",
          "sql_queries": [
            "SELECT Arrival_Hall AS Name, Maximum_Capacity FROM arrival_hall WHERE Maximum_Capacity = 500\nUNION\nSELECT Baggage_Reclaim AS Name, Maximum_Capacity FROM baggage_reclaim WHERE Maximum_Capacity = 500"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Generate a table showing arrival halls with a maximum capacity of 500 and their associated baggage reclaims with matching capacity.",
          "sql_queries": [
            "SELECT ah.Arrival_Hall, br.Baggage_Reclaim\nFROM arrival_hall ah\nJOIN terminal t ON ah.terminal_id = t.id\nJOIN baggage_reclaim br ON br.terminal_id = t.id AND br.Maximum_Capacity = ah.Maximum_Capacity\nWHERE ah.Maximum_Capacity = 500"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.8,
        "f1_score": 0.888888888888889,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 4
    },
    {
      "db_file": "data/attachment/Airport/attachment_2tab_val_airport_dining/attachment_2tab_val_airport_dining.sqlite",
      "db_dump": "CREATE TABLE Bar(\n    barID INTEGER PRIMARY KEY AUTOINCREMENT,\n    airportID INTEGER,\n    name TEXT,\n    location TEXT,\n    capacity INTEGER ,\n    openingHours TEXT\n);\nCREATE TABLE Employee(\n    employeeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    position TEXT,\n    hireDate DATE,\n    salary REAL \n);\nCREATE TABLE Flight(\n    flightID INTEGER PRIMARY KEY AUTOINCREMENT,\n    airline TEXT,\n    departureAirport TEXT,\n    arrivalAirport TEXT,\n    date TIMESTAMP,\n    duration NUMERIC \n);\nCREATE TABLE Passenger(\n    passengerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    birthdate DATE,\n    nationality TEXT\n);\nCREATE TABLE Restaurant(\n    restaurantID INTEGER PRIMARY KEY AUTOINCREMENT,\n    airportID INTEGER,\n    name TEXT,\n    location TEXT,\n    type TEXT,\n    openingHours TEXT\n);\n\nINSERT INTO \"Bar\" (barID,airportID,name,location,capacity,openingHours) VALUES (1,1,'Gateway Lounge','Concourse A',50,'9 AM to 11 PM'),(2,2,'Beer Garden','Concourse B',75,'11 AM to 9 PM'),(3,3,'Whiskey Sky','Concourse C',100,'10 AM to 8 PM'),(4,4,'Rooftop Wine Bar','Concourse D',70,'8 AM to 6 PM'),(5,5,'Sunset Margarita Bar','Concourse E',80,'7 AM to 7 PM');\nINSERT INTO \"Employee\" (employeeID,name,position,hireDate,salary) VALUES (1,'John Doe','Pilot','2020-06-01',100000.0),(2,'Jane Smith','Flight Attendant','2021-05-01',50000.0),(3,'Bob Johnson','Mechanic','2019-07-01',60000.0),(4,'Emily Davis','Customer Service Representative','2022-08-01',40000.0),(5,'Chris Brown','Security Officer','2018-09-01',35000.0);\nINSERT INTO \"Flight\" (flightID,airline,departureAirport,arrivalAirport,date,duration) VALUES (1,'United','EWR','IAH','2023-08-01 06:00:00',4),(2,'Delta','ATL','LAX','2023-08-02 07:00:00',5),(3,'American Airlines','DFW','MIA','2023-08-03 08:00:00',4),(4,'Southwest','MCO','PHX','2023-08-04 09:00:00',3),(5,'Alaska Airlines','SEA','PDX','2023-08-05 10:00:00',2);\nINSERT INTO \"Passenger\" (passengerID,firstName,lastName,birthdate,nationality) VALUES (1,'Alexander','Smith','1990-01-15','USA'),(2,'Samantha','Johnson','1995-02-20','UK'),(3,'David','Williams','1988-03-25','Canada'),(4,'Emma','Martinez','2000-04-05','Spain'),(5,'Michael','Davis','1992-05-10','Australia');\nINSERT INTO \"Restaurant\" (restaurantID,airportID,name,location,type,openingHours) VALUES (1,1,'Grand Central Oyster Bar','Terminal A','Seafood','9 AM to 11 PM'),(2,2,'The Flying Pizza','Terminal B','Italian','11 AM to 9 PM'),(3,3,'Taste of Texas BBQ','Terminal C','BBQ','10 AM to 8 PM'),(4,4,'Café de la Maison','Terminal D','French','8 AM to 6 PM'),(5,5,'Green Leaf Salad Bar','Terminal E','Salad','7 AM to 7 PM');\n",
      "question": "Show all the restaurants and bars which open from 9AM to 11PM. Show them in one table.",
      "gold_queries": [
        "SELECT Restaurant.name\r\nFROM Restaurant\r\nWHERE Restaurant.openingHours = \"9 AM to 11 PM\"\r\nUNION\r\nSELECT Bar.name\r\nFROM Bar\r\nWHERE Bar.openingHours = \"9 AM to 11 PM\"",
        "SELECT Restaurant.name\r\nFROM Restaurant\r\nUNION\r\nSELECT Bar.name\r\nFROM Bar\r\nWHERE Bar.openingHours = \"9 AM to 11 PM\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Combine the results of two separate queries: one for bars open from 9 AM to 11 PM, and another for restaurants open during those hours.",
          "sql_queries": [
            "SELECT name, location FROM Bar WHERE openingHours = '9 AM to 11 PM'\nUNION\nSELECT name, location FROM Restaurant WHERE openingHours = '9 AM to 11 PM'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Present a single table containing details of all bars and restaurants with operating hours of 9 AM to 11 PM.",
          "sql_queries": [
            "SELECT name, location, openingHours FROM Bar WHERE openingHours = '9 AM to 11 PM' UNION SELECT name, location, openingHours FROM Restaurant WHERE openingHours = '9 AM to 11 PM'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve all rows from Bar and Restaurant tables where openingHours is '9 AM to 11 PM'.",
          "sql_queries": [
            "SELECT * FROM Bar WHERE openingHours = '9 AM to 11 PM' UNION SELECT * FROM Restaurant WHERE openingHours = '9 AM to 11 PM'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Display all bars and restaurants with opening hours between 9:00 AM and 11:00 PM.",
          "sql_queries": [
            "SELECT name, openingHours FROM Bar WHERE openingHours BETWEEN '9 AM to 11 PM' AND '11 AM to 9 PM' UNION SELECT name, openingHours FROM Restaurant WHERE openingHours BETWEEN '9 AM to 11 PM' AND '11 AM to 9 PM'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all establishments (bars or restaurants) that have operating hours from 9 AM and close at 11 PM.",
          "sql_queries": [
            "SELECT name FROM Bar WHERE openingHours = '9 AM to 11 PM' UNION SELECT name FROM Restaurant WHERE openingHours = '9 AM to 11 PM'"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Find all bars and restaurants whose opening hours specify a start time of 9 AM and an end time of 11 PM.",
          "sql_queries": [
            "SELECT name FROM Bar WHERE openingHours = '9 AM to 11 PM' UNION SELECT name FROM Restaurant WHERE openingHours = '9 AM to 11 PM'"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Select records from the Bar and Restaurant tables where the openingHours field contains the text \"9 AM to 11 PM\".",
          "sql_queries": [
            "SELECT * FROM Bar WHERE openingHours = '9 AM to 11 PM' \nUNION \nSELECT * FROM Restaurant WHERE openingHours = '9 AM to 11 PM'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.16666666666666666,
        "f1_score": 0.25,
        "num_queries": 7,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/attachment/Airport/attachment_2tab_val_arrival_facilities/attachment_2tab_val_arrival_facilities.sqlite",
      "db_dump": "CREATE TABLE arrival_hall (\n    id INTEGER PRIMARY KEY,\n    terminal_id INTEGER REFERENCES terminal(id),\n    Arrival_Hall TEXT,\n    Maximum_Capacity INT,\n    number_of_gates INT\n);\nCREATE TABLE baggage_reclaim (\n    id INTEGER PRIMARY KEY,\n    terminal_id INTEGER REFERENCES terminal(id),\n    Baggage_Reclaim TEXT,\n    Maximum_Capacity INT,\n    number_of_carousels INT\n);\nCREATE TABLE flight (\n    id INTEGER PRIMARY KEY,\n    terminal_id INTEGER REFERENCES terminal(id)\n);\nCREATE TABLE terminal (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    location TEXT\n);\n\nINSERT INTO \"arrival_hall\" (id,terminal_id,Arrival_Hall,Maximum_Capacity,number_of_gates) VALUES (1,1,'A Hall 1',500,10),(2,1,'A Hall 2',600,8),(3,2,'B Hall 1',700,12),(4,2,'B Hall 2',900,15);\nINSERT INTO \"baggage_reclaim\" (id,terminal_id,Baggage_Reclaim,Maximum_Capacity,number_of_carousels) VALUES (1,1,'A Reclaim 1',500,3),(2,1,'A Reclaim 2',600,5),(3,2,'B Reclaim 1',700,4),(4,2,'B Reclaim 2',900,7);\nINSERT INTO \"flight\" (id,terminal_id) VALUES (1,1),(2,2);\nINSERT INTO \"terminal\" (id,name,location) VALUES (1,'Terminal A','Gate A1'),(2,'Terminal B','Gate B2');\n",
      "question": "List arrival halls and baggage reclaims with a maximum capacity of 500. Show them in one table.",
      "gold_queries": [
        "SELECT arrival_hall.Arrival_Hall as name\r\nFROM arrival_hall\r\nWHERE arrival_hall.Maximum_Capacity = 500\r\nUNION\r\nSELECT baggage_reclaim.Baggage_Reclaim as name\r\nFROM baggage_reclaim\r\nWHERE baggage_reclaim.Maximum_Capacity = 500",
        "SELECT arrival_hall.Arrival_Hall as name\r\nFROM arrival_hall\r\nUNION\r\nSELECT baggage_reclaim.Baggage_Reclaim as name\r\nFROM baggage_reclaim\r\nWHERE baggage_reclaim.Maximum_Capacity = 500"
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List arrival halls and baggage reclaims with a maximum capacity of 500, concatenated into a single column.",
          "sql_queries": [
            "SELECT Arrival_Hall || ' - ' || Baggage_Reclaim AS Combined_Name\nFROM arrival_hall\nJOIN baggage_reclaim ON arrival_hall.terminal_id = baggage_reclaim.terminal_id\nWHERE arrival_hall.Maximum_Capacity = 500 AND baggage_reclaim.Maximum_Capacity = 500"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List arrival halls and baggage reclaims with a maximum capacity of 500, grouped by terminal ID.",
          "sql_queries": [
            "SELECT terminal_id, MAX(CASE WHEN Arrival_Hall IS NOT NULL THEN Arrival_Hall END) AS Arrival_Hall, MAX(CASE WHEN Baggage_Reclaim IS NOT NULL THEN Baggage_Reclaim END) AS Baggage_Reclaim\nFROM (\n    SELECT terminal_id, Arrival_Hall, NULL AS Baggage_Reclaim, Maximum_Capacity\n    FROM arrival_hall\n    UNION ALL\n    SELECT terminal_id, NULL AS Arrival_Hall, Baggage_Reclaim, Maximum_Capacity\n    FROM baggage_reclaim\n) subquery\nWHERE Maximum_Capacity = 500\nGROUP BY terminal_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List arrival halls and baggage reclaims with a maximum capacity of 500, arranged in separate columns.",
          "sql_queries": [
            "SELECT Arrival_Hall FROM arrival_hall WHERE Maximum_Capacity = 500\nUNION ALL\nSELECT Baggage_Reclaim FROM baggage_reclaim WHERE Maximum_Capacity = 500"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.3333333333333333,
        "f1_score": 0.4,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Airport/attachment_2tab_val_airport_dining/attachment_2tab_val_airport_dining.sqlite",
      "db_dump": "CREATE TABLE Bar(\n    barID INTEGER PRIMARY KEY AUTOINCREMENT,\n    airportID INTEGER,\n    name TEXT,\n    location TEXT,\n    capacity INTEGER ,\n    openingHours TEXT\n);\nCREATE TABLE Employee(\n    employeeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    position TEXT,\n    hireDate DATE,\n    salary REAL \n);\nCREATE TABLE Flight(\n    flightID INTEGER PRIMARY KEY AUTOINCREMENT,\n    airline TEXT,\n    departureAirport TEXT,\n    arrivalAirport TEXT,\n    date TIMESTAMP,\n    duration NUMERIC \n);\nCREATE TABLE Passenger(\n    passengerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    birthdate DATE,\n    nationality TEXT\n);\nCREATE TABLE Restaurant(\n    restaurantID INTEGER PRIMARY KEY AUTOINCREMENT,\n    airportID INTEGER,\n    name TEXT,\n    location TEXT,\n    type TEXT,\n    openingHours TEXT\n);\n\nINSERT INTO \"Bar\" (barID,airportID,name,location,capacity,openingHours) VALUES (1,1,'Gateway Lounge','Concourse A',50,'9 AM to 11 PM'),(2,2,'Beer Garden','Concourse B',75,'11 AM to 9 PM'),(3,3,'Whiskey Sky','Concourse C',100,'10 AM to 8 PM'),(4,4,'Rooftop Wine Bar','Concourse D',70,'8 AM to 6 PM'),(5,5,'Sunset Margarita Bar','Concourse E',80,'7 AM to 7 PM');\nINSERT INTO \"Employee\" (employeeID,name,position,hireDate,salary) VALUES (1,'John Doe','Pilot','2020-06-01',100000.0),(2,'Jane Smith','Flight Attendant','2021-05-01',50000.0),(3,'Bob Johnson','Mechanic','2019-07-01',60000.0),(4,'Emily Davis','Customer Service Representative','2022-08-01',40000.0),(5,'Chris Brown','Security Officer','2018-09-01',35000.0);\nINSERT INTO \"Flight\" (flightID,airline,departureAirport,arrivalAirport,date,duration) VALUES (1,'United','EWR','IAH','2023-08-01 06:00:00',4),(2,'Delta','ATL','LAX','2023-08-02 07:00:00',5),(3,'American Airlines','DFW','MIA','2023-08-03 08:00:00',4),(4,'Southwest','MCO','PHX','2023-08-04 09:00:00',3),(5,'Alaska Airlines','SEA','PDX','2023-08-05 10:00:00',2);\nINSERT INTO \"Passenger\" (passengerID,firstName,lastName,birthdate,nationality) VALUES (1,'Alexander','Smith','1990-01-15','USA'),(2,'Samantha','Johnson','1995-02-20','UK'),(3,'David','Williams','1988-03-25','Canada'),(4,'Emma','Martinez','2000-04-05','Spain'),(5,'Michael','Davis','1992-05-10','Australia');\nINSERT INTO \"Restaurant\" (restaurantID,airportID,name,location,type,openingHours) VALUES (1,1,'Grand Central Oyster Bar','Terminal A','Seafood','9 AM to 11 PM'),(2,2,'The Flying Pizza','Terminal B','Italian','11 AM to 9 PM'),(3,3,'Taste of Texas BBQ','Terminal C','BBQ','10 AM to 8 PM'),(4,4,'Café de la Maison','Terminal D','French','8 AM to 6 PM'),(5,5,'Green Leaf Salad Bar','Terminal E','Salad','7 AM to 7 PM');\n",
      "question": "Show all the restaurants regardless of opening hours and just those bars open from 9AM to 11PM. Show them in one table.",
      "gold_queries": [
        "SELECT Restaurant.name\r\nFROM Restaurant\r\nUNION\r\nSELECT Bar.name\r\nFROM Bar\r\nWHERE Bar.openingHours = \"9 AM to 11 PM\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Combine data from both \"Restaurant\" and \"Bar\" tables, filtering for open restaurants and bars between 9 AM and 11 PM, and display the result in a single table.",
          "sql_queries": [
            "SELECT name, location, openingHours FROM Restaurant WHERE openingHours = '9 AM to 11 PM' UNION SELECT name, location, openingHours FROM Bar WHERE openingHours = '9 AM to 11 PM'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Return a unified table showing all restaurants and bars satisfying the given opening hours criteria.",
          "sql_queries": [
            "SELECT name, location, type AS category, openingHours FROM Restaurant WHERE openingHours = '9 AM to 11 PM'\nUNION\nSELECT name, location, 'Bar' AS category, openingHours FROM Bar WHERE openingHours = '9 AM to 11 PM'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Generate a table encompassing all restaurants and bars, regardless of opening hours, with an indication of those open between 9 AM and 11 PM marked or highlighted.",
          "sql_queries": [
            "SELECT \n    name AS establishment_name,\n    location,\n    type,\n    CASE \n        WHEN openingHours = '9 AM to 11 PM' THEN 'Highlighted'\n        ELSE 'Not Highlighted'\n    END AS hours_status\nFROM \n    Restaurant\nUNION ALL\nSELECT \n    name AS establishment_name,\n    location,\n    'Bar' AS type,\n    CASE \n        WHEN openingHours = '9 AM to 11 PM' THEN 'Highlighted'\n        ELSE 'Not Highlighted'\n    END AS hours_status\nFROM \n    Bar"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Display all restaurants and bars open between 9 AM and 11 PM, in a single table.",
          "sql_queries": [
            "SELECT name, location, type, openingHours FROM Restaurant WHERE openingHours = '9 AM to 11 PM' UNION SELECT name, location, 'Bar' AS type, openingHours FROM Bar WHERE openingHours = '9 AM to 11 PM'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Present a table containing all restaurants, followed by a separate table listing bars open during the specified hours.",
          "sql_queries": [
            "SELECT name, location, type, openingHours FROM Restaurant",
            "SELECT name, location, capacity, openingHours FROM Bar WHERE openingHours = '7 AM to 7 PM'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Airport/attachment_2tab_val_airport_personnel/attachment_2tab_val_airport_personnel.sqlite",
      "db_dump": "CREATE TABLE Air_traffic_controller(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Experience INT ,\n    Salary TEXT,\n    Training_Center TEXT\n);\nCREATE TABLE Flight(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Date DATE,\n    Time TIME,\n    Destination TEXT,\n    Pilot_id INTEGER,\n    FOREIGN KEY (Pilot_id) REFERENCES Pilots(id)\n);\nCREATE TABLE Ground_staff(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Experience INT ,\n    Salary TEXT,\n    Role TEXT\n);\nCREATE TABLE Pilots(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    License_Number TEXT,\n    Total_Flights INT \n);\nCREATE TABLE Planes(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Model TEXT,\n    Registration_number TEXT,\n    Capacity INT ,\n    Current_Location INTEGER,\n    FOREIGN KEY (Current_Location) REFERENCES Runway(id)\n);\nCREATE TABLE Runway(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Length REAL,\n    Width REAL,\n    Location TEXT\n);\n\nINSERT INTO \"Air_traffic_controller\" (id,Name,Experience,Salary,Training_Center) VALUES (1,'John Doe',8,'60000 per year','ATC Academy'),(2,'Jane Smith',12,'70000 per year','Aviation Institute');\nINSERT INTO \"Flight\" (id,Date,Time,Destination,Pilot_id) VALUES (1,'2022-01-01','10:00:00','New York',1),(2,'2022-01-02','15:00:00','Los Angeles',2);\nINSERT INTO \"Ground_staff\" (id,Name,Experience,Salary,Role) VALUES (1,'Mike Johnson',5,'60000 per year','Baggage Handler'),(2,'Emma Brown',3,'55000 per year','Gate Agent');\nINSERT INTO \"Pilots\" (id,Name,License_Number,Total_Flights) VALUES (1,'Tom Williams','ABCD1234',300),(2,'Linda Davis','EFGH5678',500);\nINSERT INTO \"Planes\" (id,Model,Registration_number,Capacity,Current_Location) VALUES (1,'Boeing 737','N12345',200,1),(2,'Airbus A320','N67890',220,2);\nINSERT INTO \"Runway\" (id,Length,Width,Location) VALUES (1,9000.0,150.0,'Chicago O''Hare International Airport'),(2,8000.0,140.0,'Dallas/Fort Worth International Airport');\n",
      "question": "Please list all air traffic controllers and also display ground staff members who earn $60,000 annually. Show them in one table.",
      "gold_queries": [
        "SELECT Air_traffic_controller.name\r\nFROM Air_traffic_controller\r\nUNION\r\nSELECT Ground_staff.name\r\nFROM Ground_staff\r\nWHERE Ground_staff.Salary = \"60000 per year\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Retrieve a table with two columns: \"Name\" from Air_traffic_controller and \"Name\" from Ground_staff",
          "sql_queries": [
            "SELECT ATC.Name, GS.Name \nFROM Air_traffic_controller ATC, Ground_staff GS"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Present all Air_traffic_controller records alongside a list of Ground_staff members with a salary of 60,000 dollars.",
          "sql_queries": [
            "SELECT * FROM Air_traffic_controller UNION SELECT * FROM Ground_staff WHERE Salary = '60000 per year'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Create a single table containing all Air_traffic_controller records and a subset of Ground_staff records whose Salary is '60000 per year'.",
          "sql_queries": [
            "SELECT * FROM Air_traffic_controller UNION SELECT * FROM Ground_staff WHERE Salary = '60000 per year'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all records from Air_traffic_controller and Ground_staff where Salary is equal to '60000 per year'",
          "sql_queries": [
            "SELECT * FROM Air_traffic_controller WHERE Salary = '60000 per year' UNION SELECT * FROM Ground_staff WHERE Salary = '60000 per year'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Display all records from Air_traffic_controller and Ground_staff where Salary is equal to '60,000 per year'",
          "sql_queries": [
            "SELECT * FROM Air_traffic_controller WHERE Salary = '60000 per year' UNION SELECT * FROM Ground_staff WHERE Salary = '60000 per year'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Airport/attachment_2tab_val_airport_personnel/attachment_2tab_val_airport_personnel.sqlite",
      "db_dump": "CREATE TABLE Air_traffic_controller(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Experience INT ,\n    Salary TEXT,\n    Training_Center TEXT\n);\nCREATE TABLE Flight(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Date DATE,\n    Time TIME,\n    Destination TEXT,\n    Pilot_id INTEGER,\n    FOREIGN KEY (Pilot_id) REFERENCES Pilots(id)\n);\nCREATE TABLE Ground_staff(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Experience INT ,\n    Salary TEXT,\n    Role TEXT\n);\nCREATE TABLE Pilots(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    License_Number TEXT,\n    Total_Flights INT \n);\nCREATE TABLE Planes(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Model TEXT,\n    Registration_number TEXT,\n    Capacity INT ,\n    Current_Location INTEGER,\n    FOREIGN KEY (Current_Location) REFERENCES Runway(id)\n);\nCREATE TABLE Runway(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Length REAL,\n    Width REAL,\n    Location TEXT\n);\n\nINSERT INTO \"Air_traffic_controller\" (id,Name,Experience,Salary,Training_Center) VALUES (1,'John Doe',8,'60000 per year','ATC Academy'),(2,'Jane Smith',12,'70000 per year','Aviation Institute');\nINSERT INTO \"Flight\" (id,Date,Time,Destination,Pilot_id) VALUES (1,'2022-01-01','10:00:00','New York',1),(2,'2022-01-02','15:00:00','Los Angeles',2);\nINSERT INTO \"Ground_staff\" (id,Name,Experience,Salary,Role) VALUES (1,'Mike Johnson',5,'60000 per year','Baggage Handler'),(2,'Emma Brown',3,'55000 per year','Gate Agent');\nINSERT INTO \"Pilots\" (id,Name,License_Number,Total_Flights) VALUES (1,'Tom Williams','ABCD1234',300),(2,'Linda Davis','EFGH5678',500);\nINSERT INTO \"Planes\" (id,Model,Registration_number,Capacity,Current_Location) VALUES (1,'Boeing 737','N12345',200,1),(2,'Airbus A320','N67890',220,2);\nINSERT INTO \"Runway\" (id,Length,Width,Location) VALUES (1,9000.0,150.0,'Chicago O''Hare International Airport'),(2,8000.0,140.0,'Dallas/Fort Worth International Airport');\n",
      "question": "Display the air traffic controllers and ground staff whose salary is $60,000 per year. Show them in one table.",
      "gold_queries": [
        "SELECT Air_traffic_controller.name\r\nFROM Air_traffic_controller\r\nWHERE Air_traffic_controller.Salary = \"60000 per year\"\r\nUNION\r\nSELECT Ground_staff.name\r\nFROM Ground_staff\r\nWHERE Ground_staff.Salary = \"60000 per year\"",
        "SELECT Air_traffic_controller.name\r\nFROM Air_traffic_controller\r\nUNION\r\nSELECT Ground_staff.name\r\nFROM Ground_staff\r\nWHERE Ground_staff.Salary = \"60000 per year\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "SELECT * FROM Ground_staff WHERE Salary = '$60,000 per year';",
          "sql_queries": [
            "SELECT * FROM Ground_staff WHERE Salary = '60000 per year'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "with a salary of '$60,000 per year'",
          "sql_queries": [
            "SELECT Name FROM Air_traffic_controller WHERE Salary = '60000 per year'\nUNION\nSELECT Name FROM Ground_staff WHERE Salary = '60000 per year'"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "and Ground_staff",
          "sql_queries": [
            "SELECT Name, Experience, Salary, Role FROM Ground_staff"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "who earn a yearly salary of $60,000.",
          "sql_queries": [
            "SELECT Name FROM Air_traffic_controller WHERE Salary = '60000 per year' UNION SELECT Name FROM Ground_staff WHERE Salary = '60000 per year'"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Combine data from Air_traffic_controller and Ground_staff tables,",
          "sql_queries": [
            "SELECT Name, Experience, Salary, Training_Center, Role \nFROM Air_traffic_controller \nUNION \nSELECT Name, Experience, Salary, NULL, Role \nFROM Ground_staff"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT Name, Experience, Salary, Training_Center, Role \nFROM Air_traffic_controller \nUNION \nSELECT Name, Experience, Salary, NULL, Role \nFROM Ground_staff",
                "original_exception": "no such column: Role"
              }
            ],
            "all_found": false
          }
        },
        {
          "interpretation": "whose Salary equals '$60,000 per year'",
          "sql_queries": [
            "SELECT Name FROM Air_traffic_controller WHERE Salary = '60000 per year' UNION SELECT Name FROM Ground_staff WHERE Salary = '60000 per year'"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Show details of all Air_traffic_controller",
          "sql_queries": [
            "SELECT Name, Experience, Salary, Training_Center FROM Air_traffic_controller"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "SELECT * FROM Air_traffic_controller WHERE Salary = '$60,000 per year'",
          "sql_queries": [
            "SELECT * FROM Air_traffic_controller WHERE Salary = '60000 per year'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Display all columns of Air_traffic_controller",
          "sql_queries": [
            "SELECT Name, Experience, Salary, Training_Center FROM Air_traffic_controller"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve a combined table of Air_traffic_controller and Ground_staff",
          "sql_queries": [
            "SELECT Name, Experience, Salary FROM Air_traffic_controller UNION SELECT Name, Experience, Salary FROM Ground_staff"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "with salaries equal to '$60,000 per year'.",
          "sql_queries": [
            "SELECT Name, Experience, Salary, Role \nFROM Ground_staff \nWHERE Salary = '60000 per year'",
            "SELECT Name, Experience, Salary, Training_Center \nFROM Air_traffic_controller \nWHERE Salary = '60000 per year'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "filtering for records where Salary = '$60,000 per year'.",
          "sql_queries": [
            "SELECT Name, Experience, Salary, Role FROM Ground_staff WHERE Salary = '60000 per year'",
            "SELECT Name, Experience, Salary, Training_Center FROM Air_traffic_controller WHERE Salary = '60000 per year'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "UNION",
          "sql_queries": [
            "SELECT Name FROM Air_traffic_controller UNION SELECT Name FROM Ground_staff"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List both Air_traffic_controller and Ground_staff records",
          "sql_queries": [
            "SELECT Name, Experience, Salary, Training_Center FROM Air_traffic_controller UNION SELECT Name, Experience, Salary, Role FROM Ground_staff"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 11,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.14285714285714285,
        "f1_score": 0.22222222222222224,
        "num_queries": 16,
        "num_unique_queries": 14,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [
          {
            "query": "SELECT Name, Experience, Salary, Training_Center, Role \nFROM Air_traffic_controller \nUNION \nSELECT Name, Experience, Salary, NULL, Role \nFROM Ground_staff",
            "original_exception": "no such column: Role"
          }
        ],
        "all_found": false
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/attachment/Airport/attachment_2tab_val_airport_personnel/attachment_2tab_val_airport_personnel.sqlite",
      "db_dump": "CREATE TABLE Air_traffic_controller(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Experience INT ,\n    Salary TEXT,\n    Training_Center TEXT\n);\nCREATE TABLE Flight(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Date DATE,\n    Time TIME,\n    Destination TEXT,\n    Pilot_id INTEGER,\n    FOREIGN KEY (Pilot_id) REFERENCES Pilots(id)\n);\nCREATE TABLE Ground_staff(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Experience INT ,\n    Salary TEXT,\n    Role TEXT\n);\nCREATE TABLE Pilots(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    License_Number TEXT,\n    Total_Flights INT \n);\nCREATE TABLE Planes(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Model TEXT,\n    Registration_number TEXT,\n    Capacity INT ,\n    Current_Location INTEGER,\n    FOREIGN KEY (Current_Location) REFERENCES Runway(id)\n);\nCREATE TABLE Runway(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Length REAL,\n    Width REAL,\n    Location TEXT\n);\n\nINSERT INTO \"Air_traffic_controller\" (id,Name,Experience,Salary,Training_Center) VALUES (1,'John Doe',8,'60000 per year','ATC Academy'),(2,'Jane Smith',12,'70000 per year','Aviation Institute');\nINSERT INTO \"Flight\" (id,Date,Time,Destination,Pilot_id) VALUES (1,'2022-01-01','10:00:00','New York',1),(2,'2022-01-02','15:00:00','Los Angeles',2);\nINSERT INTO \"Ground_staff\" (id,Name,Experience,Salary,Role) VALUES (1,'Mike Johnson',5,'60000 per year','Baggage Handler'),(2,'Emma Brown',3,'55000 per year','Gate Agent');\nINSERT INTO \"Pilots\" (id,Name,License_Number,Total_Flights) VALUES (1,'Tom Williams','ABCD1234',300),(2,'Linda Davis','EFGH5678',500);\nINSERT INTO \"Planes\" (id,Model,Registration_number,Capacity,Current_Location) VALUES (1,'Boeing 737','N12345',200,1),(2,'Airbus A320','N67890',220,2);\nINSERT INTO \"Runway\" (id,Length,Width,Location) VALUES (1,9000.0,150.0,'Chicago O''Hare International Airport'),(2,8000.0,140.0,'Dallas/Fort Worth International Airport');\n",
      "question": "can you show both the air traffic controllers and ground staff members whose annual salary is $60,000? Show them in one table.",
      "gold_queries": [
        "SELECT Air_traffic_controller.name\r\nFROM Air_traffic_controller\r\nWHERE Air_traffic_controller.Salary = \"60000 per year\"\r\nUNION\r\nSELECT Ground_staff.name\r\nFROM Ground_staff\r\nWHERE Ground_staff.Salary = \"60000 per year\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Select Name, Experience, Salary from Ground_staff WHERE Salary = '60000 per year'",
          "sql_queries": [
            "SELECT Name, Experience, Salary FROM Ground_staff WHERE Salary = '60000 per year'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Select Name, Experience, Salary from Air_traffic_controller WHERE Salary = '60000 per year'",
          "sql_queries": [
            "SELECT Name, Experience, Salary FROM Air_traffic_controller WHERE Salary = '60000 per year'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "UNION",
          "sql_queries": [
            "SELECT Name, Experience FROM Air_traffic_controller UNION SELECT Name, Experience FROM Ground_staff"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Showing the combined results",
          "sql_queries": [
            "SELECT Name, Experience, Salary, Training_Center FROM Air_traffic_controller UNION SELECT Name, Experience, Salary, Role FROM Ground_staff"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Airport/attachment_2tab_val_airport_dining/attachment_2tab_val_airport_dining.sqlite",
      "db_dump": "CREATE TABLE Bar(\n    barID INTEGER PRIMARY KEY AUTOINCREMENT,\n    airportID INTEGER,\n    name TEXT,\n    location TEXT,\n    capacity INTEGER ,\n    openingHours TEXT\n);\nCREATE TABLE Employee(\n    employeeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    position TEXT,\n    hireDate DATE,\n    salary REAL \n);\nCREATE TABLE Flight(\n    flightID INTEGER PRIMARY KEY AUTOINCREMENT,\n    airline TEXT,\n    departureAirport TEXT,\n    arrivalAirport TEXT,\n    date TIMESTAMP,\n    duration NUMERIC \n);\nCREATE TABLE Passenger(\n    passengerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    birthdate DATE,\n    nationality TEXT\n);\nCREATE TABLE Restaurant(\n    restaurantID INTEGER PRIMARY KEY AUTOINCREMENT,\n    airportID INTEGER,\n    name TEXT,\n    location TEXT,\n    type TEXT,\n    openingHours TEXT\n);\n\nINSERT INTO \"Bar\" (barID,airportID,name,location,capacity,openingHours) VALUES (1,1,'Gateway Lounge','Concourse A',50,'9 AM to 11 PM'),(2,2,'Beer Garden','Concourse B',75,'11 AM to 9 PM'),(3,3,'Whiskey Sky','Concourse C',100,'10 AM to 8 PM'),(4,4,'Rooftop Wine Bar','Concourse D',70,'8 AM to 6 PM'),(5,5,'Sunset Margarita Bar','Concourse E',80,'7 AM to 7 PM');\nINSERT INTO \"Employee\" (employeeID,name,position,hireDate,salary) VALUES (1,'John Doe','Pilot','2020-06-01',100000.0),(2,'Jane Smith','Flight Attendant','2021-05-01',50000.0),(3,'Bob Johnson','Mechanic','2019-07-01',60000.0),(4,'Emily Davis','Customer Service Representative','2022-08-01',40000.0),(5,'Chris Brown','Security Officer','2018-09-01',35000.0);\nINSERT INTO \"Flight\" (flightID,airline,departureAirport,arrivalAirport,date,duration) VALUES (1,'United','EWR','IAH','2023-08-01 06:00:00',4),(2,'Delta','ATL','LAX','2023-08-02 07:00:00',5),(3,'American Airlines','DFW','MIA','2023-08-03 08:00:00',4),(4,'Southwest','MCO','PHX','2023-08-04 09:00:00',3),(5,'Alaska Airlines','SEA','PDX','2023-08-05 10:00:00',2);\nINSERT INTO \"Passenger\" (passengerID,firstName,lastName,birthdate,nationality) VALUES (1,'Alexander','Smith','1990-01-15','USA'),(2,'Samantha','Johnson','1995-02-20','UK'),(3,'David','Williams','1988-03-25','Canada'),(4,'Emma','Martinez','2000-04-05','Spain'),(5,'Michael','Davis','1992-05-10','Australia');\nINSERT INTO \"Restaurant\" (restaurantID,airportID,name,location,type,openingHours) VALUES (1,1,'Grand Central Oyster Bar','Terminal A','Seafood','9 AM to 11 PM'),(2,2,'The Flying Pizza','Terminal B','Italian','11 AM to 9 PM'),(3,3,'Taste of Texas BBQ','Terminal C','BBQ','10 AM to 8 PM'),(4,4,'Café de la Maison','Terminal D','French','8 AM to 6 PM'),(5,5,'Green Leaf Salad Bar','Terminal E','Salad','7 AM to 7 PM');\n",
      "question": "Show both restaurants and bars any of which is open between 9AM and 11PM. Show them in one table.",
      "gold_queries": [
        "SELECT Restaurant.name\r\nFROM Restaurant\r\nWHERE Restaurant.openingHours = \"9 AM to 11 PM\"\r\nUNION\r\nSELECT Bar.name\r\nFROM Bar\r\nWHERE Bar.openingHours = \"9 AM to 11 PM\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List all bars and restaurants open between 9:00 AM and 11:00 PM.",
          "sql_queries": [
            "SELECT name, location, openingHours FROM Bar WHERE openingHours LIKE '%9 AM to 11 PM%' UNION SELECT name, location, openingHours FROM Restaurant WHERE openingHours LIKE '%9 AM to 11 PM%'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Show establishments (restaurants or bars) where the opening hours start before 9:00 AM and end after 11:00 PM.",
          "sql_queries": [
            "SELECT name \nFROM Bar \nWHERE openingHours LIKE '%AM to %PM' AND SUBSTR(openingHours, 1, INSTR(openingHours, ' ') - 1) < '9' AND SUBSTR(openingHours, INSTR(openingHours, 'to') + 3) > '11'\nUNION\nSELECT name \nFROM Restaurant \nWHERE openingHours LIKE '%AM to %PM' AND SUBSTR(openingHours, 1, INSTR(openingHours, ' ') - 1) < '9' AND SUBSTR(openingHours, INSTR(openingHours, 'to') + 3) > '11'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Return a single table containing a combined list of open bars and restaurants, with time periods from 9:00 AM to 11:00 PM.",
          "sql_queries": [
            "SELECT name, location, openingHours FROM Bar WHERE openingHours LIKE '%9 AM to 11 PM%' UNION SELECT name, location, openingHours FROM Restaurant WHERE openingHours LIKE '%9 AM to 11 PM%'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Display all restaurants and bars whose opening hours overlap with the 9:00 AM to 11:00 PM range.",
          "sql_queries": [
            "SELECT name, location, openingHours FROM Bar WHERE openingHours LIKE '%9 AM to 11 PM%' OR openingHours LIKE '%7 AM to 11 PM%' OR openingHours LIKE '%9 AM to 7 PM%' OR openingHours LIKE '%8 AM to 11 PM%' OR openingHours LIKE '%9 AM to 8 PM%' OR openingHours LIKE '%10 AM to 11 PM%' UNION SELECT name, location, openingHours FROM Restaurant WHERE openingHours LIKE '%9 AM to 11 PM%' OR openingHours LIKE '%7 AM to 11 PM%' OR openingHours LIKE '%9 AM to 7 PM%' OR openingHours LIKE '%8 AM to 11 PM%' OR openingHours LIKE '%9 AM to 8 PM%' OR openingHours LIKE '%10 AM to 11 PM%'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve a combined table showing both bars and restaurants that are open at any point between 9:00 AM and 11:00 PM.",
          "sql_queries": [
            "SELECT name, location, openingHours FROM Bar WHERE openingHours LIKE '%9 AM%' OR openingHours LIKE '%11 PM%' \nUNION \nSELECT name, location, openingHours FROM Restaurant WHERE openingHours LIKE '%9 AM%' OR openingHours LIKE '%11 PM%'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Entertainment/attachment_1tab_val_sequential_art/attachment_1tab_val_sequential_art.sqlite",
      "db_dump": "CREATE TABLE Authors(\n    AuthorID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT\n);\nCREATE TABLE Comics(\n    ComicID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    SequentialArt VARCHAR(255) ,\n    ReleaseDate DATE,\n    PublisherId INTEGER,\n    AuthorId INTEGER,\n    FOREIGN KEY (AuthorId) REFERENCES Authors(AuthorID),\n    FOREIGN KEY (PublisherId) REFERENCES Publisher(PublisherID)\n);\nCREATE TABLE Movie(\n    MovieID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    DirectorName TEXT,\n    ReleaseDate DATE\n);\nCREATE TABLE Publisher(\n    PublisherID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT\n);\n\nINSERT INTO \"Authors\" (AuthorID,Name) VALUES (1,'John Doe'),(2,'Jane Smith'),(3,'Alice Johnson'),(4,'Bob Brown'),(5,'Charlie White');\nINSERT INTO \"Comics\" (ComicID,Title,SequentialArt,ReleaseDate,PublisherId,AuthorId) VALUES (1,'The Walking Dead','Comic Book','2019-08-01',1,1),(2,'Saga','Comic Book','2016-03-17',2,2),(3,'Watchmen','Graphic Novel','2019-02-28',1,3),(4,'Y: The Last Man','Graphic Novel','2019-06-20',3,4),(5,'V for Vendetta','Graphic Novel','2019-05-01',4,5),(6,'Hellboy','Comic Book','2019-07-05',2,6),(7,'Superman','Comic Book','2019-09-02',3,7);\nINSERT INTO \"Movie\" (MovieID,Title,DirectorName,ReleaseDate) VALUES (1,'Inception','Christopher Nolan','2010-07-16'),(2,'Interstellar','Christopher Nolan','2014-11-07'),(3,'The Dark Knight','Christopher Nolan','2008-07-18'),(4,'Memento','Christopher Nolan','2000-06-22'),(5,'Fight Club','David Fincher','1999-10-15');\nINSERT INTO \"Publisher\" (PublisherID,Name) VALUES (1,'BOOM Studios'),(2,'DC Comics'),(3,'Marvel Comics'),(4,'Image Comics'),(5,'Dark Horse Comics');\n",
      "question": "Show all the BOOM Studios publications that are either comic books or graphic novels. Show them in one table.",
      "gold_queries": [
        "SELECT Comics.Title \r\nFROM Comics JOIN Publisher ON Comics.PublisherId = Publisher.PublisherID\r\nWHERE (Comics.SequentialArt = 'Comic Book' OR Comics.SequentialArt = 'Graphic Novel') AND Publisher.name = \"BOOM Studios\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List all Comics published by BOOM Studios (PublisherId = 1) grouped by ComicID and displaying Title, SequentialArt, and ReleaseDate.",
          "sql_queries": [
            "SELECT ComicID, Title, SequentialArt, ReleaseDate\nFROM Comics\nWHERE PublisherId = 1\nGROUP BY ComicID"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Construct a single table displaying all Comics where PublisherId is 1, including columns for ComicID, Title, SequentialArt, ReleaseDate, PublisherId, and AuthorId.",
          "sql_queries": [
            "SELECT ComicID, Title, SequentialArt, ReleaseDate, PublisherId, AuthorId FROM Comics WHERE PublisherId = 1"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve all Comics records where PublisherId is 1 and SequentialArt is either 'Comic Book' or 'Graphic Novel'.",
          "sql_queries": [
            "SELECT * FROM Comics WHERE PublisherId = 1 AND SequentialArt IN ('Comic Book', 'Graphic Novel')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Entertainment/attachment_1tab_val_sequential_art/attachment_1tab_val_sequential_art.sqlite",
      "db_dump": "CREATE TABLE Authors(\n    AuthorID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT\n);\nCREATE TABLE Comics(\n    ComicID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    SequentialArt VARCHAR(255) ,\n    ReleaseDate DATE,\n    PublisherId INTEGER,\n    AuthorId INTEGER,\n    FOREIGN KEY (AuthorId) REFERENCES Authors(AuthorID),\n    FOREIGN KEY (PublisherId) REFERENCES Publisher(PublisherID)\n);\nCREATE TABLE Movie(\n    MovieID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    DirectorName TEXT,\n    ReleaseDate DATE\n);\nCREATE TABLE Publisher(\n    PublisherID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT\n);\n\nINSERT INTO \"Authors\" (AuthorID,Name) VALUES (1,'John Doe'),(2,'Jane Smith'),(3,'Alice Johnson'),(4,'Bob Brown'),(5,'Charlie White');\nINSERT INTO \"Comics\" (ComicID,Title,SequentialArt,ReleaseDate,PublisherId,AuthorId) VALUES (1,'The Walking Dead','Comic Book','2019-08-01',1,1),(2,'Saga','Comic Book','2016-03-17',2,2),(3,'Watchmen','Graphic Novel','2019-02-28',1,3),(4,'Y: The Last Man','Graphic Novel','2019-06-20',3,4),(5,'V for Vendetta','Graphic Novel','2019-05-01',4,5),(6,'Hellboy','Comic Book','2019-07-05',2,6),(7,'Superman','Comic Book','2019-09-02',3,7);\nINSERT INTO \"Movie\" (MovieID,Title,DirectorName,ReleaseDate) VALUES (1,'Inception','Christopher Nolan','2010-07-16'),(2,'Interstellar','Christopher Nolan','2014-11-07'),(3,'The Dark Knight','Christopher Nolan','2008-07-18'),(4,'Memento','Christopher Nolan','2000-06-22'),(5,'Fight Club','David Fincher','1999-10-15');\nINSERT INTO \"Publisher\" (PublisherID,Name) VALUES (1,'BOOM Studios'),(2,'DC Comics'),(3,'Marvel Comics'),(4,'Image Comics'),(5,'Dark Horse Comics');\n",
      "question": "List all of the comic books, in addition also list the graphic novels published by BOOM Studios. Show them in one table.",
      "gold_queries": [
        "SELECT Comics.Title \r\nFROM Comics JOIN Publisher ON Comics.PublisherId = Publisher.PublisherID\r\nWHERE Comics.SequentialArt = 'Comic Book' OR Comics.SequentialArt = 'Graphic Novel' AND Publisher.name = \"BOOM Studios\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List all comic books, then list all graphic novels published by BOOM Studios in separate tables.",
          "sql_queries": [
            "SELECT Title, ReleaseDate \nFROM Comics \nWHERE SequentialArt = 'Comic Book' AND PublisherId = (SELECT PublisherID FROM Publisher WHERE Name = 'BOOM Studios')",
            "SELECT Title, ReleaseDate \nFROM Comics \nWHERE SequentialArt = 'Graphic Novel' AND PublisherId = (SELECT PublisherID FROM Publisher WHERE Name = 'BOOM Studios')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all comics and graphic novels published by BOOM Studios.",
          "sql_queries": [
            "SELECT C.Title\nFROM Comics C\nJOIN Publisher P ON C.PublisherId = P.PublisherID\nWHERE P.Name = 'BOOM Studios'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all comic books and graphic novels, categorized by type and publisher (including only BOOM Studios).",
          "sql_queries": [
            "SELECT SequentialArt, Title, P.Name AS Publisher\nFROM Comics C\nJOIN Publisher P ON C.PublisherId = P.PublisherID\nWHERE P.Name = 'BOOM Studios'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Entertainment/attachment_1tab_val_sequential_art/attachment_1tab_val_sequential_art.sqlite",
      "db_dump": "CREATE TABLE Authors(\n    AuthorID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT\n);\nCREATE TABLE Comics(\n    ComicID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    SequentialArt VARCHAR(255) ,\n    ReleaseDate DATE,\n    PublisherId INTEGER,\n    AuthorId INTEGER,\n    FOREIGN KEY (AuthorId) REFERENCES Authors(AuthorID),\n    FOREIGN KEY (PublisherId) REFERENCES Publisher(PublisherID)\n);\nCREATE TABLE Movie(\n    MovieID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    DirectorName TEXT,\n    ReleaseDate DATE\n);\nCREATE TABLE Publisher(\n    PublisherID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT\n);\n\nINSERT INTO \"Authors\" (AuthorID,Name) VALUES (1,'John Doe'),(2,'Jane Smith'),(3,'Alice Johnson'),(4,'Bob Brown'),(5,'Charlie White');\nINSERT INTO \"Comics\" (ComicID,Title,SequentialArt,ReleaseDate,PublisherId,AuthorId) VALUES (1,'The Walking Dead','Comic Book','2019-08-01',1,1),(2,'Saga','Comic Book','2016-03-17',2,2),(3,'Watchmen','Graphic Novel','2019-02-28',1,3),(4,'Y: The Last Man','Graphic Novel','2019-06-20',3,4),(5,'V for Vendetta','Graphic Novel','2019-05-01',4,5),(6,'Hellboy','Comic Book','2019-07-05',2,6),(7,'Superman','Comic Book','2019-09-02',3,7);\nINSERT INTO \"Movie\" (MovieID,Title,DirectorName,ReleaseDate) VALUES (1,'Inception','Christopher Nolan','2010-07-16'),(2,'Interstellar','Christopher Nolan','2014-11-07'),(3,'The Dark Knight','Christopher Nolan','2008-07-18'),(4,'Memento','Christopher Nolan','2000-06-22'),(5,'Fight Club','David Fincher','1999-10-15');\nINSERT INTO \"Publisher\" (PublisherID,Name) VALUES (1,'BOOM Studios'),(2,'DC Comics'),(3,'Marvel Comics'),(4,'Image Comics'),(5,'Dark Horse Comics');\n",
      "question": "Provide all comic books and graphic novels published by BOOM Studios. Show them in one table.",
      "gold_queries": [
        "SELECT Comics.Title \r\nFROM Comics JOIN Publisher ON Comics.PublisherId = Publisher.PublisherID\r\nWHERE (Comics.SequentialArt = 'Comic Book' OR Comics.SequentialArt = 'Graphic Novel') AND Publisher.name = \"BOOM Studios\"",
        "SELECT Comics.Title \r\nFROM Comics JOIN Publisher ON Comics.PublisherId = Publisher.PublisherID\r\nWHERE Comics.SequentialArt = 'Comic Book' OR Comics.SequentialArt = 'Graphic Novel' AND Publisher.name = \"BOOM Studios\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Return a unified table displaying the comics and graphic novels published by BOOM Studios, identifying them by Title and ReleaseDate.",
          "sql_queries": [
            "SELECT Title, ReleaseDate FROM Comics C JOIN Publisher P ON C.PublisherId = P.PublisherID WHERE P.Name = 'BOOM Studios'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Generate a single table containing all comic books and graphic novels from the Publishers table where the Name is 'BOOM Studios'.",
          "sql_queries": [
            "SELECT C.Title, C.SequentialArt, C.ReleaseDate, C.PublisherId, C.AuthorId\nFROM Comics C\nJOIN Publisher P ON C.PublisherId = P.PublisherID\nWHERE P.Name = 'BOOM Studios'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve all comics and graphic novels where PublisherId is 1.",
          "sql_queries": [
            "SELECT Title FROM Comics WHERE PublisherId = 1"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Find all records in Comics with PublisherId equal to 1 and SequentialArt is 'Comic Book' or 'Graphic Novel'.",
          "sql_queries": [
            "SELECT * FROM Comics WHERE PublisherId = 1 AND SequentialArt IN ('Comic Book', 'Graphic Novel')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all entries in the Comics table where the Publisher Name is 'BOOM Studios'.",
          "sql_queries": [
            "SELECT C.ComicID, C.Title, C.SequentialArt, C.ReleaseDate, C.PublisherId, C.AuthorId\nFROM Comics C\nJOIN Publisher P ON C.PublisherId = P.PublisherID\nWHERE P.Name = 'BOOM Studios'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.2,
        "f1_score": 0.28571428571428575,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Entertainment/attachment_1tab_val_crime_fiction/attachment_1tab_val_crime_fiction.sqlite",
      "db_dump": "CREATE TABLE Actor(\n    id INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    dateOfBirth DATE\n);\nCREATE TABLE Cast(\n    movieId INTEGER REFERENCES Movie(id),\n    actorId INTEGER REFERENCES Actor(id),\n    role TEXT,\n    FOREIGN KEY(movieId, actorId) REFERENCES Movie(id, id)\n);\nCREATE TABLE Director(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    birthYear INT\n);\nCREATE TABLE Genre(\n    id INTEGER PRIMARY KEY,\n    genreText TEXT UNIQUE\n);\nCREATE TABLE Movie(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    releaseDate DATE,\n    Crime_Fiction TEXT ,\n    Studio TEXT,\n    directorId INTEGER REFERENCES Director(id)\n);\nCREATE TABLE MovieGenre(\n    movieId INTEGER REFERENCES Movie(id),\n    genreId INTEGER REFERENCES Genre(id),\n    PRIMARY KEY(movieId, genreId)\n);\n\nINSERT INTO \"Actor\" (id,firstName,lastName,dateOfBirth) VALUES (1,'Tom','Hanks','1956-07-09'),(2,'Denzel','Washington','1954-12-28'),(3,'Scarlett','Johansson','1984-11-22'),(4,'Leonardo','DiCaprio','1974-11-11'),(5,'Mark','Ruffalo','1967-11-22');\nINSERT INTO \"Cast\" (movieId,actorId,role) VALUES (1,1,'Lead Role'),(1,2,'Supporting Role'),(2,3,'Lead Role'),(2,4,'Supporting Role'),(3,5,'Lead Role'),(3,6,'Supporting Role');\nINSERT INTO \"Director\" (id,name,birthYear) VALUES (1,'John Doe',1960),(2,'Jane Smith',1972),(3,'Alice Brown',1983),(4,'Robert Johnson',1990),(5,'Emma Wilson',1995);\nINSERT INTO \"Genre\" (id,genreText) VALUES (1,'Action'),(2,'Adventure'),(3,'Drama'),(4,'Family'),(5,'Fantasy');\nINSERT INTO \"Movie\" (id,title,releaseDate,Crime_Fiction,Studio,directorId) VALUES (1,'MovieA','2000-01-01','Mystery','Warner Bros',1),(2,'MovieB','2000-01-01','Mystery','Universal Studios',2),(3,'MovieC','2000-01-01','Thriller','Warner Bros',3),(4,'MovieD','2000-01-01','Thriller','Disney',4),(5,'MovieE','2000-01-01','Comedy','Columbia Pictures',5);\nINSERT INTO \"MovieGenre\" (movieId,genreId) VALUES (1,1),(1,2),(2,3),(3,4),(4,5);\n",
      "question": "Show the Warner Bros produced films that are either mysteries or thrillers. Show them in one table.",
      "gold_queries": [
        "SELECT Movie.Title \r\nFROM Movie\r\nWHERE (Movie.Crime_Fiction = \"Mystery\" OR Movie.Crime_Fiction = \"Thriller\") AND Movie.Studio = \"Warner Bros\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "SELECT * FROM Movie WHERE Studio = 'Warner Bros' AND (Crime_Fiction = 'Mystery' OR Crime_Fiction = 'Thriller');",
          "sql_queries": [
            "SELECT * FROM Movie WHERE Studio = 'Warner Bros' AND (Crime_Fiction = 'Mystery' OR Crime_Fiction = 'Thriller')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "SELECT Movie.title, Movie.releaseDate FROM Movie WHERE Movie.Studio = 'Warner Bros' AND (Crime_Fiction = 'Mystery' OR Crime_Fiction = 'Thriller');",
          "sql_queries": [
            "SELECT Movie.title, Movie.releaseDate FROM Movie WHERE Movie.Studio = 'Warner Bros' AND (Crime_Fiction = 'Mystery' OR Crime_Fiction = 'Thriller')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Entertainment/attachment_1tab_val_crime_fiction/attachment_1tab_val_crime_fiction.sqlite",
      "db_dump": "CREATE TABLE Actor(\n    id INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    dateOfBirth DATE\n);\nCREATE TABLE Cast(\n    movieId INTEGER REFERENCES Movie(id),\n    actorId INTEGER REFERENCES Actor(id),\n    role TEXT,\n    FOREIGN KEY(movieId, actorId) REFERENCES Movie(id, id)\n);\nCREATE TABLE Director(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    birthYear INT\n);\nCREATE TABLE Genre(\n    id INTEGER PRIMARY KEY,\n    genreText TEXT UNIQUE\n);\nCREATE TABLE Movie(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    releaseDate DATE,\n    Crime_Fiction TEXT ,\n    Studio TEXT,\n    directorId INTEGER REFERENCES Director(id)\n);\nCREATE TABLE MovieGenre(\n    movieId INTEGER REFERENCES Movie(id),\n    genreId INTEGER REFERENCES Genre(id),\n    PRIMARY KEY(movieId, genreId)\n);\n\nINSERT INTO \"Actor\" (id,firstName,lastName,dateOfBirth) VALUES (1,'Tom','Hanks','1956-07-09'),(2,'Denzel','Washington','1954-12-28'),(3,'Scarlett','Johansson','1984-11-22'),(4,'Leonardo','DiCaprio','1974-11-11'),(5,'Mark','Ruffalo','1967-11-22');\nINSERT INTO \"Cast\" (movieId,actorId,role) VALUES (1,1,'Lead Role'),(1,2,'Supporting Role'),(2,3,'Lead Role'),(2,4,'Supporting Role'),(3,5,'Lead Role'),(3,6,'Supporting Role');\nINSERT INTO \"Director\" (id,name,birthYear) VALUES (1,'John Doe',1960),(2,'Jane Smith',1972),(3,'Alice Brown',1983),(4,'Robert Johnson',1990),(5,'Emma Wilson',1995);\nINSERT INTO \"Genre\" (id,genreText) VALUES (1,'Action'),(2,'Adventure'),(3,'Drama'),(4,'Family'),(5,'Fantasy');\nINSERT INTO \"Movie\" (id,title,releaseDate,Crime_Fiction,Studio,directorId) VALUES (1,'MovieA','2000-01-01','Mystery','Warner Bros',1),(2,'MovieB','2000-01-01','Mystery','Universal Studios',2),(3,'MovieC','2000-01-01','Thriller','Warner Bros',3),(4,'MovieD','2000-01-01','Thriller','Disney',4),(5,'MovieE','2000-01-01','Comedy','Columbia Pictures',5);\nINSERT INTO \"MovieGenre\" (movieId,genreId) VALUES (1,1),(1,2),(2,3),(3,4),(4,5);\n",
      "question": "Show all the mystery films, then also show the thrillers from Warner Bros. Show them in one table.",
      "gold_queries": [
        "SELECT Movie.Title \r\nFROM Movie\r\nWHERE Movie.Crime_Fiction = \"Mystery\" OR Movie.Crime_Fiction = \"Thriller\" AND Movie.Studio = \"Warner Bros\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Retrieve all movies classified as \"Mystery\" UNION retrieve all movies studios as \"Warner Bros\" and classified as \"Thriller\" and present the results in a single table",
          "sql_queries": [
            "SELECT title FROM Movie WHERE Crime_Fiction = 'Mystery' UNION SELECT title FROM Movie WHERE Studio = 'Warner Bros' AND Crime_Fiction = 'Thriller'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Combine the results of separate queries: show movies with genre \"Mystery\" and movies from studio \"Warner Bros\" with genre \"Thriller\" into a single table.",
          "sql_queries": [
            "SELECT M.title\nFROM Movie M\nJOIN MovieGenre MG ON M.id = MG.movieId\nJOIN Genre G ON MG.genreId = G.id\nWHERE (G.genreText = 'Mystery')\nUNION\nSELECT M.title\nFROM Movie M\nJOIN MovieGenre MG ON M.id = MG.movieId\nJOIN Genre G ON MG.genreId = G.id\nWHERE M.Studio = 'Warner Bros' AND G.genreText = 'Thriller'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Display all movies with \"Mystery\" as genre, followed by all movies with \"Thriller\" genre from \"Warner Bros\" studio, in a single table output.",
          "sql_queries": [
            "SELECT T.title FROM Movie AS T JOIN MovieGenre AS MG ON T.id = MG.movieId JOIN Genre AS G ON MG.genreId = G.id WHERE G.genreText = 'Mystery' UNION ALL SELECT T.title FROM Movie AS T JOIN MovieGenre AS MG ON T.id = MG.movieId JOIN Genre AS G ON MG.genreId = G.id WHERE G.genreText = 'Thriller' AND T.Studio = 'Warner Bros'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Entertainment/attachment_1tab_val_crime_fiction/attachment_1tab_val_crime_fiction.sqlite",
      "db_dump": "CREATE TABLE Actor(\n    id INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    dateOfBirth DATE\n);\nCREATE TABLE Cast(\n    movieId INTEGER REFERENCES Movie(id),\n    actorId INTEGER REFERENCES Actor(id),\n    role TEXT,\n    FOREIGN KEY(movieId, actorId) REFERENCES Movie(id, id)\n);\nCREATE TABLE Director(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    birthYear INT\n);\nCREATE TABLE Genre(\n    id INTEGER PRIMARY KEY,\n    genreText TEXT UNIQUE\n);\nCREATE TABLE Movie(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    releaseDate DATE,\n    Crime_Fiction TEXT ,\n    Studio TEXT,\n    directorId INTEGER REFERENCES Director(id)\n);\nCREATE TABLE MovieGenre(\n    movieId INTEGER REFERENCES Movie(id),\n    genreId INTEGER REFERENCES Genre(id),\n    PRIMARY KEY(movieId, genreId)\n);\n\nINSERT INTO \"Actor\" (id,firstName,lastName,dateOfBirth) VALUES (1,'Tom','Hanks','1956-07-09'),(2,'Denzel','Washington','1954-12-28'),(3,'Scarlett','Johansson','1984-11-22'),(4,'Leonardo','DiCaprio','1974-11-11'),(5,'Mark','Ruffalo','1967-11-22');\nINSERT INTO \"Cast\" (movieId,actorId,role) VALUES (1,1,'Lead Role'),(1,2,'Supporting Role'),(2,3,'Lead Role'),(2,4,'Supporting Role'),(3,5,'Lead Role'),(3,6,'Supporting Role');\nINSERT INTO \"Director\" (id,name,birthYear) VALUES (1,'John Doe',1960),(2,'Jane Smith',1972),(3,'Alice Brown',1983),(4,'Robert Johnson',1990),(5,'Emma Wilson',1995);\nINSERT INTO \"Genre\" (id,genreText) VALUES (1,'Action'),(2,'Adventure'),(3,'Drama'),(4,'Family'),(5,'Fantasy');\nINSERT INTO \"Movie\" (id,title,releaseDate,Crime_Fiction,Studio,directorId) VALUES (1,'MovieA','2000-01-01','Mystery','Warner Bros',1),(2,'MovieB','2000-01-01','Mystery','Universal Studios',2),(3,'MovieC','2000-01-01','Thriller','Warner Bros',3),(4,'MovieD','2000-01-01','Thriller','Disney',4),(5,'MovieE','2000-01-01','Comedy','Columbia Pictures',5);\nINSERT INTO \"MovieGenre\" (movieId,genreId) VALUES (1,1),(1,2),(2,3),(3,4),(4,5);\n",
      "question": "Provide me with the mysteries and thrillers from Warner Bros studio. Show them in one table.",
      "gold_queries": [
        "SELECT Movie.Title \r\nFROM Movie\r\nWHERE (Movie.Crime_Fiction = \"Mystery\" OR Movie.Crime_Fiction = \"Thriller\") AND Movie.Studio = \"Warner Bros\"",
        "SELECT Movie.Title \r\nFROM Movie\r\nWHERE Movie.Crime_Fiction = \"Mystery\" OR Movie.Crime_Fiction = \"Thriller\" AND Movie.Studio = \"Warner Bros\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List all movies tagged as 'Mystery' or 'Thriller' from the 'Studio' list 'Warner Bros'.",
          "sql_queries": [
            "SELECT title FROM Movie WHERE (Crime_Fiction = 'Mystery' OR Crime_Fiction = 'Thriller') AND Studio = 'Warner Bros'"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Display the titles of Warner Bros produced movies featuring mystery or thriller elements in a combined table.",
          "sql_queries": [
            "SELECT T1.title FROM Movie AS T1 JOIN MovieGenre AS T2 ON T1.id = T2.movieId JOIN Genre AS T3 ON T2.genreId = T3.id WHERE T1.Studio = 'Warner Bros' AND (T3.genreText = 'Action' OR T1.Crime_Fiction IN ('Mystery', 'Thriller'))"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Fetch details of mystery and thriller movies produced by Warner Bros, consolidating them into a single table.",
          "sql_queries": [
            "SELECT title, releaseDate, Crime_Fiction, Studio \nFROM Movie \nWHERE (Crime_Fiction = 'Mystery' OR Crime_Fiction = 'Thriller') AND Studio = 'Warner Bros'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve movies with \"Crime_Fiction\" value of 'Mystery' OR 'Thriller' from the 'Movie' table where 'Studio' equals 'Warner Bros'.",
          "sql_queries": [
            "SELECT title FROM Movie WHERE Studio = 'Warner Bros' AND (Crime_Fiction = 'Mystery' OR Crime_Fiction = 'Thriller')"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.5,
        "f1_score": 0.5,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/attachment/Entertainment/attachment_2tab_ref_musician/attachment_2tab_ref_musician.sqlite",
      "db_dump": "CREATE TABLE AlbumTracks (\n    id INTEGER PRIMARY KEY,\n    trackNumber INTEGER,\n    title TEXT,\n    duration TIME);\nCREATE TABLE Albums (\n    id INTEGER PRIMARY KEY,\n    albumTitle TEXT,\n    releaseYear INTEGER);\nCREATE TABLE BluegrassSingers (\n    id INTEGER PRIMARY KEY,\n    singerName TEXT,\n    bluegrassStyle BOOLEAN DEFAULT FALSE,\n    foreignKey INTEGER REFERENCES Instruments(id));\nCREATE TABLE CountrySingers (\n    id INTEGER PRIMARY KEY,\n    singerName TEXT,\n    country TEXT,\n    foreignKey INTEGER REFERENCES Instruments(id));\nCREATE TABLE Instruments (\n    id INTEGER PRIMARY KEY,\n    instrumentName TEXT UNIQUE);\nCREATE TABLE SingsOnAlbum (\n    id INTEGER PRIMARY KEY,\n    singerId INTEGER,\n    albumId INTEGER,\n    FOREIGN KEY (singerId) REFERENCES CountrySingers(id),\n    FOREIGN KEY (albumId) REFERENCES Albums(id));\n\nINSERT INTO \"AlbumTracks\" (id,trackNumber,title,duration) VALUES (1,1,'Track 1','3:00'),(2,2,'Track 2','3:30');\nINSERT INTO \"Albums\" (id,albumTitle,releaseYear) VALUES (1,'My First Album',2000),(2,'The Best of Me',2010);\nINSERT INTO \"BluegrassSingers\" (id,singerName,bluegrassStyle,foreignKey) VALUES (1,'Tom Brown',1,1),(2,'Emily White',0,2);\nINSERT INTO \"CountrySingers\" (id,singerName,country,foreignKey) VALUES (1,'John Doe','USA',1),(2,'Jane Smith','Canada',2);\nINSERT INTO \"Instruments\" (id,instrumentName) VALUES (1,'Guitar'),(2,'Piano');\nINSERT INTO \"SingsOnAlbum\" (id,singerId,albumId) VALUES (1,1,1),(2,2,1),(3,3,2),(4,4,2);\n",
      "question": "Display country singers and bluegrass singers who play the piano. Show them in one table.",
      "gold_queries": [
        "SELECT CountrySingers.singername\r\nFROM Instruments JOIN CountrySingers ON Instruments.id = CountrySingers.foreignKey\r\nWHERE Instruments.instrumentName = \"Piano\"\r\nUNION\r\nSELECT BluegrassSingers.singername\r\nFROM Instruments JOIN BluegrassSingers ON Instruments.id = BluegrassSingers.foreignKey\r\nWHERE Instruments.instrumentName = \"Piano\"",
        "SELECT CountrySingers.singername\r\nFROM Instruments JOIN CountrySingers ON Instruments.id = CountrySingers.foreignKey\r\nUNION\r\nSELECT BluegrassSingers.singername\r\nFROM Instruments JOIN BluegrassSingers ON Instruments.id = BluegrassSingers.foreignKey\r\nWHERE Instruments.instrumentName = \"Piano\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Where i.instrumentName = 'Piano'",
          "sql_queries": [
            "SELECT i.instrumentName FROM Instruments i WHERE i.instrumentName = 'Piano'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "From BluegrassSingers b",
          "sql_queries": [
            "SELECT singerName FROM BluegrassSingers WHERE bluegrassStyle = 1"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Union",
          "sql_queries": [
            "SELECT singerName FROM BluegrassSingers UNION SELECT singerName FROM CountrySingers"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "From CountrySingers s",
          "sql_queries": [
            "SELECT singerName, country FROM CountrySingers"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Join Instruments i On b.foreignKey = i.id",
          "sql_queries": [
            "SELECT i.instrumentName \nFROM BluegrassSingers b \nJOIN Instruments i ON b.foreignKey = i.id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "SELECT *",
          "sql_queries": [
            "SELECT * FROM AlbumTracks"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "WHERE foreignKey = (SELECT id FROM Instruments WHERE instrumentName = 'Piano');",
          "sql_queries": [
            "SELECT * FROM BluegrassSingers WHERE foreignKey = (SELECT id FROM Instruments WHERE instrumentName = 'Piano')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Join Instruments i On s.foreignKey = i.id",
          "sql_queries": [
            "SELECT s.singerName, i.instrumentName FROM CountrySingers s JOIN Instruments i ON s.foreignKey = i.id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "UNION ALL",
          "sql_queries": [
            "SELECT singerName FROM BluegrassSingers UNION ALL SELECT singerName FROM CountrySingers"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "FROM CountrySingers",
          "sql_queries": [
            "SELECT singerName, country FROM CountrySingers"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Select s.singerName",
          "sql_queries": [
            "SELECT s.singerName FROM CountrySingers s"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "WHERE foreignKey = (SELECT id FROM Instruments WHERE instrumentName = 'Piano')",
          "sql_queries": [
            "SELECT * FROM CountrySingers WHERE foreignKey = (SELECT id FROM Instruments WHERE instrumentName = 'Piano')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Select b.singerName",
          "sql_queries": [
            "SELECT b.singerName FROM BluegrassSingers b"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "FROM BluegrassSingers",
          "sql_queries": [
            "SELECT singerName FROM BluegrassSingers"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 11,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 14,
        "num_unique_queries": 13,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Entertainment/attachment_2tab_ref_performance_event/attachment_2tab_ref_performance_event.sqlite",
      "db_dump": "CREATE TABLE Audition_Room(\n    RoomID INTEGER PRIMARY KEY,\n    RoomName TEXT UNIQUE\n);\nCREATE TABLE \"Dance_Recital\"(\n    RecitalID INTEGER PRIMARY KEY, `name` TEXT,\n    Date DATE,\n    Time TIME,\n    RoomID INTEGER,\n    FOREIGN KEY (RoomID) REFERENCES Audition_Room(RoomID)\n);\nCREATE TABLE Participant(\n    ParticipantID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Age INT ,\n    PhoneNumber TEXT,\n    Email TEXT,\n    Role VARCHAR(255),\n    RecitalID INTEGER,\n    ShowID INTEGER,\n    FOREIGN KEY (RecitalID) REFERENCES Dance_Recital(RecitalID),\n    FOREIGN KEY (ShowID) REFERENCES Talent_Show(ShowID)\n);\nCREATE TABLE Talent_Show(\n    ShowID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Description TEXT,\n    RoomID INTEGER,\n    FOREIGN KEY (RoomID) REFERENCES Audition_Room(RoomID)\n);\n\nINSERT INTO \"Audition_Room\" (RoomID,RoomName) VALUES (1,'Room 101'),(2,'Room 202');\nINSERT INTO \"Dance_Recital\" (RecitalID,name,Date,Time,RoomID) VALUES (1,'Celestial Movements: A Balletic Odyssey','2023-07-01','19:00',1),(2,'Rhythmic Revolutions','2023-08-15','20:00',2);\nINSERT INTO \"Participant\" (ParticipantID,FirstName,LastName,Age,PhoneNumber,Email,Role,RecitalID,ShowID) VALUES (1,'Jane','Smith',25,'555-1234','janesmith@email.com','Dancer',1,1),(2,'John','Doe',30,'555-5678','john.doe@email.com','Singer',2,2),(3,'Emily','Johnson',22,'555-8910','emily.johnson@email.com','Musician',1,1),(4,'Michael','Brown',28,'555-1314','michaelbrown@email.com','Actor',2,2),(5,'Olivia','Wilson',18,'555-2323','oliviawilson@email.com','Comedian',1,1);\nINSERT INTO \"Talent_Show\" (ShowID,Name,Description,RoomID) VALUES (1,'Summer Talent Extravaganza','A showcase of local talent.',1),(2,'Fall Variety Night','An evening of diverse acts and performances.',2);\n",
      "question": "What dance recitals are in Room 202, and what talent shows are in the same room? Show them in one table.",
      "gold_queries": [
        "SELECT Dance_Recital.name\r\nFROM Audition_Room JOIN Dance_Recital ON Audition_Room.RoomID = Dance_Recital.RoomID\r\nWHERE Audition_Room.RoomName = \"Room 202\"\r\nUNION\r\nSELECT Talent_Show.name\r\nFROM Audition_Room JOIN Talent_Show ON Audition_Room.RoomID = Talent_Show.RoomID\r\nWHERE Audition_Room.RoomName = \"Room 202\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List dance recitals and talent shows occurring in Room 202, merged into a unified result set.",
          "sql_queries": [
            "SELECT name, Date, Time, RoomID FROM Dance_Recital WHERE RoomID = (SELECT RoomID FROM Audition_Room WHERE RoomName = 'Room 202')\nUNION\nSELECT Name, Date, Time, RoomID FROM Talent_Show WHERE RoomID = (SELECT RoomID FROM Audition_Room WHERE RoomName = 'Room 202')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT name, Date, Time, RoomID FROM Dance_Recital WHERE RoomID = (SELECT RoomID FROM Audition_Room WHERE RoomName = 'Room 202')\nUNION\nSELECT Name, Date, Time, RoomID FROM Talent_Show WHERE RoomID = (SELECT RoomID FROM Audition_Room WHERE RoomName = 'Room 202')",
                "original_exception": "no such column: Date"
              }
            ],
            "all_found": false
          }
        },
        {
          "interpretation": "Display the details of dance recitals and talent shows where RoomID is 202 in a single combined table.",
          "sql_queries": [
            "SELECT * FROM Dance_Recital WHERE RoomID = 202 UNION SELECT * FROM Talent_Show WHERE RoomID = 202"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT * FROM Dance_Recital WHERE RoomID = 202 UNION SELECT * FROM Talent_Show WHERE RoomID = 202",
                "original_exception": "SELECTs to the left and right of UNION do not have the same number of result columns"
              }
            ],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve a list of dance recitals and talent shows that share the same RoomID (202).",
          "sql_queries": [
            "SELECT name FROM Dance_Recital WHERE RoomID = 202 UNION SELECT Name FROM Talent_Show WHERE RoomID = 202"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Find all dance recital and talent show entries with a RoomID of 202, presenting them in a single, combined table.",
          "sql_queries": [
            "SELECT name, Date, Time, RoomID FROM Dance_Recital WHERE RoomID = 202\nUNION\nSELECT Name, Description, NULL AS Time, RoomID FROM Talent_Show WHERE RoomID = 202"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [
          {
            "query": "SELECT name, Date, Time, RoomID FROM Dance_Recital WHERE RoomID = (SELECT RoomID FROM Audition_Room WHERE RoomName = 'Room 202')\nUNION\nSELECT Name, Date, Time, RoomID FROM Talent_Show WHERE RoomID = (SELECT RoomID FROM Audition_Room WHERE RoomName = 'Room 202')",
            "original_exception": "no such column: Date"
          },
          {
            "query": "SELECT * FROM Dance_Recital WHERE RoomID = 202 UNION SELECT * FROM Talent_Show WHERE RoomID = 202",
            "original_exception": "SELECTs to the left and right of UNION do not have the same number of result columns"
          }
        ],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Entertainment/attachment_2tab_ref_performance_event/attachment_2tab_ref_performance_event.sqlite",
      "db_dump": "CREATE TABLE Audition_Room(\n    RoomID INTEGER PRIMARY KEY,\n    RoomName TEXT UNIQUE\n);\nCREATE TABLE \"Dance_Recital\"(\n    RecitalID INTEGER PRIMARY KEY, `name` TEXT,\n    Date DATE,\n    Time TIME,\n    RoomID INTEGER,\n    FOREIGN KEY (RoomID) REFERENCES Audition_Room(RoomID)\n);\nCREATE TABLE Participant(\n    ParticipantID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Age INT ,\n    PhoneNumber TEXT,\n    Email TEXT,\n    Role VARCHAR(255),\n    RecitalID INTEGER,\n    ShowID INTEGER,\n    FOREIGN KEY (RecitalID) REFERENCES Dance_Recital(RecitalID),\n    FOREIGN KEY (ShowID) REFERENCES Talent_Show(ShowID)\n);\nCREATE TABLE Talent_Show(\n    ShowID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Description TEXT,\n    RoomID INTEGER,\n    FOREIGN KEY (RoomID) REFERENCES Audition_Room(RoomID)\n);\n\nINSERT INTO \"Audition_Room\" (RoomID,RoomName) VALUES (1,'Room 101'),(2,'Room 202');\nINSERT INTO \"Dance_Recital\" (RecitalID,name,Date,Time,RoomID) VALUES (1,'Celestial Movements: A Balletic Odyssey','2023-07-01','19:00',1),(2,'Rhythmic Revolutions','2023-08-15','20:00',2);\nINSERT INTO \"Participant\" (ParticipantID,FirstName,LastName,Age,PhoneNumber,Email,Role,RecitalID,ShowID) VALUES (1,'Jane','Smith',25,'555-1234','janesmith@email.com','Dancer',1,1),(2,'John','Doe',30,'555-5678','john.doe@email.com','Singer',2,2),(3,'Emily','Johnson',22,'555-8910','emily.johnson@email.com','Musician',1,1),(4,'Michael','Brown',28,'555-1314','michaelbrown@email.com','Actor',2,2),(5,'Olivia','Wilson',18,'555-2323','oliviawilson@email.com','Comedian',1,1);\nINSERT INTO \"Talent_Show\" (ShowID,Name,Description,RoomID) VALUES (1,'Summer Talent Extravaganza','A showcase of local talent.',1),(2,'Fall Variety Night','An evening of diverse acts and performances.',2);\n",
      "question": "Give a list of all dance recitals and also list talent shows in Room 202. Show them in one table.",
      "gold_queries": [
        "SELECT Dance_Recital.name\r\nFROM Audition_Room JOIN Dance_Recital ON Audition_Room.RoomID = Dance_Recital.RoomID\r\nUNION\r\nSELECT Talent_Show.name\r\nFROM Audition_Room JOIN Talent_Show ON Audition_Room.RoomID = Talent_Show.RoomID\r\nWHERE Audition_Room.RoomName = \"Room 202\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List all dance recitals and separately list talent shows in Room 202, with both lists displayed in a single response.",
          "sql_queries": [
            "SELECT 'Dance Recital' AS Type, name AS EventName FROM Dance_Recital WHERE RoomID = (SELECT RoomID FROM Audition_Room WHERE RoomName = 'Room 202') UNION SELECT 'Talent Show' AS Type, Name AS EventName FROM Talent_Show WHERE RoomID = (SELECT RoomID FROM Audition_Room WHERE RoomName = 'Room 202')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all dance recitals and provide additional information about talent shows in Room 202.",
          "sql_queries": [
            "SELECT D.name, D.Date, D.Time, T.Name AS TalentShowName, T.Description \nFROM Dance_Recital D \nJOIN Talent_Show T ON D.RoomID = T.RoomID \nWHERE D.RoomID = (SELECT RoomID FROM Audition_Room WHERE RoomName = 'Room 202')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all dance recitals and talent shows held in Room 202, combined into a single table.",
          "sql_queries": [
            "SELECT name, Date, Time, RoomID FROM Dance_Recital WHERE RoomID = (SELECT RoomID FROM Audition_Room WHERE RoomName = 'Room 202')\nUNION\nSELECT Name, Date, NULL, RoomID FROM Talent_Show WHERE RoomID = (SELECT RoomID FROM Audition_Room WHERE RoomName = 'Room 202')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT name, Date, Time, RoomID FROM Dance_Recital WHERE RoomID = (SELECT RoomID FROM Audition_Room WHERE RoomName = 'Room 202')\nUNION\nSELECT Name, Date, NULL, RoomID FROM Talent_Show WHERE RoomID = (SELECT RoomID FROM Audition_Room WHERE RoomName = 'Room 202')",
                "original_exception": "no such column: Date"
              }
            ],
            "all_found": false
          }
        },
        {
          "interpretation": "Provide a combined table including all dance recitals and the talent shows that took place in Room 202.",
          "sql_queries": [
            "SELECT *\nFROM Dance_Recital AS DR\nJOIN Talent_Show AS TS ON DR.RoomID = TS.RoomID\nWHERE DR.RoomID = (SELECT RoomID FROM Audition_Room WHERE RoomName = 'Room 202')\nUNION\nSELECT *\nFROM Dance_Recital AS DR\nJOIN Talent_Show AS TS ON DR.RoomID = TS.RoomID\nWHERE TS.RoomID = (SELECT RoomID FROM Audition_Room WHERE RoomName = 'Room 202')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all dance recitals, with a dedicated column for Room 202 talent show details.",
          "sql_queries": [
            "SELECT \n    DR.name AS DanceRecitalName,\n    CASE \n        WHEN AR.RoomName = 'Room 202' THEN TS.Name \n        ELSE NULL \n    END AS Room202TalentShowDetails\nFROM \n    Dance_Recital DR\nLEFT JOIN \n    Audition_Room AR ON DR.RoomID = AR.RoomID\nLEFT JOIN \n    Talent_Show TS ON TS.RoomID = AR.RoomID"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [
          {
            "query": "SELECT name, Date, Time, RoomID FROM Dance_Recital WHERE RoomID = (SELECT RoomID FROM Audition_Room WHERE RoomName = 'Room 202')\nUNION\nSELECT Name, Date, NULL, RoomID FROM Talent_Show WHERE RoomID = (SELECT RoomID FROM Audition_Room WHERE RoomName = 'Room 202')",
            "original_exception": "no such column: Date"
          }
        ],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Entertainment/attachment_2tab_ref_performance_event/attachment_2tab_ref_performance_event.sqlite",
      "db_dump": "CREATE TABLE Audition_Room(\n    RoomID INTEGER PRIMARY KEY,\n    RoomName TEXT UNIQUE\n);\nCREATE TABLE \"Dance_Recital\"(\n    RecitalID INTEGER PRIMARY KEY, `name` TEXT,\n    Date DATE,\n    Time TIME,\n    RoomID INTEGER,\n    FOREIGN KEY (RoomID) REFERENCES Audition_Room(RoomID)\n);\nCREATE TABLE Participant(\n    ParticipantID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Age INT ,\n    PhoneNumber TEXT,\n    Email TEXT,\n    Role VARCHAR(255),\n    RecitalID INTEGER,\n    ShowID INTEGER,\n    FOREIGN KEY (RecitalID) REFERENCES Dance_Recital(RecitalID),\n    FOREIGN KEY (ShowID) REFERENCES Talent_Show(ShowID)\n);\nCREATE TABLE Talent_Show(\n    ShowID INTEGER PRIMARY KEY,\n    Name VARCHAR(255),\n    Description TEXT,\n    RoomID INTEGER,\n    FOREIGN KEY (RoomID) REFERENCES Audition_Room(RoomID)\n);\n\nINSERT INTO \"Audition_Room\" (RoomID,RoomName) VALUES (1,'Room 101'),(2,'Room 202');\nINSERT INTO \"Dance_Recital\" (RecitalID,name,Date,Time,RoomID) VALUES (1,'Celestial Movements: A Balletic Odyssey','2023-07-01','19:00',1),(2,'Rhythmic Revolutions','2023-08-15','20:00',2);\nINSERT INTO \"Participant\" (ParticipantID,FirstName,LastName,Age,PhoneNumber,Email,Role,RecitalID,ShowID) VALUES (1,'Jane','Smith',25,'555-1234','janesmith@email.com','Dancer',1,1),(2,'John','Doe',30,'555-5678','john.doe@email.com','Singer',2,2),(3,'Emily','Johnson',22,'555-8910','emily.johnson@email.com','Musician',1,1),(4,'Michael','Brown',28,'555-1314','michaelbrown@email.com','Actor',2,2),(5,'Olivia','Wilson',18,'555-2323','oliviawilson@email.com','Comedian',1,1);\nINSERT INTO \"Talent_Show\" (ShowID,Name,Description,RoomID) VALUES (1,'Summer Talent Extravaganza','A showcase of local talent.',1),(2,'Fall Variety Night','An evening of diverse acts and performances.',2);\n",
      "question": "Provide dance recitals and talent shows in Room 202 Show them in one table.",
      "gold_queries": [
        "SELECT Dance_Recital.name\r\nFROM Audition_Room JOIN Dance_Recital ON Audition_Room.RoomID = Dance_Recital.RoomID\r\nWHERE Audition_Room.RoomName = \"Room 202\"\r\nUNION\r\nSELECT Talent_Show.name\r\nFROM Audition_Room JOIN Talent_Show ON Audition_Room.RoomID = Talent_Show.RoomID\r\nWHERE Audition_Room.RoomName = \"Room 202\"",
        "SELECT Dance_Recital.name\r\nFROM Audition_Room JOIN Dance_Recital ON Audition_Room.RoomID = Dance_Recital.RoomID\r\nUNION\r\nSELECT Talent_Show.name\r\nFROM Audition_Room JOIN Talent_Show ON Audition_Room.RoomID = Talent_Show.RoomID\r\nWHERE Audition_Room.RoomName = \"Room 202\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Return a consolidated table displaying the names, dates, and times of dance recitals and talent shows held in Room 202.",
          "sql_queries": [
            "SELECT name, Date, Time FROM Dance_Recital WHERE RoomID = (SELECT RoomID FROM Audition_Room WHERE RoomName = 'Room 202') \nUNION \nSELECT Name, Date, NULL AS Time FROM Talent_Show WHERE RoomID = (SELECT RoomID FROM Audition_Room WHERE RoomName = 'Room 202')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT name, Date, Time FROM Dance_Recital WHERE RoomID = (SELECT RoomID FROM Audition_Room WHERE RoomName = 'Room 202') \nUNION \nSELECT Name, Date, NULL AS Time FROM Talent_Show WHERE RoomID = (SELECT RoomID FROM Audition_Room WHERE RoomName = 'Room 202')",
                "original_exception": "no such column: Date"
              }
            ],
            "all_found": false
          }
        },
        {
          "interpretation": "Produce a single table containing information on all dance recitals and talent shows scheduled in Room 202.",
          "sql_queries": [
            "SELECT name AS EventName, Date, Time, RoomID FROM Dance_Recital WHERE RoomID = (SELECT RoomID FROM Audition_Room WHERE RoomName = 'Room 202') UNION SELECT Name AS EventName, Date, Time, RoomID FROM Talent_Show WHERE RoomID = (SELECT RoomID FROM Audition_Room WHERE RoomName = 'Room 202')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT name AS EventName, Date, Time, RoomID FROM Dance_Recital WHERE RoomID = (SELECT RoomID FROM Audition_Room WHERE RoomName = 'Room 202') UNION SELECT Name AS EventName, Date, Time, RoomID FROM Talent_Show WHERE RoomID = (SELECT RoomID FROM Audition_Room WHERE RoomName = 'Room 202')",
                "original_exception": "no such column: Date"
              }
            ],
            "all_found": false
          }
        },
        {
          "interpretation": "List all dance recitals and talent shows taking place in Room 202.",
          "sql_queries": [
            "SELECT name FROM Dance_Recital WHERE RoomID = (SELECT RoomID FROM Audition_Room WHERE RoomName = 'Room 202')\nUNION\nSELECT Name FROM Talent_Show WHERE RoomID = (SELECT RoomID FROM Audition_Room WHERE RoomName = 'Room 202')"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.3333333333333333,
        "f1_score": 0.4,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [
          {
            "query": "SELECT name AS EventName, Date, Time, RoomID FROM Dance_Recital WHERE RoomID = (SELECT RoomID FROM Audition_Room WHERE RoomName = 'Room 202') UNION SELECT Name AS EventName, Date, Time, RoomID FROM Talent_Show WHERE RoomID = (SELECT RoomID FROM Audition_Room WHERE RoomName = 'Room 202')",
            "original_exception": "no such column: Date"
          },
          {
            "query": "SELECT name, Date, Time FROM Dance_Recital WHERE RoomID = (SELECT RoomID FROM Audition_Room WHERE RoomName = 'Room 202') \nUNION \nSELECT Name, Date, NULL AS Time FROM Talent_Show WHERE RoomID = (SELECT RoomID FROM Audition_Room WHERE RoomName = 'Room 202')",
            "original_exception": "no such column: Date"
          }
        ],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Entertainment/attachment_2tab_ref_musician/attachment_2tab_ref_musician.sqlite",
      "db_dump": "CREATE TABLE AlbumTracks (\n    id INTEGER PRIMARY KEY,\n    trackNumber INTEGER,\n    title TEXT,\n    duration TIME);\nCREATE TABLE Albums (\n    id INTEGER PRIMARY KEY,\n    albumTitle TEXT,\n    releaseYear INTEGER);\nCREATE TABLE BluegrassSingers (\n    id INTEGER PRIMARY KEY,\n    singerName TEXT,\n    bluegrassStyle BOOLEAN DEFAULT FALSE,\n    foreignKey INTEGER REFERENCES Instruments(id));\nCREATE TABLE CountrySingers (\n    id INTEGER PRIMARY KEY,\n    singerName TEXT,\n    country TEXT,\n    foreignKey INTEGER REFERENCES Instruments(id));\nCREATE TABLE Instruments (\n    id INTEGER PRIMARY KEY,\n    instrumentName TEXT UNIQUE);\nCREATE TABLE SingsOnAlbum (\n    id INTEGER PRIMARY KEY,\n    singerId INTEGER,\n    albumId INTEGER,\n    FOREIGN KEY (singerId) REFERENCES CountrySingers(id),\n    FOREIGN KEY (albumId) REFERENCES Albums(id));\n\nINSERT INTO \"AlbumTracks\" (id,trackNumber,title,duration) VALUES (1,1,'Track 1','3:00'),(2,2,'Track 2','3:30');\nINSERT INTO \"Albums\" (id,albumTitle,releaseYear) VALUES (1,'My First Album',2000),(2,'The Best of Me',2010);\nINSERT INTO \"BluegrassSingers\" (id,singerName,bluegrassStyle,foreignKey) VALUES (1,'Tom Brown',1,1),(2,'Emily White',0,2);\nINSERT INTO \"CountrySingers\" (id,singerName,country,foreignKey) VALUES (1,'John Doe','USA',1),(2,'Jane Smith','Canada',2);\nINSERT INTO \"Instruments\" (id,instrumentName) VALUES (1,'Guitar'),(2,'Piano');\nINSERT INTO \"SingsOnAlbum\" (id,singerId,albumId) VALUES (1,1,1),(2,2,1),(3,3,2),(4,4,2);\n",
      "question": "What country singers play the piano and what bluegrass singers also play? Show them in one table.",
      "gold_queries": [
        "SELECT CountrySingers.singername\r\nFROM Instruments JOIN CountrySingers ON Instruments.id = CountrySingers.foreignKey\r\nWHERE Instruments.instrumentName = \"Piano\"\r\nUNION\r\nSELECT BluegrassSingers.singername\r\nFROM Instruments JOIN BluegrassSingers ON Instruments.id = BluegrassSingers.foreignKey\r\nWHERE Instruments.instrumentName = \"Piano\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Country Singers using piano and Bluegrass Singers playing piano displayed as a unified table.",
          "sql_queries": [
            "SELECT CountrySingers.singerName AS singerName\nFROM CountrySingers\nJOIN Instruments ON CountrySingers.foreignKey = Instruments.id\nWHERE Instruments.instrumentName = 'Piano'\nUNION\nSELECT BluegrassSingers.singerName AS singerName\nFROM BluegrassSingers\nJOIN Instruments ON BluegrassSingers.foreignKey = Instruments.id\nWHERE Instruments.instrumentName = 'Piano'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "What are the country singers whose instrument is piano and what bluegrass singers play piano.",
          "sql_queries": [
            "SELECT CS.singerName \nFROM CountrySingers CS \nJOIN Instruments I ON CS.foreignKey = I.id \nWHERE I.instrumentName = 'Piano'",
            "SELECT BS.singerName \nFROM BluegrassSingers BS \nJOIN Instruments I ON BS.foreignKey = I.id \nWHERE I.instrumentName = 'Piano'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Identify country singers who use the piano and bluegrass singers who use the piano, in a single output table.",
          "sql_queries": [
            "SELECT singerName FROM CountrySingers WHERE foreignKey = (SELECT id FROM Instruments WHERE instrumentName = 'Piano') \nUNION \nSELECT singerName FROM BluegrassSingers WHERE foreignKey = (SELECT id FROM Instruments WHERE instrumentName = 'Piano')"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "List country singers who play piano and bluegrass singers who play piano, combined.",
          "sql_queries": [
            "SELECT singerName FROM CountrySingers WHERE foreignKey = (SELECT id FROM Instruments WHERE instrumentName = 'Piano')\nUNION\nSELECT singerName FROM BluegrassSingers WHERE foreignKey = (SELECT id FROM Instruments WHERE instrumentName = 'Piano')"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.6,
        "f1_score": 0.7499999999999999,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/attachment/Entertainment/attachment_2tab_ref_musician/attachment_2tab_ref_musician.sqlite",
      "db_dump": "CREATE TABLE AlbumTracks (\n    id INTEGER PRIMARY KEY,\n    trackNumber INTEGER,\n    title TEXT,\n    duration TIME);\nCREATE TABLE Albums (\n    id INTEGER PRIMARY KEY,\n    albumTitle TEXT,\n    releaseYear INTEGER);\nCREATE TABLE BluegrassSingers (\n    id INTEGER PRIMARY KEY,\n    singerName TEXT,\n    bluegrassStyle BOOLEAN DEFAULT FALSE,\n    foreignKey INTEGER REFERENCES Instruments(id));\nCREATE TABLE CountrySingers (\n    id INTEGER PRIMARY KEY,\n    singerName TEXT,\n    country TEXT,\n    foreignKey INTEGER REFERENCES Instruments(id));\nCREATE TABLE Instruments (\n    id INTEGER PRIMARY KEY,\n    instrumentName TEXT UNIQUE);\nCREATE TABLE SingsOnAlbum (\n    id INTEGER PRIMARY KEY,\n    singerId INTEGER,\n    albumId INTEGER,\n    FOREIGN KEY (singerId) REFERENCES CountrySingers(id),\n    FOREIGN KEY (albumId) REFERENCES Albums(id));\n\nINSERT INTO \"AlbumTracks\" (id,trackNumber,title,duration) VALUES (1,1,'Track 1','3:00'),(2,2,'Track 2','3:30');\nINSERT INTO \"Albums\" (id,albumTitle,releaseYear) VALUES (1,'My First Album',2000),(2,'The Best of Me',2010);\nINSERT INTO \"BluegrassSingers\" (id,singerName,bluegrassStyle,foreignKey) VALUES (1,'Tom Brown',1,1),(2,'Emily White',0,2);\nINSERT INTO \"CountrySingers\" (id,singerName,country,foreignKey) VALUES (1,'John Doe','USA',1),(2,'Jane Smith','Canada',2);\nINSERT INTO \"Instruments\" (id,instrumentName) VALUES (1,'Guitar'),(2,'Piano');\nINSERT INTO \"SingsOnAlbum\" (id,singerId,albumId) VALUES (1,1,1),(2,2,1),(3,3,2),(4,4,2);\n",
      "question": "Provide a list of all country singers and also provide a list of bluegrass singers who play the piano. Show them in one table.",
      "gold_queries": [
        "SELECT CountrySingers.singername\r\nFROM Instruments JOIN CountrySingers ON Instruments.id = CountrySingers.foreignKey\r\nUNION\r\nSELECT BluegrassSingers.singername\r\nFROM Instruments JOIN BluegrassSingers ON Instruments.id = BluegrassSingers.foreignKey\r\nWHERE Instruments.instrumentName = \"Piano\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Display the country and bluegrass singers with distinct rows for each, noting their instruments and genre affiliations",
          "sql_queries": [
            "SELECT DISTINCT I.instrumentName, CS.singerName AS countrySinger, CS.country, BS.singerName AS bluegrassSinger, BS.bluegrassStyle\nFROM Instruments I\nLEFT JOIN CountrySingers CS ON I.id = CS.foreignKey\nLEFT JOIN BluegrassSingers BS ON I.id = BS.foreignKey"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Provide two separate lists, one of country singers and another of bluegrass singers who play piano",
          "sql_queries": [
            "SELECT singerName FROM BluegrassSingers WHERE foreignKey = (SELECT id FROM Instruments WHERE instrumentName = 'Piano')",
            "SELECT singerName FROM CountrySingers WHERE foreignKey = (SELECT id FROM Instruments WHERE instrumentName = 'Piano')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Combine all singer names and their associated instrument information into a single table",
          "sql_queries": [
            "SELECT CS.singerName AS singerName, I.instrumentName\nFROM CountrySingers CS\nJOIN Instruments I ON CS.foreignKey = I.id\nUNION\nSELECT BS.singerName AS singerName, I.instrumentName\nFROM BluegrassSingers BS\nJOIN Instruments I ON BS.foreignKey = I.id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all singers, then designate each singer as a country musician or a bluegrass musician while specifying their instrument for each",
          "sql_queries": [
            "SELECT singerName, 'Country Musician' AS musicianType, instrumentName\nFROM CountrySingers\nJOIN Instruments ON CountrySingers.foreignKey = Instruments.id",
            "SELECT singerName, 'Bluegrass Musician' AS musicianType, instrumentName\nFROM BluegrassSingers\nJOIN Instruments ON BluegrassSingers.foreignKey = Instruments.id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Education/attachment_2tab_ref_learning_materials/attachment_2tab_ref_learning_materials.sqlite",
      "db_dump": "CREATE TABLE Difficulty_Level(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Level TEXT UNIQUE);\nCREATE TABLE EnrolledStudents(\n    StudentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    Age INTEGER,\n    Email TEXT,\n    PhoneNumber VARCHAR(15));\nCREATE TABLE Online_Courses(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CourseName TEXT,\n    Instructor TEXT,\n    Platform TEXT,\n    URL TEXT,\n    SubjectID INTEGER,\n    FOREIGN KEY(SubjectID) REFERENCES Subjects(ID));\nCREATE TABLE Subjects(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Description TEXT,\n    DifficultyID INTEGER,\n    FOREIGN KEY(DifficultyID) REFERENCES Difficulty_Level(ID));\nCREATE TABLE Textbooks(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Author TEXT,\n    ISBN TEXT,\n    SubjectID INTEGER,\n    FOREIGN KEY(SubjectID) REFERENCES Subjects(ID));\n\nINSERT INTO \"Difficulty_Level\" (ID,Level) VALUES (1,'Beginner'),(2,'Advanced'),(3,'Expert');\nINSERT INTO \"EnrolledStudents\" (StudentID,FirstName,LastName,Age,Email,PhoneNumber) VALUES (1,'Alice','Smith',20,'alicesmith@example.com','+1-123-456-7890'),(2,'Bob','Johnson',21,'bobjohnson@example.com','+1-987-654-3210'),(3,'Charlie','Williams',22,'charliewilliams@example.com','+1-555-123-4567'),(4,'David','Martinez',23,'davidmartinez@example.com','+1-321-654-9870'),(5,'Eva','Garcia',24,'evagarcia@example.com','+1-789-456-1234');\nINSERT INTO \"Online_Courses\" (ID,CourseName,Instructor,Platform,URL,SubjectID) VALUES (1,'Introductory Math','Prof. James Johnson','Udemy','https://www.udemy.com/introductory-math',1),(2,'Essential Physics','Dr. Emily White','Coursera','https://www.coursera.org/physics',2),(3,'Foundations of Biology','Dr. Robert Green','edX','https://www.edx.org/biology',3),(4,'Global History Survey','Dr. Susan King','FutureLearn','https://www.futurelearn.com/history',4),(5,'Great Literary Works','Ms. Karen Taylor','LinkedIn Learning','https://www.linkedinlearning.com/literature',5);\nINSERT INTO \"Subjects\" (ID,Name,Description,DifficultyID) VALUES (1,'Math','Introduction to Mathematics',1),(2,'Physics','Basic Principles of Physics',2),(3,'Biology','Basics of Biological Sciences',3),(4,'History','World History Overview',1),(5,'Literature','Classic Novels Analysis',2);\nINSERT INTO \"Textbooks\" (ID,Title,Author,ISBN,SubjectID) VALUES (1,'Mathematics for Beginners','John Doe','978-0-123-456789',1),(2,'The World of Physics','Jane Smith','978-0-091-234567',2),(3,'An Introduction to Biology','Michael Brown','978-1-234-567890',3),(4,'A Brief History of Time','Stephen Hawking','978-0-123-987654',4),(5,'To Kill a Mockingbird','Harper Lee','978-0-123-123456',5);\n",
      "question": "Show advanced online courses and textbooks. Show them in one table.",
      "gold_queries": [
        "SELECT Textbooks.title as title\r\nFROM Difficulty_Level JOIN Subjects ON Difficulty_Level.ID = Subjects.DifficultyID JOIN Textbooks ON Subjects.ID = Textbooks.SubjectID\r\nWHERE Difficulty_Level.Level = \"Advanced\"\r\nUNION\r\nSELECT Online_Courses.coursename as title\r\nFROM Difficulty_Level JOIN Subjects ON Difficulty_Level.ID = Subjects.DifficultyID JOIN Online_Courses ON Subjects.ID = Online_Courses.SubjectID\r\nWHERE Difficulty_Level.Level = \"Advanced\"",
        "SELECT Textbooks.title as title\r\nFROM Difficulty_Level JOIN Subjects ON Difficulty_Level.ID = Subjects.DifficultyID JOIN Textbooks ON Subjects.ID = Textbooks.SubjectID\r\nUNION\r\nSELECT Online_Courses.coursename as title\r\nFROM Difficulty_Level JOIN Subjects ON Difficulty_Level.ID = Subjects.DifficultyID JOIN Online_Courses ON Subjects.ID = Online_Courses.SubjectID\r\nWHERE Difficulty_Level.Level = \"Advanced\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Display all online courses with a \"DifficultyID\" of 2 in one table.",
          "sql_queries": [
            "SELECT OC.CourseName, OC.Instructor, OC.Platform, OC.URL\nFROM Online_Courses OC\nJOIN Subjects S ON OC.SubjectID = S.ID\nWHERE S.DifficultyID = 2"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all textbooks where the associated Subject's \"DifficultyID\" is 2, combined with the corresponding online courses from the \"Online_Courses\" table into a single table.",
          "sql_queries": [
            "SELECT T1.Title, T1.Author, T1.ISBN, T2.CourseName, T2.Instructor, T2.Platform, T2.URL\nFROM Textbooks AS T1\nJOIN Subjects AS S ON T1.SubjectID = S.ID\nJOIN Online_Courses AS T2 ON S.ID = T2.SubjectID\nWHERE S.DifficultyID = 2"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Present a consolidated table containing textbooks with \"DifficultyID\" 2 and courses with \"DifficultyID\" 2.",
          "sql_queries": [
            "SELECT Title, Author, ISBN, DifficultyID FROM Textbooks WHERE DifficultyID = 2\nUNION\nSELECT CourseName, Instructor, Platform, DifficultyID FROM Online_Courses INNER JOIN Subjects ON Online_Courses.SubjectID = Subjects.ID WHERE Subjects.DifficultyID = 2"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT Title, Author, ISBN, DifficultyID FROM Textbooks WHERE DifficultyID = 2\nUNION\nSELECT CourseName, Instructor, Platform, DifficultyID FROM Online_Courses INNER JOIN Subjects ON Online_Courses.SubjectID = Subjects.ID WHERE Subjects.DifficultyID = 2",
                "original_exception": "no such column: DifficultyID"
              }
            ],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [
          {
            "query": "SELECT Title, Author, ISBN, DifficultyID FROM Textbooks WHERE DifficultyID = 2\nUNION\nSELECT CourseName, Instructor, Platform, DifficultyID FROM Online_Courses INNER JOIN Subjects ON Online_Courses.SubjectID = Subjects.ID WHERE Subjects.DifficultyID = 2",
            "original_exception": "no such column: DifficultyID"
          }
        ],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Education/attachment_2tab_ref_learning_materials/attachment_2tab_ref_learning_materials.sqlite",
      "db_dump": "CREATE TABLE Difficulty_Level(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Level TEXT UNIQUE);\nCREATE TABLE EnrolledStudents(\n    StudentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    Age INTEGER,\n    Email TEXT,\n    PhoneNumber VARCHAR(15));\nCREATE TABLE Online_Courses(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CourseName TEXT,\n    Instructor TEXT,\n    Platform TEXT,\n    URL TEXT,\n    SubjectID INTEGER,\n    FOREIGN KEY(SubjectID) REFERENCES Subjects(ID));\nCREATE TABLE Subjects(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Description TEXT,\n    DifficultyID INTEGER,\n    FOREIGN KEY(DifficultyID) REFERENCES Difficulty_Level(ID));\nCREATE TABLE Textbooks(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Author TEXT,\n    ISBN TEXT,\n    SubjectID INTEGER,\n    FOREIGN KEY(SubjectID) REFERENCES Subjects(ID));\n\nINSERT INTO \"Difficulty_Level\" (ID,Level) VALUES (1,'Beginner'),(2,'Advanced'),(3,'Expert');\nINSERT INTO \"EnrolledStudents\" (StudentID,FirstName,LastName,Age,Email,PhoneNumber) VALUES (1,'Alice','Smith',20,'alicesmith@example.com','+1-123-456-7890'),(2,'Bob','Johnson',21,'bobjohnson@example.com','+1-987-654-3210'),(3,'Charlie','Williams',22,'charliewilliams@example.com','+1-555-123-4567'),(4,'David','Martinez',23,'davidmartinez@example.com','+1-321-654-9870'),(5,'Eva','Garcia',24,'evagarcia@example.com','+1-789-456-1234');\nINSERT INTO \"Online_Courses\" (ID,CourseName,Instructor,Platform,URL,SubjectID) VALUES (1,'Introductory Math','Prof. James Johnson','Udemy','https://www.udemy.com/introductory-math',1),(2,'Essential Physics','Dr. Emily White','Coursera','https://www.coursera.org/physics',2),(3,'Foundations of Biology','Dr. Robert Green','edX','https://www.edx.org/biology',3),(4,'Global History Survey','Dr. Susan King','FutureLearn','https://www.futurelearn.com/history',4),(5,'Great Literary Works','Ms. Karen Taylor','LinkedIn Learning','https://www.linkedinlearning.com/literature',5);\nINSERT INTO \"Subjects\" (ID,Name,Description,DifficultyID) VALUES (1,'Math','Introduction to Mathematics',1),(2,'Physics','Basic Principles of Physics',2),(3,'Biology','Basics of Biological Sciences',3),(4,'History','World History Overview',1),(5,'Literature','Classic Novels Analysis',2);\nINSERT INTO \"Textbooks\" (ID,Title,Author,ISBN,SubjectID) VALUES (1,'Mathematics for Beginners','John Doe','978-0-123-456789',1),(2,'The World of Physics','Jane Smith','978-0-091-234567',2),(3,'An Introduction to Biology','Michael Brown','978-1-234-567890',3),(4,'A Brief History of Time','Stephen Hawking','978-0-123-987654',4),(5,'To Kill a Mockingbird','Harper Lee','978-0-123-123456',5);\n",
      "question": "Provide a list of all textbooks and also provide a list of advanced online courses. Show them in one table.",
      "gold_queries": [
        "SELECT Textbooks.title as title\r\nFROM Difficulty_Level JOIN Subjects ON Difficulty_Level.ID = Subjects.DifficultyID JOIN Textbooks ON Subjects.ID = Textbooks.SubjectID\r\nUNION\r\nSELECT Online_Courses.coursename as title\r\nFROM Difficulty_Level JOIN Subjects ON Difficulty_Level.ID = Subjects.DifficultyID JOIN Online_Courses ON Subjects.ID = Online_Courses.SubjectID\r\nWHERE Difficulty_Level.Level = \"Advanced\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List all textbooks and advanced online courses, combining them in a single table.",
          "sql_queries": [
            "SELECT Title AS CourseName, Author, ISBN AS URL FROM Textbooks\nUNION\nSELECT CourseName, Instructor, URL FROM Online_Courses\nWHERE SubjectID IN (\n    SELECT ID FROM Subjects\n    WHERE DifficultyID = (\n        SELECT ID FROM Difficulty_Level\n        WHERE Level = 'Advanced'\n    )\n)"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Produce a single table that juxtaposes textbook information with data on advanced online courses.",
          "sql_queries": [
            "SELECT Textbooks.Title, Textbooks.Author, Textbooks.ISBN, Online_Courses.CourseName, Online_Courses.Instructor, Online_Courses.Platform\nFROM Textbooks\nJOIN Subjects ON Textbooks.SubjectID = Subjects.ID\nJOIN Online_Courses ON Subjects.ID = Online_Courses.SubjectID\nJOIN Difficulty_Level ON Subjects.DifficultyID = Difficulty_Level.ID\nWHERE Difficulty_Level.Level = 'Advanced'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Display a table containing two columns: one for textbooks and one for advanced online courses.",
          "sql_queries": [
            "SELECT T.Title, O.CourseName \nFROM Textbooks T \nJOIN Subjects S ON T.SubjectID = S.ID \nJOIN Online_Courses O ON S.ID = O.SubjectID \nJOIN Difficulty_Level D ON S.DifficultyID = D.ID \nWHERE D.Level = 'Advanced'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Create a table that lists all textbooks in one column and all advanced online courses in another.",
          "sql_queries": [
            "SELECT T1.Title AS Textbooks, T2.CourseName AS AdvancedOnlineCourses\nFROM Textbooks AS T1\nCROSS JOIN Online_Courses AS T2\nJOIN Subjects AS T3 ON T2.SubjectID = T3.ID\nJOIN Difficulty_Level AS T4 ON T3.DifficultyID = T4.ID\nWHERE T4.Level = 'Advanced'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Generate a table merging information about textbooks and advanced online courses.",
          "sql_queries": [
            "SELECT T1.Title, T1.Author, T1.ISBN, T3.CourseName, T3.Instructor, T3.Platform, T3.URL\nFROM Textbooks AS T1\nJOIN Subjects AS T2 ON T1.SubjectID = T2.ID\nJOIN Online_Courses AS T3 ON T2.ID = T3.SubjectID\nJOIN Difficulty_Level AS T4 ON T2.DifficultyID = T4.ID\nWHERE T4.Level = 'Advanced'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Education/attachment_2tab_ref_learning_materials/attachment_2tab_ref_learning_materials.sqlite",
      "db_dump": "CREATE TABLE Difficulty_Level(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Level TEXT UNIQUE);\nCREATE TABLE EnrolledStudents(\n    StudentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    Age INTEGER,\n    Email TEXT,\n    PhoneNumber VARCHAR(15));\nCREATE TABLE Online_Courses(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CourseName TEXT,\n    Instructor TEXT,\n    Platform TEXT,\n    URL TEXT,\n    SubjectID INTEGER,\n    FOREIGN KEY(SubjectID) REFERENCES Subjects(ID));\nCREATE TABLE Subjects(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Description TEXT,\n    DifficultyID INTEGER,\n    FOREIGN KEY(DifficultyID) REFERENCES Difficulty_Level(ID));\nCREATE TABLE Textbooks(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Author TEXT,\n    ISBN TEXT,\n    SubjectID INTEGER,\n    FOREIGN KEY(SubjectID) REFERENCES Subjects(ID));\n\nINSERT INTO \"Difficulty_Level\" (ID,Level) VALUES (1,'Beginner'),(2,'Advanced'),(3,'Expert');\nINSERT INTO \"EnrolledStudents\" (StudentID,FirstName,LastName,Age,Email,PhoneNumber) VALUES (1,'Alice','Smith',20,'alicesmith@example.com','+1-123-456-7890'),(2,'Bob','Johnson',21,'bobjohnson@example.com','+1-987-654-3210'),(3,'Charlie','Williams',22,'charliewilliams@example.com','+1-555-123-4567'),(4,'David','Martinez',23,'davidmartinez@example.com','+1-321-654-9870'),(5,'Eva','Garcia',24,'evagarcia@example.com','+1-789-456-1234');\nINSERT INTO \"Online_Courses\" (ID,CourseName,Instructor,Platform,URL,SubjectID) VALUES (1,'Introductory Math','Prof. James Johnson','Udemy','https://www.udemy.com/introductory-math',1),(2,'Essential Physics','Dr. Emily White','Coursera','https://www.coursera.org/physics',2),(3,'Foundations of Biology','Dr. Robert Green','edX','https://www.edx.org/biology',3),(4,'Global History Survey','Dr. Susan King','FutureLearn','https://www.futurelearn.com/history',4),(5,'Great Literary Works','Ms. Karen Taylor','LinkedIn Learning','https://www.linkedinlearning.com/literature',5);\nINSERT INTO \"Subjects\" (ID,Name,Description,DifficultyID) VALUES (1,'Math','Introduction to Mathematics',1),(2,'Physics','Basic Principles of Physics',2),(3,'Biology','Basics of Biological Sciences',3),(4,'History','World History Overview',1),(5,'Literature','Classic Novels Analysis',2);\nINSERT INTO \"Textbooks\" (ID,Title,Author,ISBN,SubjectID) VALUES (1,'Mathematics for Beginners','John Doe','978-0-123-456789',1),(2,'The World of Physics','Jane Smith','978-0-091-234567',2),(3,'An Introduction to Biology','Michael Brown','978-1-234-567890',3),(4,'A Brief History of Time','Stephen Hawking','978-0-123-987654',4),(5,'To Kill a Mockingbird','Harper Lee','978-0-123-123456',5);\n",
      "question": "What textbooks are advanced and what online courses are the same difficulty? Show them in one table.",
      "gold_queries": [
        "SELECT Textbooks.title as title\r\nFROM Difficulty_Level JOIN Subjects ON Difficulty_Level.ID = Subjects.DifficultyID JOIN Textbooks ON Subjects.ID = Textbooks.SubjectID\r\nWHERE Difficulty_Level.Level = \"Advanced\"\r\nUNION\r\nSELECT Online_Courses.coursename as title\r\nFROM Difficulty_Level JOIN Subjects ON Difficulty_Level.ID = Subjects.DifficultyID JOIN Online_Courses ON Subjects.ID = Online_Courses.SubjectID\r\nWHERE Difficulty_Level.Level = \"Advanced\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List all textbooks classified as 'Advanced' and their associated online courses based on subject and difficulty.",
          "sql_queries": [
            "SELECT T3.Title, T4.CourseName \nFROM Subjects AS T1 \nJOIN Difficulty_Level AS T2 ON T1.DifficultyID = T2.ID \nJOIN Textbooks AS T3 ON T1.ID = T3.SubjectID \nJOIN Online_Courses AS T4 ON T1.ID = T4.SubjectID \nWHERE T2.Level = 'Advanced'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Determine textbooks classified as 'Advanced' and retrieve online courses with equivalent subject matter difficulty.",
          "sql_queries": [
            "SELECT T1.CourseName \nFROM Online_Courses AS T1 \nJOIN Subjects AS T2 ON T1.SubjectID = T2.ID \nJOIN Difficulty_Level AS T3 ON T2.DifficultyID = T3.ID \nWHERE T3.Level = 'Advanced'",
            "SELECT T1.Title \nFROM Textbooks AS T1 \nJOIN Subjects AS T2 ON T1.SubjectID = T2.ID \nJOIN Difficulty_Level AS T3 ON T2.DifficultyID = T3.ID \nWHERE T3.Level = 'Advanced'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Find textbooks categorized as 'Advanced' and list corresponding online courses from the same subject.",
          "sql_queries": [
            "SELECT T1.Title, T2.CourseName \nFROM Textbooks AS T1 \nJOIN Subjects AS T3 ON T1.SubjectID = T3.ID \nJOIN Online_Courses AS T2 ON T3.ID = T2.SubjectID \nJOIN Difficulty_Level AS T4 ON T3.DifficultyID = T4.ID \nWHERE T4.Level = 'Advanced'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Identify textbooks with DifficultyLevel='Advanced' and online courses with matching DifficultyLevel.",
          "sql_queries": [
            "SELECT T1.Title, T1.Author\nFROM Textbooks T1\nJOIN Subjects T2 ON T1.SubjectID = T2.ID\nJOIN Difficulty_Level T3 ON T2.DifficultyID = T3.ID\nWHERE T3.Level = 'Advanced'",
            "SELECT T1.CourseName, T1.Instructor\nFROM Online_Courses T1\nJOIN Subjects T2 ON T1.SubjectID = T2.ID\nJOIN Difficulty_Level T3 ON T2.DifficultyID = T3.ID\nWHERE T3.Level = 'Advanced'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/attachment/Education/attachment_2tab_val_academic_writing/attachment_2tab_val_academic_writing.sqlite",
      "db_dump": "CREATE TABLE Course(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Code TEXT,\n    Description TEXT,\n    Credit HONORS);\nCREATE TABLE Degree(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    DegreeType TEXT,\n    GraduationDate DATE,\n    Grade TEXT);\nCREATE TABLE Dissertations(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Abstract TEXT,\n    Date DATE,\n    Academic_Supervisor TEXT);\nCREATE TABLE Student_Course(\n    Marks INT ,\n    PRIMARY KEY(StudentID, CourseID));\nCREATE TABLE Student_Supervision(\n    PRIMARY KEY(StudentID, SupervisorID, DissertationID, ThesisProposalID));\nCREATE TABLE Students(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Email TEXT,\n    PhoneNumber VARCHAR(15),\n    EnrolmentDate DATE);\nCREATE TABLE Supervisors(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FullName TEXT);\nCREATE TABLE Thesis_Proposals(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Abstract TEXT,\n    Date DATE,\n    Academic_Supervisor TEXT);\n\nINSERT INTO \"Course\" (ID,Code,Description,Credit) VALUES (1,'CS101','Introduction to Computer Science',4),(2,'ENG101','English Language Skills',3),(3,'MAT201','Calculus I',4),(4,'SOC301','Sociology of Education',3),(5,'PHY101','General Physics',4);\nINSERT INTO \"Degree\" (ID,StudentID,DegreeType,GraduationDate,Grade) VALUES (1,1,'PhD','2021-12-01','A'),(2,2,'MSc','2022-12-01','A+'),(3,3,'MA','2023-12-01','A'),(4,4,'BA','2024-12-01','A+'),(5,5,'BSc','2025-12-01','A');\nINSERT INTO \"Dissertations\" (ID,Title,Abstract,Date,Academic_Supervisor) VALUES (1,'Understanding Quantum Mechanics','Exploring the principles of quantum mechanics...','2021-01-01','Dr. Jane Smith'),(2,'Advances in Artificial Intelligence','Investigating the latest developments in AI technology...','2021-01-02','Dr. John Doe');\nINSERT INTO \"Student_Course\" (StudentID,CourseID,Marks) VALUES (1,1,85),(1,2,90),(1,3,88),(2,4,92),(2,5,80);\nINSERT INTO \"Students\" (ID,Name,Email,PhoneNumber,EnrolmentDate) VALUES (1,'John Doe','john@example.com','1234567890','2021-01-01'),(2,'Jane Smith','jane@example.com','9876543210','2021-02-01'),(3,'Alice Johnson','alice@example.com','0987654321','2021-03-01'),(4,'Bob Brown','bob@example.com','1234567890','2021-04-01'),(5,'Charlie Davis','charlie@example.com','0987654321','2021-05-01');\nINSERT INTO \"Supervisors\" (ID,FullName) VALUES (1,'Dr. Jane Smith'),(2,'Dr. John Doe'),(3,'Dr. Alice Johnson'),(4,'Dr. Bob Brown'),(5,'Dr. Charlie Davis');\nINSERT INTO \"Thesis_Proposals\" (ID,Title,Abstract,Date,Academic_Supervisor) VALUES (1,'Educational Technology Trends','An analysis of current trends in educational technology...','2021-02-01','Dr. Jane Smith'),(2,'Learning Styles and Effective Teaching Methods','Examining various learning styles and their impact on teaching methods...','2021-02-02','Dr. Alice Johnson');\n",
      "question": "What dissertations were supervised by Dr. Jane Smith and what thesis proposals did she also supervise? Show them in one table.",
      "gold_queries": [
        "SELECT Dissertations.title\r\nFROM Dissertations\r\nWHERE Dissertations.Academic_Supervisor = \"Dr. Jane Smith\"\r\nUNION\r\nSELECT Thesis_Proposals.title\r\nFROM Thesis_Proposals\r\nWHERE Thesis_Proposals.Academic_Supervisor = \"Dr. Jane Smith\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Create a table merging two separate tables: one containing dissertations supervised by 'Dr. Jane Smith' and another containing thesis proposals supervised by 'Dr. Jane Smith'.",
          "sql_queries": [
            "SELECT Title, Abstract, Date, Academic_Supervisor FROM Dissertations WHERE Academic_Supervisor = 'Dr. Jane Smith'\nUNION\nSELECT Title, Abstract, Date, Academic_Supervisor FROM Thesis_Proposals WHERE Academic_Supervisor = 'Dr. Jane Smith'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all dissertations and thesis proposals where 'Dr. Jane Smith' is the Academic_Supervisor, displaying the information in a single unified table.",
          "sql_queries": [
            "SELECT Title, Abstract, Date, Academic_Supervisor \nFROM Dissertations \nWHERE Academic_Supervisor = 'Dr. Jane Smith'\nUNION\nSELECT Title, Abstract, Date, Academic_Supervisor \nFROM Thesis_Proposals \nWHERE Academic_Supervisor = 'Dr. Jane Smith'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Find all dissertations supervised by 'Dr. Jane Smith' and all thesis proposals supervised by 'Dr. Jane Smith', combining the results into one table.",
          "sql_queries": [
            "SELECT Title, Abstract, Date, Academic_Supervisor FROM Dissertations WHERE Academic_Supervisor = 'Dr. Jane Smith'\nUNION\nSELECT Title, Abstract, Date, Academic_Supervisor FROM Thesis_Proposals WHERE Academic_Supervisor = 'Dr. Jane Smith'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Generate a table containing a list of dissertations supervised by 'Dr. Jane Smith' and their respective thesis proposals, linking them based on supervisor.",
          "sql_queries": [
            "SELECT D.Title AS DissertationTitle, TP.Title AS ThesisProposalTitle\nFROM Dissertations D\nJOIN Thesis_Proposals TP ON D.Academic_Supervisor = TP.Academic_Supervisor\nWHERE D.Academic_Supervisor = 'Dr. Jane Smith'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 4,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Education/attachment_2tab_val_academic_writing/attachment_2tab_val_academic_writing.sqlite",
      "db_dump": "CREATE TABLE Course(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Code TEXT,\n    Description TEXT,\n    Credit HONORS);\nCREATE TABLE Degree(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    DegreeType TEXT,\n    GraduationDate DATE,\n    Grade TEXT);\nCREATE TABLE Dissertations(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Abstract TEXT,\n    Date DATE,\n    Academic_Supervisor TEXT);\nCREATE TABLE Student_Course(\n    Marks INT ,\n    PRIMARY KEY(StudentID, CourseID));\nCREATE TABLE Student_Supervision(\n    PRIMARY KEY(StudentID, SupervisorID, DissertationID, ThesisProposalID));\nCREATE TABLE Students(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Email TEXT,\n    PhoneNumber VARCHAR(15),\n    EnrolmentDate DATE);\nCREATE TABLE Supervisors(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FullName TEXT);\nCREATE TABLE Thesis_Proposals(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Abstract TEXT,\n    Date DATE,\n    Academic_Supervisor TEXT);\n\nINSERT INTO \"Course\" (ID,Code,Description,Credit) VALUES (1,'CS101','Introduction to Computer Science',4),(2,'ENG101','English Language Skills',3),(3,'MAT201','Calculus I',4),(4,'SOC301','Sociology of Education',3),(5,'PHY101','General Physics',4);\nINSERT INTO \"Degree\" (ID,StudentID,DegreeType,GraduationDate,Grade) VALUES (1,1,'PhD','2021-12-01','A'),(2,2,'MSc','2022-12-01','A+'),(3,3,'MA','2023-12-01','A'),(4,4,'BA','2024-12-01','A+'),(5,5,'BSc','2025-12-01','A');\nINSERT INTO \"Dissertations\" (ID,Title,Abstract,Date,Academic_Supervisor) VALUES (1,'Understanding Quantum Mechanics','Exploring the principles of quantum mechanics...','2021-01-01','Dr. Jane Smith'),(2,'Advances in Artificial Intelligence','Investigating the latest developments in AI technology...','2021-01-02','Dr. John Doe');\nINSERT INTO \"Student_Course\" (StudentID,CourseID,Marks) VALUES (1,1,85),(1,2,90),(1,3,88),(2,4,92),(2,5,80);\nINSERT INTO \"Students\" (ID,Name,Email,PhoneNumber,EnrolmentDate) VALUES (1,'John Doe','john@example.com','1234567890','2021-01-01'),(2,'Jane Smith','jane@example.com','9876543210','2021-02-01'),(3,'Alice Johnson','alice@example.com','0987654321','2021-03-01'),(4,'Bob Brown','bob@example.com','1234567890','2021-04-01'),(5,'Charlie Davis','charlie@example.com','0987654321','2021-05-01');\nINSERT INTO \"Supervisors\" (ID,FullName) VALUES (1,'Dr. Jane Smith'),(2,'Dr. John Doe'),(3,'Dr. Alice Johnson'),(4,'Dr. Bob Brown'),(5,'Dr. Charlie Davis');\nINSERT INTO \"Thesis_Proposals\" (ID,Title,Abstract,Date,Academic_Supervisor) VALUES (1,'Educational Technology Trends','An analysis of current trends in educational technology...','2021-02-01','Dr. Jane Smith'),(2,'Learning Styles and Effective Teaching Methods','Examining various learning styles and their impact on teaching methods...','2021-02-02','Dr. Alice Johnson');\n",
      "question": "List all dissertations and also list thesis proposals supervised by Dr. Jane Smith. Show them in one table.",
      "gold_queries": [
        "SELECT Dissertations.title\r\nFROM Dissertations\r\nUNION\r\nSELECT Thesis_Proposals.title\r\nFROM Thesis_Proposals\r\nWHERE Thesis_Proposals.Academic_Supervisor = \"Dr. Jane Smith\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Generate a single table containing two distinct sections: a list of all dissertations and a list of all thesis proposals supervised by Dr. Jane Smith.",
          "sql_queries": [
            "SELECT 'Dissertation' AS Type, Title, Abstract, Date, Academic_Supervisor\nFROM Dissertations\nWHERE Academic_Supervisor = 'Dr. Jane Smith'\nUNION ALL\nSELECT 'Thesis Proposal' AS Type, Title, Abstract, Date, Academic_Supervisor\nFROM Thesis_Proposals\nWHERE Academic_Supervisor = 'Dr. Jane Smith'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all dissertations and all thesis proposals supervised by Dr. Jane Smith, presenting the combined data in one table.",
          "sql_queries": [
            "SELECT Title, Abstract, Date, Academic_Supervisor FROM Dissertations WHERE Academic_Supervisor = 'Dr. Jane Smith'\nUNION\nSELECT Title, Abstract, Date, Academic_Supervisor FROM Thesis_Proposals WHERE Academic_Supervisor = 'Dr. Jane Smith'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Produce a merged table encompassing all dissertations and the subset of thesis proposals supervised by Dr. Jane Smith.",
          "sql_queries": [
            "SELECT Title, Abstract, Date, Academic_Supervisor FROM Dissertations UNION SELECT Title, Abstract, Date, Academic_Supervisor FROM Thesis_Proposals WHERE Academic_Supervisor = 'Dr. Jane Smith'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Create a unified table displaying all dissertations and those thesis proposals where the academic supervisor is Dr. Jane Smith.",
          "sql_queries": [
            "SELECT Title, Abstract, Date, 'Dissertation' AS Type FROM Dissertations WHERE Academic_Supervisor = 'Dr. Jane Smith'\nUNION\nSELECT Title, Abstract, Date, 'Thesis Proposal' AS Type FROM Thesis_Proposals WHERE Academic_Supervisor = 'Dr. Jane Smith'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Combine the data from the dissertations and thesis proposals tables, filtering for those supervised by Dr. Jane Smith, into a single output table.",
          "sql_queries": [
            "SELECT Title, Abstract, Date, Academic_Supervisor FROM Dissertations WHERE Academic_Supervisor = 'Dr. Jane Smith' UNION SELECT Title, Abstract, Date, Academic_Supervisor FROM Thesis_Proposals WHERE Academic_Supervisor = 'Dr. Jane Smith'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Education/attachment_2tab_val_academic_writing/attachment_2tab_val_academic_writing.sqlite",
      "db_dump": "CREATE TABLE Course(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Code TEXT,\n    Description TEXT,\n    Credit HONORS);\nCREATE TABLE Degree(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    DegreeType TEXT,\n    GraduationDate DATE,\n    Grade TEXT);\nCREATE TABLE Dissertations(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Abstract TEXT,\n    Date DATE,\n    Academic_Supervisor TEXT);\nCREATE TABLE Student_Course(\n    Marks INT ,\n    PRIMARY KEY(StudentID, CourseID));\nCREATE TABLE Student_Supervision(\n    PRIMARY KEY(StudentID, SupervisorID, DissertationID, ThesisProposalID));\nCREATE TABLE Students(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Email TEXT,\n    PhoneNumber VARCHAR(15),\n    EnrolmentDate DATE);\nCREATE TABLE Supervisors(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FullName TEXT);\nCREATE TABLE Thesis_Proposals(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Abstract TEXT,\n    Date DATE,\n    Academic_Supervisor TEXT);\n\nINSERT INTO \"Course\" (ID,Code,Description,Credit) VALUES (1,'CS101','Introduction to Computer Science',4),(2,'ENG101','English Language Skills',3),(3,'MAT201','Calculus I',4),(4,'SOC301','Sociology of Education',3),(5,'PHY101','General Physics',4);\nINSERT INTO \"Degree\" (ID,StudentID,DegreeType,GraduationDate,Grade) VALUES (1,1,'PhD','2021-12-01','A'),(2,2,'MSc','2022-12-01','A+'),(3,3,'MA','2023-12-01','A'),(4,4,'BA','2024-12-01','A+'),(5,5,'BSc','2025-12-01','A');\nINSERT INTO \"Dissertations\" (ID,Title,Abstract,Date,Academic_Supervisor) VALUES (1,'Understanding Quantum Mechanics','Exploring the principles of quantum mechanics...','2021-01-01','Dr. Jane Smith'),(2,'Advances in Artificial Intelligence','Investigating the latest developments in AI technology...','2021-01-02','Dr. John Doe');\nINSERT INTO \"Student_Course\" (StudentID,CourseID,Marks) VALUES (1,1,85),(1,2,90),(1,3,88),(2,4,92),(2,5,80);\nINSERT INTO \"Students\" (ID,Name,Email,PhoneNumber,EnrolmentDate) VALUES (1,'John Doe','john@example.com','1234567890','2021-01-01'),(2,'Jane Smith','jane@example.com','9876543210','2021-02-01'),(3,'Alice Johnson','alice@example.com','0987654321','2021-03-01'),(4,'Bob Brown','bob@example.com','1234567890','2021-04-01'),(5,'Charlie Davis','charlie@example.com','0987654321','2021-05-01');\nINSERT INTO \"Supervisors\" (ID,FullName) VALUES (1,'Dr. Jane Smith'),(2,'Dr. John Doe'),(3,'Dr. Alice Johnson'),(4,'Dr. Bob Brown'),(5,'Dr. Charlie Davis');\nINSERT INTO \"Thesis_Proposals\" (ID,Title,Abstract,Date,Academic_Supervisor) VALUES (1,'Educational Technology Trends','An analysis of current trends in educational technology...','2021-02-01','Dr. Jane Smith'),(2,'Learning Styles and Effective Teaching Methods','Examining various learning styles and their impact on teaching methods...','2021-02-02','Dr. Alice Johnson');\n",
      "question": "Give me dissertations and thesis proposals supervised by Dr. Jane Smith. Show them in one table.",
      "gold_queries": [
        "SELECT Dissertations.title\r\nFROM Dissertations\r\nWHERE Dissertations.Academic_Supervisor = \"Dr. Jane Smith\"\r\nUNION\r\nSELECT Thesis_Proposals.title\r\nFROM Thesis_Proposals\r\nWHERE Thesis_Proposals.Academic_Supervisor = \"Dr. Jane Smith\"",
        "SELECT Dissertations.title\r\nFROM Dissertations\r\nUNION\r\nSELECT Thesis_Proposals.title\r\nFROM Thesis_Proposals\r\nWHERE Thesis_Proposals.Academic_Supervisor = \"Dr. Jane Smith\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "All dissertations and thesis proposals where the Academic_Supervisor is 'Dr. Jane Smith', in a single table.",
          "sql_queries": [
            "SELECT Title, Abstract, Date, Academic_Supervisor FROM Dissertations WHERE Academic_Supervisor = 'Dr. Jane Smith' UNION SELECT Title, Abstract, Date, Academic_Supervisor FROM Thesis_Proposals WHERE Academic_Supervisor = 'Dr. Jane Smith'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "A single table with three or more columns, identifying the type of document ('Dissertation' or 'Thesis_Proposal'), the relevant title, abstract, date, and academic supervisor.",
          "sql_queries": [
            "SELECT 'Dissertation' AS DocumentType, Title, Abstract, Date, Academic_Supervisor FROM Dissertations\nUNION ALL\nSELECT 'Thesis_Proposal' AS DocumentType, Title, Abstract, Date, Academic_Supervisor FROM Thesis_Proposals"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "A table showing two columns, one for dissertations and one for thesis proposals, both filtered to show only those supervised by 'Dr. Jane Smith'.",
          "sql_queries": [
            "SELECT D.Title AS Dissertations, T.Title AS ThesisProposals\nFROM Dissertations D\nLEFT JOIN Thesis_Proposals T ON D.Academic_Supervisor = T.Academic_Supervisor\nWHERE D.Academic_Supervisor = 'Dr. Jane Smith'"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "A table combining all data from the Dissertations and Thesis_Proposals tables, filtered to include only those where Academic_Supervisor is 'Dr. Jane Smith'.",
          "sql_queries": [
            "SELECT * FROM Dissertations WHERE Academic_Supervisor = 'Dr. Jane Smith' UNION SELECT * FROM Thesis_Proposals WHERE Academic_Supervisor = 'Dr. Jane Smith'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.25,
        "f1_score": 0.3333333333333333,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Education/attachment_1tab_val_written_works/attachment_1tab_val_written_works.sqlite",
      "db_dump": "CREATE TABLE Authors(\n    AuthorID INTEGER PRIMARY KEY,\n    Name TEXT,\n    DateOfBirth DATE,\n    Country TEXT\n);\nCREATE TABLE CourseTeachings(\n    CourseTeachingID INTEGER PRIMARY KEY,\n    CourseSubjectID INTEGER,\n    TeacherID INTEGER,\n    Semester CHAR(20),\n    Year INTEGER,\n    StartDate DATE,\n    EndDate DATE,\n    FOREIGN KEY(CourseSubjectID) REFERENCES Subjects(SubjectID),\n    FOREIGN KEY(TeacherID) REFERENCES Students(StudentID)\n);\nCREATE TABLE Schools(\n    SchoolID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Address TEXT,\n    City TEXT,\n    State TEXT,\n    ZipCode CHAR(5),\n    FoundedYear INTEGER\n);\nCREATE TABLE Students(\n    StudentID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Birthdate DATE,\n    EnrollmentDate DATE,\n    SchoolID INTEGER,\n    FOREIGN KEY(SchoolID) REFERENCES Schools(SchoolID)\n);\nCREATE TABLE Subjects(\n    SubjectID INTEGER PRIMARY KEY,\n    SubjectName TEXT,\n    Description TEXT\n);\nCREATE TABLE WrittenWorks(\n    WorkID INTEGER PRIMARY KEY,\n    Title TEXT,\n    Type TEXT, -- Can be Essay, Poem or others\n    PublicationDate DATE,\n    WordCount INTEGER,\n    AuthorID INTEGER,\n    FOREIGN KEY(AuthorID) REFERENCES Authors(AuthorID)\n);\n\nINSERT INTO \"Authors\" (AuthorID,Name,DateOfBirth,Country) VALUES (1,'Emily Dickinson','1830-12-10','USA'),(2,'John Doe','1975-06-22','Canada');\nINSERT INTO \"CourseTeachings\" (CourseTeachingID,CourseSubjectID,TeacherID,Semester,Year,StartDate,EndDate) VALUES (1,1,1,'Fall',2021,'2021-08-25','2021-12-21'),(2,2,2,'Spring',2022,'2022-01-13','2022-05-13');\nINSERT INTO \"Schools\" (SchoolID,Name,Address,City,State,ZipCode,FoundedYear) VALUES (1,'Harvard University','Massachusetts Hall','Cambridge','MA','02138',1636),(2,'Yale University','Old Campus','New Haven','CT','06510',1701);\nINSERT INTO \"Students\" (StudentID,FirstName,LastName,Birthdate,EnrollmentDate,SchoolID) VALUES (1,'Alice','Smith','1990-02-15','2006-08-25',1),(2,'Charlie','Doe','1992-03-20','2008-08-25',2);\nINSERT INTO \"Subjects\" (SubjectID,SubjectName,Description) VALUES (1,'Mathematics','The study of numbers, quantity, structure, space, and change.'),(2,'Literature','The study of written works.');\nINSERT INTO \"WrittenWorks\" (WorkID,Title,Type,PublicationDate,WordCount,AuthorID) VALUES (1,'My Life','Essay','2000-01-01',1000,1),(2,'Nature','Poetry','1890-01-01',200,1),(3,'A Different Life','Essay','2010-01-01',1200,2);\n",
      "question": "Show all essays and poetry entries written by Emily Dickinson. Show them in one table.",
      "gold_queries": [
        "SELECT WrittenWorks.Title \r\nFROM WrittenWorks JOIN Authors ON WrittenWorks.AuthorID = Authors.AuthorID\r\nWHERE (WrittenWorks.Type = 'Essay' OR WrittenWorks.Type = 'Poetry') AND Authors.name = \"Emily Dickinson\"",
        "SELECT WrittenWorks.Title \r\nFROM WrittenWorks JOIN Authors ON WrittenWorks.AuthorID = Authors.AuthorID\r\nWHERE WrittenWorks.Type = 'Essay' OR WrittenWorks.Type = 'Poetry' AND Authors.name = \"Emily Dickinson\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Retrieve all entries from the WrittenWorks table where Type is 'Essay' or 'Poetry' and AuthorID is 1.",
          "sql_queries": [
            "SELECT Title, Type, PublicationDate, WordCount, AuthorID FROM WrittenWorks WHERE Type IN ('Essay', 'Poetry') AND AuthorID = 1"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Combine the data from WrittenWorks table for entries where Type is 'Essay' or 'Poetry' andAuthorID is 1 into a single table.",
          "sql_queries": [
            "SELECT Title, Type, PublicationDate, WordCount, AuthorID \nFROM WrittenWorks \nWHERE Type IN ('Essay', 'Poetry') AND AuthorID = 1"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Display all essays and poems from Emily Dickinson, regardless of their table structure, in a single formatted table.",
          "sql_queries": [
            "SELECT Title, Type, PublicationDate, WordCount\nFROM WrittenWorks\nWHERE AuthorID = (SELECT AuthorID FROM Authors WHERE Name = 'Emily Dickinson')\nAND Type IN ('Essay', 'Poetry')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Present all entries that are categorized as essays or poems, authored by Emily Dickinson, within a unified table.",
          "sql_queries": [
            "SELECT Title, Type, PublicationDate, WordCount \nFROM WrittenWorks \nJOIN Authors ON WrittenWorks.AuthorID = Authors.AuthorID \nWHERE Authors.Name = 'Emily Dickinson' AND Type IN ('Essay', 'Poetry')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Education/attachment_1tab_val_written_works/attachment_1tab_val_written_works.sqlite",
      "db_dump": "CREATE TABLE Authors(\n    AuthorID INTEGER PRIMARY KEY,\n    Name TEXT,\n    DateOfBirth DATE,\n    Country TEXT\n);\nCREATE TABLE CourseTeachings(\n    CourseTeachingID INTEGER PRIMARY KEY,\n    CourseSubjectID INTEGER,\n    TeacherID INTEGER,\n    Semester CHAR(20),\n    Year INTEGER,\n    StartDate DATE,\n    EndDate DATE,\n    FOREIGN KEY(CourseSubjectID) REFERENCES Subjects(SubjectID),\n    FOREIGN KEY(TeacherID) REFERENCES Students(StudentID)\n);\nCREATE TABLE Schools(\n    SchoolID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Address TEXT,\n    City TEXT,\n    State TEXT,\n    ZipCode CHAR(5),\n    FoundedYear INTEGER\n);\nCREATE TABLE Students(\n    StudentID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Birthdate DATE,\n    EnrollmentDate DATE,\n    SchoolID INTEGER,\n    FOREIGN KEY(SchoolID) REFERENCES Schools(SchoolID)\n);\nCREATE TABLE Subjects(\n    SubjectID INTEGER PRIMARY KEY,\n    SubjectName TEXT,\n    Description TEXT\n);\nCREATE TABLE WrittenWorks(\n    WorkID INTEGER PRIMARY KEY,\n    Title TEXT,\n    Type TEXT, -- Can be Essay, Poem or others\n    PublicationDate DATE,\n    WordCount INTEGER,\n    AuthorID INTEGER,\n    FOREIGN KEY(AuthorID) REFERENCES Authors(AuthorID)\n);\n\nINSERT INTO \"Authors\" (AuthorID,Name,DateOfBirth,Country) VALUES (1,'Emily Dickinson','1830-12-10','USA'),(2,'John Doe','1975-06-22','Canada');\nINSERT INTO \"CourseTeachings\" (CourseTeachingID,CourseSubjectID,TeacherID,Semester,Year,StartDate,EndDate) VALUES (1,1,1,'Fall',2021,'2021-08-25','2021-12-21'),(2,2,2,'Spring',2022,'2022-01-13','2022-05-13');\nINSERT INTO \"Schools\" (SchoolID,Name,Address,City,State,ZipCode,FoundedYear) VALUES (1,'Harvard University','Massachusetts Hall','Cambridge','MA','02138',1636),(2,'Yale University','Old Campus','New Haven','CT','06510',1701);\nINSERT INTO \"Students\" (StudentID,FirstName,LastName,Birthdate,EnrollmentDate,SchoolID) VALUES (1,'Alice','Smith','1990-02-15','2006-08-25',1),(2,'Charlie','Doe','1992-03-20','2008-08-25',2);\nINSERT INTO \"Subjects\" (SubjectID,SubjectName,Description) VALUES (1,'Mathematics','The study of numbers, quantity, structure, space, and change.'),(2,'Literature','The study of written works.');\nINSERT INTO \"WrittenWorks\" (WorkID,Title,Type,PublicationDate,WordCount,AuthorID) VALUES (1,'My Life','Essay','2000-01-01',1000,1),(2,'Nature','Poetry','1890-01-01',200,1),(3,'A Different Life','Essay','2010-01-01',1200,2);\n",
      "question": "Show all the essays by any author, also show just the poems by Emily Dickinson. Show them in one table.",
      "gold_queries": [
        "SELECT WrittenWorks.Title \r\nFROM WrittenWorks JOIN Authors ON WrittenWorks.AuthorID = Authors.AuthorID\r\nWHERE WrittenWorks.Type = 'Essay' OR WrittenWorks.Type = 'Poetry' AND Authors.name = \"Emily Dickinson\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Display a single table with all essays and a subquery displaying only Emily Dickinson's poems.",
          "sql_queries": [
            "SELECT * FROM WrittenWorks WHERE Type = 'Essay'\nUNION\nSELECT * FROM WrittenWorks WHERE AuthorID = (SELECT AuthorID FROM Authors WHERE Name = 'Emily Dickinson') AND Type = 'Poetry'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Show all essays from all authors and all poems by Emily Dickinson in a single table.",
          "sql_queries": [
            "SELECT WW.Title, WW.Type\nFROM WrittenWorks WW\nJOIN Authors A ON WW.AuthorID = A.AuthorID\nWHERE WW.Type = 'Essay' OR (WW.Type = 'Poetry' AND A.Name = 'Emily Dickinson')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Create a table showing a combination of all essays and Emily Dickinson's poems, potentially with separate columns to differentiate them.",
          "sql_queries": [
            "SELECT Title, Type, CASE WHEN Type = 'Essay' THEN 'Essay' ELSE 'Emily Dickinson''s Poem' END AS Category \nFROM WrittenWorks \nWHERE Type = 'Essay' OR (AuthorID = (SELECT AuthorID FROM Authors WHERE Name = 'Emily Dickinson') AND Type = 'Poetry')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Present a table containing two distinct sections: one displaying all essays by any author and another containing only poems by Emily Dickinson.",
          "sql_queries": [
            "SELECT Title, Type FROM WrittenWorks WHERE Type = 'Essay'\nUNION ALL\nSELECT Title, Type FROM WrittenWorks WHERE AuthorID = (SELECT AuthorID FROM Authors WHERE Name = 'Emily Dickinson') AND Type = 'Poetry'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Education/attachment_2tab_val_educational_methods/attachment_2tab_val_educational_methods.sqlite",
      "db_dump": "CREATE TABLE courses(\n    courseID INTEGER PRIMARY KEY AUTOINCREMENT,\n    courseName TEXT,\n    department TEXT,\n    semester CHAR(7) ,\n    year INTEGER \n);\nCREATE TABLE group_work(\n    assignmentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    courseID INTEGER,\n    dueDate DATETIME,\n    maxScore INT,\n    participants INT,\n    FOREIGN KEY(courseID) REFERENCES courses(courseID)\n);\nCREATE TABLE instructors(\n    instructorID INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    department TEXT\n);\nCREATE TABLE peer_tutoring(\n    sessionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    courseID INTEGER,\n    startDateTime DATETIME,\n    endDateTime DATETIME,\n    participants INT,\n    FOREIGN KEY(courseID) REFERENCES courses(courseID)\n);\nCREATE TABLE students(\n    studentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    major TEXT,\n    enrollmentYear INTEGER \n);\n\nINSERT INTO \"courses\" (courseID,courseName,department,semester,year) VALUES (1,'Introduction to Computer Science','CS','Fall',2022),(2,'Calculus I','Math','Spring',2023),(3,'Physics I','Physics','Fall',2022),(4,'Literature Survey','English','Winter',2023),(5,'Economic Principles','Business','Spring',2022);\nINSERT INTO \"group_work\" (assignmentID,courseID,dueDate,maxScore,participants) VALUES (1,1,'2022-10-20 23:59:00',100,10),(2,2,'2023-02-28 23:59:00',100,8),(3,3,'2022-10-27 23:59:00',100,12),(4,4,'2023-03-24 23:59:00',100,15),(5,5,'2022-04-24 23:59:00',100,7);\nINSERT INTO \"instructors\" (instructorID,firstName,lastName,email,department) VALUES (1,'Dr.','Smith','dr.smith@example.com','CS'),(2,'Professor','Johnson','prof.johnson@example.com','Math'),(3,'Dr.','Williams','dr.williams@example.com','Physics'),(4,'Ms.','Garcia','ms.garcia@example.com','English'),(5,'Mr.','Martinez','mr.martinez@example.com','Economics');\nINSERT INTO \"peer_tutoring\" (sessionID,courseID,startDateTime,endDateTime,participants) VALUES (1,1,'2022-10-10 18:00:00','2022-10-10 20:00:00',10),(2,2,'2023-02-15 16:00:00','2023-02-15 18:00:00',8),(3,3,'2022-10-12 14:00:00','2022-10-12 16:00:00',12),(4,4,'2023-03-10 19:00:00','2023-03-10 21:00:00',15),(5,5,'2022-04-20 13:00:00','2022-04-20 15:00:00',7);\nINSERT INTO \"students\" (studentID,firstName,lastName,email,major,enrollmentYear) VALUES (1,'John','Doe','john.doe@example.com','Computer Science',2020),(2,'Jane','Smith','jane.smith@example.com','Mathematics',2021),(3,'Michael','Brown','michael.brown@example.com','Physics',2020),(4,'Emma','White','emma.white@example.com','English',2022),(5,'David','Black','david.black@example.com','Economics',2021);\n",
      "question": "Show both courses with peer tutoring and courses with group work where either has 10 participants. Show them in one table.",
      "gold_queries": [
        "SELECT courses.courseName\r\nFROM peer_tutoring JOIN courses ON courses.courseID = peer_tutoring.courseID\r\nWHERE peer_tutoring.participants = 10\r\nUNION\r\nSELECT courses.courseName\r\nFROM group_work JOIN courses ON courses.courseID = group_work.courseID\r\nWHERE group_work.participants = 10"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Display two separate tables, one for courses with peer tutoring and 10 participants, the other for courses with group work and 10 participants.",
          "sql_queries": [
            "SELECT c.courseName, c.department, c.semester, c.year\nFROM courses c\nJOIN peer_tutoring pt ON c.courseID = pt.courseID\nWHERE pt.participants = 10",
            "SELECT c.courseName, c.department, c.semester, c.year\nFROM courses c\nJOIN group_work gw ON c.courseID = gw.courseID\nWHERE gw.participants = 10"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Create a single table showing courses with 10 participants in either peer tutoring or group work, without differentiating which category.",
          "sql_queries": [
            "SELECT DISTINCT c.courseName\nFROM courses c\nJOIN peer_tutoring pt ON c.courseID = pt.courseID AND pt.participants = 10\nUNION\nSELECT DISTINCT c.courseName\nFROM courses c\nJOIN group_work gw ON c.courseID = gw.courseID AND gw.participants = 10"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Provide a combined list of courses with 10 participants, separated by whether they appear in peer tutoring or group work.",
          "sql_queries": [
            "SELECT 'Peer Tutoring' AS type, courseID FROM peer_tutoring WHERE participants = 10\nUNION ALL\nSELECT 'Group Work' AS type, courseID FROM group_work WHERE participants = 10"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all courses in both peer tutoring and group work tables with 10 participants.",
          "sql_queries": [
            "SELECT c.courseName\nFROM courses c\nJOIN peer_tutoring pt ON c.courseID = pt.courseID\nJOIN group_work gw ON c.courseID = gw.courseID\nWHERE pt.participants = 10 AND gw.participants = 10"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.4,
        "f1_score": 0.5714285714285715,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/attachment/Education/attachment_1tab_val_written_works/attachment_1tab_val_written_works.sqlite",
      "db_dump": "CREATE TABLE Authors(\n    AuthorID INTEGER PRIMARY KEY,\n    Name TEXT,\n    DateOfBirth DATE,\n    Country TEXT\n);\nCREATE TABLE CourseTeachings(\n    CourseTeachingID INTEGER PRIMARY KEY,\n    CourseSubjectID INTEGER,\n    TeacherID INTEGER,\n    Semester CHAR(20),\n    Year INTEGER,\n    StartDate DATE,\n    EndDate DATE,\n    FOREIGN KEY(CourseSubjectID) REFERENCES Subjects(SubjectID),\n    FOREIGN KEY(TeacherID) REFERENCES Students(StudentID)\n);\nCREATE TABLE Schools(\n    SchoolID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Address TEXT,\n    City TEXT,\n    State TEXT,\n    ZipCode CHAR(5),\n    FoundedYear INTEGER\n);\nCREATE TABLE Students(\n    StudentID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Birthdate DATE,\n    EnrollmentDate DATE,\n    SchoolID INTEGER,\n    FOREIGN KEY(SchoolID) REFERENCES Schools(SchoolID)\n);\nCREATE TABLE Subjects(\n    SubjectID INTEGER PRIMARY KEY,\n    SubjectName TEXT,\n    Description TEXT\n);\nCREATE TABLE WrittenWorks(\n    WorkID INTEGER PRIMARY KEY,\n    Title TEXT,\n    Type TEXT, -- Can be Essay, Poem or others\n    PublicationDate DATE,\n    WordCount INTEGER,\n    AuthorID INTEGER,\n    FOREIGN KEY(AuthorID) REFERENCES Authors(AuthorID)\n);\n\nINSERT INTO \"Authors\" (AuthorID,Name,DateOfBirth,Country) VALUES (1,'Emily Dickinson','1830-12-10','USA'),(2,'John Doe','1975-06-22','Canada');\nINSERT INTO \"CourseTeachings\" (CourseTeachingID,CourseSubjectID,TeacherID,Semester,Year,StartDate,EndDate) VALUES (1,1,1,'Fall',2021,'2021-08-25','2021-12-21'),(2,2,2,'Spring',2022,'2022-01-13','2022-05-13');\nINSERT INTO \"Schools\" (SchoolID,Name,Address,City,State,ZipCode,FoundedYear) VALUES (1,'Harvard University','Massachusetts Hall','Cambridge','MA','02138',1636),(2,'Yale University','Old Campus','New Haven','CT','06510',1701);\nINSERT INTO \"Students\" (StudentID,FirstName,LastName,Birthdate,EnrollmentDate,SchoolID) VALUES (1,'Alice','Smith','1990-02-15','2006-08-25',1),(2,'Charlie','Doe','1992-03-20','2008-08-25',2);\nINSERT INTO \"Subjects\" (SubjectID,SubjectName,Description) VALUES (1,'Mathematics','The study of numbers, quantity, structure, space, and change.'),(2,'Literature','The study of written works.');\nINSERT INTO \"WrittenWorks\" (WorkID,Title,Type,PublicationDate,WordCount,AuthorID) VALUES (1,'My Life','Essay','2000-01-01',1000,1),(2,'Nature','Poetry','1890-01-01',200,1),(3,'A Different Life','Essay','2010-01-01',1200,2);\n",
      "question": "Show all the pieces of writing by Emily Dickinson that are either essays or poetry. Show them in one table.",
      "gold_queries": [
        "SELECT WrittenWorks.Title \r\nFROM WrittenWorks JOIN Authors ON WrittenWorks.AuthorID = Authors.AuthorID\r\nWHERE (WrittenWorks.Type = 'Essay' OR WrittenWorks.Type = 'Poetry') AND Authors.name = \"Emily Dickinson\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List all written works authored by Emily Dickinson, categorized as Essays and Poetry, in a combined table.",
          "sql_queries": [
            "SELECT Title, Type FROM WrittenWorks WHERE AuthorID = (SELECT AuthorID FROM Authors WHERE Name = 'Emily Dickinson') AND Type IN ('Essay', 'Poetry')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve all entries from the WrittenWorks table where AuthorID is 1 and Type is 'Essay' or 'Poetry'.",
          "sql_queries": [
            "SELECT Title, Type, PublicationDate, WordCount FROM WrittenWorks WHERE AuthorID = 1 AND Type IN ('Essay', 'Poetry')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Display a single table containing all entries from WrittenWorks where AuthorID is 1 and Type is either 'Essay' or 'Poetry'.",
          "sql_queries": [
            "SELECT Title, Type, PublicationDate, WordCount, AuthorID FROM WrittenWorks WHERE AuthorID = 1 AND Type IN ('Essay', 'Poetry')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Present a single table summarizing all written works by Emily Dickinson, classifying them as either essays or poems.",
          "sql_queries": [
            "SELECT WW.Title, WW.Type\nFROM WrittenWorks WW\nJOIN Authors A ON WW.AuthorID = A.AuthorID\nWHERE A.Name = 'Emily Dickinson'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Education/attachment_2tab_val_educational_methods/attachment_2tab_val_educational_methods.sqlite",
      "db_dump": "CREATE TABLE courses(\n    courseID INTEGER PRIMARY KEY AUTOINCREMENT,\n    courseName TEXT,\n    department TEXT,\n    semester CHAR(7) ,\n    year INTEGER \n);\nCREATE TABLE group_work(\n    assignmentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    courseID INTEGER,\n    dueDate DATETIME,\n    maxScore INT,\n    participants INT,\n    FOREIGN KEY(courseID) REFERENCES courses(courseID)\n);\nCREATE TABLE instructors(\n    instructorID INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    department TEXT\n);\nCREATE TABLE peer_tutoring(\n    sessionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    courseID INTEGER,\n    startDateTime DATETIME,\n    endDateTime DATETIME,\n    participants INT,\n    FOREIGN KEY(courseID) REFERENCES courses(courseID)\n);\nCREATE TABLE students(\n    studentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    major TEXT,\n    enrollmentYear INTEGER \n);\n\nINSERT INTO \"courses\" (courseID,courseName,department,semester,year) VALUES (1,'Introduction to Computer Science','CS','Fall',2022),(2,'Calculus I','Math','Spring',2023),(3,'Physics I','Physics','Fall',2022),(4,'Literature Survey','English','Winter',2023),(5,'Economic Principles','Business','Spring',2022);\nINSERT INTO \"group_work\" (assignmentID,courseID,dueDate,maxScore,participants) VALUES (1,1,'2022-10-20 23:59:00',100,10),(2,2,'2023-02-28 23:59:00',100,8),(3,3,'2022-10-27 23:59:00',100,12),(4,4,'2023-03-24 23:59:00',100,15),(5,5,'2022-04-24 23:59:00',100,7);\nINSERT INTO \"instructors\" (instructorID,firstName,lastName,email,department) VALUES (1,'Dr.','Smith','dr.smith@example.com','CS'),(2,'Professor','Johnson','prof.johnson@example.com','Math'),(3,'Dr.','Williams','dr.williams@example.com','Physics'),(4,'Ms.','Garcia','ms.garcia@example.com','English'),(5,'Mr.','Martinez','mr.martinez@example.com','Economics');\nINSERT INTO \"peer_tutoring\" (sessionID,courseID,startDateTime,endDateTime,participants) VALUES (1,1,'2022-10-10 18:00:00','2022-10-10 20:00:00',10),(2,2,'2023-02-15 16:00:00','2023-02-15 18:00:00',8),(3,3,'2022-10-12 14:00:00','2022-10-12 16:00:00',12),(4,4,'2023-03-10 19:00:00','2023-03-10 21:00:00',15),(5,5,'2022-04-20 13:00:00','2022-04-20 15:00:00',7);\nINSERT INTO \"students\" (studentID,firstName,lastName,email,major,enrollmentYear) VALUES (1,'John','Doe','john.doe@example.com','Computer Science',2020),(2,'Jane','Smith','jane.smith@example.com','Mathematics',2021),(3,'Michael','Brown','michael.brown@example.com','Physics',2020),(4,'Emma','White','emma.white@example.com','English',2022),(5,'David','Black','david.black@example.com','Economics',2021);\n",
      "question": "Show all courses with peer tutoring and also show only courses with group work which have 10 participants. Show them in one table.",
      "gold_queries": [
        "SELECT courses.courseName\r\nFROM peer_tutoring JOIN courses ON courses.courseID = peer_tutoring.courseID\r\nUNION\r\nSELECT courses.courseName\r\nFROM group_work JOIN courses ON courses.courseID = group_work.courseID\r\nWHERE group_work.participants = 10"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Retrieve courses with group work assignments having exactly 10 participants.",
          "sql_queries": [
            "SELECT c.courseName\nFROM courses c\nJOIN group_work g ON c.courseID = g.courseID\nWHERE g.participants = 10"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all courses, highlighting those with peer tutoring sessions and filtering out any with group work assignments not having 10 participants.",
          "sql_queries": [
            "SELECT courseName\nFROM courses\nWHERE courseID IN (SELECT courseID FROM peer_tutoring)\nAND courseID NOT IN (SELECT courseID FROM group_work WHERE participants != 10)"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve courses with associated peer tutoring sessions.",
          "sql_queries": [
            "SELECT courses.courseName, peer_tutoring.sessionID\nFROM courses\nJOIN peer_tutoring ON courses.courseID = peer_tutoring.courseID"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Combine courses offering peer tutoring and courses with group work assignments involving 10 participants into a single dataset.",
          "sql_queries": [
            "SELECT DISTINCT c.courseName\nFROM courses c\nJOIN peer_tutoring pt ON c.courseID = pt.courseID\nUNION\nSELECT c.courseName\nFROM courses c\nJOIN group_work gw ON c.courseID = gw.courseID\nWHERE gw.participants = 10"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Entertainment/attachment_1tab_ref_film_category/attachment_1tab_ref_film_category.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT\n);\nCREATE TABLE Categories (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    categoryName TEXT UNIQUE\n);\nCREATE TABLE Directors (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    directorName TEXT\n);\nCREATE TABLE Films (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    budget REAL ,\n    categoryId INTEGER,\n    FOREIGN KEY (categoryId) REFERENCES Categories(id)\n);\nCREATE TABLE Roles (\n    filmId INTEGER,\n    actorId INTEGER,\n    roleType TEXT,\n    directorId INTEGER,\n    FOREIGN KEY (filmId) REFERENCES Films(id),\n    FOREIGN KEY (actorId) REFERENCES Actors(id),\n    FOREIGN KEY (directorId) REFERENCES Directors(id),\n    PRIMARY KEY (filmId, actorId, roleType, directorId)\n);\n\nINSERT INTO \"Actors\" (id,firstName,lastName) VALUES (1,'Leonardo','DiCaprio'),(2,'Meryl','Streep');\nINSERT INTO \"Categories\" (id,categoryName) VALUES (1,'Fantasy'),(2,'Horror');\nINSERT INTO \"Directors\" (id,directorName) VALUES (1,'Peter Jackson'),(2,'Christopher Nolan');\nINSERT INTO \"Films\" (id,title,budget,categoryId) VALUES (1,'Lord of the Rings',20000000.0,1),(2,'Harry Potter',30000000.0,1),(3,'The Shining',20000000.0,2),(4,'It',18000000.0,2);\nINSERT INTO \"Roles\" (filmId,actorId,roleType,directorId) VALUES (1,1,'Leading Role',1),(2,2,'Supporting Role',2),(1,2,'Villain',1),(3,1,'Leading Role',1),(4,2,'Supporting Role',2);\n",
      "question": "Show all fantasy films, also show all horrors with a 20000000.0 budget. Show them in one table.",
      "gold_queries": [
        "SELECT Films.title \r\nFROM Categories JOIN Films ON Categories.id = Films.categoryId\r\nWHERE Categories.categoryName = \"Fantasy\" OR Categories.categoryName = \"Horror\" AND Films.budget = 20000000.0"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Show all films with a 20000000.0 budget that belong to the 'Horror' category.",
          "sql_queries": [
            "SELECT F.title\nFROM Films F\nJOIN Categories C ON F.categoryId = C.id\nWHERE F.budget = 20000000.0 AND C.categoryName = 'Horror'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Show all films belonging to the 'Fantasy' or 'Horror' categories.",
          "sql_queries": [
            "SELECT Films.title \nFROM Films \nJOIN Categories ON Films.categoryId = Categories.id \nWHERE Categories.categoryName IN ('Fantasy', 'Horror')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Show all films that belong to the 'Fantasy' category.",
          "sql_queries": [
            "SELECT title FROM Films WHERE categoryId = (SELECT id FROM Categories WHERE categoryName = 'Fantasy')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Show all films loosely classified into 'Fantasy' or 'Horror', regardless of specific criteria, and also include films with a 20000000.0 budget.",
          "sql_queries": [
            "SELECT title FROM Films WHERE categoryId IN (1, 2) OR budget = 20000000.0"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Output two separate tables, one for all 'Fantasy' films and one for 'Horror' films with a 20000000.0 budget.",
          "sql_queries": [
            "SELECT T1.title FROM Films AS T1 JOIN Categories AS T2 ON T1.categoryId = T2.id WHERE T2.categoryName = 'Horror' AND T1.budget = 20000000.0",
            "SELECT T1.title FROM Films AS T1 JOIN Categories AS T2 ON T1.categoryId = T2.id WHERE T2.categoryName = 'Fantasy' AND T1.budget = 20000000.0"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Entertainment/attachment_1tab_ref_film_category/attachment_1tab_ref_film_category.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT\n);\nCREATE TABLE Categories (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    categoryName TEXT UNIQUE\n);\nCREATE TABLE Directors (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    directorName TEXT\n);\nCREATE TABLE Films (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    budget REAL ,\n    categoryId INTEGER,\n    FOREIGN KEY (categoryId) REFERENCES Categories(id)\n);\nCREATE TABLE Roles (\n    filmId INTEGER,\n    actorId INTEGER,\n    roleType TEXT,\n    directorId INTEGER,\n    FOREIGN KEY (filmId) REFERENCES Films(id),\n    FOREIGN KEY (actorId) REFERENCES Actors(id),\n    FOREIGN KEY (directorId) REFERENCES Directors(id),\n    PRIMARY KEY (filmId, actorId, roleType, directorId)\n);\n\nINSERT INTO \"Actors\" (id,firstName,lastName) VALUES (1,'Leonardo','DiCaprio'),(2,'Meryl','Streep');\nINSERT INTO \"Categories\" (id,categoryName) VALUES (1,'Fantasy'),(2,'Horror');\nINSERT INTO \"Directors\" (id,directorName) VALUES (1,'Peter Jackson'),(2,'Christopher Nolan');\nINSERT INTO \"Films\" (id,title,budget,categoryId) VALUES (1,'Lord of the Rings',20000000.0,1),(2,'Harry Potter',30000000.0,1),(3,'The Shining',20000000.0,2),(4,'It',18000000.0,2);\nINSERT INTO \"Roles\" (filmId,actorId,roleType,directorId) VALUES (1,1,'Leading Role',1),(2,2,'Supporting Role',2),(1,2,'Villain',1),(3,1,'Leading Role',1),(4,2,'Supporting Role',2);\n",
      "question": "Provide all fantasy with a budget of 20000000.0 and horrors with the same budget. Show them in one table.",
      "gold_queries": [
        "SELECT Films.title \r\nFROM Categories JOIN Films ON Categories.id = Films.categoryId\r\nWHERE (Categories.categoryName = \"Fantasy\" OR Categories.categoryName = \"Horror\") AND Films.budget = 20000000.0"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Produce a table containing films with a budget of 20000000.0 from the 'Fantasy' and 'Horror' categories, combining the data into a single result set.",
          "sql_queries": [
            "SELECT f.title \nFROM Films f \nJOIN Categories c ON f.categoryId = c.id \nWHERE f.budget = 20000000.0 AND c.categoryName IN ('Fantasy', 'Horror')"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Fetch all films with a budget of 20000000.0, where the category is 'Fantasy', and then fetch all films with a budget of 20000000.0, where the category is 'Horror', and present the results in a single table.",
          "sql_queries": [
            "SELECT Films.title, Films.budget, Categories.categoryName\nFROM Films\nJOIN Categories ON Films.categoryId = Categories.id\nWHERE Films.budget = 20000000.0 AND Categories.categoryName = 'Fantasy'\nUNION\nSELECT Films.title, Films.budget, Categories.categoryName\nFROM Films\nJOIN Categories ON Films.categoryId = Categories.id\nWHERE Films.budget = 20000000.0 AND Categories.categoryName = 'Horror'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Entertainment/attachment_1tab_ref_film_category/attachment_1tab_ref_film_category.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT\n);\nCREATE TABLE Categories (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    categoryName TEXT UNIQUE\n);\nCREATE TABLE Directors (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    directorName TEXT\n);\nCREATE TABLE Films (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    budget REAL ,\n    categoryId INTEGER,\n    FOREIGN KEY (categoryId) REFERENCES Categories(id)\n);\nCREATE TABLE Roles (\n    filmId INTEGER,\n    actorId INTEGER,\n    roleType TEXT,\n    directorId INTEGER,\n    FOREIGN KEY (filmId) REFERENCES Films(id),\n    FOREIGN KEY (actorId) REFERENCES Actors(id),\n    FOREIGN KEY (directorId) REFERENCES Directors(id),\n    PRIMARY KEY (filmId, actorId, roleType, directorId)\n);\n\nINSERT INTO \"Actors\" (id,firstName,lastName) VALUES (1,'Leonardo','DiCaprio'),(2,'Meryl','Streep');\nINSERT INTO \"Categories\" (id,categoryName) VALUES (1,'Fantasy'),(2,'Horror');\nINSERT INTO \"Directors\" (id,directorName) VALUES (1,'Peter Jackson'),(2,'Christopher Nolan');\nINSERT INTO \"Films\" (id,title,budget,categoryId) VALUES (1,'Lord of the Rings',20000000.0,1),(2,'Harry Potter',30000000.0,1),(3,'The Shining',20000000.0,2),(4,'It',18000000.0,2);\nINSERT INTO \"Roles\" (filmId,actorId,roleType,directorId) VALUES (1,1,'Leading Role',1),(2,2,'Supporting Role',2),(1,2,'Villain',1),(3,1,'Leading Role',1),(4,2,'Supporting Role',2);\n",
      "question": "Show all fantasy films and horrors with a 20000000 budget. Show them in one table.",
      "gold_queries": [
        "SELECT Films.title \r\nFROM Categories JOIN Films ON Categories.id = Films.categoryId\r\nWHERE (Categories.categoryName = \"Fantasy\" OR Categories.categoryName = \"Horror\") AND Films.budget = 20000000.0",
        "SELECT Films.title \r\nFROM Categories JOIN Films ON Categories.id = Films.categoryId\r\nWHERE Categories.categoryName = \"Fantasy\" OR Categories.categoryName = \"Horror\" AND Films.budget = 20000000.0"
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Merge the \"Films\" table with the \"Categories\" table based on \"categoryId\", and then filter for films with a budget of 20000000.0 and where \"categoryName\" is either \"Fantasy\" or \"Horror\", displaying the combined data in a single table.",
          "sql_queries": [
            "SELECT Films.id, Films.title, Films.budget, Categories.categoryName\nFROM Films\nJOIN Categories ON Films.categoryId = Categories.id\nWHERE Films.budget = 20000000.0 AND Categories.categoryName IN ('Fantasy', 'Horror')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve all films from the \"Films\" table where \"categoryId\" is either 1 or 2 and \"budget\" is 20000000.0, presenting the results in a single table.",
          "sql_queries": [
            "SELECT title FROM Films WHERE categoryId IN (1, 2) AND budget = 20000000.0"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Create a new table containing only the columns \"title\" and \"budget\" from the \"Films\" table, filtering for films with a budget of 20000000.0 and a \"categoryId\" corresponding to either \"Fantasy\" or \"Horror\".",
          "sql_queries": [],
          "metrics": {
            "recall": 0.0,
            "precision": 0,
            "f1_score": 0,
            "num_queries": 0,
            "num_unique_queries": 0,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.5,
        "f1_score": 0.5,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Education/attachment_2tab_val_educational_methods/attachment_2tab_val_educational_methods.sqlite",
      "db_dump": "CREATE TABLE courses(\n    courseID INTEGER PRIMARY KEY AUTOINCREMENT,\n    courseName TEXT,\n    department TEXT,\n    semester CHAR(7) ,\n    year INTEGER \n);\nCREATE TABLE group_work(\n    assignmentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    courseID INTEGER,\n    dueDate DATETIME,\n    maxScore INT,\n    participants INT,\n    FOREIGN KEY(courseID) REFERENCES courses(courseID)\n);\nCREATE TABLE instructors(\n    instructorID INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    department TEXT\n);\nCREATE TABLE peer_tutoring(\n    sessionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    courseID INTEGER,\n    startDateTime DATETIME,\n    endDateTime DATETIME,\n    participants INT,\n    FOREIGN KEY(courseID) REFERENCES courses(courseID)\n);\nCREATE TABLE students(\n    studentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    major TEXT,\n    enrollmentYear INTEGER \n);\n\nINSERT INTO \"courses\" (courseID,courseName,department,semester,year) VALUES (1,'Introduction to Computer Science','CS','Fall',2022),(2,'Calculus I','Math','Spring',2023),(3,'Physics I','Physics','Fall',2022),(4,'Literature Survey','English','Winter',2023),(5,'Economic Principles','Business','Spring',2022);\nINSERT INTO \"group_work\" (assignmentID,courseID,dueDate,maxScore,participants) VALUES (1,1,'2022-10-20 23:59:00',100,10),(2,2,'2023-02-28 23:59:00',100,8),(3,3,'2022-10-27 23:59:00',100,12),(4,4,'2023-03-24 23:59:00',100,15),(5,5,'2022-04-24 23:59:00',100,7);\nINSERT INTO \"instructors\" (instructorID,firstName,lastName,email,department) VALUES (1,'Dr.','Smith','dr.smith@example.com','CS'),(2,'Professor','Johnson','prof.johnson@example.com','Math'),(3,'Dr.','Williams','dr.williams@example.com','Physics'),(4,'Ms.','Garcia','ms.garcia@example.com','English'),(5,'Mr.','Martinez','mr.martinez@example.com','Economics');\nINSERT INTO \"peer_tutoring\" (sessionID,courseID,startDateTime,endDateTime,participants) VALUES (1,1,'2022-10-10 18:00:00','2022-10-10 20:00:00',10),(2,2,'2023-02-15 16:00:00','2023-02-15 18:00:00',8),(3,3,'2022-10-12 14:00:00','2022-10-12 16:00:00',12),(4,4,'2023-03-10 19:00:00','2023-03-10 21:00:00',15),(5,5,'2022-04-20 13:00:00','2022-04-20 15:00:00',7);\nINSERT INTO \"students\" (studentID,firstName,lastName,email,major,enrollmentYear) VALUES (1,'John','Doe','john.doe@example.com','Computer Science',2020),(2,'Jane','Smith','jane.smith@example.com','Mathematics',2021),(3,'Michael','Brown','michael.brown@example.com','Physics',2020),(4,'Emma','White','emma.white@example.com','English',2022),(5,'David','Black','david.black@example.com','Economics',2021);\n",
      "question": "What courses have peer tutoring and group work with 10 participants? Show them in one table.",
      "gold_queries": [
        "SELECT courses.courseName\r\nFROM peer_tutoring JOIN courses ON courses.courseID = peer_tutoring.courseID\r\nWHERE peer_tutoring.participants = 10\r\nUNION\r\nSELECT courses.courseName\r\nFROM group_work JOIN courses ON courses.courseID = group_work.courseID\r\nWHERE group_work.participants = 10",
        "SELECT courses.courseName\r\nFROM peer_tutoring JOIN courses ON courses.courseID = peer_tutoring.courseID\r\nUNION\r\nSELECT courses.courseName\r\nFROM group_work JOIN courses ON courses.courseID = group_work.courseID\r\nWHERE group_work.participants = 10"
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Courses that have at least one peer tutoring session and one group work assignment, both having 10 participants.",
          "sql_queries": [
            "SELECT c.courseName\nFROM courses c\nJOIN peer_tutoring pt ON c.courseID = pt.courseID\nJOIN group_work gw ON c.courseID = gw.courseID\nWHERE pt.participants = 10 AND gw.participants = 10\nGROUP BY c.courseName"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Courses with peer tutoring sessions and group work assignments that both have exactly 10 participants.",
          "sql_queries": [
            "SELECT courseName\nFROM courses\nWHERE courseID IN (\n    SELECT courseID\n    FROM peer_tutoring\n    WHERE participants = 10\n)\nAND courseID IN (\n    SELECT courseID\n    FROM group_work\n    WHERE participants = 10\n)"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Courses where the number of participants in peer tutoring sessions and group work assignments is equal to 10.",
          "sql_queries": [
            "SELECT c.courseName\nFROM courses c\nJOIN group_work gw ON c.courseID = gw.courseID\nJOIN peer_tutoring pt ON c.courseID = pt.courseID\nWHERE gw.participants = 10 AND pt.participants = 10"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 1.0,
        "f1_score": 0.6666666666666666,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/attachment/Education/attachment_2tab_val_learning_spaces/attachment_2tab_val_learning_spaces.sqlite",
      "db_dump": "CREATE TABLE Art_Studio(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Capacity INTEGER,\n    Available_Resources TEXT\n);\nCREATE TABLE Assigns(\n    TeacherID INTEGER REFERENCES Teacher(ID),\n    StudentID INTEGER REFERENCES Student(ID),\n    ClassID INTEGER REFERENCES Class(ID)\n);\nCREATE TABLE Class(\n    ID INTEGER PRIMARY KEY,\n    Classroom TEXT,\n    Time INTEGER,\n    Day TEXT\n);\nCREATE TABLE Science_Lab(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Capacity INTEGER,\n    Available_Resources TEXT\n);\nCREATE TABLE Student(\n    ID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Age INTEGER\n);\nCREATE TABLE Teacher(\n    ID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Subject TEXT\n);\n\nINSERT INTO \"Art_Studio\" (ID,Name,Capacity,Available_Resources) VALUES (1,'VanGogh Studio',15,'Paints'),(2,'Dali Studio',20,'Computers'),(3,'Warhol Studio',18,'Canvas');\nINSERT INTO \"Assigns\" (TeacherID,StudentID,ClassID) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Class\" (ID,Classroom,Time,Day) VALUES (1,'Room A',9,'Monday'),(2,'Room B',10,'Tuesday'),(3,'Room C',11,'Wednesday'),(4,'Room D',12,'Thursday'),(5,'Room E',13,'Friday');\nINSERT INTO \"Science_Lab\" (ID,Name,Capacity,Available_Resources) VALUES (1,'Newton Lab',20,'Microscopes'),(2,'Einstein Lab',30,'Computers'),(3,'Hawking Lab',25,'Chemicals');\nINSERT INTO \"Student\" (ID,FirstName,LastName,Age) VALUES (1,'Tom','Jones',16),(2,'Emma','Williams',17),(3,'Lucas','Taylor',15),(4,'Olivia','Thompson',14),(5,'Noah','Jackson',13);\nINSERT INTO \"Teacher\" (ID,FirstName,LastName,Subject) VALUES (1,'John','Smith','Math'),(2,'Jane','Doe','Physics'),(3,'Alice','Brown','English'),(4,'Bob','White','Biology'),(5,'Charlie','Black','History');\n",
      "question": "Show science labs and art studios with computers. Show them in one table.",
      "gold_queries": [
        "SELECT Science_Lab.name\r\nFROM Science_Lab\r\nWHERE Science_Lab.Available_Resources = \"Computers\"\r\nUNION\r\nSELECT Art_Studio.name\r\nFROM Art_Studio\r\nWHERE Art_Studio.Available_Resources = \"Computers\"",
        "SELECT Science_Lab.name\r\nFROM Science_Lab\r\nUNION\r\nSELECT Art_Studio.name\r\nFROM Art_Studio\r\nWHERE Art_Studio.Available_Resources = \"Computers\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List all art studios and science labs containing \"Computers\" within their Available_Resources, combining the results in a single table.",
          "sql_queries": [
            "SELECT Name, Capacity, Available_Resources FROM Art_Studio WHERE Available_Resources LIKE '%Computers%' UNION SELECT Name, Capacity, Available_Resources FROM Science_Lab WHERE Available_Resources LIKE '%Computers%'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Select the columns containing the name and available resources for all labs with \"Computers\" in the Available_Resources, presenting only art studios and science labs.",
          "sql_queries": [
            "SELECT Name, Available_Resources FROM Art_Studio WHERE Available_Resources LIKE '%Computers%' UNION SELECT Name, Available_Resources FROM Science_Lab WHERE Available_Resources LIKE '%Computers%'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Create a single table displaying the IDs and names of both art studios and labs with \"Computers\" in the Available_Resources.",
          "sql_queries": [
            "SELECT ID, Name FROM Art_Studio WHERE Available_Resources = 'Computers' UNION SELECT ID, Name FROM Science_Lab WHERE Available_Resources = 'Computers'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Education/attachment_2tab_val_learning_spaces/attachment_2tab_val_learning_spaces.sqlite",
      "db_dump": "CREATE TABLE Art_Studio(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Capacity INTEGER,\n    Available_Resources TEXT\n);\nCREATE TABLE Assigns(\n    TeacherID INTEGER REFERENCES Teacher(ID),\n    StudentID INTEGER REFERENCES Student(ID),\n    ClassID INTEGER REFERENCES Class(ID)\n);\nCREATE TABLE Class(\n    ID INTEGER PRIMARY KEY,\n    Classroom TEXT,\n    Time INTEGER,\n    Day TEXT\n);\nCREATE TABLE Science_Lab(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Capacity INTEGER,\n    Available_Resources TEXT\n);\nCREATE TABLE Student(\n    ID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Age INTEGER\n);\nCREATE TABLE Teacher(\n    ID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Subject TEXT\n);\n\nINSERT INTO \"Art_Studio\" (ID,Name,Capacity,Available_Resources) VALUES (1,'VanGogh Studio',15,'Paints'),(2,'Dali Studio',20,'Computers'),(3,'Warhol Studio',18,'Canvas');\nINSERT INTO \"Assigns\" (TeacherID,StudentID,ClassID) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Class\" (ID,Classroom,Time,Day) VALUES (1,'Room A',9,'Monday'),(2,'Room B',10,'Tuesday'),(3,'Room C',11,'Wednesday'),(4,'Room D',12,'Thursday'),(5,'Room E',13,'Friday');\nINSERT INTO \"Science_Lab\" (ID,Name,Capacity,Available_Resources) VALUES (1,'Newton Lab',20,'Microscopes'),(2,'Einstein Lab',30,'Computers'),(3,'Hawking Lab',25,'Chemicals');\nINSERT INTO \"Student\" (ID,FirstName,LastName,Age) VALUES (1,'Tom','Jones',16),(2,'Emma','Williams',17),(3,'Lucas','Taylor',15),(4,'Olivia','Thompson',14),(5,'Noah','Jackson',13);\nINSERT INTO \"Teacher\" (ID,FirstName,LastName,Subject) VALUES (1,'John','Smith','Math'),(2,'Jane','Doe','Physics'),(3,'Alice','Brown','English'),(4,'Bob','White','Biology'),(5,'Charlie','Black','History');\n",
      "question": "Provide a list of all science labs and also provide a list of all art studios with computers. Show them in one table.",
      "gold_queries": [
        "SELECT Science_Lab.name\r\nFROM Science_Lab\r\nUNION\r\nSELECT Art_Studio.name\r\nFROM Art_Studio\r\nWHERE Art_Studio.Available_Resources = \"Computers\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List all science labs and art studios with computers in one column with a label distinguishing which row refers to an art studio.",
          "sql_queries": [
            "SELECT Name, 'Art Studio' AS Type FROM Art_Studio WHERE Available_Resources = 'Computers'\nUNION\nSELECT Name, 'Science Lab' AS Type FROM Science_Lab WHERE Available_Resources = 'Computers'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all science labs and art studios with computers in one column with a label distinguishing which row refers to a science lab.",
          "sql_queries": [
            "SELECT Name || ' (Science Lab)' AS Lab_Studio FROM Science_Lab WHERE Available_Resources = 'Computers'\nUNION\nSELECT Name || ' (Art Studio)' AS Lab_Studio FROM Art_Studio WHERE Available_Resources = 'Computers'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Group the science labs and art studios with computers into a single table with separate sections for each type.",
          "sql_queries": [
            "SELECT 'Science_Lab' AS Type, ID, Name, Capacity, Available_Resources \nFROM Science_Lab \nWHERE Available_Resources = 'Computers'\nUNION ALL\nSELECT 'Art_Studio' AS Type, ID, Name, Capacity, Available_Resources \nFROM Art_Studio \nWHERE Available_Resources = 'Computers'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all science labs and art studios with computers in two distinct columns.",
          "sql_queries": [
            "SELECT Name AS Science_Lab FROM Science_Lab WHERE Available_Resources = 'Computers'\nUNION ALL\nSELECT Name AS Art_Studio FROM Art_Studio WHERE Available_Resources = 'Computers'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Combine all information about science labs and art studios with computers into one table, regardless of categorization.",
          "sql_queries": [
            "SELECT * FROM Science_Lab WHERE Available_Resources = 'Computers'\nUNION\nSELECT * FROM Art_Studio WHERE Available_Resources = 'Computers'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Education/attachment_2tab_val_learning_spaces/attachment_2tab_val_learning_spaces.sqlite",
      "db_dump": "CREATE TABLE Art_Studio(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Capacity INTEGER,\n    Available_Resources TEXT\n);\nCREATE TABLE Assigns(\n    TeacherID INTEGER REFERENCES Teacher(ID),\n    StudentID INTEGER REFERENCES Student(ID),\n    ClassID INTEGER REFERENCES Class(ID)\n);\nCREATE TABLE Class(\n    ID INTEGER PRIMARY KEY,\n    Classroom TEXT,\n    Time INTEGER,\n    Day TEXT\n);\nCREATE TABLE Science_Lab(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Capacity INTEGER,\n    Available_Resources TEXT\n);\nCREATE TABLE Student(\n    ID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Age INTEGER\n);\nCREATE TABLE Teacher(\n    ID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Subject TEXT\n);\n\nINSERT INTO \"Art_Studio\" (ID,Name,Capacity,Available_Resources) VALUES (1,'VanGogh Studio',15,'Paints'),(2,'Dali Studio',20,'Computers'),(3,'Warhol Studio',18,'Canvas');\nINSERT INTO \"Assigns\" (TeacherID,StudentID,ClassID) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Class\" (ID,Classroom,Time,Day) VALUES (1,'Room A',9,'Monday'),(2,'Room B',10,'Tuesday'),(3,'Room C',11,'Wednesday'),(4,'Room D',12,'Thursday'),(5,'Room E',13,'Friday');\nINSERT INTO \"Science_Lab\" (ID,Name,Capacity,Available_Resources) VALUES (1,'Newton Lab',20,'Microscopes'),(2,'Einstein Lab',30,'Computers'),(3,'Hawking Lab',25,'Chemicals');\nINSERT INTO \"Student\" (ID,FirstName,LastName,Age) VALUES (1,'Tom','Jones',16),(2,'Emma','Williams',17),(3,'Lucas','Taylor',15),(4,'Olivia','Thompson',14),(5,'Noah','Jackson',13);\nINSERT INTO \"Teacher\" (ID,FirstName,LastName,Subject) VALUES (1,'John','Smith','Math'),(2,'Jane','Doe','Physics'),(3,'Alice','Brown','English'),(4,'Bob','White','Biology'),(5,'Charlie','Black','History');\n",
      "question": "Which science labs have computers and which art studios have the same available resources? Show them in one table.",
      "gold_queries": [
        "SELECT Science_Lab.name\r\nFROM Science_Lab\r\nWHERE Science_Lab.Available_Resources = \"Computers\"\r\nUNION\r\nSELECT Art_Studio.name\r\nFROM Art_Studio\r\nWHERE Art_Studio.Available_Resources = \"Computers\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Find all \"Computers\" equipped science labs and matching art studios with the same resources, and present the information in a single table.",
          "sql_queries": [
            "SELECT Name, Capacity, Available_Resources \nFROM Science_Lab \nWHERE Available_Resources = 'Computers'\nUNION\nSELECT Name, Capacity, Available_Resources \nFROM Art_Studio \nWHERE Available_Resources = 'Computers'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all science labs with the resource \"Computers\" and all art studios with the same resource.",
          "sql_queries": [
            "SELECT Name FROM Science_Lab WHERE Available_Resources = 'Computers' UNION SELECT Name FROM Art_Studio WHERE Available_Resources = 'Computers'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Display a table containing two columns: one listing science labs possessing \"Computers\" as a resource, and another listing art studios with identical available resources.",
          "sql_queries": [
            "SELECT Science_Lab.Name, Art_Studio.Name\nFROM Science_Lab\nJOIN Art_Studio ON Science_Lab.Available_Resources = Art_Studio.Available_Resources\nWHERE Science_Lab.Available_Resources = 'Computers'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Identify science labs equipped with computers, and art studios sharing the exact same available resources, presenting the results in a unified table.",
          "sql_queries": [
            "SELECT Name, Capacity, Available_Resources FROM Science_Lab WHERE Available_Resources = 'Computers' UNION SELECT Name, Capacity, Available_Resources FROM Art_Studio WHERE Available_Resources = 'Computers'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/scope/Job Postings/scope_marketing_agency_creative_position/scope_marketing_agency_creative_position.sqlite",
      "db_dump": "CREATE TABLE Creative_Position (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    position TEXT);\nCREATE TABLE Marketing_Agency (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT);\nCREATE TABLE Marketing_Agency_Creative_Positions (\n    agency_id INTEGER,\n    position_id INTEGER,\n    FOREIGN KEY(agency_id) REFERENCES Marketing_Agency(id),\n    FOREIGN KEY(position_id) REFERENCES Creative_Position(id));\n\nINSERT INTO \"Creative_Position\" (id,position) VALUES (1,'Graphic Designer'),(2,'Copywriter'),(3,'Photographer'),(4,'Web Developer'),(5,'Content Creator');\nINSERT INTO \"Marketing_Agency\" (id,name,location) VALUES (1,'Advertising Agency A','New York'),(2,'Digital Media Company B','Los Angeles'),(3,'PR Firm C','Chicago'),(4,'Media Consultancy D','Boston'),(5,'Branding Agency E','Dallas');\nINSERT INTO \"Marketing_Agency_Creative_Positions\" (agency_id,position_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\n",
      "question": "What creative position is common to all marketing agencies?",
      "gold_queries": [
        "SELECT Creative_Position.position  from Marketing_Agency_Creative_Positions join Creative_Position on Marketing_Agency_Creative_Positions.position_id = Creative_Position.id join Marketing_Agency on Marketing_Agency_Creative_Positions.agency_id = Marketing_Agency.id   GROUP BY Marketing_Agency_Creative_Positions.position_id HAVING COUNT(DISTINCT Marketing_Agency_Creative_Positions.agency_id) = (SELECT COUNT(*) FROM  Marketing_Agency)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What is the most frequent creative position across all marketing agencies?",
          "sql_queries": [
            "SELECT position FROM Creative_Position WHERE id = (SELECT position_id FROM Marketing_Agency_Creative_Positions GROUP BY position_id ORDER BY COUNT(*) DESC LIMIT 1)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Which creative position is listed in every row of the Marketing_Agency_Creative_Positions table?",
          "sql_queries": [
            "SELECT T1.position \nFROM Creative_Position AS T1 \nJOIN Marketing_Agency_Creative_Positions AS T2 \nON T1.id = T2.position_id \nGROUP BY T1.position \nHAVING COUNT(DISTINCT T2.agency_id) = (SELECT COUNT(*) FROM Marketing_Agency)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "What creative position is held by at least one employee in every marketing agency?",
          "sql_queries": [
            "SELECT position FROM Creative_Position WHERE id IN (SELECT position_id FROM Marketing_Agency_Creative_Positions GROUP BY position_id HAVING COUNT(DISTINCT agency_id) = (SELECT COUNT(*) FROM Marketing_Agency))"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Identify the creative position that has the most agency associations.",
          "sql_queries": [
            "SELECT CP.position\nFROM Creative_Position CP\nJOIN Marketing_Agency_Creative_Positions MACP ON CP.id = MACP.position_id\nGROUP BY CP.position\nORDER BY COUNT(MACP.agency_id) DESC\nLIMIT 1"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Which creative position is employed by the largest number of marketing agencies?",
          "sql_queries": [
            "SELECT position FROM Creative_Position WHERE id = (SELECT position_id FROM Marketing_Agency_Creative_Positions GROUP BY position_id ORDER BY COUNT(*) DESC LIMIT 1)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 5,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 5
    },
    {
      "db_file": "data/scope/Job Postings/scope_marketing_agency_creative_position/scope_marketing_agency_creative_position.sqlite",
      "db_dump": "CREATE TABLE Creative_Position (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    position TEXT);\nCREATE TABLE Marketing_Agency (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT);\nCREATE TABLE Marketing_Agency_Creative_Positions (\n    agency_id INTEGER,\n    position_id INTEGER,\n    FOREIGN KEY(agency_id) REFERENCES Marketing_Agency(id),\n    FOREIGN KEY(position_id) REFERENCES Creative_Position(id));\n\nINSERT INTO \"Creative_Position\" (id,position) VALUES (1,'Graphic Designer'),(2,'Copywriter'),(3,'Photographer'),(4,'Web Developer'),(5,'Content Creator');\nINSERT INTO \"Marketing_Agency\" (id,name,location) VALUES (1,'Advertising Agency A','New York'),(2,'Digital Media Company B','Los Angeles'),(3,'PR Firm C','Chicago'),(4,'Media Consultancy D','Boston'),(5,'Branding Agency E','Dallas');\nINSERT INTO \"Marketing_Agency_Creative_Positions\" (agency_id,position_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\n",
      "question": "Give me the creative position for each marketing agency.",
      "gold_queries": [
        "SELECT Creative_Position.position  from Marketing_Agency_Creative_Positions join Creative_Position on Marketing_Agency_Creative_Positions.position_id = Creative_Position.id join Marketing_Agency on Marketing_Agency_Creative_Positions.agency_id = Marketing_Agency.id   GROUP BY Marketing_Agency_Creative_Positions.position_id HAVING COUNT(DISTINCT Marketing_Agency_Creative_Positions.agency_id) = (SELECT COUNT(*) FROM  Marketing_Agency)",
        "select marketing_agency.name , creative_position.position from Marketing_Agency_Creative_Positions join Creative_Position on Marketing_Agency_Creative_Positions.position_id = Creative_Position.id join Marketing_Agency on Marketing_Agency_Creative_Positions.agency_id = Marketing_Agency.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Select the position_id from Marketing_Agency_Creative_Positions for each distinct agency_id.",
          "sql_queries": [
            "SELECT DISTINCT agency_id, position_id FROM Marketing_Agency_Creative_Positions"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Which Creative_Position's id is held by each Marketing_Agency?",
          "sql_queries": [
            "SELECT agency_id, position_id FROM Marketing_Agency_Creative_Positions"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Return a list of marketing agency names and the corresponding position held by each agency.",
          "sql_queries": [
            "SELECT T2.name, T3.position FROM Marketing_Agency_Creative_Positions AS T1 JOIN Marketing_Agency AS T2 ON T1.agency_id = T2.id JOIN Creative_Position AS T3 ON T1.position_id = T3.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all unique position names from Creative_Position that are associated with each marketing agency.",
          "sql_queries": [
            "SELECT ag.name, cp.position\nFROM Marketing_Agency_Creative_Positions macp\nJOIN Creative_Position cp ON macp.position_id = cp.id\nJOIN Marketing_Agency ag ON macp.agency_id = ag.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.5,
        "f1_score": 0.5,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/scope/Job Postings/scope_marketing_agency_creative_position/scope_marketing_agency_creative_position.sqlite",
      "db_dump": "CREATE TABLE Creative_Position (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    position TEXT);\nCREATE TABLE Marketing_Agency (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT);\nCREATE TABLE Marketing_Agency_Creative_Positions (\n    agency_id INTEGER,\n    position_id INTEGER,\n    FOREIGN KEY(agency_id) REFERENCES Marketing_Agency(id),\n    FOREIGN KEY(position_id) REFERENCES Creative_Position(id));\n\nINSERT INTO \"Creative_Position\" (id,position) VALUES (1,'Graphic Designer'),(2,'Copywriter'),(3,'Photographer'),(4,'Web Developer'),(5,'Content Creator');\nINSERT INTO \"Marketing_Agency\" (id,name,location) VALUES (1,'Advertising Agency A','New York'),(2,'Digital Media Company B','Los Angeles'),(3,'PR Firm C','Chicago'),(4,'Media Consultancy D','Boston'),(5,'Branding Agency E','Dallas');\nINSERT INTO \"Marketing_Agency_Creative_Positions\" (agency_id,position_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\n",
      "question": "For each marketing agency, give me the creative position it offers.",
      "gold_queries": [
        "select marketing_agency.name , creative_position.position from Marketing_Agency_Creative_Positions join Creative_Position on Marketing_Agency_Creative_Positions.position_id = Creative_Position.id join Marketing_Agency on Marketing_Agency_Creative_Positions.agency_id = Marketing_Agency.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Identify the Creative Positions available at each Marketing Agency, ordered by agency name.",
          "sql_queries": [
            "SELECT ma.name AS Agency_Name, cp.position AS Creative_Position\nFROM Marketing_Agency ma\nJOIN Marketing_Agency_Creative_Positions macp ON ma.id = macp.agency_id\nJOIN Creative_Position cp ON macp.position_id = cp.id\nORDER BY ma.name"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "List all distinct Creative Positions offered across all Marketing Agencies.",
          "sql_queries": [
            "SELECT DISTINCT position FROM Creative_Position"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Show the relationship between Marketing Agencies and Creative Positions, potentially with a summary of the number of agencies offering each position.",
          "sql_queries": [
            "SELECT cp.position, COUNT(mac.agency_id) AS number_of_agencies\nFROM Creative_Position cp\nJOIN Marketing_Agency_Creative_Positions mac ON cp.id = mac.position_id\nGROUP BY cp.position"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve a list of all Marketing Agencies and their associated Creative Positions.",
          "sql_queries": [
            "SELECT Marketing_Agency.name, Creative_Position.position\nFROM Marketing_Agency\nJOIN Marketing_Agency_Creative_Positions ON Marketing_Agency.id = Marketing_Agency_Creative_Positions.agency_id\nJOIN Creative_Position ON Marketing_Agency_Creative_Positions.position_id = Creative_Position.id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "For each record in the Marketing_Agency table, return the corresponding Creative Position from the Creative_Position table based on the join in the Marketing_Agency_Creative_Positions table.",
          "sql_queries": [
            "SELECT Marketing_Agency.name, Creative_Position.position\nFROM Marketing_Agency\nJOIN Marketing_Agency_Creative_Positions ON Marketing_Agency.id = Marketing_Agency_Creative_Positions.agency_id\nJOIN Creative_Position ON Marketing_Agency_Creative_Positions.position_id = Creative_Position.id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 5,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/scope/Hospitality/scope_photography_workshops_techniques/scope_photography_workshops_techniques.sqlite",
      "db_dump": "CREATE TABLE Enrollments(\n    enrollment_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    participant_id INTEGER,\n    workshop_session_id INTEGER,\n    FOREIGN KEY(participant_id) REFERENCES Participants(participant_id),\n    FOREIGN KEY(workshop_session_id) REFERENCES Workshop_Sessions(session_id)\n);\nCREATE TABLE Participants(\n    participant_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    email TEXT\n);\nCREATE TABLE Photographers(\n    photographer_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    experience INTEGER\n);\nCREATE TABLE \"Photography_Workshops\"(\n    workshop_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    workshop_leader_id INTEGER,\n    FOREIGN KEY(workshop_leader_id) REFERENCES Photographers(photographer_id)\n);\nCREATE TABLE Photography_Workshops_Techniques(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    photography_workshop_id INTEGER,\n    technique_id INTEGER,\n    FOREIGN KEY(photography_workshop_id) REFERENCES Photography_Workshops(workshop_id),\n    FOREIGN KEY(technique_id) REFERENCES Techniques(technique_id)\n);\nCREATE TABLE Techniques(\n    technique_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    technique_name TEXT\n);\nCREATE TABLE Workshop_Sessions(\n    session_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    workshop_title TEXT,\n    start_time TIMESTAMP,\n    end_time TIMESTAMP\n);\n\nINSERT INTO \"Enrollments\" (enrollment_id,participant_id,workshop_session_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Participants\" (participant_id,first_name,last_name,email) VALUES (1,'Alice','Smith','alicesmith@example.com'),(2,'Bob','Johnson','bobjohnson@example.com'),(3,'Carol','Williams','carolwilliams@example.com'),(4,'Dave','Brown','davebrown@example.com'),(5,'Eve','White','evewhite@example.com');\nINSERT INTO \"Photographers\" (photographer_id,name,experience) VALUES (1,'John Doe',8),(2,'Jane Smith',6),(3,'Michael Johnson',7),(4,'Emily Davis',9),(5,'David Brown',10);\nINSERT INTO \"Photography_Workshops\" (workshop_id,workshop_leader_id) VALUES (1,1),(2,2),(3,3),(4,4),(5,5);\nINSERT INTO \"Photography_Workshops_Techniques\" (id,photography_workshop_id,technique_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5),(6,2,1),(7,3,1),(8,4,1),(9,5,1);\nINSERT INTO \"Techniques\" (technique_id,technique_name) VALUES (1,'Manual_Photography'),(2,'Landscape_Photography'),(3,'Night_Photography'),(4,'Wedding_Photography'),(5,'Street_Photography');\nINSERT INTO \"Workshop_Sessions\" (session_id,workshop_title,start_time,end_time) VALUES (1,'Introduction to Portrait Photography','2022-01-01 10:00:00','2022-01-01 16:00:00'),(2,'Mastering Landscape Photography','2022-01-02 10:00:00','2022-01-02 16:00:00'),(3,'Capturing Night Skies','2022-01-03 10:00:00','2022-01-03 16:00:00'),(4,'Perfecting Wedding Photography','2022-01-04 10:00:00','2022-01-04 16:00:00'),(5,'Urban Exploration Through Street Photography','2022-01-05 10:00:00','2022-01-05 16:00:00');\n",
      "question": "What techniques do we have for every photography workshop?",
      "gold_queries": [
        "SELECT Techniques.technique_name  from Photography_Workshops_Techniques join Techniques on Photography_Workshops_Techniques.technique_id = Techniques.technique_id join Photography_Workshops on Photography_Workshops_Techniques.photography_workshop_id = Photography_Workshops.workshop_id   GROUP BY Photography_Workshops_Techniques.technique_id HAVING COUNT(DISTINCT Photography_Workshops_Techniques.photography_workshop_id) = (SELECT COUNT(*) FROM  Photography_Workshops)",
        "select photography_workshops.workshop_id , techniques.technique_name from Photography_Workshops_Techniques join Techniques on Photography_Workshops_Techniques.technique_id = Techniques.technique_id join Photography_Workshops on Photography_Workshops_Techniques.photography_workshop_id = Photography_Workshops.workshop_id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List all unique techniques used in each photography workshop.",
          "sql_queries": [
            "SELECT Photography_Workshops.workshop_id, Techniques.technique_name\nFROM Photography_Workshops\nJOIN Photography_Workshops_Techniques ON Photography_Workshops.workshop_id = Photography_Workshops_Techniques.photography_workshop_id\nJOIN Techniques ON Photography_Workshops_Techniques.technique_id = Techniques.technique_id\nGROUP BY Photography_Workshops.workshop_id, Techniques.technique_name"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Find all technique entries in the `Photography_Workshops_Techniques` table where the `photography_workshop_id` exists.",
          "sql_queries": [
            "SELECT * FROM Photography_Workshops_Techniques WHERE photography_workshop_id IN (SELECT workshop_id FROM Photography_Workshops)"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Return a list of every technique taught in any photography workshop.",
          "sql_queries": [
            "SELECT DISTINCT technique_name FROM Techniques"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve the names of all techniques associated with every photography workshop.",
          "sql_queries": [
            "SELECT Photography_Workshops.workshop_id, Techniques.technique_name\nFROM Photography_Workshops_Techniques\nJOIN Photography_Workshops ON Photography_Workshops_Techniques.photography_workshop_id = Photography_Workshops.workshop_id\nJOIN Techniques ON Photography_Workshops_Techniques.technique_id = Techniques.technique_id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.5,
        "f1_score": 0.5,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/scope/Hospitality/scope_photography_workshops_techniques/scope_photography_workshops_techniques.sqlite",
      "db_dump": "CREATE TABLE Enrollments(\n    enrollment_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    participant_id INTEGER,\n    workshop_session_id INTEGER,\n    FOREIGN KEY(participant_id) REFERENCES Participants(participant_id),\n    FOREIGN KEY(workshop_session_id) REFERENCES Workshop_Sessions(session_id)\n);\nCREATE TABLE Participants(\n    participant_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    email TEXT\n);\nCREATE TABLE Photographers(\n    photographer_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    experience INTEGER\n);\nCREATE TABLE \"Photography_Workshops\"(\n    workshop_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    workshop_leader_id INTEGER,\n    FOREIGN KEY(workshop_leader_id) REFERENCES Photographers(photographer_id)\n);\nCREATE TABLE Photography_Workshops_Techniques(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    photography_workshop_id INTEGER,\n    technique_id INTEGER,\n    FOREIGN KEY(photography_workshop_id) REFERENCES Photography_Workshops(workshop_id),\n    FOREIGN KEY(technique_id) REFERENCES Techniques(technique_id)\n);\nCREATE TABLE Techniques(\n    technique_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    technique_name TEXT\n);\nCREATE TABLE Workshop_Sessions(\n    session_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    workshop_title TEXT,\n    start_time TIMESTAMP,\n    end_time TIMESTAMP\n);\n\nINSERT INTO \"Enrollments\" (enrollment_id,participant_id,workshop_session_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Participants\" (participant_id,first_name,last_name,email) VALUES (1,'Alice','Smith','alicesmith@example.com'),(2,'Bob','Johnson','bobjohnson@example.com'),(3,'Carol','Williams','carolwilliams@example.com'),(4,'Dave','Brown','davebrown@example.com'),(5,'Eve','White','evewhite@example.com');\nINSERT INTO \"Photographers\" (photographer_id,name,experience) VALUES (1,'John Doe',8),(2,'Jane Smith',6),(3,'Michael Johnson',7),(4,'Emily Davis',9),(5,'David Brown',10);\nINSERT INTO \"Photography_Workshops\" (workshop_id,workshop_leader_id) VALUES (1,1),(2,2),(3,3),(4,4),(5,5);\nINSERT INTO \"Photography_Workshops_Techniques\" (id,photography_workshop_id,technique_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5),(6,2,1),(7,3,1),(8,4,1),(9,5,1);\nINSERT INTO \"Techniques\" (technique_id,technique_name) VALUES (1,'Manual_Photography'),(2,'Landscape_Photography'),(3,'Night_Photography'),(4,'Wedding_Photography'),(5,'Street_Photography');\nINSERT INTO \"Workshop_Sessions\" (session_id,workshop_title,start_time,end_time) VALUES (1,'Introduction to Portrait Photography','2022-01-01 10:00:00','2022-01-01 16:00:00'),(2,'Mastering Landscape Photography','2022-01-02 10:00:00','2022-01-02 16:00:00'),(3,'Capturing Night Skies','2022-01-03 10:00:00','2022-01-03 16:00:00'),(4,'Perfecting Wedding Photography','2022-01-04 10:00:00','2022-01-04 16:00:00'),(5,'Urban Exploration Through Street Photography','2022-01-05 10:00:00','2022-01-05 16:00:00');\n",
      "question": "For every photography workshop, what are the corresponding techniques?",
      "gold_queries": [
        "select photography_workshops.workshop_id , techniques.technique_name from Photography_Workshops_Techniques join Techniques on Photography_Workshops_Techniques.technique_id = Techniques.technique_id join Photography_Workshops on Photography_Workshops_Techniques.photography_workshop_id = Photography_Workshops.workshop_id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Retrieve the techniques used in each photography workshop.",
          "sql_queries": [
            "SELECT PW.workshop_id, T.technique_name \nFROM Photography_Workshops_Techniques PW_T \nJOIN Techniques T ON PW_T.technique_id = T.technique_id \nJOIN Photography_Workshops PW ON PW_T.photography_workshop_id = PW.workshop_id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "List all photography workshops and the techniques associated with them.",
          "sql_queries": [
            "SELECT T2.workshop_title, T3.technique_name\nFROM Photography_Workshops_Techniques AS T1\nJOIN Photography_Workshops AS T2 ON T1.photography_workshop_id = T2.workshop_id\nJOIN Techniques AS T3 ON T1.technique_id = T3.technique_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT T2.workshop_title, T3.technique_name\nFROM Photography_Workshops_Techniques AS T1\nJOIN Photography_Workshops AS T2 ON T1.photography_workshop_id = T2.workshop_id\nJOIN Techniques AS T3 ON T1.technique_id = T3.technique_id",
                "original_exception": "no such column: T2.workshop_title"
              }
            ],
            "all_found": false
          }
        },
        {
          "interpretation": "Generate a report showing the techniques taught in each photography workshop.",
          "sql_queries": [
            "SELECT pw.workshop_id, t.technique_name\nFROM Photography_Workshops pw\nJOIN Photography_Workshops_Techniques pwt ON pw.workshop_id = pwt.photography_workshop_id\nJOIN Techniques t ON pwt.technique_id = t.technique_id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Provide a list of techniques taught for every entry in the Photography_Workshops table.",
          "sql_queries": [
            "SELECT PW.workshop_id, T.technique_name\nFROM Photography_Workshops PW\nJOIN Photography_Workshops_Techniques PWT ON PW.workshop_id = PWT.photography_workshop_id\nJOIN Techniques T ON PWT.technique_id = T.technique_id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Display a mapping of photography workshops to their respective techniques.",
          "sql_queries": [
            "SELECT pw.workshop_id, t.technique_name\nFROM Photography_Workshops_Techniques pwt\nJOIN Photography_Workshops pw ON pwt.photography_workshop_id = pw.workshop_id\nJOIN Techniques t ON pwt.technique_id = t.technique_id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.8,
        "f1_score": 0.888888888888889,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [
          {
            "query": "SELECT T2.workshop_title, T3.technique_name\nFROM Photography_Workshops_Techniques AS T1\nJOIN Photography_Workshops AS T2 ON T1.photography_workshop_id = T2.workshop_id\nJOIN Techniques AS T3 ON T1.technique_id = T3.technique_id",
            "original_exception": "no such column: T2.workshop_title"
          }
        ],
        "all_found": true
      },
      "matched_gold_sql": 4
    },
    {
      "db_file": "data/scope/Hospitality/scope_photography_workshops_techniques/scope_photography_workshops_techniques.sqlite",
      "db_dump": "CREATE TABLE Enrollments(\n    enrollment_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    participant_id INTEGER,\n    workshop_session_id INTEGER,\n    FOREIGN KEY(participant_id) REFERENCES Participants(participant_id),\n    FOREIGN KEY(workshop_session_id) REFERENCES Workshop_Sessions(session_id)\n);\nCREATE TABLE Participants(\n    participant_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    email TEXT\n);\nCREATE TABLE Photographers(\n    photographer_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    experience INTEGER\n);\nCREATE TABLE \"Photography_Workshops\"(\n    workshop_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    workshop_leader_id INTEGER,\n    FOREIGN KEY(workshop_leader_id) REFERENCES Photographers(photographer_id)\n);\nCREATE TABLE Photography_Workshops_Techniques(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    photography_workshop_id INTEGER,\n    technique_id INTEGER,\n    FOREIGN KEY(photography_workshop_id) REFERENCES Photography_Workshops(workshop_id),\n    FOREIGN KEY(technique_id) REFERENCES Techniques(technique_id)\n);\nCREATE TABLE Techniques(\n    technique_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    technique_name TEXT\n);\nCREATE TABLE Workshop_Sessions(\n    session_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    workshop_title TEXT,\n    start_time TIMESTAMP,\n    end_time TIMESTAMP\n);\n\nINSERT INTO \"Enrollments\" (enrollment_id,participant_id,workshop_session_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Participants\" (participant_id,first_name,last_name,email) VALUES (1,'Alice','Smith','alicesmith@example.com'),(2,'Bob','Johnson','bobjohnson@example.com'),(3,'Carol','Williams','carolwilliams@example.com'),(4,'Dave','Brown','davebrown@example.com'),(5,'Eve','White','evewhite@example.com');\nINSERT INTO \"Photographers\" (photographer_id,name,experience) VALUES (1,'John Doe',8),(2,'Jane Smith',6),(3,'Michael Johnson',7),(4,'Emily Davis',9),(5,'David Brown',10);\nINSERT INTO \"Photography_Workshops\" (workshop_id,workshop_leader_id) VALUES (1,1),(2,2),(3,3),(4,4),(5,5);\nINSERT INTO \"Photography_Workshops_Techniques\" (id,photography_workshop_id,technique_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5),(6,2,1),(7,3,1),(8,4,1),(9,5,1);\nINSERT INTO \"Techniques\" (technique_id,technique_name) VALUES (1,'Manual_Photography'),(2,'Landscape_Photography'),(3,'Night_Photography'),(4,'Wedding_Photography'),(5,'Street_Photography');\nINSERT INTO \"Workshop_Sessions\" (session_id,workshop_title,start_time,end_time) VALUES (1,'Introduction to Portrait Photography','2022-01-01 10:00:00','2022-01-01 16:00:00'),(2,'Mastering Landscape Photography','2022-01-02 10:00:00','2022-01-02 16:00:00'),(3,'Capturing Night Skies','2022-01-03 10:00:00','2022-01-03 16:00:00'),(4,'Perfecting Wedding Photography','2022-01-04 10:00:00','2022-01-04 16:00:00'),(5,'Urban Exploration Through Street Photography','2022-01-05 10:00:00','2022-01-05 16:00:00');\n",
      "question": "What techniques do we have in common for every photography workshop?",
      "gold_queries": [
        "SELECT Techniques.technique_name  from Photography_Workshops_Techniques join Techniques on Photography_Workshops_Techniques.technique_id = Techniques.technique_id join Photography_Workshops on Photography_Workshops_Techniques.photography_workshop_id = Photography_Workshops.workshop_id   GROUP BY Photography_Workshops_Techniques.technique_id HAVING COUNT(DISTINCT Photography_Workshops_Techniques.photography_workshop_id) = (SELECT COUNT(*) FROM  Photography_Workshops)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Which techniques are present in all rows of Photography_Workshops_Techniques table?",
          "sql_queries": [
            "SELECT technique_id FROM Photography_Workshops_Techniques GROUP BY technique_id HAVING COUNT(*) = (SELECT COUNT(DISTINCT photography_workshop_id) FROM Photography_Workshops_Techniques)"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Identify the intersection of techniques used in each workshop listed in Photography_Workshops.",
          "sql_queries": [
            "SELECT technique_name \nFROM Techniques AS T1 \nJOIN Photography_Workshops_Techniques AS T2 ON T1.technique_id = T2.technique_id \nGROUP BY technique_name \nHAVING COUNT(DISTINCT T2.photography_workshop_id) = (SELECT COUNT(*) FROM Photography_Workshops)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Find the common photography techniques applied across all workshops.",
          "sql_queries": [
            "SELECT technique_name FROM Techniques WHERE technique_id IN (SELECT technique_id FROM Photography_Workshops_Techniques GROUP BY technique_id HAVING COUNT(DISTINCT photography_workshop_id) = (SELECT COUNT(*) FROM Photography_Workshops))"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.6666666666666666,
        "f1_score": 0.8,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/scope/Housing Market/scope_housing_finance_agencies_loan_programs/scope_housing_finance_agencies_loan_programs.sqlite",
      "db_dump": "CREATE TABLE Housing_Finance_Agencies (\n    agency_id INTEGER PRIMARY KEY,\n    name VARCHAR(255),\n    rating VARCHAR(10) \n);\nCREATE TABLE Housing_Finance_Agencies_Loan_Programs (\n    housing_finance_agency_id INTEGER,\n    loan_program_id INTEGER,\n    FOREIGN KEY (housing_finance_agency_id) REFERENCES Housing_Finance_Agencies (agency_id),\n    FOREIGN KEY (loan_program_id) REFERENCES Loan_Programs (program_id),\n    PRIMARY KEY (housing_finance_agency_id, loan_program_id)\n);\nCREATE TABLE Housing_Market (\n    id INTEGER PRIMARY KEY,\n    city VARCHAR(255),\n    median_home_price REAL\n);\nCREATE TABLE Loan_Programs (\n    program_id INTEGER PRIMARY KEY,\n    description TEXT,\n    interest_rate REAL\n);\nCREATE TABLE RealEstateAgents (\n    agent_id INTEGER PRIMARY KEY,\n    name VARCHAR(255),\n    years_experience INTEGER \n);\n\nINSERT INTO \"Housing_Finance_Agencies\" (agency_id,name,rating) VALUES (1,'Fannie Mae','AAA'),(2,'Freddie Mac','AAA'),(3,'Ginnie Mae','AA+'),(4,'Quicken Loans','A+'),(5,'Wells Fargo Home Mortgage','A+');\nINSERT INTO \"Housing_Finance_Agencies_Loan_Programs\" (housing_finance_agency_id,loan_program_id) VALUES (1,4),(2,4),(3,4),(4,4),(5,4),(5,1);\nINSERT INTO \"Housing_Market\" (id,city,median_home_price) VALUES (1,'New York',650000.0),(2,'Los Angeles',780000.0),(3,'Chicago',390000.0),(4,'Miami',550000.0),(5,'San Francisco',1200000.0);\nINSERT INTO \"Loan_Programs\" (program_id,description,interest_rate) VALUES (1,'Conventional Loan',3.5),(2,'Adjustable Rate Mortgage',3.25),(3,'Fixed-Rate Mortgage',3.75),(4,'First-Time Home Buyer Program',3.25),(5,'VA Loan',2.75);\nINSERT INTO \"RealEstateAgents\" (agent_id,name,years_experience) VALUES (1,'John Doe',10),(2,'Jane Smith',5),(3,'Michael Brown',15),(4,'Emily Johnson',7),(5,'William Davis',20);\n",
      "question": "What loan program interest rate do all housing finance agencies have in common?",
      "gold_queries": [
        "SELECT Loan_Programs.interest_rate  from Housing_Finance_Agencies_Loan_Programs join Loan_Programs on Housing_Finance_Agencies_Loan_Programs.loan_program_id = Loan_Programs.program_id join Housing_Finance_Agencies on Housing_Finance_Agencies_Loan_Programs.housing_finance_agency_id = Housing_Finance_Agencies.agency_id   GROUP BY Housing_Finance_Agencies_Loan_Programs.loan_program_id HAVING COUNT(DISTINCT Housing_Finance_Agencies_Loan_Programs.housing_finance_agency_id) = (SELECT COUNT(*) FROM  Housing_Finance_Agencies)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "The interest rate of the program present in all agencies' loan programs.",
          "sql_queries": [
            "SELECT interest_rate FROM Loan_Programs WHERE program_id IN (SELECT loan_program_id FROM Housing_Finance_Agencies_Loan_Programs GROUP BY loan_program_id HAVING COUNT(DISTINCT housing_finance_agency_id) = (SELECT COUNT(*) FROM Housing_Finance_Agencies))"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "The interest rate of the loan program shared by all agencies.",
          "sql_queries": [
            "SELECT interest_rate\nFROM Loan_Programs\nWHERE program_id = (\n    SELECT loan_program_id\n    FROM Housing_Finance_Agencies_Loan_Programs\n    GROUP BY loan_program_id\n    HAVING COUNT(DISTINCT housing_finance_agency_id) = (\n        SELECT COUNT(*)\n        FROM Housing_Finance_Agencies\n    )\n)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "The lowest interest rate offered by any housing finance agency.",
          "sql_queries": [
            "SELECT MIN(interest_rate) FROM Loan_Programs"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.6666666666666666,
        "f1_score": 0.8,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/scope/Housing Market/scope_housing_finance_agencies_loan_programs/scope_housing_finance_agencies_loan_programs.sqlite",
      "db_dump": "CREATE TABLE Housing_Finance_Agencies (\n    agency_id INTEGER PRIMARY KEY,\n    name VARCHAR(255),\n    rating VARCHAR(10) \n);\nCREATE TABLE Housing_Finance_Agencies_Loan_Programs (\n    housing_finance_agency_id INTEGER,\n    loan_program_id INTEGER,\n    FOREIGN KEY (housing_finance_agency_id) REFERENCES Housing_Finance_Agencies (agency_id),\n    FOREIGN KEY (loan_program_id) REFERENCES Loan_Programs (program_id),\n    PRIMARY KEY (housing_finance_agency_id, loan_program_id)\n);\nCREATE TABLE Housing_Market (\n    id INTEGER PRIMARY KEY,\n    city VARCHAR(255),\n    median_home_price REAL\n);\nCREATE TABLE Loan_Programs (\n    program_id INTEGER PRIMARY KEY,\n    description TEXT,\n    interest_rate REAL\n);\nCREATE TABLE RealEstateAgents (\n    agent_id INTEGER PRIMARY KEY,\n    name VARCHAR(255),\n    years_experience INTEGER \n);\n\nINSERT INTO \"Housing_Finance_Agencies\" (agency_id,name,rating) VALUES (1,'Fannie Mae','AAA'),(2,'Freddie Mac','AAA'),(3,'Ginnie Mae','AA+'),(4,'Quicken Loans','A+'),(5,'Wells Fargo Home Mortgage','A+');\nINSERT INTO \"Housing_Finance_Agencies_Loan_Programs\" (housing_finance_agency_id,loan_program_id) VALUES (1,4),(2,4),(3,4),(4,4),(5,4),(5,1);\nINSERT INTO \"Housing_Market\" (id,city,median_home_price) VALUES (1,'New York',650000.0),(2,'Los Angeles',780000.0),(3,'Chicago',390000.0),(4,'Miami',550000.0),(5,'San Francisco',1200000.0);\nINSERT INTO \"Loan_Programs\" (program_id,description,interest_rate) VALUES (1,'Conventional Loan',3.5),(2,'Adjustable Rate Mortgage',3.25),(3,'Fixed-Rate Mortgage',3.75),(4,'First-Time Home Buyer Program',3.25),(5,'VA Loan',2.75);\nINSERT INTO \"RealEstateAgents\" (agent_id,name,years_experience) VALUES (1,'John Doe',10),(2,'Jane Smith',5),(3,'Michael Brown',15),(4,'Emily Johnson',7),(5,'William Davis',20);\n",
      "question": "Give me the loan program interest rate that corresponds to each housing finance agency respectively.",
      "gold_queries": [
        "select housing_finance_agencies.name , loan_programs.interest_rate from Housing_Finance_Agencies_Loan_Programs join Loan_Programs on Housing_Finance_Agencies_Loan_Programs.loan_program_id = Loan_Programs.program_id join Housing_Finance_Agencies on Housing_Finance_Agencies_Loan_Programs.housing_finance_agency_id = Housing_Finance_Agencies.agency_id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What is the interest rate of each loan program offered by each housing finance agency?",
          "sql_queries": [
            "SELECT Housing_Finance_Agencies.name, Loan_Programs.description, Loan_Programs.interest_rate\nFROM Housing_Finance_Agencies\nJOIN Housing_Finance_Agencies_Loan_Programs ON Housing_Finance_Agencies.agency_id = Housing_Finance_Agencies_Loan_Programs.housing_finance_agency_id\nJOIN Loan_Programs ON Housing_Finance_Agencies_Loan_Programs.loan_program_id = Loan_Programs.program_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "For each housing finance agency, find the interest rate of the loan program they are associated with.",
          "sql_queries": [
            "SELECT HFA.name, LP.interest_rate\nFROM Housing_Finance_Agencies HFA\nJOIN Housing_Finance_Agencies_Loan_Programs HFALP ON HFA.agency_id = HFALP.housing_finance_agency_id\nJOIN Loan_Programs LP ON HFALP.loan_program_id = LP.program_id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Retrieve the `interest_rate` from `Loan_Programs` where `program_id` is in `Housing_Finance_Agencies_Loan_Programs` for each distinct `housing_finance_agency_id`.",
          "sql_queries": [
            "SELECT DISTINCT lp.interest_rate\nFROM Loan_Programs lp\nJOIN Housing_Finance_Agencies_Loan_Programs hflp ON lp.program_id = hflp.loan_program_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Which interest rate applies to each housing finance agency's loan program?",
          "sql_queries": [
            "SELECT hfa.name, lp.interest_rate\nFROM Housing_Finance_Agencies_Loan_Programs hflp\nJOIN Housing_Finance_Agencies hfa ON hflp.housing_finance_agency_id = hfa.agency_id\nJOIN Loan_Programs lp ON hflp.loan_program_id = lp.program_id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "List each `housing_finance_agency_id` and the corresponding `interest_rate` from `Loan_Programs`.",
          "sql_queries": [
            "SELECT housing_finance_agency_id, interest_rate \nFROM Housing_Finance_Agencies_Loan_Programs \nJOIN Loan_Programs ON Housing_Finance_Agencies_Loan_Programs.loan_program_id = Loan_Programs.program_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Identify the loan program associated with each housing finance agency and return the interest rate of that program.",
          "sql_queries": [
            "SELECTHFALP.housing_finance_agency_id, LP.interest_rate \nFROM Housing_Finance_Agencies_Loan_Programs HFALP \nJOIN Loan_Programs LP ON HFALP.loan_program_id = LP.program_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECTHFALP.housing_finance_agency_id, LP.interest_rate \nFROM Housing_Finance_Agencies_Loan_Programs HFALP \nJOIN Loan_Programs LP ON HFALP.loan_program_id = LP.program_id",
                "original_exception": "near \"SELECTHFALP\": syntax error"
              }
            ],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [
          {
            "query": "SELECTHFALP.housing_finance_agency_id, LP.interest_rate \nFROM Housing_Finance_Agencies_Loan_Programs HFALP \nJOIN Loan_Programs LP ON HFALP.loan_program_id = LP.program_id",
            "original_exception": "near \"SELECTHFALP\": syntax error"
          }
        ],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/scope/Housing Market/scope_housing_finance_agencies_loan_programs/scope_housing_finance_agencies_loan_programs.sqlite",
      "db_dump": "CREATE TABLE Housing_Finance_Agencies (\n    agency_id INTEGER PRIMARY KEY,\n    name VARCHAR(255),\n    rating VARCHAR(10) \n);\nCREATE TABLE Housing_Finance_Agencies_Loan_Programs (\n    housing_finance_agency_id INTEGER,\n    loan_program_id INTEGER,\n    FOREIGN KEY (housing_finance_agency_id) REFERENCES Housing_Finance_Agencies (agency_id),\n    FOREIGN KEY (loan_program_id) REFERENCES Loan_Programs (program_id),\n    PRIMARY KEY (housing_finance_agency_id, loan_program_id)\n);\nCREATE TABLE Housing_Market (\n    id INTEGER PRIMARY KEY,\n    city VARCHAR(255),\n    median_home_price REAL\n);\nCREATE TABLE Loan_Programs (\n    program_id INTEGER PRIMARY KEY,\n    description TEXT,\n    interest_rate REAL\n);\nCREATE TABLE RealEstateAgents (\n    agent_id INTEGER PRIMARY KEY,\n    name VARCHAR(255),\n    years_experience INTEGER \n);\n\nINSERT INTO \"Housing_Finance_Agencies\" (agency_id,name,rating) VALUES (1,'Fannie Mae','AAA'),(2,'Freddie Mac','AAA'),(3,'Ginnie Mae','AA+'),(4,'Quicken Loans','A+'),(5,'Wells Fargo Home Mortgage','A+');\nINSERT INTO \"Housing_Finance_Agencies_Loan_Programs\" (housing_finance_agency_id,loan_program_id) VALUES (1,4),(2,4),(3,4),(4,4),(5,4),(5,1);\nINSERT INTO \"Housing_Market\" (id,city,median_home_price) VALUES (1,'New York',650000.0),(2,'Los Angeles',780000.0),(3,'Chicago',390000.0),(4,'Miami',550000.0),(5,'San Francisco',1200000.0);\nINSERT INTO \"Loan_Programs\" (program_id,description,interest_rate) VALUES (1,'Conventional Loan',3.5),(2,'Adjustable Rate Mortgage',3.25),(3,'Fixed-Rate Mortgage',3.75),(4,'First-Time Home Buyer Program',3.25),(5,'VA Loan',2.75);\nINSERT INTO \"RealEstateAgents\" (agent_id,name,years_experience) VALUES (1,'John Doe',10),(2,'Jane Smith',5),(3,'Michael Brown',15),(4,'Emily Johnson',7),(5,'William Davis',20);\n",
      "question": "Show me the interest rates and descriptions of the loan programs every finance agency offers.",
      "gold_queries": [
        "SELECT Loan_Programs.description, Loan_Programs.interest_rate  from Housing_Finance_Agencies_Loan_Programs join Loan_Programs on Housing_Finance_Agencies_Loan_Programs.loan_program_id = Loan_Programs.program_id join Housing_Finance_Agencies on Housing_Finance_Agencies_Loan_Programs.housing_finance_agency_id = Housing_Finance_Agencies.agency_id   GROUP BY Housing_Finance_Agencies_Loan_Programs.loan_program_id HAVING COUNT(DISTINCT Housing_Finance_Agencies_Loan_Programs.housing_finance_agency_id) = (SELECT COUNT(*) FROM  Housing_Finance_Agencies)",
        "select housing_finance_agencies.name , loan_programs.description , loan_programs.interest_rate from Housing_Finance_Agencies_Loan_Programs join Loan_Programs on Housing_Finance_Agencies_Loan_Programs.loan_program_id = Loan_Programs.program_id join Housing_Finance_Agencies on Housing_Finance_Agencies_Loan_Programs.housing_finance_agency_id = Housing_Finance_Agencies.agency_id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Retrieve the interest rates and descriptions of all loan programs associated with each housing finance agency.",
          "sql_queries": [
            "SELECT hfa.name, lp.interest_rate, lp.description\nFROM Housing_Finance_Agencies hfa\nJOIN Housing_Finance_Agencies_Loan_Programs hfalp ON hfa.agency_id = hfalp.housing_finance_agency_id\nJOIN Loan_Programs lp ON hfalp.loan_program_id = lp.program_id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Present a table showing the interest rate and description for every unique loan program offered by all housing finance agencies.",
          "sql_queries": [
            "SELECT DISTINCT description, interest_rate FROM Loan_Programs"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List the interest rates and descriptions for each loan program, grouped by the names of the housing finance agencies that offer them.",
          "sql_queries": [
            "SELECT HFA.name, LP.interest_rate, LP.description\nFROM Housing_Finance_Agencies_Loan_Programs HFALP\nJOIN Housing_Finance_Agencies HFA ON HFALP.housing_finance_agency_id = HFA.agency_id\nJOIN Loan_Programs LP ON HFALP.loan_program_id = LP.program_id\nORDER BY HFA.name"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.6666666666666666,
        "f1_score": 0.5714285714285715,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/scope/Housing Market/scope_housing_finance_agencies_loan_programs/scope_housing_finance_agencies_loan_programs.sqlite",
      "db_dump": "CREATE TABLE Housing_Finance_Agencies (\n    agency_id INTEGER PRIMARY KEY,\n    name VARCHAR(255),\n    rating VARCHAR(10) \n);\nCREATE TABLE Housing_Finance_Agencies_Loan_Programs (\n    housing_finance_agency_id INTEGER,\n    loan_program_id INTEGER,\n    FOREIGN KEY (housing_finance_agency_id) REFERENCES Housing_Finance_Agencies (agency_id),\n    FOREIGN KEY (loan_program_id) REFERENCES Loan_Programs (program_id),\n    PRIMARY KEY (housing_finance_agency_id, loan_program_id)\n);\nCREATE TABLE Housing_Market (\n    id INTEGER PRIMARY KEY,\n    city VARCHAR(255),\n    median_home_price REAL\n);\nCREATE TABLE Loan_Programs (\n    program_id INTEGER PRIMARY KEY,\n    description TEXT,\n    interest_rate REAL\n);\nCREATE TABLE RealEstateAgents (\n    agent_id INTEGER PRIMARY KEY,\n    name VARCHAR(255),\n    years_experience INTEGER \n);\n\nINSERT INTO \"Housing_Finance_Agencies\" (agency_id,name,rating) VALUES (1,'Fannie Mae','AAA'),(2,'Freddie Mac','AAA'),(3,'Ginnie Mae','AA+'),(4,'Quicken Loans','A+'),(5,'Wells Fargo Home Mortgage','A+');\nINSERT INTO \"Housing_Finance_Agencies_Loan_Programs\" (housing_finance_agency_id,loan_program_id) VALUES (1,4),(2,4),(3,4),(4,4),(5,4),(5,1);\nINSERT INTO \"Housing_Market\" (id,city,median_home_price) VALUES (1,'New York',650000.0),(2,'Los Angeles',780000.0),(3,'Chicago',390000.0),(4,'Miami',550000.0),(5,'San Francisco',1200000.0);\nINSERT INTO \"Loan_Programs\" (program_id,description,interest_rate) VALUES (1,'Conventional Loan',3.5),(2,'Adjustable Rate Mortgage',3.25),(3,'Fixed-Rate Mortgage',3.75),(4,'First-Time Home Buyer Program',3.25),(5,'VA Loan',2.75);\nINSERT INTO \"RealEstateAgents\" (agent_id,name,years_experience) VALUES (1,'John Doe',10),(2,'Jane Smith',5),(3,'Michael Brown',15),(4,'Emily Johnson',7),(5,'William Davis',20);\n",
      "question": "Show me the descriptions of the loan programs that each finance agency offers.",
      "gold_queries": [
        "SELECT Loan_Programs.description  from Housing_Finance_Agencies_Loan_Programs join Loan_Programs on Housing_Finance_Agencies_Loan_Programs.loan_program_id = Loan_Programs.program_id join Housing_Finance_Agencies on Housing_Finance_Agencies_Loan_Programs.housing_finance_agency_id = Housing_Finance_Agencies.agency_id   GROUP BY Housing_Finance_Agencies_Loan_Programs.loan_program_id HAVING COUNT(DISTINCT Housing_Finance_Agencies_Loan_Programs.housing_finance_agency_id) = (SELECT COUNT(*) FROM  Housing_Finance_Agencies)",
        "select housing_finance_agencies.name , loan_programs.description from Housing_Finance_Agencies_Loan_Programs join Loan_Programs on Housing_Finance_Agencies_Loan_Programs.loan_program_id = Loan_Programs.program_id join Housing_Finance_Agencies on Housing_Finance_Agencies_Loan_Programs.housing_finance_agency_id = Housing_Finance_Agencies.agency_id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Present a structured output where each agency is grouped with its corresponding loan program descriptions.",
          "sql_queries": [
            "SELECT HFA.name, LP.description\nFROM Housing_Finance_Agencies HFA\nJOIN Housing_Finance_Agencies_Loan_Programs HFALP ON HFA.agency_id = HFALP.housing_finance_agency_id\nJOIN Loan_Programs LP ON HFALP.loan_program_id = LP.program_id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Generate a result set with columns for \"Agency Name\" and \"Loan Program Description\" listing all relevant combinations.",
          "sql_queries": [
            "SELECT HFA.name AS \"Agency Name\", LP.description AS \"Loan Program Description\"\nFROM Housing_Finance_Agencies HFA\nJOIN Housing_Finance_Agencies_Loan_Programs HFALP ON HFA.agency_id = HFALP.housing_finance_agency_id\nJOIN Loan_Programs LP ON HFALP.loan_program_id = LP.program_id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Display a table showing the name of each housing finance agency and a list of loan program descriptions offered by that agency.",
          "sql_queries": [
            "SELECT hfa.name, lp.description\nFROM Housing_Finance_Agencies hfa\nJOIN Housing_Finance_Agencies_Loan_Programs hflp ON hfa.agency_id = hflp.housing_finance_agency_id\nJOIN Loan_Programs lp ON hflp.loan_program_id = lp.program_id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve a list of loan program descriptions associated with each housing finance agency.",
          "sql_queries": [
            "SELECT hf.name AS agency_name, lp.description AS loan_program_description\nFROM Housing_Finance_Agencies hf\nJOIN Housing_Finance_Agencies_Loan_Programs hflp ON hf.agency_id = hflp.housing_finance_agency_id\nJOIN Loan_Programs lp ON hflp.loan_program_id = lp.program_id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Provide a report summarizing the loan programs available through each housing finance agency.",
          "sql_queries": [
            "SELECT HFA.name, LP.description\nFROM Housing_Finance_Agencies_Loan_Programs HFALP\nJOIN Housing_Finance_Agencies HFA ON HFALP.housing_finance_agency_id = HFA.agency_id\nJOIN Loan_Programs LP ON HFALP.loan_program_id = LP.program_id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 1.0,
        "f1_score": 0.6666666666666666,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 5
    },
    {
      "db_file": "data/scope/Housing Market/scope_housing_finance_agencies_loan_programs/scope_housing_finance_agencies_loan_programs.sqlite",
      "db_dump": "CREATE TABLE Housing_Finance_Agencies (\n    agency_id INTEGER PRIMARY KEY,\n    name VARCHAR(255),\n    rating VARCHAR(10) \n);\nCREATE TABLE Housing_Finance_Agencies_Loan_Programs (\n    housing_finance_agency_id INTEGER,\n    loan_program_id INTEGER,\n    FOREIGN KEY (housing_finance_agency_id) REFERENCES Housing_Finance_Agencies (agency_id),\n    FOREIGN KEY (loan_program_id) REFERENCES Loan_Programs (program_id),\n    PRIMARY KEY (housing_finance_agency_id, loan_program_id)\n);\nCREATE TABLE Housing_Market (\n    id INTEGER PRIMARY KEY,\n    city VARCHAR(255),\n    median_home_price REAL\n);\nCREATE TABLE Loan_Programs (\n    program_id INTEGER PRIMARY KEY,\n    description TEXT,\n    interest_rate REAL\n);\nCREATE TABLE RealEstateAgents (\n    agent_id INTEGER PRIMARY KEY,\n    name VARCHAR(255),\n    years_experience INTEGER \n);\n\nINSERT INTO \"Housing_Finance_Agencies\" (agency_id,name,rating) VALUES (1,'Fannie Mae','AAA'),(2,'Freddie Mac','AAA'),(3,'Ginnie Mae','AA+'),(4,'Quicken Loans','A+'),(5,'Wells Fargo Home Mortgage','A+');\nINSERT INTO \"Housing_Finance_Agencies_Loan_Programs\" (housing_finance_agency_id,loan_program_id) VALUES (1,4),(2,4),(3,4),(4,4),(5,4),(5,1);\nINSERT INTO \"Housing_Market\" (id,city,median_home_price) VALUES (1,'New York',650000.0),(2,'Los Angeles',780000.0),(3,'Chicago',390000.0),(4,'Miami',550000.0),(5,'San Francisco',1200000.0);\nINSERT INTO \"Loan_Programs\" (program_id,description,interest_rate) VALUES (1,'Conventional Loan',3.5),(2,'Adjustable Rate Mortgage',3.25),(3,'Fixed-Rate Mortgage',3.75),(4,'First-Time Home Buyer Program',3.25),(5,'VA Loan',2.75);\nINSERT INTO \"RealEstateAgents\" (agent_id,name,years_experience) VALUES (1,'John Doe',10),(2,'Jane Smith',5),(3,'Michael Brown',15),(4,'Emily Johnson',7),(5,'William Davis',20);\n",
      "question": "For every finance agency, describe the loan programs that are offered.",
      "gold_queries": [
        "select housing_finance_agencies.name , loan_programs.description from Housing_Finance_Agencies_Loan_Programs join Loan_Programs on Housing_Finance_Agencies_Loan_Programs.loan_program_id = Loan_Programs.program_id join Housing_Finance_Agencies on Housing_Finance_Agencies_Loan_Programs.housing_finance_agency_id = Housing_Finance_Agencies.agency_id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Display a table with columns for Housing_Finance_Agency name and the descriptions of their associated Loan_Programs.",
          "sql_queries": [
            "SELECT T1.name, T3.description \nFROM Housing_Finance_Agencies AS T1 \nJOIN Housing_Finance_Agencies_Loan_Programs AS T2 ON T1.agency_id = T2.housing_finance_agency_id \nJOIN Loan_Programs AS T3 ON T2.loan_program_id = T3.program_id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "List each Housing_Finance_Agency with a corresponding list of loan program IDs offered.",
          "sql_queries": [
            "SELECT A.name, B.loan_program_id \nFROM Housing_Finance_Agencies A \nJOIN Housing_Finance_Agencies_Loan_Programs B \nON A.agency_id = B.housing_finance_agency_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Provide a breakdown of all loan programs offered by each Housing_Finance_Agency, including their descriptions and interest rates.",
          "sql_queries": [
            "SELECT HFA.name, LP.description, LP.interest_rate\nFROM Housing_Finance_Agencies_Loan_Programs HFALP\nJOIN Housing_Finance_Agencies HFA ON HFALP.housing_finance_agency_id = HFA.agency_id\nJOIN Loan_Programs LP ON HFALP.loan_program_id = LP.program_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Generate a summary report showcasing the loan program offerings for every finance agency in the database.",
          "sql_queries": [
            "SELECT \n    a.name AS agency_name, \n    lp.description AS loan_program_description\nFROM \n    Housing_Finance_Agencies_Loan_Programs hfalp\nJOIN \n    Housing_Finance_Agencies a ON hfalp.housing_finance_agency_id = a.agency_id\nJOIN \n    Loan_Programs lp ON hfalp.loan_program_id = lp.program_id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Retrieve the name of each Housing_Finance_Agencies and list the descriptions of all Loan_Programs associated with them.",
          "sql_queries": [
            "SELECT HFA.name, LP.description\nFROM Housing_Finance_Agencies HFA\nJOIN Housing_Finance_Agencies_Loan_Programs HFALP ON HFA.agency_id = HFALP.housing_finance_agency_id\nJOIN Loan_Programs LP ON HFALP.loan_program_id = LP.program_id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "For each Housing_Finance_Agency, show the description of the Loan_Programs they participate in.",
          "sql_queries": [
            "SELECT HFA.name, LP.description\nFROM Housing_Finance_Agencies HFA\nJOIN Housing_Finance_Agencies_Loan_Programs HFALP ON HFA.agency_id = HFALP.housing_finance_agency_id\nJOIN Loan_Programs LP ON HFALP.loan_program_id = LP.program_id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.6,
        "f1_score": 0.7499999999999999,
        "num_queries": 6,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 4
    },
    {
      "db_file": "data/scope/Housing Market/scope_housing_finance_agencies_loan_programs/scope_housing_finance_agencies_loan_programs.sqlite",
      "db_dump": "CREATE TABLE Housing_Finance_Agencies (\n    agency_id INTEGER PRIMARY KEY,\n    name VARCHAR(255),\n    rating VARCHAR(10) \n);\nCREATE TABLE Housing_Finance_Agencies_Loan_Programs (\n    housing_finance_agency_id INTEGER,\n    loan_program_id INTEGER,\n    FOREIGN KEY (housing_finance_agency_id) REFERENCES Housing_Finance_Agencies (agency_id),\n    FOREIGN KEY (loan_program_id) REFERENCES Loan_Programs (program_id),\n    PRIMARY KEY (housing_finance_agency_id, loan_program_id)\n);\nCREATE TABLE Housing_Market (\n    id INTEGER PRIMARY KEY,\n    city VARCHAR(255),\n    median_home_price REAL\n);\nCREATE TABLE Loan_Programs (\n    program_id INTEGER PRIMARY KEY,\n    description TEXT,\n    interest_rate REAL\n);\nCREATE TABLE RealEstateAgents (\n    agent_id INTEGER PRIMARY KEY,\n    name VARCHAR(255),\n    years_experience INTEGER \n);\n\nINSERT INTO \"Housing_Finance_Agencies\" (agency_id,name,rating) VALUES (1,'Fannie Mae','AAA'),(2,'Freddie Mac','AAA'),(3,'Ginnie Mae','AA+'),(4,'Quicken Loans','A+'),(5,'Wells Fargo Home Mortgage','A+');\nINSERT INTO \"Housing_Finance_Agencies_Loan_Programs\" (housing_finance_agency_id,loan_program_id) VALUES (1,4),(2,4),(3,4),(4,4),(5,4),(5,1);\nINSERT INTO \"Housing_Market\" (id,city,median_home_price) VALUES (1,'New York',650000.0),(2,'Los Angeles',780000.0),(3,'Chicago',390000.0),(4,'Miami',550000.0),(5,'San Francisco',1200000.0);\nINSERT INTO \"Loan_Programs\" (program_id,description,interest_rate) VALUES (1,'Conventional Loan',3.5),(2,'Adjustable Rate Mortgage',3.25),(3,'Fixed-Rate Mortgage',3.75),(4,'First-Time Home Buyer Program',3.25),(5,'VA Loan',2.75);\nINSERT INTO \"RealEstateAgents\" (agent_id,name,years_experience) VALUES (1,'John Doe',10),(2,'Jane Smith',5),(3,'Michael Brown',15),(4,'Emily Johnson',7),(5,'William Davis',20);\n",
      "question": "Give me the loan program interest rate for each housing finance agency.",
      "gold_queries": [
        "SELECT Loan_Programs.interest_rate  from Housing_Finance_Agencies_Loan_Programs join Loan_Programs on Housing_Finance_Agencies_Loan_Programs.loan_program_id = Loan_Programs.program_id join Housing_Finance_Agencies on Housing_Finance_Agencies_Loan_Programs.housing_finance_agency_id = Housing_Finance_Agencies.agency_id   GROUP BY Housing_Finance_Agencies_Loan_Programs.loan_program_id HAVING COUNT(DISTINCT Housing_Finance_Agencies_Loan_Programs.housing_finance_agency_id) = (SELECT COUNT(*) FROM  Housing_Finance_Agencies)",
        "select housing_finance_agencies.name , loan_programs.interest_rate from Housing_Finance_Agencies_Loan_Programs join Loan_Programs on Housing_Finance_Agencies_Loan_Programs.loan_program_id = Loan_Programs.program_id join Housing_Finance_Agencies on Housing_Finance_Agencies_Loan_Programs.housing_finance_agency_id = Housing_Finance_Agencies.agency_id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Return a list of all loan programs and the housing finance agencies that offer them, alongside the interest rate for each loan program.",
          "sql_queries": [
            "SELECT T1.description, T2.name, T1.interest_rate \nFROM Loan_Programs AS T1 \nJOIN Housing_Finance_Agencies_Loan_Programs AS T2 \nON T1.program_id = T2.loan_program_id \nJOIN Housing_Finance_Agencies AS T3 \nON T2.housing_finance_agency_id = T3.agency_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT T1.description, T2.name, T1.interest_rate \nFROM Loan_Programs AS T1 \nJOIN Housing_Finance_Agencies_Loan_Programs AS T2 \nON T1.program_id = T2.loan_program_id \nJOIN Housing_Finance_Agencies AS T3 \nON T2.housing_finance_agency_id = T3.agency_id",
                "original_exception": "no such column: T2.name"
              }
            ],
            "all_found": false
          }
        },
        {
          "interpretation": "Return the average interest rate for each loan program, categorized by housing finance agency.",
          "sql_queries": [
            "SELECT hfa.name, lp.description, AVG(lp.interest_rate) AS average_interest_rate\nFROM Housing_Finance_Agencies hfa\nJOIN Housing_Finance_Agencies_Loan_Programs hflp ON hfa.agency_id = hflp.housing_finance_agency_id\nJOIN Loan_Programs lp ON hflp.loan_program_id = lp.program_id\nGROUP BY hfa.name, lp.description"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Return the interest rate for the most common loan program offered by each housing finance agency.",
          "sql_queries": [
            "SELECT hfa.name, lp.interest_rate\nFROM Housing_Finance_Agencies hfa\nJOIN (\n    SELECT housing_finance_agency_id, loan_program_id, COUNT(*) as cnt\n    FROM Housing_Finance_Agencies_Loan_Programs\n    GROUP BY housing_finance_agency_id, loan_program_id\n) hfa_lp ON hfa.agency_id = hfa_lp.housing_finance_agency_id\nJOIN Loan_Programs lp ON hfa_lp.loan_program_id = lp.program_id\nWHERE (hfa_lp.housing_finance_agency_id, hfa_lp.cnt) IN (\n    SELECT housing_finance_agency_id, MAX(cnt)\n    FROM (\n        SELECT housing_finance_agency_id, loan_program_id, COUNT(*) as cnt\n        FROM Housing_Finance_Agencies_Loan_Programs\n        GROUP BY housing_finance_agency_id, loan_program_id\n    ) AS inner_hfa_lp\n    GROUP BY housing_finance_agency_id\n)"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Return a list of all housing finance agencies and the interest rate of each loan program associated with them.",
          "sql_queries": [
            "SELECT HFA.name, LP.interest_rate\nFROM Housing_Finance_Agencies HFA\nJOIN Housing_Finance_Agencies_Loan_Programs HFALP ON HFA.agency_id = HFALP.housing_finance_agency_id\nJOIN Loan_Programs LP ON HFALP.loan_program_id = LP.program_id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Return a table with housing finance agencies, loan program IDs, and corresponding interest rates.",
          "sql_queries": [
            "SELECT HFA.name, HFALP.loan_program_id, LP.interest_rate\nFROM Housing_Finance_Agencies_Loan_Programs HFALP\nJOIN Housing_Finance_Agencies HFA ON HFALP.housing_finance_agency_id = HFA.agency_id\nJOIN Loan_Programs LP ON HFALP.loan_program_id = LP.program_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.4,
        "f1_score": 0.4444444444444445,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [
          {
            "query": "SELECT T1.description, T2.name, T1.interest_rate \nFROM Loan_Programs AS T1 \nJOIN Housing_Finance_Agencies_Loan_Programs AS T2 \nON T1.program_id = T2.loan_program_id \nJOIN Housing_Finance_Agencies AS T3 \nON T2.housing_finance_agency_id = T3.agency_id",
            "original_exception": "no such column: T2.name"
          }
        ],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/scope/Housing Market/scope_housing_finance_agencies_loan_programs/scope_housing_finance_agencies_loan_programs.sqlite",
      "db_dump": "CREATE TABLE Housing_Finance_Agencies (\n    agency_id INTEGER PRIMARY KEY,\n    name VARCHAR(255),\n    rating VARCHAR(10) \n);\nCREATE TABLE Housing_Finance_Agencies_Loan_Programs (\n    housing_finance_agency_id INTEGER,\n    loan_program_id INTEGER,\n    FOREIGN KEY (housing_finance_agency_id) REFERENCES Housing_Finance_Agencies (agency_id),\n    FOREIGN KEY (loan_program_id) REFERENCES Loan_Programs (program_id),\n    PRIMARY KEY (housing_finance_agency_id, loan_program_id)\n);\nCREATE TABLE Housing_Market (\n    id INTEGER PRIMARY KEY,\n    city VARCHAR(255),\n    median_home_price REAL\n);\nCREATE TABLE Loan_Programs (\n    program_id INTEGER PRIMARY KEY,\n    description TEXT,\n    interest_rate REAL\n);\nCREATE TABLE RealEstateAgents (\n    agent_id INTEGER PRIMARY KEY,\n    name VARCHAR(255),\n    years_experience INTEGER \n);\n\nINSERT INTO \"Housing_Finance_Agencies\" (agency_id,name,rating) VALUES (1,'Fannie Mae','AAA'),(2,'Freddie Mac','AAA'),(3,'Ginnie Mae','AA+'),(4,'Quicken Loans','A+'),(5,'Wells Fargo Home Mortgage','A+');\nINSERT INTO \"Housing_Finance_Agencies_Loan_Programs\" (housing_finance_agency_id,loan_program_id) VALUES (1,4),(2,4),(3,4),(4,4),(5,4),(5,1);\nINSERT INTO \"Housing_Market\" (id,city,median_home_price) VALUES (1,'New York',650000.0),(2,'Los Angeles',780000.0),(3,'Chicago',390000.0),(4,'Miami',550000.0),(5,'San Francisco',1200000.0);\nINSERT INTO \"Loan_Programs\" (program_id,description,interest_rate) VALUES (1,'Conventional Loan',3.5),(2,'Adjustable Rate Mortgage',3.25),(3,'Fixed-Rate Mortgage',3.75),(4,'First-Time Home Buyer Program',3.25),(5,'VA Loan',2.75);\nINSERT INTO \"RealEstateAgents\" (agent_id,name,years_experience) VALUES (1,'John Doe',10),(2,'Jane Smith',5),(3,'Michael Brown',15),(4,'Emily Johnson',7),(5,'William Davis',20);\n",
      "question": "What are the interest rates and descriptions of the loan programs that are common to all finance agencies?",
      "gold_queries": [
        "SELECT Loan_Programs.description, Loan_Programs.interest_rate  from Housing_Finance_Agencies_Loan_Programs join Loan_Programs on Housing_Finance_Agencies_Loan_Programs.loan_program_id = Loan_Programs.program_id join Housing_Finance_Agencies on Housing_Finance_Agencies_Loan_Programs.housing_finance_agency_id = Housing_Finance_Agencies.agency_id   GROUP BY Housing_Finance_Agencies_Loan_Programs.loan_program_id HAVING COUNT(DISTINCT Housing_Finance_Agencies_Loan_Programs.housing_finance_agency_id) = (SELECT COUNT(*) FROM  Housing_Finance_Agencies)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Identify the common loan program descriptions and interest rates across all housing finance agencies.",
          "sql_queries": [
            "SELECT LP.description, LP.interest_rate\nFROM Loan_Programs LP\nJOIN Housing_Finance_Agencies_Loan_Programs HFALP ON LP.program_id = HFALP.loan_program_id\nGROUP BY LP.description, LP.interest_rate\nHAVING COUNT(DISTINCT HFALP.housing_finance_agency_id) = (SELECT COUNT(*) FROM Housing_Finance_Agencies)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Find loan programs appearing in all entries of Housing_Finance_Agencies_Loan_Programs.",
          "sql_queries": [
            "SELECT description \nFROM Loan_Programs \nWHERE program_id IN (\n    SELECT loan_program_id \n    FROM Housing_Finance_Agencies_Loan_Programs \n    GROUP BY loan_program_id \n    HAVING COUNT(DISTINCT housing_finance_agency_id) = (\n        SELECT COUNT(*) \n        FROM Housing_Finance_Agencies\n    )\n)"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Which loan programs are listed in Loan_Programs table and referenced by all agencies in the Housing_Finance_Agencies_Loan_Programs table? What are their descriptions and interest rates?",
          "sql_queries": [
            "SELECT description, interest_rate \nFROM Loan_Programs \nWHERE program_id IN (\n    SELECT loan_program_id \n    FROM Housing_Finance_Agencies_Loan_Programs \n    GROUP BY loan_program_id \n    HAVING COUNT(DISTINCT housing_finance_agency_id) = (SELECT COUNT(*) FROM Housing_Finance_Agencies)\n)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "List loan programs with descriptions and interest rates offered by all finance agencies.",
          "sql_queries": [
            "SELECT description, interest_rate FROM Loan_Programs"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve the description and interest rate for each loan program accessed by every agency.",
          "sql_queries": [
            "SELECT LP.description, LP.interest_rate \nFROM Housing_Finance_Agencies_Loan_Programs HFALP \nJOIN Loan_Programs LP ON HFALP.loan_program_id = LP.program_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.4,
        "f1_score": 0.5714285714285715,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/scope/Housing Market/scope_housing_finance_agencies_loan_programs/scope_housing_finance_agencies_loan_programs.sqlite",
      "db_dump": "CREATE TABLE Housing_Finance_Agencies (\n    agency_id INTEGER PRIMARY KEY,\n    name VARCHAR(255),\n    rating VARCHAR(10) \n);\nCREATE TABLE Housing_Finance_Agencies_Loan_Programs (\n    housing_finance_agency_id INTEGER,\n    loan_program_id INTEGER,\n    FOREIGN KEY (housing_finance_agency_id) REFERENCES Housing_Finance_Agencies (agency_id),\n    FOREIGN KEY (loan_program_id) REFERENCES Loan_Programs (program_id),\n    PRIMARY KEY (housing_finance_agency_id, loan_program_id)\n);\nCREATE TABLE Housing_Market (\n    id INTEGER PRIMARY KEY,\n    city VARCHAR(255),\n    median_home_price REAL\n);\nCREATE TABLE Loan_Programs (\n    program_id INTEGER PRIMARY KEY,\n    description TEXT,\n    interest_rate REAL\n);\nCREATE TABLE RealEstateAgents (\n    agent_id INTEGER PRIMARY KEY,\n    name VARCHAR(255),\n    years_experience INTEGER \n);\n\nINSERT INTO \"Housing_Finance_Agencies\" (agency_id,name,rating) VALUES (1,'Fannie Mae','AAA'),(2,'Freddie Mac','AAA'),(3,'Ginnie Mae','AA+'),(4,'Quicken Loans','A+'),(5,'Wells Fargo Home Mortgage','A+');\nINSERT INTO \"Housing_Finance_Agencies_Loan_Programs\" (housing_finance_agency_id,loan_program_id) VALUES (1,4),(2,4),(3,4),(4,4),(5,4),(5,1);\nINSERT INTO \"Housing_Market\" (id,city,median_home_price) VALUES (1,'New York',650000.0),(2,'Los Angeles',780000.0),(3,'Chicago',390000.0),(4,'Miami',550000.0),(5,'San Francisco',1200000.0);\nINSERT INTO \"Loan_Programs\" (program_id,description,interest_rate) VALUES (1,'Conventional Loan',3.5),(2,'Adjustable Rate Mortgage',3.25),(3,'Fixed-Rate Mortgage',3.75),(4,'First-Time Home Buyer Program',3.25),(5,'VA Loan',2.75);\nINSERT INTO \"RealEstateAgents\" (agent_id,name,years_experience) VALUES (1,'John Doe',10),(2,'Jane Smith',5),(3,'Michael Brown',15),(4,'Emily Johnson',7),(5,'William Davis',20);\n",
      "question": "For each finance agency, list the interest rates and descriptions of the loan programs offered.",
      "gold_queries": [
        "select housing_finance_agencies.name , loan_programs.description , loan_programs.interest_rate from Housing_Finance_Agencies_Loan_Programs join Loan_Programs on Housing_Finance_Agencies_Loan_Programs.loan_program_id = Loan_Programs.program_id join Housing_Finance_Agencies on Housing_Finance_Agencies_Loan_Programs.housing_finance_agency_id = Housing_Finance_Agencies.agency_id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Retrieve the names of all finance agencies and, for each, display the descriptions and interest rates associated with their loan programs.",
          "sql_queries": [
            "SELECT hfa.name, lp.description, lp.interest_rate \nFROM Housing_Finance_Agencies hfa \nJOIN Housing_Finance_Agencies_Loan_Programs hfalp ON hfa.agency_id = hfalp.housing_finance_agency_id \nJOIN Loan_Programs lp ON hfalp.loan_program_id = lp.program_id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Generate a report that pairs each finance agency with a list of their loan programs, including the interest rate and description for each program.",
          "sql_queries": [
            "SELECT \n    HFA.name AS agency_name, \n    LP.description AS loan_program_description, \n    LP.interest_rate AS loan_program_interest_rate\nFROM \n    Housing_Finance_Agencies_Loan_Programs HFALP\nJOIN \n    Housing_Finance_Agencies HFA ON HFALP.housing_finance_agency_id = HFA.agency_id\nJOIN \n    Loan_Programs LP ON HFALP.loan_program_id = LP.program_id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "List all loan programs available and, for each, show the name of the finance agency that offers it along with the associated interest rate and description.",
          "sql_queries": [
            "SELECT L.description, L.interest_rate, H.name \nFROM Loan_Programs L \nJOIN Housing_Finance_Agencies_Loan_Programs HFALP ON L.program_id = HFALP.loan_program_id \nJOIN Housing_Finance_Agencies H ON HFALP.housing_finance_agency_id = H.agency_id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Provide a table with three columns: finance agency name, loan program description, and loan program interest rate.",
          "sql_queries": [
            "SELECT HF.name, LP.description, LP.interest_rate\nFROM Housing_Finance_Agencies_Hoan_Programs HFALP\nJOIN Housing_Finance_Agencies HF ON HFALP.housing_finance_agency_id = HF.agency_id\nJOIN Loan_Programs LP ON HFALP.loan_program_id = LP.program_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT HF.name, LP.description, LP.interest_rate\nFROM Housing_Finance_Agencies_Hoan_Programs HFALP\nJOIN Housing_Finance_Agencies HF ON HFALP.housing_finance_agency_id = HF.agency_id\nJOIN Loan_Programs LP ON HFALP.loan_program_id = LP.program_id",
                "original_exception": "no such table: Housing_Finance_Agencies_Hoan_Programs"
              }
            ],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.75,
        "f1_score": 0.8571428571428571,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [
          {
            "query": "SELECT HF.name, LP.description, LP.interest_rate\nFROM Housing_Finance_Agencies_Hoan_Programs HFALP\nJOIN Housing_Finance_Agencies HF ON HFALP.housing_finance_agency_id = HF.agency_id\nJOIN Loan_Programs LP ON HFALP.loan_program_id = LP.program_id",
            "original_exception": "no such table: Housing_Finance_Agencies_Hoan_Programs"
          }
        ],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/scope/Housing Market/scope_housing_finance_agencies_loan_programs/scope_housing_finance_agencies_loan_programs.sqlite",
      "db_dump": "CREATE TABLE Housing_Finance_Agencies (\n    agency_id INTEGER PRIMARY KEY,\n    name VARCHAR(255),\n    rating VARCHAR(10) \n);\nCREATE TABLE Housing_Finance_Agencies_Loan_Programs (\n    housing_finance_agency_id INTEGER,\n    loan_program_id INTEGER,\n    FOREIGN KEY (housing_finance_agency_id) REFERENCES Housing_Finance_Agencies (agency_id),\n    FOREIGN KEY (loan_program_id) REFERENCES Loan_Programs (program_id),\n    PRIMARY KEY (housing_finance_agency_id, loan_program_id)\n);\nCREATE TABLE Housing_Market (\n    id INTEGER PRIMARY KEY,\n    city VARCHAR(255),\n    median_home_price REAL\n);\nCREATE TABLE Loan_Programs (\n    program_id INTEGER PRIMARY KEY,\n    description TEXT,\n    interest_rate REAL\n);\nCREATE TABLE RealEstateAgents (\n    agent_id INTEGER PRIMARY KEY,\n    name VARCHAR(255),\n    years_experience INTEGER \n);\n\nINSERT INTO \"Housing_Finance_Agencies\" (agency_id,name,rating) VALUES (1,'Fannie Mae','AAA'),(2,'Freddie Mac','AAA'),(3,'Ginnie Mae','AA+'),(4,'Quicken Loans','A+'),(5,'Wells Fargo Home Mortgage','A+');\nINSERT INTO \"Housing_Finance_Agencies_Loan_Programs\" (housing_finance_agency_id,loan_program_id) VALUES (1,4),(2,4),(3,4),(4,4),(5,4),(5,1);\nINSERT INTO \"Housing_Market\" (id,city,median_home_price) VALUES (1,'New York',650000.0),(2,'Los Angeles',780000.0),(3,'Chicago',390000.0),(4,'Miami',550000.0),(5,'San Francisco',1200000.0);\nINSERT INTO \"Loan_Programs\" (program_id,description,interest_rate) VALUES (1,'Conventional Loan',3.5),(2,'Adjustable Rate Mortgage',3.25),(3,'Fixed-Rate Mortgage',3.75),(4,'First-Time Home Buyer Program',3.25),(5,'VA Loan',2.75);\nINSERT INTO \"RealEstateAgents\" (agent_id,name,years_experience) VALUES (1,'John Doe',10),(2,'Jane Smith',5),(3,'Michael Brown',15),(4,'Emily Johnson',7),(5,'William Davis',20);\n",
      "question": "What are the descriptions of the loan programs that are common to all finance agencies?",
      "gold_queries": [
        "SELECT Loan_Programs.description  from Housing_Finance_Agencies_Loan_Programs join Loan_Programs on Housing_Finance_Agencies_Loan_Programs.loan_program_id = Loan_Programs.program_id join Housing_Finance_Agencies on Housing_Finance_Agencies_Loan_Programs.housing_finance_agency_id = Housing_Finance_Agencies.agency_id   GROUP BY Housing_Finance_Agencies_Loan_Programs.loan_program_id HAVING COUNT(DISTINCT Housing_Finance_Agencies_Loan_Programs.housing_finance_agency_id) = (SELECT COUNT(*) FROM  Housing_Finance_Agencies)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Retrieve descriptions of loan programs utilized by every housing finance agency.",
          "sql_queries": [
            "SELECT LP.description FROM Loan_Programs LP JOIN Housing_Finance_Agencies_Loan_Programs HFLP ON LP.program_id = HFLP.loan_program_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Find the loan programs shared by all finance agencies listed in the database.",
          "sql_queries": [
            "SELECT description FROM Loan_Programs WHERE program_id IN (SELECT loan_program_id FROM Housing_Finance_Agencies_Loan_Programs GROUP BY loan_program_id HAVING COUNT(DISTINCT housing_finance_agency_id) = (SELECT COUNT(*) FROM Housing_Finance_Agencies))"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Identify the loan programs appearing in all rows of Housing_Finance_Agencies_Loan_Programs.",
          "sql_queries": [
            "SELECT description \nFROM Loan_Programs \nWHERE program_id IN (\n    SELECT loan_program_id \n    FROM Housing_Finance_Agencies_Loan_Programs \n    GROUP BY loan_program_id \n    HAVING COUNT(DISTINCT housing_finance_agency_id) = (\n        SELECT COUNT(*) \n        FROM Housing_Finance_Agencies\n    )\n)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.6666666666666666,
        "f1_score": 0.8,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_services_privacy_settings/scope_streaming_services_privacy_settings.sqlite",
      "db_dump": "CREATE TABLE Privacy_Settings (\n    setting_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    setting_value TEXT\n);\nCREATE TABLE Streaming_Services (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    service_name TEXT,\n    subscription_price REAL\n);\nCREATE TABLE Streaming_Services_Privacy_Settings (\n    streaming_service_id INTEGER,\n    privacy_settings_id INTEGER,\n    FOREIGN KEY(streaming_service_id) REFERENCES Streaming_Services(id),\n    FOREIGN KEY(privacy_settings_id) REFERENCES Privacy_Settings(setting_id)\n);\n\nINSERT INTO \"Privacy_Settings\" (setting_id,setting_value) VALUES (1,'Data Collection Opt-Out'),(2,'Content Recommendations'),(3,'Advertising Preferences'),(4,'Viewing History'),(5,'Profile Information Sharing');\nINSERT INTO \"Streaming_Services\" (id,service_name,subscription_price) VALUES (1,'Netflix',12.99),(2,'Amazon Prime Video',8.99),(3,'Disney+',7.99),(4,'Hulu',6.99),(5,'HBO Max',14.99);\nINSERT INTO \"Streaming_Services_Privacy_Settings\" (streaming_service_id,privacy_settings_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "Give me the privacy setting value for each streaming service.",
      "gold_queries": [
        "SELECT Privacy_Settings.setting_value  from Streaming_Services_Privacy_Settings join Privacy_Settings on Streaming_Services_Privacy_Settings.privacy_settings_id = Privacy_Settings.setting_id join Streaming_Services on Streaming_Services_Privacy_Settings.streaming_service_id = Streaming_Services.id   GROUP BY Streaming_Services_Privacy_Settings.privacy_settings_id HAVING COUNT(DISTINCT Streaming_Services_Privacy_Settings.streaming_service_id) = (SELECT COUNT(*) FROM  Streaming_Services)",
        "select streaming_services.service_name , privacy_settings.setting_value from Streaming_Services_Privacy_Settings join Privacy_Settings on Streaming_Services_Privacy_Settings.privacy_settings_id = Privacy_Settings.setting_id join Streaming_Services on Streaming_Services_Privacy_Settings.streaming_service_id = Streaming_Services.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Display a list of streaming services and their respective privacy settings as defined in the `setting_value` column.",
          "sql_queries": [
            "SELECT ss.service_name, ps.setting_value\nFROM Streaming_Services ss\nJOIN Streaming_Services_Privacy_Settings ssp ON ss.id = ssp.streaming_service_id\nJOIN Privacy_Settings ps ON ssp.privacy_settings_id = ps.setting_id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Find the `setting_value` for the privacy settings associated with each streaming service.",
          "sql_queries": [
            "SELECT ss.service_name, ps.setting_value \nFROM Streaming_Services ss\nJOIN Streaming_Services_Privacy_Settings ssp ON ss.id = ssp.streaming_service_id\nJOIN Privacy_Settings ps ON ssp.privacy_settings_id = ps.setting_id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all unique values in the `setting_value` column of `Privacy_Settings` that are linked to streaming services in the `Streaming_Services_Privacy_Settings` table.",
          "sql_queries": [
            "SELECT DISTINCT T1.setting_value \nFROM Privacy_Settings AS T1 \nJOIN Streaming_Services_Privacy_Settings AS T2 \nON T1.setting_id = T2.privacy_settings_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve the `setting_value` from `Privacy_Settings` based on the `privacy_settings_id` present in `Streaming_Services_Privacy_Settings`, grouped by `streaming_service_id`.",
          "sql_queries": [
            "SELECT streaming_service_id, GROUP_CONCAT(setting_value) AS setting_values\nFROM Streaming_Services_Privacy_Settings\nJOIN Privacy_Settings ON Streaming_Services_Privacy_Settings.privacy_settings_id = Privacy_Settings.setting_id\nGROUP BY streaming_service_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "For each streaming service in `Streaming_Services`, return the corresponding `setting_value` from `Privacy_Settings`, based on the foreign key relationships.",
          "sql_queries": [
            "SELECT s.service_name, p.setting_value\nFROM Streaming_Services s\nJOIN Streaming_Services_Privacy_Settings ssps ON s.id = ssps.streaming_service_id\nJOIN Privacy_Settings p ON ssps.privacy_settings_id = p.setting_id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.6,
        "f1_score": 0.5454545454545454,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_services_privacy_settings/scope_streaming_services_privacy_settings.sqlite",
      "db_dump": "CREATE TABLE Privacy_Settings (\n    setting_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    setting_value TEXT\n);\nCREATE TABLE Streaming_Services (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    service_name TEXT,\n    subscription_price REAL\n);\nCREATE TABLE Streaming_Services_Privacy_Settings (\n    streaming_service_id INTEGER,\n    privacy_settings_id INTEGER,\n    FOREIGN KEY(streaming_service_id) REFERENCES Streaming_Services(id),\n    FOREIGN KEY(privacy_settings_id) REFERENCES Privacy_Settings(setting_id)\n);\n\nINSERT INTO \"Privacy_Settings\" (setting_id,setting_value) VALUES (1,'Data Collection Opt-Out'),(2,'Content Recommendations'),(3,'Advertising Preferences'),(4,'Viewing History'),(5,'Profile Information Sharing');\nINSERT INTO \"Streaming_Services\" (id,service_name,subscription_price) VALUES (1,'Netflix',12.99),(2,'Amazon Prime Video',8.99),(3,'Disney+',7.99),(4,'Hulu',6.99),(5,'HBO Max',14.99);\nINSERT INTO \"Streaming_Services_Privacy_Settings\" (streaming_service_id,privacy_settings_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "For each streaming service, what is the corresponding privacy setting value?",
      "gold_queries": [
        "select streaming_services.service_name , privacy_settings.setting_value from Streaming_Services_Privacy_Settings join Privacy_Settings on Streaming_Services_Privacy_Settings.privacy_settings_id = Privacy_Settings.setting_id join Streaming_Services on Streaming_Services_Privacy_Settings.streaming_service_id = Streaming_Services.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Provide the privacy setting value for each streaming service.",
          "sql_queries": [
            "SELECT s.service_name, p.setting_value \nFROM Streaming_Services s\nJOIN Streaming_Services_Privacy_Settings sps ON s.id = sps.streaming_service_id\nJOIN Privacy_Settings p ON sps.privacy_settings_id = p.setting_id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Show the mapping between streaming services and their corresponding privacy settings.",
          "sql_queries": [
            "SELECT s.service_name, p.setting_value\nFROM Streaming_Services s\nJOIN Streaming_Services_Privacy_Settings ssps ON s.id = ssps.streaming_service_id\nJOIN Privacy_Settings p ON ssps.privacy_settings_id = p.setting_id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Get the privacy settings used by each streaming service.",
          "sql_queries": [
            "SELECT ss.service_name, ps.setting_value\nFROM Streaming_Services ss\nJOIN Streaming_Services_Privacy_Settings ssp ON ss.id = ssp.streaming_service_id\nJOIN Privacy_Settings ps ON ssp.privacy_settings_id = ps.setting_id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Retrieve the privacy setting value linked with each streaming service.",
          "sql_queries": [
            "SELECT T1.service_name, T3.setting_value \nFROM Streaming_Services AS T1 \nJOIN Streaming_Services_Privacy_Settings AS T2 ON T1.id = T2.streaming_service_id \nJOIN Privacy_Settings AS T3 ON T2.privacy_settings_id = T3.setting_id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Which privacy setting is connected to each streaming service?",
          "sql_queries": [
            "SELECT ss.service_name, ps.setting_value\nFROM Streaming_Services ss\nJOIN Streaming_Services_Privacy_Settings sssps ON ss.id = sssps.streaming_service_id\nJOIN Privacy_Settings ps ON sssps.privacy_settings_id = ps.setting_id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "List all streaming services and their associated privacy setting values.",
          "sql_queries": [
            "SELECT s.service_name, p.setting_value\nFROM Streaming_Services s\nJOIN Streaming_Services_Privacy_Settings ssps ON s.id = ssps.streaming_service_id\nJOIN Privacy_Settings p ON ssps.privacy_settings_id = p.setting_id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 6,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 6
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_services_privacy_settings/scope_streaming_services_privacy_settings.sqlite",
      "db_dump": "CREATE TABLE Privacy_Settings (\n    setting_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    setting_value TEXT\n);\nCREATE TABLE Streaming_Services (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    service_name TEXT,\n    subscription_price REAL\n);\nCREATE TABLE Streaming_Services_Privacy_Settings (\n    streaming_service_id INTEGER,\n    privacy_settings_id INTEGER,\n    FOREIGN KEY(streaming_service_id) REFERENCES Streaming_Services(id),\n    FOREIGN KEY(privacy_settings_id) REFERENCES Privacy_Settings(setting_id)\n);\n\nINSERT INTO \"Privacy_Settings\" (setting_id,setting_value) VALUES (1,'Data Collection Opt-Out'),(2,'Content Recommendations'),(3,'Advertising Preferences'),(4,'Viewing History'),(5,'Profile Information Sharing');\nINSERT INTO \"Streaming_Services\" (id,service_name,subscription_price) VALUES (1,'Netflix',12.99),(2,'Amazon Prime Video',8.99),(3,'Disney+',7.99),(4,'Hulu',6.99),(5,'HBO Max',14.99);\nINSERT INTO \"Streaming_Services_Privacy_Settings\" (streaming_service_id,privacy_settings_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "What is the privacy setting value that is in common for all streaming services?",
      "gold_queries": [
        "SELECT Privacy_Settings.setting_value  from Streaming_Services_Privacy_Settings join Privacy_Settings on Streaming_Services_Privacy_Settings.privacy_settings_id = Privacy_Settings.setting_id join Streaming_Services on Streaming_Services_Privacy_Settings.streaming_service_id = Streaming_Services.id   GROUP BY Streaming_Services_Privacy_Settings.privacy_settings_id HAVING COUNT(DISTINCT Streaming_Services_Privacy_Settings.streaming_service_id) = (SELECT COUNT(*) FROM  Streaming_Services)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Identify the setting from *Privacy_Settings* shared by all streaming services in *Streaming_Services*.",
          "sql_queries": [
            "SELECT ps.setting_value\nFROM Privacy_Settings ps\nWHERE ps.setting_id IN (\n    SELECT ssp.privacy_settings_id\n    FROM Streaming_Services_Privacy_Settings ssp\n    GROUP BY ssp.privacy_settings_id\n    HAVING COUNT(DISTINCT ssp.streaming_service_id) = (SELECT COUNT(*) FROM Streaming_Services)\n)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "What is the setting value from *Privacy_Settings* that is associated with every *Streaming_Services* record?",
          "sql_queries": [
            "SELECT setting_value FROM Privacy_Settings WHERE setting_id IN (SELECT privacy_settings_id FROM Streaming_Services_Privacy_Settings GROUP BY privacy_settings_id HAVING COUNT(streaming_service_id) = (SELECT COUNT(*) FROM Streaming_Services))"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "For which *Privacy_Settings* does every *Streaming_Services* entry have a corresponding record in *Streaming_Services_Privacy_Settings*?",
          "sql_queries": [
            "SELECT setting_value\nFROM Privacy_Settings\nWHERE setting_id IN (\n    SELECT privacy_settings_id\n    FROM Streaming_Services_Privacy_Settings\n    GROUP BY privacy_settings_id\n    HAVING COUNT(DISTINCT streaming_service_id) = (SELECT COUNT(*) FROM Streaming_Services)\n)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Which *Privacy_Settings* value is linked to all streaming services through *Streaming_Services_Privacy_Settings*?",
          "sql_queries": [
            "SELECT setting_value \nFROM Privacy_Settings \nWHERE setting_id = (\n    SELECT privacy_settings_id \n    FROM Streaming_Services_Privacy_Settings \n    GROUP BY privacy_settings_id \n    HAVING COUNT(DISTINCT streaming_service_id) = (SELECT COUNT(*) FROM Streaming_Services)\n)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 4
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_service_advertisement/scope_streaming_service_advertisement.sqlite",
      "db_dump": "CREATE TABLE Advertisement (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT,\n    duration REAL\n);\nCREATE TABLE Streaming_Service (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    platform TEXT\n);\nCREATE TABLE Streaming_Service_Advertisement (\n    streaming_service_id INTEGER,\n    advertisement_id INTEGER,\n    FOREIGN KEY(streaming_service_id) REFERENCES Streaming_Service(id),\n    FOREIGN KEY(advertisement_id) REFERENCES Advertisement(id)\n);\n\nINSERT INTO \"Advertisement\" (id,type,duration) VALUES (1,'Pre_roll_Ads',30.0),(2,'Mid_roll_Ads',60.0),(3,'Post_roll_Ads',120.0),(4,'Banner_Ads',10.0),(5,'Interstitial_Ads',90.0);\nINSERT INTO \"Streaming_Service\" (id,name,platform) VALUES (1,'Netflix','Web'),(2,'Hulu','Web'),(3,'Amazon Prime Video','Web'),(4,'Disney+','App'),(5,'HBO Max','App');\nINSERT INTO \"Streaming_Service_Advertisement\" (streaming_service_id,advertisement_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\n",
      "question": "For each streaming service, give me the advertisement durations.",
      "gold_queries": [
        "select streaming_service.name , advertisement.duration from Streaming_Service_Advertisement join Advertisement on Streaming_Service_Advertisement.advertisement_id = Advertisement.id join Streaming_Service on Streaming_Service_Advertisement.streaming_service_id = Streaming_Service.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Return a table with two columns: \"Streaming Service\" and \"Advertisement Durations\", listing each streaming service and a comma-separated list of advertisement durations used by that service.",
          "sql_queries": [
            "SELECT SS.name AS \"Streaming Service\", GROUP_CONCAT(A.duration, ', ') AS \"Advertisement Durations\"\nFROM Streaming_Service SS\nJOIN Streaming_Service_Advertisement SSA ON SS.id = SSA.streaming_service_id\nJOIN Advertisement A ON SSA.advertisement_id = A.id\nGROUP BY SS.name"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "For each streaming service, display the total duration of all advertisements used.",
          "sql_queries": [
            "SELECT ss.name, SUM(a.duration) AS total_duration\nFROM Streaming_Service ss\nJOIN Streaming_Service_Advertisement ssa ON ss.id = ssa.streaming_service_id\nJOIN Advertisement a ON ssa.advertisement_id = a.id\nGROUP BY ss.name"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Identify the streaming service that uses the longest advertisement duration and display its name and the maximum duration.",
          "sql_queries": [
            "SELECT T2.name, MAX(T1.duration) AS max_duration\nFROM Advertisement AS T1\nJOIN Streaming_Service_Advertisement AS SSA ON T1.id = SSA.advertisement_id\nJOIN Streaming_Service AS T2 ON SSA.streaming_service_id = T2.id\nGROUP BY T2.name\nORDER BY max_duration DESC\nLIMIT 1"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Return a list of advertisement durations for each streaming service, where each entry consists of a streaming service name and a list of corresponding advertisement durations.",
          "sql_queries": [
            "SELECT ss.name, GROUP_CONCAT(a.duration) AS advertisement_durations\nFROM Streaming_Service ss\nJOIN Streaming_Service_Advertisement ssa ON ss.id = ssa.streaming_service_id\nJOIN Advertisement a ON ssa.advertisement_id = a.id\nGROUP BY ss.name"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Calculate the average advertisement duration per streaming service.",
          "sql_queries": [
            "SELECT ss.name, AVG(a.duration) AS average_duration\nFROM Streaming_Service_Advertisement ssa\nJOIN Streaming_Service ss ON ssa.streaming_service_id = ss.id\nJOIN Advertisement a ON ssa.advertisement_id = a.id\nGROUP BY ss.name"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_service_advertisement/scope_streaming_service_advertisement.sqlite",
      "db_dump": "CREATE TABLE Advertisement (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT,\n    duration REAL\n);\nCREATE TABLE Streaming_Service (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    platform TEXT\n);\nCREATE TABLE Streaming_Service_Advertisement (\n    streaming_service_id INTEGER,\n    advertisement_id INTEGER,\n    FOREIGN KEY(streaming_service_id) REFERENCES Streaming_Service(id),\n    FOREIGN KEY(advertisement_id) REFERENCES Advertisement(id)\n);\n\nINSERT INTO \"Advertisement\" (id,type,duration) VALUES (1,'Pre_roll_Ads',30.0),(2,'Mid_roll_Ads',60.0),(3,'Post_roll_Ads',120.0),(4,'Banner_Ads',10.0),(5,'Interstitial_Ads',90.0);\nINSERT INTO \"Streaming_Service\" (id,name,platform) VALUES (1,'Netflix','Web'),(2,'Hulu','Web'),(3,'Amazon Prime Video','Web'),(4,'Disney+','App'),(5,'HBO Max','App');\nINSERT INTO \"Streaming_Service_Advertisement\" (streaming_service_id,advertisement_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\n",
      "question": "Which advertisement types and durations do all streaming services have in common?",
      "gold_queries": [
        "SELECT Advertisement.type, Advertisement.duration  from Streaming_Service_Advertisement join Advertisement on Streaming_Service_Advertisement.advertisement_id = Advertisement.id join Streaming_Service on Streaming_Service_Advertisement.streaming_service_id = Streaming_Service.id   GROUP BY Streaming_Service_Advertisement.advertisement_id HAVING COUNT(DISTINCT Streaming_Service_Advertisement.streaming_service_id) = (SELECT COUNT(*) FROM  Streaming_Service)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What is the overlap in advertisement durations used by all streaming services?",
          "sql_queries": [
            "SELECT T1.duration \nFROM Advertisement AS T1 \nJOIN Streaming_Service_Advertisement AS T2 ON T1.id = T2.advertisement_id \nGROUP BY T1.duration \nHAVING COUNT(DISTINCT T2.streaming_service_id) = (SELECT COUNT(*) FROM Streaming_Service)"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Identify the advertisement types and durations present in every streaming service's advertisement set.",
          "sql_queries": [
            "SELECT Advertisement.type, Advertisement.duration\nFROM Advertisement\nJOIN Streaming_Service_Advertisement ON Advertisement.id = Streaming_Service_Advertisement.advertisement_id\nGROUP BY Advertisement.id\nHAVING COUNT(DISTINCT Streaming_Service_Advertisement.streaming_service_id) = (SELECT COUNT(*) FROM Streaming_Service)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Determine the common advertisement characteristics shared by all streaming services.",
          "sql_queries": [
            "SELECT type, duration\nFROM Advertisement\nWHERE id IN (\n    SELECT advertisement_id\n    FROM Streaming_Service_Advertisement\n    GROUP BY advertisement_id\n    HAVING COUNT(DISTINCT streaming_service_id) = (\n        SELECT COUNT(*) FROM Streaming_Service\n    )\n)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Which advertisement types appear on all streaming services?",
          "sql_queries": [
            "SELECT type\nFROM Advertisement\nWHERE id IN (\n    SELECT advertisement_id\n    FROM Streaming_Service_Advertisement\n    GROUP BY advertisement_id\n    HAVING COUNT(DISTINCT streaming_service_id) = (SELECT COUNT(*) FROM Streaming_Service)\n)"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_service_advertisement/scope_streaming_service_advertisement.sqlite",
      "db_dump": "CREATE TABLE Advertisement (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT,\n    duration REAL\n);\nCREATE TABLE Streaming_Service (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    platform TEXT\n);\nCREATE TABLE Streaming_Service_Advertisement (\n    streaming_service_id INTEGER,\n    advertisement_id INTEGER,\n    FOREIGN KEY(streaming_service_id) REFERENCES Streaming_Service(id),\n    FOREIGN KEY(advertisement_id) REFERENCES Advertisement(id)\n);\n\nINSERT INTO \"Advertisement\" (id,type,duration) VALUES (1,'Pre_roll_Ads',30.0),(2,'Mid_roll_Ads',60.0),(3,'Post_roll_Ads',120.0),(4,'Banner_Ads',10.0),(5,'Interstitial_Ads',90.0);\nINSERT INTO \"Streaming_Service\" (id,name,platform) VALUES (1,'Netflix','Web'),(2,'Hulu','Web'),(3,'Amazon Prime Video','Web'),(4,'Disney+','App'),(5,'HBO Max','App');\nINSERT INTO \"Streaming_Service_Advertisement\" (streaming_service_id,advertisement_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\n",
      "question": "Give me the advertisement duration we have on every streaming service.",
      "gold_queries": [
        "SELECT Advertisement.duration  from Streaming_Service_Advertisement join Advertisement on Streaming_Service_Advertisement.advertisement_id = Advertisement.id join Streaming_Service on Streaming_Service_Advertisement.streaming_service_id = Streaming_Service.id   GROUP BY Streaming_Service_Advertisement.advertisement_id HAVING COUNT(DISTINCT Streaming_Service_Advertisement.streaming_service_id) = (SELECT COUNT(*) FROM  Streaming_Service)",
        "select streaming_service.name , advertisement.duration from Streaming_Service_Advertisement join Advertisement on Streaming_Service_Advertisement.advertisement_id = Advertisement.id join Streaming_Service on Streaming_Service_Advertisement.streaming_service_id = Streaming_Service.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List the duration of every advertisement in the Advertisement table, once for each streaming service.",
          "sql_queries": [
            "SELECT DISTINCT S.name, A.duration\nFROM Streaming_Service_Advertisement SSA\nJOIN Streaming_Service S ON SSA.streaming_service_id = S.id\nJOIN Advertisement A ON SSA.advertisement_id = A.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Calculate the average advertisement duration for each streaming service.",
          "sql_queries": [
            "SELECT SS.name, AVG(A.duration) AS average_duration\nFROM Streaming_Service SS\nJOIN Streaming_Service_Advertisement SSA ON SS.id = SSA.streaming_service_id\nJOIN Advertisement A ON SSA.advertisement_id = A.id\nGROUP BY SS.name"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "For each streaming service, list the duration of every advertisement that is displayed on that service.",
          "sql_queries": [
            "SELECT S.name, A.duration\nFROM Streaming_Service S\nJOIN Streaming_Service_Advertisement SSA ON S.id = SSA.streaming_service_id\nJOIN Advertisement A ON SSA.advertisement_id = A.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Provide a count of how many advertisements of each duration are present on each streaming service.",
          "sql_queries": [
            "SELECT SS.name, A.duration, COUNT(*) AS count\nFROM Streaming_Service_Advertisement SSA\nJOIN Streaming_Service SS ON SSA.streaming_service_id = SS.id\nJOIN Advertisement A ON SSA.advertisement_id = A.id\nGROUP BY SS.name, A.duration"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all unique advertisement durations, grouped by the streaming service they are associated with.",
          "sql_queries": [
            "SELECT SS.name, DISTINCT A.duration\nFROM Streaming_Service AS SS\nJOIN Streaming_Service_Advertisement AS SSA ON SS.id = SSA.streaming_service_id\nJOIN Advertisement AS A ON SSA.advertisement_id = A.id\nGROUP BY SS.name, A.duration"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT SS.name, DISTINCT A.duration\nFROM Streaming_Service AS SS\nJOIN Streaming_Service_Advertisement AS SSA ON SS.id = SSA.streaming_service_id\nJOIN Advertisement AS A ON SSA.advertisement_id = A.id\nGROUP BY SS.name, A.duration",
                "original_exception": "near \"DISTINCT\": syntax error"
              }
            ],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.4,
        "f1_score": 0.4444444444444445,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [
          {
            "query": "SELECT SS.name, DISTINCT A.duration\nFROM Streaming_Service AS SS\nJOIN Streaming_Service_Advertisement AS SSA ON SS.id = SSA.streaming_service_id\nJOIN Advertisement AS A ON SSA.advertisement_id = A.id\nGROUP BY SS.name, A.duration",
            "original_exception": "near \"DISTINCT\": syntax error"
          }
        ],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_service_advertisement/scope_streaming_service_advertisement.sqlite",
      "db_dump": "CREATE TABLE Advertisement (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT,\n    duration REAL\n);\nCREATE TABLE Streaming_Service (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    platform TEXT\n);\nCREATE TABLE Streaming_Service_Advertisement (\n    streaming_service_id INTEGER,\n    advertisement_id INTEGER,\n    FOREIGN KEY(streaming_service_id) REFERENCES Streaming_Service(id),\n    FOREIGN KEY(advertisement_id) REFERENCES Advertisement(id)\n);\n\nINSERT INTO \"Advertisement\" (id,type,duration) VALUES (1,'Pre_roll_Ads',30.0),(2,'Mid_roll_Ads',60.0),(3,'Post_roll_Ads',120.0),(4,'Banner_Ads',10.0),(5,'Interstitial_Ads',90.0);\nINSERT INTO \"Streaming_Service\" (id,name,platform) VALUES (1,'Netflix','Web'),(2,'Hulu','Web'),(3,'Amazon Prime Video','Web'),(4,'Disney+','App'),(5,'HBO Max','App');\nINSERT INTO \"Streaming_Service_Advertisement\" (streaming_service_id,advertisement_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\n",
      "question": "Give me the advertisement types and durations that each streaming service has.",
      "gold_queries": [
        "SELECT Advertisement.type, Advertisement.duration  from Streaming_Service_Advertisement join Advertisement on Streaming_Service_Advertisement.advertisement_id = Advertisement.id join Streaming_Service on Streaming_Service_Advertisement.streaming_service_id = Streaming_Service.id   GROUP BY Streaming_Service_Advertisement.advertisement_id HAVING COUNT(DISTINCT Streaming_Service_Advertisement.streaming_service_id) = (SELECT COUNT(*) FROM  Streaming_Service)",
        "select streaming_service.name , advertisement.type , advertisement.duration from Streaming_Service_Advertisement join Advertisement on Streaming_Service_Advertisement.advertisement_id = Advertisement.id join Streaming_Service on Streaming_Service_Advertisement.streaming_service_id = Streaming_Service.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For each streaming service, return the distinct advertisement types they utilize along with the corresponding duration.",
          "sql_queries": [
            "SELECT DISTINCT SS.name, A.type, A.duration\nFROM Streaming_Service SS\nJOIN Streaming_Service_Advertisement SSA ON SS.id = SSA.streaming_service_id\nJOIN Advertisement A ON SSA.advertisement_id = A.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Present a table showing each streaming service and the advertisement types and durations they have.",
          "sql_queries": [
            "SELECT S.name, A.type, A.duration\nFROM Streaming_Service Advertisements\nJOIN Streaming_Service_Advertisement SSA ON S.id = SSA.streaming_service_id\nJOIN Advertisement A ON SSA.advertisement_id = A.id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT S.name, A.type, A.duration\nFROM Streaming_Service Advertisements\nJOIN Streaming_Service_Advertisement SSA ON S.id = SSA.streaming_service_id\nJOIN Advertisement A ON SSA.advertisement_id = A.id",
                "original_exception": "no such column: S.name"
              }
            ],
            "all_found": false
          }
        },
        {
          "interpretation": "List all advertisements and their durations for each streaming service.",
          "sql_queries": [
            "SELECT SS.name, A.type, A.duration\nFROM Advertisement A\nJOIN Streaming_Service_Advertisement SSA ON A.id = SSA.advertisement_id\nJOIN Streaming_Service SS ON SSA.streaming_service_id = SS.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve the types and durations of advertisements associated with each streaming service.",
          "sql_queries": [
            "SELECT SS.name, A.type, A.duration\nFROM Streaming_Service SS\nJOIN Streaming_Service_Advertisement SSA ON SS.id = SSA.streaming_service_id\nJOIN Advertisement A ON SSA.advertisement_id = A.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.75,
        "f1_score": 0.6,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [
          {
            "query": "SELECT S.name, A.type, A.duration\nFROM Streaming_Service Advertisements\nJOIN Streaming_Service_Advertisement SSA ON S.id = SSA.streaming_service_id\nJOIN Advertisement A ON SSA.advertisement_id = A.id",
            "original_exception": "no such column: S.name"
          }
        ],
        "all_found": false
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_service_customer_support/scope_streaming_service_customer_support.sqlite",
      "db_dump": "CREATE TABLE customer_support (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    support_type TEXT,\n    description TEXT\n);\nCREATE TABLE streaming_service (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    price REAL\n);\nCREATE TABLE streaming_service_customer_support (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    streaming_service_id INTEGER,\n    customer_support_id INTEGER,\n    FOREIGN KEY(streaming_service_id) REFERENCES streaming_service(id),\n    FOREIGN KEY(customer_support_id) REFERENCES customer_support(id)\n);\n\nINSERT INTO \"customer_support\" (id,support_type,description) VALUES (1,'Live Chat','Real-time chat assistance'),(2,'Email Support','Response within 24 hours'),(3,'Phone Support','Call us at our toll-free number'),(4,'Forum Support','Ask questions and get help from community members'),(5,'FAQs','Find answers to common questions');\nINSERT INTO \"streaming_service\" (id,name,price) VALUES (1,'Netflix',9.99),(2,'Amazon Prime Video',8.99),(3,'Hulu',6.99),(4,'Disney+',7.99),(5,'HBO Max',14.99);\nINSERT INTO \"streaming_service_customer_support\" (id,streaming_service_id,customer_support_id) VALUES (1,1,1),(2,2,1),(3,3,1),(4,4,1),(5,5,1),(6,5,2);\n",
      "question": "What is the customer support description for each streaming service?",
      "gold_queries": [
        "SELECT customer_support.description  from streaming_service_customer_support join customer_support on streaming_service_customer_support.customer_support_id = customer_support.id join streaming_service on streaming_service_customer_support.streaming_service_id = streaming_service.id   GROUP BY streaming_service_customer_support.customer_support_id HAVING COUNT(DISTINCT streaming_service_customer_support.streaming_service_id) = (SELECT COUNT(*) FROM  streaming_service)",
        "select streaming_service.name , customer_support.description from streaming_service_customer_support join customer_support on streaming_service_customer_support.customer_support_id = customer_support.id join streaming_service on streaming_service_customer_support.streaming_service_id = streaming_service.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List all streaming services and their corresponding customer support descriptions",
          "sql_queries": [
            "SELECT s.name, cs.description \nFROM streaming_service s \nJOIN streaming_service_customer_support ss_cs ON s.id = ss_cs.streaming_service_id \nJOIN customer_support cs ON ss_cs.customer_support_id = cs.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve the description of the customer support offered by each streaming service",
          "sql_queries": [
            "SELECT ss.name, cs.description \nFROM streaming_service_customer_support scs\nJOIN streaming_service ss ON scs.streaming_service_id = ss.id\nJOIN customer_support cs ON scs.customer_support_id = cs.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Which customer support description is associated with each streaming service?",
          "sql_queries": [
            "SELECT ss.name AS streaming_service, cs.description AS support_description\nFROM streaming_service_customer_support sscs\nJOIN streaming_service ss ON sscs.streaming_service_id = ss.id\nJOIN customer_support cs ON sscs.customer_support_id = cs.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Show a table with streaming service names and their respective customer support descriptions",
          "sql_queries": [
            "SELECT streaming_service.name, customer_support.description \nFROM streaming_service \nJOIN streaming_service_customer_support ON streaming_service.id = streaming_service_customer_support.streaming_service_id \nJOIN customer_support ON streaming_service_customer_support.customer_support_id = customer_support.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "For each streaming service, list the corresponding customer support description",
          "sql_queries": [
            "SELECT ss.name, cs.description\nFROM streaming_service ss\nJOIN streaming_service_customer_support sscs ON ss.id = sscs.streaming_service_id\nJOIN customer_support cs ON sscs.customer_support_id = cs.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 1.0,
        "f1_score": 0.6666666666666666,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 5
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_service_customer_support/scope_streaming_service_customer_support.sqlite",
      "db_dump": "CREATE TABLE customer_support (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    support_type TEXT,\n    description TEXT\n);\nCREATE TABLE streaming_service (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    price REAL\n);\nCREATE TABLE streaming_service_customer_support (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    streaming_service_id INTEGER,\n    customer_support_id INTEGER,\n    FOREIGN KEY(streaming_service_id) REFERENCES streaming_service(id),\n    FOREIGN KEY(customer_support_id) REFERENCES customer_support(id)\n);\n\nINSERT INTO \"customer_support\" (id,support_type,description) VALUES (1,'Live Chat','Real-time chat assistance'),(2,'Email Support','Response within 24 hours'),(3,'Phone Support','Call us at our toll-free number'),(4,'Forum Support','Ask questions and get help from community members'),(5,'FAQs','Find answers to common questions');\nINSERT INTO \"streaming_service\" (id,name,price) VALUES (1,'Netflix',9.99),(2,'Amazon Prime Video',8.99),(3,'Hulu',6.99),(4,'Disney+',7.99),(5,'HBO Max',14.99);\nINSERT INTO \"streaming_service_customer_support\" (id,streaming_service_id,customer_support_id) VALUES (1,1,1),(2,2,1),(3,3,1),(4,4,1),(5,5,1),(6,5,2);\n",
      "question": "Show me the type of support each streaming service provides.",
      "gold_queries": [
        "SELECT customer_support.support_type  from streaming_service_customer_support join customer_support on streaming_service_customer_support.customer_support_id = customer_support.id join streaming_service on streaming_service_customer_support.streaming_service_id = streaming_service.id   GROUP BY streaming_service_customer_support.customer_support_id HAVING COUNT(DISTINCT streaming_service_customer_support.streaming_service_id) = (SELECT COUNT(*) FROM  streaming_service)",
        "select streaming_service.name , customer_support.support_type from streaming_service_customer_support join customer_support on streaming_service_customer_support.customer_support_id = customer_support.id join streaming_service on streaming_service_customer_support.streaming_service_id = streaming_service.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List each streaming service and the support type it offers.",
          "sql_queries": [
            "SELECT s.name, cs.support_type \nFROM streaming_service s \nJOIN streaming_service_customer_support scs ON s.id = scs.streaming_service_id \nJOIN customer_support cs ON scs.customer_support_id = cs.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve the support types associated with each streaming service.",
          "sql_queries": [
            "SELECT ss.name, cs.support_type \nFROM streaming_service ss \nJOIN streaming_service_customer_support ss_cs ON ss.id = ss_cs.streaming_service_id \nJOIN customer_support cs ON ss_cs.customer_support_id = cs.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Which types of support do each streaming service offer?",
          "sql_queries": [
            "SELECT ss.name, cs.support_type\nFROM streaming_service ss\nJOIN streaming_service_customer_support sscs ON ss.id = sscs.streaming_service_id\nJOIN customer_support cs ON sscs.customer_support_id = cs.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "SELECT s.name, cs.support_type FROM streaming_service s JOIN streaming_service_customer_support c ON s.id = c.streaming_service_id JOIN customer_support cs ON c.customer_support_id = cs.id;",
          "sql_queries": [
            "SELECT s.name, cs.support_type \nFROM streaming_service s \nJOIN streaming_service_customer_support c ON s.id = c.streaming_service_id \nJOIN customer_support cs ON c.customer_support_id = cs.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Select customer_support.support_type FROM customer_support JOIN streaming_service_customer_support ON customer_support.id = streaming_service_customer_support.customer_support_id JOIN streaming_service ON streaming_service_customer_support.streaming_service_id = streaming_service.id GROUP BY streaming_service.name;",
          "sql_queries": [
            "SELECT customer_support.support_type \nFROM customer_support \nJOIN streaming_service_customer_support ON customer_support.id = streaming_service_customer_support.customer_support_id \nJOIN streaming_service ON streaming_service_customer_support.streaming_service_id = streaming_service.id \nGROUP BY streaming_service.name"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.8,
        "f1_score": 0.6153846153846154,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 4
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_service_customer_support/scope_streaming_service_customer_support.sqlite",
      "db_dump": "CREATE TABLE customer_support (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    support_type TEXT,\n    description TEXT\n);\nCREATE TABLE streaming_service (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    price REAL\n);\nCREATE TABLE streaming_service_customer_support (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    streaming_service_id INTEGER,\n    customer_support_id INTEGER,\n    FOREIGN KEY(streaming_service_id) REFERENCES streaming_service(id),\n    FOREIGN KEY(customer_support_id) REFERENCES customer_support(id)\n);\n\nINSERT INTO \"customer_support\" (id,support_type,description) VALUES (1,'Live Chat','Real-time chat assistance'),(2,'Email Support','Response within 24 hours'),(3,'Phone Support','Call us at our toll-free number'),(4,'Forum Support','Ask questions and get help from community members'),(5,'FAQs','Find answers to common questions');\nINSERT INTO \"streaming_service\" (id,name,price) VALUES (1,'Netflix',9.99),(2,'Amazon Prime Video',8.99),(3,'Hulu',6.99),(4,'Disney+',7.99),(5,'HBO Max',14.99);\nINSERT INTO \"streaming_service_customer_support\" (id,streaming_service_id,customer_support_id) VALUES (1,1,1),(2,2,1),(3,3,1),(4,4,1),(5,5,1),(6,5,2);\n",
      "question": "Give me the customer support type and description in common for all streaming services.",
      "gold_queries": [
        "SELECT customer_support.support_type, customer_support.description  from streaming_service_customer_support join customer_support on streaming_service_customer_support.customer_support_id = customer_support.id join streaming_service on streaming_service_customer_support.streaming_service_id = streaming_service.id   GROUP BY streaming_service_customer_support.customer_support_id HAVING COUNT(DISTINCT streaming_service_customer_support.streaming_service_id) = (SELECT COUNT(*) FROM  streaming_service)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Find the support type and description used by all streaming services, regardless of individual support options.",
          "sql_queries": [
            "SELECT support_type, description \nFROM customer_support \nWHERE id NOT IN (\n    SELECT customer_support_id \n    FROM streaming_service_customer_support \n    GROUP BY customer_support_id \n    HAVING COUNT(DISTINCT streaming_service_id) < (SELECT COUNT(id) FROM streaming_service)\n)"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List the customer support types and descriptions offered by at least one streaming service, indicating those shared by all.",
          "sql_queries": [
            "SELECT support_type, description, \n       CASE WHEN COUNT(DISTINCT streaming_service_id) = (SELECT COUNT(*) FROM streaming_service) THEN 'Shared by All' ELSE 'Not Shared by All' END AS shared_status\nFROM customer_support\nJOIN streaming_service_customer_support ON customer_support.id = streaming_service_customer_support.customer_support_id\nGROUP BY support_type, description"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Determine the default customer support type and description provided to all streaming services.",
          "sql_queries": [
            "SELECT support_type, description \nFROM customer_support \nWHERE id = (SELECT customer_support_id \n            FROM streaming_service_customer_support \n            GROUP BY customer_support_id \n            ORDER BY COUNT(*) DESC \n            LIMIT 1)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Retrieve the customer support types and descriptions that appear in every row of the streaming_service_customer_support table.",
          "sql_queries": [
            "SELECT support_type, description\nFROM customer_support\nWHERE id IN (\n    SELECT customer_support_id\n    FROM streaming_service_customer_support\n    GROUP BY customer_support_id\n    HAVING COUNT(*) = (SELECT COUNT(*) FROM streaming_service)\n)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Identify the most prevalent customer support type and description across all streaming services.",
          "sql_queries": [
            "SELECT support_type, description\nFROM customer_support\nWHERE id = (\n    SELECT customer_support_id\n    FROM streaming_service_customer_support\n    GROUP BY customer_support_id\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.6,
        "f1_score": 0.7499999999999999,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_service_customer_support/scope_streaming_service_customer_support.sqlite",
      "db_dump": "CREATE TABLE customer_support (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    support_type TEXT,\n    description TEXT\n);\nCREATE TABLE streaming_service (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    price REAL\n);\nCREATE TABLE streaming_service_customer_support (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    streaming_service_id INTEGER,\n    customer_support_id INTEGER,\n    FOREIGN KEY(streaming_service_id) REFERENCES streaming_service(id),\n    FOREIGN KEY(customer_support_id) REFERENCES customer_support(id)\n);\n\nINSERT INTO \"customer_support\" (id,support_type,description) VALUES (1,'Live Chat','Real-time chat assistance'),(2,'Email Support','Response within 24 hours'),(3,'Phone Support','Call us at our toll-free number'),(4,'Forum Support','Ask questions and get help from community members'),(5,'FAQs','Find answers to common questions');\nINSERT INTO \"streaming_service\" (id,name,price) VALUES (1,'Netflix',9.99),(2,'Amazon Prime Video',8.99),(3,'Hulu',6.99),(4,'Disney+',7.99),(5,'HBO Max',14.99);\nINSERT INTO \"streaming_service_customer_support\" (id,streaming_service_id,customer_support_id) VALUES (1,1,1),(2,2,1),(3,3,1),(4,4,1),(5,5,1),(6,5,2);\n",
      "question": "For each streaming service, show me the corresponding customer support description.",
      "gold_queries": [
        "select streaming_service.name , customer_support.description from streaming_service_customer_support join customer_support on streaming_service_customer_support.customer_support_id = customer_support.id join streaming_service on streaming_service_customer_support.streaming_service_id = streaming_service.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Output a table with columns for streaming service name, customer support type, and description.",
          "sql_queries": [
            "SELECT T2.name, T3.support_type, T3.description \nFROM streaming_service_customer_support AS T1 \nJOIN streaming_service AS T2 ON T1.streaming_service_id = T2.id \nJOIN customer_support AS T3 ON T1.customer_support_id = T3.id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List every streaming service along with the description of all customer support types they are associated with.",
          "sql_queries": [
            "SELECT s.name, cs.description \nFROM streaming_service s \nJOIN streaming_service_customer_support sscs ON s.id = sscs.streaming_service_id \nJOIN customer_support cs ON sscs.customer_support_id = cs.id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Given each streaming service name, display the description of the primary customer support type linked to it.",
          "sql_queries": [
            "SELECT ss.name, cs.description\nFROM streaming_service ss\nJOIN streaming_service_customer_support sscs ON ss.id = sscs.streaming_service_id\nJOIN customer_support cs ON sscs.customer_support_id = cs.id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Retrieve a list of all streaming services and their associated customer support descriptions from the customer_support table.",
          "sql_queries": [
            "SELECT s.name, c.description \nFROM streaming_service s \nJOIN streaming_service_customer_support scs ON s.id = scs.streaming_service_id \nJOIN customer_support c ON scs.customer_support_id = c.id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.75,
        "f1_score": 0.8571428571428571,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_service_customer_support/scope_streaming_service_customer_support.sqlite",
      "db_dump": "CREATE TABLE customer_support (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    support_type TEXT,\n    description TEXT\n);\nCREATE TABLE streaming_service (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    price REAL\n);\nCREATE TABLE streaming_service_customer_support (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    streaming_service_id INTEGER,\n    customer_support_id INTEGER,\n    FOREIGN KEY(streaming_service_id) REFERENCES streaming_service(id),\n    FOREIGN KEY(customer_support_id) REFERENCES customer_support(id)\n);\n\nINSERT INTO \"customer_support\" (id,support_type,description) VALUES (1,'Live Chat','Real-time chat assistance'),(2,'Email Support','Response within 24 hours'),(3,'Phone Support','Call us at our toll-free number'),(4,'Forum Support','Ask questions and get help from community members'),(5,'FAQs','Find answers to common questions');\nINSERT INTO \"streaming_service\" (id,name,price) VALUES (1,'Netflix',9.99),(2,'Amazon Prime Video',8.99),(3,'Hulu',6.99),(4,'Disney+',7.99),(5,'HBO Max',14.99);\nINSERT INTO \"streaming_service_customer_support\" (id,streaming_service_id,customer_support_id) VALUES (1,1,1),(2,2,1),(3,3,1),(4,4,1),(5,5,1),(6,5,2);\n",
      "question": "For every streaming service, list the types of support they provide.",
      "gold_queries": [
        "select streaming_service.name , customer_support.support_type from streaming_service_customer_support join customer_support on streaming_service_customer_support.customer_support_id = customer_support.id join streaming_service on streaming_service_customer_support.streaming_service_id = streaming_service.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Generate a report detailing the support offerings available for every streaming service.",
          "sql_queries": [
            "SELECT ss.name, cs.support_type, cs.description\nFROM streaming_service ss\nJOIN streaming_service_customer_support sscs ON ss.id = sscs.streaming_service_id\nJOIN customer_support cs ON sscs.customer_support_id = cs.id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "For each unique streaming service, enumerate the corresponding customer support types.",
          "sql_queries": [
            "SELECT ss.name, cs.support_type\nFROM streaming_service ss\nJOIN streaming_service_customer_support sscs ON ss.id = sscs.streaming_service_id\nJOIN customer_support cs ON sscs.customer_support_id = cs.id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Present a table with columns for streaming service names and their respective support types.",
          "sql_queries": [
            "SELECT T1.name, T3.support_type FROM streaming_service AS T1 JOIN streaming_service_customer_support AS T2 ON T1.id = T2.streaming_service_id JOIN customer_support AS T3 ON T2.customer_support_id = T3.id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Display a structured representation of the relationship between streaming services and the customer support types they provide.",
          "sql_queries": [
            "SELECT ss.name AS streaming_service, cs.support_type AS customer_support\nFROM streaming_service ss\nJOIN streaming_service_customer_support sscs ON ss.id = sscs.streaming_service_id\nJOIN customer_support cs ON sscs.customer_support_id = cs.id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "List all support types associated with each streaming service, ordered by streaming service.",
          "sql_queries": [
            "SELECT s.name, cs.support_type \nFROM streaming_service s \nJOIN streaming_service_customer_support ss_cs ON s.id = ss_cs.streaming_service_id \nJOIN customer_support cs ON ss_cs.customer_support_id = cs.id \nORDER BY s.name"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.8,
        "f1_score": 0.888888888888889,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 4
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_service_customer_support/scope_streaming_service_customer_support.sqlite",
      "db_dump": "CREATE TABLE customer_support (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    support_type TEXT,\n    description TEXT\n);\nCREATE TABLE streaming_service (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    price REAL\n);\nCREATE TABLE streaming_service_customer_support (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    streaming_service_id INTEGER,\n    customer_support_id INTEGER,\n    FOREIGN KEY(streaming_service_id) REFERENCES streaming_service(id),\n    FOREIGN KEY(customer_support_id) REFERENCES customer_support(id)\n);\n\nINSERT INTO \"customer_support\" (id,support_type,description) VALUES (1,'Live Chat','Real-time chat assistance'),(2,'Email Support','Response within 24 hours'),(3,'Phone Support','Call us at our toll-free number'),(4,'Forum Support','Ask questions and get help from community members'),(5,'FAQs','Find answers to common questions');\nINSERT INTO \"streaming_service\" (id,name,price) VALUES (1,'Netflix',9.99),(2,'Amazon Prime Video',8.99),(3,'Hulu',6.99),(4,'Disney+',7.99),(5,'HBO Max',14.99);\nINSERT INTO \"streaming_service_customer_support\" (id,streaming_service_id,customer_support_id) VALUES (1,1,1),(2,2,1),(3,3,1),(4,4,1),(5,5,1),(6,5,2);\n",
      "question": "What is the customer support type and description for each streaming service?",
      "gold_queries": [
        "SELECT customer_support.support_type, customer_support.description  from streaming_service_customer_support join customer_support on streaming_service_customer_support.customer_support_id = customer_support.id join streaming_service on streaming_service_customer_support.streaming_service_id = streaming_service.id   GROUP BY streaming_service_customer_support.customer_support_id HAVING COUNT(DISTINCT streaming_service_customer_support.streaming_service_id) = (SELECT COUNT(*) FROM  streaming_service)",
        "select streaming_service.name , customer_support.support_type , customer_support.description from streaming_service_customer_support join customer_support on streaming_service_customer_support.customer_support_id = customer_support.id join streaming_service on streaming_service_customer_support.streaming_service_id = streaming_service.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Identify the customer support offered by each streaming service, including the type and description.",
          "sql_queries": [
            "SELECT ss.name, cs.support_type, cs.description\nFROM streaming_service ss\nJOIN streaming_service_customer_support sscs ON ss.id = sscs.streaming_service_id\nJOIN customer_support cs ON sscs.customer_support_id = cs.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve a table or list showing each streaming service and its associated customer support type and description.",
          "sql_queries": [
            "SELECT \n    s.name AS streaming_service,\n    cs.support_type,\n    cs.description\nFROM \n    streaming_service s\nJOIN \n    streaming_service_customer_support sscs ON s.id = sscs.streaming_service_id\nJOIN \n    customer_support cs ON sscs.customer_support_id = cs.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List the customer support type and description provided for each streaming service.",
          "sql_queries": [
            "SELECT s.name, cs.support_type, cs.description\nFROM streaming_service s\nJOIN streaming_service_customer_support ss_cs ON s.id = ss_cs.streaming_service_id\nJOIN customer_support cs ON cs.id = ss_cs.customer_support_id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "For each streaming service, retrieve the corresponding customer support type and description.",
          "sql_queries": [
            "SELECT s.name, c.support_type, c.description\nFROM streaming_service s\nJOIN streaming_service_customer_support ss ON s.id = ss.streaming_service_id\nJOIN customer_support c ON ss.customer_support_id = c.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Which customer support types and descriptions are associated with each streaming service?",
          "sql_queries": [
            "SELECT ss.name, cs.support_type, cs.description\nFROM streaming_service ss\nJOIN streaming_service_customer_support sscs ON ss.id = sscs.streaming_service_id\nJOIN customer_support cs ON sscs.customer_support_id = cs.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Display a catalog of streaming services, each with their respective customer support details (type and description).",
          "sql_queries": [
            "SELECT ss.name AS streaming_service_name, cs.support_type, cs.description\nFROM streaming_service ss\nJOIN streaming_service_customer_support sscs ON ss.id = sscs.streaming_service_id\nJOIN customer_support cs ON sscs.customer_support_id = cs.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 1.0,
        "f1_score": 0.6666666666666666,
        "num_queries": 6,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 6
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_service_customer_support/scope_streaming_service_customer_support.sqlite",
      "db_dump": "CREATE TABLE customer_support (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    support_type TEXT,\n    description TEXT\n);\nCREATE TABLE streaming_service (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    price REAL\n);\nCREATE TABLE streaming_service_customer_support (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    streaming_service_id INTEGER,\n    customer_support_id INTEGER,\n    FOREIGN KEY(streaming_service_id) REFERENCES streaming_service(id),\n    FOREIGN KEY(customer_support_id) REFERENCES customer_support(id)\n);\n\nINSERT INTO \"customer_support\" (id,support_type,description) VALUES (1,'Live Chat','Real-time chat assistance'),(2,'Email Support','Response within 24 hours'),(3,'Phone Support','Call us at our toll-free number'),(4,'Forum Support','Ask questions and get help from community members'),(5,'FAQs','Find answers to common questions');\nINSERT INTO \"streaming_service\" (id,name,price) VALUES (1,'Netflix',9.99),(2,'Amazon Prime Video',8.99),(3,'Hulu',6.99),(4,'Disney+',7.99),(5,'HBO Max',14.99);\nINSERT INTO \"streaming_service_customer_support\" (id,streaming_service_id,customer_support_id) VALUES (1,1,1),(2,2,1),(3,3,1),(4,4,1),(5,5,1),(6,5,2);\n",
      "question": "What type of support do all streaming services provide equally?",
      "gold_queries": [
        "SELECT customer_support.support_type  from streaming_service_customer_support join customer_support on streaming_service_customer_support.customer_support_id = customer_support.id join streaming_service on streaming_service_customer_support.streaming_service_id = streaming_service.id   GROUP BY streaming_service_customer_support.customer_support_id HAVING COUNT(DISTINCT streaming_service_customer_support.streaming_service_id) = (SELECT COUNT(*) FROM  streaming_service)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Is there a support type universally offered by every streaming service?",
          "sql_queries": [
            "SELECT support_type \nFROM customer_support \nWHERE id IN (\n    SELECT customer_support_id \n    FROM streaming_service_customer_support \n    GROUP BY customer_support_id \n    HAVING COUNT(DISTINCT streaming_service_id) = (SELECT COUNT(*) FROM streaming_service)\n)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Which support type is offered by all streaming services?",
          "sql_queries": [
            "SELECT support_type FROM customer_support WHERE id IN (SELECT customer_support_id FROM streaming_service_customer_support GROUP BY customer_support_id HAVING COUNT(DISTINCT streaming_service_id) = (SELECT COUNT(*) FROM streaming_service))"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "What is the most common support type used across all streaming services?",
          "sql_queries": [
            "SELECT support_type FROM customer_support WHERE id = (SELECT customer_support_id FROM streaming_service_customer_support GROUP BY customer_support_id ORDER BY COUNT(*) DESC LIMIT 1)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "For which support type are all streaming services equally equipped?",
          "sql_queries": [
            "SELECT support_type FROM customer_support WHERE id IN (SELECT customer_support_id FROM streaming_service_customer_support GROUP BY customer_support_id HAVING COUNT(DISTINCT streaming_service_id) = (SELECT COUNT(*) FROM streaming_service))"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 4,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 4
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_service_customer_support/scope_streaming_service_customer_support.sqlite",
      "db_dump": "CREATE TABLE customer_support (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    support_type TEXT,\n    description TEXT\n);\nCREATE TABLE streaming_service (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    price REAL\n);\nCREATE TABLE streaming_service_customer_support (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    streaming_service_id INTEGER,\n    customer_support_id INTEGER,\n    FOREIGN KEY(streaming_service_id) REFERENCES streaming_service(id),\n    FOREIGN KEY(customer_support_id) REFERENCES customer_support(id)\n);\n\nINSERT INTO \"customer_support\" (id,support_type,description) VALUES (1,'Live Chat','Real-time chat assistance'),(2,'Email Support','Response within 24 hours'),(3,'Phone Support','Call us at our toll-free number'),(4,'Forum Support','Ask questions and get help from community members'),(5,'FAQs','Find answers to common questions');\nINSERT INTO \"streaming_service\" (id,name,price) VALUES (1,'Netflix',9.99),(2,'Amazon Prime Video',8.99),(3,'Hulu',6.99),(4,'Disney+',7.99),(5,'HBO Max',14.99);\nINSERT INTO \"streaming_service_customer_support\" (id,streaming_service_id,customer_support_id) VALUES (1,1,1),(2,2,1),(3,3,1),(4,4,1),(5,5,1),(6,5,2);\n",
      "question": "What is the customer support type and description corresponding to each streaming service respectively?",
      "gold_queries": [
        "select streaming_service.name , customer_support.support_type , customer_support.description from streaming_service_customer_support join customer_support on streaming_service_customer_support.customer_support_id = customer_support.id join streaming_service on streaming_service_customer_support.streaming_service_id = streaming_service.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For each streaming service, retrieve the customer support type and description used by that service.",
          "sql_queries": [
            "SELECT ss.name, cs.support_type, cs.description\nFROM streaming_service ss\nJOIN streaming_service_customer_support sscs ON ss.id = sscs.streaming_service_id\nJOIN customer_support cs ON cs.id = sscs.customer_support_id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Provide a mapping of each streaming service to its corresponding customer support type and description.",
          "sql_queries": [
            "SELECT s.name, cs.support_type, cs.description\nFROM streaming_service_customer_support scs\nJOIN streaming_service s ON scs.streaming_service_id = s.id\nJOIN customer_support cs ON scs.customer_support_id = cs.id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "What are the customer support details (type and description) associated with every streaming service instance?",
          "sql_queries": [
            "SELECT T3.name, T1.support_type, T1.description \nFROM customer_support AS T1 \nJOIN streaming_service_customer_support AS T2 ON T1.id = T2.customer_support_id \nJOIN streaming_service AS T3 ON T2.streaming_service_id = T3.id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "List the customer support type and description associated with each distinct streaming service.",
          "sql_queries": [
            "SELECT DISTINCT ss.name, cs.support_type, cs.description\nFROM streaming_service ss\nJOIN streaming_service_customer_support sscs ON ss.id = sscs.streaming_service_id\nJOIN customer_support cs ON sscs.customer_support_id = cs.id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "What customer support types are offered for each streaming service, along with their descriptions?",
          "sql_queries": [
            "SELECT ss.name, cs.support_type, cs.description \nFROM streaming_service ss \nJOIN streaming_service_customer_support sscs ON ss.id = sscs.streaming_service_id \nJOIN customer_support cs ON sscs.customer_support_id = cs.id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 5
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_service_customer_support/scope_streaming_service_customer_support.sqlite",
      "db_dump": "CREATE TABLE customer_support (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    support_type TEXT,\n    description TEXT\n);\nCREATE TABLE streaming_service (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    price REAL\n);\nCREATE TABLE streaming_service_customer_support (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    streaming_service_id INTEGER,\n    customer_support_id INTEGER,\n    FOREIGN KEY(streaming_service_id) REFERENCES streaming_service(id),\n    FOREIGN KEY(customer_support_id) REFERENCES customer_support(id)\n);\n\nINSERT INTO \"customer_support\" (id,support_type,description) VALUES (1,'Live Chat','Real-time chat assistance'),(2,'Email Support','Response within 24 hours'),(3,'Phone Support','Call us at our toll-free number'),(4,'Forum Support','Ask questions and get help from community members'),(5,'FAQs','Find answers to common questions');\nINSERT INTO \"streaming_service\" (id,name,price) VALUES (1,'Netflix',9.99),(2,'Amazon Prime Video',8.99),(3,'Hulu',6.99),(4,'Disney+',7.99),(5,'HBO Max',14.99);\nINSERT INTO \"streaming_service_customer_support\" (id,streaming_service_id,customer_support_id) VALUES (1,1,1),(2,2,1),(3,3,1),(4,4,1),(5,5,1),(6,5,2);\n",
      "question": "What customer support description is in common for all streaming services?",
      "gold_queries": [
        "SELECT customer_support.description  from streaming_service_customer_support join customer_support on streaming_service_customer_support.customer_support_id = customer_support.id join streaming_service on streaming_service_customer_support.streaming_service_id = streaming_service.id   GROUP BY streaming_service_customer_support.customer_support_id HAVING COUNT(DISTINCT streaming_service_customer_support.streaming_service_id) = (SELECT COUNT(*) FROM  streaming_service)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What is the description of customer support used by every streaming service?",
          "sql_queries": [
            "SELECT cs.description\nFROM customer_support cs\nWHERE cs.id IN (\n    SELECT sscs.customer_support_id\n    FROM streaming_service_customer_support sscs\n    GROUP BY sscs.customer_support_id\n    HAVING COUNT(DISTINCT sscs.streaming_service_id) = (SELECT COUNT(*) FROM streaming_service)\n)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Which customer support description is associated with all streaming services?",
          "sql_queries": [
            "SELECT description FROM customer_support WHERE id IN (SELECT customer_support_id FROM streaming_service_customer_support GROUP BY customer_support_id HAVING COUNT(DISTINCT streaming_service_id) = (SELECT COUNT(*) FROM streaming_service))"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Is there a single customer support description shared by every streaming service?",
          "sql_queries": [
            "SELECT description FROM customer_support WHERE id IN (SELECT customer_support_id FROM streaming_service_customer_support GROUP BY customer_support_id HAVING COUNT(DISTINCT streaming_service_id) = (SELECT COUNT(*) FROM streaming_service))"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 3,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_service_advertisement/scope_streaming_service_advertisement.sqlite",
      "db_dump": "CREATE TABLE Advertisement (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT,\n    duration REAL\n);\nCREATE TABLE Streaming_Service (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    platform TEXT\n);\nCREATE TABLE Streaming_Service_Advertisement (\n    streaming_service_id INTEGER,\n    advertisement_id INTEGER,\n    FOREIGN KEY(streaming_service_id) REFERENCES Streaming_Service(id),\n    FOREIGN KEY(advertisement_id) REFERENCES Advertisement(id)\n);\n\nINSERT INTO \"Advertisement\" (id,type,duration) VALUES (1,'Pre_roll_Ads',30.0),(2,'Mid_roll_Ads',60.0),(3,'Post_roll_Ads',120.0),(4,'Banner_Ads',10.0),(5,'Interstitial_Ads',90.0);\nINSERT INTO \"Streaming_Service\" (id,name,platform) VALUES (1,'Netflix','Web'),(2,'Hulu','Web'),(3,'Amazon Prime Video','Web'),(4,'Disney+','App'),(5,'HBO Max','App');\nINSERT INTO \"Streaming_Service_Advertisement\" (streaming_service_id,advertisement_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\n",
      "question": "For each streaming service, show the advertisement types and durations that they have.",
      "gold_queries": [
        "select streaming_service.name , advertisement.type , advertisement.duration from Streaming_Service_Advertisement join Advertisement on Streaming_Service_Advertisement.advertisement_id = Advertisement.id join Streaming_Service on Streaming_Service_Advertisement.streaming_service_id = Streaming_Service.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For each streaming service, list the distinct advertisement types used.",
          "sql_queries": [
            "SELECT DISTINCT ss.name, a.type\nFROM Streaming_Service ss\nJOIN Streaming_Service_Advertisement ssa ON ss.id = ssa.streaming_service_id\nJOIN Advertisement a ON ssa.advertisement_id = a.id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "For each streaming service, display the duration of each advertisement type used.",
          "sql_queries": [
            "SELECT ss.name, a.type, a.duration\nFROM Streaming_Service ss\nJOIN Streaming_Service_Advertisement ssa ON ss.id = ssa.streaming_service_id\nJOIN Advertisement a ON ssa.advertisement_id = a.id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "For each streaming service, present a summary of all advertisement types and their associated durations.",
          "sql_queries": [
            "SELECT ss.name AS Streaming_Service, a.type AS Advertisement_Type, a.duration AS Duration\nFROM Streaming_Service ss\nJOIN Streaming_Service_Advertisement ssa ON ss.id = ssa.streaming_service_id\nJOIN Advertisement a ON ssa.advertisement_id = a.id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "For each streaming service, retrieve a catalog of all advertisements they utilize, including type and duration.",
          "sql_queries": [
            "SELECT SS.name, A.type, A.duration\nFROM Streaming_Service SS\nJOIN Streaming_Service_Advertisement SSA ON SS.id = SSA.streaming_service_id\nJOIN Advertisement A ON SSA.advertisement_id = A.id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "For each streaming service, list the advertisement types with their respective durations.",
          "sql_queries": [
            "SELECT SS.name, Ad.type, Ad.duration\nFROM Streaming_Service SS\nJOIN Streaming_Service_Advertisement SSA ON SS.id = SSA.streaming_service_id\nJOIN Advertisement Ad ON SSA.advertisement_id = Ad.id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.8,
        "f1_score": 0.888888888888889,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 4
    },
    {
      "db_file": "data/scope/Traffic/scope_education_program_target_audiences/scope_education_program_target_audiences.sqlite",
      "db_dump": "CREATE TABLE Education_Program (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    description TEXT\n);\nCREATE TABLE Education_Program_Target_Audiences (\n    education_program_id INTEGER,\n    target_audience_id INTEGER,\n    FOREIGN KEY (education_program_id) REFERENCES Education_Program(id),\n    FOREIGN KEY (target_audience_id) REFERENCES Target_Audiences(id),\n    PRIMARY KEY (education_program_id, target_audience_id)\n);\nCREATE TABLE Target_Audiences (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    audience_name TEXT\n);\n\nINSERT INTO \"Education_Program\" (id,name,description) VALUES (1,'Driving Basics','This program covers the basic driving rules'),(2,'Advanced Driving Techniques','Learn advanced techniques such as defensive driving'),(3,'Traffic Laws & Regulations','Understand traffic laws and regulations'),(4,'Accident Prevention','Learn how to prevent accidents on road'),(5,'Emergency Handling','Handling emergencies while driving');\nINSERT INTO \"Education_Program_Target_Audiences\" (education_program_id,target_audience_id) VALUES (1,2),(2,2),(3,2),(4,2),(1,1),(5,2);\nINSERT INTO \"Target_Audiences\" (id,audience_name) VALUES (1,'Teen Driver Education'),(2,'Adult Driver Refresher Course'),(3,'Defensive Driving Training'),(4,'Road Safety Awareness Program'),(5,'Parent-Child Driving Course');\n",
      "question": "For each education program, list the audience being targeted.",
      "gold_queries": [
        "select education_program.name , target_audiences.audience_name from Education_Program_Target_Audiences join Target_Audiences on Education_Program_Target_Audiences.target_audience_id = Target_Audiences.id join Education_Program on Education_Program_Target_Audiences.education_program_id = Education_Program.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Identify the target audience associated with each unique description of an education program.",
          "sql_queries": [
            "SELECT T1.description, T3.audience_name\nFROM Education_Program AS T1\nJOIN Education_Program_Target_Audiences AS T2 ON T1.id = T2.education_program_id\nJOIN Target_Audiences AS T3 ON T2.target_audience_id = T3.id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Display a matrix where rows represent education programs and columns represent target audiences, indicating which programs target each audience.",
          "sql_queries": [
            "SELECT \n    EP.name AS \"Education Program\",\n    CASE WHEN TAT.target_audience_id = 1 THEN 'X' ELSE '' END AS \"Teen Driver Education\",\n    CASE WHEN TAT.target_audience_id = 2 THEN 'X' ELSE '' END AS \"Adult Driver Refresher Course\",\n    CASE WHEN TAT.target_audience_id = 3 THEN 'X' ELSE '' END AS \"Defensive Driving Training\",\n    CASE WHEN TAT.target_audience_id = 4 THEN 'X' ELSE '' END AS \"Road Safety Awareness Program\",\n    CASE WHEN TAT.target_audience_id = 5 THEN 'X' ELSE '' END AS \"Parent-Child Driving Course\"\nFROM \n    Education_Program EP\nLEFT JOIN \n    Education_Program_Target_Audiences TAT ON EP.id = TAT.education_program_id\nGROUP BY \n    EP.name\nORDER BY \n    EP.id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "For each education program id, return the id and name of the target audience.",
          "sql_queries": [
            "SELECT ept.education_program_id, ta.audience_name\nFROM Education_Program_Target_Audiences ept\nJOIN Target_Audiences ta ON ept.target_audience_id = ta.id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List each education program name and the audience it is intended for.",
          "sql_queries": [
            "SELECT e.name, t.audience_name \nFROM Education_Program e \nJOIN Education_Program_Target_Audiences epa ON e.id = epa.education_program_id \nJOIN Target_Audiences t ON epa.target_audience_id = t.id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Retrieve a list of Education_Program names and their corresponding Target_Audiences names.",
          "sql_queries": [
            "SELECT EP.name, TA.audience_name\nFROM Education_Program EP\nJOIN Education_Program_Target_Audiences EPTA ON EP.id = EPTA.education_program_id\nJOIN Target_Audiences TA ON EPTA.target_audience_id = TA.id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.4,
        "f1_score": 0.5714285714285715,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/scope/Traffic/scope_education_program_target_audiences/scope_education_program_target_audiences.sqlite",
      "db_dump": "CREATE TABLE Education_Program (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    description TEXT\n);\nCREATE TABLE Education_Program_Target_Audiences (\n    education_program_id INTEGER,\n    target_audience_id INTEGER,\n    FOREIGN KEY (education_program_id) REFERENCES Education_Program(id),\n    FOREIGN KEY (target_audience_id) REFERENCES Target_Audiences(id),\n    PRIMARY KEY (education_program_id, target_audience_id)\n);\nCREATE TABLE Target_Audiences (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    audience_name TEXT\n);\n\nINSERT INTO \"Education_Program\" (id,name,description) VALUES (1,'Driving Basics','This program covers the basic driving rules'),(2,'Advanced Driving Techniques','Learn advanced techniques such as defensive driving'),(3,'Traffic Laws & Regulations','Understand traffic laws and regulations'),(4,'Accident Prevention','Learn how to prevent accidents on road'),(5,'Emergency Handling','Handling emergencies while driving');\nINSERT INTO \"Education_Program_Target_Audiences\" (education_program_id,target_audience_id) VALUES (1,2),(2,2),(3,2),(4,2),(1,1),(5,2);\nINSERT INTO \"Target_Audiences\" (id,audience_name) VALUES (1,'Teen Driver Education'),(2,'Adult Driver Refresher Course'),(3,'Defensive Driving Training'),(4,'Road Safety Awareness Program'),(5,'Parent-Child Driving Course');\n",
      "question": "Show me the audience each education program is targeting.",
      "gold_queries": [
        "SELECT Target_Audiences.audience_name  from Education_Program_Target_Audiences join Target_Audiences on Education_Program_Target_Audiences.target_audience_id = Target_Audiences.id join Education_Program on Education_Program_Target_Audiences.education_program_id = Education_Program.id   GROUP BY Education_Program_Target_Audiences.target_audience_id HAVING COUNT(DISTINCT Education_Program_Target_Audiences.education_program_id) = (SELECT COUNT(*) FROM  Education_Program)",
        "select education_program.name , target_audiences.audience_name from Education_Program_Target_Audiences join Target_Audiences on Education_Program_Target_Audiences.target_audience_id = Target_Audiences.id join Education_Program on Education_Program_Target_Audiences.education_program_id = Education_Program.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Retrieve the audience_name from the Target_Audiences table linked to each education program through the Education_Program_Target_Audiences table.",
          "sql_queries": [
            "SELECT T2.audience_name \nFROM Education_Program_Target_Audiences AS EP_TA \nJOIN Target_Audiences AS T2 ON EP_TA.target_audience_id = T2.id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Generate a report detailing the target audiences for each education program.",
          "sql_queries": [
            "SELECT ep.name AS Education_Program, ta.audience_name AS Target_Audience\nFROM Education_Program ep\nJOIN Education_Program_Target_Audiences epta ON ep.id = epta.education_program_id\nJOIN Target_Audiences ta ON epta.target_audience_id = ta.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "For each education program, retrieve the name of the target audience(s).",
          "sql_queries": [
            "SELECT EP.name, TA.audience_name\nFROM Education_Program EP\nJOIN Education_Program_Target_Audiences EPTA ON EP.id = EPTA.education_program_id\nJOIN Target_Audiences TA ON EPTA.target_audience_id = TA.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Display a table showing the program names and their respective target audience(s).",
          "sql_queries": [
            "SELECT T1.name, T3.audience_name\nFROM Education_Program AS T1\nJOIN Education_Program_Target_Audiences AS T2 ON T1.id = T2.education_program_id\nJOIN Target_Audiences AS T3 ON T2.target_audience_id = T3.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all education programs and their corresponding target audience(s).",
          "sql_queries": [
            "SELECT E.name AS Education_Program, T.audience_name AS Target_Audience\nFROM Education_Program AS E\nJOIN Education_Program_Target_Audiences AS EP_TA ON E.id = EP_TA.education_program_id\nJOIN Target_Audiences AS T ON EP_TA.target_audience_id = T.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Provide a list of education program names paired with their assigned target audiences.",
          "sql_queries": [
            "SELECT EP.name, TA.audience_name\nFROM Education_Program EP\nJOIN Education_Program_Target_Audiences EPTA ON EP.id = EPTA.education_program_id\nJOIN Target_Audiences TA ON EPTA.target_audience_id = TA.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.8,
        "f1_score": 0.6153846153846154,
        "num_queries": 6,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 5
    },
    {
      "db_file": "data/scope/Traffic/scope_education_program_target_audiences/scope_education_program_target_audiences.sqlite",
      "db_dump": "CREATE TABLE Education_Program (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    description TEXT\n);\nCREATE TABLE Education_Program_Target_Audiences (\n    education_program_id INTEGER,\n    target_audience_id INTEGER,\n    FOREIGN KEY (education_program_id) REFERENCES Education_Program(id),\n    FOREIGN KEY (target_audience_id) REFERENCES Target_Audiences(id),\n    PRIMARY KEY (education_program_id, target_audience_id)\n);\nCREATE TABLE Target_Audiences (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    audience_name TEXT\n);\n\nINSERT INTO \"Education_Program\" (id,name,description) VALUES (1,'Driving Basics','This program covers the basic driving rules'),(2,'Advanced Driving Techniques','Learn advanced techniques such as defensive driving'),(3,'Traffic Laws & Regulations','Understand traffic laws and regulations'),(4,'Accident Prevention','Learn how to prevent accidents on road'),(5,'Emergency Handling','Handling emergencies while driving');\nINSERT INTO \"Education_Program_Target_Audiences\" (education_program_id,target_audience_id) VALUES (1,2),(2,2),(3,2),(4,2),(1,1),(5,2);\nINSERT INTO \"Target_Audiences\" (id,audience_name) VALUES (1,'Teen Driver Education'),(2,'Adult Driver Refresher Course'),(3,'Defensive Driving Training'),(4,'Road Safety Awareness Program'),(5,'Parent-Child Driving Course');\n",
      "question": "What audiences are common to all education programs?",
      "gold_queries": [
        "SELECT Target_Audiences.audience_name  from Education_Program_Target_Audiences join Target_Audiences on Education_Program_Target_Audiences.target_audience_id = Target_Audiences.id join Education_Program on Education_Program_Target_Audiences.education_program_id = Education_Program.id   GROUP BY Education_Program_Target_Audiences.target_audience_id HAVING COUNT(DISTINCT Education_Program_Target_Audiences.education_program_id) = (SELECT COUNT(*) FROM  Education_Program)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Determine the intersection of target audiences across all education programs.",
          "sql_queries": [
            "SELECT ta.audience_name\nFROM Target_Audiences ta\nJOIN Education_Program_Target_Audiences epta ON ta.id = epta.target_audience_id\nGROUP BY ta.id\nHAVING COUNT(DISTINCT epta.education_program_id) = (SELECT COUNT(*) FROM Education_Program)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Find the target audiences enrolled in all the education programs listed.",
          "sql_queries": [
            "SELECT T1.audience_name\nFROM Target_Audiences AS T1\nJOIN Education_Program_Target_Audiences AS T2 ON T1.id = T2.target_audience_id\nGROUP BY T1.id\nHAVING COUNT(DISTINCT T2.education_program_id) = (SELECT COUNT(*) FROM Education_Program)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Identify the target audiences that participate in every education program.",
          "sql_queries": [
            "SELECT T2.audience_name \nFROM Education_Program_Target_Audiences AS T1 \nJOIN Target_Audiences AS T2 \nON T1.target_audience_id = T2.id \nGROUP BY T2.audience_name \nHAVING COUNT(DISTINCT T1.education_program_id) = (SELECT COUNT(*) FROM Education_Program)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Which target audiences are associated with all education programs?",
          "sql_queries": [
            "SELECT TA.audience_name\nFROM Target_Audiences TA\nWHERE TA.id IN (\n    SELECT EPTA.target_audience_id\n    FROM Education_Program_Target_Audiences EPTA\n    GROUP BY EPTA.target_audience_id\n    HAVING COUNT(DISTINCT EPTA.education_program_id) = (SELECT COUNT(*) FROM Education_Program)\n)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 4
    },
    {
      "db_file": "data/scope/Traffic/scope_traffic_engineers_tools/scope_traffic_engineers_tools.sqlite",
      "db_dump": "CREATE TABLE `Tools`(\n    tool_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    tool_name TEXT,\n    type TEXT);\nCREATE TABLE `Traffic_Engineers`(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    years_of_experience INT);\nCREATE TABLE `Traffic_Engineers_Tools`(\n    engineer_id INTEGER,\n    tool_id INTEGER,\n    FOREIGN KEY (engineer_id) REFERENCES `Traffic_Engineers`(id),\n    FOREIGN KEY (tool_id) REFERENCES `Tools`(tool_id));\n\nINSERT INTO \"Tools\" (tool_id,tool_name,type) VALUES (1,'Software_Modeling','software'),(2,'Road_Simulation','hardware'),(3,'Vehicle_Tracking','hardware'),(4,'Accident_Analysis','software'),(5,'Signal_Optimization','software');\nINSERT INTO \"Traffic_Engineers\" (id,name,years_of_experience) VALUES (1,'John',20),(2,'Anna',30),(3,'James',25),(4,'Emma',28),(5,'Michael',27);\nINSERT INTO \"Traffic_Engineers_Tools\" (engineer_id,tool_id) VALUES (1,1),(1,2),(2,1),(2,3),(3,1),(3,2),(4,2),(4,5),(5,3),(5,4),(4,1),(5,1);\n",
      "question": "Which tools do all traffic engineers equally use?",
      "gold_queries": [
        "SELECT Tools.tool_name  from Traffic_Engineers_Tools join Tools on Traffic_Engineers_Tools.tool_id = Tools.tool_id join Traffic_Engineers on Traffic_Engineers_Tools.engineer_id = Traffic_Engineers.id   GROUP BY Traffic_Engineers_Tools.tool_id HAVING COUNT(DISTINCT Traffic_Engineers_Tools.engineer_id) = (SELECT COUNT(*) FROM  Traffic_Engineers)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Which tools have the same number of endorsements from all traffic engineers?",
          "sql_queries": [
            "SELECT T.tool_name\nFROM Tools T\nJOIN Traffic_Engineers_Tools TET ON T.tool_id = TET.tool_id\nGROUP BY T.tool_id, T.tool_name\nHAVING COUNT(DISTINCT TET.engineer_id) = (SELECT COUNT(*) FROM Traffic_Engineers)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Which tools are used identically by 100% of traffic engineers?",
          "sql_queries": [
            "SELECT T.tool_name \nFROM Tools T \nWHERE T.tool_id IN (\n    SELECT TT.tool_id \n    FROM Traffic_Engineers_Tools TT \n    GROUP BY TT.tool_id \n    HAVING COUNT(DISTINCT TT.engineer_id) = (SELECT COUNT(*) FROM Traffic_Engineers)\n)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Are there any tools used by all traffic engineers exclusively?",
          "sql_queries": [
            "SELECT T.tool_name \nFROM Tools T \nJOIN Traffic_Engineers_Tools TET ON T.tool_id = TET.tool_id \nGROUP BY T.tool_id \nHAVING COUNT(DISTINCT TET.engineer_id) = (SELECT COUNT(*) FROM Traffic_Engineers)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Which tools are used by all traffic engineers?",
          "sql_queries": [
            "SELECT tool_name \nFROM Tools \nWHERE tool_id IN (\n    SELECT tool_id \n    FROM Traffic_Engineers_Tools \n    GROUP BY tool_id \n    HAVING COUNT(DISTINCT engineer_id) = (SELECT COUNT(*) FROM Traffic_Engineers)\n)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 4
    },
    {
      "db_file": "data/scope/Traffic/scope_traffic_engineers_tools/scope_traffic_engineers_tools.sqlite",
      "db_dump": "CREATE TABLE `Tools`(\n    tool_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    tool_name TEXT,\n    type TEXT);\nCREATE TABLE `Traffic_Engineers`(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    years_of_experience INT);\nCREATE TABLE `Traffic_Engineers_Tools`(\n    engineer_id INTEGER,\n    tool_id INTEGER,\n    FOREIGN KEY (engineer_id) REFERENCES `Traffic_Engineers`(id),\n    FOREIGN KEY (tool_id) REFERENCES `Tools`(tool_id));\n\nINSERT INTO \"Tools\" (tool_id,tool_name,type) VALUES (1,'Software_Modeling','software'),(2,'Road_Simulation','hardware'),(3,'Vehicle_Tracking','hardware'),(4,'Accident_Analysis','software'),(5,'Signal_Optimization','software');\nINSERT INTO \"Traffic_Engineers\" (id,name,years_of_experience) VALUES (1,'John',20),(2,'Anna',30),(3,'James',25),(4,'Emma',28),(5,'Michael',27);\nINSERT INTO \"Traffic_Engineers_Tools\" (engineer_id,tool_id) VALUES (1,1),(1,2),(2,1),(2,3),(3,1),(3,2),(4,2),(4,5),(5,3),(5,4),(4,1),(5,1);\n",
      "question": "List the type of tools we have for each traffic engineer.",
      "gold_queries": [
        "SELECT Tools.type  from Traffic_Engineers_Tools join Tools on Traffic_Engineers_Tools.tool_id = Tools.tool_id join Traffic_Engineers on Traffic_Engineers_Tools.engineer_id = Traffic_Engineers.id   GROUP BY Traffic_Engineers_Tools.tool_id HAVING COUNT(DISTINCT Traffic_Engineers_Tools.engineer_id) = (SELECT COUNT(*) FROM  Traffic_Engineers)",
        "select traffic_engineers.name , tools.type from Traffic_Engineers_Tools join Tools on Traffic_Engineers_Tools.tool_id = Tools.tool_id join Traffic_Engineers on Traffic_Engineers_Tools.engineer_id = Traffic_Engineers.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Display a table with columns for engineer name and a list of their tool types.",
          "sql_queries": [
            "SELECT T2.name, GROUP_CONCAT(T3.type, ', ') AS tool_types\nFROM Traffic_Engineers_Tools AS T1\nJOIN Traffic_Engineers AS T2 ON T1.engineer_id = T2.id\nJOIN Tools AS T3 ON T1.tool_id = T3.tool_id\nGROUP BY T2.name"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "For each traffic engineer, provide a comma-separated list of tool types.",
          "sql_queries": [
            "SELECT T1.name, GROUP_CONCAT(T3.type, ',') as tool_types\nFROM Traffic_Engineers AS T1\nJOIN Traffic_Engineers_Tools AS T2 ON T1.id = T2.engineer_id\nJOIN Tools AS T3 ON T2.tool_id = T3.tool_id\nGROUP BY T1.name"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List the distinct tool types used by each traffic engineer.",
          "sql_queries": [
            "SELECT T2.id, T2.name, DISTINCT T1.type\nFROM Tools AS T1\nJOIN Traffic_Engineers_Tools AS T2T ON T1.tool_id = T2T.tool_id\nJOIN Traffic_Engineers AS T2 ON T2T.engineer_id = T2.id\nGROUP BY T2.id, T2.name, T1.type"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT T2.id, T2.name, DISTINCT T1.type\nFROM Tools AS T1\nJOIN Traffic_Engineers_Tools AS T2T ON T1.tool_id = T2T.tool_id\nJOIN Traffic_Engineers AS T2 ON T2T.engineer_id = T2.id\nGROUP BY T2.id, T2.name, T1.type",
                "original_exception": "near \"DISTINCT\": syntax error"
              }
            ],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve the type of each tool used by each traffic engineer.",
          "sql_queries": [
            "SELECT Traffic_Engineers.name, Tools.tool_name, Tools.type\nFROM Traffic_Engineers\nJOIN Traffic_Engineers_Tools ON Traffic_Engineers.id = Traffic_Engineers_Tools.engineer_id\nJOIN Tools ON Traffic_Engineers_Tools.tool_id = Tools.tool_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Show the tool types associated with each traffic engineer, grouped by engineer.",
          "sql_queries": [
            "SELECT Traffic_Engineers.name, GROUP_CONCAT(DISTINCT Tools.type) as tool_types\nFROM Traffic_Engineers\nJOIN Traffic_Engineers_Tools ON Traffic_Engineers.id = Traffic_Engineers_Tools.engineer_id\nJOIN Tools ON Traffic_Engineers_Tools.tool_id = Tools.tool_id\nGROUP BY Traffic_Engineers.name"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [
          {
            "query": "SELECT T2.id, T2.name, DISTINCT T1.type\nFROM Tools AS T1\nJOIN Traffic_Engineers_Tools AS T2T ON T1.tool_id = T2T.tool_id\nJOIN Traffic_Engineers AS T2 ON T2T.engineer_id = T2.id\nGROUP BY T2.id, T2.name, T1.type",
            "original_exception": "near \"DISTINCT\": syntax error"
          }
        ],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Traffic/scope_traffic_engineers_tools/scope_traffic_engineers_tools.sqlite",
      "db_dump": "CREATE TABLE `Tools`(\n    tool_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    tool_name TEXT,\n    type TEXT);\nCREATE TABLE `Traffic_Engineers`(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    years_of_experience INT);\nCREATE TABLE `Traffic_Engineers_Tools`(\n    engineer_id INTEGER,\n    tool_id INTEGER,\n    FOREIGN KEY (engineer_id) REFERENCES `Traffic_Engineers`(id),\n    FOREIGN KEY (tool_id) REFERENCES `Tools`(tool_id));\n\nINSERT INTO \"Tools\" (tool_id,tool_name,type) VALUES (1,'Software_Modeling','software'),(2,'Road_Simulation','hardware'),(3,'Vehicle_Tracking','hardware'),(4,'Accident_Analysis','software'),(5,'Signal_Optimization','software');\nINSERT INTO \"Traffic_Engineers\" (id,name,years_of_experience) VALUES (1,'John',20),(2,'Anna',30),(3,'James',25),(4,'Emma',28),(5,'Michael',27);\nINSERT INTO \"Traffic_Engineers_Tools\" (engineer_id,tool_id) VALUES (1,1),(1,2),(2,1),(2,3),(3,1),(3,2),(4,2),(4,5),(5,3),(5,4),(4,1),(5,1);\n",
      "question": "Show me the traffic engineers and their tool types.",
      "gold_queries": [
        "select traffic_engineers.name , tools.type from Traffic_Engineers_Tools join Tools on Traffic_Engineers_Tools.tool_id = Tools.tool_id join Traffic_Engineers on Traffic_Engineers_Tools.engineer_id = Traffic_Engineers.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Generate a hierarchical structure showing traffic engineers as nodes and tool types as branches.",
          "sql_queries": [
            "SELECT \n    TE.name AS Engineer,\n    T.type AS Tool_Type\nFROM \n    Traffic_Engineers_Tools TET\nJOIN \n    Traffic_Engineers TE ON TET.engineer_id = TE.id\nJOIN \n    Tools T ON TET.tool_id = T.tool_id\nORDER BY \n    TE.name, T.type"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Return a table summarizing traffic engineers and their preferred tool types based on usage frequency.",
          "sql_queries": [
            "SELECT T1.name, T2.type\nFROM Traffic_Engineers_Tools AS T3\nJOIN Traffic_Engineers AS T1 ON T3.engineer_id = T1.id\nJOIN Tools AS T2 ON T3.tool_id = T2.tool_id\nWHERE (T1.id, T2.type) IN (\n    SELECT engineer_id, tool_type\n    FROM (\n        SELECT engineer_id, tool_type, COUNT(*) as cnt\n        FROM (\n            SELECT engineer_id, type as tool_type\n            FROM Traffic_Engineers_Tools\n            JOIN Tools ON Traffic_Engineers_Tools.tool_id = Tools.tool_id\n        )\n        GROUP BY engineer_id, tool_type\n    )\n    GROUP BY engineer_id\n    ORDER BY cnt DESC\n)"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Show the names of all traffic engineers paired with a list of tool types they have access to.",
          "sql_queries": [
            "SELECT TE.name, GROUP_CONCAT(DISTINCT T.type) AS tool_types\nFROM Traffic_Engineers AS TE\nJOIN Traffic_Engineers_Tools AS TET ON TE.id = TET.engineer_id\nJOIN Tools AS T ON TET.tool_id = T.tool_id\nGROUP BY TE.name"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List each tool type and the traffic engineers who use that tool type.",
          "sql_queries": [
            "SELECT T.type, TE.name\nFROM Traffic_Engineers_Tools AS TET\nJOIN Tools AS T ON TET.tool_id = T.tool_id\nJOIN Traffic_Engineers AS TE ON TET.engineer_id = TE.id\nORDER BY T.type, TE.name"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Show the names of traffic engineers and the types of tools they use.",
          "sql_queries": [
            "SELECT T2.name, T3.type\nFROM Traffic_Engineers_Tools AS T1\nJOIN Traffic_Engineers AS T2 ON T1.engineer_id = T2.id\nJOIN Tools AS T3 ON T1.tool_id = T3.tool_id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.6,
        "f1_score": 0.7499999999999999,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/scope/Traffic/scope_traffic_engineers_tools/scope_traffic_engineers_tools.sqlite",
      "db_dump": "CREATE TABLE `Tools`(\n    tool_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    tool_name TEXT,\n    type TEXT);\nCREATE TABLE `Traffic_Engineers`(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    years_of_experience INT);\nCREATE TABLE `Traffic_Engineers_Tools`(\n    engineer_id INTEGER,\n    tool_id INTEGER,\n    FOREIGN KEY (engineer_id) REFERENCES `Traffic_Engineers`(id),\n    FOREIGN KEY (tool_id) REFERENCES `Tools`(tool_id));\n\nINSERT INTO \"Tools\" (tool_id,tool_name,type) VALUES (1,'Software_Modeling','software'),(2,'Road_Simulation','hardware'),(3,'Vehicle_Tracking','hardware'),(4,'Accident_Analysis','software'),(5,'Signal_Optimization','software');\nINSERT INTO \"Traffic_Engineers\" (id,name,years_of_experience) VALUES (1,'John',20),(2,'Anna',30),(3,'James',25),(4,'Emma',28),(5,'Michael',27);\nINSERT INTO \"Traffic_Engineers_Tools\" (engineer_id,tool_id) VALUES (1,1),(1,2),(2,1),(2,3),(3,1),(3,2),(4,2),(4,5),(5,3),(5,4),(4,1),(5,1);\n",
      "question": "Give me the tools that all traffic engineers use.",
      "gold_queries": [
        "SELECT Tools.tool_name  from Traffic_Engineers_Tools join Tools on Traffic_Engineers_Tools.tool_id = Tools.tool_id join Traffic_Engineers on Traffic_Engineers_Tools.engineer_id = Traffic_Engineers.id   GROUP BY Traffic_Engineers_Tools.tool_id HAVING COUNT(DISTINCT Traffic_Engineers_Tools.engineer_id) = (SELECT COUNT(*) FROM  Traffic_Engineers)",
        "select traffic_engineers.name , tools.tool_name from Traffic_Engineers_Tools join Tools on Traffic_Engineers_Tools.tool_id = Tools.tool_id join Traffic_Engineers on Traffic_Engineers_Tools.engineer_id = Traffic_Engineers.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Tools used by at least one engineer in the database.",
          "sql_queries": [
            "SELECT DISTINCT tool_name FROM Tools JOIN Traffic_Engineers_Tools ON Tools.tool_id = Traffic_Engineers_Tools.tool_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Tools with NULL in the `Traffic_Engineers_Tools` table mapped against all engineers.",
          "sql_queries": [
            "SELECT e.id, e.name, NULL AS tool_id, NULL AS tool_name\nFROM Traffic_Engineers e\nWHERE e.id NOT IN (SELECT engineer_id FROM Traffic_Engineers_Tools)"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "The intersection of tool sets used by each traffic engineer in the database.",
          "sql_queries": [
            "SELECT tool_id\nFROM Traffic_Engineers_Tools\nGROUP BY tool_id\nHAVING COUNT(DISTINCT engineer_id) = (SELECT COUNT(*) FROM Traffic_Engineers)"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Traffic/scope_traffic_engineers_tools/scope_traffic_engineers_tools.sqlite",
      "db_dump": "CREATE TABLE `Tools`(\n    tool_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    tool_name TEXT,\n    type TEXT);\nCREATE TABLE `Traffic_Engineers`(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    years_of_experience INT);\nCREATE TABLE `Traffic_Engineers_Tools`(\n    engineer_id INTEGER,\n    tool_id INTEGER,\n    FOREIGN KEY (engineer_id) REFERENCES `Traffic_Engineers`(id),\n    FOREIGN KEY (tool_id) REFERENCES `Tools`(tool_id));\n\nINSERT INTO \"Tools\" (tool_id,tool_name,type) VALUES (1,'Software_Modeling','software'),(2,'Road_Simulation','hardware'),(3,'Vehicle_Tracking','hardware'),(4,'Accident_Analysis','software'),(5,'Signal_Optimization','software');\nINSERT INTO \"Traffic_Engineers\" (id,name,years_of_experience) VALUES (1,'John',20),(2,'Anna',30),(3,'James',25),(4,'Emma',28),(5,'Michael',27);\nINSERT INTO \"Traffic_Engineers_Tools\" (engineer_id,tool_id) VALUES (1,1),(1,2),(2,1),(2,3),(3,1),(3,2),(4,2),(4,5),(5,3),(5,4),(4,1),(5,1);\n",
      "question": "For each traffic engineer, show the tools that they use.",
      "gold_queries": [
        "select traffic_engineers.name , tools.tool_name from Traffic_Engineers_Tools join Tools on Traffic_Engineers_Tools.tool_id = Tools.tool_id join Traffic_Engineers on Traffic_Engineers_Tools.engineer_id = Traffic_Engineers.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Show a count of the number of tools used by each traffic engineer.",
          "sql_queries": [
            "SELECT engineer_id, COUNT(tool_id) AS tool_count FROM Traffic_Engineers_Tools GROUP BY engineer_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve a list of all tools used by each traffic engineer, ordered by engineer name.",
          "sql_queries": [
            "SELECT T2.name, T3.tool_name\nFROM Traffic_Engineers_Tools AS T1\nJOIN Traffic_Engineers AS T2 ON T1.engineer_id = T2.id\nJOIN Tools AS T3 ON T1.tool_id = T3.tool_id\nORDER BY T2.name"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Display a table with columns for traffic engineer name and tool name for each tool-engineer pair.",
          "sql_queries": [
            "SELECT T2.name, T3.tool_name FROM Traffic_Engineers_Tools AS T1 JOIN Traffic_Engineers AS T2 ON T1.engineer_id = T2.id JOIN Tools AS T3 ON T1.tool_id = T3.tool_id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "For each traffic engineer, list the distinct tool names they use.",
          "sql_queries": [
            "SELECT T1.name, DISTINCT T3.tool_name\nFROM Traffic_Engineers AS T1\nJOIN Traffic_Engineers_Tools AS T2 ON T1.id = T2.engineer_id\nJOIN Tools AS T3 ON T2.tool_id = T3.tool_id\nGROUP BY T1.name, T3.tool_name"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT T1.name, DISTINCT T3.tool_name\nFROM Traffic_Engineers AS T1\nJOIN Traffic_Engineers_Tools AS T2 ON T1.id = T2.engineer_id\nJOIN Tools AS T3 ON T2.tool_id = T3.tool_id\nGROUP BY T1.name, T3.tool_name",
                "original_exception": "near \"DISTINCT\": syntax error"
              }
            ],
            "all_found": false
          }
        },
        {
          "interpretation": "List each traffic engineer and the ids of the tools they use.",
          "sql_queries": [
            "SELECT T2.name, T1.tool_id FROM Traffic_Engineers_Tools AS T1 JOIN Traffic_Engineers AS T2 ON T1.engineer_id = T2.id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.4,
        "f1_score": 0.5714285714285715,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [
          {
            "query": "SELECT T1.name, DISTINCT T3.tool_name\nFROM Traffic_Engineers AS T1\nJOIN Traffic_Engineers_Tools AS T2 ON T1.id = T2.engineer_id\nJOIN Tools AS T3 ON T2.tool_id = T3.tool_id\nGROUP BY T1.name, T3.tool_name",
            "original_exception": "near \"DISTINCT\": syntax error"
          }
        ],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/scope/Traffic/scope_traffic_engineers_tools/scope_traffic_engineers_tools.sqlite",
      "db_dump": "CREATE TABLE `Tools`(\n    tool_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    tool_name TEXT,\n    type TEXT);\nCREATE TABLE `Traffic_Engineers`(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    years_of_experience INT);\nCREATE TABLE `Traffic_Engineers_Tools`(\n    engineer_id INTEGER,\n    tool_id INTEGER,\n    FOREIGN KEY (engineer_id) REFERENCES `Traffic_Engineers`(id),\n    FOREIGN KEY (tool_id) REFERENCES `Tools`(tool_id));\n\nINSERT INTO \"Tools\" (tool_id,tool_name,type) VALUES (1,'Software_Modeling','software'),(2,'Road_Simulation','hardware'),(3,'Vehicle_Tracking','hardware'),(4,'Accident_Analysis','software'),(5,'Signal_Optimization','software');\nINSERT INTO \"Traffic_Engineers\" (id,name,years_of_experience) VALUES (1,'John',20),(2,'Anna',30),(3,'James',25),(4,'Emma',28),(5,'Michael',27);\nINSERT INTO \"Traffic_Engineers_Tools\" (engineer_id,tool_id) VALUES (1,1),(1,2),(2,1),(2,3),(3,1),(3,2),(4,2),(4,5),(5,3),(5,4),(4,1),(5,1);\n",
      "question": "Give me the tool types and names that are common to all engineers",
      "gold_queries": [
        "SELECT Tools.tool_name, Tools.type  from Traffic_Engineers_Tools join Tools on Traffic_Engineers_Tools.tool_id = Tools.tool_id join Traffic_Engineers on Traffic_Engineers_Tools.engineer_id = Traffic_Engineers.id   GROUP BY Traffic_Engineers_Tools.tool_id HAVING COUNT(DISTINCT Traffic_Engineers_Tools.engineer_id) = (SELECT COUNT(*) FROM  Traffic_Engineers)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Determine the intersection of tool names utilized by each traffic engineer.",
          "sql_queries": [
            "SELECT T2.tool_name FROM Traffic_Engineers_Tools AS T1 JOIN Tools AS T2 ON T1.tool_id = T2.tool_id GROUP BY T2.tool_name HAVING COUNT(DISTINCT T1.engineer_id) = (SELECT COUNT(*) FROM Traffic_Engineers)"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List the software and hardware tools used by every traffic engineer.",
          "sql_queries": [
            "SELECT T1.name, T3.tool_name, T3.type\nFROM Traffic_Engineers_Tools AS T2\nJOIN Traffic_Engineers AS T1 ON T2.engineer_id = T1.id\nJOIN Tools AS T3 ON T2.tool_id = T3.tool_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve the tool types and names shared by 100% of traffic engineers.",
          "sql_queries": [
            "SELECT T.type, T.tool_name\nFROM Tools T\nWHERE T.tool_id IN (\n    SELECT TET.tool_id\n    FROM Traffic_Engineers_Tools TET\n    GROUP BY TET.tool_id\n    HAVING COUNT(DISTINCT TET.engineer_id) = (SELECT COUNT(*) FROM Traffic_Engineers)\n)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Find the tool types and names used by all traffic engineers.",
          "sql_queries": [
            "SELECT DISTINCT T.type, T.tool_name \nFROM Tools T \nJOIN Traffic_Engineers_Tools TET ON T.tool_id = TET.tool_id \nWHERE T.tool_id IN (\n    SELECT tool_id \n    FROM Traffic_Engineers_Tools \n    GROUP BY tool_id \n    HAVING COUNT(DISTINCT engineer_id) = (SELECT COUNT(*) FROM Traffic_Engineers)\n)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Identify the set of tool types present in every engineer's toolset.",
          "sql_queries": [
            "SELECT type FROM Tools WHERE tool_id IN (SELECT tool_id FROM Traffic_Engineers_Tools GROUP BY tool_id HAVING COUNT(DISTINCT engineer_id) = (SELECT COUNT(*) FROM Traffic_Engineers))"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.4,
        "f1_score": 0.5714285714285715,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/scope/Traffic/scope_traffic_engineers_tools/scope_traffic_engineers_tools.sqlite",
      "db_dump": "CREATE TABLE `Tools`(\n    tool_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    tool_name TEXT,\n    type TEXT);\nCREATE TABLE `Traffic_Engineers`(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    years_of_experience INT);\nCREATE TABLE `Traffic_Engineers_Tools`(\n    engineer_id INTEGER,\n    tool_id INTEGER,\n    FOREIGN KEY (engineer_id) REFERENCES `Traffic_Engineers`(id),\n    FOREIGN KEY (tool_id) REFERENCES `Tools`(tool_id));\n\nINSERT INTO \"Tools\" (tool_id,tool_name,type) VALUES (1,'Software_Modeling','software'),(2,'Road_Simulation','hardware'),(3,'Vehicle_Tracking','hardware'),(4,'Accident_Analysis','software'),(5,'Signal_Optimization','software');\nINSERT INTO \"Traffic_Engineers\" (id,name,years_of_experience) VALUES (1,'John',20),(2,'Anna',30),(3,'James',25),(4,'Emma',28),(5,'Michael',27);\nINSERT INTO \"Traffic_Engineers_Tools\" (engineer_id,tool_id) VALUES (1,1),(1,2),(2,1),(2,3),(3,1),(3,2),(4,2),(4,5),(5,3),(5,4),(4,1),(5,1);\n",
      "question": "List the type of tools that are common to all traffic engineers.",
      "gold_queries": [
        "SELECT Tools.type  from Traffic_Engineers_Tools join Tools on Traffic_Engineers_Tools.tool_id = Tools.tool_id join Traffic_Engineers on Traffic_Engineers_Tools.engineer_id = Traffic_Engineers.id   GROUP BY Traffic_Engineers_Tools.tool_id HAVING COUNT(DISTINCT Traffic_Engineers_Tools.engineer_id) = (SELECT COUNT(*) FROM  Traffic_Engineers)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List the distinct tool types used by every traffic engineer in the database.",
          "sql_queries": [
            "SELECT DISTINCT T1.name, T2.type \nFROM Traffic_Engineers AS T1 \nJOIN Traffic_Engineers_Tools AS T3 ON T1.id = T3.engineer_id \nJOIN Tools AS T2 ON T3.tool_id = T2.tool_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List the types of tools that appear most frequently in the `Traffic_Engineers_Tools` table.",
          "sql_queries": [
            "SELECT T.type \nFROM Tools AS T \nJOIN Traffic_Engineers_Tools AS TET \nON T.tool_id = TET.tool_id \nGROUP BY T.type \nORDER BY COUNT(*) DESC \nLIMIT 1"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "List all tool types that are assigned to at least one engineer in the database.",
          "sql_queries": [
            "SELECT DISTINCT T.type \nFROM Tools T \nJOIN Traffic_Engineers_Tools TET ON T.tool_id = TET.tool_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Find the tool types utilized by the greatest number of unique traffic engineers.",
          "sql_queries": [
            "SELECT type\nFROM Tools\nWHERE tool_id IN (\n    SELECT tool_id\n    FROM Traffic_Engineers_Tools\n    GROUP BY tool_id\n    ORDER BY COUNT(DISTINCT engineer_id) DESC\n    LIMIT 1\n)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/scope/Traffic/scope_traffic_engineers_tools/scope_traffic_engineers_tools.sqlite",
      "db_dump": "CREATE TABLE `Tools`(\n    tool_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    tool_name TEXT,\n    type TEXT);\nCREATE TABLE `Traffic_Engineers`(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    years_of_experience INT);\nCREATE TABLE `Traffic_Engineers_Tools`(\n    engineer_id INTEGER,\n    tool_id INTEGER,\n    FOREIGN KEY (engineer_id) REFERENCES `Traffic_Engineers`(id),\n    FOREIGN KEY (tool_id) REFERENCES `Tools`(tool_id));\n\nINSERT INTO \"Tools\" (tool_id,tool_name,type) VALUES (1,'Software_Modeling','software'),(2,'Road_Simulation','hardware'),(3,'Vehicle_Tracking','hardware'),(4,'Accident_Analysis','software'),(5,'Signal_Optimization','software');\nINSERT INTO \"Traffic_Engineers\" (id,name,years_of_experience) VALUES (1,'John',20),(2,'Anna',30),(3,'James',25),(4,'Emma',28),(5,'Michael',27);\nINSERT INTO \"Traffic_Engineers_Tools\" (engineer_id,tool_id) VALUES (1,1),(1,2),(2,1),(2,3),(3,1),(3,2),(4,2),(4,5),(5,3),(5,4),(4,1),(5,1);\n",
      "question": "For all engineers, please provide me with the names and types of tools they use.",
      "gold_queries": [
        "select traffic_engineers.name , tools.tool_name , tools.type from Traffic_Engineers_Tools join Tools on Traffic_Engineers_Tools.tool_id = Tools.tool_id join Traffic_Engineers on Traffic_Engineers_Tools.engineer_id = Traffic_Engineers.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Return a list of all engineers, their names, and for each engineer, a list of tool types they use.",
          "sql_queries": [
            "SELECT e.name, GROUP_CONCAT(DISTINCT t.type) AS tool_types\nFROM Traffic_Engineers e\nJOIN Traffic_Engineers_Tools ett ON e.id = ett.engineer_id\nJOIN Tools t ON ett.tool_id = t.tool_id\nGROUP BY e.name"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Output a table with engineer names and a column for each tool type, indicating whether that engineer uses that tool type.",
          "sql_queries": [
            "SELECT \n    TE.name,\n    MAX(CASE WHEN T.type = 'software' THEN 'Yes' ELSE 'No' END) AS software,\n    MAX(CASE WHEN T.type = 'hardware' THEN 'Yes' ELSE 'No' END) AS hardware\nFROM \n    Traffic_Engineers_Tools TET\nJOIN \n    Tools T ON TET.tool_id = T.tool_id\nJOIN \n    Traffic_Engineers TE ON TET.engineer_id = TE.id\nGROUP BY \n    TE.name"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List the names of all engineers and the types of tools they use.",
          "sql_queries": [
            "SELECT T1.name, T3.type FROM Traffic_Engineers AS T1 JOIN Traffic_Engineers_Tools AS T2 ON T1.id = T2.engineer_id JOIN Tools AS T3 ON T2.tool_id = T3.tool_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Show the relationship between engineers and tools, including engineer names and tool types used.",
          "sql_queries": [
            "SELECT T1.name, T3.type \nFROM Traffic_Engineers AS T1 \nJOIN Traffic_Engineers_Tools AS T2 ON T1.id = T2.engineer_id \nJOIN Tools AS T3 ON T2.tool_id = T3.tool_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Traffic/scope_traffic_engineers_tools/scope_traffic_engineers_tools.sqlite",
      "db_dump": "CREATE TABLE `Tools`(\n    tool_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    tool_name TEXT,\n    type TEXT);\nCREATE TABLE `Traffic_Engineers`(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    years_of_experience INT);\nCREATE TABLE `Traffic_Engineers_Tools`(\n    engineer_id INTEGER,\n    tool_id INTEGER,\n    FOREIGN KEY (engineer_id) REFERENCES `Traffic_Engineers`(id),\n    FOREIGN KEY (tool_id) REFERENCES `Tools`(tool_id));\n\nINSERT INTO \"Tools\" (tool_id,tool_name,type) VALUES (1,'Software_Modeling','software'),(2,'Road_Simulation','hardware'),(3,'Vehicle_Tracking','hardware'),(4,'Accident_Analysis','software'),(5,'Signal_Optimization','software');\nINSERT INTO \"Traffic_Engineers\" (id,name,years_of_experience) VALUES (1,'John',20),(2,'Anna',30),(3,'James',25),(4,'Emma',28),(5,'Michael',27);\nINSERT INTO \"Traffic_Engineers_Tools\" (engineer_id,tool_id) VALUES (1,1),(1,2),(2,1),(2,3),(3,1),(3,2),(4,2),(4,5),(5,3),(5,4),(4,1),(5,1);\n",
      "question": "What are the tool types and names for every engineer",
      "gold_queries": [
        "SELECT Tools.tool_name, Tools.type  from Traffic_Engineers_Tools join Tools on Traffic_Engineers_Tools.tool_id = Tools.tool_id join Traffic_Engineers on Traffic_Engineers_Tools.engineer_id = Traffic_Engineers.id   GROUP BY Traffic_Engineers_Tools.tool_id HAVING COUNT(DISTINCT Traffic_Engineers_Tools.engineer_id) = (SELECT COUNT(*) FROM  Traffic_Engineers)",
        "select traffic_engineers.name , tools.tool_name , tools.type from Traffic_Engineers_Tools join Tools on Traffic_Engineers_Tools.tool_id = Tools.tool_id join Traffic_Engineers on Traffic_Engineers_Tools.engineer_id = Traffic_Engineers.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Generate a table with columns for engineer name, tool name, and tool type.",
          "sql_queries": [
            "SELECT Traffic_Engineers.name, Tools.tool_name, Tools.type\nFROM Traffic_Engineers_Tools\nJOIN Traffic_Engineers ON Traffic_Engineers_Tools.engineer_id = Traffic_Engineers.id\nJOIN Tools ON Traffic_Engineers_Tools.tool_id = Tools.tool_id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve the tool names and types for each engineer.",
          "sql_queries": [
            "SELECT T1.name, T3.tool_name, T3.type\nFROM Traffic_Engineers AS T1\nJOIN Traffic_Engineers_Tools AS T2 ON T1.id = T2.engineer_id\nJOIN Tools AS T3 ON T2.tool_id = T3.tool_id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Provide a list of tools, categorized by engineer and including tool names and types.",
          "sql_queries": [
            "SELECT T1.name AS Engineer, T3.tool_name, T3.type\nFROM Traffic_Engineers_Tools AS T2\nJOIN Traffic_Engineers AS T1 ON T2.engineer_id = T1.id\nJOIN Tools AS T3 ON T2.tool_id = T3.tool_id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "For every engineer, display a list of their associated tool names and types.",
          "sql_queries": [
            "SELECT Traffic_Engineers.name, Tools.tool_name, Tools.type\nFROM Traffic_Engineers\nJOIN Traffic_Engineers_Tools ON Traffic_Engineers.id = Traffic_Engineers_Tools.engineer_id\nJOIN Tools ON Traffic_Engineers_Tools.tool_id = Tools.tool_id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all distinct tool types used by each engineer.",
          "sql_queries": [
            "SELECT Engineers.name, DISTINCT Tools.type \nFROM Traffic_Engineers AS Engineers \nJOIN Traffic_Engineers_Tools AS EngTools ON Engineers.id = EngTools.engineer_id \nJOIN Tools ON EngTools.tool_id = Tools.tool_id \nGROUP BY Engineers.name, Tools.type"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT Engineers.name, DISTINCT Tools.type \nFROM Traffic_Engineers AS Engineers \nJOIN Traffic_Engineers_Tools AS EngTools ON Engineers.id = EngTools.engineer_id \nJOIN Tools ON EngTools.tool_id = Tools.tool_id \nGROUP BY Engineers.name, Tools.type",
                "original_exception": "near \"DISTINCT\": syntax error"
              }
            ],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.8,
        "f1_score": 0.6153846153846154,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [
          {
            "query": "SELECT Engineers.name, DISTINCT Tools.type \nFROM Traffic_Engineers AS Engineers \nJOIN Traffic_Engineers_Tools AS EngTools ON Engineers.id = EngTools.engineer_id \nJOIN Tools ON EngTools.tool_id = Tools.tool_id \nGROUP BY Engineers.name, Tools.type",
            "original_exception": "near \"DISTINCT\": syntax error"
          }
        ],
        "all_found": false
      },
      "matched_gold_sql": 4
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streamings_payments/scope_streamings_payments.sqlite",
      "db_dump": "CREATE TABLE Genres (\n    genre_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT\n);\nCREATE TABLE Movies (\n    movie_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_year INTEGER,\n    genre_id INTEGER,\n    FOREIGN KEY(genre_id) REFERENCES Genres(genre_id)\n);\nCREATE TABLE \"Payments\" (\n    payment_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    payment_type TEXT,\n    FOREIGN KEY(payment_type) REFERENCES PaymentTypes(payment_type)\n);\nCREATE TABLE Streamings (\n    streaming_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    movie_id INTEGER,\n    user_id INTEGER,\n    stream_start_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    stream_end_time TIMESTAMP,\n    FOREIGN KEY(movie_id) REFERENCES Movies(movie_id),\n    FOREIGN KEY(user_id) REFERENCES Users(id)\n);\nCREATE TABLE Streamings_Payments (\n    streaming_id INTEGER,\n    payment_id INTEGER,\n    FOREIGN KEY(streaming_id) REFERENCES Streamings(streaming_id),\n    FOREIGN KEY(payment_id) REFERENCES Payments(payment_id)\n);\nCREATE TABLE Subscriptions (\n    subscription_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    user_id INTEGER,\n    start_date DATE,\n    end_date DATE,\n    status TEXT ,\n    FOREIGN KEY(user_id) REFERENCES Users(id)\n);\nCREATE TABLE Users (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    username TEXT,\n    email TEXT\n);\n\nINSERT INTO \"Genres\" (genre_id,name) VALUES (1,'Action'),(2,'Comedy'),(3,'Drama'),(4,'Horror'),(5,'Romance');\nINSERT INTO \"Movies\" (movie_id,title,release_year,genre_id) VALUES (1,'Movie1',2021,1),(2,'Movie2',2020,2),(3,'Movie3',2019,3),(4,'Movie4',2022,4),(5,'Movie5',2018,5);\nINSERT INTO \"Payments\" (payment_id,payment_type) VALUES (1,'Credit_Card'),(2,'Debit_Card'),(3,'PayPal'),(4,'Bank_Transfer'),(5,'Google_Pay');\nINSERT INTO \"Streamings\" (streaming_id,movie_id,user_id,stream_start_time,stream_end_time) VALUES (1,1,1,'2023-01-01 10:00:00','2023-01-01 12:00:00'),(2,2,2,'2023-01-02 10:00:00','2023-01-02 12:00:00'),(3,3,3,'2023-01-03 10:00:00','2023-01-03 12:00:00'),(4,4,4,'2023-01-04 10:00:00','2023-01-04 12:00:00'),(5,5,5,'2023-01-05 10:00:00','2023-01-05 12:00:00');\nINSERT INTO \"Streamings_Payments\" (streaming_id,payment_id) VALUES (1,1),(2,1),(3,2),(4,2),(5,3),(3,1),(4,1),(5,1);\nINSERT INTO \"Subscriptions\" (subscription_id,user_id,start_date,end_date,status) VALUES (1,1,'2023-01-01','2023-12-31','Active'),(2,2,'2023-02-01','2023-12-31','Inactive'),(3,3,'2023-03-01','2023-12-31','Canceled'),(4,4,'2023-04-01','2023-12-31','Expired'),(5,5,'2023-05-01','2023-12-31','Active');\nINSERT INTO \"Users\" (id,username,email) VALUES (1,'User1','user1@example.com'),(2,'User2','user2@example.com'),(3,'User3','user3@example.com'),(4,'User4','user4@example.com'),(5,'User5','user5@example.com');\n",
      "question": "What payment types are there for each movie streamed?",
      "gold_queries": [
        "SELECT Payments.payment_type  from streamings_payments join streamings  ON Streamings_Payments.streaming_id = streamings.streaming_id join payments  ON Streamings_Payments.payment_id = payments.payment_id GROUP BY Streamings_Payments.payment_id HAVING COUNT(DISTINCT Streamings_Payments.streaming_id) = (SELECT COUNT(*) FROM  Streamings)",
        "select streamings.streaming_id , payments.payment_type from streamings_payments join streamings  ON Streamings_Payments.streaming_id = streamings.streaming_id join payments  ON Streamings_Payments.payment_id = payments.payment_id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What are the distinct payment types used for all movie streams?",
          "sql_queries": [
            "SELECT DISTINCT payment_type FROM Payments INNER JOIN Streamings_Payments ON Payments.payment_id = Streamings_Payments.payment_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Can you retrieve a list of payment types used for each distinct movie?",
          "sql_queries": [
            "SELECT Movies.title, DISTINCT Payments.payment_type\nFROM Movies\nJOIN Streamings ON Movies.movie_id = Streamings.movie_id\nJOIN Streamings_Payments ON Streamings.streaming_id = Streamings_Payments.streaming_id\nJOIN Payments ON Streamings_Payments.payment_id = Payments.payment_id\nGROUP BY Movies.title, Payments.payment_type"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT Movies.title, DISTINCT Payments.payment_type\nFROM Movies\nJOIN Streamings ON Movies.movie_id = Streamings.movie_id\nJOIN Streamings_Payments ON Streamings.streaming_id = Streamings_Payments.streaming_id\nJOIN Payments ON Streamings_Payments.payment_id = Payments.payment_id\nGROUP BY Movies.title, Payments.payment_type",
                "original_exception": "near \"DISTINCT\": syntax error"
              }
            ],
            "all_found": false
          }
        },
        {
          "interpretation": "Which payment types are linked to each movie listing in the Streamings table?",
          "sql_queries": [
            "SELECT m.title, p.payment_type\nFROM Movies m\nJOIN Streamings s ON m.movie_id = s.movie_id\nJOIN Streamings_Payments sp ON s.streaming_id = sp.streaming_id\nJOIN Payments p ON sp.payment_id = p.payment_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "For each movie, what payment types were used in at least one stream?",
          "sql_queries": [
            "SELECT M.title, P.payment_type\nFROM Movies M\nJOIN Streamings S ON M.movie_id = S.movie_id\nJOIN Streamings_Payments SP ON S.streaming_id = SP.streaming_id\nJOIN Payments P ON SP.payment_id = P.payment_id\nGROUP BY M.title, P.payment_type"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Given a movie ID, what are the payment types associated with its streams?",
          "sql_queries": [
            "SELECT DISTINCT p.payment_type\nFROM Payments p\nJOIN Streamings_Payments sp ON p.payment_id = sp.payment_id\nJOIN Streamings s ON sp.streaming_id = s.streaming_id\nWHERE s.movie_id = ?"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT DISTINCT p.payment_type\nFROM Payments p\nJOIN Streamings_Payments sp ON p.payment_id = sp.payment_id\nJOIN Streamings s ON sp.streaming_id = s.streaming_id\nWHERE s.movie_id = ?",
                "original_exception": "Incorrect number of bindings supplied. The current statement uses 1, and there are 0 supplied."
              }
            ],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [
          {
            "query": "SELECT DISTINCT p.payment_type\nFROM Payments p\nJOIN Streamings_Payments sp ON p.payment_id = sp.payment_id\nJOIN Streamings s ON sp.streaming_id = s.streaming_id\nWHERE s.movie_id = ?",
            "original_exception": "Incorrect number of bindings supplied. The current statement uses 1, and there are 0 supplied."
          },
          {
            "query": "SELECT Movies.title, DISTINCT Payments.payment_type\nFROM Movies\nJOIN Streamings ON Movies.movie_id = Streamings.movie_id\nJOIN Streamings_Payments ON Streamings.streaming_id = Streamings_Payments.streaming_id\nJOIN Payments ON Streamings_Payments.payment_id = Payments.payment_id\nGROUP BY Movies.title, Payments.payment_type",
            "original_exception": "near \"DISTINCT\": syntax error"
          }
        ],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_services_video_players/scope_streaming_services_video_players.sqlite",
      "db_dump": "CREATE TABLE Streaming_Services (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    service_name TEXT,\n    description TEXT\n);\nCREATE TABLE Streaming_Services_Video_Players (\n    streaming_service_id INTEGER,\n    video_player_id INTEGER,\n    FOREIGN KEY (streaming_service_id) REFERENCES Streaming_Services(id),\n    FOREIGN KEY (video_player_id) REFERENCES Video_Players(id)\n);\nCREATE TABLE Video_Players (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    player_type TEXT,\n    version INT\n);\n\nINSERT INTO \"Streaming_Services\" (id,service_name,description) VALUES (1,'Netflix','A popular streaming platform offering movies, TV shows, documentaries.'),(2,'Hulu','An American subscription video on-demand service offering a library of films and television series.'),(3,'Amazon Prime Video','A subsidiary of Amazon that offers digital video streamings of movies and TV shows.'),(4,'Disney+','A subscription-based streaming service from Walt Disney direct-to-consumer.'),(5,'Apple TV+','Apple’s own streaming service featuring original content by Apple Studios.');\nINSERT INTO \"Streaming_Services_Video_Players\" (streaming_service_id,video_player_id) VALUES (1,1),(1,2),(2,1),(3,2),(4,1),(3,1),(5,1);\nINSERT INTO \"Video_Players\" (id,player_type,version) VALUES (1,'HTML5',3),(2,'Flash',10),(3,'Silverlight',5),(4,'RealPlayer',2),(5,'Windows Media Player',12);\n",
      "question": "Give me the video player versions that are supported by each streaming service.",
      "gold_queries": [
        "SELECT Video_Players.version  from Streaming_Services_Video_Players join Video_Players on Streaming_Services_Video_Players.video_player_id = Video_Players.id join Streaming_Services on Streaming_Services_Video_Players.streaming_service_id = Streaming_Services.id   GROUP BY Streaming_Services_Video_Players.video_player_id HAVING COUNT(DISTINCT Streaming_Services_Video_Players.streaming_service_id) = (SELECT COUNT(*) FROM  Streaming_Services)",
        "select streaming_services.service_name , video_players.version from Streaming_Services_Video_Players join Video_Players on Streaming_Services_Video_Players.video_player_id = Video_Players.id join Streaming_Services on Streaming_Services_Video_Players.streaming_service_id = Streaming_Services.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Provide a table showing the video player versions supported by each streaming service.",
          "sql_queries": [
            "SELECT Streaming_Services.service_name, Video_Players.version\nFROM Streaming_Services\nJOIN Streaming_Services_Video_Players ON Streaming_Services.id = Streaming_Services_Video_Players.streaming_service_id\nJOIN Video_Players ON Streaming_Services_Video_Players.video_player_id = Video_Players.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Display the video player versions used by each streaming service.",
          "sql_queries": [
            "SELECT ss.service_name, vp.version\nFROM Streaming_Services_Video_Players ssvp\nJOIN Streaming_Services ss ON ssvp.streaming_service_id = ss.id\nJOIN Video_Players vp ON ssvp.video_player_id = vp.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all video player versions associated with each streaming service.",
          "sql_queries": [
            "SELECT s.service_name, vp.version\nFROM Streaming_Services s\nJOIN Streaming_Services_Video_Players ssvp ON s.id = ssvp.streaming_service_id\nJOIN Video_Players vp ON ssvp.video_player_id = vp.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "What are the versions of all video players used by each streaming service?",
          "sql_queries": [
            "SELECT ss.service_name, vp.version\nFROM Streaming_Services ss\nJOIN Streaming_Services_Video_Players ssvp ON ss.id = ssvp.streaming_service_id\nJOIN Video_Players vp ON ssvp.video_player_id = vp.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Which video player versions are compatible with each streaming service?",
          "sql_queries": [
            "SELECT s.service_name, v.version\nFROM Streaming_Services s\nJOIN Streaming_Services_Video_Players ssvp ON s.id = ssvp.streaming_service_id\nJOIN Video_Players v ON ssvp.video_player_id = v.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "For each streaming service, retrieve the corresponding video player versions.",
          "sql_queries": [
            "SELECT S.service_name, V.version\nFROM Streaming_Services S\nJOIN Streaming_Services_Video_Players SSVP ON S.id = SSVP.streaming_service_id\nJOIN Video_Players V ON SSVP.video_player_id = V.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 1.0,
        "f1_score": 0.6666666666666666,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 6
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_services_video_players/scope_streaming_services_video_players.sqlite",
      "db_dump": "CREATE TABLE Streaming_Services (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    service_name TEXT,\n    description TEXT\n);\nCREATE TABLE Streaming_Services_Video_Players (\n    streaming_service_id INTEGER,\n    video_player_id INTEGER,\n    FOREIGN KEY (streaming_service_id) REFERENCES Streaming_Services(id),\n    FOREIGN KEY (video_player_id) REFERENCES Video_Players(id)\n);\nCREATE TABLE Video_Players (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    player_type TEXT,\n    version INT\n);\n\nINSERT INTO \"Streaming_Services\" (id,service_name,description) VALUES (1,'Netflix','A popular streaming platform offering movies, TV shows, documentaries.'),(2,'Hulu','An American subscription video on-demand service offering a library of films and television series.'),(3,'Amazon Prime Video','A subsidiary of Amazon that offers digital video streamings of movies and TV shows.'),(4,'Disney+','A subscription-based streaming service from Walt Disney direct-to-consumer.'),(5,'Apple TV+','Apple’s own streaming service featuring original content by Apple Studios.');\nINSERT INTO \"Streaming_Services_Video_Players\" (streaming_service_id,video_player_id) VALUES (1,1),(1,2),(2,1),(3,2),(4,1),(3,1),(5,1);\nINSERT INTO \"Video_Players\" (id,player_type,version) VALUES (1,'HTML5',3),(2,'Flash',10),(3,'Silverlight',5),(4,'RealPlayer',2),(5,'Windows Media Player',12);\n",
      "question": "What are video players all streaming services have in common?",
      "gold_queries": [
        "SELECT Video_Players.player_type  from Streaming_Services_Video_Players join Video_Players on Streaming_Services_Video_Players.video_player_id = Video_Players.id join Streaming_Services on Streaming_Services_Video_Players.streaming_service_id = Streaming_Services.id   GROUP BY Streaming_Services_Video_Players.video_player_id HAVING COUNT(DISTINCT Streaming_Services_Video_Players.streaming_service_id) = (SELECT COUNT(*) FROM  Streaming_Services)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Are there any video player types utilized by all streaming services?",
          "sql_queries": [
            "SELECT player_type\nFROM Video_Players\nWHERE id IN (\n    SELECT video_player_id\n    FROM Streaming_Services_Video_Players\n    GROUP BY video_player_id\n    HAVING COUNT(DISTINCT streaming_service_id) = (\n        SELECT COUNT(*)\n        FROM Streaming_Services\n    )\n)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "What is the shared characteristic of all video players used by streaming services?",
          "sql_queries": [
            "SELECT player_type FROM Video_Players WHERE id IN (SELECT video_player_id FROM Streaming_Services_Video_Players)"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Do all streaming services rely on a specific video player technology?",
          "sql_queries": [
            "SELECT T1.service_name, T3.player_type\nFROM Streaming_Services AS T1\nJOIN Streaming_Services_Video_Players AS T2 ON T1.id = T2.streaming_service_id\nJOIN Video_Players AS T3 ON T2.video_player_id = T3.id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Is there a common functionality or feature among all video players employed by streaming services?",
          "sql_queries": [
            "SELECT player_type\nFROM Video_Players\nWHERE id IN (\n    SELECT video_player_id\n    FROM Streaming_Services_Video_Players\n)\nGROUP BY player_type\nHAVING COUNT(DISTINCT streaming_service_id) = (\n    SELECT COUNT(*)\n    FROM Streaming_Services\n)"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT player_type\nFROM Video_Players\nWHERE id IN (\n    SELECT video_player_id\n    FROM Streaming_Services_Video_Players\n)\nGROUP BY player_type\nHAVING COUNT(DISTINCT streaming_service_id) = (\n    SELECT COUNT(*)\n    FROM Streaming_Services\n)",
                "original_exception": "no such column: streaming_service_id"
              }
            ],
            "all_found": false
          }
        },
        {
          "interpretation": "Which video players are used by every streaming service?",
          "sql_queries": [
            "SELECT vp.player_type\nFROM Video_Players vp\nWHERE vp.id IN (\n    SELECT ssvp.video_player_id\n    FROM Streaming_Services_Video_Players ssvp\n    GROUP BY ssvp.video_player_id\n    HAVING COUNT(DISTINCT ssvp.streaming_service_id) = (SELECT COUNT(*) FROM Streaming_Services)\n)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.4,
        "f1_score": 0.5714285714285715,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [
          {
            "query": "SELECT player_type\nFROM Video_Players\nWHERE id IN (\n    SELECT video_player_id\n    FROM Streaming_Services_Video_Players\n)\nGROUP BY player_type\nHAVING COUNT(DISTINCT streaming_service_id) = (\n    SELECT COUNT(*)\n    FROM Streaming_Services\n)",
            "original_exception": "no such column: streaming_service_id"
          }
        ],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_services_video_players/scope_streaming_services_video_players.sqlite",
      "db_dump": "CREATE TABLE Streaming_Services (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    service_name TEXT,\n    description TEXT\n);\nCREATE TABLE Streaming_Services_Video_Players (\n    streaming_service_id INTEGER,\n    video_player_id INTEGER,\n    FOREIGN KEY (streaming_service_id) REFERENCES Streaming_Services(id),\n    FOREIGN KEY (video_player_id) REFERENCES Video_Players(id)\n);\nCREATE TABLE Video_Players (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    player_type TEXT,\n    version INT\n);\n\nINSERT INTO \"Streaming_Services\" (id,service_name,description) VALUES (1,'Netflix','A popular streaming platform offering movies, TV shows, documentaries.'),(2,'Hulu','An American subscription video on-demand service offering a library of films and television series.'),(3,'Amazon Prime Video','A subsidiary of Amazon that offers digital video streamings of movies and TV shows.'),(4,'Disney+','A subscription-based streaming service from Walt Disney direct-to-consumer.'),(5,'Apple TV+','Apple’s own streaming service featuring original content by Apple Studios.');\nINSERT INTO \"Streaming_Services_Video_Players\" (streaming_service_id,video_player_id) VALUES (1,1),(1,2),(2,1),(3,2),(4,1),(3,1),(5,1);\nINSERT INTO \"Video_Players\" (id,player_type,version) VALUES (1,'HTML5',3),(2,'Flash',10),(3,'Silverlight',5),(4,'RealPlayer',2),(5,'Windows Media Player',12);\n",
      "question": "For each streaming service, list video players used.",
      "gold_queries": [
        "select streaming_services.service_name , video_players.player_type from Streaming_Services_Video_Players join Video_Players on Streaming_Services_Video_Players.video_player_id = Video_Players.id join Streaming_Services on Streaming_Services_Video_Players.streaming_service_id = Streaming_Services.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Identify distinct video player types used by each streaming service.",
          "sql_queries": [
            "SELECT s.service_name, DISTINCT vp.player_type\nFROM Streaming_Services s\nJOIN Streaming_Services_Video_Players ss_vp ON s.id = ss_vp.streaming_service_id\nJOIN Video_Players vp ON ss_vp.video_player_id = vp.id\nGROUP BY s.service_name, vp.player_type"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT s.service_name, DISTINCT vp.player_type\nFROM Streaming_Services s\nJOIN Streaming_Services_Video_Players ss_vp ON s.id = ss_vp.streaming_service_id\nJOIN Video_Players vp ON ss_vp.video_player_id = vp.id\nGROUP BY s.service_name, vp.player_type",
                "original_exception": "near \"DISTINCT\": syntax error"
              }
            ],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve the service name and a list of video player types associated with each streaming service.",
          "sql_queries": [
            "SELECT s.service_name, GROUP_CONCAT(v.player_type) AS video_player_types\nFROM Streaming_Services s\nJOIN Streaming_Services_Video_Players ssvp ON s.id = ssvp.streaming_service_id\nJOIN Video_Players v ON ssvp.video_player_id = v.id\nGROUP BY s.service_name"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Generate a report detailing the video player usage patterns across all streaming services.",
          "sql_queries": [
            "SELECT s.service_name, vp.player_type, COUNT(svp.video_player_id) AS usage_count\nFROM Streaming_Services s\nJOIN Streaming_Services_Video_Players svp ON s.id = svp.streaming_service_id\nJOIN Video_Players vp ON svp.video_player_id = vp.id\nGROUP BY s.service_name, vp.player_type"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Present a table showing each streaming service and all video players it leverages.",
          "sql_queries": [
            "SELECT ss.service_name, vp.player_type\nFROM Streaming_Services_Video_Players ssvp\nJOIN Streaming_Services ss ON ssvp.streaming_service_id = ss.id\nJOIN Video_Players vp ON ssvp.video_player_id = vp.id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Given a streaming service ID, return the corresponding video player IDs.",
          "sql_queries": [
            "SELECT video_player_id FROM Streaming_Services_Video_Players WHERE streaming_service_id = ?"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT video_player_id FROM Streaming_Services_Video_Players WHERE streaming_service_id = ?",
                "original_exception": "Incorrect number of bindings supplied. The current statement uses 1, and there are 0 supplied."
              }
            ],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [
          {
            "query": "SELECT s.service_name, DISTINCT vp.player_type\nFROM Streaming_Services s\nJOIN Streaming_Services_Video_Players ss_vp ON s.id = ss_vp.streaming_service_id\nJOIN Video_Players vp ON ss_vp.video_player_id = vp.id\nGROUP BY s.service_name, vp.player_type",
            "original_exception": "near \"DISTINCT\": syntax error"
          },
          {
            "query": "SELECT video_player_id FROM Streaming_Services_Video_Players WHERE streaming_service_id = ?",
            "original_exception": "Incorrect number of bindings supplied. The current statement uses 1, and there are 0 supplied."
          }
        ],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_services_video_players/scope_streaming_services_video_players.sqlite",
      "db_dump": "CREATE TABLE Streaming_Services (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    service_name TEXT,\n    description TEXT\n);\nCREATE TABLE Streaming_Services_Video_Players (\n    streaming_service_id INTEGER,\n    video_player_id INTEGER,\n    FOREIGN KEY (streaming_service_id) REFERENCES Streaming_Services(id),\n    FOREIGN KEY (video_player_id) REFERENCES Video_Players(id)\n);\nCREATE TABLE Video_Players (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    player_type TEXT,\n    version INT\n);\n\nINSERT INTO \"Streaming_Services\" (id,service_name,description) VALUES (1,'Netflix','A popular streaming platform offering movies, TV shows, documentaries.'),(2,'Hulu','An American subscription video on-demand service offering a library of films and television series.'),(3,'Amazon Prime Video','A subsidiary of Amazon that offers digital video streamings of movies and TV shows.'),(4,'Disney+','A subscription-based streaming service from Walt Disney direct-to-consumer.'),(5,'Apple TV+','Apple’s own streaming service featuring original content by Apple Studios.');\nINSERT INTO \"Streaming_Services_Video_Players\" (streaming_service_id,video_player_id) VALUES (1,1),(1,2),(2,1),(3,2),(4,1),(3,1),(5,1);\nINSERT INTO \"Video_Players\" (id,player_type,version) VALUES (1,'HTML5',3),(2,'Flash',10),(3,'Silverlight',5),(4,'RealPlayer',2),(5,'Windows Media Player',12);\n",
      "question": "For every streaming service, list the corresponding player types and versions.",
      "gold_queries": [
        "select streaming_services.service_name , video_players.player_type , video_players.version from Streaming_Services_Video_Players join Video_Players on Streaming_Services_Video_Players.video_player_id = Video_Players.id join Streaming_Services on Streaming_Services_Video_Players.streaming_service_id = Streaming_Services.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Retrieve the streaming service name and a list of associated player types and versions.",
          "sql_queries": [
            "SELECT SS.service_name, VP.player_type, VP.version\nFROM Streaming_Services SS\nJOIN Streaming_Services_Video_Players SSVP ON SS.id = SSVP.streaming_service_id\nJOIN Video_Players VP ON SSVP.video_player_id = VP.id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Extract and display the player types and versions connected to each streaming service via the intermediary table.",
          "sql_queries": [
            "SELECT s.service_name, v.player_type, v.version\nFROM Streaming_Services_Video_Players spv\nJOIN Streaming_Services s ON spv.streaming_service_id = s.id\nJOIN Video_Players v ON spv.video_player_id = v.id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Generate a report showing the player type and version used by each streaming service for all supported players.",
          "sql_queries": [
            "SELECT ss.service_name, vp.player_type, vp.version\nFROM Streaming_Services ss\nJOIN Streaming_Services_Video_Players ssvp ON ss.id = ssvp.streaming_service_id\nJOIN Video_Players vp ON ssvp.video_player_id = vp.id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Display a table with streaming service names in one column and player types and versions in another column.",
          "sql_queries": [
            "SELECT SS.service_name, VP.player_type || ' ' || VP.version as player_info\nFROM Streaming_Services SS\nJOIN Streaming_Services_Video_Players SVP ON SS.id = SVP.streaming_service_id\nJOIN Video_Players VP ON SVP.video_player_id = VP.id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "For each streaming service, list all distinct player types it utilizes.",
          "sql_queries": [
            "SELECT ss.service_name, vp.player_type\nFROM Streaming_Services ss\nJOIN Streaming_Services_Video_Players ssvp ON ss.id = ssvp.streaming_service_id\nJOIN Video_Players vp ON ssvp.video_player_id = vp.id\nGROUP BY ss.service_name, vp.player_type"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Provide a join query that combines data from all three tables to show the relationship between streaming services, video players, and their versions.",
          "sql_queries": [
            "SELECT S.service_name, VP.player_type, VP.version\nFROM Streaming_Services S\nJOIN Streaming_Services_Video_Players SSVP ON S.id = SSVP.streaming_service_id\nJOIN Video_Players VP ON SSVP.video_player_id = VP.id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.6666666666666666,
        "f1_score": 0.8,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 4
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_services_video_players/scope_streaming_services_video_players.sqlite",
      "db_dump": "CREATE TABLE Streaming_Services (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    service_name TEXT,\n    description TEXT\n);\nCREATE TABLE Streaming_Services_Video_Players (\n    streaming_service_id INTEGER,\n    video_player_id INTEGER,\n    FOREIGN KEY (streaming_service_id) REFERENCES Streaming_Services(id),\n    FOREIGN KEY (video_player_id) REFERENCES Video_Players(id)\n);\nCREATE TABLE Video_Players (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    player_type TEXT,\n    version INT\n);\n\nINSERT INTO \"Streaming_Services\" (id,service_name,description) VALUES (1,'Netflix','A popular streaming platform offering movies, TV shows, documentaries.'),(2,'Hulu','An American subscription video on-demand service offering a library of films and television series.'),(3,'Amazon Prime Video','A subsidiary of Amazon that offers digital video streamings of movies and TV shows.'),(4,'Disney+','A subscription-based streaming service from Walt Disney direct-to-consumer.'),(5,'Apple TV+','Apple’s own streaming service featuring original content by Apple Studios.');\nINSERT INTO \"Streaming_Services_Video_Players\" (streaming_service_id,video_player_id) VALUES (1,1),(1,2),(2,1),(3,2),(4,1),(3,1),(5,1);\nINSERT INTO \"Video_Players\" (id,player_type,version) VALUES (1,'HTML5',3),(2,'Flash',10),(3,'Silverlight',5),(4,'RealPlayer',2),(5,'Windows Media Player',12);\n",
      "question": "Which video player versions are equally supported by all streaming services?",
      "gold_queries": [
        "SELECT Video_Players.version  from Streaming_Services_Video_Players join Video_Players on Streaming_Services_Video_Players.video_player_id = Video_Players.id join Streaming_Services on Streaming_Services_Video_Players.streaming_service_id = Streaming_Services.id   GROUP BY Streaming_Services_Video_Players.video_player_id HAVING COUNT(DISTINCT Streaming_Services_Video_Players.streaming_service_id) = (SELECT COUNT(*) FROM  Streaming_Services)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Which video player versions are present in the `Streaming_Services_Video_Players` table for every streaming service?",
          "sql_queries": [
            "SELECT VP.version\nFROM Video_Players VP\nWHERE NOT EXISTS (\n    SELECT 1\n    FROM Streaming_Services SS\n    WHERE NOT EXISTS (\n        SELECT 1\n        FROM Streaming_Services_Video_Players SVP\n        WHERE SVP.streaming_service_id = SS.id AND SVP.video_player_id = VP.id\n    )\n)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Which video player versions are used by all streaming services?",
          "sql_queries": [
            "SELECT version FROM Video_Players WHERE id IN (SELECT video_player_id FROM Streaming_Services_Video_Players GROUP BY video_player_id HAVING COUNT(DISTINCT streaming_service_id) = (SELECT COUNT(*) FROM Streaming_Services))"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Which video player versions are listed as supported by every streaming service?",
          "sql_queries": [
            "SELECT version FROM Video_Players WHERE id IN (SELECT video_player_id FROM Streaming_Services_Video_Players GROUP BY video_player_id HAVING COUNT(DISTINCT streaming_service_id) = (SELECT COUNT(*) FROM Streaming_Services))"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Which video player versions have the highest usage count across all streaming services?",
          "sql_queries": [
            "SELECT version FROM Video_Players WHERE id IN (SELECT video_player_id FROM Streaming_Services_Video_Players GROUP BY video_player_id ORDER BY COUNT(*) DESC LIMIT 1)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 4,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 4
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_services_video_players/scope_streaming_services_video_players.sqlite",
      "db_dump": "CREATE TABLE Streaming_Services (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    service_name TEXT,\n    description TEXT\n);\nCREATE TABLE Streaming_Services_Video_Players (\n    streaming_service_id INTEGER,\n    video_player_id INTEGER,\n    FOREIGN KEY (streaming_service_id) REFERENCES Streaming_Services(id),\n    FOREIGN KEY (video_player_id) REFERENCES Video_Players(id)\n);\nCREATE TABLE Video_Players (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    player_type TEXT,\n    version INT\n);\n\nINSERT INTO \"Streaming_Services\" (id,service_name,description) VALUES (1,'Netflix','A popular streaming platform offering movies, TV shows, documentaries.'),(2,'Hulu','An American subscription video on-demand service offering a library of films and television series.'),(3,'Amazon Prime Video','A subsidiary of Amazon that offers digital video streamings of movies and TV shows.'),(4,'Disney+','A subscription-based streaming service from Walt Disney direct-to-consumer.'),(5,'Apple TV+','Apple’s own streaming service featuring original content by Apple Studios.');\nINSERT INTO \"Streaming_Services_Video_Players\" (streaming_service_id,video_player_id) VALUES (1,1),(1,2),(2,1),(3,2),(4,1),(3,1),(5,1);\nINSERT INTO \"Video_Players\" (id,player_type,version) VALUES (1,'HTML5',3),(2,'Flash',10),(3,'Silverlight',5),(4,'RealPlayer',2),(5,'Windows Media Player',12);\n",
      "question": "Provide me with the player type and version that is common for all streaming services.",
      "gold_queries": [
        "SELECT Video_Players.player_type, Video_Players.version  from Streaming_Services_Video_Players join Video_Players on Streaming_Services_Video_Players.video_player_id = Video_Players.id join Streaming_Services on Streaming_Services_Video_Players.streaming_service_id = Streaming_Services.id   GROUP BY Streaming_Services_Video_Players.video_player_id HAVING COUNT(DISTINCT Streaming_Services_Video_Players.streaming_service_id) = (SELECT COUNT(*) FROM  Streaming_Services)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List video player type and version shared by a subset of all streaming services.",
          "sql_queries": [
            "SELECT DISTINCT vp.player_type, vp.version\nFROM Streaming_Services_Video_Players ssvp\nJOIN Video_Players vp ON ssvp.video_player_id = vp.id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Find the video player type and version used by the majority of streaming services.",
          "sql_queries": [
            "SELECT vp.player_type, vp.version\nFROM Video_Players vp\nJOIN Streaming_Services_Video_Players ssvp ON vp.id = ssvp.video_player_id\nGROUP BY vp.player_type, vp.version\nORDER BY COUNT(*) DESC\nLIMIT 1"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Identify the player type and version present in all streaming services.",
          "sql_queries": [
            "SELECT player_type, version FROM Video_Players WHERE id IN (SELECT video_player_id FROM Streaming_Services_Video_Players GROUP BY video_player_id HAVING COUNT(DISTINCT streaming_service_id) = (SELECT COUNT(*) FROM Streaming_Services))"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Determine the most prevalent video player type and version across all streaming services.",
          "sql_queries": [
            "SELECT player_type, version\nFROM Video_Players\nWHERE id = (\n    SELECT video_player_id\n    FROM Streaming_Services_Video_Players\n    GROUP BY video_player_id\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.75,
        "f1_score": 0.8571428571428571,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_services_video_players/scope_streaming_services_video_players.sqlite",
      "db_dump": "CREATE TABLE Streaming_Services (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    service_name TEXT,\n    description TEXT\n);\nCREATE TABLE Streaming_Services_Video_Players (\n    streaming_service_id INTEGER,\n    video_player_id INTEGER,\n    FOREIGN KEY (streaming_service_id) REFERENCES Streaming_Services(id),\n    FOREIGN KEY (video_player_id) REFERENCES Video_Players(id)\n);\nCREATE TABLE Video_Players (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    player_type TEXT,\n    version INT\n);\n\nINSERT INTO \"Streaming_Services\" (id,service_name,description) VALUES (1,'Netflix','A popular streaming platform offering movies, TV shows, documentaries.'),(2,'Hulu','An American subscription video on-demand service offering a library of films and television series.'),(3,'Amazon Prime Video','A subsidiary of Amazon that offers digital video streamings of movies and TV shows.'),(4,'Disney+','A subscription-based streaming service from Walt Disney direct-to-consumer.'),(5,'Apple TV+','Apple’s own streaming service featuring original content by Apple Studios.');\nINSERT INTO \"Streaming_Services_Video_Players\" (streaming_service_id,video_player_id) VALUES (1,1),(1,2),(2,1),(3,2),(4,1),(3,1),(5,1);\nINSERT INTO \"Video_Players\" (id,player_type,version) VALUES (1,'HTML5',3),(2,'Flash',10),(3,'Silverlight',5),(4,'RealPlayer',2),(5,'Windows Media Player',12);\n",
      "question": "what player types and versions are associated with each streaming service?",
      "gold_queries": [
        "SELECT Video_Players.player_type, Video_Players.version  from Streaming_Services_Video_Players join Video_Players on Streaming_Services_Video_Players.video_player_id = Video_Players.id join Streaming_Services on Streaming_Services_Video_Players.streaming_service_id = Streaming_Services.id   GROUP BY Streaming_Services_Video_Players.video_player_id HAVING COUNT(DISTINCT Streaming_Services_Video_Players.streaming_service_id) = (SELECT COUNT(*) FROM  Streaming_Services)",
        "select streaming_services.service_name , video_players.player_type , video_players.version from Streaming_Services_Video_Players join Video_Players on Streaming_Services_Video_Players.video_player_id = Video_Players.id join Streaming_Services on Streaming_Services_Video_Players.streaming_service_id = Streaming_Services.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List all distinct video player types and versions used by each streaming service.",
          "sql_queries": [
            "SELECT DISTINCT ss.service_name, vp.player_type, vp.version\nFROM Streaming_Services ss\nJOIN Streaming_Services_Video_Players ssvp ON ss.id = ssvp.streaming_service_id\nJOIN Video_Players vp ON ssvp.video_player_id = vp.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Which player types and versions are linked to each streaming service?",
          "sql_queries": [
            "SELECT S.service_name, V.player_type, V.version \nFROM Streaming_Services_Video_Players AS SSVP \nJOIN Streaming_Services AS S ON SSVP.streaming_service_id = S.id \nJOIN Video_Players AS V ON SSVP.video_player_id = V.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "For each streaming service, retrieve the associated video player types and their respective versions.",
          "sql_queries": [
            "SELECT s.service_name, v.player_type, v.version\nFROM Streaming_Services s\nJOIN Streaming_Services_Video_Players ss_vp ON s.id = ss_vp.streaming_service_id\nJOIN Video_Players v ON ss_vp.video_player_id = v.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Identify the video player types and versions connected to every entry in the Streaming_Services table.",
          "sql_queries": [
            "SELECT S.service_name, V.player_type, V.version\nFROM Streaming_Services S\nJOIN Streaming_Services_Video_Players SSVP ON S.id = SSVP.streaming_service_id\nJOIN Video_Players V ON SSVP.video_player_id = V.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 1.0,
        "f1_score": 0.6666666666666666,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 4
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_services_video_players/scope_streaming_services_video_players.sqlite",
      "db_dump": "CREATE TABLE Streaming_Services (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    service_name TEXT,\n    description TEXT\n);\nCREATE TABLE Streaming_Services_Video_Players (\n    streaming_service_id INTEGER,\n    video_player_id INTEGER,\n    FOREIGN KEY (streaming_service_id) REFERENCES Streaming_Services(id),\n    FOREIGN KEY (video_player_id) REFERENCES Video_Players(id)\n);\nCREATE TABLE Video_Players (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    player_type TEXT,\n    version INT\n);\n\nINSERT INTO \"Streaming_Services\" (id,service_name,description) VALUES (1,'Netflix','A popular streaming platform offering movies, TV shows, documentaries.'),(2,'Hulu','An American subscription video on-demand service offering a library of films and television series.'),(3,'Amazon Prime Video','A subsidiary of Amazon that offers digital video streamings of movies and TV shows.'),(4,'Disney+','A subscription-based streaming service from Walt Disney direct-to-consumer.'),(5,'Apple TV+','Apple’s own streaming service featuring original content by Apple Studios.');\nINSERT INTO \"Streaming_Services_Video_Players\" (streaming_service_id,video_player_id) VALUES (1,1),(1,2),(2,1),(3,2),(4,1),(3,1),(5,1);\nINSERT INTO \"Video_Players\" (id,player_type,version) VALUES (1,'HTML5',3),(2,'Flash',10),(3,'Silverlight',5),(4,'RealPlayer',2),(5,'Windows Media Player',12);\n",
      "question": "Show me video players every streaming service uses.",
      "gold_queries": [
        "SELECT Video_Players.player_type  from Streaming_Services_Video_Players join Video_Players on Streaming_Services_Video_Players.video_player_id = Video_Players.id join Streaming_Services on Streaming_Services_Video_Players.streaming_service_id = Streaming_Services.id   GROUP BY Streaming_Services_Video_Players.video_player_id HAVING COUNT(DISTINCT Streaming_Services_Video_Players.streaming_service_id) = (SELECT COUNT(*) FROM  Streaming_Services)",
        "select streaming_services.service_name , video_players.player_type from Streaming_Services_Video_Players join Video_Players on Streaming_Services_Video_Players.video_player_id = Video_Players.id join Streaming_Services on Streaming_Services_Video_Players.streaming_service_id = Streaming_Services.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Retrieve the video player types utilized by all streaming services.",
          "sql_queries": [
            "SELECT DISTINCT player_type FROM Video_Players"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Display a comprehensive list of all video players used in the system, regardless of specific streaming service associations.",
          "sql_queries": [
            "SELECT player_type, version FROM Video_Players"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all video player IDs associated with each streaming service.",
          "sql_queries": [
            "SELECT streaming_service_id, video_player_id FROM Streaming_Services_Video_Players"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Select DISTINCT video_player_id FROM Streaming_Services_Video_Players;",
          "sql_queries": [
            "SELECT DISTINCT video_player_id FROM Streaming_Services_Video_Players"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "What are the video players supported by different streaming services?",
          "sql_queries": [
            "SELECT ss.service_name, vp.player_type\nFROM Streaming_Services_Video_Players ssvp\nJOIN Streaming_Services ss ON ssvp.streaming_service_id = ss.id\nJOIN Video_Players vp ON ssvp.video_player_id = vp.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Which video players are implemented by each streaming service individually.",
          "sql_queries": [
            "SELECT ss.service_name, vp.player_type\nFROM Streaming_Services ss\nJOIN Streaming_Services_Video_Players ssvp ON ss.id = ssvp.streaming_service_id\nJOIN Video_Players vp ON ssvp.video_player_id = vp.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.3333333333333333,
        "f1_score": 0.4,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_services_video_players/scope_streaming_services_video_players.sqlite",
      "db_dump": "CREATE TABLE Streaming_Services (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    service_name TEXT,\n    description TEXT\n);\nCREATE TABLE Streaming_Services_Video_Players (\n    streaming_service_id INTEGER,\n    video_player_id INTEGER,\n    FOREIGN KEY (streaming_service_id) REFERENCES Streaming_Services(id),\n    FOREIGN KEY (video_player_id) REFERENCES Video_Players(id)\n);\nCREATE TABLE Video_Players (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    player_type TEXT,\n    version INT\n);\n\nINSERT INTO \"Streaming_Services\" (id,service_name,description) VALUES (1,'Netflix','A popular streaming platform offering movies, TV shows, documentaries.'),(2,'Hulu','An American subscription video on-demand service offering a library of films and television series.'),(3,'Amazon Prime Video','A subsidiary of Amazon that offers digital video streamings of movies and TV shows.'),(4,'Disney+','A subscription-based streaming service from Walt Disney direct-to-consumer.'),(5,'Apple TV+','Apple’s own streaming service featuring original content by Apple Studios.');\nINSERT INTO \"Streaming_Services_Video_Players\" (streaming_service_id,video_player_id) VALUES (1,1),(1,2),(2,1),(3,2),(4,1),(3,1),(5,1);\nINSERT INTO \"Video_Players\" (id,player_type,version) VALUES (1,'HTML5',3),(2,'Flash',10),(3,'Silverlight',5),(4,'RealPlayer',2),(5,'Windows Media Player',12);\n",
      "question": "For each streaming service, show the video player versions that they support.",
      "gold_queries": [
        "select streaming_services.service_name , video_players.version from Streaming_Services_Video_Players join Video_Players on Streaming_Services_Video_Players.video_player_id = Video_Players.id join Streaming_Services on Streaming_Services_Video_Players.streaming_service_id = Streaming_Services.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For each streaming service, generate a report indicating the specific video player versions compatible with it.",
          "sql_queries": [
            "SELECT ss.service_name, vp.player_type, vp.version\nFROM Streaming_Services_Video_Players ssvp\nJOIN Streaming_Services ss ON ssvp.streaming_service_id = ss.id\nJOIN Video_Players vp ON ssvp.video_player_id = vp.id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve a list of streaming services and, for each service, list the versions of video players used by that service.",
          "sql_queries": [
            "SELECT s.service_name, v.version\nFROM Streaming_Services s\nJOIN Streaming_Services_Video_Players ssvp ON s.id = ssvp.streaming_service_id\nJOIN Video_Players v ON ssvp.video_player_id = v.id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Display a table showing each streaming service and a column listing the video player versions supported by that service.",
          "sql_queries": [
            "SELECT s.service_name, GROUP_CONCAT(vp.version, ', ') AS supported_versions\nFROM Streaming_Services s\nJOIN Streaming_Services_Video_Players ssvp ON s.id = ssvp.streaming_service_id\nJOIN Video_Players vp ON ssvp.video_player_id = vp.id\nGROUP BY s.service_name"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Show the video player versions that each streaming service can utilize.",
          "sql_queries": [
            "SELECT ss.service_name, vp.version\nFROM Streaming_Services ss\nJOIN Streaming_Services_Video_Players ssvp ON ss.id = ssvp.streaming_service_id\nJOIN Video_Players vp ON ssvp.video_player_id = vp.id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streamings_payments/scope_streamings_payments.sqlite",
      "db_dump": "CREATE TABLE Genres (\n    genre_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT\n);\nCREATE TABLE Movies (\n    movie_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_year INTEGER,\n    genre_id INTEGER,\n    FOREIGN KEY(genre_id) REFERENCES Genres(genre_id)\n);\nCREATE TABLE \"Payments\" (\n    payment_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    payment_type TEXT,\n    FOREIGN KEY(payment_type) REFERENCES PaymentTypes(payment_type)\n);\nCREATE TABLE Streamings (\n    streaming_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    movie_id INTEGER,\n    user_id INTEGER,\n    stream_start_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    stream_end_time TIMESTAMP,\n    FOREIGN KEY(movie_id) REFERENCES Movies(movie_id),\n    FOREIGN KEY(user_id) REFERENCES Users(id)\n);\nCREATE TABLE Streamings_Payments (\n    streaming_id INTEGER,\n    payment_id INTEGER,\n    FOREIGN KEY(streaming_id) REFERENCES Streamings(streaming_id),\n    FOREIGN KEY(payment_id) REFERENCES Payments(payment_id)\n);\nCREATE TABLE Subscriptions (\n    subscription_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    user_id INTEGER,\n    start_date DATE,\n    end_date DATE,\n    status TEXT ,\n    FOREIGN KEY(user_id) REFERENCES Users(id)\n);\nCREATE TABLE Users (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    username TEXT,\n    email TEXT\n);\n\nINSERT INTO \"Genres\" (genre_id,name) VALUES (1,'Action'),(2,'Comedy'),(3,'Drama'),(4,'Horror'),(5,'Romance');\nINSERT INTO \"Movies\" (movie_id,title,release_year,genre_id) VALUES (1,'Movie1',2021,1),(2,'Movie2',2020,2),(3,'Movie3',2019,3),(4,'Movie4',2022,4),(5,'Movie5',2018,5);\nINSERT INTO \"Payments\" (payment_id,payment_type) VALUES (1,'Credit_Card'),(2,'Debit_Card'),(3,'PayPal'),(4,'Bank_Transfer'),(5,'Google_Pay');\nINSERT INTO \"Streamings\" (streaming_id,movie_id,user_id,stream_start_time,stream_end_time) VALUES (1,1,1,'2023-01-01 10:00:00','2023-01-01 12:00:00'),(2,2,2,'2023-01-02 10:00:00','2023-01-02 12:00:00'),(3,3,3,'2023-01-03 10:00:00','2023-01-03 12:00:00'),(4,4,4,'2023-01-04 10:00:00','2023-01-04 12:00:00'),(5,5,5,'2023-01-05 10:00:00','2023-01-05 12:00:00');\nINSERT INTO \"Streamings_Payments\" (streaming_id,payment_id) VALUES (1,1),(2,1),(3,2),(4,2),(5,3),(3,1),(4,1),(5,1);\nINSERT INTO \"Subscriptions\" (subscription_id,user_id,start_date,end_date,status) VALUES (1,1,'2023-01-01','2023-12-31','Active'),(2,2,'2023-02-01','2023-12-31','Inactive'),(3,3,'2023-03-01','2023-12-31','Canceled'),(4,4,'2023-04-01','2023-12-31','Expired'),(5,5,'2023-05-01','2023-12-31','Active');\nINSERT INTO \"Users\" (id,username,email) VALUES (1,'User1','user1@example.com'),(2,'User2','user2@example.com'),(3,'User3','user3@example.com'),(4,'User4','user4@example.com'),(5,'User5','user5@example.com');\n",
      "question": "For every streaming, list the associated payment type that was used.",
      "gold_queries": [
        "select streamings.streaming_id , payments.payment_type from streamings_payments join streamings  ON Streamings_Payments.streaming_id = streamings.streaming_id join payments  ON Streamings_Payments.payment_id = payments.payment_id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Retrieve the payment type for each streaming record.",
          "sql_queries": [
            "SELECT P.payment_type\nFROM Streamings_Payments SP\nJOIN Payments P ON SP.payment_id = P.payment_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Determine the payment type used for each streaming session based on the linked payment_id.",
          "sql_queries": [
            "SELECT S.streaming_id, P.payment_type\nFROM Streamings_Payments SP\nJOIN Payments P ON SP.payment_id = P.payment_id\nJOIN Streamings S ON SP.streaming_id = S.streaming_id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Join the Streamings and Payments tables to output pairs of streaming_id and payment_type.",
          "sql_queries": [
            "SELECT S.streaming_id, P.payment_type\nFROM Streamings_Payments SP\nJOIN Streamings S ON SP.streaming_id = S.streaming_id\nJOIN Payments P ON SP.payment_id = P.payment_id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "For every entry in the Streamings table, show the corresponding payment type from the Payments table.",
          "sql_queries": [
            "SELECT T1.streaming_id, T2.payment_type FROM Streamings_Payments AS T1 JOIN Payments AS T2 ON T1.payment_id = T2.payment_id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "List the payment type column from the Payments table for each row in the Streamings_Payments table.",
          "sql_queries": [
            "SELECT T1.payment_type \nFROM Payments AS T1 \nJOIN Streamings_Payments AS T2 \nON T1.payment_id = T2.payment_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.6,
        "f1_score": 0.7499999999999999,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streamings_payments/scope_streamings_payments.sqlite",
      "db_dump": "CREATE TABLE Genres (\n    genre_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT\n);\nCREATE TABLE Movies (\n    movie_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_year INTEGER,\n    genre_id INTEGER,\n    FOREIGN KEY(genre_id) REFERENCES Genres(genre_id)\n);\nCREATE TABLE \"Payments\" (\n    payment_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    payment_type TEXT,\n    FOREIGN KEY(payment_type) REFERENCES PaymentTypes(payment_type)\n);\nCREATE TABLE Streamings (\n    streaming_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    movie_id INTEGER,\n    user_id INTEGER,\n    stream_start_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    stream_end_time TIMESTAMP,\n    FOREIGN KEY(movie_id) REFERENCES Movies(movie_id),\n    FOREIGN KEY(user_id) REFERENCES Users(id)\n);\nCREATE TABLE Streamings_Payments (\n    streaming_id INTEGER,\n    payment_id INTEGER,\n    FOREIGN KEY(streaming_id) REFERENCES Streamings(streaming_id),\n    FOREIGN KEY(payment_id) REFERENCES Payments(payment_id)\n);\nCREATE TABLE Subscriptions (\n    subscription_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    user_id INTEGER,\n    start_date DATE,\n    end_date DATE,\n    status TEXT ,\n    FOREIGN KEY(user_id) REFERENCES Users(id)\n);\nCREATE TABLE Users (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    username TEXT,\n    email TEXT\n);\n\nINSERT INTO \"Genres\" (genre_id,name) VALUES (1,'Action'),(2,'Comedy'),(3,'Drama'),(4,'Horror'),(5,'Romance');\nINSERT INTO \"Movies\" (movie_id,title,release_year,genre_id) VALUES (1,'Movie1',2021,1),(2,'Movie2',2020,2),(3,'Movie3',2019,3),(4,'Movie4',2022,4),(5,'Movie5',2018,5);\nINSERT INTO \"Payments\" (payment_id,payment_type) VALUES (1,'Credit_Card'),(2,'Debit_Card'),(3,'PayPal'),(4,'Bank_Transfer'),(5,'Google_Pay');\nINSERT INTO \"Streamings\" (streaming_id,movie_id,user_id,stream_start_time,stream_end_time) VALUES (1,1,1,'2023-01-01 10:00:00','2023-01-01 12:00:00'),(2,2,2,'2023-01-02 10:00:00','2023-01-02 12:00:00'),(3,3,3,'2023-01-03 10:00:00','2023-01-03 12:00:00'),(4,4,4,'2023-01-04 10:00:00','2023-01-04 12:00:00'),(5,5,5,'2023-01-05 10:00:00','2023-01-05 12:00:00');\nINSERT INTO \"Streamings_Payments\" (streaming_id,payment_id) VALUES (1,1),(2,1),(3,2),(4,2),(5,3),(3,1),(4,1),(5,1);\nINSERT INTO \"Subscriptions\" (subscription_id,user_id,start_date,end_date,status) VALUES (1,1,'2023-01-01','2023-12-31','Active'),(2,2,'2023-02-01','2023-12-31','Inactive'),(3,3,'2023-03-01','2023-12-31','Canceled'),(4,4,'2023-04-01','2023-12-31','Expired'),(5,5,'2023-05-01','2023-12-31','Active');\nINSERT INTO \"Users\" (id,username,email) VALUES (1,'User1','user1@example.com'),(2,'User2','user2@example.com'),(3,'User3','user3@example.com'),(4,'User4','user4@example.com'),(5,'User5','user5@example.com');\n",
      "question": "What payment type is used at least once for every streaming?",
      "gold_queries": [
        "SELECT Payments.payment_type  from streamings_payments join streamings  ON Streamings_Payments.streaming_id = streamings.streaming_id join payments  ON Streamings_Payments.payment_id = payments.payment_id GROUP BY Streamings_Payments.payment_id HAVING COUNT(DISTINCT Streamings_Payments.streaming_id) = (SELECT COUNT(*) FROM  Streamings)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Which payment types are associated with each streaming session?",
          "sql_queries": [
            "SELECT s.streaming_id, p.payment_type\nFROM Streamings_Payments sp\nJOIN Payments p ON sp.payment_id = p.payment_id\nJOIN Streamings s ON sp.streaming_id = s.streaming_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List the unique payment types used for all streamings.",
          "sql_queries": [
            "SELECT DISTINCT payment_type FROM Payments WHERE payment_id IN (SELECT payment_id FROM Streamings_Payments)"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "For each distinct streaming, what payment type was used?",
          "sql_queries": [
            "SELECT S.streaming_id, P.payment_type\nFROM Streamings_Payments SP\nJOIN Payments P ON SP.payment_id = P.payment_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT S.streaming_id, P.payment_type\nFROM Streamings_Payments SP\nJOIN Payments P ON SP.payment_id = P.payment_id",
                "original_exception": "no such column: S.streaming_id"
              }
            ],
            "all_found": false
          }
        },
        {
          "interpretation": "Identify the payment types that occur in at least one streaming record.",
          "sql_queries": [
            "SELECT DISTINCT T2.payment_type FROM Streamings_Payments AS T1 JOIN Payments AS T2 ON T1.payment_id = T2.payment_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [
          {
            "query": "SELECT S.streaming_id, P.payment_type\nFROM Streamings_Payments SP\nJOIN Payments P ON SP.payment_id = P.payment_id",
            "original_exception": "no such column: S.streaming_id"
          }
        ],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_service_advertisement/scope_streaming_service_advertisement.sqlite",
      "db_dump": "CREATE TABLE Advertisement (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT,\n    duration REAL\n);\nCREATE TABLE Streaming_Service (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    platform TEXT\n);\nCREATE TABLE Streaming_Service_Advertisement (\n    streaming_service_id INTEGER,\n    advertisement_id INTEGER,\n    FOREIGN KEY(streaming_service_id) REFERENCES Streaming_Service(id),\n    FOREIGN KEY(advertisement_id) REFERENCES Advertisement(id)\n);\n\nINSERT INTO \"Advertisement\" (id,type,duration) VALUES (1,'Pre_roll_Ads',30.0),(2,'Mid_roll_Ads',60.0),(3,'Post_roll_Ads',120.0),(4,'Banner_Ads',10.0),(5,'Interstitial_Ads',90.0);\nINSERT INTO \"Streaming_Service\" (id,name,platform) VALUES (1,'Netflix','Web'),(2,'Hulu','Web'),(3,'Amazon Prime Video','Web'),(4,'Disney+','App'),(5,'HBO Max','App');\nINSERT INTO \"Streaming_Service_Advertisement\" (streaming_service_id,advertisement_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\n",
      "question": "Provide me with the advertisement type that is common for all streaming services.",
      "gold_queries": [
        "SELECT Advertisement.type  from Streaming_Service_Advertisement join Advertisement on Streaming_Service_Advertisement.advertisement_id = Advertisement.id join Streaming_Service on Streaming_Service_Advertisement.streaming_service_id = Streaming_Service.id   GROUP BY Streaming_Service_Advertisement.advertisement_id HAVING COUNT(DISTINCT Streaming_Service_Advertisement.streaming_service_id) = (SELECT COUNT(*) FROM  Streaming_Service)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List the advertisement type present in the intersection of all streaming service advertisements.",
          "sql_queries": [
            "SELECT A.type FROM Advertisement A JOIN Streaming_Service_Advertisement SSA ON A.id = SSA.advertisement_id GROUP BY A.type HAVING COUNT(DISTINCT SSA.streaming_service_id) = (SELECT COUNT(*) FROM Streaming_Service)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Reveal the advertisement type shared by a majority of streaming services.",
          "sql_queries": [
            "SELECT type FROM Advertisement WHERE id = (SELECT advertisement_id FROM Streaming_Service_Advertisement GROUP BY advertisement_id ORDER BY COUNT(*) DESC LIMIT 1)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Determine the advertisement type with the greatest frequency across all streaming services.",
          "sql_queries": [
            "SELECT type\nFROM Advertisement\nJOIN Streaming_Service_Advertisement ON Advertisement.id = Streaming_Service_Advertisement.advertisement_id\nGROUP BY type\nORDER BY COUNT(*) DESC\nLIMIT 1"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Find the advertisement type appearing in all rows of Streaming_Service_Advertisement.",
          "sql_queries": [
            "SELECT type \nFROM Advertisement \nWHERE id IN (\n    SELECT advertisement_id \n    FROM Streaming_Service_Advertisement\n) \nGROUP BY type \nHAVING COUNT(DISTINCT streaming_service_id) = (SELECT COUNT(*) FROM Streaming_Service_Advertisement)"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT type \nFROM Advertisement \nWHERE id IN (\n    SELECT advertisement_id \n    FROM Streaming_Service_Advertisement\n) \nGROUP BY type \nHAVING COUNT(DISTINCT streaming_service_id) = (SELECT COUNT(*) FROM Streaming_Service_Advertisement)",
                "original_exception": "no such column: streaming_service_id"
              }
            ],
            "all_found": false
          }
        },
        {
          "interpretation": "Identify the advertisement type associated with the maximum number of streaming services.",
          "sql_queries": [
            "SELECT type FROM Advertisement WHERE id = (SELECT advertisement_id FROM Streaming_Service_Advertisement GROUP BY advertisement_id ORDER BY COUNT(*) DESC LIMIT 1)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.75,
        "f1_score": 0.8571428571428571,
        "num_queries": 5,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [
          {
            "query": "SELECT type \nFROM Advertisement \nWHERE id IN (\n    SELECT advertisement_id \n    FROM Streaming_Service_Advertisement\n) \nGROUP BY type \nHAVING COUNT(DISTINCT streaming_service_id) = (SELECT COUNT(*) FROM Streaming_Service_Advertisement)",
            "original_exception": "no such column: streaming_service_id"
          }
        ],
        "all_found": true
      },
      "matched_gold_sql": 4
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_service_advertisement/scope_streaming_service_advertisement.sqlite",
      "db_dump": "CREATE TABLE Advertisement (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT,\n    duration REAL\n);\nCREATE TABLE Streaming_Service (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    platform TEXT\n);\nCREATE TABLE Streaming_Service_Advertisement (\n    streaming_service_id INTEGER,\n    advertisement_id INTEGER,\n    FOREIGN KEY(streaming_service_id) REFERENCES Streaming_Service(id),\n    FOREIGN KEY(advertisement_id) REFERENCES Advertisement(id)\n);\n\nINSERT INTO \"Advertisement\" (id,type,duration) VALUES (1,'Pre_roll_Ads',30.0),(2,'Mid_roll_Ads',60.0),(3,'Post_roll_Ads',120.0),(4,'Banner_Ads',10.0),(5,'Interstitial_Ads',90.0);\nINSERT INTO \"Streaming_Service\" (id,name,platform) VALUES (1,'Netflix','Web'),(2,'Hulu','Web'),(3,'Amazon Prime Video','Web'),(4,'Disney+','App'),(5,'HBO Max','App');\nINSERT INTO \"Streaming_Service_Advertisement\" (streaming_service_id,advertisement_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\n",
      "question": "Which advertisement types are associated with each streaming service?",
      "gold_queries": [
        "SELECT Advertisement.type  from Streaming_Service_Advertisement join Advertisement on Streaming_Service_Advertisement.advertisement_id = Advertisement.id join Streaming_Service on Streaming_Service_Advertisement.streaming_service_id = Streaming_Service.id   GROUP BY Streaming_Service_Advertisement.advertisement_id HAVING COUNT(DISTINCT Streaming_Service_Advertisement.streaming_service_id) = (SELECT COUNT(*) FROM  Streaming_Service)",
        "select streaming_service.name , advertisement.type from Streaming_Service_Advertisement join Advertisement on Streaming_Service_Advertisement.advertisement_id = Advertisement.id join Streaming_Service on Streaming_Service_Advertisement.streaming_service_id = Streaming_Service.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Which Advertisement types are linked to each Streaming_Service in the table?",
          "sql_queries": [
            "SELECT ss.name, a.type \nFROM Streaming_Service ss \nJOIN Streaming_Service_Advertisement ssa ON ss.id = ssa.streaming_service_id \nJOIN Advertisement a ON ssa.advertisement_id = a.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "What advertisements are displayed on each streaming platform?",
          "sql_queries": [
            "SELECT S.platform, A.type \nFROM Streaming_Service_Advertisement SSA \nJOIN Streaming_Service S ON SSA.streaming_service_id = S.id \nJOIN Advertisement A ON SSA.advertisement_id = A.id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List the advertisement types used by each streaming service.",
          "sql_queries": [
            "SELECT ss.name, a.type\nFROM Streaming_Service ss\nJOIN Streaming_Service_Advertisement ssa ON ss.id = ssa.streaming_service_id\nJOIN Advertisement a ON ssa.advertisement_id = a.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Which advertisement types are shown on each streaming service?",
          "sql_queries": [
            "SELECT s.name, a.type\nFROM Streaming_Service s\nJOIN Streaming_Service_Advertisement ssa ON s.id = ssa.streaming_service_id\nJOIN Advertisement a ON ssa.advertisement_id = a.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "For each streaming service, what types of advertisements are present?",
          "sql_queries": [
            "SELECT s.name, a.type\nFROM Streaming_Service s\nJOIN Streaming_Service_Advertisement ssa ON s.id = ssa.streaming_service_id\nJOIN Advertisement a ON ssa.advertisement_id = a.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.75,
        "f1_score": 0.6,
        "num_queries": 5,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 4
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_service_advertisement/scope_streaming_service_advertisement.sqlite",
      "db_dump": "CREATE TABLE Advertisement (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT,\n    duration REAL\n);\nCREATE TABLE Streaming_Service (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    platform TEXT\n);\nCREATE TABLE Streaming_Service_Advertisement (\n    streaming_service_id INTEGER,\n    advertisement_id INTEGER,\n    FOREIGN KEY(streaming_service_id) REFERENCES Streaming_Service(id),\n    FOREIGN KEY(advertisement_id) REFERENCES Advertisement(id)\n);\n\nINSERT INTO \"Advertisement\" (id,type,duration) VALUES (1,'Pre_roll_Ads',30.0),(2,'Mid_roll_Ads',60.0),(3,'Post_roll_Ads',120.0),(4,'Banner_Ads',10.0),(5,'Interstitial_Ads',90.0);\nINSERT INTO \"Streaming_Service\" (id,name,platform) VALUES (1,'Netflix','Web'),(2,'Hulu','Web'),(3,'Amazon Prime Video','Web'),(4,'Disney+','App'),(5,'HBO Max','App');\nINSERT INTO \"Streaming_Service_Advertisement\" (streaming_service_id,advertisement_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\n",
      "question": "For each streaming service, list the corresponding advertisement types.",
      "gold_queries": [
        "select streaming_service.name , advertisement.type from Streaming_Service_Advertisement join Advertisement on Streaming_Service_Advertisement.advertisement_id = Advertisement.id join Streaming_Service on Streaming_Service_Advertisement.streaming_service_id = Streaming_Service.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List all advertisement types used by each streaming service.",
          "sql_queries": [
            "SELECT SS.name AS Streaming_Service, A.type AS Advertisement_Type\nFROM Streaming_Service SS\nJOIN Streaming_Service_Advertisement SSA ON SS.id = SSA.streaming_service_id\nJOIN Advertisement A ON SSA.advertisement_id = A.id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Show a mapping of streaming services to the advertisements they utilize.",
          "sql_queries": [
            "SELECT SS.name AS Streaming_Service, A.type AS Advertisement_Type\nFROM Streaming_Service_Advertisement SSA\nJOIN Streaming_Service SS ON SSA.streaming_service_id = SS.id\nJOIN Advertisement A ON SSA.advertisement_id = A.id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Retrieve advertisement categories associated with every streaming platform.",
          "sql_queries": [
            "SELECT DISTINCT S.platform, A.type\nFROM Streaming_Service Advertisements AS S\nJOIN Streaming_Service_Advertisement AS SSA ON S.id = SSA.streaming_service_id\nJOIN Advertisement AS A ON SSA.advertisement_id = A.id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT DISTINCT S.platform, A.type\nFROM Streaming_Service Advertisements AS S\nJOIN Streaming_Service_Advertisement AS SSA ON S.id = SSA.streaming_service_id\nJOIN Advertisement AS A ON SSA.advertisement_id = A.id",
                "original_exception": "near \"AS\": syntax error"
              }
            ],
            "all_found": false
          }
        },
        {
          "interpretation": "Display the types of advertisements present for every streaming service.",
          "sql_queries": [
            "SELECT DISTINCT ss.name, a.type \nFROM Streaming_Service ss \nJOIN Streaming_Service_Advertisement ssa ON ss.id = ssa.streaming_service_id \nJOIN Advertisement a ON ssa.advertisement_id = a.id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "For each streaming service, enumerate the advertisement types it employs.",
          "sql_queries": [
            "SELECT S.name, A.type\nFROM Streaming_Service S\nJOIN Streaming_Service_Advertisement SSA ON S.id = SSA.streaming_service_id\nJOIN Advertisement A ON SSA.advertisement_id = A.id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.8,
        "f1_score": 0.888888888888889,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [
          {
            "query": "SELECT DISTINCT S.platform, A.type\nFROM Streaming_Service Advertisements AS S\nJOIN Streaming_Service_Advertisement AS SSA ON S.id = SSA.streaming_service_id\nJOIN Advertisement AS A ON SSA.advertisement_id = A.id",
            "original_exception": "near \"AS\": syntax error"
          }
        ],
        "all_found": true
      },
      "matched_gold_sql": 4
    },
    {
      "db_file": "data/scope/Journalism/scope_legal_affairs_reporters_jurisdictions/scope_legal_affairs_reporters_jurisdictions.sqlite",
      "db_dump": "CREATE TABLE Jurisdictions (\n    jurisdiction_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    jurisdiction_name TEXT\n);\nCREATE TABLE Legal_Affairs_Reporters (\n    reporter_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT\n);\nCREATE TABLE Legal_Affairs_Reporters_Jurisdictions (\n    legal_affairs_reporter_id INTEGER,\n    jurisdiction_id INTEGER,\n    FOREIGN KEY(legal_affairs_reporter_id) REFERENCES Legal_Affairs_Reporters(reporter_id),\n    FOREIGN KEY(jurisdiction_id) REFERENCES Jurisdictions(jurisdiction_id)\n);\n\nINSERT INTO \"Jurisdictions\" (jurisdiction_id,jurisdiction_name) VALUES (1,'Federal Courts'),(2,'State Courts'),(3,'Appellate Courts'),(4,'District Courts'),(5,'Supreme Court');\nINSERT INTO \"Legal_Affairs_Reporters\" (reporter_id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com'),(3,'Michael Brown','michael@example.com'),(4,'Emily Davis','emily@example.com'),(5,'David Johnson','david@example.com');\nINSERT INTO \"Legal_Affairs_Reporters_Jurisdictions\" (legal_affairs_reporter_id,jurisdiction_id) VALUES (1,1),(2,3),(3,4),(4,2),(5,6),(2,1),(3,1),(4,1),(5,1);\n",
      "question": "Provide me with the jurisdiction name that is common for all legal affairs reporters.",
      "gold_queries": [
        "SELECT Jurisdictions.jurisdiction_name  from Legal_Affairs_Reporters_Jurisdictions join Jurisdictions on Legal_Affairs_Reporters_Jurisdictions.jurisdiction_id = Jurisdictions.jurisdiction_id join Legal_Affairs_Reporters on Legal_Affairs_Reporters_Jurisdictions.legal_affairs_reporter_id = Legal_Affairs_Reporters.reporter_id   GROUP BY Legal_Affairs_Reporters_Jurisdictions.jurisdiction_id HAVING COUNT(DISTINCT Legal_Affairs_Reporters_Jurisdictions.legal_affairs_reporter_id) = (SELECT COUNT(*) FROM  Legal_Affairs_Reporters)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Identify the jurisdiction where all reporters are assigned.",
          "sql_queries": [
            "SELECT J.jurisdiction_name\nFROM Jurisdictions J\nWHERE NOT EXISTS (\n    SELECT 1\n    FROM Legal_Affairs_Reporters R\n    WHERE NOT EXISTS (\n        SELECT 1\n        FROM Legal_Affairs_Reporters_Jurisdictions LARJ\n        WHERE LARJ.legal_affairs_reporter_id = R.reporter_id AND LARJ.jurisdiction_id = J.jurisdiction_id\n    )\n)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Find the jurisdiction with the highest number of associated reporters.",
          "sql_queries": [
            "SELECT T1.jurisdiction_name\nFROM Jurisdictions T1\nJOIN Legal_Affairs_Reporters_Jurisdictions T2 ON T1.jurisdiction_id = T2.jurisdiction_id\nGROUP BY T1.jurisdiction_name\nORDER BY COUNT(*) DESC\nLIMIT 1"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/scope/Journalism/scope_legal_affairs_reporters_jurisdictions/scope_legal_affairs_reporters_jurisdictions.sqlite",
      "db_dump": "CREATE TABLE Jurisdictions (\n    jurisdiction_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    jurisdiction_name TEXT\n);\nCREATE TABLE Legal_Affairs_Reporters (\n    reporter_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT\n);\nCREATE TABLE Legal_Affairs_Reporters_Jurisdictions (\n    legal_affairs_reporter_id INTEGER,\n    jurisdiction_id INTEGER,\n    FOREIGN KEY(legal_affairs_reporter_id) REFERENCES Legal_Affairs_Reporters(reporter_id),\n    FOREIGN KEY(jurisdiction_id) REFERENCES Jurisdictions(jurisdiction_id)\n);\n\nINSERT INTO \"Jurisdictions\" (jurisdiction_id,jurisdiction_name) VALUES (1,'Federal Courts'),(2,'State Courts'),(3,'Appellate Courts'),(4,'District Courts'),(5,'Supreme Court');\nINSERT INTO \"Legal_Affairs_Reporters\" (reporter_id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com'),(3,'Michael Brown','michael@example.com'),(4,'Emily Davis','emily@example.com'),(5,'David Johnson','david@example.com');\nINSERT INTO \"Legal_Affairs_Reporters_Jurisdictions\" (legal_affairs_reporter_id,jurisdiction_id) VALUES (1,1),(2,3),(3,4),(4,2),(5,6),(2,1),(3,1),(4,1),(5,1);\n",
      "question": "For each legal affairs reporter, give me the corresponding jurisdiction names.",
      "gold_queries": [
        "select legal_affairs_reporters.name , jurisdictions.jurisdiction_name from Legal_Affairs_Reporters_Jurisdictions join Jurisdictions on Legal_Affairs_Reporters_Jurisdictions.jurisdiction_id = Jurisdictions.jurisdiction_id join Legal_Affairs_Reporters on Legal_Affairs_Reporters_Jurisdictions.legal_affairs_reporter_id = Legal_Affairs_Reporters.reporter_id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List every legal affairs reporter and, for each one, show the corresponding jurisdiction name(s) from the linked table.",
          "sql_queries": [
            "SELECT l.name, j.jurisdiction_name\nFROM Legal_Affairs_Reporters l\nJOIN Legal_Affairs_Reporters_Jurisdictions lj ON l.reporter_id = lj.legal_affairs_reporter_id\nJOIN Jurisdictions j ON lj.jurisdiction_id = j.jurisdiction_id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Retrieve a list of legal affairs reporters and their assigned jurisdiction names.",
          "sql_queries": [
            "SELECT Legal_Affairs_Reporters.name, Jurisdictions.jurisdiction_name\nFROM Legal_Affairs_Reporters\nJOIN Legal_Affairs_Reporters_Jurisdictions ON Legal_Affairs_Reporters.reporter_id = Legal_Affairs_Reporters_Jurisdictions.legal_affairs_reporter_id\nJOIN Jurisdictions ON Legal_Affairs_Reporters_Jurisdictions.jurisdiction_id = Jurisdictions.jurisdiction_id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Generate a table with columns for 'Legal Affairs Reporter' and 'Jurisdiction Name', populating it with data from the relevant tables.",
          "sql_queries": [
            "SELECT Legal_Affairs_Reporters.name AS 'Legal Affairs Reporter', Jurisdictions.jurisdiction_name AS 'Jurisdiction Name'\nFROM Legal_Affairs_Reporters\nJOIN Legal_Affairs_Reporters_Jurisdictions ON Legal_Affairs_Reporters.reporter_id = Legal_Affairs_Reporters_Jurisdictions.legal_affairs_reporter_id\nJOIN Jurisdictions ON Legal_Affairs_Reporters_Jurisdictions.jurisdiction_id = Jurisdictions.jurisdiction_id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "For each legal affairs reporter, output the names of all jurisdictions they cover.",
          "sql_queries": [
            "SELECT LAR.name, J.jurisdiction_name \nFROM Legal_Affairs_Reporters_Jurisdictions LARJ \nJOIN Legal_Affairs_Reporters LAR ON LARJ.legal_affairs_reporter_id = LAR.reporter_id \nJOIN Jurisdictions J ON LARJ.jurisdiction_id = J.jurisdiction_id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Display a report with each legal affairs reporter, followed by a comma-separated list of jurisdiction names associated with them.",
          "sql_queries": [
            "SELECT LAR.name, GROUP_CONCAT(J.jurisdiction_name, ', ') AS jurisdictions\nFROM Legal_Affairs_Reporters LAR\nJOIN Legal_Affairs_Reporters_Jurisdictions LARJ ON LAR.reporter_id = LARJ.legal_affairs_reporter_id\nJOIN Jurisdictions J ON LARJ.jurisdiction_id = J.jurisdiction_id\nGROUP BY LAR.name"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.8,
        "f1_score": 0.888888888888889,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 4
    },
    {
      "db_file": "data/scope/Journalism/scope_legal_affairs_reporters_jurisdictions/scope_legal_affairs_reporters_jurisdictions.sqlite",
      "db_dump": "CREATE TABLE Jurisdictions (\n    jurisdiction_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    jurisdiction_name TEXT\n);\nCREATE TABLE Legal_Affairs_Reporters (\n    reporter_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT\n);\nCREATE TABLE Legal_Affairs_Reporters_Jurisdictions (\n    legal_affairs_reporter_id INTEGER,\n    jurisdiction_id INTEGER,\n    FOREIGN KEY(legal_affairs_reporter_id) REFERENCES Legal_Affairs_Reporters(reporter_id),\n    FOREIGN KEY(jurisdiction_id) REFERENCES Jurisdictions(jurisdiction_id)\n);\n\nINSERT INTO \"Jurisdictions\" (jurisdiction_id,jurisdiction_name) VALUES (1,'Federal Courts'),(2,'State Courts'),(3,'Appellate Courts'),(4,'District Courts'),(5,'Supreme Court');\nINSERT INTO \"Legal_Affairs_Reporters\" (reporter_id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com'),(3,'Michael Brown','michael@example.com'),(4,'Emily Davis','emily@example.com'),(5,'David Johnson','david@example.com');\nINSERT INTO \"Legal_Affairs_Reporters_Jurisdictions\" (legal_affairs_reporter_id,jurisdiction_id) VALUES (1,1),(2,3),(3,4),(4,2),(5,6),(2,1),(3,1),(4,1),(5,1);\n",
      "question": "Which jurisdiction names are associated with each legal affairs reporter?",
      "gold_queries": [
        "SELECT Jurisdictions.jurisdiction_name  from Legal_Affairs_Reporters_Jurisdictions join Jurisdictions on Legal_Affairs_Reporters_Jurisdictions.jurisdiction_id = Jurisdictions.jurisdiction_id join Legal_Affairs_Reporters on Legal_Affairs_Reporters_Jurisdictions.legal_affairs_reporter_id = Legal_Affairs_Reporters.reporter_id   GROUP BY Legal_Affairs_Reporters_Jurisdictions.jurisdiction_id HAVING COUNT(DISTINCT Legal_Affairs_Reporters_Jurisdictions.legal_affairs_reporter_id) = (SELECT COUNT(*) FROM  Legal_Affairs_Reporters)",
        "select legal_affairs_reporters.name , jurisdictions.jurisdiction_name from Legal_Affairs_Reporters_Jurisdictions join Jurisdictions on Legal_Affairs_Reporters_Jurisdictions.jurisdiction_id = Jurisdictions.jurisdiction_id join Legal_Affairs_Reporters on Legal_Affairs_Reporters_Jurisdictions.legal_affairs_reporter_id = Legal_Affairs_Reporters.reporter_id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Display the jurisdictions assigned to each legal affairs reporter.",
          "sql_queries": [
            "SELECT L.name, J.jurisdiction_name\nFROM Legal_Affairs_Reporters_Jurisdictions LAJ\nJOIN Legal_Affairs_Reporters L ON LAJ.legal_affairs_reporter_id = L.reporter_id\nJOIN Jurisdictions J ON LAJ.jurisdiction_id = J.jurisdiction_id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve the names of all jurisdictions for each reporter.",
          "sql_queries": [
            "SELECT LAR.name, J.jurisdiction_name\nFROM Legal_Affairs_Reporters_Jurisdictions LARJ\nJOIN Legal_Affairs_Reporters LAR ON LAR.reporter_id = LARJ.legal_affairs_reporter_id\nJOIN Jurisdictions J ON J.jurisdiction_id = LARJ.jurisdiction_id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List every jurisdiction covered by each legal affairs reporter.",
          "sql_queries": [
            "SELECT LAR.name, J.jurisdiction_name\nFROM Legal_Affairs_Reporters_Jurisdictions LARJ\nJOIN Legal_Affairs_Reporters LAR ON LARJ.legal_affairs_reporter_id = LAR.reporter_id\nJOIN Jurisdictions J ON LARJ.jurisdiction_id = J.jurisdiction_id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "For each legal affairs reporter, identify the corresponding jurisdictions.",
          "sql_queries": [
            "SELECT LAR.name, J.jurisdiction_name\nFROM Legal_Affairs_Reporters_Jurisdictions LARJ\nJOIN Legal_Affairs_Reporters LAR ON LARJ.legal_affairs_reporter_id = LAR.reporter_id\nJOIN Jurisdictions J ON LARJ.jurisdiction_id = J.jurisdiction_id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 1.0,
        "f1_score": 0.6666666666666666,
        "num_queries": 4,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 4
    },
    {
      "db_file": "data/scope/Job Postings/scope_ux_designers_components/scope_ux_designers_components.sqlite",
      "db_dump": "CREATE TABLE Components (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    component_name TEXT,\n    description TEXT\n);\nCREATE TABLE Ux_Designers (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    years_of_experience INT \n);\nCREATE TABLE Ux_Designers_Components (\n    ux_designer_id INTEGER,\n    component_id INTEGER,\n    FOREIGN KEY (ux_designer_id) REFERENCES Ux_Designers (id),\n    FOREIGN KEY (component_id) REFERENCES Components (id)\n);\n\nINSERT INTO \"Components\" (id,component_name,description) VALUES (1,'Navigation','A navigation system helps users move between different sections of a website.'),(2,'User Interface Design','UI design involves creating interfaces that are visually appealing and user-friendly.'),(3,'Responsive Web Design','RWD ensures that websites function well on various devices and screen sizes.'),(4,'Interaction Design','ID focuses on designing interactive elements within a UI to create an engaging experience.'),(5,'Usability Testing','Testing how easy it is for users to complete tasks on a website.');\nINSERT INTO \"Ux_Designers\" (id,name,years_of_experience) VALUES (1,'John Doe',3),(2,'Jane Smith',2),(3,'Mike Johnson',6),(4,'Emily Davis',1),(5,'David Brown',7);\nINSERT INTO \"Ux_Designers_Components\" (ux_designer_id,component_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "For each UX designer, show me the component descriptions.",
      "gold_queries": [
        "select ux_designers.name , components.description from Ux_Designers_Components join Components on Ux_Designers_Components.component_id = Components.id join Ux_Designers on Ux_Designers_Components.ux_designer_id = Ux_Designers.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Retrieve the component descriptions for each UX designer, pairing the designer's name with the descriptions of all components they are associated with.",
          "sql_queries": [
            "SELECT Ux_Designers.name, Components.description\nFROM Ux_Designers\nJOIN Ux_Designers_Components ON Ux_Designers.id = Ux_Designers_Components.ux_designer_id\nJOIN Components ON Ux_Designers_Components.component_id = Components.id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Provide a list of all UX designer names, with a corresponding list of component descriptions for each designer.",
          "sql_queries": [
            "SELECT Ux_Designers.name, Components.description\nFROM Ux_Designers\nJOIN Ux_Designers_Components ON Ux_Designers.id = Ux_Designers_Components.ux_designer_id\nJOIN Components ON Ux_Designers_Components.component_id = Components.id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "List all component descriptions, grouped by the UX designer who is associated with each component.",
          "sql_queries": [
            "SELECT ux_designer_id, GROUP_CONCAT(description) AS component_descriptions\nFROM Ux_Designers_Components\nJOIN Components ON Ux_Designers_Components.component_id = Components.id\nGROUP BY ux_designer_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Display a table showing each UX designer and a separate column for the descriptions of all components they have worked on.",
          "sql_queries": [
            "SELECT Ux_Designers.name, GROUP_CONCAT(Components.description, ', ') AS component_descriptions\nFROM Ux_Designers\nJOIN Ux_Designers_Components ON Ux_Designers.id = Ux_Designers_Components.ux_designer_id\nJOIN Components ON Ux_Designers_Components.component_id = Components.id\nGROUP BY Ux_Designers.name"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 4,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/scope/Job Postings/scope_ux_designers_components/scope_ux_designers_components.sqlite",
      "db_dump": "CREATE TABLE Components (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    component_name TEXT,\n    description TEXT\n);\nCREATE TABLE Ux_Designers (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    years_of_experience INT \n);\nCREATE TABLE Ux_Designers_Components (\n    ux_designer_id INTEGER,\n    component_id INTEGER,\n    FOREIGN KEY (ux_designer_id) REFERENCES Ux_Designers (id),\n    FOREIGN KEY (component_id) REFERENCES Components (id)\n);\n\nINSERT INTO \"Components\" (id,component_name,description) VALUES (1,'Navigation','A navigation system helps users move between different sections of a website.'),(2,'User Interface Design','UI design involves creating interfaces that are visually appealing and user-friendly.'),(3,'Responsive Web Design','RWD ensures that websites function well on various devices and screen sizes.'),(4,'Interaction Design','ID focuses on designing interactive elements within a UI to create an engaging experience.'),(5,'Usability Testing','Testing how easy it is for users to complete tasks on a website.');\nINSERT INTO \"Ux_Designers\" (id,name,years_of_experience) VALUES (1,'John Doe',3),(2,'Jane Smith',2),(3,'Mike Johnson',6),(4,'Emily Davis',1),(5,'David Brown',7);\nINSERT INTO \"Ux_Designers_Components\" (ux_designer_id,component_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "Which components are the same for all UX designers?",
      "gold_queries": [
        "SELECT Components.component_name  from Ux_Designers_Components join Components on Ux_Designers_Components.component_id = Components.id join Ux_Designers on Ux_Designers_Components.ux_designer_id = Ux_Designers.id   GROUP BY Ux_Designers_Components.component_id HAVING COUNT(DISTINCT Ux_Designers_Components.ux_designer_id) = (SELECT COUNT(*) FROM  Ux_Designers)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For every ux designer, which components are consistently assigned?",
          "sql_queries": [
            "SELECT DISTINCT u.name, c.component_name \nFROM Ux_Designers u \nJOIN Ux_Designers_Components ud ON u.id = ud.ux_designer_id \nJOIN Components c ON ud.component_id = c.id \nWHERE u.id IN (\n    SELECT ux_designer_id \n    FROM Ux_Designers_Components \n    GROUP BY ux_designer_id \n    HAVING COUNT(component_id) > 1\n)"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Which components are listed in the Ux_Designers_Components table for every ux designer?",
          "sql_queries": [
            "SELECT C.component_name\nFROM Components C\nWHERE C.id IN (\n    SELECT UC.component_id\n    FROM Ux_Designers_Components UC\n    GROUP BY UC.component_id\n    HAVING COUNT(DISTINCT UC.ux_designer_id) = (SELECT COUNT(*) FROM Ux_Designers)\n)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Which components have been assigned to all ux designers?",
          "sql_queries": [
            "SELECT component_name\nFROM Components\nWHERE id IN (\n    SELECT component_id\n    FROM Ux_Designers_Components\n    GROUP BY component_id\n    HAVING COUNT(DISTINCT ux_designer_id) = (SELECT COUNT(*) FROM Ux_Designers)\n)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "What components are common to the work of all ux designers, regardless of experience?",
          "sql_queries": [
            "SELECT.component_name \nFROM Components \nWHERE id IN (\n    SELECT component_id \n    FROM Ux_Designers_Components \n    GROUP BY component_id \n    HAVING COUNT(DISTINCT ux_designer_id) = (\n        SELECT COUNT(*) FROM Ux_Designers\n    )\n)"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT.component_name \nFROM Components \nWHERE id IN (\n    SELECT component_id \n    FROM Ux_Designers_Components \n    GROUP BY component_id \n    HAVING COUNT(DISTINCT ux_designer_id) = (\n        SELECT COUNT(*) FROM Ux_Designers\n    )\n)",
                "original_exception": "near \".\": syntax error"
              }
            ],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [
          {
            "query": "SELECT.component_name \nFROM Components \nWHERE id IN (\n    SELECT component_id \n    FROM Ux_Designers_Components \n    GROUP BY component_id \n    HAVING COUNT(DISTINCT ux_designer_id) = (\n        SELECT COUNT(*) FROM Ux_Designers\n    )\n)",
            "original_exception": "near \".\": syntax error"
          }
        ],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/scope/Job Postings/scope_ux_designers_components/scope_ux_designers_components.sqlite",
      "db_dump": "CREATE TABLE Components (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    component_name TEXT,\n    description TEXT\n);\nCREATE TABLE Ux_Designers (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    years_of_experience INT \n);\nCREATE TABLE Ux_Designers_Components (\n    ux_designer_id INTEGER,\n    component_id INTEGER,\n    FOREIGN KEY (ux_designer_id) REFERENCES Ux_Designers (id),\n    FOREIGN KEY (component_id) REFERENCES Components (id)\n);\n\nINSERT INTO \"Components\" (id,component_name,description) VALUES (1,'Navigation','A navigation system helps users move between different sections of a website.'),(2,'User Interface Design','UI design involves creating interfaces that are visually appealing and user-friendly.'),(3,'Responsive Web Design','RWD ensures that websites function well on various devices and screen sizes.'),(4,'Interaction Design','ID focuses on designing interactive elements within a UI to create an engaging experience.'),(5,'Usability Testing','Testing how easy it is for users to complete tasks on a website.');\nINSERT INTO \"Ux_Designers\" (id,name,years_of_experience) VALUES (1,'John Doe',3),(2,'Jane Smith',2),(3,'Mike Johnson',6),(4,'Emily Davis',1),(5,'David Brown',7);\nINSERT INTO \"Ux_Designers_Components\" (ux_designer_id,component_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "Give me the names and descriptions of the components every UX designer uses.",
      "gold_queries": [
        "SELECT Components.component_name, Components.description  from Ux_Designers_Components join Components on Ux_Designers_Components.component_id = Components.id join Ux_Designers on Ux_Designers_Components.ux_designer_id = Ux_Designers.id   GROUP BY Ux_Designers_Components.component_id HAVING COUNT(DISTINCT Ux_Designers_Components.ux_designer_id) = (SELECT COUNT(*) FROM  Ux_Designers)",
        "select ux_designers.name , components.component_name , components.description from Ux_Designers_Components join Components on Ux_Designers_Components.component_id = Components.id join Ux_Designers on Ux_Designers_Components.ux_designer_id = Ux_Designers.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Retrieve the names and descriptions of components from the `Components` table that have a corresponding entry in the `Ux_Designers_Components` table.",
          "sql_queries": [
            "SELECT c.component_name, c.description\nFROM Components c\nJOIN Ux_Designers_Components udc ON c.id = udc.component_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Identify each unique UX designer and list the component names and descriptions they are associated with.",
          "sql_queries": [
            "SELECT U.name, C.component_name, C.description\nFROM Ux_Designers U\nJOIN Ux_Designers_Components UDC ON U.id = UDC.ux_designer_id\nJOIN Components C ON UDC.component_id = C.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all components and their descriptions present in the `Components` table.",
          "sql_queries": [
            "SELECT component_name, description FROM Components"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.3333333333333333,
        "f1_score": 0.4,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Job Postings/scope_ux_designers_components/scope_ux_designers_components.sqlite",
      "db_dump": "CREATE TABLE Components (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    component_name TEXT,\n    description TEXT\n);\nCREATE TABLE Ux_Designers (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    years_of_experience INT \n);\nCREATE TABLE Ux_Designers_Components (\n    ux_designer_id INTEGER,\n    component_id INTEGER,\n    FOREIGN KEY (ux_designer_id) REFERENCES Ux_Designers (id),\n    FOREIGN KEY (component_id) REFERENCES Components (id)\n);\n\nINSERT INTO \"Components\" (id,component_name,description) VALUES (1,'Navigation','A navigation system helps users move between different sections of a website.'),(2,'User Interface Design','UI design involves creating interfaces that are visually appealing and user-friendly.'),(3,'Responsive Web Design','RWD ensures that websites function well on various devices and screen sizes.'),(4,'Interaction Design','ID focuses on designing interactive elements within a UI to create an engaging experience.'),(5,'Usability Testing','Testing how easy it is for users to complete tasks on a website.');\nINSERT INTO \"Ux_Designers\" (id,name,years_of_experience) VALUES (1,'John Doe',3),(2,'Jane Smith',2),(3,'Mike Johnson',6),(4,'Emily Davis',1),(5,'David Brown',7);\nINSERT INTO \"Ux_Designers_Components\" (ux_designer_id,component_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "For every UX designer, list the names and descriptions of the components used.",
      "gold_queries": [
        "select ux_designers.name , components.component_name , components.description from Ux_Designers_Components join Components on Ux_Designers_Components.component_id = Components.id join Ux_Designers on Ux_Designers_Components.ux_designer_id = Ux_Designers.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For each UX designer, enumerate the components they have worked on, displaying the component name and description.",
          "sql_queries": [
            "SELECT Ux_Designers.name, Components.component_name, Components.description\nFROM Ux_Designers_Components\nJOIN Ux_Designers ON Ux_Designers_Components.ux_designer_id = Ux_Designers.id\nJOIN Components ON Ux_Designers_Components.component_id = Components.id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Provide a list of all UX designers, alongside a table displaying the component names and descriptions associated with each designer.",
          "sql_queries": [
            "SELECT \n    Ux_Designers.name, \n    Components.component_name, \n    Components.description \nFROM \n    Ux_Designers \nJOIN \n    Ux_Designers_Components \nON \n    Ux_Designers.id = Ux_Designers_Components.ux_designer_id \nJOIN \n    Components \nON \n    Ux_Designers_Components.component_id = Components.id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Generate a report listing each UX designer's name, followed by a list of components used by that designer, with each component's description.",
          "sql_queries": [
            "SELECT U.name, C.component_name, C.description\nFROM Ux_Designers U\nJOIN Ux_Designers_Components UDC ON U.id = UDC.ux_designer_id\nJOIN Components C ON UDC.component_id = C.id\nORDER BY U.name, C.component_name"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Retrieve the names of all UX designers and, for each designer, list the component names and corresponding descriptions.",
          "sql_queries": [
            "SELECT U.name, C.component_name, C.description\nFROM Ux_Designers U\nJOIN Ux_Designers_Components UDC ON U.id = UDC.ux_designer_id\nJOIN Components C ON UDC.component_id = C.id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 4
    },
    {
      "db_file": "data/scope/Job Postings/scope_ux_designers_components/scope_ux_designers_components.sqlite",
      "db_dump": "CREATE TABLE Components (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    component_name TEXT,\n    description TEXT\n);\nCREATE TABLE Ux_Designers (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    years_of_experience INT \n);\nCREATE TABLE Ux_Designers_Components (\n    ux_designer_id INTEGER,\n    component_id INTEGER,\n    FOREIGN KEY (ux_designer_id) REFERENCES Ux_Designers (id),\n    FOREIGN KEY (component_id) REFERENCES Components (id)\n);\n\nINSERT INTO \"Components\" (id,component_name,description) VALUES (1,'Navigation','A navigation system helps users move between different sections of a website.'),(2,'User Interface Design','UI design involves creating interfaces that are visually appealing and user-friendly.'),(3,'Responsive Web Design','RWD ensures that websites function well on various devices and screen sizes.'),(4,'Interaction Design','ID focuses on designing interactive elements within a UI to create an engaging experience.'),(5,'Usability Testing','Testing how easy it is for users to complete tasks on a website.');\nINSERT INTO \"Ux_Designers\" (id,name,years_of_experience) VALUES (1,'John Doe',3),(2,'Jane Smith',2),(3,'Mike Johnson',6),(4,'Emily Davis',1),(5,'David Brown',7);\nINSERT INTO \"Ux_Designers_Components\" (ux_designer_id,component_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "For every UX designer, show the components that they design.",
      "gold_queries": [
        "select ux_designers.name , components.component_name from Ux_Designers_Components join Components on Ux_Designers_Components.component_id = Components.id join Ux_Designers on Ux_Designers_Components.ux_designer_id = Ux_Designers.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Retrieve all UX designers and the components they are associated with.",
          "sql_queries": [
            "SELECT Ux_Designers.name, Components.component_name \nFROM Ux_Designers \nJOIN Ux_Designers_Components ON Ux_Designers.id = Ux_Designers_Components.ux_designer_id \nJOIN Components ON Ux_Designers_Components.component_id = Components.id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Generate a report showing the components designed by each UX designer.",
          "sql_queries": [
            "SELECT Ux_Designers.name, Components.component_name\nFROM Ux_Designers_Components\nJOIN Ux_Designers ON Ux_Designers_Components.ux_designer_id = Ux_Designers.id\nJOIN Components ON Ux_Designers_Components.component_id = Components.id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "List each UX designer and a separate list of their assigned components.",
          "sql_queries": [
            "SELECT U.name, GROUP_CONCAT(C.component_name, ', ') as components\nFROM Ux_Designers U\nJOIN Ux_Designers_Components UDC ON U.id = UDC.ux_designer_id\nJOIN Components C ON UDC.component_id = C.id\nGROUP BY U.id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Output a table with columns for UX designer name and a column for their associated components.",
          "sql_queries": [
            "SELECT UX_Designers.name, Components.component_name\nFROM UX_Designers_Components\nJOIN UX_Designers ON UX_Designers_Components.ux_designer_id = UX_Designers.id\nJOIN Components ON UX_Designers_Components.component_id = Components.id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.75,
        "f1_score": 0.8571428571428571,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/scope/Job Postings/scope_ux_designers_components/scope_ux_designers_components.sqlite",
      "db_dump": "CREATE TABLE Components (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    component_name TEXT,\n    description TEXT\n);\nCREATE TABLE Ux_Designers (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    years_of_experience INT \n);\nCREATE TABLE Ux_Designers_Components (\n    ux_designer_id INTEGER,\n    component_id INTEGER,\n    FOREIGN KEY (ux_designer_id) REFERENCES Ux_Designers (id),\n    FOREIGN KEY (component_id) REFERENCES Components (id)\n);\n\nINSERT INTO \"Components\" (id,component_name,description) VALUES (1,'Navigation','A navigation system helps users move between different sections of a website.'),(2,'User Interface Design','UI design involves creating interfaces that are visually appealing and user-friendly.'),(3,'Responsive Web Design','RWD ensures that websites function well on various devices and screen sizes.'),(4,'Interaction Design','ID focuses on designing interactive elements within a UI to create an engaging experience.'),(5,'Usability Testing','Testing how easy it is for users to complete tasks on a website.');\nINSERT INTO \"Ux_Designers\" (id,name,years_of_experience) VALUES (1,'John Doe',3),(2,'Jane Smith',2),(3,'Mike Johnson',6),(4,'Emily Davis',1),(5,'David Brown',7);\nINSERT INTO \"Ux_Designers_Components\" (ux_designer_id,component_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "What is the component description that all UX designers have in common?",
      "gold_queries": [
        "SELECT Components.description  from Ux_Designers_Components join Components on Ux_Designers_Components.component_id = Components.id join Ux_Designers on Ux_Designers_Components.ux_designer_id = Ux_Designers.id   GROUP BY Ux_Designers_Components.component_id HAVING COUNT(DISTINCT Ux_Designers_Components.ux_designer_id) = (SELECT COUNT(*) FROM  Ux_Designers)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "The description of the component that is associated with the most UX designers.",
          "sql_queries": [
            "SELECT c.description\nFROM Components c\nJOIN Ux_Designers_Components udc ON c.id = udc.component_id\nGROUP BY c.id\nORDER BY COUNT(udc.ux_designer_id) DESC\nLIMIT 1"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "The description of any component that at least one UX designer has worked on.",
          "sql_queries": [
            "SELECT DISTINCT C.description\nFROM Components C\nJOIN Ux_Designers_Components UDC ON C.id = UDC.component_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "The description of a component that all UX designers have contributed to.",
          "sql_queries": [
            "SELECT description\nFROM Components\nWHERE id IN (\n    SELECT component_id\n    FROM Ux_Designers_Components\n    GROUP BY component_id\n    HAVING COUNT(DISTINCT ux_designer_id) = (SELECT COUNT(*) FROM Ux_Designers)\n)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.6666666666666666,
        "f1_score": 0.8,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/scope/Job Postings/scope_ux_designers_components/scope_ux_designers_components.sqlite",
      "db_dump": "CREATE TABLE Components (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    component_name TEXT,\n    description TEXT\n);\nCREATE TABLE Ux_Designers (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    years_of_experience INT \n);\nCREATE TABLE Ux_Designers_Components (\n    ux_designer_id INTEGER,\n    component_id INTEGER,\n    FOREIGN KEY (ux_designer_id) REFERENCES Ux_Designers (id),\n    FOREIGN KEY (component_id) REFERENCES Components (id)\n);\n\nINSERT INTO \"Components\" (id,component_name,description) VALUES (1,'Navigation','A navigation system helps users move between different sections of a website.'),(2,'User Interface Design','UI design involves creating interfaces that are visually appealing and user-friendly.'),(3,'Responsive Web Design','RWD ensures that websites function well on various devices and screen sizes.'),(4,'Interaction Design','ID focuses on designing interactive elements within a UI to create an engaging experience.'),(5,'Usability Testing','Testing how easy it is for users to complete tasks on a website.');\nINSERT INTO \"Ux_Designers\" (id,name,years_of_experience) VALUES (1,'John Doe',3),(2,'Jane Smith',2),(3,'Mike Johnson',6),(4,'Emily Davis',1),(5,'David Brown',7);\nINSERT INTO \"Ux_Designers_Components\" (ux_designer_id,component_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "Give me the descriptions of the components corresponding to each UX designer.",
      "gold_queries": [
        "SELECT Components.description  from Ux_Designers_Components join Components on Ux_Designers_Components.component_id = Components.id join Ux_Designers on Ux_Designers_Components.ux_designer_id = Ux_Designers.id   GROUP BY Ux_Designers_Components.component_id HAVING COUNT(DISTINCT Ux_Designers_Components.ux_designer_id) = (SELECT COUNT(*) FROM  Ux_Designers)",
        "select ux_designers.name , components.description from Ux_Designers_Components join Components on Ux_Designers_Components.component_id = Components.id join Ux_Designers on Ux_Designers_Components.ux_designer_id = Ux_Designers.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List each UX designer and the descriptions of all components associated with them.",
          "sql_queries": [
            "SELECT Ux_Designers.name, Components.description\nFROM Ux_Designers\nJOIN Ux_Designers_Components ON Ux_Designers.id = Ux_Designers_Components.ux_designer_id\nJOIN Components ON Ux_Designers_Components.component_id = Components.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Return a list of all components and their descriptions for each UX designer.",
          "sql_queries": [
            "SELECT U.name, C.component_name, C.description\nFROM Ux_Designers U\nJOIN Ux_Designers_Components UDC ON U.id = UDC.ux_designer_id\nJOIN Components C ON C.id = UDC.component_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Show the component descriptions linked to each UX designer in the database.",
          "sql_queries": [
            "SELECT Ux_Designers.name, Components.description\nFROM Ux_Designers\nJOIN Ux_Designers_Components ON Ux_Designers.id = Ux_Designers_Components.ux_designer_id\nJOIN Components ON Ux_Designers_Components.component_id = Components.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Display the component descriptions for every component worked on by each UX designer.",
          "sql_queries": [
            "SELECT Ux_Designers.name, Components.description\nFROM Ux_Designers\nJOIN Ux_Designers_Components ON Ux_Designers.id = Ux_Designers_Components.ux_designer_id\nJOIN Components ON Ux_Designers_Components.component_id = Components.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "For each UX designer, retrieve the descriptions of the components they are assigned to.",
          "sql_queries": [
            "SELECT Ux_Designers.name, Components.description\nFROM Ux_Designers_Components\nJOIN Ux_Designers ON Ux_Designers_Components.ux_designer_id = Ux_Designers.id\nJOIN Components ON Ux_Designers_Components.component_id = Components.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.6666666666666666,
        "f1_score": 0.5714285714285715,
        "num_queries": 5,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 4
    },
    {
      "db_file": "data/scope/Job Postings/scope_ux_designers_components/scope_ux_designers_components.sqlite",
      "db_dump": "CREATE TABLE Components (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    component_name TEXT,\n    description TEXT\n);\nCREATE TABLE Ux_Designers (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    years_of_experience INT \n);\nCREATE TABLE Ux_Designers_Components (\n    ux_designer_id INTEGER,\n    component_id INTEGER,\n    FOREIGN KEY (ux_designer_id) REFERENCES Ux_Designers (id),\n    FOREIGN KEY (component_id) REFERENCES Components (id)\n);\n\nINSERT INTO \"Components\" (id,component_name,description) VALUES (1,'Navigation','A navigation system helps users move between different sections of a website.'),(2,'User Interface Design','UI design involves creating interfaces that are visually appealing and user-friendly.'),(3,'Responsive Web Design','RWD ensures that websites function well on various devices and screen sizes.'),(4,'Interaction Design','ID focuses on designing interactive elements within a UI to create an engaging experience.'),(5,'Usability Testing','Testing how easy it is for users to complete tasks on a website.');\nINSERT INTO \"Ux_Designers\" (id,name,years_of_experience) VALUES (1,'John Doe',3),(2,'Jane Smith',2),(3,'Mike Johnson',6),(4,'Emily Davis',1),(5,'David Brown',7);\nINSERT INTO \"Ux_Designers_Components\" (ux_designer_id,component_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "What are the names and descriptions of the components common to all UX designers?",
      "gold_queries": [
        "SELECT Components.component_name, Components.description  from Ux_Designers_Components join Components on Ux_Designers_Components.component_id = Components.id join Ux_Designers on Ux_Designers_Components.ux_designer_id = Ux_Designers.id   GROUP BY Ux_Designers_Components.component_id HAVING COUNT(DISTINCT Ux_Designers_Components.ux_designer_id) = (SELECT COUNT(*) FROM  Ux_Designers)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Find the components that are designed by at least all UX designers.",
          "sql_queries": [
            "SELECT c.component_name \nFROM Components c \nJOIN Ux_Designers_Components udc ON c.id = udc.component_id \nGROUP BY c.component_name \nHAVING COUNT(DISTINCT udc.ux_designer_id) = (SELECT COUNT(*) FROM Ux_Designers)"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "What components are associated with all UX designers, regardless of their name descriptions?",
          "sql_queries": [
            "SELECT C.component_name\nFROM Components C\nWHERE C.id IN (\n    SELECT UC1.component_id\n    FROM Ux_Designers_Components UC1\n    GROUP BY UC1.component_id\n    HAVING COUNT(DISTINCT UC1.ux_designer_id) = (SELECT COUNT(*) FROM Ux_Designers)\n)"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Identify components mentioned in the descriptions of all UX designers.",
          "sql_queries": [
            "SELECT DISTINCT C.component_name \nFROM Components C \nJOIN Ux_Designers_Components UDC ON C.id = UDC.component_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Which components have entries in the Ux_Designers_Components table for all UX designers?",
          "sql_queries": [
            "SELECT component_id FROM Ux_Designers_Components GROUP BY component_id HAVING COUNT(DISTINCT ux_designer_id) = (SELECT COUNT(*) FROM Ux_Designers)"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Job Postings/scope_ux_designers_components/scope_ux_designers_components.sqlite",
      "db_dump": "CREATE TABLE Components (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    component_name TEXT,\n    description TEXT\n);\nCREATE TABLE Ux_Designers (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    years_of_experience INT \n);\nCREATE TABLE Ux_Designers_Components (\n    ux_designer_id INTEGER,\n    component_id INTEGER,\n    FOREIGN KEY (ux_designer_id) REFERENCES Ux_Designers (id),\n    FOREIGN KEY (component_id) REFERENCES Components (id)\n);\n\nINSERT INTO \"Components\" (id,component_name,description) VALUES (1,'Navigation','A navigation system helps users move between different sections of a website.'),(2,'User Interface Design','UI design involves creating interfaces that are visually appealing and user-friendly.'),(3,'Responsive Web Design','RWD ensures that websites function well on various devices and screen sizes.'),(4,'Interaction Design','ID focuses on designing interactive elements within a UI to create an engaging experience.'),(5,'Usability Testing','Testing how easy it is for users to complete tasks on a website.');\nINSERT INTO \"Ux_Designers\" (id,name,years_of_experience) VALUES (1,'John Doe',3),(2,'Jane Smith',2),(3,'Mike Johnson',6),(4,'Emily Davis',1),(5,'David Brown',7);\nINSERT INTO \"Ux_Designers_Components\" (ux_designer_id,component_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "Give me the components that every UX designer designs.",
      "gold_queries": [
        "SELECT Components.component_name  from Ux_Designers_Components join Components on Ux_Designers_Components.component_id = Components.id join Ux_Designers on Ux_Designers_Components.ux_designer_id = Ux_Designers.id   GROUP BY Ux_Designers_Components.component_id HAVING COUNT(DISTINCT Ux_Designers_Components.ux_designer_id) = (SELECT COUNT(*) FROM  Ux_Designers)",
        "select ux_designers.name , components.component_name from Ux_Designers_Components join Components on Ux_Designers_Components.component_id = Components.id join Ux_Designers on Ux_Designers_Components.ux_designer_id = Ux_Designers.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List all component names associated with any UX designer.",
          "sql_queries": [
            "SELECT DISTINCT C.component_name FROM Components C JOIN Ux_Designers_Components UDC ON C.id = UDC.component_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve components designed by at least one UX designer.",
          "sql_queries": [
            "SELECT DISTINCT component_name FROM Components WHERE id IN (SELECT component_id FROM Ux_Designers_Components)"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Identify components accessed by all UX designers in the database.",
          "sql_queries": [
            "SELECT component_name \nFROM Components \nWHERE id IN (\n    SELECT component_id \n    FROM Ux_Designers_Components \n    GROUP BY component_id \n    HAVING COUNT(DISTINCT ux_designer_id) = (SELECT COUNT(*) FROM Ux_Designers)\n)"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.3333333333333333,
        "f1_score": 0.4,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_service_advertisement/scope_streaming_service_advertisement.sqlite",
      "db_dump": "CREATE TABLE Advertisement (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT,\n    duration REAL\n);\nCREATE TABLE Streaming_Service (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    platform TEXT\n);\nCREATE TABLE Streaming_Service_Advertisement (\n    streaming_service_id INTEGER,\n    advertisement_id INTEGER,\n    FOREIGN KEY(streaming_service_id) REFERENCES Streaming_Service(id),\n    FOREIGN KEY(advertisement_id) REFERENCES Advertisement(id)\n);\n\nINSERT INTO \"Advertisement\" (id,type,duration) VALUES (1,'Pre_roll_Ads',30.0),(2,'Mid_roll_Ads',60.0),(3,'Post_roll_Ads',120.0),(4,'Banner_Ads',10.0),(5,'Interstitial_Ads',90.0);\nINSERT INTO \"Streaming_Service\" (id,name,platform) VALUES (1,'Netflix','Web'),(2,'Hulu','Web'),(3,'Amazon Prime Video','Web'),(4,'Disney+','App'),(5,'HBO Max','App');\nINSERT INTO \"Streaming_Service_Advertisement\" (streaming_service_id,advertisement_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\n",
      "question": "Show me the advertisement duration that is in common for all streaming services.",
      "gold_queries": [
        "SELECT Advertisement.duration  from Streaming_Service_Advertisement join Advertisement on Streaming_Service_Advertisement.advertisement_id = Advertisement.id join Streaming_Service on Streaming_Service_Advertisement.streaming_service_id = Streaming_Service.id   GROUP BY Streaming_Service_Advertisement.advertisement_id HAVING COUNT(DISTINCT Streaming_Service_Advertisement.streaming_service_id) = (SELECT COUNT(*) FROM  Streaming_Service)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Calculate the average advertisement duration displayed on all streaming services.",
          "sql_queries": [
            "SELECT AVG(duration) FROM Advertisement"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Find the minimum advertisement duration appearing across all streaming services.",
          "sql_queries": [
            "SELECT MIN(duration) FROM Advertisement"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all advertisement durations present in the advertisements shown by every streaming service.",
          "sql_queries": [
            "SELECT DISTINCT duration FROM Advertisement"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Identify the advertisement types shared by all streaming services.",
          "sql_queries": [
            "SELECT type \nFROM Advertisement \nWHERE id IN (\n    SELECT advertisement_id \n    FROM Streaming_Service_Advertisement \n    GROUP BY advertisement_id \n    HAVING COUNT(DISTINCT streaming_service_id) = (SELECT COUNT(*) FROM Streaming_Service)\n)"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Determine the advertisement duration shared by the most streaming services.",
          "sql_queries": [
            "SELECT duration\nFROM Advertisement\nWHERE id IN (\n    SELECT advertisement_id\n    FROM Streaming_Service_Advertisement\n    GROUP BY advertisement_id\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Journalism/scope_space_reporters_missions/scope_space_reporters_missions.sqlite",
      "db_dump": "CREATE TABLE Missions (\n    mission_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    mission_name TEXT\n);\nCREATE TABLE Space_Reporters (\n    reporter_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    full_name TEXT);\nCREATE TABLE Space_Reporters_Missions (\n    space_reporter_id INTEGER,\n    mission_id INTEGER,\n    assignment_date DATETIME,\n    FOREIGN KEY (space_reporter_id) REFERENCES Space_Reporters(reporter_id),\n    FOREIGN KEY (mission_id) REFERENCES Missions(mission_id)\n);\n\nINSERT INTO \"Missions\" (mission_id,mission_name) VALUES (1,'Mars_Exploration'),(2,'Lunar_Exploration'),(3,'Asteroid_Study'),(4,'Planetary_Research'),(5,'Deep_Space_Probes');\nINSERT INTO \"Space_Reporters\" (reporter_id,full_name) VALUES (1,'John Doe'),(2,'Jane Smith'),(3,'Alex Brown'),(4,'Emily Green'),(5,'William Black');\nINSERT INTO \"Space_Reporters_Missions\" (space_reporter_id,mission_id,assignment_date) VALUES (1,1,'2031-07-01'),(2,2,'2032-12-01'),(3,3,'2033-06-01'),(4,4,'2034-11-01'),(5,5,'2035-05-01'),(2,1,'2032-12-01'),(3,1,'2033-06-01'),(4,1,'2034-11-01'),(5,1,'2035-05-01');\n",
      "question": "Give me the missions each reporter has written about.",
      "gold_queries": [
        "SELECT Missions.mission_name  from Space_Reporters_Missions join Missions on Space_Reporters_Missions.mission_id = Missions.mission_id join Space_Reporters on Space_Reporters_Missions.space_reporter_id = Space_Reporters.reporter_id   GROUP BY Space_Reporters_Missions.mission_id HAVING COUNT(DISTINCT Space_Reporters_Missions.space_reporter_id) = (SELECT COUNT(*) FROM  Space_Reporters)",
        "select space_reporters.full_name , missions.mission_name from Space_Reporters_Missions join Missions on Space_Reporters_Missions.mission_id = Missions.mission_id join Space_Reporters on Space_Reporters_Missions.space_reporter_id = Space_Reporters.reporter_id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Find the unique missions covered by each space reporter.",
          "sql_queries": [
            "SELECT sr.full_name, DISTINCT m.mission_name\nFROM Space_Reporters sr\nJOIN Space_Reporters_Missions srm ON sr.reporter_id = srm.space_reporter_id\nJOIN Missions m ON srm.mission_id = m.mission_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT sr.full_name, DISTINCT m.mission_name\nFROM Space_Reporters sr\nJOIN Space_Reporters_Missions srm ON sr.reporter_id = srm.space_reporter_id\nJOIN Missions m ON srm.mission_id = m.mission_id",
                "original_exception": "near \"DISTINCT\": syntax error"
              }
            ],
            "all_found": false
          }
        },
        {
          "interpretation": "Return a table of reporters and their assigned missions,  without duplicates.",
          "sql_queries": [
            "SELECT DISTINCT sr.full_name, m.mission_name\nFROM Space_Reporters_Missions srm\nJOIN Space_Reporters sr ON srm.space_reporter_id = sr.reporter_id\nJOIN Missions m ON srm.mission_id = m.mission_id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List the missions, with a corresponding reporter for each assignment.",
          "sql_queries": [
            "SELECT Missions.mission_name, Space_Reporters.full_name \nFROM Space_Reporters_Missions \nJOIN Missions ON Space_Reporters_Missions.mission_id = Missions.mission_id \nJOIN Space_Reporters ON Space_Reporters_Missions.space_reporter_id = Space_Reporters.reporter_id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Show each reporter's full name and all missions they have assignments for.",
          "sql_queries": [
            "SELECT SR.full_name, M.mission_name\nFROM Space_Reporters_Missions SRM\nJOIN Space_Reporters SR ON SRM.space_reporter_id = SR.reporter_id\nJOIN Missions M ON SRM.mission_id = M.mission_id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve a list of mission names for each space reporter.",
          "sql_queries": [
            "SELECT SR.full_name, M.mission_name\nFROM Space_Reporters SR\nJOIN Space_Reporters_Missions SRM ON SR.reporter_id = SRM.space_reporter_id\nJOIN Missions M ON SRM.mission_id = M.mission_id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.8,
        "f1_score": 0.6153846153846154,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [
          {
            "query": "SELECT sr.full_name, DISTINCT m.mission_name\nFROM Space_Reporters sr\nJOIN Space_Reporters_Missions srm ON sr.reporter_id = srm.space_reporter_id\nJOIN Missions m ON srm.mission_id = m.mission_id",
            "original_exception": "near \"DISTINCT\": syntax error"
          }
        ],
        "all_found": false
      },
      "matched_gold_sql": 4
    },
    {
      "db_file": "data/scope/Journalism/scope_space_reporters_missions/scope_space_reporters_missions.sqlite",
      "db_dump": "CREATE TABLE Missions (\n    mission_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    mission_name TEXT\n);\nCREATE TABLE Space_Reporters (\n    reporter_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    full_name TEXT);\nCREATE TABLE Space_Reporters_Missions (\n    space_reporter_id INTEGER,\n    mission_id INTEGER,\n    assignment_date DATETIME,\n    FOREIGN KEY (space_reporter_id) REFERENCES Space_Reporters(reporter_id),\n    FOREIGN KEY (mission_id) REFERENCES Missions(mission_id)\n);\n\nINSERT INTO \"Missions\" (mission_id,mission_name) VALUES (1,'Mars_Exploration'),(2,'Lunar_Exploration'),(3,'Asteroid_Study'),(4,'Planetary_Research'),(5,'Deep_Space_Probes');\nINSERT INTO \"Space_Reporters\" (reporter_id,full_name) VALUES (1,'John Doe'),(2,'Jane Smith'),(3,'Alex Brown'),(4,'Emily Green'),(5,'William Black');\nINSERT INTO \"Space_Reporters_Missions\" (space_reporter_id,mission_id,assignment_date) VALUES (1,1,'2031-07-01'),(2,2,'2032-12-01'),(3,3,'2033-06-01'),(4,4,'2034-11-01'),(5,5,'2035-05-01'),(2,1,'2032-12-01'),(3,1,'2033-06-01'),(4,1,'2034-11-01'),(5,1,'2035-05-01');\n",
      "question": "Which missions do all reporters cover together?",
      "gold_queries": [
        "SELECT Missions.mission_name  from Space_Reporters_Missions join Missions on Space_Reporters_Missions.mission_id = Missions.mission_id join Space_Reporters on Space_Reporters_Missions.space_reporter_id = Space_Reporters.reporter_id   GROUP BY Space_Reporters_Missions.mission_id HAVING COUNT(DISTINCT Space_Reporters_Missions.space_reporter_id) = (SELECT COUNT(*) FROM  Space_Reporters)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Missions with assignments from all reporters on the same date.",
          "sql_queries": [
            "SELECT m.mission_name\nFROM Missions m\nJOIN Space_Reporters_Missions srm ON m.mission_id = srm.mission_id\nGROUP BY m.mission_name, srm.assignment_date\nHAVING COUNT(DISTINCT srm.space_reporter_id) = (SELECT COUNT(*) FROM Space_Reporters)"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Missions covered by the intersection of assignment sets for all reporters.",
          "sql_queries": [
            "SELECT M.mission_name\nFROM Missions M\nJOIN Space_Reporters_Missions SRM ON M.mission_id = SRM.mission_id\nGROUP BY M.mission_name\nHAVING COUNT(DISTINCT SRM.space_reporter_id) = (SELECT COUNT(*) FROM Space_Reporters)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Missions assigned to every reporter, regardless of date.",
          "sql_queries": [
            "SELECT Missions.mission_name\nFROM Missions\nINNER JOIN Space_Reporters_Missions ON Missions.mission_id = Space_Reporters_Missions.mission_id\nGROUP BY Missions.mission_name"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Missions that have at least one assignment from each reporter.",
          "sql_queries": [
            "SELECT M.mission_name\nFROM Missions M\nWHERE NOT EXISTS (\n    SELECT 1\n    FROM Space_Reporters R\n    WHERE NOT EXISTS (\n        SELECT 1\n        FROM Space_Reporters_Missions SRM\n        WHERE SRM.space_reporter_id = R.reporter_id\n          AND SRM.mission_id = M.mission_id\n    )\n)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/scope/Journalism/scope_space_reporters_missions/scope_space_reporters_missions.sqlite",
      "db_dump": "CREATE TABLE Missions (\n    mission_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    mission_name TEXT\n);\nCREATE TABLE Space_Reporters (\n    reporter_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    full_name TEXT);\nCREATE TABLE Space_Reporters_Missions (\n    space_reporter_id INTEGER,\n    mission_id INTEGER,\n    assignment_date DATETIME,\n    FOREIGN KEY (space_reporter_id) REFERENCES Space_Reporters(reporter_id),\n    FOREIGN KEY (mission_id) REFERENCES Missions(mission_id)\n);\n\nINSERT INTO \"Missions\" (mission_id,mission_name) VALUES (1,'Mars_Exploration'),(2,'Lunar_Exploration'),(3,'Asteroid_Study'),(4,'Planetary_Research'),(5,'Deep_Space_Probes');\nINSERT INTO \"Space_Reporters\" (reporter_id,full_name) VALUES (1,'John Doe'),(2,'Jane Smith'),(3,'Alex Brown'),(4,'Emily Green'),(5,'William Black');\nINSERT INTO \"Space_Reporters_Missions\" (space_reporter_id,mission_id,assignment_date) VALUES (1,1,'2031-07-01'),(2,2,'2032-12-01'),(3,3,'2033-06-01'),(4,4,'2034-11-01'),(5,5,'2035-05-01'),(2,1,'2032-12-01'),(3,1,'2033-06-01'),(4,1,'2034-11-01'),(5,1,'2035-05-01');\n",
      "question": "Give me a list of reporters and missions they have written about.",
      "gold_queries": [
        "select space_reporters.full_name , missions.mission_name from Space_Reporters_Missions join Missions on Space_Reporters_Missions.mission_id = Missions.mission_id join Space_Reporters on Space_Reporters_Missions.space_reporter_id = Space_Reporters.reporter_id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List all reporters and the missions they have assignments for.",
          "sql_queries": [
            "SELECT Space_Reporters.full_name, Missions.mission_name\nFROM Space_Reporters\nJOIN Space_Reporters_Missions ON Space_Reporters.reporter_id = Space_Reporters_Missions.space_reporter_id\nJOIN Missions ON Space_Reporters_Missions.mission_id = Missions.mission_id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Generate a list of reporter names and the respective missions they have reported on.",
          "sql_queries": [
            "SELECT T2.full_name, T3.mission_name FROM Space_Reporters_Missions AS T1 JOIN Space_Reporters AS T2 ON T1.space_reporter_id = T2.reporter_id JOIN Missions AS T3 ON T1.mission_id = T3.mission_id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Return a table of reporters and their corresponding missions.",
          "sql_queries": [
            "SELECT T2.full_name, T3.mission_name\nFROM Space_Reporters_Missions AS T1\nJOIN Space_Reporters AS T2 ON T1.space_reporter_id = T2.reporter_id\nJOIN Missions AS T3 ON T1.mission_id = T3.mission_id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Show a list of each reporter and the names of all missions they have reported on.",
          "sql_queries": [
            "SELECT SR.full_name, M.mission_name\nFROM Space_Reporters_Missions SRM\nJOIN Space_Reporters SR ON SRM.space_reporter_id = SR.reporter_id\nJOIN Missions M ON SRM.mission_id = M.mission_id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Provide a list of reporters, each associated with a list of missions they have covered.",
          "sql_queries": [
            "SELECT sr.full_name, m.mission_name\nFROM Space_Reporters sr\nJOIN Space_Reporters_Missions srm ON sr.reporter_id = srm.space_reporter_id\nJOIN Missions m ON srm.mission_id = m.mission_id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Display a report showing reporters and the missions they have been assigned to.",
          "sql_queries": [
            "SELECT Space_Reporters.full_name, Missions.mission_name\nFROM Space_Reporters_Missions\nJOIN Space_Reporters ON Space_Reporters_Missions.space_reporter_id = Space_Reporters.reporter_id\nJOIN Missions ON Space_Reporters_Missions.mission_id = Missions.mission_id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 6
    },
    {
      "db_file": "data/scope/Journalism/scope_news_agencies_departments/scope_news_agencies_departments.sqlite",
      "db_dump": "CREATE TABLE Departments(\n    department_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    department_name TEXT\n);\nCREATE TABLE News_Agencies(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT,\n    established_year INT\n);\nCREATE TABLE News_Agencies_Departments(\n    agency_id INTEGER,\n    department_id INTEGER,\n    FOREIGN KEY(agency_id) REFERENCES News_Agencies(id),\n    FOREIGN KEY(department_id) REFERENCES Departments(department_id),\n    PRIMARY KEY(agency_id, department_id)\n);\n\nINSERT INTO \"Departments\" (department_id,department_name) VALUES (1,'Foreign_Correspondence'),(2,'Politics'),(3,'Economy'),(4,'Technology'),(5,'Culture');\nINSERT INTO \"News_Agencies\" (id,name,location,established_year) VALUES (1,'Agency1','USA',2008),(2,'Agency2','UK',1996),(3,'Agency3','India',2010),(4,'Agency4','Australia',2000),(5,'Agency5','Germany',2007);\nINSERT INTO \"News_Agencies_Departments\" (agency_id,department_id) VALUES (1,1),(1,2),(2,3),(2,4),(3,5),(3,2),(4,3),(4,4),(5,1),(5,2),(2,1),(3,1),(4,1);\n",
      "question": "Give me the departments corresponding to each news agency.",
      "gold_queries": [
        "SELECT Departments.department_name  from News_Agencies_Departments join Departments on News_Agencies_Departments.department_id = Departments.department_id join News_Agencies on News_Agencies_Departments.agency_id = News_Agencies.id   GROUP BY News_Agencies_Departments.department_id HAVING COUNT(DISTINCT News_Agencies_Departments.agency_id) = (SELECT COUNT(*) FROM  News_Agencies)",
        "select news_agencies.name , departments.department_name from News_Agencies_Departments join Departments on News_Agencies_Departments.department_id = Departments.department_id join News_Agencies on News_Agencies_Departments.agency_id = News_Agencies.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For every news agency, return the corresponding department_id.",
          "sql_queries": [
            "SELECT agency_id, department_id FROM News_Agencies_Departments"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve the department_name for each agency.",
          "sql_queries": [
            "SELECT D.department_name, N.name\nFROM News_Agencies_Departments AS AD\nJOIN Departments AS D ON AD.department_id = D.department_id\nJOIN News_Agencies AS N ON AD.agency_id = N.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all news agencies and their respective departments.",
          "sql_queries": [
            "SELECT NA.name, D.department_name\nFROM News_Agencies NA\nJOIN News_Agencies_Departments NAD ON NA.id = NAD.agency_id\nJOIN Departments D ON NAD.department_id = D.department_id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Show the list of department_id values associated with each agency_id.",
          "sql_queries": [
            "SELECT agency_id, department_id\nFROM News_Agencies_Departments"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.5,
        "f1_score": 0.5,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/scope/Journalism/scope_news_agencies_departments/scope_news_agencies_departments.sqlite",
      "db_dump": "CREATE TABLE Departments(\n    department_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    department_name TEXT\n);\nCREATE TABLE News_Agencies(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT,\n    established_year INT\n);\nCREATE TABLE News_Agencies_Departments(\n    agency_id INTEGER,\n    department_id INTEGER,\n    FOREIGN KEY(agency_id) REFERENCES News_Agencies(id),\n    FOREIGN KEY(department_id) REFERENCES Departments(department_id),\n    PRIMARY KEY(agency_id, department_id)\n);\n\nINSERT INTO \"Departments\" (department_id,department_name) VALUES (1,'Foreign_Correspondence'),(2,'Politics'),(3,'Economy'),(4,'Technology'),(5,'Culture');\nINSERT INTO \"News_Agencies\" (id,name,location,established_year) VALUES (1,'Agency1','USA',2008),(2,'Agency2','UK',1996),(3,'Agency3','India',2010),(4,'Agency4','Australia',2000),(5,'Agency5','Germany',2007);\nINSERT INTO \"News_Agencies_Departments\" (agency_id,department_id) VALUES (1,1),(1,2),(2,3),(2,4),(3,5),(3,2),(4,3),(4,4),(5,1),(5,2),(2,1),(3,1),(4,1);\n",
      "question": "Show me the department that is in common for all news agencies.",
      "gold_queries": [
        "SELECT Departments.department_name  from News_Agencies_Departments join Departments on News_Agencies_Departments.department_id = Departments.department_id join News_Agencies on News_Agencies_Departments.agency_id = News_Agencies.id   GROUP BY News_Agencies_Departments.department_id HAVING COUNT(DISTINCT News_Agencies_Departments.agency_id) = (SELECT COUNT(*) FROM  News_Agencies)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Find the department that has entries for all unique agency_id values in the News_Agencies_Departments table (regardless of the specific department_id associated with each agency).",
          "sql_queries": [
            "SELECT d.department_name\nFROM Departments d\nJOIN News_Agencies_Departments nad ON d.department_id = nad.department_id\nWHERE nad.department_id IN (\n    SELECT department_id\n    FROM News_Agencies_Departments\n    GROUP BY department_id\n    HAVING COUNT(DISTINCT agency_id) = (SELECT COUNT(*) FROM News_Agencies)\n)"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve the department name with the most occurrences in the agency_id column of the News_Agencies_Departments table.",
          "sql_queries": [
            "SELECT department_name\nFROM Departments\nWHERE department_id = (\n    SELECT department_id\n    FROM News_Agencies_Departments\n    GROUP BY department_id\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Identify the department(s) present in all possible combinations of agency_id pairings within the News_Agencies_Departments table.",
          "sql_queries": [
            "SELECT T1.department_name\nFROM Departments T1\nJOIN News_Agencies_Departments T2 ON T1.department_id = T2.department_id\nGROUP BY T2.department_id\nHAVING COUNT(DISTINCT T2.agency_id) = (SELECT COUNT(*) FROM News_Agencies)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.6666666666666666,
        "f1_score": 0.8,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/scope/Journalism/scope_multimedia_journalists_platforms/scope_multimedia_journalists_platforms.sqlite",
      "db_dump": "CREATE TABLE Multimedia_Journalists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT\n);\nCREATE TABLE Multimedia_Journalists_Platforms (\n    multimedia_journalist_id INTEGER,\n    platforms_id INTEGER,\n    FOREIGN KEY(multimedia_journalist_id) REFERENCES Multimedia_Journalists(id),\n    FOREIGN KEY(platforms_id) REFERENCES Platforms(id),\n    PRIMARY KEY(multimedia_journalist_id, platforms_id)\n);\nCREATE TABLE Platforms (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    platform_name TEXT\n);\n\nINSERT INTO \"Multimedia_Journalists\" (id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com'),(3,'Michael Johnson','michael@example.com'),(4,'Emily Davis','emily@example.com'),(5,'William Brown','william@example.com');\nINSERT INTO \"Multimedia_Journalists_Platforms\" (multimedia_journalist_id,platforms_id) VALUES (1,1),(2,1),(3,2),(4,3),(5,4),(1,5),(2,6),(3,7),(4,8),(5,9),(3,1),(4,1),(5,1);\nINSERT INTO \"Platforms\" (id,platform_name) VALUES (1,'Video'),(2,'Audio'),(3,'Print'),(4,'Online'),(5,'Photo');\n",
      "question": "For every journalist, list the platforms used.",
      "gold_queries": [
        "select multimedia_journalists.name , platforms.platform_name from Multimedia_Journalists_Platforms join Platforms on Multimedia_Journalists_Platforms.platforms_id = Platforms.id join Multimedia_Journalists on Multimedia_Journalists_Platforms.multimedia_journalist_id = Multimedia_Journalists.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Output a JSON response with each journalist as a key, and their associated platforms as a value.",
          "sql_queries": [],
          "metrics": {
            "recall": 0.0,
            "precision": 0,
            "f1_score": 0,
            "num_queries": 0,
            "num_unique_queries": 0,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List each journalist and all the platforms they use.",
          "sql_queries": [
            "SELECT m.name, p.platform_name \nFROM Multimedia_Journalists m \nJOIN Multimedia_Journalists_Platforms mjp ON m.id = mjp.multimedia_journalist_id \nJOIN Platforms p ON mjp.platforms_id = p.id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "For each journalist, display a concatenated list of platforms they use.",
          "sql_queries": [
            "SELECT MJ.name, GROUP_CONCAT(P.platform_name, ', ') AS platforms\nFROM Multimedia_Journalists MJ\nJOIN Multimedia_Journalists_Platforms MJP ON MJ.id = MJP.multimedia_journalist_id\nJOIN Platforms P ON MJP.platforms_id = P.id\nGROUP BY MJ.id, MJ.name"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Generate a table with columns for journalist name and a separate column for each platform, indicating whether the journalist uses it.",
          "sql_queries": [
            "SELECT \n    MJ.name,\n    MAX(CASE WHEN P.platform_name = 'Video' THEN 'Yes' ELSE 'No' END) AS Video,\n    MAX(CASE WHEN P.platform_name = 'Audio' THEN 'Yes' ELSE 'No' END) AS Audio,\n    MAX(CASE WHEN P.platform_name = 'Print' THEN 'Yes' ELSE 'No' END) AS Print,\n    MAX(CASE WHEN P.platform_name = 'Online' THEN 'Yes' ELSE 'No' END) AS Online,\n    MAX(CASE WHEN P.platform_name = 'Photo' THEN 'Yes' ELSE 'No' END) AS Photo\nFROM \n    Multimedia_Journalists MJ\nLEFT JOIN \n    Multimedia_Journalists_Platforms MJP ON MJ.id = MJP.multimedia_journalist_id\nLEFT JOIN \n    Platforms P ON MJP.platforms_id = P.id\nGROUP BY \n    MJ.name"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all platforms used by journalists, grouped by journalist.",
          "sql_queries": [
            "SELECT M.name, GROUP_CONCAT(P.platform_name) AS platforms\nFROM Multimedia_Journalists M\nJOIN Multimedia_Journalists_Platforms MJP ON M.id = MJP.multimedia_journalist_id\nJOIN Platforms P ON MJP.platforms_id = P.id\nGROUP BY M.id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Journalism/scope_multimedia_journalists_platforms/scope_multimedia_journalists_platforms.sqlite",
      "db_dump": "CREATE TABLE Multimedia_Journalists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT\n);\nCREATE TABLE Multimedia_Journalists_Platforms (\n    multimedia_journalist_id INTEGER,\n    platforms_id INTEGER,\n    FOREIGN KEY(multimedia_journalist_id) REFERENCES Multimedia_Journalists(id),\n    FOREIGN KEY(platforms_id) REFERENCES Platforms(id),\n    PRIMARY KEY(multimedia_journalist_id, platforms_id)\n);\nCREATE TABLE Platforms (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    platform_name TEXT\n);\n\nINSERT INTO \"Multimedia_Journalists\" (id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com'),(3,'Michael Johnson','michael@example.com'),(4,'Emily Davis','emily@example.com'),(5,'William Brown','william@example.com');\nINSERT INTO \"Multimedia_Journalists_Platforms\" (multimedia_journalist_id,platforms_id) VALUES (1,1),(2,1),(3,2),(4,3),(5,4),(1,5),(2,6),(3,7),(4,8),(5,9),(3,1),(4,1),(5,1);\nINSERT INTO \"Platforms\" (id,platform_name) VALUES (1,'Video'),(2,'Audio'),(3,'Print'),(4,'Online'),(5,'Photo');\n",
      "question": "Tell me the platforms each journalist uses.",
      "gold_queries": [
        "SELECT Platforms.platform_name  from Multimedia_Journalists_Platforms join Platforms on Multimedia_Journalists_Platforms.platforms_id = Platforms.id join Multimedia_Journalists on Multimedia_Journalists_Platforms.multimedia_journalist_id = Multimedia_Journalists.id   GROUP BY Multimedia_Journalists_Platforms.platforms_id HAVING COUNT(DISTINCT Multimedia_Journalists_Platforms.multimedia_journalist_id) = (SELECT COUNT(*) FROM  Multimedia_Journalists)",
        "select multimedia_journalists.name , platforms.platform_name from Multimedia_Journalists_Platforms join Platforms on Multimedia_Journalists_Platforms.platforms_id = Platforms.id join Multimedia_Journalists on Multimedia_Journalists_Platforms.multimedia_journalist_id = Multimedia_Journalists.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List each journalist and all platforms they utilize.",
          "sql_queries": [
            "SELECT MJ.name, P.platform_name\nFROM Multimedia_Journalists MJ\nJOIN Multimedia_Journalists_Platforms MJP ON MJ.id = MJP.multimedia_journalist_id\nJOIN Platforms P ON MJP.platforms_id = P.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Provide a list of all platforms used by journalists in the database.",
          "sql_queries": [
            "SELECT platform_name FROM Platforms"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Display a summary of platform usage by each journalist.",
          "sql_queries": [
            "SELECT m.name, p.platform_name\nFROM Multimedia_Journalists m\nJOIN Multimedia_Journalists_Platforms mjp ON m.id = mjp.multimedia_journalist_id\nJOIN Platforms p ON mjp.platforms_id = p.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "For each journalist, return the names of the platforms they are associated with.",
          "sql_queries": [
            "SELECT MJ.name, P.platform_name \nFROM Multimedia_Journalists MJ \nJOIN Multimedia_Journalists_Platforms MJP ON MJ.id = MJP.multimedia_journalist_id \nJOIN Platforms P ON MJP.platforms_id = P.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Query the database to retrieve a table showing each journalist and their corresponding platforms.",
          "sql_queries": [
            "SELECT M.name, P.platform_name\nFROM Multimedia_Journalists M\nJOIN Multimedia_Journalists_Platforms MJP ON M.id = MJP.multimedia_journalist_id\nJOIN Platforms P ON MJP.platforms_id = P.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.8,
        "f1_score": 0.6153846153846154,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 4
    },
    {
      "db_file": "data/scope/Journalism/scope_multimedia_journalists_platforms/scope_multimedia_journalists_platforms.sqlite",
      "db_dump": "CREATE TABLE Multimedia_Journalists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT\n);\nCREATE TABLE Multimedia_Journalists_Platforms (\n    multimedia_journalist_id INTEGER,\n    platforms_id INTEGER,\n    FOREIGN KEY(multimedia_journalist_id) REFERENCES Multimedia_Journalists(id),\n    FOREIGN KEY(platforms_id) REFERENCES Platforms(id),\n    PRIMARY KEY(multimedia_journalist_id, platforms_id)\n);\nCREATE TABLE Platforms (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    platform_name TEXT\n);\n\nINSERT INTO \"Multimedia_Journalists\" (id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com'),(3,'Michael Johnson','michael@example.com'),(4,'Emily Davis','emily@example.com'),(5,'William Brown','william@example.com');\nINSERT INTO \"Multimedia_Journalists_Platforms\" (multimedia_journalist_id,platforms_id) VALUES (1,1),(2,1),(3,2),(4,3),(5,4),(1,5),(2,6),(3,7),(4,8),(5,9),(3,1),(4,1),(5,1);\nINSERT INTO \"Platforms\" (id,platform_name) VALUES (1,'Video'),(2,'Audio'),(3,'Print'),(4,'Online'),(5,'Photo');\n",
      "question": "What platforms are common to all journalists?",
      "gold_queries": [
        "SELECT Platforms.platform_name  from Multimedia_Journalists_Platforms join Platforms on Multimedia_Journalists_Platforms.platforms_id = Platforms.id join Multimedia_Journalists on Multimedia_Journalists_Platforms.multimedia_journalist_id = Multimedia_Journalists.id   GROUP BY Multimedia_Journalists_Platforms.platforms_id HAVING COUNT(DISTINCT Multimedia_Journalists_Platforms.multimedia_journalist_id) = (SELECT COUNT(*) FROM  Multimedia_Journalists)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What is the intersection of platform usage across all journalists?",
          "sql_queries": [
            "SELECT platform_name FROM Platforms WHERE id IN (SELECT platforms_id FROM Multimedia_Journalists_Platforms GROUP BY platforms_id HAVING COUNT(DISTINCT multimedia_journalist_id) = (SELECT COUNT(*) FROM Multimedia_Journalists))"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Identify platforms present in the platform list of every journalist.",
          "sql_queries": [
            "SELECT platform_name FROM Platforms WHERE id IN (SELECT platforms_id FROM Multimedia_Journalists_Platforms GROUP BY platforms_id HAVING COUNT(DISTINCT multimedia_journalist_id) = (SELECT COUNT(*) FROM Multimedia_Journalists))"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Which platforms are used by every journalist in the database?",
          "sql_queries": [
            "SELECT platform_name\nFROM Platforms\nWHERE id IN (\n    SELECT platforms_id\n    FROM Multimedia_Journalists_Platforms\n    GROUP BY platforms_id\n    HAVING COUNT(DISTINCT multimedia_journalist_id) = (SELECT COUNT(*) FROM Multimedia_Journalists)\n)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 3,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/scope/Journalism/scope_news_agencies_departments/scope_news_agencies_departments.sqlite",
      "db_dump": "CREATE TABLE Departments(\n    department_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    department_name TEXT\n);\nCREATE TABLE News_Agencies(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT,\n    established_year INT\n);\nCREATE TABLE News_Agencies_Departments(\n    agency_id INTEGER,\n    department_id INTEGER,\n    FOREIGN KEY(agency_id) REFERENCES News_Agencies(id),\n    FOREIGN KEY(department_id) REFERENCES Departments(department_id),\n    PRIMARY KEY(agency_id, department_id)\n);\n\nINSERT INTO \"Departments\" (department_id,department_name) VALUES (1,'Foreign_Correspondence'),(2,'Politics'),(3,'Economy'),(4,'Technology'),(5,'Culture');\nINSERT INTO \"News_Agencies\" (id,name,location,established_year) VALUES (1,'Agency1','USA',2008),(2,'Agency2','UK',1996),(3,'Agency3','India',2010),(4,'Agency4','Australia',2000),(5,'Agency5','Germany',2007);\nINSERT INTO \"News_Agencies_Departments\" (agency_id,department_id) VALUES (1,1),(1,2),(2,3),(2,4),(3,5),(3,2),(4,3),(4,4),(5,1),(5,2),(2,1),(3,1),(4,1);\n",
      "question": "For each news agency, give me the corresponding department.",
      "gold_queries": [
        "select news_agencies.name , departments.department_name from News_Agencies_Departments join Departments on News_Agencies_Departments.department_id = Departments.department_id join News_Agencies on News_Agencies_Departments.agency_id = News_Agencies.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List every department associated with each news agency.",
          "sql_queries": [
            "SELECT NA.name AS agency_name, D.department_name\nFROM News_Agencies NA\nJOIN News_Agencies_Departments NAD ON NA.id = NAD.agency_id\nJOIN Departments D ON NAD.department_id = D.department_id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Show the relationship between each news agency and its corresponding department.",
          "sql_queries": [
            "SELECT na.name AS agency_name, d.department_name FROM News_Agencies_Departments nad JOIN News_Agencies na ON nad.agency_id = na.id JOIN Departments d ON nad.department_id = d.department_id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Display the name of each department paired with its associated news agency.",
          "sql_queries": [
            "SELECT D.department_name, N.name \nFROM News_Agencies_Departments AS NAD \nJOIN Departments AS D ON NAD.department_id = D.department_id \nJOIN News_Agencies AS N ON NAD.agency_id = N.id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Provide a mapping of news agencies to their respective departments.",
          "sql_queries": [
            "SELECT na.name AS agency_name, d.department_name\nFROM News_Agencies_Departments nad\nJOIN News_Agencies na ON nad.agency_id = na.id\nJOIN Departments d ON nad.department_id = d.department_id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "For each news agency, retrieve the department_id that it is linked to.",
          "sql_queries": [
            "SELECT agency_id, department_id FROM News_Agencies_Departments"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.8,
        "f1_score": 0.888888888888889,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 4
    },
    {
      "db_file": "data/scope/Agriculture/scope_insurances_options/scope_insurances_options.sqlite",
      "db_dump": "CREATE TABLE Insurance_Options(\n    insurance_id INTEGER,\n    option_id INTEGER,\n    FOREIGN KEY (insurance_id) REFERENCES Insurances(id),\n    FOREIGN KEY (option_id) REFERENCES Options(id),\n    PRIMARY KEY (insurance_id, option_id)\n);\nCREATE TABLE Insurances(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    policy_holder TEXT,\n    premium REAL \n);\nCREATE TABLE Options(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    option_name TEXT\n);\n\nINSERT INTO \"Insurance_Options\" (insurance_id,option_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\nINSERT INTO \"Insurances\" (id,policy_holder,premium) VALUES (1,'John Doe',1000.0),(2,'Jane Smith',2000.0),(3,'Mike Johnson',3000.0),(4,'Emily Brown',4000.0),(5,'Paul Davis',5000.0);\nINSERT INTO \"Options\" (id,option_name) VALUES (1,'Revenue_Insurance'),(2,'Liability_Insurance'),(3,'Crop_Insurance'),(4,'Equipment_Insurance'),(5,'Worker_sCompensation');\n",
      "question": "What options do we have for every insurance",
      "gold_queries": [
        "SELECT Options.option_name  from Insurance_Options join Options on Insurance_Options.option_id = Options.id join Insurances on Insurance_Options.insurance_id = Insurances.id   GROUP BY Insurance_Options.option_id HAVING COUNT(DISTINCT Insurance_Options.insurance_id) = (SELECT COUNT(*) FROM  Insurances)",
        "select insurances.policy_holder , options.option_name from Insurance_Options join Options on Insurance_Options.option_id = Options.id join Insurances on Insurance_Options.insurance_id = Insurances.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Provide a list of all option names associated with any insurance policy.",
          "sql_queries": [
            "SELECT DISTINCT T2.option_name FROM Insurance_Options AS T1 JOIN Options AS T2 ON T1.option_id = T2.id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "What different types of insurance exist.",
          "sql_queries": [
            "SELECT DISTINCT option_name FROM Options"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Identify the unique options available across all insurance policies.",
          "sql_queries": [
            "SELECT DISTINCT option_name FROM Options"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "For each insurance record, retrieve the corresponding option names.",
          "sql_queries": [
            "SELECT I.policy_holder, O.option_name\nFROM Insurances I\nJOIN Insurance_Options IO ON I.id = IO.insurance_id\nJOIN Options O ON IO.option_id = O.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all distinct options available for each insurance policy.",
          "sql_queries": [
            "SELECT DISTINCT I.policy_holder, O.option_name\nFROM Insurances I\nJOIN Insurance_Options IO ON I.id = IO.insurance_id\nJOIN Options O ON IO.option_id = O.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.5,
        "f1_score": 0.5,
        "num_queries": 5,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/scope/Agriculture/scope_insurances_options/scope_insurances_options.sqlite",
      "db_dump": "CREATE TABLE Insurance_Options(\n    insurance_id INTEGER,\n    option_id INTEGER,\n    FOREIGN KEY (insurance_id) REFERENCES Insurances(id),\n    FOREIGN KEY (option_id) REFERENCES Options(id),\n    PRIMARY KEY (insurance_id, option_id)\n);\nCREATE TABLE Insurances(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    policy_holder TEXT,\n    premium REAL \n);\nCREATE TABLE Options(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    option_name TEXT\n);\n\nINSERT INTO \"Insurance_Options\" (insurance_id,option_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\nINSERT INTO \"Insurances\" (id,policy_holder,premium) VALUES (1,'John Doe',1000.0),(2,'Jane Smith',2000.0),(3,'Mike Johnson',3000.0),(4,'Emily Brown',4000.0),(5,'Paul Davis',5000.0);\nINSERT INTO \"Options\" (id,option_name) VALUES (1,'Revenue_Insurance'),(2,'Liability_Insurance'),(3,'Crop_Insurance'),(4,'Equipment_Insurance'),(5,'Worker_sCompensation');\n",
      "question": "For each insurance, give the list of options covered",
      "gold_queries": [
        "select insurances.policy_holder , options.option_name from Insurance_Options join Options on Insurance_Options.option_id = Options.id join Insurances on Insurance_Options.insurance_id = Insurances.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List each insurance ID with its corresponding option names.",
          "sql_queries": [
            "SELECT io.insurance_id, o.option_name\nFROM Insurance_Options io\nJOIN Options o ON io.option_id = o.id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Show a list of insurance policies and the options they include.",
          "sql_queries": [
            "SELECT I.policy_holder, O.option_name\nFROM Insurances I\nJOIN Insurance_Options IO ON I.id = IO.insurance_id\nJOIN Options O ON IO.option_id = O.id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Retrieve all insurance policies and the associated option names.",
          "sql_queries": [
            "SELECT T1.policy_holder, T3.option_name\nFROM Insurances T1\nJOIN Insurance_Options T2 ON T1.id = T2.insurance_id\nJOIN Options T3 ON T2.option_id = T3.id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Generate a report displaying the options selected for each policy.",
          "sql_queries": [
            "SELECT I.policy_holder, O.option_name\nFROM Insurance_Options IO\nJOIN Insurances I ON IO.insurance_id = I.id\nJOIN Options O ON IO.option_id = O.id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Provide a table with columns for \"Insurance ID\" and \"Options Covered\" for each insurance.",
          "sql_queries": [
            "SELECT I.id AS \"Insurance ID\", GROUP_CONCAT(O.option_name, ', ') AS \"Options Covered\"\nFROM Insurance_Options IO\nJOIN Insurances I ON IO.insurance_id = I.id\nJOIN Options O ON IO.option_id = O.id\nGROUP BY I.id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.6,
        "f1_score": 0.7499999999999999,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/scope/Agriculture/scope_insurances_options/scope_insurances_options.sqlite",
      "db_dump": "CREATE TABLE Insurance_Options(\n    insurance_id INTEGER,\n    option_id INTEGER,\n    FOREIGN KEY (insurance_id) REFERENCES Insurances(id),\n    FOREIGN KEY (option_id) REFERENCES Options(id),\n    PRIMARY KEY (insurance_id, option_id)\n);\nCREATE TABLE Insurances(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    policy_holder TEXT,\n    premium REAL \n);\nCREATE TABLE Options(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    option_name TEXT\n);\n\nINSERT INTO \"Insurance_Options\" (insurance_id,option_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\nINSERT INTO \"Insurances\" (id,policy_holder,premium) VALUES (1,'John Doe',1000.0),(2,'Jane Smith',2000.0),(3,'Mike Johnson',3000.0),(4,'Emily Brown',4000.0),(5,'Paul Davis',5000.0);\nINSERT INTO \"Options\" (id,option_name) VALUES (1,'Revenue_Insurance'),(2,'Liability_Insurance'),(3,'Crop_Insurance'),(4,'Equipment_Insurance'),(5,'Worker_sCompensation');\n",
      "question": "What option is common to all insurances",
      "gold_queries": [
        "SELECT Options.option_name  from Insurance_Options join Options on Insurance_Options.option_id = Options.id join Insurances on Insurance_Options.insurance_id = Insurances.id   GROUP BY Insurance_Options.option_id HAVING COUNT(DISTINCT Insurance_Options.insurance_id) = (SELECT COUNT(*) FROM  Insurances)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Find the option that has the highest number of associations with insurances.",
          "sql_queries": [
            "SELECT option_name FROM Options WHERE id = (SELECT option_id FROM Insurance_Options GROUP BY option_id ORDER BY COUNT(*) DESC LIMIT 1)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Which option_id appears in every row of Insurance_Options?",
          "sql_queries": [
            "SELECT option_id FROM Insurance_Options GROUP BY option_id HAVING COUNT(*) = (SELECT COUNT(*) FROM Insurances)"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Is there an option name that is included in every insurance policy?",
          "sql_queries": [
            "SELECT option_name FROM Options INNER JOIN Insurance_Options ON Options.id = Insurance_Options.option_id GROUP BY option_name HAVING COUNT(DISTINCT insurance_id) = (SELECT COUNT(*) FROM Insurances)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "What option is selected by all policy holders?",
          "sql_queries": [
            "SELECT option_name \nFROM Options \nWHERE id IN (\n    SELECT option_id \n    FROM Insurance_Options \n    GROUP BY option_id \n    HAVING COUNT(DISTINCT insurance_id) = (SELECT COUNT(*) FROM Insurances)\n)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.75,
        "f1_score": 0.8571428571428571,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/scope/Agriculture/scope_farms_animals/scope_farms_animals.sqlite",
      "db_dump": "CREATE TABLE Animals (\n    AnimalID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Type TEXT,\n    Quantity INTEGER \n);\nCREATE TABLE Crops (\n    CropID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    HarvestDate DATE\n);\nCREATE TABLE Equipment (\n    EquipID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Model TEXT,\n    PurchaseDate DATE\n);\nCREATE TABLE Farms (\n    FarmID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Location TEXT\n);\nCREATE TABLE Farms_Animals (\n    FarmID INTEGER,\n    AnimalID INTEGER,\n    FOREIGN KEY (FarmID) REFERENCES Farms(FarmID),\n    FOREIGN KEY (AnimalID) REFERENCES Animals(AnimalID),\n    PRIMARY KEY (FarmID, AnimalID)\n);\nCREATE TABLE Farms_Crops (\n    FarmID INTEGER,\n    CropID INTEGER,\n    PlantingDate DATE,\n    HarvestEstimate DATE,\n    FOREIGN KEY (FarmID) REFERENCES Farms(FarmID),\n    FOREIGN KEY (CropID) REFERENCES Crops(CropID),\n    PRIMARY KEY (FarmID, CropID)\n);\nCREATE TABLE Farms_Equipment (\n    FarmID INTEGER,\n    EquipID INTEGER,\n    AcquisitionDate DATE,\n    MaintenanceSchedule TEXT,\n    FOREIGN KEY (FarmID) REFERENCES Farms(FarmID),\n    FOREIGN KEY (EquipID) REFERENCES Equipment(EquipID),\n    PRIMARY KEY (FarmID, EquipID)\n);\n\nINSERT INTO \"Animals\" (AnimalID,Type,Quantity) VALUES (1,'Cow',20),(2,'Pig',30),(3,'Chicken',100),(4,'Sheep',25),(5,'Goat',15);\nINSERT INTO \"Crops\" (CropID,Name,HarvestDate) VALUES (1,'Wheat','2023-08-01'),(2,'Corn','2023-09-01'),(3,'Barley','2023-07-01'),(4,'Rice','2023-10-01'),(5,'Oats','2023-06-01');\nINSERT INTO \"Equipment\" (EquipID,Model,PurchaseDate) VALUES (1,'Tractor A','2020-01-01'),(2,'Combine','2021-03-01'),(3,'Plow','2019-05-01'),(4,'Truck','2022-02-01'),(5,'Irrigation System','2020-04-01');\nINSERT INTO \"Farms\" (FarmID,Name,Location) VALUES (1,'Farm A','California'),(2,'Farm B','Texas'),(3,'Farm C','Washington'),(4,'Farm D','Florida'),(5,'Farm E','North Dakota');\nINSERT INTO \"Farms_Animals\" (FarmID,AnimalID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\n",
      "question": "For each farm, list the animals they use and their count.",
      "gold_queries": [
        "select farms.name , animals.type , animals.quantity from Farms_Animals join Animals on Farms_Animals.AnimalID = Animals.AnimalID join Farms on Farms_Animals.FarmID = Farms.FarmID"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For each farm, list the total quantity of each animal type.",
          "sql_queries": [
            "SELECT Farms.Name, Animals.Type, SUM(Animals.Quantity) AS TotalQuantity\nFROM Farms\nJOIN Farms_Animals ON Farms.FarmID = Farms_Animals.FarmID\nJOIN Animals ON Farms_Animals.AnimalID = Animals.AnimalID\nGROUP BY Farms.FarmID, Animals.AnimalID"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "For each farm, list the animal ID they use and their count.",
          "sql_queries": [
            "SELECT Farms.FarmID, Farms_Animals.AnimalID, Animals.Quantity\nFROM Farms_Animals\nJOIN Animals ON Farms_Animals.AnimalID = Animals.AnimalID"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT Farms.FarmID, Farms_Animals.AnimalID, Animals.Quantity\nFROM Farms_Animals\nJOIN Animals ON Farms_Animals.AnimalID = Animals.AnimalID",
                "original_exception": "no such column: Farms.FarmID"
              }
            ],
            "all_found": false
          }
        },
        {
          "interpretation": "For each farm, list the types of animals they use.",
          "sql_queries": [
            "SELECT Farms.Name, Animals.Type\nFROM Farms\nJOIN Farms_Animals ON Farms.FarmID = Farms_Animals.FarmID\nJOIN Animals ON Farms_Animals.AnimalID = Animals.AnimalID"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [
          {
            "query": "SELECT Farms.FarmID, Farms_Animals.AnimalID, Animals.Quantity\nFROM Farms_Animals\nJOIN Animals ON Farms_Animals.AnimalID = Animals.AnimalID",
            "original_exception": "no such column: Farms.FarmID"
          }
        ],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Agriculture/scope_farms_animals/scope_farms_animals.sqlite",
      "db_dump": "CREATE TABLE Animals (\n    AnimalID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Type TEXT,\n    Quantity INTEGER \n);\nCREATE TABLE Crops (\n    CropID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    HarvestDate DATE\n);\nCREATE TABLE Equipment (\n    EquipID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Model TEXT,\n    PurchaseDate DATE\n);\nCREATE TABLE Farms (\n    FarmID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Location TEXT\n);\nCREATE TABLE Farms_Animals (\n    FarmID INTEGER,\n    AnimalID INTEGER,\n    FOREIGN KEY (FarmID) REFERENCES Farms(FarmID),\n    FOREIGN KEY (AnimalID) REFERENCES Animals(AnimalID),\n    PRIMARY KEY (FarmID, AnimalID)\n);\nCREATE TABLE Farms_Crops (\n    FarmID INTEGER,\n    CropID INTEGER,\n    PlantingDate DATE,\n    HarvestEstimate DATE,\n    FOREIGN KEY (FarmID) REFERENCES Farms(FarmID),\n    FOREIGN KEY (CropID) REFERENCES Crops(CropID),\n    PRIMARY KEY (FarmID, CropID)\n);\nCREATE TABLE Farms_Equipment (\n    FarmID INTEGER,\n    EquipID INTEGER,\n    AcquisitionDate DATE,\n    MaintenanceSchedule TEXT,\n    FOREIGN KEY (FarmID) REFERENCES Farms(FarmID),\n    FOREIGN KEY (EquipID) REFERENCES Equipment(EquipID),\n    PRIMARY KEY (FarmID, EquipID)\n);\n\nINSERT INTO \"Animals\" (AnimalID,Type,Quantity) VALUES (1,'Cow',20),(2,'Pig',30),(3,'Chicken',100),(4,'Sheep',25),(5,'Goat',15);\nINSERT INTO \"Crops\" (CropID,Name,HarvestDate) VALUES (1,'Wheat','2023-08-01'),(2,'Corn','2023-09-01'),(3,'Barley','2023-07-01'),(4,'Rice','2023-10-01'),(5,'Oats','2023-06-01');\nINSERT INTO \"Equipment\" (EquipID,Model,PurchaseDate) VALUES (1,'Tractor A','2020-01-01'),(2,'Combine','2021-03-01'),(3,'Plow','2019-05-01'),(4,'Truck','2022-02-01'),(5,'Irrigation System','2020-04-01');\nINSERT INTO \"Farms\" (FarmID,Name,Location) VALUES (1,'Farm A','California'),(2,'Farm B','Texas'),(3,'Farm C','Washington'),(4,'Farm D','Florida'),(5,'Farm E','North Dakota');\nINSERT INTO \"Farms_Animals\" (FarmID,AnimalID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\n",
      "question": "Show me the farms and the types of animals they offer.",
      "gold_queries": [
        "select farms.name , animals.type from Farms_Animals join Animals on Farms_Animals.AnimalID = Animals.AnimalID join Farms on Farms_Animals.FarmID = Farms.FarmID"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Retrieve the name of each farm and a list of animal types found on that farm.",
          "sql_queries": [
            "SELECT Farms.Name, Animals.Type\nFROM Farms\nJOIN Farms_Animals ON Farms.FarmID = Farms_Animals.FarmID\nJOIN Animals ON Farms_Animals.AnimalID = Animals.AnimalID"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Display a unique list of farms and the corresponding animal types they house.",
          "sql_queries": [
            "SELECT DISTINCT Farms.Name, Animals.Type\nFROM Farms\nJOIN Farms_Animals ON Farms.FarmID = Farms_Animals.FarmID\nJOIN Animals ON Farms_Animals.AnimalID = Animals.AnimalID"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Produce a table showing farm names and a column for each animal type, indicating whether that type of animal is present on the farm.",
          "sql_queries": [
            "SELECT \n    F.Name AS FarmName,\n    MAX(CASE WHEN A.Type = 'Cow' THEN 'Yes' ELSE 'No' END) AS Cow,\n    MAX(CASE WHEN A.Type = 'Pig' THEN 'Yes' ELSE 'No' END) AS Pig,\n    MAX(CASE WHEN A.Type = 'Chicken' THEN 'Yes' ELSE 'No' END) AS Chicken,\n    MAX(CASE WHEN A.Type = 'Sheep' THEN 'Yes' ELSE 'No' END) AS Sheep,\n    MAX(CASE WHEN A.Type = 'Goat' THEN 'Yes' ELSE 'No' END) AS Goat\nFROM \n    Farms F\nLEFT JOIN \n    Farms_Animals FA ON F.FarmID = FA.FarmID\nLEFT JOIN \n    Animals A ON FA.AnimalID = A.AnimalID\nGROUP BY \n    F.FarmID, F.Name"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all farms and the animals present at each farm",
          "sql_queries": [
            "SELECT Farms.Name AS FarmName, Animals.Type AS AnimalType, Animals.Quantity AS AnimalQuantity\nFROM Farms\nJOIN Farms_Animals ON Farms.FarmID = Farms_Animals.FarmID\nJOIN Animals ON Farms_Animals.AnimalID = Animals.AnimalID"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Generate a report summarizing the animal types available at each farm.",
          "sql_queries": [
            "SELECT Farms.Name, Animals.Type\nFROM Farms\nJOIN Farms_Animals ON Farms.FarmID = Farms_Animals.FarmID\nJOIN Animals ON Farms_Animals.AnimalID = Animals.AnimalID"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 5,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/scope/Agriculture/scope_farms_animals/scope_farms_animals.sqlite",
      "db_dump": "CREATE TABLE Animals (\n    AnimalID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Type TEXT,\n    Quantity INTEGER \n);\nCREATE TABLE Crops (\n    CropID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    HarvestDate DATE\n);\nCREATE TABLE Equipment (\n    EquipID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Model TEXT,\n    PurchaseDate DATE\n);\nCREATE TABLE Farms (\n    FarmID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Location TEXT\n);\nCREATE TABLE Farms_Animals (\n    FarmID INTEGER,\n    AnimalID INTEGER,\n    FOREIGN KEY (FarmID) REFERENCES Farms(FarmID),\n    FOREIGN KEY (AnimalID) REFERENCES Animals(AnimalID),\n    PRIMARY KEY (FarmID, AnimalID)\n);\nCREATE TABLE Farms_Crops (\n    FarmID INTEGER,\n    CropID INTEGER,\n    PlantingDate DATE,\n    HarvestEstimate DATE,\n    FOREIGN KEY (FarmID) REFERENCES Farms(FarmID),\n    FOREIGN KEY (CropID) REFERENCES Crops(CropID),\n    PRIMARY KEY (FarmID, CropID)\n);\nCREATE TABLE Farms_Equipment (\n    FarmID INTEGER,\n    EquipID INTEGER,\n    AcquisitionDate DATE,\n    MaintenanceSchedule TEXT,\n    FOREIGN KEY (FarmID) REFERENCES Farms(FarmID),\n    FOREIGN KEY (EquipID) REFERENCES Equipment(EquipID),\n    PRIMARY KEY (FarmID, EquipID)\n);\n\nINSERT INTO \"Animals\" (AnimalID,Type,Quantity) VALUES (1,'Cow',20),(2,'Pig',30),(3,'Chicken',100),(4,'Sheep',25),(5,'Goat',15);\nINSERT INTO \"Crops\" (CropID,Name,HarvestDate) VALUES (1,'Wheat','2023-08-01'),(2,'Corn','2023-09-01'),(3,'Barley','2023-07-01'),(4,'Rice','2023-10-01'),(5,'Oats','2023-06-01');\nINSERT INTO \"Equipment\" (EquipID,Model,PurchaseDate) VALUES (1,'Tractor A','2020-01-01'),(2,'Combine','2021-03-01'),(3,'Plow','2019-05-01'),(4,'Truck','2022-02-01'),(5,'Irrigation System','2020-04-01');\nINSERT INTO \"Farms\" (FarmID,Name,Location) VALUES (1,'Farm A','California'),(2,'Farm B','Texas'),(3,'Farm C','Washington'),(4,'Farm D','Florida'),(5,'Farm E','North Dakota');\nINSERT INTO \"Farms_Animals\" (FarmID,AnimalID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\n",
      "question": "What is the common type of animal for all farms?",
      "gold_queries": [
        "SELECT Animals.Type  from Farms_Animals join Animals on Farms_Animals.AnimalID = Animals.AnimalID join Farms on Farms_Animals.FarmID = Farms.FarmID   GROUP BY Farms_Animals.AnimalID HAVING COUNT(DISTINCT Farms_Animals.FarmID) = (SELECT COUNT(*) FROM  Farms)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What animal type is listed in every farm's animal record in Farms_Animals?",
          "sql_queries": [
            "SELECT Type FROM Animals WHERE AnimalID IN (SELECT AnimalID FROM Farms_Animals GROUP BY AnimalID HAVING COUNT(DISTINCT FarmID) = (SELECT COUNT(*) FROM Farms))"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "What animal type is present in the largest number of farms?",
          "sql_queries": [
            "SELECT Type FROM Animals WHERE AnimalID = (SELECT AnimalID FROM Farms_Animals GROUP BY AnimalID ORDER BY COUNT(FarmID) DESC LIMIT 1)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/scope/Agriculture/scope_coffee_plantations_processing_techniques/scope_coffee_plantations_processing_techniques.sqlite",
      "db_dump": "CREATE TABLE Coffee_Plantations (\n    plantation_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT);\nCREATE TABLE Coffee_Plantations_Processing_Techniques (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    coffee_plantation_id INTEGER,\n    processing_technique_id INTEGER,\n    FOREIGN KEY(coffee_plantation_id) REFERENCES Coffee_Plantations(plantation_id),\n    FOREIGN KEY(processing_technique_id) REFERENCES Processing_Techniques(technique_id));\nCREATE TABLE Processing_Techniques (\n    technique_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    technique_name TEXT);\n\nINSERT INTO \"Coffee_Plantations\" (plantation_id,name,location) VALUES (1,'Plantation A','Location A'),(2,'Plantation B','Location B'),(3,'Plantation C','Location C'),(4,'Plantation D','Location D'),(5,'Plantation E','Location E');\nINSERT INTO \"Coffee_Plantations_Processing_Techniques\" (id,coffee_plantation_id,processing_technique_id) VALUES (1,1,1),(2,1,2),(3,1,3),(4,1,4),(5,1,5),(11,2,1),(12,3,1),(13,4,1),(14,5,1);\nINSERT INTO \"Processing_Techniques\" (technique_id,technique_name) VALUES (1,'Wet_Processing'),(2,'Dry_Processing'),(3,'Honey_Processing'),(4,'Natural_Processing'),(5,'Pulped_Natural_Processing');\n",
      "question": "For every coffee plantation, list the processing techniques used.",
      "gold_queries": [
        "select coffee_plantations.name , processing_techniques.technique_name from Coffee_Plantations_Processing_Techniques join Processing_Techniques on Coffee_Plantations_Processing_Techniques.processing_technique_id = Processing_Techniques.technique_id join Coffee_Plantations on Coffee_Plantations_Processing_Techniques.coffee_plantation_id = Coffee_Plantations.plantation_id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Show a table containing two columns: 'plantation_id' and 'processing_technique_ids'.",
          "sql_queries": [
            "SELECT coffee_plantation_id AS plantation_id, GROUP_CONCAT(processing_technique_id) AS processing_technique_ids FROM Coffee_Plantations_Processing_Techniques GROUP BY coffee_plantation_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Generate a mapping from plantation names to their corresponding processing techniques.",
          "sql_queries": [
            "SELECT \n    Cp.name AS plantation_name, \n    Pt.technique_name \nFROM \n    Coffee_Plantations AS Cp \nJOIN \n    Coffee_Plantations_Processing_Techniques AS CppT ON Cp.plantation_id = CppT.coffee_plantation_id \nJOIN \n    Processing_Techniques AS Pt ON CppT.processing_technique_id = Pt.technique_id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "List each processing technique used by any coffee plantation.",
          "sql_queries": [
            "SELECT DISTINCT technique_name FROM Processing_Techniques"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Find all unique processing techniques and their associated plantations.",
          "sql_queries": [
            "SELECT DISTINCT T2.technique_name, T1.name\nFROM Coffee_Plantations AS T1\nJOIN Coffee_Plantations_Processing_Techniques AS T3 ON T1.plantation_id = T3.coffee_plantation_id\nJOIN Processing_Techniques AS T2 ON T3.processing_technique_id = T2.technique_id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Retrieve a list of all coffee plantations. For each plantation, list the names of the processing techniques used at that plantation.",
          "sql_queries": [
            "SELECT P.name, PT.technique_name \nFROM Coffee_Plantations P \nJOIN Coffee_Plantations_Processing_Techniques CPPT ON P.plantation_id = CPPT.coffee_plantation_id \nJOIN Processing_Techniques PT ON CPPT.processing_technique_id = PT.technique_id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.6,
        "f1_score": 0.7499999999999999,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/scope/Agriculture/scope_coffee_plantations_processing_techniques/scope_coffee_plantations_processing_techniques.sqlite",
      "db_dump": "CREATE TABLE Coffee_Plantations (\n    plantation_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT);\nCREATE TABLE Coffee_Plantations_Processing_Techniques (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    coffee_plantation_id INTEGER,\n    processing_technique_id INTEGER,\n    FOREIGN KEY(coffee_plantation_id) REFERENCES Coffee_Plantations(plantation_id),\n    FOREIGN KEY(processing_technique_id) REFERENCES Processing_Techniques(technique_id));\nCREATE TABLE Processing_Techniques (\n    technique_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    technique_name TEXT);\n\nINSERT INTO \"Coffee_Plantations\" (plantation_id,name,location) VALUES (1,'Plantation A','Location A'),(2,'Plantation B','Location B'),(3,'Plantation C','Location C'),(4,'Plantation D','Location D'),(5,'Plantation E','Location E');\nINSERT INTO \"Coffee_Plantations_Processing_Techniques\" (id,coffee_plantation_id,processing_technique_id) VALUES (1,1,1),(2,1,2),(3,1,3),(4,1,4),(5,1,5),(11,2,1),(12,3,1),(13,4,1),(14,5,1);\nINSERT INTO \"Processing_Techniques\" (technique_id,technique_name) VALUES (1,'Wet_Processing'),(2,'Dry_Processing'),(3,'Honey_Processing'),(4,'Natural_Processing'),(5,'Pulped_Natural_Processing');\n",
      "question": "Give me the processing techniques each coffee plantation uses.",
      "gold_queries": [
        "SELECT Processing_Techniques.technique_name  from Coffee_Plantations_Processing_Techniques join Processing_Techniques on Coffee_Plantations_Processing_Techniques.processing_technique_id = Processing_Techniques.technique_id join Coffee_Plantations on Coffee_Plantations_Processing_Techniques.coffee_plantation_id = Coffee_Plantations.plantation_id   GROUP BY Coffee_Plantations_Processing_Techniques.processing_technique_id HAVING COUNT(DISTINCT Coffee_Plantations_Processing_Techniques.coffee_plantation_id) = (SELECT COUNT(*) FROM  Coffee_Plantations)",
        "select coffee_plantations.name , processing_techniques.technique_name from Coffee_Plantations_Processing_Techniques join Processing_Techniques on Coffee_Plantations_Processing_Techniques.processing_technique_id = Processing_Techniques.technique_id join Coffee_Plantations on Coffee_Plantations_Processing_Techniques.coffee_plantation_id = Coffee_Plantations.plantation_id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Return a table showing the plantation name and all processing techniques used there.",
          "sql_queries": [
            "SELECT CP.name, PT.technique_name\nFROM Coffee_Plantations_Processing_Techniques AS CPPT\nJOIN Coffee_Plantations AS CP ON CPPT.coffee_plantation_id = CP.plantation_id\nJOIN Processing_Techniques AS PT ON CPPT.processing_technique_id = PT.technique_id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Output a list where each item is a tuple containing plantation name and a list of processing techniques.",
          "sql_queries": [
            "SELECT \n    CP.name, \n    GROUP_CONCAT(PT.technique_name, ', ') AS processing_techniques\nFROM \n    Coffee_Plantations_Processing_Techniques CPP_T\nJOIN \n    Coffee_Plantations CP ON CPP_T.coffee_plantation_id = CP.plantation_id\nJOIN \n    Processing_Techniques PT ON CPP_T.processing_technique_id = PT.technique_id\nGROUP BY \n    CP.name"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Identify and display the unique processing techniques employed by each coffee plantation.",
          "sql_queries": [
            "SELECT CP.name, PT.technique_name\nFROM Coffee_Plantations AS CP\nJOIN Coffee_Plantations_Processing_Techniques AS CPPT ON CP.plantation_id = CPPT.coffee_plantation_id\nJOIN Processing_Techniques AS PT ON CPPT.processing_technique_id = PT.technique_id\nORDER BY CP.name, PT.technique_name"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List each plantation and the processing techniques associated with it.",
          "sql_queries": [
            "SELECT C.name, P.technique_name\nFROM Coffee_Plantations C\nJOIN Coffee_Plantations_Processing_Techniques CPP ON C.plantation_id = CPP.coffee_plantation_id\nJOIN Processing_Techniques P ON CPP.processing_technique_id = P.technique_id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.75,
        "f1_score": 0.6,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/scope/Agriculture/scope_coffee_plantations_processing_techniques/scope_coffee_plantations_processing_techniques.sqlite",
      "db_dump": "CREATE TABLE Coffee_Plantations (\n    plantation_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT);\nCREATE TABLE Coffee_Plantations_Processing_Techniques (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    coffee_plantation_id INTEGER,\n    processing_technique_id INTEGER,\n    FOREIGN KEY(coffee_plantation_id) REFERENCES Coffee_Plantations(plantation_id),\n    FOREIGN KEY(processing_technique_id) REFERENCES Processing_Techniques(technique_id));\nCREATE TABLE Processing_Techniques (\n    technique_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    technique_name TEXT);\n\nINSERT INTO \"Coffee_Plantations\" (plantation_id,name,location) VALUES (1,'Plantation A','Location A'),(2,'Plantation B','Location B'),(3,'Plantation C','Location C'),(4,'Plantation D','Location D'),(5,'Plantation E','Location E');\nINSERT INTO \"Coffee_Plantations_Processing_Techniques\" (id,coffee_plantation_id,processing_technique_id) VALUES (1,1,1),(2,1,2),(3,1,3),(4,1,4),(5,1,5),(11,2,1),(12,3,1),(13,4,1),(14,5,1);\nINSERT INTO \"Processing_Techniques\" (technique_id,technique_name) VALUES (1,'Wet_Processing'),(2,'Dry_Processing'),(3,'Honey_Processing'),(4,'Natural_Processing'),(5,'Pulped_Natural_Processing');\n",
      "question": "What processing techniques are the same on all coffee plantations?",
      "gold_queries": [
        "SELECT Processing_Techniques.technique_name  from Coffee_Plantations_Processing_Techniques join Processing_Techniques on Coffee_Plantations_Processing_Techniques.processing_technique_id = Processing_Techniques.technique_id join Coffee_Plantations on Coffee_Plantations_Processing_Techniques.coffee_plantation_id = Coffee_Plantations.plantation_id   GROUP BY Coffee_Plantations_Processing_Techniques.processing_technique_id HAVING COUNT(DISTINCT Coffee_Plantations_Processing_Techniques.coffee_plantation_id) = (SELECT COUNT(*) FROM  Coffee_Plantations)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Identify any processing techniques that are exclusively shared across all coffee plantations.",
          "sql_queries": [
            "SELECT technique_name\nFROM Processing_Techniques\nWHERE technique_id IN (\n    SELECT processing_technique_id\n    FROM Coffee_Plantations_Processing_Techniques\n    GROUP BY processing_technique_id\n    HAVING COUNT(DISTINCT coffee_plantation_id) = (\n        SELECT COUNT(*) FROM Coffee_Plantations\n    )\n)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "What processing techniques are used by every coffee plantation?",
          "sql_queries": [
            "SELECT technique_name\nFROM Processing_Techniques\nWHERE technique_id IN (\n    SELECT processing_technique_id\n    FROM Coffee_Plantations_Processing_Techniques\n    GROUP BY processing_technique_id\n    HAVING COUNT(DISTINCT coffee_plantation_id) = (\n        SELECT COUNT(*) FROM Coffee_Plantations\n    )\n)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "In which processing techniques do all coffee plantations utilize the same method?",
          "sql_queries": [
            "SELECT technique_name FROM Processing_Techniques WHERE technique_id IN (SELECT processing_technique_id FROM Coffee_Plantations_Processing_Techniques GROUP BY processing_technique_id HAVING COUNT(DISTINCT coffee_plantation_id) = (SELECT COUNT(*) FROM Coffee_Plantations))"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 3,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/scope/Agriculture/scope_aquaculture_facility_fish_species/scope_aquaculture_facility_fish_species.sqlite",
      "db_dump": "CREATE TABLE Aquaculture_Facility (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Aquaculture_Facility_Fish_Species (\n    aquaculture_facility_id INTEGER,\n    fish_species_id INTEGER,\n    FOREIGN KEY (aquaculture_facility_id) REFERENCES Aquaculture_Facility(id),\n    FOREIGN KEY (fish_species_id) REFERENCES Fish_Species(id),\n    PRIMARY KEY (aquaculture_facility_id, fish_species_id)\n);\nCREATE TABLE Fish_Species (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    species_name TEXT\n);\n\nINSERT INTO \"Aquaculture_Facility\" (id,name,location) VALUES (1,'Facility A','Location A'),(2,'Facility B','Location B'),(3,'Facility C','Location C'),(4,'Facility D','Location D'),(5,'Facility E','Location E');\nINSERT INTO \"Aquaculture_Facility_Fish_Species\" (aquaculture_facility_id,fish_species_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\nINSERT INTO \"Fish_Species\" (id,species_name) VALUES (1,'Salmon'),(2,'Catfish'),(3,'Tilapia'),(4,'Trout'),(5,'Bass');\n",
      "question": "For each facility, list the species they have.",
      "gold_queries": [
        "select aquaculture_facility.name , fish_species.species_name from Aquaculture_Facility_Fish_Species join Fish_Species on Aquaculture_Facility_Fish_Species.fish_species_id = Fish_Species.id join Aquaculture_Facility on Aquaculture_Facility_Fish_Species.aquaculture_facility_id = Aquaculture_Facility.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List for each Aquaculture_Facility in the database, the species_name of all fish_species_id associated with it.",
          "sql_queries": [
            "SELECT AF.name, FS.species_name \nFROM Aquaculture_Facility AF \nJOIN Aquaculture_Facility_Fish_Species AFFS ON AF.id = AFFS.aquaculture_facility_id \nJOIN Fish_Species FS ON AFFS.fish_species_id = FS.id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "List for each location in the `location` column, present a list of  fish species associated with those facilities.",
          "sql_queries": [
            "SELECT AF.location, FS.species_name\nFROM Aquaculture_Facility AS AF\nJOIN Aquaculture_Facility_Fish_Species AS AF_FS ON AF.id = AF_FS.aquaculture_facility_id\nJOIN Fish_Species AS FS ON AF_FS.fish_species_id = FS.id\nORDER BY AF.location, FS.species_name"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List for each facility name (`name` column) its corresponding fish species names (`species_name` column) from the Fish_Species table.",
          "sql_queries": [
            "SELECT AF.name, FS.species_name\nFROM Aquaculture_Facility AS AF\nJOIN Aquaculture_Facility_Fish_Species AS AFFS ON AF.id = AFFS.aquaculture_facility_id\nJOIN Fish_Species AS FS ON AFFS.fish_species_id = FS.id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.6666666666666666,
        "f1_score": 0.8,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/scope/Agriculture/scope_aquaculture_facility_fish_species/scope_aquaculture_facility_fish_species.sqlite",
      "db_dump": "CREATE TABLE Aquaculture_Facility (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Aquaculture_Facility_Fish_Species (\n    aquaculture_facility_id INTEGER,\n    fish_species_id INTEGER,\n    FOREIGN KEY (aquaculture_facility_id) REFERENCES Aquaculture_Facility(id),\n    FOREIGN KEY (fish_species_id) REFERENCES Fish_Species(id),\n    PRIMARY KEY (aquaculture_facility_id, fish_species_id)\n);\nCREATE TABLE Fish_Species (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    species_name TEXT\n);\n\nINSERT INTO \"Aquaculture_Facility\" (id,name,location) VALUES (1,'Facility A','Location A'),(2,'Facility B','Location B'),(3,'Facility C','Location C'),(4,'Facility D','Location D'),(5,'Facility E','Location E');\nINSERT INTO \"Aquaculture_Facility_Fish_Species\" (aquaculture_facility_id,fish_species_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\nINSERT INTO \"Fish_Species\" (id,species_name) VALUES (1,'Salmon'),(2,'Catfish'),(3,'Tilapia'),(4,'Trout'),(5,'Bass');\n",
      "question": "Tell me the species every facility has.",
      "gold_queries": [
        "SELECT Fish_Species.species_name  from Aquaculture_Facility_Fish_Species join Fish_Species on Aquaculture_Facility_Fish_Species.fish_species_id = Fish_Species.id join Aquaculture_Facility on Aquaculture_Facility_Fish_Species.aquaculture_facility_id = Aquaculture_Facility.id   GROUP BY Aquaculture_Facility_Fish_Species.fish_species_id HAVING COUNT(DISTINCT Aquaculture_Facility_Fish_Species.aquaculture_facility_id) = (SELECT COUNT(*) FROM  Aquaculture_Facility)",
        "select aquaculture_facility.name , fish_species.species_name from Aquaculture_Facility_Fish_Species join Fish_Species on Aquaculture_Facility_Fish_Species.fish_species_id = Fish_Species.id join Aquaculture_Facility on Aquaculture_Facility_Fish_Species.aquaculture_facility_id = Aquaculture_Facility.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Retrieve the distinct fish species found across all aquaculture facilities.",
          "sql_queries": [
            "SELECT DISTINCT species_name FROM Fish_Species"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "For each facility, list all the species it holds.",
          "sql_queries": [
            "SELECT AF.name, FS.species_name\nFROM Aquaculture_Facility AF\nJOIN Aquaculture_Facility_Fish_Species AFFS ON AF.id = AFFS.aquaculture_facility_id\nJOIN Fish_Species FS ON AFFS.fish_species_id = FS.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.5,
        "f1_score": 0.5,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Agriculture/scope_aquaculture_facility_fish_species/scope_aquaculture_facility_fish_species.sqlite",
      "db_dump": "CREATE TABLE Aquaculture_Facility (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Aquaculture_Facility_Fish_Species (\n    aquaculture_facility_id INTEGER,\n    fish_species_id INTEGER,\n    FOREIGN KEY (aquaculture_facility_id) REFERENCES Aquaculture_Facility(id),\n    FOREIGN KEY (fish_species_id) REFERENCES Fish_Species(id),\n    PRIMARY KEY (aquaculture_facility_id, fish_species_id)\n);\nCREATE TABLE Fish_Species (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    species_name TEXT\n);\n\nINSERT INTO \"Aquaculture_Facility\" (id,name,location) VALUES (1,'Facility A','Location A'),(2,'Facility B','Location B'),(3,'Facility C','Location C'),(4,'Facility D','Location D'),(5,'Facility E','Location E');\nINSERT INTO \"Aquaculture_Facility_Fish_Species\" (aquaculture_facility_id,fish_species_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\nINSERT INTO \"Fish_Species\" (id,species_name) VALUES (1,'Salmon'),(2,'Catfish'),(3,'Tilapia'),(4,'Trout'),(5,'Bass');\n",
      "question": "What species are common to all facilities?",
      "gold_queries": [
        "SELECT Fish_Species.species_name  from Aquaculture_Facility_Fish_Species join Fish_Species on Aquaculture_Facility_Fish_Species.fish_species_id = Fish_Species.id join Aquaculture_Facility on Aquaculture_Facility_Fish_Species.aquaculture_facility_id = Aquaculture_Facility.id   GROUP BY Aquaculture_Facility_Fish_Species.fish_species_id HAVING COUNT(DISTINCT Aquaculture_Facility_Fish_Species.aquaculture_facility_id) = (SELECT COUNT(*) FROM  Aquaculture_Facility)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What are the species found at a majority of facilities?",
          "sql_queries": [
            "SELECT species_name FROM Fish_Species WHERE id IN (SELECT fish_species_id FROM Aquaculture_Facility_Fish_Species GROUP BY fish_species_id HAVING COUNT(aquaculture_facility_id) > (SELECT COUNT(id) / 2 FROM Aquaculture_Facility))"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Determine the fish species with the highest overlap across different facilities.",
          "sql_queries": [
            "SELECT species_name\nFROM Fish_Species\nWHERE id = (\n    SELECT fish_species_id\n    FROM Aquaculture_Facility_Fish_Species\n    GROUP BY fish_species_id\n    ORDER BY COUNT(DISTINCT aquaculture_facility_id) DESC\n    LIMIT 1\n)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Which fish species are present in every facility?",
          "sql_queries": [
            "SELECT species_name \nFROM Fish_Species \nWHERE id IN (\n    SELECT fish_species_id \n    FROM Aquaculture_Facility_Fish_Species \n    GROUP BY fish_species_id \n    HAVING COUNT(DISTINCT aquaculture_facility_id) = (SELECT COUNT(*) FROM Aquaculture_Facility)\n)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "List species cultivated in at least 80% of the facilities.",
          "sql_queries": [
            "SELECT FS.species_name\nFROM Fish_Species FS\nJOIN Aquaculture_Facility_Fish_Species AFS ON FS.id = AFS.fish_species_id\nGROUP BY FS.species_name\nHAVING COUNT(DISTINCT AFS.aquaculture_facility_id) >= 0.8 * (SELECT COUNT(*) FROM Aquaculture_Facility)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Identify the species that appear in more than half of the aquaculture facilities.",
          "sql_queries": [
            "SELECT species_name \nFROM Fish_Species \nWHERE id IN (\n    SELECT fish_species_id \n    FROM Aquaculture_Facility_Fish_Species \n    GROUP BY fish_species_id \n    HAVING COUNT(DISTINCT aquaculture_facility_id) > (SELECT COUNT(*) FROM Aquaculture_Facility) / 2\n)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 5
    },
    {
      "db_file": "data/scope/Agriculture/scope_agricultural_research_institutes_focus_areas/scope_agricultural_research_institutes_focus_areas.sqlite",
      "db_dump": "CREATE TABLE Agricultural_Research_Institutes (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Agricultural_Research_Institutes_Focus_Areas (\n    institute_id INTEGER,\n    focus_area_id INTEGER,\n    FOREIGN KEY(institute_id) REFERENCES Agricultural_Research_Institutes(id),\n    FOREIGN KEY(focus_area_id) REFERENCES Focus_Areas(id),\n    PRIMARY KEY(institute_id, focus_area_id)\n);\nCREATE TABLE Focus_Areas (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    area_name TEXT\n);\n\nINSERT INTO \"Agricultural_Research_Institutes\" (id,name,location) VALUES (1,'Institute A','Location A'),(2,'Institute B','Location B'),(3,'Institute C','Location C'),(4,'Institute D','Location D'),(5,'Institute E','Location E');\nINSERT INTO \"Agricultural_Research_Institutes_Focus_Areas\" (institute_id,focus_area_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\nINSERT INTO \"Focus_Areas\" (id,area_name) VALUES (1,'Sustainability Research'),(2,'Soil Management'),(3,'Pest Control'),(4,'Crop Rotation'),(5,'Fertilization Techniques');\n",
      "question": "Give me the focus area in common for all agricultural research institutes.",
      "gold_queries": [
        "SELECT Focus_Areas.area_name  from Agricultural_Research_Institutes_Focus_Areas join Focus_Areas on Agricultural_Research_Institutes_Focus_Areas.focus_area_id = Focus_Areas.id join Agricultural_Research_Institutes on Agricultural_Research_Institutes_Focus_Areas.institute_id = Agricultural_Research_Institutes.id   GROUP BY Agricultural_Research_Institutes_Focus_Areas.focus_area_id HAVING COUNT(DISTINCT Agricultural_Research_Institutes_Focus_Areas.institute_id) = (SELECT COUNT(*) FROM  Agricultural_Research_Institutes)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Find the commonality among all focus areas listed for all institutes.",
          "sql_queries": [
            "SELECT area_name FROM Focus_Areas WHERE id IN (SELECT focus_area_id FROM Agricultural_Research_Institutes_Focus_Areas GROUP BY focus_area_id HAVING COUNT(*) = (SELECT COUNT(*) FROM Agricultural_Research_Institutes))"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Identify the focus area present in every single institute's list of focuses.",
          "sql_queries": [
            "SELECT area_name\nFROM Focus_Areas\nWHERE id IN (\n    SELECT focus_area_id\n    FROM Agricultural_Research_Institutes_Focus_Areas\n    GROUP BY focus_area_id\n    HAVING COUNT(DISTINCT institute_id) = (\n        SELECT COUNT(*) FROM Agricultural_Research_Institutes\n    )\n)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Retrieve the focus area with the maximum number of associated institutes.",
          "sql_queries": [
            "SELECT area_name \nFROM Focus_Areas \nWHERE id = (\n    SELECT focus_area_id \n    FROM Agricultural_Research_Institutes_Focus_Areas \n    GROUP BY focus_area_id \n    ORDER BY COUNT(*) DESC \n    LIMIT 1\n)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/scope/Agriculture/scope_agricultural_research_institutes_focus_areas/scope_agricultural_research_institutes_focus_areas.sqlite",
      "db_dump": "CREATE TABLE Agricultural_Research_Institutes (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Agricultural_Research_Institutes_Focus_Areas (\n    institute_id INTEGER,\n    focus_area_id INTEGER,\n    FOREIGN KEY(institute_id) REFERENCES Agricultural_Research_Institutes(id),\n    FOREIGN KEY(focus_area_id) REFERENCES Focus_Areas(id),\n    PRIMARY KEY(institute_id, focus_area_id)\n);\nCREATE TABLE Focus_Areas (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    area_name TEXT\n);\n\nINSERT INTO \"Agricultural_Research_Institutes\" (id,name,location) VALUES (1,'Institute A','Location A'),(2,'Institute B','Location B'),(3,'Institute C','Location C'),(4,'Institute D','Location D'),(5,'Institute E','Location E');\nINSERT INTO \"Agricultural_Research_Institutes_Focus_Areas\" (institute_id,focus_area_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\nINSERT INTO \"Focus_Areas\" (id,area_name) VALUES (1,'Sustainability Research'),(2,'Soil Management'),(3,'Pest Control'),(4,'Crop Rotation'),(5,'Fertilization Techniques');\n",
      "question": "For each agricultural research institute, what is the corresponding focus area?",
      "gold_queries": [
        "select agricultural_research_institutes.name , focus_areas.area_name from Agricultural_Research_Institutes_Focus_Areas join Focus_Areas on Agricultural_Research_Institutes_Focus_Areas.focus_area_id = Focus_Areas.id join Agricultural_Research_Institutes on Agricultural_Research_Institutes_Focus_Areas.institute_id = Agricultural_Research_Institutes.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Provide a one-to-many mapping of institutes to their focus areas.",
          "sql_queries": [
            "SELECT a.name AS institute_name, f.area_name AS focus_area_name\nFROM Agricultural_Research_Institutes a\nJOIN Agricultural_Research_Institutes_Focus_Areas af ON a.id = af.institute_id\nJOIN Focus_Areas f ON af.focus_area_id = f.id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Return a list of tuples, where each tuple represents an institute and its assigned focus area.",
          "sql_queries": [
            "SELECT A.name, F.area_name \nFROM Agricultural_Research_Institutes AS A \nJOIN Agricultural_Research_Institutes_Focus_Areas AS AF ON A.id = AF.institute_id \nJOIN Focus_Areas AS F ON AF.focus_area_id = F.id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Show each distinct focus area associated with each institute.",
          "sql_queries": [
            "SELECT DISTINCT T1.name, T3.area_name \nFROM Agricultural_Research_Institutes AS T1 \nJOIN Agricultural_Research_Institutes_Focus_Areas AS T2 ON T1.id = T2.institute_id \nJOIN Focus_Areas AS T3 ON T2.focus_area_id = T3.id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Generate a table with columns for institute name and corresponding focus area.",
          "sql_queries": [
            "SELECT ARI.name, FA.area_name\nFROM Agricultural_Research_Institutes ARI\nJOIN Agricultural_Research_Institutes_Focus_Areas ARIAFA ON ARI.id = ARIAFA.institute_id\nJOIN Focus_Areas FA ON ARIAFA.focus_area_id = FA.id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "List all institutes and their respective focus areas.",
          "sql_queries": [
            "SELECT ARI.name, FA.area_name\nFROM Agricultural_Research_Institutes ARI\nJOIN Agricultural_Research_Institutes_Focus_Areas ARIAFA ON ARI.id = ARIAFA.institute_id\nJOIN Focus_Areas FA ON ARIAFA.focus_area_id = FA.id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 5,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 5
    },
    {
      "db_file": "data/scope/Agriculture/scope_agricultural_research_institutes_focus_areas/scope_agricultural_research_institutes_focus_areas.sqlite",
      "db_dump": "CREATE TABLE Agricultural_Research_Institutes (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Agricultural_Research_Institutes_Focus_Areas (\n    institute_id INTEGER,\n    focus_area_id INTEGER,\n    FOREIGN KEY(institute_id) REFERENCES Agricultural_Research_Institutes(id),\n    FOREIGN KEY(focus_area_id) REFERENCES Focus_Areas(id),\n    PRIMARY KEY(institute_id, focus_area_id)\n);\nCREATE TABLE Focus_Areas (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    area_name TEXT\n);\n\nINSERT INTO \"Agricultural_Research_Institutes\" (id,name,location) VALUES (1,'Institute A','Location A'),(2,'Institute B','Location B'),(3,'Institute C','Location C'),(4,'Institute D','Location D'),(5,'Institute E','Location E');\nINSERT INTO \"Agricultural_Research_Institutes_Focus_Areas\" (institute_id,focus_area_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\nINSERT INTO \"Focus_Areas\" (id,area_name) VALUES (1,'Sustainability Research'),(2,'Soil Management'),(3,'Pest Control'),(4,'Crop Rotation'),(5,'Fertilization Techniques');\n",
      "question": "Give me the focus area of each agricultural research institute.",
      "gold_queries": [
        "SELECT Focus_Areas.area_name  from Agricultural_Research_Institutes_Focus_Areas join Focus_Areas on Agricultural_Research_Institutes_Focus_Areas.focus_area_id = Focus_Areas.id join Agricultural_Research_Institutes on Agricultural_Research_Institutes_Focus_Areas.institute_id = Agricultural_Research_Institutes.id   GROUP BY Agricultural_Research_Institutes_Focus_Areas.focus_area_id HAVING COUNT(DISTINCT Agricultural_Research_Institutes_Focus_Areas.institute_id) = (SELECT COUNT(*) FROM  Agricultural_Research_Institutes)",
        "select agricultural_research_institutes.name , focus_areas.area_name from Agricultural_Research_Institutes_Focus_Areas join Focus_Areas on Agricultural_Research_Institutes_Focus_Areas.focus_area_id = Focus_Areas.id join Agricultural_Research_Institutes on Agricultural_Research_Institutes_Focus_Areas.institute_id = Agricultural_Research_Institutes.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List all focus_area_names associated with each institute_name from the Agricultural_Research_Institutes and Focus_Areas tables.",
          "sql_queries": [
            "SELECT T1.name AS institute_name, T3.area_name AS focus_area_name\nFROM Agricultural_Research_Institutes AS T1\nJOIN Agricultural_Research_Institutes_Focus_Areas AS T2 ON T1.id = T2.institute_id\nJOIN Focus_Areas AS T3 ON T2.focus_area_id = T3.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve the primary focus_area_id for each institute_id from the Agricultural_Research_Institutes_Focus_Areas table.",
          "sql_queries": [
            "SELECT institute_id, MIN(focus_area_id) AS primary_focus_area_id FROM Agricultural_Research_Institutes_Focus_Areas GROUP BY institute_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Determine the number of institutes focusing on each distinct focus_area.",
          "sql_queries": [
            "SELECT focus_area_id, COUNT(institute_id) AS number_of_institutes\nFROM Agricultural_Research_Institutes_Focus_Areas\nGROUP BY focus_area_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "For each institute, display its name and a list of all focus_area_names it is involved in.",
          "sql_queries": [
            "SELECT A.name, GROUP_CONCAT(F.area_name) AS focus_area_names\nFROM Agricultural_Research_Institutes AS A\nJOIN Agricultural_Research_Institutes_Focus_Areas AS AF ON A.id = AF.institute_id\nJOIN Focus_Areas AS F ON AF.focus_area_id = F.id\nGROUP BY A.name"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Summarize the distribution of focus_areas across all agricultural research institutes.",
          "sql_queries": [
            "SELECT Focus_Areas.area_name, COUNT(Agricultural_Research_Institutes_Focus_Areas.institute_id) AS institute_count\nFROM Agricultural_Research_Institutes_Focus_Areas\nJOIN Focus_Areas ON Agricultural_Research_Institutes_Focus_Areas.focus_area_id = Focus_Areas.id\nGROUP BY Focus_Areas.area_name"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Find the distinct focus_area_names explored by all agricultural research institutes.",
          "sql_queries": [
            "SELECT DISTINCT area_name FROM Focus_Areas"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Identify which focus_area is most prevalent among agricultural research institutes.",
          "sql_queries": [
            "SELECT area_name \nFROM Focus_Areas \nWHERE id = (\n    SELECT focus_area_id \n    FROM Agricultural_Research_Institutes_Focus_Areas \n    GROUP BY focus_area_id \n    ORDER BY COUNT(*) DESC \n    LIMIT 1\n)"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 7,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2857142857142857,
        "f1_score": 0.4444444444444445,
        "num_queries": 7,
        "num_unique_queries": 7,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/scope/Agriculture/scope_agricultural_machinery_stores_brands/scope_agricultural_machinery_stores_brands.sqlite",
      "db_dump": "CREATE TABLE Agricultural_Machinery_Stores(\n    store_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    store_name TEXT,\n    location TEXT\n);\nCREATE TABLE Brands(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    brand_name TEXT\n);\nCREATE TABLE Machines(\n    machine_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    model_number TEXT,\n    description TEXT\n);\nCREATE TABLE Stores_Brands(\n    store_id INTEGER,\n    brand_id INTEGER,\n    FOREIGN KEY (store_id) REFERENCES Agricultural_Machinery_Stores(store_id),\n    FOREIGN KEY (brand_id) REFERENCES Brands(id)\n);\nCREATE TABLE Stores_Machines(\n    store_id INTEGER,\n    machine_id INTEGER,\n    FOREIGN KEY (store_id) REFERENCES Agricultural_Machinery_Stores(store_id),\n    FOREIGN KEY (machine_id) REFERENCES Machines(machine_id)\n);\n\nINSERT INTO \"Agricultural_Machinery_Stores\" (store_id,store_name,location) VALUES (1,'Store A','123 Main St'),(2,'Store B','456 Elm St'),(3,'Store C','789 Oak St'),(4,'Store D','012 Pine St'),(5,'Store E','345 Maple St');\nINSERT INTO \"Brands\" (id,brand_name) VALUES (1,'John Deere'),(2,'Caterpillar'),(3,'New Holland'),(4,'Case IH'),(5,'Fendt');\nINSERT INTO \"Machines\" (machine_id,model_number,description) VALUES (1,'Model X','Tractor Model X from John Deere.'),(2,'Model Y','Combine Harvester Model Y by New Holland.'),(3,'Model Z','Plow Model Z made by Case IH.'),(4,'Model W','Tiller Model W produced by Fendt.'),(5,'Model V','Seeder Model V created by Caterpillar.');\nINSERT INTO \"Stores_Brands\" (store_id,brand_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "What brands of agricultural machinery are available in each machinery store",
      "gold_queries": [
        "SELECT Brands.brand_name  from Stores_Brands join Brands on Stores_Brands.brand_id = Brands.id join Agricultural_Machinery_Stores on Stores_Brands.store_id = Agricultural_Machinery_Stores.store_id   GROUP BY Stores_Brands.brand_id HAVING COUNT(DISTINCT Stores_Brands.store_id) = (SELECT COUNT(*) FROM  Agricultural_Machinery_Stores)",
        "select agricultural_machinery_stores.store_name , brands.brand_name from Stores_Brands join Brands on Stores_Brands.brand_id = Brands.id join Agricultural_Machinery_Stores on Stores_Brands.store_id = Agricultural_Machinery_Stores.store_id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For every store, what brands of agricultural machinery are offered?",
          "sql_queries": [
            "SELECT T1.store_name, T3.brand_name \nFROM Agricultural_Machinery_Stores AS T1 \nJOIN Stores_Brands AS T2 ON T1.store_id = T2.store_id \nJOIN Brands AS T3 ON T2.brand_id = T3.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Tell me the brands in each store categorized to stores.",
          "sql_queries": [
            "SELECT s.store_name, b.brand_name \nFROM Stores_Brands sb \nJOIN Agricultural_Machinery_Stores s ON sb.store_id = s.store_id \nJOIN Brands b ON sb.brand_id = b.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all brands carried by each store",
          "sql_queries": [
            "SELECT s.store_name, b.brand_name\nFROM Agricultural_Machinery_Stores s\nJOIN Stores_Brands sb ON s.store_id = sb.store_id\nJOIN Brands b ON sb.brand_id = b.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Which brands are stocked by each store?",
          "sql_queries": [
            "SELECT A.store_name, B.brand_name\nFROM Agricultural_Machinery_Stores A\nJOIN Stores_Brands S ON A.store_id = S.store_id\nJOIN Brands B ON S.brand_id = B.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "what is the brand collection associated with each store?",
          "sql_queries": [
            "SELECT store_name, GROUP_CONCAT(brand_name) AS brands\nFROM Agricultural_Machinery_Stores\nJOIN Stores_Brands ON Agricultural_Machinery_Stores.store_id = Stores_Brands.store_id\nJOIN Brands ON Stores_Brands.brand_id = Brands.id\nGROUP BY store_name"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Identify the brands available at each agricultural machinery store.",
          "sql_queries": [
            "SELECT s.store_name, b.brand_name\nFROM Agricultural_Machinery_Stores s\nJOIN Stores_Brands sb ON s.store_id = sb.store_id\nJOIN Brands b ON sb.brand_id = b.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Provide a list of brands sold in each store",
          "sql_queries": [
            "SELECT s.store_name, b.brand_name\nFROM Agricultural_Machinery_Stores s\nJOIN Stores_Brands sb ON s.store_id = sb.store_id\nJOIN Brands b ON sb.brand_id = b.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.8,
        "f1_score": 0.6153846153846154,
        "num_queries": 7,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 6
    },
    {
      "db_file": "data/scope/Agriculture/scope_agricultural_machinery_stores_brands/scope_agricultural_machinery_stores_brands.sqlite",
      "db_dump": "CREATE TABLE Agricultural_Machinery_Stores(\n    store_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    store_name TEXT,\n    location TEXT\n);\nCREATE TABLE Brands(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    brand_name TEXT\n);\nCREATE TABLE Machines(\n    machine_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    model_number TEXT,\n    description TEXT\n);\nCREATE TABLE Stores_Brands(\n    store_id INTEGER,\n    brand_id INTEGER,\n    FOREIGN KEY (store_id) REFERENCES Agricultural_Machinery_Stores(store_id),\n    FOREIGN KEY (brand_id) REFERENCES Brands(id)\n);\nCREATE TABLE Stores_Machines(\n    store_id INTEGER,\n    machine_id INTEGER,\n    FOREIGN KEY (store_id) REFERENCES Agricultural_Machinery_Stores(store_id),\n    FOREIGN KEY (machine_id) REFERENCES Machines(machine_id)\n);\n\nINSERT INTO \"Agricultural_Machinery_Stores\" (store_id,store_name,location) VALUES (1,'Store A','123 Main St'),(2,'Store B','456 Elm St'),(3,'Store C','789 Oak St'),(4,'Store D','012 Pine St'),(5,'Store E','345 Maple St');\nINSERT INTO \"Brands\" (id,brand_name) VALUES (1,'John Deere'),(2,'Caterpillar'),(3,'New Holland'),(4,'Case IH'),(5,'Fendt');\nINSERT INTO \"Machines\" (machine_id,model_number,description) VALUES (1,'Model X','Tractor Model X from John Deere.'),(2,'Model Y','Combine Harvester Model Y by New Holland.'),(3,'Model Z','Plow Model Z made by Case IH.'),(4,'Model W','Tiller Model W produced by Fendt.'),(5,'Model V','Seeder Model V created by Caterpillar.');\nINSERT INTO \"Stores_Brands\" (store_id,brand_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "Which brands of machinery are equally available in all agricultural machinery stores?",
      "gold_queries": [
        "SELECT Brands.brand_name  from Stores_Brands join Brands on Stores_Brands.brand_id = Brands.id join Agricultural_Machinery_Stores on Stores_Brands.store_id = Agricultural_Machinery_Stores.store_id   GROUP BY Stores_Brands.brand_id HAVING COUNT(DISTINCT Stores_Brands.store_id) = (SELECT COUNT(*) FROM  Agricultural_Machinery_Stores)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Identify brands present in at least half of the stores.",
          "sql_queries": [
            "SELECT brand_name FROM Brands WHERE id IN (SELECT brand_id FROM Stores_Brands GROUP BY brand_id HAVING COUNT(DISTINCT store_id) >= (SELECT COUNT(*) / 2 FROM Agricultural_Machinery_Stores))"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "List brands available at the same number of stores.",
          "sql_queries": [
            "SELECT brand_id, COUNT(store_id) AS store_count\nFROM Stores_Brands\nGROUP BY brand_id\nORDER BY store_count"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Determine brands stocked in a statistically significant majority of stores.",
          "sql_queries": [
            "SELECT B.brand_name\nFROM Brands B\nJOIN Stores_Brands SB ON B.id = SB.brand_id\nGROUP BY B.id\nHAVING COUNT(DISTINCT SB.store_id) > (SELECT COUNT(store_id) / 2 FROM Agricultural_Machinery_Stores)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Find brands with uniform distribution across all stores.",
          "sql_queries": [
            "SELECT B.brand_name\nFROM Brands B\nJOIN Stores_Brands SB ON B.id = SB.brand_id\nGROUP BY B.brand_name\nHAVING COUNT(DISTINCT SB.store_id) = (SELECT COUNT(*) FROM Agricultural_Machinery_Stores)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Find brands carried by every store.",
          "sql_queries": [
            "SELECT brand_name\nFROM Brands\nWHERE id IN (\n    SELECT brand_id\n    FROM Stores_Brands\n    GROUP BY brand_id\n    HAVING COUNT(DISTINCT store_id) = (SELECT COUNT(*) FROM Agricultural_Machinery_Stores)\n)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.8,
        "f1_score": 0.888888888888889,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 4
    },
    {
      "db_file": "data/scope/Agriculture/scope_agricultural_machinery_stores_brands/scope_agricultural_machinery_stores_brands.sqlite",
      "db_dump": "CREATE TABLE Agricultural_Machinery_Stores(\n    store_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    store_name TEXT,\n    location TEXT\n);\nCREATE TABLE Brands(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    brand_name TEXT\n);\nCREATE TABLE Machines(\n    machine_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    model_number TEXT,\n    description TEXT\n);\nCREATE TABLE Stores_Brands(\n    store_id INTEGER,\n    brand_id INTEGER,\n    FOREIGN KEY (store_id) REFERENCES Agricultural_Machinery_Stores(store_id),\n    FOREIGN KEY (brand_id) REFERENCES Brands(id)\n);\nCREATE TABLE Stores_Machines(\n    store_id INTEGER,\n    machine_id INTEGER,\n    FOREIGN KEY (store_id) REFERENCES Agricultural_Machinery_Stores(store_id),\n    FOREIGN KEY (machine_id) REFERENCES Machines(machine_id)\n);\n\nINSERT INTO \"Agricultural_Machinery_Stores\" (store_id,store_name,location) VALUES (1,'Store A','123 Main St'),(2,'Store B','456 Elm St'),(3,'Store C','789 Oak St'),(4,'Store D','012 Pine St'),(5,'Store E','345 Maple St');\nINSERT INTO \"Brands\" (id,brand_name) VALUES (1,'John Deere'),(2,'Caterpillar'),(3,'New Holland'),(4,'Case IH'),(5,'Fendt');\nINSERT INTO \"Machines\" (machine_id,model_number,description) VALUES (1,'Model X','Tractor Model X from John Deere.'),(2,'Model Y','Combine Harvester Model Y by New Holland.'),(3,'Model Z','Plow Model Z made by Case IH.'),(4,'Model W','Tiller Model W produced by Fendt.'),(5,'Model V','Seeder Model V created by Caterpillar.');\nINSERT INTO \"Stores_Brands\" (store_id,brand_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "For each agricultural machinery store, show which brands of machinery are available?",
      "gold_queries": [
        "select agricultural_machinery_stores.store_name , brands.brand_name from Stores_Brands join Brands on Stores_Brands.brand_id = Brands.id join Agricultural_Machinery_Stores on Stores_Brands.store_id = Agricultural_Machinery_Stores.store_id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Generate a report that identifies all brands available at every store.",
          "sql_queries": [
            "SELECT ASMS.store_name, B.brand_name\nFROM Agricultural_Machinery_Stores AS ASMS\nJOIN Stores_Brands AS SB ON ASMS.store_id = SB.store_id\nJOIN Brands AS B ON SB.brand_id = B.id\nORDER BY ASMS.store_name, B.brand_name"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Display all unique brand_names associated with each store_id.",
          "sql_queries": [
            "SELECT DISTINCT store_id, brand_name FROM Stores_Brands JOIN Brands ON Stores_Brands.brand_id = Brands.id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Show a table with two columns, store_id and brand_name, listing every combination of store and brand present in the Stores_Brands table.",
          "sql_queries": [
            "SELECT T1.store_id, T2.brand_name\nFROM Stores_Brands AS T1\nJOIN Brands AS T2 ON T1.brand_id = T2.id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Produce a query that returns a list of stores and their corresponding brands.",
          "sql_queries": [
            "SELECT A.store_name, B.brand_name\nFROM Agricultural_Machinery_Stores A\nJOIN Stores_Brands SB ON A.store_id = SB.store_id\nJOIN Brands B ON SB.brand_id = B.id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "List each agricultural machinery store and the associated brand_name(s).",
          "sql_queries": [
            "SELECT a.store_name, b.brand_name\nFROM Agricultural_Machinery_Stores a\nJOIN Stores_Brands sb ON a.store_id = sb.store_id\nJOIN Brands b ON sb.brand_id = b.id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.6,
        "f1_score": 0.7499999999999999,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/scope/Agriculture/scope_farms_animals/scope_farms_animals.sqlite",
      "db_dump": "CREATE TABLE Animals (\n    AnimalID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Type TEXT,\n    Quantity INTEGER \n);\nCREATE TABLE Crops (\n    CropID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    HarvestDate DATE\n);\nCREATE TABLE Equipment (\n    EquipID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Model TEXT,\n    PurchaseDate DATE\n);\nCREATE TABLE Farms (\n    FarmID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Location TEXT\n);\nCREATE TABLE Farms_Animals (\n    FarmID INTEGER,\n    AnimalID INTEGER,\n    FOREIGN KEY (FarmID) REFERENCES Farms(FarmID),\n    FOREIGN KEY (AnimalID) REFERENCES Animals(AnimalID),\n    PRIMARY KEY (FarmID, AnimalID)\n);\nCREATE TABLE Farms_Crops (\n    FarmID INTEGER,\n    CropID INTEGER,\n    PlantingDate DATE,\n    HarvestEstimate DATE,\n    FOREIGN KEY (FarmID) REFERENCES Farms(FarmID),\n    FOREIGN KEY (CropID) REFERENCES Crops(CropID),\n    PRIMARY KEY (FarmID, CropID)\n);\nCREATE TABLE Farms_Equipment (\n    FarmID INTEGER,\n    EquipID INTEGER,\n    AcquisitionDate DATE,\n    MaintenanceSchedule TEXT,\n    FOREIGN KEY (FarmID) REFERENCES Farms(FarmID),\n    FOREIGN KEY (EquipID) REFERENCES Equipment(EquipID),\n    PRIMARY KEY (FarmID, EquipID)\n);\n\nINSERT INTO \"Animals\" (AnimalID,Type,Quantity) VALUES (1,'Cow',20),(2,'Pig',30),(3,'Chicken',100),(4,'Sheep',25),(5,'Goat',15);\nINSERT INTO \"Crops\" (CropID,Name,HarvestDate) VALUES (1,'Wheat','2023-08-01'),(2,'Corn','2023-09-01'),(3,'Barley','2023-07-01'),(4,'Rice','2023-10-01'),(5,'Oats','2023-06-01');\nINSERT INTO \"Equipment\" (EquipID,Model,PurchaseDate) VALUES (1,'Tractor A','2020-01-01'),(2,'Combine','2021-03-01'),(3,'Plow','2019-05-01'),(4,'Truck','2022-02-01'),(5,'Irrigation System','2020-04-01');\nINSERT INTO \"Farms\" (FarmID,Name,Location) VALUES (1,'Farm A','California'),(2,'Farm B','Texas'),(3,'Farm C','Washington'),(4,'Farm D','Florida'),(5,'Farm E','North Dakota');\nINSERT INTO \"Farms_Animals\" (FarmID,AnimalID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\n",
      "question": "Show me the animals that are the same on all farms and their count.",
      "gold_queries": [
        "SELECT Animals.Type, Animals.Quantity  from Farms_Animals join Animals on Farms_Animals.AnimalID = Animals.AnimalID join Farms on Farms_Animals.FarmID = Farms.FarmID   GROUP BY Farms_Animals.AnimalID HAVING COUNT(DISTINCT Farms_Animals.FarmID) = (SELECT COUNT(*) FROM  Farms)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Find animals present in every farm.",
          "sql_queries": [
            "SELECT Type FROM Animals WHERE AnimalID IN (SELECT AnimalID FROM Farms_Animals GROUP BY AnimalID HAVING COUNT(DISTINCT FarmID) = (SELECT COUNT(*) FROM Farms))"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Identify animals with equal quantities across all farms.",
          "sql_queries": [
            "SELECT Type, Quantity\nFROM Animals\nWHERE Quantity = (SELECT Quantity FROM Farms_Animals GROUP BY AnimalID HAVING COUNT(DISTINCT Quantity) = 1)"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT Type, Quantity\nFROM Animals\nWHERE Quantity = (SELECT Quantity FROM Farms_Animals GROUP BY AnimalID HAVING COUNT(DISTINCT Quantity) = 1)",
                "original_exception": "misuse of aggregate: COUNT()"
              }
            ],
            "all_found": false
          }
        },
        {
          "interpretation": "List unique animals existing across all farms.",
          "sql_queries": [
            "SELECT DISTINCT Type FROM Animals"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [
          {
            "query": "SELECT Type, Quantity\nFROM Animals\nWHERE Quantity = (SELECT Quantity FROM Farms_Animals GROUP BY AnimalID HAVING COUNT(DISTINCT Quantity) = 1)",
            "original_exception": "misuse of aggregate: COUNT()"
          }
        ],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Agriculture/scope_farms_animals/scope_farms_animals.sqlite",
      "db_dump": "CREATE TABLE Animals (\n    AnimalID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Type TEXT,\n    Quantity INTEGER \n);\nCREATE TABLE Crops (\n    CropID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    HarvestDate DATE\n);\nCREATE TABLE Equipment (\n    EquipID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Model TEXT,\n    PurchaseDate DATE\n);\nCREATE TABLE Farms (\n    FarmID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Location TEXT\n);\nCREATE TABLE Farms_Animals (\n    FarmID INTEGER,\n    AnimalID INTEGER,\n    FOREIGN KEY (FarmID) REFERENCES Farms(FarmID),\n    FOREIGN KEY (AnimalID) REFERENCES Animals(AnimalID),\n    PRIMARY KEY (FarmID, AnimalID)\n);\nCREATE TABLE Farms_Crops (\n    FarmID INTEGER,\n    CropID INTEGER,\n    PlantingDate DATE,\n    HarvestEstimate DATE,\n    FOREIGN KEY (FarmID) REFERENCES Farms(FarmID),\n    FOREIGN KEY (CropID) REFERENCES Crops(CropID),\n    PRIMARY KEY (FarmID, CropID)\n);\nCREATE TABLE Farms_Equipment (\n    FarmID INTEGER,\n    EquipID INTEGER,\n    AcquisitionDate DATE,\n    MaintenanceSchedule TEXT,\n    FOREIGN KEY (FarmID) REFERENCES Farms(FarmID),\n    FOREIGN KEY (EquipID) REFERENCES Equipment(EquipID),\n    PRIMARY KEY (FarmID, EquipID)\n);\n\nINSERT INTO \"Animals\" (AnimalID,Type,Quantity) VALUES (1,'Cow',20),(2,'Pig',30),(3,'Chicken',100),(4,'Sheep',25),(5,'Goat',15);\nINSERT INTO \"Crops\" (CropID,Name,HarvestDate) VALUES (1,'Wheat','2023-08-01'),(2,'Corn','2023-09-01'),(3,'Barley','2023-07-01'),(4,'Rice','2023-10-01'),(5,'Oats','2023-06-01');\nINSERT INTO \"Equipment\" (EquipID,Model,PurchaseDate) VALUES (1,'Tractor A','2020-01-01'),(2,'Combine','2021-03-01'),(3,'Plow','2019-05-01'),(4,'Truck','2022-02-01'),(5,'Irrigation System','2020-04-01');\nINSERT INTO \"Farms\" (FarmID,Name,Location) VALUES (1,'Farm A','California'),(2,'Farm B','Texas'),(3,'Farm C','Washington'),(4,'Farm D','Florida'),(5,'Farm E','North Dakota');\nINSERT INTO \"Farms_Animals\" (FarmID,AnimalID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\n",
      "question": "Show me the animals each farm uses and their count.",
      "gold_queries": [
        "SELECT Animals.Type, Animals.Quantity  from Farms_Animals join Animals on Farms_Animals.AnimalID = Animals.AnimalID join Farms on Farms_Animals.FarmID = Farms.FarmID   GROUP BY Farms_Animals.AnimalID HAVING COUNT(DISTINCT Farms_Animals.FarmID) = (SELECT COUNT(*) FROM  Farms)",
        "select farms.name , animals.type , animals.quantity from Farms_Animals join Animals on Farms_Animals.AnimalID = Animals.AnimalID join Farms on Farms_Animals.FarmID = Farms.FarmID"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Display a count of animals owned by each farm, categorized by type.",
          "sql_queries": [
            "SELECT Farms.Name, Animals.Type, COUNT(Animals.Quantity) AS AnimalCount\nFROM Farms\nJOIN Farms_Animals ON Farms.FarmID = Farms_Animals.FarmID\nJOIN Animals ON Farms_Animals.AnimalID = Animals.AnimalID\nGROUP BY Farms.Name, Animals.Type"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List each farm and the number of each type of animal they have.",
          "sql_queries": [
            "SELECT F.Name, A.Type, FA.Quantity\nFROM Farms_Animals FA\nJOIN Farms F ON FA.FarmID = F.FarmID\nJOIN Animals A ON FA.AnimalID = A.AnimalID"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT F.Name, A.Type, FA.Quantity\nFROM Farms_Animals FA\nJOIN Farms F ON FA.FarmID = F.FarmID\nJOIN Animals A ON FA.AnimalID = A.AnimalID",
                "original_exception": "no such column: FA.Quantity"
              }
            ],
            "all_found": false
          }
        },
        {
          "interpretation": "Show animals associated with each farm and their quantity.",
          "sql_queries": [
            "SELECT Farms.Name, Animals.Type, Animals.Quantity\nFROM Farms_Animals\nJOIN Farms ON Farms_Animals.FarmID = Farms.FarmID\nJOIN Animals ON Farms_Animals.AnimalID = Animals.AnimalID"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Select F.Name, A.Type, COUNT(A.AnimalID)",
          "sql_queries": [
            "SELECT F.Name, A.Type, COUNT(A.AnimalID)\nFROM Farms F\nJOIN Farms_Animals FA ON F.FarmID = FA.FarmID\nJOIN Animals A ON FA.AnimalID = A.AnimalID\nGROUP BY F.Name, A.Type"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.25,
        "f1_score": 0.3333333333333333,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [
          {
            "query": "SELECT F.Name, A.Type, FA.Quantity\nFROM Farms_Animals FA\nJOIN Farms F ON FA.FarmID = F.FarmID\nJOIN Animals A ON FA.AnimalID = A.AnimalID",
            "original_exception": "no such column: FA.Quantity"
          }
        ],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Agriculture/scope_farms_animals/scope_farms_animals.sqlite",
      "db_dump": "CREATE TABLE Animals (\n    AnimalID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Type TEXT,\n    Quantity INTEGER \n);\nCREATE TABLE Crops (\n    CropID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    HarvestDate DATE\n);\nCREATE TABLE Equipment (\n    EquipID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Model TEXT,\n    PurchaseDate DATE\n);\nCREATE TABLE Farms (\n    FarmID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Location TEXT\n);\nCREATE TABLE Farms_Animals (\n    FarmID INTEGER,\n    AnimalID INTEGER,\n    FOREIGN KEY (FarmID) REFERENCES Farms(FarmID),\n    FOREIGN KEY (AnimalID) REFERENCES Animals(AnimalID),\n    PRIMARY KEY (FarmID, AnimalID)\n);\nCREATE TABLE Farms_Crops (\n    FarmID INTEGER,\n    CropID INTEGER,\n    PlantingDate DATE,\n    HarvestEstimate DATE,\n    FOREIGN KEY (FarmID) REFERENCES Farms(FarmID),\n    FOREIGN KEY (CropID) REFERENCES Crops(CropID),\n    PRIMARY KEY (FarmID, CropID)\n);\nCREATE TABLE Farms_Equipment (\n    FarmID INTEGER,\n    EquipID INTEGER,\n    AcquisitionDate DATE,\n    MaintenanceSchedule TEXT,\n    FOREIGN KEY (FarmID) REFERENCES Farms(FarmID),\n    FOREIGN KEY (EquipID) REFERENCES Equipment(EquipID),\n    PRIMARY KEY (FarmID, EquipID)\n);\n\nINSERT INTO \"Animals\" (AnimalID,Type,Quantity) VALUES (1,'Cow',20),(2,'Pig',30),(3,'Chicken',100),(4,'Sheep',25),(5,'Goat',15);\nINSERT INTO \"Crops\" (CropID,Name,HarvestDate) VALUES (1,'Wheat','2023-08-01'),(2,'Corn','2023-09-01'),(3,'Barley','2023-07-01'),(4,'Rice','2023-10-01'),(5,'Oats','2023-06-01');\nINSERT INTO \"Equipment\" (EquipID,Model,PurchaseDate) VALUES (1,'Tractor A','2020-01-01'),(2,'Combine','2021-03-01'),(3,'Plow','2019-05-01'),(4,'Truck','2022-02-01'),(5,'Irrigation System','2020-04-01');\nINSERT INTO \"Farms\" (FarmID,Name,Location) VALUES (1,'Farm A','California'),(2,'Farm B','Texas'),(3,'Farm C','Washington'),(4,'Farm D','Florida'),(5,'Farm E','North Dakota');\nINSERT INTO \"Farms_Animals\" (FarmID,AnimalID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\n",
      "question": "What is the type of animal for each farm?",
      "gold_queries": [
        "SELECT Animals.Type  from Farms_Animals join Animals on Farms_Animals.AnimalID = Animals.AnimalID join Farms on Farms_Animals.FarmID = Farms.FarmID   GROUP BY Farms_Animals.AnimalID HAVING COUNT(DISTINCT Farms_Animals.FarmID) = (SELECT COUNT(*) FROM  Farms)",
        "select farms.name , animals.type from Farms_Animals join Animals on Farms_Animals.AnimalID = Animals.AnimalID join Farms on Farms_Animals.FarmID = Farms.FarmID"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Return a table with farm names as a column and a corresponding column with a comma-separated list of animal types found at each farm.",
          "sql_queries": [
            "SELECT Farms.Name, GROUP_CONCAT(Animals.Type) AS Animals\nFROM Farms\nJOIN Farms_Animals ON Farms.FarmID = Farms_Animals.FarmID\nJOIN Animals ON Farms_Animals.AnimalID = Animals.AnimalID\nGROUP BY Farms.FarmID"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "For each farm, list the distinct animal types housed there.",
          "sql_queries": [
            "SELECT Farms.Name, DISTINCT Animals.Type\nFROM Farms\nJOIN Farms_Animals ON Farms.FarmID = Farms_Animals.FarmID\nJOIN Animals ON Farms_Animals.AnimalID = Animals.AnimalID\nGROUP BY Farms.Name, Animals.Type"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT Farms.Name, DISTINCT Animals.Type\nFROM Farms\nJOIN Farms_Animals ON Farms.FarmID = Farms_Animals.FarmID\nJOIN Animals ON Farms_Animals.AnimalID = Animals.AnimalID\nGROUP BY Farms.Name, Animals.Type",
                "original_exception": "near \"DISTINCT\": syntax error"
              }
            ],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve a list of all animal types present across all farms.",
          "sql_queries": [
            "SELECT DISTINCT Type FROM Animals"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [
          {
            "query": "SELECT Farms.Name, DISTINCT Animals.Type\nFROM Farms\nJOIN Farms_Animals ON Farms.FarmID = Farms_Animals.FarmID\nJOIN Animals ON Farms_Animals.AnimalID = Animals.AnimalID\nGROUP BY Farms.Name, Animals.Type",
            "original_exception": "near \"DISTINCT\": syntax error"
          }
        ],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Agriculture/scope_farms_animals/scope_farms_animals.sqlite",
      "db_dump": "CREATE TABLE Animals (\n    AnimalID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Type TEXT,\n    Quantity INTEGER \n);\nCREATE TABLE Crops (\n    CropID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    HarvestDate DATE\n);\nCREATE TABLE Equipment (\n    EquipID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Model TEXT,\n    PurchaseDate DATE\n);\nCREATE TABLE Farms (\n    FarmID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Location TEXT\n);\nCREATE TABLE Farms_Animals (\n    FarmID INTEGER,\n    AnimalID INTEGER,\n    FOREIGN KEY (FarmID) REFERENCES Farms(FarmID),\n    FOREIGN KEY (AnimalID) REFERENCES Animals(AnimalID),\n    PRIMARY KEY (FarmID, AnimalID)\n);\nCREATE TABLE Farms_Crops (\n    FarmID INTEGER,\n    CropID INTEGER,\n    PlantingDate DATE,\n    HarvestEstimate DATE,\n    FOREIGN KEY (FarmID) REFERENCES Farms(FarmID),\n    FOREIGN KEY (CropID) REFERENCES Crops(CropID),\n    PRIMARY KEY (FarmID, CropID)\n);\nCREATE TABLE Farms_Equipment (\n    FarmID INTEGER,\n    EquipID INTEGER,\n    AcquisitionDate DATE,\n    MaintenanceSchedule TEXT,\n    FOREIGN KEY (FarmID) REFERENCES Farms(FarmID),\n    FOREIGN KEY (EquipID) REFERENCES Equipment(EquipID),\n    PRIMARY KEY (FarmID, EquipID)\n);\n\nINSERT INTO \"Animals\" (AnimalID,Type,Quantity) VALUES (1,'Cow',20),(2,'Pig',30),(3,'Chicken',100),(4,'Sheep',25),(5,'Goat',15);\nINSERT INTO \"Crops\" (CropID,Name,HarvestDate) VALUES (1,'Wheat','2023-08-01'),(2,'Corn','2023-09-01'),(3,'Barley','2023-07-01'),(4,'Rice','2023-10-01'),(5,'Oats','2023-06-01');\nINSERT INTO \"Equipment\" (EquipID,Model,PurchaseDate) VALUES (1,'Tractor A','2020-01-01'),(2,'Combine','2021-03-01'),(3,'Plow','2019-05-01'),(4,'Truck','2022-02-01'),(5,'Irrigation System','2020-04-01');\nINSERT INTO \"Farms\" (FarmID,Name,Location) VALUES (1,'Farm A','California'),(2,'Farm B','Texas'),(3,'Farm C','Washington'),(4,'Farm D','Florida'),(5,'Farm E','North Dakota');\nINSERT INTO \"Farms_Animals\" (FarmID,AnimalID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\n",
      "question": "What is the quantity of animals all farms have?",
      "gold_queries": [
        "SELECT Animals.Quantity  from Farms_Animals join Animals on Farms_Animals.AnimalID = Animals.AnimalID join Farms on Farms_Animals.FarmID = Farms.FarmID   GROUP BY Farms_Animals.AnimalID HAVING COUNT(DISTINCT Farms_Animals.FarmID) = (SELECT COUNT(*) FROM  Farms)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What is the sum of the AnimalQuantity column for all entries in the Farms_Animals table?",
          "sql_queries": [
            "SELECT SUM(AnimalID) AS AnimalQuantity FROM Farms_Animals"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "What is the total quantity of all animals across all farms?",
          "sql_queries": [
            "SELECT SUM(Quantity) FROM Animals"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "How many animals in total are listed in the database across all farms?",
          "sql_queries": [
            "SELECT SUM(Quantity) FROM Animals"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Agriculture/scope_fertilizers_components/scope_fertilizers_components.sqlite",
      "db_dump": "CREATE TABLE Components(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    componentName TEXT);\nCREATE TABLE Crops(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    cropName TEXT,\n    yield REAL);\nCREATE TABLE FarmerInfo(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    farmerName TEXT,\n    farmLocation TEXT);\nCREATE TABLE Farmers_Crops(\n    farmerId INTEGER,\n    cropId INTEGER,\n    FOREIGN KEY (farmerId) REFERENCES FarmerInfo(id),\n    FOREIGN KEY (cropId) REFERENCES Crops(id));\nCREATE TABLE Fertilizers(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    quantity REAL);\nCREATE TABLE Fertilizers_Components(\n    fertilizerId INTEGER,\n    componentId INTEGER,\n    FOREIGN KEY (fertilizerId) REFERENCES Fertilizers(id),\n    FOREIGN KEY (componentId) REFERENCES Components(id));\n\nINSERT INTO \"Components\" (id,componentName) VALUES (1,'Nitrogen'),(2,'Phosphorus'),(3,'Potassium'),(4,'Calcium'),(5,'Magnesium');\nINSERT INTO \"Crops\" (id,cropName,yield) VALUES (1,'Wheat',7000.0),(2,'Corn',8000.0),(3,'Rice',6000.0),(4,'Barley',5000.0),(5,'Oats',4000.0);\nINSERT INTO \"FarmerInfo\" (id,farmerName,farmLocation) VALUES (1,'Farmer1','New York'),(2,'Farmer2','Chicago'),(3,'Farmer3','Los Angeles'),(4,'Farmer4','Houston'),(5,'Farmer5','Philadelphia');\nINSERT INTO \"Farmers_Crops\" (farmerId,cropId) VALUES (1,1),(1,2),(2,1),(2,3),(3,1);\nINSERT INTO \"Fertilizers\" (id,name,quantity) VALUES (1,'Fertilizer1',100.0),(2,'Fertilizer2',150.0),(3,'Fertilizer3',200.0),(4,'Fertilizer4',250.0),(5,'Fertilizer5',300.0);\nINSERT INTO \"Fertilizers_Components\" (fertilizerId,componentId) VALUES (1,1),(1,2),(2,1),(2,3),(3,1),(4,1),(5,1);\n",
      "question": "What components are common to all fertilizers?",
      "gold_queries": [
        "SELECT Components.componentName  from Fertilizers_Components join Components on Fertilizers_Components.componentId = Components.id join Fertilizers on Fertilizers_Components.fertilizerId = Fertilizers.id   GROUP BY Fertilizers_Components.componentId HAVING COUNT(DISTINCT Fertilizers_Components.fertilizerId) = (SELECT COUNT(*) FROM  Fertilizers)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Identify the components shared by all fertilizer entries.",
          "sql_queries": [
            "SELECT componentName\nFROM Components\nWHERE id IN (\n    SELECT componentId\n    FROM Fertilizers_Components\n    GROUP BY componentId\n    HAVING COUNT(DISTINCT fertilizerId) = (SELECT COUNT(*) FROM Fertilizers)\n)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Find the components present in every single fertilizer.",
          "sql_queries": [
            "SELECT componentName \nFROM Components \nWHERE id IN (SELECT componentId FROM Fertilizers_Components \n             GROUP BY componentId \n             HAVING COUNT(fertilizerId) = (SELECT COUNT(*) FROM Fertilizers))"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Which components appear in every fertilizer?",
          "sql_queries": [
            "SELECT componentName FROM Components WHERE id IN (SELECT componentId FROM Fertilizers_Components GROUP BY componentId HAVING COUNT(fertilizerId) = (SELECT COUNT(*) FROM Fertilizers))"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "List the components used in all types of fertilizers.",
          "sql_queries": [
            "SELECT componentName FROM Components"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.75,
        "f1_score": 0.8571428571428571,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/scope/Agriculture/scope_fertilizers_components/scope_fertilizers_components.sqlite",
      "db_dump": "CREATE TABLE Components(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    componentName TEXT);\nCREATE TABLE Crops(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    cropName TEXT,\n    yield REAL);\nCREATE TABLE FarmerInfo(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    farmerName TEXT,\n    farmLocation TEXT);\nCREATE TABLE Farmers_Crops(\n    farmerId INTEGER,\n    cropId INTEGER,\n    FOREIGN KEY (farmerId) REFERENCES FarmerInfo(id),\n    FOREIGN KEY (cropId) REFERENCES Crops(id));\nCREATE TABLE Fertilizers(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    quantity REAL);\nCREATE TABLE Fertilizers_Components(\n    fertilizerId INTEGER,\n    componentId INTEGER,\n    FOREIGN KEY (fertilizerId) REFERENCES Fertilizers(id),\n    FOREIGN KEY (componentId) REFERENCES Components(id));\n\nINSERT INTO \"Components\" (id,componentName) VALUES (1,'Nitrogen'),(2,'Phosphorus'),(3,'Potassium'),(4,'Calcium'),(5,'Magnesium');\nINSERT INTO \"Crops\" (id,cropName,yield) VALUES (1,'Wheat',7000.0),(2,'Corn',8000.0),(3,'Rice',6000.0),(4,'Barley',5000.0),(5,'Oats',4000.0);\nINSERT INTO \"FarmerInfo\" (id,farmerName,farmLocation) VALUES (1,'Farmer1','New York'),(2,'Farmer2','Chicago'),(3,'Farmer3','Los Angeles'),(4,'Farmer4','Houston'),(5,'Farmer5','Philadelphia');\nINSERT INTO \"Farmers_Crops\" (farmerId,cropId) VALUES (1,1),(1,2),(2,1),(2,3),(3,1);\nINSERT INTO \"Fertilizers\" (id,name,quantity) VALUES (1,'Fertilizer1',100.0),(2,'Fertilizer2',150.0),(3,'Fertilizer3',200.0),(4,'Fertilizer4',250.0),(5,'Fertilizer5',300.0);\nINSERT INTO \"Fertilizers_Components\" (fertilizerId,componentId) VALUES (1,1),(1,2),(2,1),(2,3),(3,1),(4,1),(5,1);\n",
      "question": "For every fertilizer, show the components that they contain.",
      "gold_queries": [
        "select fertilizers.name , components.componentname from Fertilizers_Components join Components on Fertilizers_Components.componentId = Components.id join Fertilizers on Fertilizers_Components.fertilizerId = Fertilizers.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Select fertilizerId, componentId From Fertilizers_Components",
          "sql_queries": [
            "SELECT fertilizerId, componentId FROM Fertilizers_Components"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "For every fertilizer, include the component names",
          "sql_queries": [
            "SELECT F.name, C.componentName FROM Fertilizers AS F JOIN Fertilizers_Components AS FC ON F.id = FC.fertilizerId JOIN Components AS C ON FC.componentId = C.id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "List the components used in each fertilizer",
          "sql_queries": [
            "SELECT Fertilizers.name, Components.componentName\nFROM Fertilizers\nJOIN Fertilizers_Components ON Fertilizers.id = Fertilizers_Components.fertilizerId\nJOIN Components ON Fertilizers_Components.componentId = Components.id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Display the relationship between fertilizers and components",
          "sql_queries": [
            "SELECT F.name, C.componentName \nFROM Fertilizers_Components FC \nJOIN Fertilizers F ON FC.fertilizerId = F.id \nJOIN Components C ON FC.componentId = C.id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Output a table of fertilizers and their corresponding components",
          "sql_queries": [
            "SELECT F.name AS fertilizerName, C.componentName\nFROM Fertilizers_Components FC\nJOIN Fertilizers F ON FC.fertilizerId = F.id\nJOIN Components C ON FC.componentId = C.id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.8,
        "f1_score": 0.888888888888889,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 4
    },
    {
      "db_file": "data/scope/Agriculture/scope_fertilizers_components/scope_fertilizers_components.sqlite",
      "db_dump": "CREATE TABLE Components(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    componentName TEXT);\nCREATE TABLE Crops(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    cropName TEXT,\n    yield REAL);\nCREATE TABLE FarmerInfo(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    farmerName TEXT,\n    farmLocation TEXT);\nCREATE TABLE Farmers_Crops(\n    farmerId INTEGER,\n    cropId INTEGER,\n    FOREIGN KEY (farmerId) REFERENCES FarmerInfo(id),\n    FOREIGN KEY (cropId) REFERENCES Crops(id));\nCREATE TABLE Fertilizers(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    quantity REAL);\nCREATE TABLE Fertilizers_Components(\n    fertilizerId INTEGER,\n    componentId INTEGER,\n    FOREIGN KEY (fertilizerId) REFERENCES Fertilizers(id),\n    FOREIGN KEY (componentId) REFERENCES Components(id));\n\nINSERT INTO \"Components\" (id,componentName) VALUES (1,'Nitrogen'),(2,'Phosphorus'),(3,'Potassium'),(4,'Calcium'),(5,'Magnesium');\nINSERT INTO \"Crops\" (id,cropName,yield) VALUES (1,'Wheat',7000.0),(2,'Corn',8000.0),(3,'Rice',6000.0),(4,'Barley',5000.0),(5,'Oats',4000.0);\nINSERT INTO \"FarmerInfo\" (id,farmerName,farmLocation) VALUES (1,'Farmer1','New York'),(2,'Farmer2','Chicago'),(3,'Farmer3','Los Angeles'),(4,'Farmer4','Houston'),(5,'Farmer5','Philadelphia');\nINSERT INTO \"Farmers_Crops\" (farmerId,cropId) VALUES (1,1),(1,2),(2,1),(2,3),(3,1);\nINSERT INTO \"Fertilizers\" (id,name,quantity) VALUES (1,'Fertilizer1',100.0),(2,'Fertilizer2',150.0),(3,'Fertilizer3',200.0),(4,'Fertilizer4',250.0),(5,'Fertilizer5',300.0);\nINSERT INTO \"Fertilizers_Components\" (fertilizerId,componentId) VALUES (1,1),(1,2),(2,1),(2,3),(3,1),(4,1),(5,1);\n",
      "question": "Give me the components for each fertilizer.",
      "gold_queries": [
        "SELECT Components.componentName  from Fertilizers_Components join Components on Fertilizers_Components.componentId = Components.id join Fertilizers on Fertilizers_Components.fertilizerId = Fertilizers.id   GROUP BY Fertilizers_Components.componentId HAVING COUNT(DISTINCT Fertilizers_Components.fertilizerId) = (SELECT COUNT(*) FROM  Fertilizers)",
        "select fertilizers.name , components.componentname from Fertilizers_Components join Components on Fertilizers_Components.componentId = Components.id join Fertilizers on Fertilizers_Components.fertilizerId = Fertilizers.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Display the name of each fertilizer and its corresponding components.",
          "sql_queries": [
            "SELECT F.name, C.componentName\nFROM Fertilizers F\nJOIN Fertilizers_Components FC ON F.id = FC.fertilizerId\nJOIN Components C ON FC.componentId = C.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all components used in each fertilizer.",
          "sql_queries": [
            "SELECT Fertilizers.name, Components.componentName\nFROM Fertilizers\nJOIN Fertilizers_Components ON Fertilizers.id = Fertilizers_Components.fertilizerId\nJOIN Components ON Fertilizers_Components.componentId = Components.id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Return a table showing fertilizer and its component list.",
          "sql_queries": [
            "SELECT F.name, GROUP_CONCAT(C.componentName) AS components\nFROM Fertilizers F\nJOIN Fertilizers_Components FC ON F.id = FC.fertilizerId\nJOIN Components C ON FC.componentId = C.id\nGROUP BY F.id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.6666666666666666,
        "f1_score": 0.5714285714285715,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/scope/Agriculture/scope_farms_animals/scope_farms_animals.sqlite",
      "db_dump": "CREATE TABLE Animals (\n    AnimalID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Type TEXT,\n    Quantity INTEGER \n);\nCREATE TABLE Crops (\n    CropID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    HarvestDate DATE\n);\nCREATE TABLE Equipment (\n    EquipID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Model TEXT,\n    PurchaseDate DATE\n);\nCREATE TABLE Farms (\n    FarmID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Location TEXT\n);\nCREATE TABLE Farms_Animals (\n    FarmID INTEGER,\n    AnimalID INTEGER,\n    FOREIGN KEY (FarmID) REFERENCES Farms(FarmID),\n    FOREIGN KEY (AnimalID) REFERENCES Animals(AnimalID),\n    PRIMARY KEY (FarmID, AnimalID)\n);\nCREATE TABLE Farms_Crops (\n    FarmID INTEGER,\n    CropID INTEGER,\n    PlantingDate DATE,\n    HarvestEstimate DATE,\n    FOREIGN KEY (FarmID) REFERENCES Farms(FarmID),\n    FOREIGN KEY (CropID) REFERENCES Crops(CropID),\n    PRIMARY KEY (FarmID, CropID)\n);\nCREATE TABLE Farms_Equipment (\n    FarmID INTEGER,\n    EquipID INTEGER,\n    AcquisitionDate DATE,\n    MaintenanceSchedule TEXT,\n    FOREIGN KEY (FarmID) REFERENCES Farms(FarmID),\n    FOREIGN KEY (EquipID) REFERENCES Equipment(EquipID),\n    PRIMARY KEY (FarmID, EquipID)\n);\n\nINSERT INTO \"Animals\" (AnimalID,Type,Quantity) VALUES (1,'Cow',20),(2,'Pig',30),(3,'Chicken',100),(4,'Sheep',25),(5,'Goat',15);\nINSERT INTO \"Crops\" (CropID,Name,HarvestDate) VALUES (1,'Wheat','2023-08-01'),(2,'Corn','2023-09-01'),(3,'Barley','2023-07-01'),(4,'Rice','2023-10-01'),(5,'Oats','2023-06-01');\nINSERT INTO \"Equipment\" (EquipID,Model,PurchaseDate) VALUES (1,'Tractor A','2020-01-01'),(2,'Combine','2021-03-01'),(3,'Plow','2019-05-01'),(4,'Truck','2022-02-01'),(5,'Irrigation System','2020-04-01');\nINSERT INTO \"Farms\" (FarmID,Name,Location) VALUES (1,'Farm A','California'),(2,'Farm B','Texas'),(3,'Farm C','Washington'),(4,'Farm D','Florida'),(5,'Farm E','North Dakota');\nINSERT INTO \"Farms_Animals\" (FarmID,AnimalID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\n",
      "question": "For every farm, list the quantity of animals they have.",
      "gold_queries": [
        "select farms.name , animals.quantity from Farms_Animals join Animals on Farms_Animals.AnimalID = Animals.AnimalID join Farms on Farms_Animals.FarmID = Farms.FarmID"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List the quantity of each animal type owned by each farm.",
          "sql_queries": [
            "SELECT Farms.Name, Animals.Type, Animals.Quantity \nFROM Farms_Animals \nJOIN Farms ON Farms_Animals.FarmID = Farms.FarmID \nJOIN Animals ON Farms_Animals.AnimalID = Animals.AnimalID"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Output the animal count for each farm.",
          "sql_queries": [
            "SELECT Farms.Name, SUM(Animals.Quantity) AS AnimalCount\nFROM Farms\nJOIN Farms_Animals ON Farms.FarmID = Farms_Animals.FarmID\nJOIN Animals ON Farms_Animals.AnimalID = Animals.AnimalID\nGROUP BY Farms.Name"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Return a table with two columns: FarmID and TotalAnimals.",
          "sql_queries": [
            "SELECT FarmID, SUM(Quantity) AS TotalAnimals\nFROM Farms_Animals\nJOIN Animals ON Farms_Animals.AnimalID = Animals.AnimalID\nGROUP BY FarmID"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Display the number of animals belonging to each farm.",
          "sql_queries": [
            "SELECT Farms.Name, COUNT(Farms_Animals.AnimalID) AS NumberOfAnimals\nFROM Farms\nJOIN Farms_Animals ON Farms.FarmID = Farms_Animals.FarmID\nGROUP BY Farms.Name"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "For each farm, calculate the total number of animals.",
          "sql_queries": [
            "SELECT Farms.Name, SUM(Animals.Quantity) AS TotalAnimals\nFROM Farms\nJOIN Farms_Animals ON Farms.FarmID = Farms_Animals.FarmID\nJOIN Animals ON Farms_Animals.AnimalID = Animals.AnimalID\nGROUP BY Farms.FarmID"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List the Farm name and the corresponding quantity of animals they have.",
          "sql_queries": [
            "SELECT F.Name, A.Quantity\nFROM Farms_Animals FA\nJOIN Farms F ON FA.FarmID = F.FarmID\nJOIN Animals A ON FA.AnimalID = A.AnimalID"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.16666666666666666,
        "f1_score": 0.2857142857142857,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Agriculture/scope_farms_animals/scope_farms_animals.sqlite",
      "db_dump": "CREATE TABLE Animals (\n    AnimalID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Type TEXT,\n    Quantity INTEGER \n);\nCREATE TABLE Crops (\n    CropID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    HarvestDate DATE\n);\nCREATE TABLE Equipment (\n    EquipID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Model TEXT,\n    PurchaseDate DATE\n);\nCREATE TABLE Farms (\n    FarmID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Location TEXT\n);\nCREATE TABLE Farms_Animals (\n    FarmID INTEGER,\n    AnimalID INTEGER,\n    FOREIGN KEY (FarmID) REFERENCES Farms(FarmID),\n    FOREIGN KEY (AnimalID) REFERENCES Animals(AnimalID),\n    PRIMARY KEY (FarmID, AnimalID)\n);\nCREATE TABLE Farms_Crops (\n    FarmID INTEGER,\n    CropID INTEGER,\n    PlantingDate DATE,\n    HarvestEstimate DATE,\n    FOREIGN KEY (FarmID) REFERENCES Farms(FarmID),\n    FOREIGN KEY (CropID) REFERENCES Crops(CropID),\n    PRIMARY KEY (FarmID, CropID)\n);\nCREATE TABLE Farms_Equipment (\n    FarmID INTEGER,\n    EquipID INTEGER,\n    AcquisitionDate DATE,\n    MaintenanceSchedule TEXT,\n    FOREIGN KEY (FarmID) REFERENCES Farms(FarmID),\n    FOREIGN KEY (EquipID) REFERENCES Equipment(EquipID),\n    PRIMARY KEY (FarmID, EquipID)\n);\n\nINSERT INTO \"Animals\" (AnimalID,Type,Quantity) VALUES (1,'Cow',20),(2,'Pig',30),(3,'Chicken',100),(4,'Sheep',25),(5,'Goat',15);\nINSERT INTO \"Crops\" (CropID,Name,HarvestDate) VALUES (1,'Wheat','2023-08-01'),(2,'Corn','2023-09-01'),(3,'Barley','2023-07-01'),(4,'Rice','2023-10-01'),(5,'Oats','2023-06-01');\nINSERT INTO \"Equipment\" (EquipID,Model,PurchaseDate) VALUES (1,'Tractor A','2020-01-01'),(2,'Combine','2021-03-01'),(3,'Plow','2019-05-01'),(4,'Truck','2022-02-01'),(5,'Irrigation System','2020-04-01');\nINSERT INTO \"Farms\" (FarmID,Name,Location) VALUES (1,'Farm A','California'),(2,'Farm B','Texas'),(3,'Farm C','Washington'),(4,'Farm D','Florida'),(5,'Farm E','North Dakota');\nINSERT INTO \"Farms_Animals\" (FarmID,AnimalID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\n",
      "question": "Tell me the quantity of animals each farm has.",
      "gold_queries": [
        "SELECT Animals.Quantity  from Farms_Animals join Animals on Farms_Animals.AnimalID = Animals.AnimalID join Farms on Farms_Animals.FarmID = Farms.FarmID   GROUP BY Farms_Animals.AnimalID HAVING COUNT(DISTINCT Farms_Animals.FarmID) = (SELECT COUNT(*) FROM  Farms)",
        "select farms.name , animals.quantity from Farms_Animals join Animals on Farms_Animals.AnimalID = Animals.AnimalID join Farms on Farms_Animals.FarmID = Farms.FarmID"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Display the farm-wise animal population.",
          "sql_queries": [
            "SELECT Farms.Name, Animals.Type, Animals.Quantity\nFROM Farms_Animals\nJOIN Farms ON Farms_Animals.FarmID = Farms.FarmID\nJOIN Animals ON Farms_Animals.AnimalID = Animals.AnimalID"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Calculate the animal count for each farm.",
          "sql_queries": [
            "SELECT Farms.Name, SUM(Animals.Quantity) AS AnimalCount\nFROM Farms\nJOIN Farms_Animals ON Farms.FarmID = Farms_Animals.FarmID\nJOIN Animals ON Farms_Animals.AnimalID = Animals.AnimalID\nGROUP BY Farms.FarmID"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "For every farm, show the associated animal count.",
          "sql_queries": [
            "SELECT Farms.Name, SUM(Animals.Quantity) AS TotalAnimals\nFROM Farms\nJOIN Farms_Animals ON Farms.FarmID = Farms_Animals.FarmID\nJOIN Animals ON Farms_Animals.AnimalID = Animals.AnimalID\nGROUP BY Farms.FarmID, Farms.Name"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Report the animal quantity owned by each farm.",
          "sql_queries": [
            "SELECT Farms.Name, Animals.Type, Animals.Quantity\nFROM Farms\nJOIN Farms_Animals ON Farms.FarmID = Farms_Animals.FarmID\nJOIN Animals ON Farms_Animals.AnimalID = Animals.AnimalID"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve the total animal quantity per farm.",
          "sql_queries": [
            "SELECT Farms.Name, SUM(Animals.Quantity) AS TotalQuantity\nFROM Farms\nJOIN Farms_Animals ON Farms.FarmID = Farms_Animals.FarmID\nJOIN Animals ON Farms_Animals.AnimalID = Animals.AnimalID\nGROUP BY Farms.Name"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List the number of animals for each farm.",
          "sql_queries": [
            "SELECT Farms.Name, SUM(Animals.Quantity) AS TotalAnimals\nFROM Farms\nJOIN Farms_Animals ON Farms.FarmID = Farms_Animals.FarmID\nJOIN Animals ON Farms_Animals.AnimalID = Animals.AnimalID\nGROUP BY Farms.Name"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Hospitality/scope_guesthouses_suites/scope_guesthouses_suites.sqlite",
      "db_dump": "CREATE TABLE GuestHouseSuites(\n    guesthouseID INTEGER,\n    suiteType TEXT,\n    FOREIGN KEY(guesthouseID) REFERENCES GuestHouses(houseID),\n    FOREIGN KEY(suiteType) REFERENCES Suites(suiteType));\nCREATE TABLE GuestHouses(\n    houseID INTEGER PRIMARY KEY AUTOINCREMENT,\n    houseName TEXT,\n    location TEXT,\n    capacity INTEGER,\n    pricePerNight REAL);\nCREATE TABLE Guests(\n    guestID INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber TEXT);\nCREATE TABLE RoomAmenities(\n    amenID INTEGER PRIMARY KEY AUTOINCREMENT,\n    amenName TEXT,\n    amenCost REAL);\nCREATE TABLE Suites(\n    suiteType TEXT PRIMARY KEY);\n\nINSERT INTO \"GuestHouseSuites\" (guesthouseID,suiteType) VALUES (1,'Standard Suite'),(1,'Family Suite'),(2,'Deluxe Suite'),(2,'Family Suite'),(3,'Standard Suite'),(3,'Family Suite'),(4,'Deluxe Suite'),(4,'Executive Suite'),(5,'Deluxe Suite'),(5,'Family Suite'),(3,'Deluxe Suite'),(4,'Family Suite'),(5,'Standard Suite');\nINSERT INTO \"GuestHouses\" (houseID,houseName,location,capacity,pricePerNight) VALUES (1,'Cozy Inn','New York City',10,150.0),(2,'Urban Retreat','Los Angeles',15,200.0),(3,'Mountain Lodge','Denver',8,180.0),(4,'Beachfront Paradise','Miami Beach',12,250.0),(5,'City Center Suite','Chicago',6,175.0);\nINSERT INTO \"Guests\" (guestID,firstName,lastName,email,phoneNumber) VALUES (1,'John','Doe','john@example.com','+1-555-123-4567'),(2,'Jane','Smith','jane@example.com','+1-555-987-6543'),(3,'Michael','Brown','michael@example.com','+1-555-321-9876'),(4,'Emily','White','emily@example.com','+1-555-135-7890'),(5,'David','Black','david@example.com','+1-555-456-1234');\nINSERT INTO \"RoomAmenities\" (amenID,amenName,amenCost) VALUES (1,'Free WiFi',0.0),(2,'Parking',10.99),(3,'Gym Access',2.5),(4,'Breakfast Included',8.75),(5,'Laundry Service',3.0);\nINSERT INTO \"Suites\" (suiteType) VALUES ('Standard Suite'),('Deluxe Suite'),('Executive Suite'),('Family Suite');\n",
      "question": "For all guest houses list all of the available suite types.",
      "gold_queries": [
        "select guesthouses.housename , suites.suitetype from GuestHouseSuites join Suites on GuestHouseSuites.suiteType = Suites.suiteType join GuestHouses on GuestHouseSuites.guesthouseID = GuestHouses.houseID"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Retrieve the `suiteType` column from all rows in the GuestHouseSuites table.",
          "sql_queries": [
            "SELECT suiteType FROM GuestHouseSuites"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Display a list of all suiteType values, regardless of guesthouse association.",
          "sql_queries": [
            "SELECT DISTINCT suiteType FROM Suites"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all distinct suite types present in the GuestHouseSuites table.",
          "sql_queries": [
            "SELECT DISTINCT suiteType FROM GuestHouseSuites"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Find unique suite types offered across all guest houses.",
          "sql_queries": [
            "SELECT DISTINCT suiteType FROM GuestHouseSuites"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "For each guesthouseID, list every corresponding suiteType.",
          "sql_queries": [
            "SELECT guesthouseID, suiteType FROM GuestHouseSuites"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Hospitality/scope_guesthouses_suites/scope_guesthouses_suites.sqlite",
      "db_dump": "CREATE TABLE GuestHouseSuites(\n    guesthouseID INTEGER,\n    suiteType TEXT,\n    FOREIGN KEY(guesthouseID) REFERENCES GuestHouses(houseID),\n    FOREIGN KEY(suiteType) REFERENCES Suites(suiteType));\nCREATE TABLE GuestHouses(\n    houseID INTEGER PRIMARY KEY AUTOINCREMENT,\n    houseName TEXT,\n    location TEXT,\n    capacity INTEGER,\n    pricePerNight REAL);\nCREATE TABLE Guests(\n    guestID INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber TEXT);\nCREATE TABLE RoomAmenities(\n    amenID INTEGER PRIMARY KEY AUTOINCREMENT,\n    amenName TEXT,\n    amenCost REAL);\nCREATE TABLE Suites(\n    suiteType TEXT PRIMARY KEY);\n\nINSERT INTO \"GuestHouseSuites\" (guesthouseID,suiteType) VALUES (1,'Standard Suite'),(1,'Family Suite'),(2,'Deluxe Suite'),(2,'Family Suite'),(3,'Standard Suite'),(3,'Family Suite'),(4,'Deluxe Suite'),(4,'Executive Suite'),(5,'Deluxe Suite'),(5,'Family Suite'),(3,'Deluxe Suite'),(4,'Family Suite'),(5,'Standard Suite');\nINSERT INTO \"GuestHouses\" (houseID,houseName,location,capacity,pricePerNight) VALUES (1,'Cozy Inn','New York City',10,150.0),(2,'Urban Retreat','Los Angeles',15,200.0),(3,'Mountain Lodge','Denver',8,180.0),(4,'Beachfront Paradise','Miami Beach',12,250.0),(5,'City Center Suite','Chicago',6,175.0);\nINSERT INTO \"Guests\" (guestID,firstName,lastName,email,phoneNumber) VALUES (1,'John','Doe','john@example.com','+1-555-123-4567'),(2,'Jane','Smith','jane@example.com','+1-555-987-6543'),(3,'Michael','Brown','michael@example.com','+1-555-321-9876'),(4,'Emily','White','emily@example.com','+1-555-135-7890'),(5,'David','Black','david@example.com','+1-555-456-1234');\nINSERT INTO \"RoomAmenities\" (amenID,amenName,amenCost) VALUES (1,'Free WiFi',0.0),(2,'Parking',10.99),(3,'Gym Access',2.5),(4,'Breakfast Included',8.75),(5,'Laundry Service',3.0);\nINSERT INTO \"Suites\" (suiteType) VALUES ('Standard Suite'),('Deluxe Suite'),('Executive Suite'),('Family Suite');\n",
      "question": "What suite types are there for all guest houses?",
      "gold_queries": [
        "SELECT Suites.suiteType  from GuestHouseSuites join Suites on GuestHouseSuites.suiteType = Suites.suiteType join GuestHouses on GuestHouseSuites.guesthouseID = GuestHouses.houseID   GROUP BY GuestHouseSuites.suiteType HAVING COUNT(DISTINCT GuestHouseSuites.guesthouseID) = (SELECT COUNT(*) FROM  GuestHouses)",
        "select guesthouses.housename , suites.suitetype from GuestHouseSuites join Suites on GuestHouseSuites.suiteType = Suites.suiteType join GuestHouses on GuestHouseSuites.guesthouseID = GuestHouses.houseID"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Which suite types are offered by every guest house?",
          "sql_queries": [
            "SELECT suiteType FROM GuestHouseSuites GROUP BY suiteType HAVING COUNT(DISTINCT guesthouseID) = (SELECT COUNT(*) FROM GuestHouses)"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "In what suite types are all guest houses equipped?",
          "sql_queries": [
            "SELECT DISTINCT suiteType FROM GuestHouseSuites"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all suite types present in every guesthouse.",
          "sql_queries": [
            "SELECT suiteType FROM GuestHouseSuites GROUP BY suiteType HAVING COUNT(DISTINCT guesthouseID) = (SELECT COUNT(*) FROM GuestHouses)"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "What suite types are available in all guest houses?",
          "sql_queries": [
            "SELECT suiteType\nFROM GuestHouseSuites\nGROUP BY suiteType\nHAVING COUNT(DISTINCT guesthouseID) = (SELECT COUNT(*) FROM GuestHouses)"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.6666666666666666,
        "f1_score": 0.5714285714285715,
        "num_queries": 4,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/scope/Hospitality/scope_guesthouses_suites/scope_guesthouses_suites.sqlite",
      "db_dump": "CREATE TABLE GuestHouseSuites(\n    guesthouseID INTEGER,\n    suiteType TEXT,\n    FOREIGN KEY(guesthouseID) REFERENCES GuestHouses(houseID),\n    FOREIGN KEY(suiteType) REFERENCES Suites(suiteType));\nCREATE TABLE GuestHouses(\n    houseID INTEGER PRIMARY KEY AUTOINCREMENT,\n    houseName TEXT,\n    location TEXT,\n    capacity INTEGER,\n    pricePerNight REAL);\nCREATE TABLE Guests(\n    guestID INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber TEXT);\nCREATE TABLE RoomAmenities(\n    amenID INTEGER PRIMARY KEY AUTOINCREMENT,\n    amenName TEXT,\n    amenCost REAL);\nCREATE TABLE Suites(\n    suiteType TEXT PRIMARY KEY);\n\nINSERT INTO \"GuestHouseSuites\" (guesthouseID,suiteType) VALUES (1,'Standard Suite'),(1,'Family Suite'),(2,'Deluxe Suite'),(2,'Family Suite'),(3,'Standard Suite'),(3,'Family Suite'),(4,'Deluxe Suite'),(4,'Executive Suite'),(5,'Deluxe Suite'),(5,'Family Suite'),(3,'Deluxe Suite'),(4,'Family Suite'),(5,'Standard Suite');\nINSERT INTO \"GuestHouses\" (houseID,houseName,location,capacity,pricePerNight) VALUES (1,'Cozy Inn','New York City',10,150.0),(2,'Urban Retreat','Los Angeles',15,200.0),(3,'Mountain Lodge','Denver',8,180.0),(4,'Beachfront Paradise','Miami Beach',12,250.0),(5,'City Center Suite','Chicago',6,175.0);\nINSERT INTO \"Guests\" (guestID,firstName,lastName,email,phoneNumber) VALUES (1,'John','Doe','john@example.com','+1-555-123-4567'),(2,'Jane','Smith','jane@example.com','+1-555-987-6543'),(3,'Michael','Brown','michael@example.com','+1-555-321-9876'),(4,'Emily','White','emily@example.com','+1-555-135-7890'),(5,'David','Black','david@example.com','+1-555-456-1234');\nINSERT INTO \"RoomAmenities\" (amenID,amenName,amenCost) VALUES (1,'Free WiFi',0.0),(2,'Parking',10.99),(3,'Gym Access',2.5),(4,'Breakfast Included',8.75),(5,'Laundry Service',3.0);\nINSERT INTO \"Suites\" (suiteType) VALUES ('Standard Suite'),('Deluxe Suite'),('Executive Suite'),('Family Suite');\n",
      "question": "What suite types are there in common across all guest houses?",
      "gold_queries": [
        "SELECT Suites.suiteType  from GuestHouseSuites join Suites on GuestHouseSuites.suiteType = Suites.suiteType join GuestHouses on GuestHouseSuites.guesthouseID = GuestHouses.houseID   GROUP BY GuestHouseSuites.suiteType HAVING COUNT(DISTINCT GuestHouseSuites.guesthouseID) = (SELECT COUNT(*) FROM  GuestHouses)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Identify the suite types present in multiple guest houses.",
          "sql_queries": [
            "SELECT suiteType \nFROM GuestHouseSuites \nGROUP BY suiteType \nHAVING COUNT(guesthouseID) > 1"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Determine the suite types shared by all guest houses.",
          "sql_queries": [
            "SELECT suiteType\nFROM GuestHouseSuites\nGROUP BY suiteType\nHAVING COUNT(DISTINCT guesthouseID) = (SELECT COUNT(*) FROM GuestHouses)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "List common suite types among guest houses.",
          "sql_queries": [
            "SELECT suiteType FROM GuestHouseSuites GROUP BY suiteType HAVING COUNT(*) > 1"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Which suite types appear in every guesthouse?",
          "sql_queries": [
            "SELECT suiteType FROM GuestHouseSuites GROUP BY suiteType HAVING COUNT(DISTINCT guesthouseID) = (SELECT COUNT(*) FROM GuestHouses)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Find the intersection of suite types across all guest houses.",
          "sql_queries": [
            "SELECT suiteType FROM GuestHouseSuites GROUP BY suiteType HAVING COUNT(DISTINCT guesthouseID) = (SELECT COUNT(*) FROM GuestHouses)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 5,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/scope/Filmmaking/scope_editors_software_programs/scope_editors_software_programs.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT\n);\nCREATE TABLE DirectorFilmProjects (\n    director_film_project_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    director_id INTEGER REFERENCES Directors(director_id),\n    film_project_id INTEGER REFERENCES FilmProjects(project_id)\n);\nCREATE TABLE Directors (\n    director_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT\n);\nCREATE TABLE EditorDirectorRelationship (\n    relationship_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    director_id INTEGER REFERENCES Directors(director_id),\n    editor_id INTEGER REFERENCES Editors(editor_id)\n);\nCREATE TABLE EditorSoftwarePrograms (\n    editor_software_program_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    editor_id INTEGER REFERENCES Editors(editor_id),\n    software_program_id INTEGER REFERENCES Software_Programs(program_id)\n);\nCREATE TABLE Editors (\n    editor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    full_name TEXT);\nCREATE TABLE FilmProjects (\n    project_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE\n);\nCREATE TABLE ProjectActors (\n    project_actor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    film_project_id INTEGER REFERENCES FilmProjects(project_id),\n    actor_id INTEGER REFERENCES Actors(actor_id)\n);\nCREATE TABLE Software_Programs (\n    program_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    version TEXT\n);\n\nINSERT INTO \"Actors\" (actor_id,first_name,last_name) VALUES (1,'Andy','Dufraine'),(2,'Tom','Hanks'),(3,'Leonardo','DiCaprio'),(4,'Elijah','Wood'),(5,'Kevin','Costner');\nINSERT INTO \"DirectorFilmProjects\" (director_film_project_id,director_id,film_project_id) VALUES (1,1,1),(2,2,NULL),(3,3,3),(4,4,NULL),(5,5,NULL);\nINSERT INTO \"Directors\" (director_id,first_name,last_name) VALUES (1,'Frank','Capra'),(2,'Martin','Scorsese'),(3,'Quentin','Tarantino'),(4,'Steven','Spielberg'),(5,'Ronald','Reagan');\nINSERT INTO \"EditorDirectorRelationship\" (relationship_id,director_id,editor_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"EditorSoftwarePrograms\" (editor_software_program_id,editor_id,software_program_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5),(6,2,1),(7,3,1),(8,4,1),(9,5,1);\nINSERT INTO \"Editors\" (editor_id,full_name) VALUES (1,'John Doe'),(2,'Jane Smith'),(3,'Michael Brown'),(4,'Emma White'),(5,'David Black');\nINSERT INTO \"FilmProjects\" (project_id,title,release_date) VALUES (1,'The Shawshank Redemption','1994-09-22'),(2,'The Godfather','1972-03-24'),(3,'Pulp Fiction','1994-10-14'),(4,'Schindler''s List','1993-12-15'),(5,'Forrest Gump','1994-07-06');\nINSERT INTO \"ProjectActors\" (project_actor_id,film_project_id,actor_id) VALUES (1,1,1),(2,1,2),(3,2,NULL),(4,3,NULL),(5,4,NULL);\nINSERT INTO \"Software_Programs\" (program_id,name,version) VALUES (1,'Adobe Premiere','2021'),(2,'Final Cut Pro','2020'),(3,'DaVinci Resolve','16'),(4,'Avid Media Composer','2020'),(5,'HitFilm Express','13');\n",
      "question": "For each editor, what is the name and version of the corresponding program?",
      "gold_queries": [
        "select editors.full_name , software_programs.name , software_programs.version from EditorSoftwarePrograms join Software_Programs on EditorSoftwarePrograms.software_program_id = Software_Programs.program_id join Editors on EditorSoftwarePrograms.editor_id = Editors.editor_id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Provide a list of editor names paired with the software program they use and its version.",
          "sql_queries": [
            "SELECT E.full_name, SP.name, SP.version\nFROM Editors E\nJOIN EditorSoftwarePrograms ESP ON E.editor_id = ESP.editor_id\nJOIN Software_Programs SP ON ESP.software_program_id = SP.program_id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "List the full name of each editor and the name and version of the software program they use.",
          "sql_queries": [
            "SELECT E.full_name, SP.name, SP.version\nFROM Editors E\nJOIN EditorSoftwarePrograms ESP ON E.editor_id = ESP.editor_id\nJOIN Software_Programs SP ON ESP.software_program_id = SP.program_id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Given each editor, retrieve the corresponding software program's name and version.",
          "sql_queries": [
            "SELECT E.full_name, SP.name, SP.version \nFROM Editors E \nJOIN EditorSoftwarePrograms ESP ON E.editor_id = ESP.editor_id \nJOIN Software_Programs SP ON ESP.software_program_id = SP.program_id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "What software program and version is utilized by each editor?",
          "sql_queries": [
            "SELECT E.full_name, SP.name, SP.version\nFROM Editors E\nJOIN EditorSoftwarePrograms ESP ON E.editor_id = ESP.editor_id\nJOIN Software_Programs SP ON ESP.software_program_id = SP.program_id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "For each distinct editor, what software program and its version are associated with them?",
          "sql_queries": [
            "SELECT E.full_name, SP.name, SP.version\nFROM Editors E\nJOIN EditorSoftwarePrograms ESP ON E.editor_id = ESP.editor_id\nJOIN Software_Programs SP ON ESP.software_program_id = SP.program_id\nGROUP BY E.editor_id, SP.program_id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 5,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 5
    },
    {
      "db_file": "data/scope/Filmmaking/scope_editors_software_programs/scope_editors_software_programs.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT\n);\nCREATE TABLE DirectorFilmProjects (\n    director_film_project_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    director_id INTEGER REFERENCES Directors(director_id),\n    film_project_id INTEGER REFERENCES FilmProjects(project_id)\n);\nCREATE TABLE Directors (\n    director_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT\n);\nCREATE TABLE EditorDirectorRelationship (\n    relationship_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    director_id INTEGER REFERENCES Directors(director_id),\n    editor_id INTEGER REFERENCES Editors(editor_id)\n);\nCREATE TABLE EditorSoftwarePrograms (\n    editor_software_program_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    editor_id INTEGER REFERENCES Editors(editor_id),\n    software_program_id INTEGER REFERENCES Software_Programs(program_id)\n);\nCREATE TABLE Editors (\n    editor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    full_name TEXT);\nCREATE TABLE FilmProjects (\n    project_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE\n);\nCREATE TABLE ProjectActors (\n    project_actor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    film_project_id INTEGER REFERENCES FilmProjects(project_id),\n    actor_id INTEGER REFERENCES Actors(actor_id)\n);\nCREATE TABLE Software_Programs (\n    program_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    version TEXT\n);\n\nINSERT INTO \"Actors\" (actor_id,first_name,last_name) VALUES (1,'Andy','Dufraine'),(2,'Tom','Hanks'),(3,'Leonardo','DiCaprio'),(4,'Elijah','Wood'),(5,'Kevin','Costner');\nINSERT INTO \"DirectorFilmProjects\" (director_film_project_id,director_id,film_project_id) VALUES (1,1,1),(2,2,NULL),(3,3,3),(4,4,NULL),(5,5,NULL);\nINSERT INTO \"Directors\" (director_id,first_name,last_name) VALUES (1,'Frank','Capra'),(2,'Martin','Scorsese'),(3,'Quentin','Tarantino'),(4,'Steven','Spielberg'),(5,'Ronald','Reagan');\nINSERT INTO \"EditorDirectorRelationship\" (relationship_id,director_id,editor_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"EditorSoftwarePrograms\" (editor_software_program_id,editor_id,software_program_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5),(6,2,1),(7,3,1),(8,4,1),(9,5,1);\nINSERT INTO \"Editors\" (editor_id,full_name) VALUES (1,'John Doe'),(2,'Jane Smith'),(3,'Michael Brown'),(4,'Emma White'),(5,'David Black');\nINSERT INTO \"FilmProjects\" (project_id,title,release_date) VALUES (1,'The Shawshank Redemption','1994-09-22'),(2,'The Godfather','1972-03-24'),(3,'Pulp Fiction','1994-10-14'),(4,'Schindler''s List','1993-12-15'),(5,'Forrest Gump','1994-07-06');\nINSERT INTO \"ProjectActors\" (project_actor_id,film_project_id,actor_id) VALUES (1,1,1),(2,1,2),(3,2,NULL),(4,3,NULL),(5,4,NULL);\nINSERT INTO \"Software_Programs\" (program_id,name,version) VALUES (1,'Adobe Premiere','2021'),(2,'Final Cut Pro','2020'),(3,'DaVinci Resolve','16'),(4,'Avid Media Composer','2020'),(5,'HitFilm Express','13');\n",
      "question": "Show me the name of software programs that we have for every editor",
      "gold_queries": [
        "SELECT Software_Programs.name  from EditorSoftwarePrograms join Software_Programs on EditorSoftwarePrograms.software_program_id = Software_Programs.program_id join Editors on EditorSoftwarePrograms.editor_id = Editors.editor_id   GROUP BY EditorSoftwarePrograms.software_program_id HAVING COUNT(DISTINCT EditorSoftwarePrograms.editor_id) = (SELECT COUNT(*) FROM  Editors)",
        "select editors.full_name , software_programs.name from EditorSoftwarePrograms join Software_Programs on EditorSoftwarePrograms.software_program_id = Software_Programs.program_id join Editors on EditorSoftwarePrograms.editor_id = Editors.editor_id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Query for the name of each software program used by every editor.",
          "sql_queries": [
            "SELECT T3.name FROM Editors AS T1 JOIN EditorSoftwarePrograms AS T2 ON T1.editor_id = T2.editor_id JOIN Software_Programs AS T3 ON T2.software_program_id = T3.program_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List DISTINCT `name` FROM `Software_Programs` JOIN `EditorSoftwarePrograms` ON `Software_Programs`.`program_id` = `EditorSoftwarePrograms`.`software_program_id`;",
          "sql_queries": [
            "SELECT DISTINCT T1.name FROM Software_Programs AS T1 JOIN EditorSoftwarePrograms AS T2 ON T1.program_id = T2.software_program_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "SELECT name FROM Software_Programs WHERE editor_id IN (SELECT DISTINCT editor_id FROM EditorSoftwarePrograms);",
          "sql_queries": [
            "SELECT name FROM Software_Programs WHERE program_id IN (SELECT DISTINCT software_program_id FROM EditorSoftwarePrograms)"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Filmmaking/scope_editors_software_programs/scope_editors_software_programs.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT\n);\nCREATE TABLE DirectorFilmProjects (\n    director_film_project_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    director_id INTEGER REFERENCES Directors(director_id),\n    film_project_id INTEGER REFERENCES FilmProjects(project_id)\n);\nCREATE TABLE Directors (\n    director_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT\n);\nCREATE TABLE EditorDirectorRelationship (\n    relationship_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    director_id INTEGER REFERENCES Directors(director_id),\n    editor_id INTEGER REFERENCES Editors(editor_id)\n);\nCREATE TABLE EditorSoftwarePrograms (\n    editor_software_program_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    editor_id INTEGER REFERENCES Editors(editor_id),\n    software_program_id INTEGER REFERENCES Software_Programs(program_id)\n);\nCREATE TABLE Editors (\n    editor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    full_name TEXT);\nCREATE TABLE FilmProjects (\n    project_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE\n);\nCREATE TABLE ProjectActors (\n    project_actor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    film_project_id INTEGER REFERENCES FilmProjects(project_id),\n    actor_id INTEGER REFERENCES Actors(actor_id)\n);\nCREATE TABLE Software_Programs (\n    program_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    version TEXT\n);\n\nINSERT INTO \"Actors\" (actor_id,first_name,last_name) VALUES (1,'Andy','Dufraine'),(2,'Tom','Hanks'),(3,'Leonardo','DiCaprio'),(4,'Elijah','Wood'),(5,'Kevin','Costner');\nINSERT INTO \"DirectorFilmProjects\" (director_film_project_id,director_id,film_project_id) VALUES (1,1,1),(2,2,NULL),(3,3,3),(4,4,NULL),(5,5,NULL);\nINSERT INTO \"Directors\" (director_id,first_name,last_name) VALUES (1,'Frank','Capra'),(2,'Martin','Scorsese'),(3,'Quentin','Tarantino'),(4,'Steven','Spielberg'),(5,'Ronald','Reagan');\nINSERT INTO \"EditorDirectorRelationship\" (relationship_id,director_id,editor_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"EditorSoftwarePrograms\" (editor_software_program_id,editor_id,software_program_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5),(6,2,1),(7,3,1),(8,4,1),(9,5,1);\nINSERT INTO \"Editors\" (editor_id,full_name) VALUES (1,'John Doe'),(2,'Jane Smith'),(3,'Michael Brown'),(4,'Emma White'),(5,'David Black');\nINSERT INTO \"FilmProjects\" (project_id,title,release_date) VALUES (1,'The Shawshank Redemption','1994-09-22'),(2,'The Godfather','1972-03-24'),(3,'Pulp Fiction','1994-10-14'),(4,'Schindler''s List','1993-12-15'),(5,'Forrest Gump','1994-07-06');\nINSERT INTO \"ProjectActors\" (project_actor_id,film_project_id,actor_id) VALUES (1,1,1),(2,1,2),(3,2,NULL),(4,3,NULL),(5,4,NULL);\nINSERT INTO \"Software_Programs\" (program_id,name,version) VALUES (1,'Adobe Premiere','2021'),(2,'Final Cut Pro','2020'),(3,'DaVinci Resolve','16'),(4,'Avid Media Composer','2020'),(5,'HitFilm Express','13');\n",
      "question": "For each editor, show me the names of software programs that they use",
      "gold_queries": [
        "select editors.full_name , software_programs.name from EditorSoftwarePrograms join Software_Programs on EditorSoftwarePrograms.software_program_id = Software_Programs.program_id join Editors on EditorSoftwarePrograms.editor_id = Editors.editor_id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Display the names of software programs used by editors.",
          "sql_queries": [
            "SELECT DISTINCT T2.name FROM EditorSoftwarePrograms AS T1 JOIN Software_Programs AS T2 ON T1.software_program_id = T2.program_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve a list of software programs used by each editor.",
          "sql_queries": [
            "SELECT e.full_name, s.name\nFROM Editors e\nJOIN EditorSoftwarePrograms esp ON e.editor_id = esp.editor_id\nJOIN Software_Programs s ON esp.software_program_id = s.program_id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "For each editor in the database, list the software programs they use.",
          "sql_queries": [
            "SELECT E.full_name, S.name\nFROM Editors E\nJOIN EditorSoftwarePrograms ESP ON E.editor_id = ESP.editor_id\nJOIN Software_Programs S ON ESP.software_program_id = S.program_id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "List software programs associated with each editor.",
          "sql_queries": [
            "SELECT E.full_name, SP.name\nFROM Editors E\nJOIN EditorSoftwarePrograms ESP ON E.editor_id = ESP.editor_id\nJOIN Software_Programs SP ON ESP.software_program_id = SP.program_id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Show the editor-software program mapping.",
          "sql_queries": [
            "SELECT s.name, sp.version\nFROM EditorSoftwarePrograms esp\nJOIN Software_Programs sp ON esp.software_program_id = sp.program_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT s.name, sp.version\nFROM EditorSoftwarePrograms esp\nJOIN Software_Programs sp ON esp.software_program_id = sp.program_id",
                "original_exception": "no such column: s.name"
              }
            ],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.6,
        "f1_score": 0.7499999999999999,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [
          {
            "query": "SELECT s.name, sp.version\nFROM EditorSoftwarePrograms esp\nJOIN Software_Programs sp ON esp.software_program_id = sp.program_id",
            "original_exception": "no such column: s.name"
          }
        ],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/scope/Filmmaking/scope_editors_software_programs/scope_editors_software_programs.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT\n);\nCREATE TABLE DirectorFilmProjects (\n    director_film_project_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    director_id INTEGER REFERENCES Directors(director_id),\n    film_project_id INTEGER REFERENCES FilmProjects(project_id)\n);\nCREATE TABLE Directors (\n    director_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT\n);\nCREATE TABLE EditorDirectorRelationship (\n    relationship_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    director_id INTEGER REFERENCES Directors(director_id),\n    editor_id INTEGER REFERENCES Editors(editor_id)\n);\nCREATE TABLE EditorSoftwarePrograms (\n    editor_software_program_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    editor_id INTEGER REFERENCES Editors(editor_id),\n    software_program_id INTEGER REFERENCES Software_Programs(program_id)\n);\nCREATE TABLE Editors (\n    editor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    full_name TEXT);\nCREATE TABLE FilmProjects (\n    project_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE\n);\nCREATE TABLE ProjectActors (\n    project_actor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    film_project_id INTEGER REFERENCES FilmProjects(project_id),\n    actor_id INTEGER REFERENCES Actors(actor_id)\n);\nCREATE TABLE Software_Programs (\n    program_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    version TEXT\n);\n\nINSERT INTO \"Actors\" (actor_id,first_name,last_name) VALUES (1,'Andy','Dufraine'),(2,'Tom','Hanks'),(3,'Leonardo','DiCaprio'),(4,'Elijah','Wood'),(5,'Kevin','Costner');\nINSERT INTO \"DirectorFilmProjects\" (director_film_project_id,director_id,film_project_id) VALUES (1,1,1),(2,2,NULL),(3,3,3),(4,4,NULL),(5,5,NULL);\nINSERT INTO \"Directors\" (director_id,first_name,last_name) VALUES (1,'Frank','Capra'),(2,'Martin','Scorsese'),(3,'Quentin','Tarantino'),(4,'Steven','Spielberg'),(5,'Ronald','Reagan');\nINSERT INTO \"EditorDirectorRelationship\" (relationship_id,director_id,editor_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"EditorSoftwarePrograms\" (editor_software_program_id,editor_id,software_program_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5),(6,2,1),(7,3,1),(8,4,1),(9,5,1);\nINSERT INTO \"Editors\" (editor_id,full_name) VALUES (1,'John Doe'),(2,'Jane Smith'),(3,'Michael Brown'),(4,'Emma White'),(5,'David Black');\nINSERT INTO \"FilmProjects\" (project_id,title,release_date) VALUES (1,'The Shawshank Redemption','1994-09-22'),(2,'The Godfather','1972-03-24'),(3,'Pulp Fiction','1994-10-14'),(4,'Schindler''s List','1993-12-15'),(5,'Forrest Gump','1994-07-06');\nINSERT INTO \"ProjectActors\" (project_actor_id,film_project_id,actor_id) VALUES (1,1,1),(2,1,2),(3,2,NULL),(4,3,NULL),(5,4,NULL);\nINSERT INTO \"Software_Programs\" (program_id,name,version) VALUES (1,'Adobe Premiere','2021'),(2,'Final Cut Pro','2020'),(3,'DaVinci Resolve','16'),(4,'Avid Media Composer','2020'),(5,'HitFilm Express','13');\n",
      "question": "What is the version of the program that is most popular among all editors?",
      "gold_queries": [
        "SELECT Software_Programs.version  from EditorSoftwarePrograms join Software_Programs on EditorSoftwarePrograms.software_program_id = Software_Programs.program_id join Editors on EditorSoftwarePrograms.editor_id = Editors.editor_id   GROUP BY EditorSoftwarePrograms.software_program_id HAVING COUNT(DISTINCT EditorSoftwarePrograms.editor_id) = (SELECT COUNT(*) FROM  Editors)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What software_program_id is most frequently present in the EditorSoftwarePrograms table?",
          "sql_queries": [
            "SELECT software_program_id FROM EditorSoftwarePrograms GROUP BY software_program_id ORDER BY COUNT(*) DESC LIMIT 1"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Which program version has the highest count of EditorSoftwarePrograms entries?",
          "sql_queries": [
            "SELECT version\nFROM Software_Programs\nWHERE program_id = (\n    SELECT software_program_id\n    FROM EditorSoftwarePrograms\n    GROUP BY software_program_id\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "What is the software_program_id of the program used by the most editors?",
          "sql_queries": [
            "SELECT software_program_id FROM EditorSoftwarePrograms GROUP BY software_program_id ORDER BY COUNT(editor_id) DESC LIMIT 1"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "What is the program_id of the most used software program by editors?",
          "sql_queries": [
            "SELECT software_program_id \nFROM EditorSoftwarePrograms \nGROUP BY software_program_id \nORDER BY COUNT(editor_id) DESC \nLIMIT 1"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Filmmaking/scope_editors_software_programs/scope_editors_software_programs.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT\n);\nCREATE TABLE DirectorFilmProjects (\n    director_film_project_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    director_id INTEGER REFERENCES Directors(director_id),\n    film_project_id INTEGER REFERENCES FilmProjects(project_id)\n);\nCREATE TABLE Directors (\n    director_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT\n);\nCREATE TABLE EditorDirectorRelationship (\n    relationship_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    director_id INTEGER REFERENCES Directors(director_id),\n    editor_id INTEGER REFERENCES Editors(editor_id)\n);\nCREATE TABLE EditorSoftwarePrograms (\n    editor_software_program_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    editor_id INTEGER REFERENCES Editors(editor_id),\n    software_program_id INTEGER REFERENCES Software_Programs(program_id)\n);\nCREATE TABLE Editors (\n    editor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    full_name TEXT);\nCREATE TABLE FilmProjects (\n    project_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE\n);\nCREATE TABLE ProjectActors (\n    project_actor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    film_project_id INTEGER REFERENCES FilmProjects(project_id),\n    actor_id INTEGER REFERENCES Actors(actor_id)\n);\nCREATE TABLE Software_Programs (\n    program_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    version TEXT\n);\n\nINSERT INTO \"Actors\" (actor_id,first_name,last_name) VALUES (1,'Andy','Dufraine'),(2,'Tom','Hanks'),(3,'Leonardo','DiCaprio'),(4,'Elijah','Wood'),(5,'Kevin','Costner');\nINSERT INTO \"DirectorFilmProjects\" (director_film_project_id,director_id,film_project_id) VALUES (1,1,1),(2,2,NULL),(3,3,3),(4,4,NULL),(5,5,NULL);\nINSERT INTO \"Directors\" (director_id,first_name,last_name) VALUES (1,'Frank','Capra'),(2,'Martin','Scorsese'),(3,'Quentin','Tarantino'),(4,'Steven','Spielberg'),(5,'Ronald','Reagan');\nINSERT INTO \"EditorDirectorRelationship\" (relationship_id,director_id,editor_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"EditorSoftwarePrograms\" (editor_software_program_id,editor_id,software_program_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5),(6,2,1),(7,3,1),(8,4,1),(9,5,1);\nINSERT INTO \"Editors\" (editor_id,full_name) VALUES (1,'John Doe'),(2,'Jane Smith'),(3,'Michael Brown'),(4,'Emma White'),(5,'David Black');\nINSERT INTO \"FilmProjects\" (project_id,title,release_date) VALUES (1,'The Shawshank Redemption','1994-09-22'),(2,'The Godfather','1972-03-24'),(3,'Pulp Fiction','1994-10-14'),(4,'Schindler''s List','1993-12-15'),(5,'Forrest Gump','1994-07-06');\nINSERT INTO \"ProjectActors\" (project_actor_id,film_project_id,actor_id) VALUES (1,1,1),(2,1,2),(3,2,NULL),(4,3,NULL),(5,4,NULL);\nINSERT INTO \"Software_Programs\" (program_id,name,version) VALUES (1,'Adobe Premiere','2021'),(2,'Final Cut Pro','2020'),(3,'DaVinci Resolve','16'),(4,'Avid Media Composer','2020'),(5,'HitFilm Express','13');\n",
      "question": "Give me the name and version of programs for each editor.",
      "gold_queries": [
        "SELECT Software_Programs.name, Software_Programs.version  from EditorSoftwarePrograms join Software_Programs on EditorSoftwarePrograms.software_program_id = Software_Programs.program_id join Editors on EditorSoftwarePrograms.editor_id = Editors.editor_id   GROUP BY EditorSoftwarePrograms.software_program_id HAVING COUNT(DISTINCT EditorSoftwarePrograms.editor_id) = (SELECT COUNT(*) FROM  Editors)",
        "select editors.full_name , software_programs.name , software_programs.version from EditorSoftwarePrograms join Software_Programs on EditorSoftwarePrograms.software_program_id = Software_Programs.program_id join Editors on EditorSoftwarePrograms.editor_id = Editors.editor_id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Provide a list of each editor's full name paired with the name and version of each software program they have used.",
          "sql_queries": [
            "SELECT E.full_name, SP.name, SP.version\nFROM Editors E\nJOIN EditorSoftwarePrograms ESP ON E.editor_id = ESP.editor_id\nJOIN Software_Programs SP ON ESP.software_program_id = SP.program_id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List for each editor, the software programs they use, along with each program's name and version.",
          "sql_queries": [
            "SELECT E.full_name, SP.name, SP.version\nFROM Editors E\nJOIN EditorSoftwarePrograms ESP ON E.editor_id = ESP.editor_id\nJOIN Software_Programs SP ON ESP.software_program_id = SP.program_id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Return a table showing the editor's full name and the corresponding name and version of every software program associated with them.",
          "sql_queries": [
            "SELECT Editors.full_name, Software_Programs.name, Software_Programs.version\nFROM Editors\nJOIN EditorSoftwarePrograms ON Editors.editor_id = EditorSoftwarePrograms.editor_id\nJOIN Software_Programs ON EditorSoftwarePrograms.software_program_id = Software_Programs.program_id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List the name and version of all software programs used by each editor, formatted as name (version).",
          "sql_queries": [
            "SELECT E.full_name, SP.name || ' (' || SP.version || ')' AS software_program\nFROM Editors E\nJOIN EditorSoftwarePrograms ESP ON E.editor_id = ESP.editor_id\nJOIN Software_Programs SP ON ESP.software_program_id = SP.program_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve the full name of each editor and the name and version of every software program they utilize.",
          "sql_queries": [
            "SELECT E.full_name, SP.name, SP.version\nFROM Editors E\nJOIN EditorSoftwarePrograms ESP ON E.editor_id = ESP.editor_id\nJOIN Software_Programs SP ON ESP.software_program_id = SP.program_id"
          ],
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.6666666666666666,
        "f1_score": 0.5714285714285715,
        "num_queries": 5,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 4
    },
    {
      "db_file": "data/scope/Filmmaking/scope_editors_software_programs/scope_editors_software_programs.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT\n);\nCREATE TABLE DirectorFilmProjects (\n    director_film_project_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    director_id INTEGER REFERENCES Directors(director_id),\n    film_project_id INTEGER REFERENCES FilmProjects(project_id)\n);\nCREATE TABLE Directors (\n    director_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT\n);\nCREATE TABLE EditorDirectorRelationship (\n    relationship_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    director_id INTEGER REFERENCES Directors(director_id),\n    editor_id INTEGER REFERENCES Editors(editor_id)\n);\nCREATE TABLE EditorSoftwarePrograms (\n    editor_software_program_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    editor_id INTEGER REFERENCES Editors(editor_id),\n    software_program_id INTEGER REFERENCES Software_Programs(program_id)\n);\nCREATE TABLE Editors (\n    editor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    full_name TEXT);\nCREATE TABLE FilmProjects (\n    project_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE\n);\nCREATE TABLE ProjectActors (\n    project_actor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    film_project_id INTEGER REFERENCES FilmProjects(project_id),\n    actor_id INTEGER REFERENCES Actors(actor_id)\n);\nCREATE TABLE Software_Programs (\n    program_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    version TEXT\n);\n\nINSERT INTO \"Actors\" (actor_id,first_name,last_name) VALUES (1,'Andy','Dufraine'),(2,'Tom','Hanks'),(3,'Leonardo','DiCaprio'),(4,'Elijah','Wood'),(5,'Kevin','Costner');\nINSERT INTO \"DirectorFilmProjects\" (director_film_project_id,director_id,film_project_id) VALUES (1,1,1),(2,2,NULL),(3,3,3),(4,4,NULL),(5,5,NULL);\nINSERT INTO \"Directors\" (director_id,first_name,last_name) VALUES (1,'Frank','Capra'),(2,'Martin','Scorsese'),(3,'Quentin','Tarantino'),(4,'Steven','Spielberg'),(5,'Ronald','Reagan');\nINSERT INTO \"EditorDirectorRelationship\" (relationship_id,director_id,editor_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"EditorSoftwarePrograms\" (editor_software_program_id,editor_id,software_program_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5),(6,2,1),(7,3,1),(8,4,1),(9,5,1);\nINSERT INTO \"Editors\" (editor_id,full_name) VALUES (1,'John Doe'),(2,'Jane Smith'),(3,'Michael Brown'),(4,'Emma White'),(5,'David Black');\nINSERT INTO \"FilmProjects\" (project_id,title,release_date) VALUES (1,'The Shawshank Redemption','1994-09-22'),(2,'The Godfather','1972-03-24'),(3,'Pulp Fiction','1994-10-14'),(4,'Schindler''s List','1993-12-15'),(5,'Forrest Gump','1994-07-06');\nINSERT INTO \"ProjectActors\" (project_actor_id,film_project_id,actor_id) VALUES (1,1,1),(2,1,2),(3,2,NULL),(4,3,NULL),(5,4,NULL);\nINSERT INTO \"Software_Programs\" (program_id,name,version) VALUES (1,'Adobe Premiere','2021'),(2,'Final Cut Pro','2020'),(3,'DaVinci Resolve','16'),(4,'Avid Media Composer','2020'),(5,'HitFilm Express','13');\n",
      "question": "Show me the name and version of programs in common for all editors.",
      "gold_queries": [
        "SELECT Software_Programs.name, Software_Programs.version  from EditorSoftwarePrograms join Software_Programs on EditorSoftwarePrograms.software_program_id = Software_Programs.program_id join Editors on EditorSoftwarePrograms.editor_id = Editors.editor_id   GROUP BY EditorSoftwarePrograms.software_program_id HAVING COUNT(DISTINCT EditorSoftwarePrograms.editor_id) = (SELECT COUNT(*) FROM  Editors)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Retrieve the names and versions of software programs used by every editor.",
          "sql_queries": [
            "SELECT T3.name, T3.version \nFROM Editors AS T1 \nJOIN EditorSoftwarePrograms AS T2 ON T1.editor_id = T2.editor_id \nJOIN Software_Programs AS T3 ON T2.software_program_id = T3.program_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Identify common software programs used across all editor entries.",
          "sql_queries": [
            "SELECT name\nFROM Software_Programs\nWHERE program_id IN (\n    SELECT software_program_id\n    FROM EditorSoftwarePrograms\n    GROUP BY software_program_id\n    HAVING COUNT(DISTINCT editor_id) = (SELECT COUNT(*) FROM Editors)\n)"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List software program names and versions shared by all editors.",
          "sql_queries": [
            "SELECT sp.name, sp.version\nFROM Software_Programs sp\nWHERE sp.program_id IN (\n    SELECT esp.software_program_id\n    FROM EditorSoftwarePrograms esp\n    GROUP BY esp.software_program_id\n    HAVING COUNT(DISTINCT esp.editor_id) = (SELECT COUNT(editor_id) FROM Editors)\n)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Find the intersection of software programs used by all editors.",
          "sql_queries": [
            "SELECT name FROM Software_Programs WHERE program_id IN (SELECT software_program_id FROM EditorSoftwarePrograms GROUP BY software_program_id HAVING COUNT(DISTINCT editor_id) = (SELECT COUNT(*) FROM Editors))"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Filmmaking/scope_editors_software_programs/scope_editors_software_programs.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT\n);\nCREATE TABLE DirectorFilmProjects (\n    director_film_project_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    director_id INTEGER REFERENCES Directors(director_id),\n    film_project_id INTEGER REFERENCES FilmProjects(project_id)\n);\nCREATE TABLE Directors (\n    director_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT\n);\nCREATE TABLE EditorDirectorRelationship (\n    relationship_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    director_id INTEGER REFERENCES Directors(director_id),\n    editor_id INTEGER REFERENCES Editors(editor_id)\n);\nCREATE TABLE EditorSoftwarePrograms (\n    editor_software_program_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    editor_id INTEGER REFERENCES Editors(editor_id),\n    software_program_id INTEGER REFERENCES Software_Programs(program_id)\n);\nCREATE TABLE Editors (\n    editor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    full_name TEXT);\nCREATE TABLE FilmProjects (\n    project_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE\n);\nCREATE TABLE ProjectActors (\n    project_actor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    film_project_id INTEGER REFERENCES FilmProjects(project_id),\n    actor_id INTEGER REFERENCES Actors(actor_id)\n);\nCREATE TABLE Software_Programs (\n    program_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    version TEXT\n);\n\nINSERT INTO \"Actors\" (actor_id,first_name,last_name) VALUES (1,'Andy','Dufraine'),(2,'Tom','Hanks'),(3,'Leonardo','DiCaprio'),(4,'Elijah','Wood'),(5,'Kevin','Costner');\nINSERT INTO \"DirectorFilmProjects\" (director_film_project_id,director_id,film_project_id) VALUES (1,1,1),(2,2,NULL),(3,3,3),(4,4,NULL),(5,5,NULL);\nINSERT INTO \"Directors\" (director_id,first_name,last_name) VALUES (1,'Frank','Capra'),(2,'Martin','Scorsese'),(3,'Quentin','Tarantino'),(4,'Steven','Spielberg'),(5,'Ronald','Reagan');\nINSERT INTO \"EditorDirectorRelationship\" (relationship_id,director_id,editor_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"EditorSoftwarePrograms\" (editor_software_program_id,editor_id,software_program_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5),(6,2,1),(7,3,1),(8,4,1),(9,5,1);\nINSERT INTO \"Editors\" (editor_id,full_name) VALUES (1,'John Doe'),(2,'Jane Smith'),(3,'Michael Brown'),(4,'Emma White'),(5,'David Black');\nINSERT INTO \"FilmProjects\" (project_id,title,release_date) VALUES (1,'The Shawshank Redemption','1994-09-22'),(2,'The Godfather','1972-03-24'),(3,'Pulp Fiction','1994-10-14'),(4,'Schindler''s List','1993-12-15'),(5,'Forrest Gump','1994-07-06');\nINSERT INTO \"ProjectActors\" (project_actor_id,film_project_id,actor_id) VALUES (1,1,1),(2,1,2),(3,2,NULL),(4,3,NULL),(5,4,NULL);\nINSERT INTO \"Software_Programs\" (program_id,name,version) VALUES (1,'Adobe Premiere','2021'),(2,'Final Cut Pro','2020'),(3,'DaVinci Resolve','16'),(4,'Avid Media Composer','2020'),(5,'HitFilm Express','13');\n",
      "question": "For every editor, list the version of programs that are used.",
      "gold_queries": [
        "select editors.full_name , software_programs.version from EditorSoftwarePrograms join Software_Programs on EditorSoftwarePrograms.software_program_id = Software_Programs.program_id join Editors on EditorSoftwarePrograms.editor_id = Editors.editor_id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Show the version number of each software program associated with every editor.",
          "sql_queries": [
            "SELECT E.full_name, SP.version\nFROM Editors E\nJOIN EditorSoftwarePrograms ESP ON E.editor_id = ESP.editor_id\nJOIN Software_Programs SP ON ESP.software_program_id = SP.program_id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "For each editor, retrieve the corresponding version of every software program they have used.",
          "sql_queries": [
            "SELECT E.full_name, SP.version\nFROM Editors E\nJOIN EditorSoftwarePrograms ESP ON E.editor_id = ESP.editor_id\nJOIN Software_Programs SP ON ESP.software_program_id = SP.program_id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Provide a list of software programs and their versions, grouped by the editor who used them.",
          "sql_queries": [
            "SELECT E.full_name, SP.name, SP.version\nFROM Editors E\nJOIN EditorSoftwarePrograms ESP ON E.editor_id = ESP.editor_id\nJOIN Software_Programs SP ON ESP.software_program_id = SP.program_id\nORDER BY E.full_name, SP.name"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List the version of every software program used by each editor.",
          "sql_queries": [
            "SELECT E.full_name, SP.version\nFROM Editors E\nJOIN EditorSoftwarePrograms ESP ON E.editor_id = ESP.editor_id\nJOIN Software_Programs SP ON ESP.software_program_id = SP.program_id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 4,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/scope/Filmmaking/scope_editors_software_programs/scope_editors_software_programs.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT\n);\nCREATE TABLE DirectorFilmProjects (\n    director_film_project_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    director_id INTEGER REFERENCES Directors(director_id),\n    film_project_id INTEGER REFERENCES FilmProjects(project_id)\n);\nCREATE TABLE Directors (\n    director_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT\n);\nCREATE TABLE EditorDirectorRelationship (\n    relationship_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    director_id INTEGER REFERENCES Directors(director_id),\n    editor_id INTEGER REFERENCES Editors(editor_id)\n);\nCREATE TABLE EditorSoftwarePrograms (\n    editor_software_program_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    editor_id INTEGER REFERENCES Editors(editor_id),\n    software_program_id INTEGER REFERENCES Software_Programs(program_id)\n);\nCREATE TABLE Editors (\n    editor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    full_name TEXT);\nCREATE TABLE FilmProjects (\n    project_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE\n);\nCREATE TABLE ProjectActors (\n    project_actor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    film_project_id INTEGER REFERENCES FilmProjects(project_id),\n    actor_id INTEGER REFERENCES Actors(actor_id)\n);\nCREATE TABLE Software_Programs (\n    program_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    version TEXT\n);\n\nINSERT INTO \"Actors\" (actor_id,first_name,last_name) VALUES (1,'Andy','Dufraine'),(2,'Tom','Hanks'),(3,'Leonardo','DiCaprio'),(4,'Elijah','Wood'),(5,'Kevin','Costner');\nINSERT INTO \"DirectorFilmProjects\" (director_film_project_id,director_id,film_project_id) VALUES (1,1,1),(2,2,NULL),(3,3,3),(4,4,NULL),(5,5,NULL);\nINSERT INTO \"Directors\" (director_id,first_name,last_name) VALUES (1,'Frank','Capra'),(2,'Martin','Scorsese'),(3,'Quentin','Tarantino'),(4,'Steven','Spielberg'),(5,'Ronald','Reagan');\nINSERT INTO \"EditorDirectorRelationship\" (relationship_id,director_id,editor_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"EditorSoftwarePrograms\" (editor_software_program_id,editor_id,software_program_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5),(6,2,1),(7,3,1),(8,4,1),(9,5,1);\nINSERT INTO \"Editors\" (editor_id,full_name) VALUES (1,'John Doe'),(2,'Jane Smith'),(3,'Michael Brown'),(4,'Emma White'),(5,'David Black');\nINSERT INTO \"FilmProjects\" (project_id,title,release_date) VALUES (1,'The Shawshank Redemption','1994-09-22'),(2,'The Godfather','1972-03-24'),(3,'Pulp Fiction','1994-10-14'),(4,'Schindler''s List','1993-12-15'),(5,'Forrest Gump','1994-07-06');\nINSERT INTO \"ProjectActors\" (project_actor_id,film_project_id,actor_id) VALUES (1,1,1),(2,1,2),(3,2,NULL),(4,3,NULL),(5,4,NULL);\nINSERT INTO \"Software_Programs\" (program_id,name,version) VALUES (1,'Adobe Premiere','2021'),(2,'Final Cut Pro','2020'),(3,'DaVinci Resolve','16'),(4,'Avid Media Composer','2020'),(5,'HitFilm Express','13');\n",
      "question": "Give me the name of the software programs that are common to all editors",
      "gold_queries": [
        "SELECT Software_Programs.name  from EditorSoftwarePrograms join Software_Programs on EditorSoftwarePrograms.software_program_id = Software_Programs.program_id join Editors on EditorSoftwarePrograms.editor_id = Editors.editor_id   GROUP BY EditorSoftwarePrograms.software_program_id HAVING COUNT(DISTINCT EditorSoftwarePrograms.editor_id) = (SELECT COUNT(*) FROM  Editors)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What are the names of the software programs shared by every editor?",
          "sql_queries": [
            "SELECT SP.name\nFROM Software_Programs SP\nWHERE NOT EXISTS (\n    SELECT E.editor_id\n    FROM Editors E\n    LEFT JOIN EditorSoftwarePrograms ESP ON E.editor_id = ESP.editor_id\n    WHERE ESP.software_program_id <> SP.program_id OR ESP.software_program_id IS NULL\n)"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List the unique software programs used by every editor in the database.",
          "sql_queries": [
            "SELECT DISTINCT T3.name FROM Editors AS T1 JOIN EditorSoftwarePrograms AS T2 ON T1.editor_id = T2.editor_id JOIN Software_Programs AS T3 ON T2.software_program_id = T3.program_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Identify the common software programs employed by all editors in the EditorSoftwarePrograms table.",
          "sql_queries": [
            "SELECT sp.name\nFROM Software_Programs sp\nWHERE sp.program_id IN (\n    SELECT esp.software_program_id\n    FROM EditorSoftwarePrograms esp\n    GROUP BY esp.software_program_id\n    HAVING COUNT(DISTINCT esp.editor_id) = (SELECT COUNT(*) FROM Editors)\n)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Which software programs are used by all editors?",
          "sql_queries": [
            "SELECT name FROM Software_Programs WHERE program_id IN (SELECT software_program_id FROM EditorSoftwarePrograms GROUP BY software_program_id HAVING COUNT(editor_id) = (SELECT COUNT(editor_id) FROM Editors))"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Find the software programs listed in the EditorSoftwarePrograms table that are associated with all editors.",
          "sql_queries": [
            "SELECT T2.name FROM EditorSoftwarePrograms AS T1 JOIN Software_Programs AS T2 ON T1.software_program_id = T2.program_id GROUP BY T1.software_program_id HAVING COUNT(DISTINCT T1.editor_id) = (SELECT COUNT(*) FROM Editors)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.6,
        "f1_score": 0.7499999999999999,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/scope/Filmmaking/scope_editors_software_programs/scope_editors_software_programs.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT\n);\nCREATE TABLE DirectorFilmProjects (\n    director_film_project_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    director_id INTEGER REFERENCES Directors(director_id),\n    film_project_id INTEGER REFERENCES FilmProjects(project_id)\n);\nCREATE TABLE Directors (\n    director_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT\n);\nCREATE TABLE EditorDirectorRelationship (\n    relationship_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    director_id INTEGER REFERENCES Directors(director_id),\n    editor_id INTEGER REFERENCES Editors(editor_id)\n);\nCREATE TABLE EditorSoftwarePrograms (\n    editor_software_program_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    editor_id INTEGER REFERENCES Editors(editor_id),\n    software_program_id INTEGER REFERENCES Software_Programs(program_id)\n);\nCREATE TABLE Editors (\n    editor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    full_name TEXT);\nCREATE TABLE FilmProjects (\n    project_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE\n);\nCREATE TABLE ProjectActors (\n    project_actor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    film_project_id INTEGER REFERENCES FilmProjects(project_id),\n    actor_id INTEGER REFERENCES Actors(actor_id)\n);\nCREATE TABLE Software_Programs (\n    program_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    version TEXT\n);\n\nINSERT INTO \"Actors\" (actor_id,first_name,last_name) VALUES (1,'Andy','Dufraine'),(2,'Tom','Hanks'),(3,'Leonardo','DiCaprio'),(4,'Elijah','Wood'),(5,'Kevin','Costner');\nINSERT INTO \"DirectorFilmProjects\" (director_film_project_id,director_id,film_project_id) VALUES (1,1,1),(2,2,NULL),(3,3,3),(4,4,NULL),(5,5,NULL);\nINSERT INTO \"Directors\" (director_id,first_name,last_name) VALUES (1,'Frank','Capra'),(2,'Martin','Scorsese'),(3,'Quentin','Tarantino'),(4,'Steven','Spielberg'),(5,'Ronald','Reagan');\nINSERT INTO \"EditorDirectorRelationship\" (relationship_id,director_id,editor_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"EditorSoftwarePrograms\" (editor_software_program_id,editor_id,software_program_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5),(6,2,1),(7,3,1),(8,4,1),(9,5,1);\nINSERT INTO \"Editors\" (editor_id,full_name) VALUES (1,'John Doe'),(2,'Jane Smith'),(3,'Michael Brown'),(4,'Emma White'),(5,'David Black');\nINSERT INTO \"FilmProjects\" (project_id,title,release_date) VALUES (1,'The Shawshank Redemption','1994-09-22'),(2,'The Godfather','1972-03-24'),(3,'Pulp Fiction','1994-10-14'),(4,'Schindler''s List','1993-12-15'),(5,'Forrest Gump','1994-07-06');\nINSERT INTO \"ProjectActors\" (project_actor_id,film_project_id,actor_id) VALUES (1,1,1),(2,1,2),(3,2,NULL),(4,3,NULL),(5,4,NULL);\nINSERT INTO \"Software_Programs\" (program_id,name,version) VALUES (1,'Adobe Premiere','2021'),(2,'Final Cut Pro','2020'),(3,'DaVinci Resolve','16'),(4,'Avid Media Composer','2020'),(5,'HitFilm Express','13');\n",
      "question": "Show me the version of programs each editor uses.",
      "gold_queries": [
        "SELECT Software_Programs.version  from EditorSoftwarePrograms join Software_Programs on EditorSoftwarePrograms.software_program_id = Software_Programs.program_id join Editors on EditorSoftwarePrograms.editor_id = Editors.editor_id   GROUP BY EditorSoftwarePrograms.software_program_id HAVING COUNT(DISTINCT EditorSoftwarePrograms.editor_id) = (SELECT COUNT(*) FROM  Editors)",
        "select editors.full_name , software_programs.version from EditorSoftwarePrograms join Software_Programs on EditorSoftwarePrograms.software_program_id = Software_Programs.program_id join Editors on EditorSoftwarePrograms.editor_id = Editors.editor_id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "FROM EditorSoftwarePrograms e",
          "sql_queries": [
            "SELECT e.editor_id, e.software_program_id\nFROM EditorSoftwarePrograms e\n"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "JOIN Software_Programs e.software_program ON e.software_program_id = e.software_program_id;",
          "sql_queries": [
            "SELECT e.software_program.name, e.software_program.version\nFROM EditorSoftwarePrograms\nJOIN Software_Programs ON EditorSoftwarePrograms.software_program_id = Software_Programs.program_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT e.software_program.name, e.software_program.version\nFROM EditorSoftwarePrograms\nJOIN Software_Programs ON EditorSoftwarePrograms.software_program_id = Software_Programs.program_id",
                "original_exception": "no such column: e.software_program.name"
              }
            ],
            "all_found": false
          }
        },
        {
          "interpretation": "SELECT Software_Programs.name",
          "sql_queries": [
            "SELECT Software_Programs.name\n"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT Software_Programs.name\n",
                "original_exception": "no such column: Software_Programs.name"
              }
            ],
            "all_found": false
          }
        },
        {
          "interpretation": "JOIN Editors ON EditorSoftwarePrograms.editor_id = Editors.editor_id;",
          "sql_queries": [
            "SELECT Editors.full_name FROM EditorSoftwarePrograms JOIN Editors ON EditorSoftwarePrograms.editor_id = Editors.editor_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Select e.software_program.name, e.full_name",
          "sql_queries": [
            "SELECT T3.name, T2.full_name FROM EditorSoftwarePrograms AS T1 JOIN Editors AS T2 ON T1.editor_id = T2.editor_id JOIN Software_Programs AS T3 ON T1.software_program_id = T3.program_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "JOIN Software_Programs ON EditorSoftwarePrograms.software_program_id = Software_Programs.program_id",
          "sql_queries": [
            "SELECT Software_Programs.name, Software_Programs.version\nFROM EditorSoftwarePrograms\nJOIN Software_Programs ON EditorSoftwarePrograms.software_program_id = Software_Programs.program_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "FROM EditorSoftwarePrograms",
          "sql_queries": [
            "SELECT editor_id, software_program_id FROM EditorSoftwarePrograms"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 7,
        "num_unique_queries": 7,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [
          {
            "query": "SELECT e.software_program.name, e.software_program.version\nFROM EditorSoftwarePrograms\nJOIN Software_Programs ON EditorSoftwarePrograms.software_program_id = Software_Programs.program_id",
            "original_exception": "no such column: e.software_program.name"
          },
          {
            "query": "SELECT Software_Programs.name\n",
            "original_exception": "no such column: Software_Programs.name"
          }
        ],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Filmmaking/scope_lighting_technicians_fixtures/scope_lighting_technicians_fixtures.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actorID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    age INT\n);\nCREATE TABLE Cinematographers (\n    cinematographerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    experience INT\n);\nCREATE TABLE Directors (\n    directorID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    birthdate DATE\n);\nCREATE TABLE FilmProjects (\n    projectID INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    releaseDate DATE\n);\nCREATE TABLE Fixtures (\n    fixtureType IDENTIFIER PRIMARY KEY,\n    description TEXT\n);\nCREATE TABLE Lighting_Technicians (\n    technicianID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    yearsExperience INT\n);\nCREATE TABLE Lighting_Technicians_Fixtures (\n    technicianID INTEGER,\n    fixtureType IDENTIFIER,\n    FOREIGN KEY (technicianID) REFERENCES Lighting_Technicians(technicianID),\n    FOREIGN KEY (fixtureType) REFERENCES Fixtures(fixtureType)\n);\nCREATE TABLE Roles (\n    roleID INTEGER PRIMARY KEY AUTOINCREMENT,\n    filmProjectID INTEGER,\n    actorID INTEGER,\n    FOREIGN KEY (filmProjectID) REFERENCES FilmProjects(projectID),\n    FOREIGN KEY (actorID) REFERENCES Actors(actorID)\n);\n\nINSERT INTO \"Actors\" (actorID,name,age) VALUES (1,'Actor1',30),(2,'Actor2',25),(3,'Actor3',35),(4,'Actor4',28),(5,'Actor5',40);\nINSERT INTO \"Cinematographers\" (cinematographerID,name,experience) VALUES (1,'Cinematograher1',10),(2,'Cinematograher2',15);\nINSERT INTO \"Directors\" (directorID,name,birthdate) VALUES (1,'Director1','1975-11-26'),(2,'Director2','1980-08-03');\nINSERT INTO \"FilmProjects\" (projectID,title,releaseDate) VALUES (1,'Film1','2023-01-01'),(2,'Film2','2023-07-08');\nINSERT INTO \"Fixtures\" (fixtureType,description) VALUES ('Softbox',NULL),('LED Panel',NULL),('Fresnel',NULL);\nINSERT INTO \"Lighting_Technicians\" (technicianID,name,yearsExperience) VALUES (1,'Tech1',5),(2,'Tech2',8),(3,'Tech3',7),(4,'Tech4',6),(5,'Tech5',4);\nINSERT INTO \"Lighting_Technicians_Fixtures\" (technicianID,fixtureType) VALUES (1,'Softbox'),(1,'LED Panel'),(2,'Softbox'),(2,'Fresnel'),(3,'Softbox'),(3,'LED Panel'),(4,'Softbox'),(4,'Fresnel'),(5,'Softbox'),(5,'LED Panel'),(1,3),(2,3),(3,3),(4,3),(5,3);\nINSERT INTO \"Roles\" (roleID,filmProjectID,actorID) VALUES (1,1,1),(2,2,2),(3,1,3),(4,2,4),(5,1,5);\n",
      "question": "Give me descriptions of fixtures each technician uses.",
      "gold_queries": [
        "SELECT Fixtures.description  from Lighting_Technicians_Fixtures join Fixtures on Lighting_Technicians_Fixtures.fixtureType = Fixtures.fixtureType join Lighting_Technicians on Lighting_Technicians_Fixtures.technicianID = Lighting_Technicians.technicianID   GROUP BY Lighting_Technicians_Fixtures.fixtureType HAVING COUNT(DISTINCT Lighting_Technicians_Fixtures.technicianID) = (SELECT COUNT(*) FROM  Lighting_Technicians)",
        "select lighting_technicians.name , fixtures.description from Lighting_Technicians_Fixtures join Fixtures on Lighting_Technicians_Fixtures.fixtureType = Fixtures.fixtureType join Lighting_Technicians on Lighting_Technicians_Fixtures.technicianID = Lighting_Technicians.technicianID"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Describe the fixture types used by each lighting technician.",
          "sql_queries": [
            "SELECT T2.name, T1.fixtureType FROM Lighting_Technicians_Fixtures AS T1 JOIN Lighting_Technicians AS T2 ON T1.technicianID = T2.technicianID"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List the fixtures associated with each lighting technician.",
          "sql_queries": [
            "SELECT T1.name, T2.fixtureType \nFROM Lighting_Technicians AS T1 \nJOIN Lighting_Technicians_Fixtures AS T2 \nON T1.technicianID = T2.technicianID"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "What are the fixture descriptions used by each lighting technician?",
          "sql_queries": [
            "SELECT technicianID, description\nFROM Lighting_Technicians_Fixtures\nJOIN Fixtures ON Lighting_Technicians_Fixtures.fixtureType = Fixtures.fixtureType"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Identify the fixtures used by each lighting technician and retrieve their descriptions.",
          "sql_queries": [
            "SELECT LT.name, F.fixtureType, F.description\nFROM Lighting_Technicians LT\nJOIN Lighting_Technicians_Fixtures LTF ON LT.technicianID = LTF.technicianID\nJOIN Fixtures F ON LTF.fixtureType = F.fixtureType"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "For each technician, provide a description of the fixtures they are assigned to.",
          "sql_queries": [
            "SELECT LT.name, F.fixtureType, F.description\nFROM Lighting_Technicians AS LT\nJOIN Lighting_Technicians_Fixtures AS LTF ON LT.technicianID = LTF.technicianID\nJOIN Fixtures AS F ON LTF.fixtureType = F.fixtureType"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Filmmaking/scope_lighting_technicians_fixtures/scope_lighting_technicians_fixtures.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actorID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    age INT\n);\nCREATE TABLE Cinematographers (\n    cinematographerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    experience INT\n);\nCREATE TABLE Directors (\n    directorID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    birthdate DATE\n);\nCREATE TABLE FilmProjects (\n    projectID INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    releaseDate DATE\n);\nCREATE TABLE Fixtures (\n    fixtureType IDENTIFIER PRIMARY KEY,\n    description TEXT\n);\nCREATE TABLE Lighting_Technicians (\n    technicianID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    yearsExperience INT\n);\nCREATE TABLE Lighting_Technicians_Fixtures (\n    technicianID INTEGER,\n    fixtureType IDENTIFIER,\n    FOREIGN KEY (technicianID) REFERENCES Lighting_Technicians(technicianID),\n    FOREIGN KEY (fixtureType) REFERENCES Fixtures(fixtureType)\n);\nCREATE TABLE Roles (\n    roleID INTEGER PRIMARY KEY AUTOINCREMENT,\n    filmProjectID INTEGER,\n    actorID INTEGER,\n    FOREIGN KEY (filmProjectID) REFERENCES FilmProjects(projectID),\n    FOREIGN KEY (actorID) REFERENCES Actors(actorID)\n);\n\nINSERT INTO \"Actors\" (actorID,name,age) VALUES (1,'Actor1',30),(2,'Actor2',25),(3,'Actor3',35),(4,'Actor4',28),(5,'Actor5',40);\nINSERT INTO \"Cinematographers\" (cinematographerID,name,experience) VALUES (1,'Cinematograher1',10),(2,'Cinematograher2',15);\nINSERT INTO \"Directors\" (directorID,name,birthdate) VALUES (1,'Director1','1975-11-26'),(2,'Director2','1980-08-03');\nINSERT INTO \"FilmProjects\" (projectID,title,releaseDate) VALUES (1,'Film1','2023-01-01'),(2,'Film2','2023-07-08');\nINSERT INTO \"Fixtures\" (fixtureType,description) VALUES ('Softbox',NULL),('LED Panel',NULL),('Fresnel',NULL);\nINSERT INTO \"Lighting_Technicians\" (technicianID,name,yearsExperience) VALUES (1,'Tech1',5),(2,'Tech2',8),(3,'Tech3',7),(4,'Tech4',6),(5,'Tech5',4);\nINSERT INTO \"Lighting_Technicians_Fixtures\" (technicianID,fixtureType) VALUES (1,'Softbox'),(1,'LED Panel'),(2,'Softbox'),(2,'Fresnel'),(3,'Softbox'),(3,'LED Panel'),(4,'Softbox'),(4,'Fresnel'),(5,'Softbox'),(5,'LED Panel'),(1,3),(2,3),(3,3),(4,3),(5,3);\nINSERT INTO \"Roles\" (roleID,filmProjectID,actorID) VALUES (1,1,1),(2,2,2),(3,1,3),(4,2,4),(5,1,5);\n",
      "question": "For every technician, list descriptions on fixtures used.",
      "gold_queries": [
        "select lighting_technicians.name , fixtures.description from Lighting_Technicians_Fixtures join Fixtures on Lighting_Technicians_Fixtures.fixtureType = Fixtures.fixtureType join Lighting_Technicians on Lighting_Technicians_Fixtures.technicianID = Lighting_Technicians.technicianID"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Generate a report containing the technician's name for each entry and a list of fixture descriptions they utilize.",
          "sql_queries": [
            "SELECT T2.name, GROUP_CONCAT(F2.description) AS fixtureDescriptions\nFROM Lighting_Technicians_Fixtures AS T1\nJOIN Lighting_Technicians AS T2 ON T1.technicianID = T2.technicianID\nJOIN Fixtures AS F2 ON T1.fixtureType = F2.fixtureType\nGROUP BY T2.name"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List every Lighting Technician and the descriptions of all fixtures they use.",
          "sql_queries": [
            "SELECT T1.name, T2.description\nFROM Lighting_Technicians AS T1\nJOIN Lighting_Technicians_Fixtures AS T3 ON T1.technicianID = T3.technicianID\nJOIN Fixtures AS T2 ON T3.fixtureType = T2.fixtureType"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Provide a table showing each technician and the corresponding descriptions of the fixtures they are associated with.",
          "sql_queries": [
            "SELECT LT.name, F.description\nFROM Lighting_Technicians LT\nJOIN Lighting_Technicians_Fixtures LTF ON LT.technicianID = LTF.technicianID\nJOIN Fixtures F ON LTF.fixtureType = F.fixtureType"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "For each technician in the Lighting Technicians table, retrieve the description of each fixture they are linked to in the Lighting_Technicians_Fixtures table.",
          "sql_queries": [
            "SELECT LT.name, F.description\nFROM Lighting_Technicians LT\nJOIN Lighting_Technicians_Fixtures LTF ON LT.technicianID = LTF.technicianID\nJOIN Fixtures F ON LTF.fixtureType = F.fixtureType"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Output a list where each item is a technician name followed by a comma-separated list of fixture descriptions they use.",
          "sql_queries": [
            "SELECT T.name, GROUP_CONCAT(F.description, ', ') AS fixtures\nFROM Lighting_Technicians AS T\nJOIN Lighting_Technicians_Fixtures AS LTF ON T.technicianID = LTF.technicianID\nJOIN Fixtures AS F ON LTF.fixtureType = F.fixtureType\nGROUP BY T.name"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 5,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/scope/Filmmaking/scope_lighting_technicians_fixtures/scope_lighting_technicians_fixtures.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actorID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    age INT\n);\nCREATE TABLE Cinematographers (\n    cinematographerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    experience INT\n);\nCREATE TABLE Directors (\n    directorID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    birthdate DATE\n);\nCREATE TABLE FilmProjects (\n    projectID INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    releaseDate DATE\n);\nCREATE TABLE Fixtures (\n    fixtureType IDENTIFIER PRIMARY KEY,\n    description TEXT\n);\nCREATE TABLE Lighting_Technicians (\n    technicianID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    yearsExperience INT\n);\nCREATE TABLE Lighting_Technicians_Fixtures (\n    technicianID INTEGER,\n    fixtureType IDENTIFIER,\n    FOREIGN KEY (technicianID) REFERENCES Lighting_Technicians(technicianID),\n    FOREIGN KEY (fixtureType) REFERENCES Fixtures(fixtureType)\n);\nCREATE TABLE Roles (\n    roleID INTEGER PRIMARY KEY AUTOINCREMENT,\n    filmProjectID INTEGER,\n    actorID INTEGER,\n    FOREIGN KEY (filmProjectID) REFERENCES FilmProjects(projectID),\n    FOREIGN KEY (actorID) REFERENCES Actors(actorID)\n);\n\nINSERT INTO \"Actors\" (actorID,name,age) VALUES (1,'Actor1',30),(2,'Actor2',25),(3,'Actor3',35),(4,'Actor4',28),(5,'Actor5',40);\nINSERT INTO \"Cinematographers\" (cinematographerID,name,experience) VALUES (1,'Cinematograher1',10),(2,'Cinematograher2',15);\nINSERT INTO \"Directors\" (directorID,name,birthdate) VALUES (1,'Director1','1975-11-26'),(2,'Director2','1980-08-03');\nINSERT INTO \"FilmProjects\" (projectID,title,releaseDate) VALUES (1,'Film1','2023-01-01'),(2,'Film2','2023-07-08');\nINSERT INTO \"Fixtures\" (fixtureType,description) VALUES ('Softbox',NULL),('LED Panel',NULL),('Fresnel',NULL);\nINSERT INTO \"Lighting_Technicians\" (technicianID,name,yearsExperience) VALUES (1,'Tech1',5),(2,'Tech2',8),(3,'Tech3',7),(4,'Tech4',6),(5,'Tech5',4);\nINSERT INTO \"Lighting_Technicians_Fixtures\" (technicianID,fixtureType) VALUES (1,'Softbox'),(1,'LED Panel'),(2,'Softbox'),(2,'Fresnel'),(3,'Softbox'),(3,'LED Panel'),(4,'Softbox'),(4,'Fresnel'),(5,'Softbox'),(5,'LED Panel'),(1,3),(2,3),(3,3),(4,3),(5,3);\nINSERT INTO \"Roles\" (roleID,filmProjectID,actorID) VALUES (1,1,1),(2,2,2),(3,1,3),(4,2,4),(5,1,5);\n",
      "question": "What are descriptions of fixtures common to all technicians?",
      "gold_queries": [
        "SELECT Fixtures.description  from Lighting_Technicians_Fixtures join Fixtures on Lighting_Technicians_Fixtures.fixtureType = Fixtures.fixtureType join Lighting_Technicians on Lighting_Technicians_Fixtures.technicianID = Lighting_Technicians.technicianID   GROUP BY Lighting_Technicians_Fixtures.fixtureType HAVING COUNT(DISTINCT Lighting_Technicians_Fixtures.technicianID) = (SELECT COUNT(*) FROM  Lighting_Technicians)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Return descriptions of all fixture types present in the 'Fixtures' table.",
          "sql_queries": [
            "SELECT description FROM Fixtures"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Identify descriptions of fixtures used by the majority of technicians.",
          "sql_queries": [
            "SELECT description \nFROM Fixtures \nWHERE fixtureType IN (\n    SELECT fixtureType \n    FROM Lighting_Technicians_Fixtures \n    GROUP BY fixtureType \n    HAVING COUNT(technicianID) = (\n        SELECT COUNT(technicianID) \n        FROM Lighting_Technicians_Fixtures \n        GROUP BY fixtureType \n        ORDER BY COUNT(technicianID) DESC \n        LIMIT 1\n    )\n)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Determine if there are any fixture descriptions shared by every lighting technician.",
          "sql_queries": [
            "SELECT description\nFROM Fixtures\nWHERE fixtureType IN (\n    SELECT fixtureType\n    FROM Lighting_Technicians_Fixtures\n    GROUP BY fixtureType\n    HAVING COUNT(DISTINCT technicianID) = (SELECT COUNT(*) FROM Lighting_Technicians)\n)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.6666666666666666,
        "f1_score": 0.8,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Healthcare/vague_2cols_effects/vague_2cols_effects.sqlite",
      "db_dump": "CREATE TABLE Appointments (\n    AppointmentID INTEGER PRIMARY KEY,\n    PatientID INTEGER REFERENCES Patients(PatientID),\n    DoctorID INTEGER REFERENCES Doctors(DoctorID),\n    AppointmentDateTime TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    ReasonForVisit TEXT,\n    IsCancelled BOOLEAN DEFAULT FALSE);\nCREATE TABLE Diagnoses (\n    DiagnosisID INTEGER PRIMARY KEY,\n    PatientID INTEGER REFERENCES Patients(PatientID),\n    DoctorID INTEGER REFERENCES Doctors(DoctorID),\n    Code TEXT,\n    Description TEXT);\nCREATE TABLE Doctors (\n    DoctorID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Specialty TEXT,\n    LicenseNumber VARCHAR(20),\n    OfficePhone TEXT UNIQUE);\nCREATE TABLE Medications (\n    DrugID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Classification TEXT,\n    Manufacturer TEXT,\n    Side_Effects TEXT,\n    Effectiveness TEXT);\nCREATE TABLE Patients (\n    PatientID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    DOB Date ,\n    PhoneNumber VARCHAR(15),\n    EmailAddress VARCHAR(255) UNIQUE);\nCREATE TABLE Prescriptions (\n    PrescriptionID INTEGER PRIMARY KEY,\n    PatientID INTEGER REFERENCES Patients(PatientID),\n    DoctorID INTEGER REFERENCES Doctors(DoctorID),\n    MedicationID INTEGER REFERENCES Medications(MedicationID),\n    StartDate Date ,\n    EndDate Date,\n    Quantity INTEGER );\n\nINSERT INTO \"Appointments\" (AppointmentID,PatientID,DoctorID,AppointmentDateTime,ReasonForVisit,IsCancelled) VALUES (1,1,1,'2024-02-19 12:14:44','Routine checkup',0);\nINSERT INTO \"Diagnoses\" (DiagnosisID,PatientID,DoctorID,Code,Description) VALUES (1,1,1,'A123','Hypertension');\nINSERT INTO \"Doctors\" (DoctorID,FirstName,LastName,Specialty,LicenseNumber,OfficePhone) VALUES (1,'Jane','Smith','Cardiology','LIC001234567','+0987654321');\nINSERT INTO \"Medications\" (DrugID,Name,Classification,Manufacturer,Side_Effects,Effectiveness) VALUES (1,'Aspirin','Analgesic','Bayer','Gastrointestinal upset','High');\nINSERT INTO \"Patients\" (PatientID,FirstName,LastName,DOB,PhoneNumber,EmailAddress) VALUES (1,'John','Doe','1987-06-15','+1234567890','john.doe@example.com');\nINSERT INTO \"Prescriptions\" (PrescriptionID,PatientID,DoctorID,MedicationID,StartDate,EndDate,Quantity) VALUES (1,1,1,1,'2022-01-01','2022-01-31',10);\n",
      "question": "List all analgesic drugs, their side effects and manufacturers.",
      "gold_queries": [
        "SELECT Name, Manufacturer, Side_Effects FROM Medications WHERE Classification = 'Analgesic'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Extract data from the \"Medications\" table for entries with \"Classification\" equal to \"Analgesic\", returning the \"Name\", \"Side_Effects\", and \"Manufacturer\" columns.",
          "sql_queries": [
            "SELECT Name, Side_Effects, Manufacturer FROM Medications WHERE Classification = 'Analgesic'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Provide a list of drug names classified as analgesic, accompanied by their respective side effects and manufacturing companies.",
          "sql_queries": [
            "SELECT Name, Side_Effects, Manufacturer FROM Medications WHERE Classification = 'Analgesic'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Retrieve all medications classified as \"Analgesic\" along with their associated \"Side_Effects\" and \"Manufacturer\" fields.",
          "sql_queries": [
            "SELECT Name, Side_Effects, Manufacturer FROM Medications WHERE Classification = 'Analgesic'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Generate a report containing analgesic drugs, their side effects, and manufacturers.",
          "sql_queries": [
            "SELECT Name, Side_Effects, Manufacturer FROM Medications WHERE Classification = 'Analgesic'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 4,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 4
    },
    {
      "db_file": "data/vague/Healthcare/vague_2cols_effects/vague_2cols_effects.sqlite",
      "db_dump": "CREATE TABLE Appointments (\n    AppointmentID INTEGER PRIMARY KEY,\n    PatientID INTEGER REFERENCES Patients(PatientID),\n    DoctorID INTEGER REFERENCES Doctors(DoctorID),\n    AppointmentDateTime TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    ReasonForVisit TEXT,\n    IsCancelled BOOLEAN DEFAULT FALSE);\nCREATE TABLE Diagnoses (\n    DiagnosisID INTEGER PRIMARY KEY,\n    PatientID INTEGER REFERENCES Patients(PatientID),\n    DoctorID INTEGER REFERENCES Doctors(DoctorID),\n    Code TEXT,\n    Description TEXT);\nCREATE TABLE Doctors (\n    DoctorID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Specialty TEXT,\n    LicenseNumber VARCHAR(20),\n    OfficePhone TEXT UNIQUE);\nCREATE TABLE Medications (\n    DrugID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Classification TEXT,\n    Manufacturer TEXT,\n    Side_Effects TEXT,\n    Effectiveness TEXT);\nCREATE TABLE Patients (\n    PatientID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    DOB Date ,\n    PhoneNumber VARCHAR(15),\n    EmailAddress VARCHAR(255) UNIQUE);\nCREATE TABLE Prescriptions (\n    PrescriptionID INTEGER PRIMARY KEY,\n    PatientID INTEGER REFERENCES Patients(PatientID),\n    DoctorID INTEGER REFERENCES Doctors(DoctorID),\n    MedicationID INTEGER REFERENCES Medications(MedicationID),\n    StartDate Date ,\n    EndDate Date,\n    Quantity INTEGER );\n\nINSERT INTO \"Appointments\" (AppointmentID,PatientID,DoctorID,AppointmentDateTime,ReasonForVisit,IsCancelled) VALUES (1,1,1,'2024-02-19 12:14:44','Routine checkup',0);\nINSERT INTO \"Diagnoses\" (DiagnosisID,PatientID,DoctorID,Code,Description) VALUES (1,1,1,'A123','Hypertension');\nINSERT INTO \"Doctors\" (DoctorID,FirstName,LastName,Specialty,LicenseNumber,OfficePhone) VALUES (1,'Jane','Smith','Cardiology','LIC001234567','+0987654321');\nINSERT INTO \"Medications\" (DrugID,Name,Classification,Manufacturer,Side_Effects,Effectiveness) VALUES (1,'Aspirin','Analgesic','Bayer','Gastrointestinal upset','High');\nINSERT INTO \"Patients\" (PatientID,FirstName,LastName,DOB,PhoneNumber,EmailAddress) VALUES (1,'John','Doe','1987-06-15','+1234567890','john.doe@example.com');\nINSERT INTO \"Prescriptions\" (PrescriptionID,PatientID,DoctorID,MedicationID,StartDate,EndDate,Quantity) VALUES (1,1,1,1,'2022-01-01','2022-01-31',10);\n",
      "question": "Show all the drugs manufactured by 'Bayer' along with their side effects and effectiveness.",
      "gold_queries": [
        "SELECT Name, Side_Effects, Effectiveness FROM Medications WHERE Manufacturer = 'Bayer'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Retrieve all drugs from the Medications table where the Manufacturer field is 'Bayer'.",
          "sql_queries": [
            "SELECT Name FROM Medications WHERE Manufacturer = 'Bayer'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Extract information about drugs manufactured by 'Bayer' including side effects and effectiveness.",
          "sql_queries": [
            "SELECT Side_Effects, Effectiveness FROM Medications WHERE Manufacturer = 'Bayer'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "What medications produced by the company 'Bayer' have side effects and effectiveness levels?",
          "sql_queries": [
            "SELECT Name, Side_Effects, Effectiveness FROM Medications WHERE Manufacturer = 'Bayer'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Query the Medications table for entries with 'Bayer' as the Manufacturer and display their Name, Side_Effects, and Effectiveness attributes.",
          "sql_queries": [
            "SELECT Name, Side_Effects, Effectiveness FROM Medications WHERE Manufacturer = 'Bayer'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "List the Name, Side_Effects, and Effectiveness columns for all records in the Medications table where Manufacturer is 'Bayer'.",
          "sql_queries": [
            "SELECT Name, Side_Effects, Effectiveness FROM Medications WHERE Manufacturer = 'Bayer'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 5,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/vague/Healthcare/vague_2cols_effects/vague_2cols_effects.sqlite",
      "db_dump": "CREATE TABLE Appointments (\n    AppointmentID INTEGER PRIMARY KEY,\n    PatientID INTEGER REFERENCES Patients(PatientID),\n    DoctorID INTEGER REFERENCES Doctors(DoctorID),\n    AppointmentDateTime TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    ReasonForVisit TEXT,\n    IsCancelled BOOLEAN DEFAULT FALSE);\nCREATE TABLE Diagnoses (\n    DiagnosisID INTEGER PRIMARY KEY,\n    PatientID INTEGER REFERENCES Patients(PatientID),\n    DoctorID INTEGER REFERENCES Doctors(DoctorID),\n    Code TEXT,\n    Description TEXT);\nCREATE TABLE Doctors (\n    DoctorID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Specialty TEXT,\n    LicenseNumber VARCHAR(20),\n    OfficePhone TEXT UNIQUE);\nCREATE TABLE Medications (\n    DrugID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Classification TEXT,\n    Manufacturer TEXT,\n    Side_Effects TEXT,\n    Effectiveness TEXT);\nCREATE TABLE Patients (\n    PatientID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    DOB Date ,\n    PhoneNumber VARCHAR(15),\n    EmailAddress VARCHAR(255) UNIQUE);\nCREATE TABLE Prescriptions (\n    PrescriptionID INTEGER PRIMARY KEY,\n    PatientID INTEGER REFERENCES Patients(PatientID),\n    DoctorID INTEGER REFERENCES Doctors(DoctorID),\n    MedicationID INTEGER REFERENCES Medications(MedicationID),\n    StartDate Date ,\n    EndDate Date,\n    Quantity INTEGER );\n\nINSERT INTO \"Appointments\" (AppointmentID,PatientID,DoctorID,AppointmentDateTime,ReasonForVisit,IsCancelled) VALUES (1,1,1,'2024-02-19 12:14:44','Routine checkup',0);\nINSERT INTO \"Diagnoses\" (DiagnosisID,PatientID,DoctorID,Code,Description) VALUES (1,1,1,'A123','Hypertension');\nINSERT INTO \"Doctors\" (DoctorID,FirstName,LastName,Specialty,LicenseNumber,OfficePhone) VALUES (1,'Jane','Smith','Cardiology','LIC001234567','+0987654321');\nINSERT INTO \"Medications\" (DrugID,Name,Classification,Manufacturer,Side_Effects,Effectiveness) VALUES (1,'Aspirin','Analgesic','Bayer','Gastrointestinal upset','High');\nINSERT INTO \"Patients\" (PatientID,FirstName,LastName,DOB,PhoneNumber,EmailAddress) VALUES (1,'John','Doe','1987-06-15','+1234567890','john.doe@example.com');\nINSERT INTO \"Prescriptions\" (PrescriptionID,PatientID,DoctorID,MedicationID,StartDate,EndDate,Quantity) VALUES (1,1,1,1,'2022-01-01','2022-01-31',10);\n",
      "question": "List all analgesic drugs, their effectiveness and manufacturers.",
      "gold_queries": [
        "SELECT Name, Manufacturer, Effectiveness FROM Medications WHERE Classification = 'Analgesic'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Find and display the names, effectiveness ratings, and manufacturers of all drugs categorized as analgesics in the database.",
          "sql_queries": [
            "SELECT Name, Effectiveness, Manufacturer FROM Medications WHERE Classification = 'Analgesic'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "List all medications classified as \"Analgesic\" along with their effectiveness and manufacturer.",
          "sql_queries": [
            "SELECT Name, Effectiveness, Manufacturer FROM Medications WHERE Classification = 'Analgesic'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Retrieve all records from the Medications table where the Classification column is \"Analgesic\" and display the Name, Effectiveness, and Manufacturer columns.",
          "sql_queries": [
            "SELECT Name, Effectiveness, Manufacturer FROM Medications WHERE Classification = 'Analgesic'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 3,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/vague/Healthcare/vague_2cols_effects/vague_2cols_effects.sqlite",
      "db_dump": "CREATE TABLE Appointments (\n    AppointmentID INTEGER PRIMARY KEY,\n    PatientID INTEGER REFERENCES Patients(PatientID),\n    DoctorID INTEGER REFERENCES Doctors(DoctorID),\n    AppointmentDateTime TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    ReasonForVisit TEXT,\n    IsCancelled BOOLEAN DEFAULT FALSE);\nCREATE TABLE Diagnoses (\n    DiagnosisID INTEGER PRIMARY KEY,\n    PatientID INTEGER REFERENCES Patients(PatientID),\n    DoctorID INTEGER REFERENCES Doctors(DoctorID),\n    Code TEXT,\n    Description TEXT);\nCREATE TABLE Doctors (\n    DoctorID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Specialty TEXT,\n    LicenseNumber VARCHAR(20),\n    OfficePhone TEXT UNIQUE);\nCREATE TABLE Medications (\n    DrugID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Classification TEXT,\n    Manufacturer TEXT,\n    Side_Effects TEXT,\n    Effectiveness TEXT);\nCREATE TABLE Patients (\n    PatientID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    DOB Date ,\n    PhoneNumber VARCHAR(15),\n    EmailAddress VARCHAR(255) UNIQUE);\nCREATE TABLE Prescriptions (\n    PrescriptionID INTEGER PRIMARY KEY,\n    PatientID INTEGER REFERENCES Patients(PatientID),\n    DoctorID INTEGER REFERENCES Doctors(DoctorID),\n    MedicationID INTEGER REFERENCES Medications(MedicationID),\n    StartDate Date ,\n    EndDate Date,\n    Quantity INTEGER );\n\nINSERT INTO \"Appointments\" (AppointmentID,PatientID,DoctorID,AppointmentDateTime,ReasonForVisit,IsCancelled) VALUES (1,1,1,'2024-02-19 12:14:44','Routine checkup',0);\nINSERT INTO \"Diagnoses\" (DiagnosisID,PatientID,DoctorID,Code,Description) VALUES (1,1,1,'A123','Hypertension');\nINSERT INTO \"Doctors\" (DoctorID,FirstName,LastName,Specialty,LicenseNumber,OfficePhone) VALUES (1,'Jane','Smith','Cardiology','LIC001234567','+0987654321');\nINSERT INTO \"Medications\" (DrugID,Name,Classification,Manufacturer,Side_Effects,Effectiveness) VALUES (1,'Aspirin','Analgesic','Bayer','Gastrointestinal upset','High');\nINSERT INTO \"Patients\" (PatientID,FirstName,LastName,DOB,PhoneNumber,EmailAddress) VALUES (1,'John','Doe','1987-06-15','+1234567890','john.doe@example.com');\nINSERT INTO \"Prescriptions\" (PrescriptionID,PatientID,DoctorID,MedicationID,StartDate,EndDate,Quantity) VALUES (1,1,1,1,'2022-01-01','2022-01-31',10);\n",
      "question": "List all drugs, their effects and manufacturers that are analgesic.",
      "gold_queries": [
        "SELECT Name, Manufacturer, Side_Effects FROM Medications WHERE Classification = 'Analgesic'",
        "SELECT Name, Manufacturer, Effectiveness FROM Medications WHERE Classification = 'Analgesic'",
        "SELECT Name, Manufacturer, Side_Effects, Effectiveness FROM Medications WHERE Classification = 'Analgesic'"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Display all drugs from the 'Medications' table with 'Analgesic' as their classification, including information about their side effects and manufacturers.",
          "sql_queries": [
            "SELECT Name, Side_Effects, Manufacturer FROM Medications WHERE Classification = 'Analgesic'"
          ],
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Query the 'Medications' table for records where the 'Classification' is 'Analgesic' and return the corresponding 'Name', 'Side_Effects', and 'Manufacturer' columns.",
          "sql_queries": [
            "SELECT Name, Side_Effects, Manufacturer FROM Medications WHERE Classification = 'Analgesic'"
          ],
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve the names, side effects, and manufacturers of all analgesic drugs present in the database.",
          "sql_queries": [
            "SELECT Name, Side_Effects, Manufacturer FROM Medications WHERE Classification = 'Analgesic'"
          ],
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all medications classified as 'Analgesic' along with their side effects and manufacturers.",
          "sql_queries": [
            "SELECT Name, Side_Effects, Manufacturer FROM Medications WHERE Classification = 'Analgesic'"
          ],
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.3333333333333333,
        "precision": 1.0,
        "f1_score": 0.5,
        "num_queries": 4,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 4
    },
    {
      "db_file": "data/vague/Healthcare/vague_2cols_effects/vague_2cols_effects.sqlite",
      "db_dump": "CREATE TABLE Appointments (\n    AppointmentID INTEGER PRIMARY KEY,\n    PatientID INTEGER REFERENCES Patients(PatientID),\n    DoctorID INTEGER REFERENCES Doctors(DoctorID),\n    AppointmentDateTime TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    ReasonForVisit TEXT,\n    IsCancelled BOOLEAN DEFAULT FALSE);\nCREATE TABLE Diagnoses (\n    DiagnosisID INTEGER PRIMARY KEY,\n    PatientID INTEGER REFERENCES Patients(PatientID),\n    DoctorID INTEGER REFERENCES Doctors(DoctorID),\n    Code TEXT,\n    Description TEXT);\nCREATE TABLE Doctors (\n    DoctorID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Specialty TEXT,\n    LicenseNumber VARCHAR(20),\n    OfficePhone TEXT UNIQUE);\nCREATE TABLE Medications (\n    DrugID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Classification TEXT,\n    Manufacturer TEXT,\n    Side_Effects TEXT,\n    Effectiveness TEXT);\nCREATE TABLE Patients (\n    PatientID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    DOB Date ,\n    PhoneNumber VARCHAR(15),\n    EmailAddress VARCHAR(255) UNIQUE);\nCREATE TABLE Prescriptions (\n    PrescriptionID INTEGER PRIMARY KEY,\n    PatientID INTEGER REFERENCES Patients(PatientID),\n    DoctorID INTEGER REFERENCES Doctors(DoctorID),\n    MedicationID INTEGER REFERENCES Medications(MedicationID),\n    StartDate Date ,\n    EndDate Date,\n    Quantity INTEGER );\n\nINSERT INTO \"Appointments\" (AppointmentID,PatientID,DoctorID,AppointmentDateTime,ReasonForVisit,IsCancelled) VALUES (1,1,1,'2024-02-19 12:14:44','Routine checkup',0);\nINSERT INTO \"Diagnoses\" (DiagnosisID,PatientID,DoctorID,Code,Description) VALUES (1,1,1,'A123','Hypertension');\nINSERT INTO \"Doctors\" (DoctorID,FirstName,LastName,Specialty,LicenseNumber,OfficePhone) VALUES (1,'Jane','Smith','Cardiology','LIC001234567','+0987654321');\nINSERT INTO \"Medications\" (DrugID,Name,Classification,Manufacturer,Side_Effects,Effectiveness) VALUES (1,'Aspirin','Analgesic','Bayer','Gastrointestinal upset','High');\nINSERT INTO \"Patients\" (PatientID,FirstName,LastName,DOB,PhoneNumber,EmailAddress) VALUES (1,'John','Doe','1987-06-15','+1234567890','john.doe@example.com');\nINSERT INTO \"Prescriptions\" (PrescriptionID,PatientID,DoctorID,MedicationID,StartDate,EndDate,Quantity) VALUES (1,1,1,1,'2022-01-01','2022-01-31',10);\n",
      "question": "Show all the drugs manufactured by 'Bayer' and their effectiveness.",
      "gold_queries": [
        "SELECT Name, Effectiveness FROM Medications WHERE Manufacturer = 'Bayer'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Which drugs made by Bayer are most effective?",
          "sql_queries": [
            "SELECT Name FROM Medications WHERE Manufacturer = 'Bayer' ORDER BY Effectiveness DESC LIMIT 1"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Select * FROM Medications WHERE Manufacturer = 'Bayer';",
          "sql_queries": [
            "SELECT * FROM Medications WHERE Manufacturer = 'Bayer'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "What are the effectiveness levels of all medications manufactured by 'Bayer'?",
          "sql_queries": [
            "SELECT Effectiveness FROM Medications WHERE Manufacturer = 'Bayer'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Display the Medications table rows for drugs produced by Bayer, focusing on the 'Name' and 'Effectiveness' columns.",
          "sql_queries": [
            "SELECT Name, Effectiveness FROM Medications WHERE Manufacturer = 'Bayer'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Retrieve the names and effectiveness ratings of all Bayer-manufactured medications.",
          "sql_queries": [
            "SELECT Name, Effectiveness FROM Medications WHERE Manufacturer = 'Bayer'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "List the name and effectiveness of all drugs manufactured by Bayer.",
          "sql_queries": [
            "SELECT Name, Effectiveness FROM Medications WHERE Manufacturer = 'Bayer'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 6,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/vague/Healthcare/vague_2cols_effects/vague_2cols_effects.sqlite",
      "db_dump": "CREATE TABLE Appointments (\n    AppointmentID INTEGER PRIMARY KEY,\n    PatientID INTEGER REFERENCES Patients(PatientID),\n    DoctorID INTEGER REFERENCES Doctors(DoctorID),\n    AppointmentDateTime TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    ReasonForVisit TEXT,\n    IsCancelled BOOLEAN DEFAULT FALSE);\nCREATE TABLE Diagnoses (\n    DiagnosisID INTEGER PRIMARY KEY,\n    PatientID INTEGER REFERENCES Patients(PatientID),\n    DoctorID INTEGER REFERENCES Doctors(DoctorID),\n    Code TEXT,\n    Description TEXT);\nCREATE TABLE Doctors (\n    DoctorID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Specialty TEXT,\n    LicenseNumber VARCHAR(20),\n    OfficePhone TEXT UNIQUE);\nCREATE TABLE Medications (\n    DrugID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Classification TEXT,\n    Manufacturer TEXT,\n    Side_Effects TEXT,\n    Effectiveness TEXT);\nCREATE TABLE Patients (\n    PatientID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    DOB Date ,\n    PhoneNumber VARCHAR(15),\n    EmailAddress VARCHAR(255) UNIQUE);\nCREATE TABLE Prescriptions (\n    PrescriptionID INTEGER PRIMARY KEY,\n    PatientID INTEGER REFERENCES Patients(PatientID),\n    DoctorID INTEGER REFERENCES Doctors(DoctorID),\n    MedicationID INTEGER REFERENCES Medications(MedicationID),\n    StartDate Date ,\n    EndDate Date,\n    Quantity INTEGER );\n\nINSERT INTO \"Appointments\" (AppointmentID,PatientID,DoctorID,AppointmentDateTime,ReasonForVisit,IsCancelled) VALUES (1,1,1,'2024-02-19 12:14:44','Routine checkup',0);\nINSERT INTO \"Diagnoses\" (DiagnosisID,PatientID,DoctorID,Code,Description) VALUES (1,1,1,'A123','Hypertension');\nINSERT INTO \"Doctors\" (DoctorID,FirstName,LastName,Specialty,LicenseNumber,OfficePhone) VALUES (1,'Jane','Smith','Cardiology','LIC001234567','+0987654321');\nINSERT INTO \"Medications\" (DrugID,Name,Classification,Manufacturer,Side_Effects,Effectiveness) VALUES (1,'Aspirin','Analgesic','Bayer','Gastrointestinal upset','High');\nINSERT INTO \"Patients\" (PatientID,FirstName,LastName,DOB,PhoneNumber,EmailAddress) VALUES (1,'John','Doe','1987-06-15','+1234567890','john.doe@example.com');\nINSERT INTO \"Prescriptions\" (PrescriptionID,PatientID,DoctorID,MedicationID,StartDate,EndDate,Quantity) VALUES (1,1,1,1,'2022-01-01','2022-01-31',10);\n",
      "question": "List all analgesic drugs, their effectiveness, side effects and manufacturers.",
      "gold_queries": [
        "SELECT Name, Manufacturer, Side_Effects, Effectiveness FROM Medications WHERE Classification = 'Analgesic'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Identify and display the names, effectiveness ratings, potential side effects, and producing companies of all analgesic drugs in the database.",
          "sql_queries": [
            "SELECT Name, Effectiveness, Side_Effects, Manufacturer FROM Medications WHERE Classification = 'Analgesic'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Show a list of all medications classified as analgesics, along with details about their effectiveness, side effects, and manufacturers.",
          "sql_queries": [
            "SELECT Name, Effectiveness, Side_Effects, Manufacturer FROM Medications WHERE Classification = 'Analgesic'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Retrieve all analgesic drugs from the Medications table, including their effectiveness, side effects, and manufacturers.",
          "sql_queries": [
            "SELECT Name, Effectiveness, Side_Effects, Manufacturer FROM Medications WHERE Classification = 'Analgesic'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Select Name, Effectiveness, Side_Effects, Manufacturer FROM Medications WHERE Classification = 'Analgesic';",
          "sql_queries": [
            "SELECT Name, Effectiveness, Side_Effects, Manufacturer FROM Medications WHERE Classification = 'Analgesic'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 4,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 4
    },
    {
      "db_file": "data/vague/Healthcare/vague_2cols_effects/vague_2cols_effects.sqlite",
      "db_dump": "CREATE TABLE Appointments (\n    AppointmentID INTEGER PRIMARY KEY,\n    PatientID INTEGER REFERENCES Patients(PatientID),\n    DoctorID INTEGER REFERENCES Doctors(DoctorID),\n    AppointmentDateTime TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    ReasonForVisit TEXT,\n    IsCancelled BOOLEAN DEFAULT FALSE);\nCREATE TABLE Diagnoses (\n    DiagnosisID INTEGER PRIMARY KEY,\n    PatientID INTEGER REFERENCES Patients(PatientID),\n    DoctorID INTEGER REFERENCES Doctors(DoctorID),\n    Code TEXT,\n    Description TEXT);\nCREATE TABLE Doctors (\n    DoctorID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Specialty TEXT,\n    LicenseNumber VARCHAR(20),\n    OfficePhone TEXT UNIQUE);\nCREATE TABLE Medications (\n    DrugID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Classification TEXT,\n    Manufacturer TEXT,\n    Side_Effects TEXT,\n    Effectiveness TEXT);\nCREATE TABLE Patients (\n    PatientID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    DOB Date ,\n    PhoneNumber VARCHAR(15),\n    EmailAddress VARCHAR(255) UNIQUE);\nCREATE TABLE Prescriptions (\n    PrescriptionID INTEGER PRIMARY KEY,\n    PatientID INTEGER REFERENCES Patients(PatientID),\n    DoctorID INTEGER REFERENCES Doctors(DoctorID),\n    MedicationID INTEGER REFERENCES Medications(MedicationID),\n    StartDate Date ,\n    EndDate Date,\n    Quantity INTEGER );\n\nINSERT INTO \"Appointments\" (AppointmentID,PatientID,DoctorID,AppointmentDateTime,ReasonForVisit,IsCancelled) VALUES (1,1,1,'2024-02-19 12:14:44','Routine checkup',0);\nINSERT INTO \"Diagnoses\" (DiagnosisID,PatientID,DoctorID,Code,Description) VALUES (1,1,1,'A123','Hypertension');\nINSERT INTO \"Doctors\" (DoctorID,FirstName,LastName,Specialty,LicenseNumber,OfficePhone) VALUES (1,'Jane','Smith','Cardiology','LIC001234567','+0987654321');\nINSERT INTO \"Medications\" (DrugID,Name,Classification,Manufacturer,Side_Effects,Effectiveness) VALUES (1,'Aspirin','Analgesic','Bayer','Gastrointestinal upset','High');\nINSERT INTO \"Patients\" (PatientID,FirstName,LastName,DOB,PhoneNumber,EmailAddress) VALUES (1,'John','Doe','1987-06-15','+1234567890','john.doe@example.com');\nINSERT INTO \"Prescriptions\" (PrescriptionID,PatientID,DoctorID,MedicationID,StartDate,EndDate,Quantity) VALUES (1,1,1,1,'2022-01-01','2022-01-31',10);\n",
      "question": "Show all the drugs and their effects that are manufactured by 'Bayer'",
      "gold_queries": [
        "SELECT Name, Side_Effects FROM Medications WHERE Manufacturer = 'Bayer'",
        "SELECT Name, Effectiveness FROM Medications WHERE Manufacturer = 'Bayer'",
        "SELECT Name, Side_Effects, Effectiveness FROM Medications WHERE Manufacturer = 'Bayer'"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List the side effects of all medications produced by Bayer",
          "sql_queries": [
            "SELECT Side_Effects FROM Medications WHERE Manufacturer = 'Bayer'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve all drugs manufactured by Bayer and display their respective side effects.",
          "sql_queries": [
            "SELECT Name, Side_Effects FROM Medications WHERE Manufacturer = 'Bayer'"
          ],
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "SELECT Side_Effects FROM Medications WHERE Manufacturer = 'Bayer';",
          "sql_queries": [
            "SELECT Side_Effects FROM Medications WHERE Manufacturer = 'Bayer'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Display the side effects associated with Bayer-manufactured medications.",
          "sql_queries": [
            "SELECT Side_Effects FROM Medications WHERE Manufacturer = 'Bayer'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.3333333333333333,
        "precision": 0.5,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Healthcare/vague_2cols_effects/vague_2cols_effects.sqlite",
      "db_dump": "CREATE TABLE Appointments (\n    AppointmentID INTEGER PRIMARY KEY,\n    PatientID INTEGER REFERENCES Patients(PatientID),\n    DoctorID INTEGER REFERENCES Doctors(DoctorID),\n    AppointmentDateTime TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    ReasonForVisit TEXT,\n    IsCancelled BOOLEAN DEFAULT FALSE);\nCREATE TABLE Diagnoses (\n    DiagnosisID INTEGER PRIMARY KEY,\n    PatientID INTEGER REFERENCES Patients(PatientID),\n    DoctorID INTEGER REFERENCES Doctors(DoctorID),\n    Code TEXT,\n    Description TEXT);\nCREATE TABLE Doctors (\n    DoctorID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Specialty TEXT,\n    LicenseNumber VARCHAR(20),\n    OfficePhone TEXT UNIQUE);\nCREATE TABLE Medications (\n    DrugID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Classification TEXT,\n    Manufacturer TEXT,\n    Side_Effects TEXT,\n    Effectiveness TEXT);\nCREATE TABLE Patients (\n    PatientID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    DOB Date ,\n    PhoneNumber VARCHAR(15),\n    EmailAddress VARCHAR(255) UNIQUE);\nCREATE TABLE Prescriptions (\n    PrescriptionID INTEGER PRIMARY KEY,\n    PatientID INTEGER REFERENCES Patients(PatientID),\n    DoctorID INTEGER REFERENCES Doctors(DoctorID),\n    MedicationID INTEGER REFERENCES Medications(MedicationID),\n    StartDate Date ,\n    EndDate Date,\n    Quantity INTEGER );\n\nINSERT INTO \"Appointments\" (AppointmentID,PatientID,DoctorID,AppointmentDateTime,ReasonForVisit,IsCancelled) VALUES (1,1,1,'2024-02-19 12:14:44','Routine checkup',0);\nINSERT INTO \"Diagnoses\" (DiagnosisID,PatientID,DoctorID,Code,Description) VALUES (1,1,1,'A123','Hypertension');\nINSERT INTO \"Doctors\" (DoctorID,FirstName,LastName,Specialty,LicenseNumber,OfficePhone) VALUES (1,'Jane','Smith','Cardiology','LIC001234567','+0987654321');\nINSERT INTO \"Medications\" (DrugID,Name,Classification,Manufacturer,Side_Effects,Effectiveness) VALUES (1,'Aspirin','Analgesic','Bayer','Gastrointestinal upset','High');\nINSERT INTO \"Patients\" (PatientID,FirstName,LastName,DOB,PhoneNumber,EmailAddress) VALUES (1,'John','Doe','1987-06-15','+1234567890','john.doe@example.com');\nINSERT INTO \"Prescriptions\" (PrescriptionID,PatientID,DoctorID,MedicationID,StartDate,EndDate,Quantity) VALUES (1,1,1,1,'2022-01-01','2022-01-31',10);\n",
      "question": "Show all the drugs manufactured by 'Bayer' and their side effects.",
      "gold_queries": [
        "SELECT Name, Side_Effects FROM Medications WHERE Manufacturer = 'Bayer'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Retrieve all drugs from the Medications table where the Manufacturer is 'Bayer'. For each retrieved drug, display the corresponding Side_Effects value.",
          "sql_queries": [
            "SELECT Name, Side_Effects FROM Medications WHERE Manufacturer = 'Bayer'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "List all entries from the Medications table with 'Bayer' as the Manufacturer, including the DrugID, Name, Classification, Manufacturer, Side_Effects, and Effectiveness columns.",
          "sql_queries": [
            "SELECT DrugID, Name, Classification, Manufacturer, Side_Effects, Effectiveness FROM Medications WHERE Manufacturer = 'Bayer'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Find all drugs in the Medications table where the Manufacturer is 'Bayer' and return their respective descriptions of Side Effects.",
          "sql_queries": [
            "SELECT Side_Effects FROM Medications WHERE Manufacturer = 'Bayer'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Select and present the Side_Effects from the Medications table for all drugs manufactured by 'Bayer'.",
          "sql_queries": [
            "SELECT Side_Effects FROM Medications WHERE Manufacturer = 'Bayer'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 4,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Healthcare/vague_2cols_cost/vague_2cols_cost.sqlite",
      "db_dump": "CREATE TABLE Appointments (\n    AppointmentID INTEGER PRIMARY KEY,\n    PatientID INTEGER,\n    DoctorID INTEGER,\n    AppointmentDate TIMESTAMP,\n    ReasonForVisit TEXT,\n    FOREIGN KEY(PatientID) REFERENCES Patients(PatientID),\n    FOREIGN KEY(DoctorID) REFERENCES Doctors(DoctorID)\n);\nCREATE TABLE Doctors (\n    DoctorID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Specialization TEXT,\n    PhoneNumber CHAR(10),\n    EmailAddress TEXT\n);\nCREATE TABLE Patients (\n    PatientID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE,\n    InsuranceProvider TEXT,\n    Address TEXT\n);\nCREATE TABLE Prescriptions (\n    PrescriptionID INTEGER PRIMARY KEY,\n    AppointmentID INTEGER,\n    MedicationName TEXT,\n    Dosage NVARCHAR(20),\n    Instructions TEXT,\n    FOREIGN KEY(AppointmentID) REFERENCES Appointments(AppointmentID)\n);\nCREATE TABLE \"SurgicalProcedures\" (\n    ProcedureID INTEGER PRIMARY KEY,\n    Description TEXT,\n    \"InsuranceCovered\" NUMERIC,\n    OutOfPocketExpense NUMERIC,\n    TimeRequired TEXT\n);\n\nINSERT INTO \"Appointments\" (AppointmentID,PatientID,DoctorID,AppointmentDate,ReasonForVisit) VALUES (1,1,1,'2022-01-15 10:00:00','Routine Checkup'),(2,2,2,'2022-02-10 14:00:00','Headache');\nINSERT INTO \"Doctors\" (DoctorID,FirstName,LastName,Specialization,PhoneNumber,EmailAddress) VALUES (1,'Dr.','Jones','Cardiology','555-1234','drjones@example.com'),(2,'Dr.','Williams','Neurology','555-5678','dwilliams@example.com');\nINSERT INTO \"Patients\" (PatientID,FirstName,LastName,DateOfBirth,InsuranceProvider,Address) VALUES (1,'John','Doe','1985-07-30','Blue Cross Blue Shield','123 Main St'),(2,'Jane','Smith','1990-06-15','Aetna','456 Elm St');\nINSERT INTO \"Prescriptions\" (PrescriptionID,AppointmentID,MedicationName,Dosage,Instructions) VALUES (1,1,'Ibuprofen','2 tablets every 6 hours','Take with food'),(2,2,'Amoxicillin','500mg twice a day','Take with water on an empty stomach');\nINSERT INTO \"SurgicalProcedures\" (ProcedureID,Description,InsuranceCovered,OutOfPocketExpense,TimeRequired) VALUES (1,'Knee Arthroscopy',5000,1000,'2 hours'),(2,'Appendectomy',4000,2000,'1 hour');\n",
      "question": "In descending order of out of pocket expenses, list the surgical procedures.",
      "gold_queries": [
        "SELECT Description, OutOfPocketExpense\r\nFROM SurgicalProcedures\r\nORDER BY OutOfPocketExpense DESC;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Retrieve all procedures from the \"SurgicalProcedures\" table, sorted by \"OutOfPocketExpense\" in descending order.",
          "sql_queries": [
            "SELECT Description, InsuranceCovered, OutOfPocketExpense, TimeRequired FROM SurgicalProcedures ORDER BY OutOfPocketExpense DESC"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Identify surgical procedures with the maximum out-of-pocket costs and list them in descending order.",
          "sql_queries": [
            "SELECT Description\nFROM SurgicalProcedures\nORDER BY OutOfPocketExpense DESC"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Display the description, insurance coverage, out-of-pocket expense, and duration of each surgical procedure, sorted by out-of-pocket expense from highest to lowest.",
          "sql_queries": [
            "SELECT Description, InsuranceCovered, OutOfPocketExpense, TimeRequired FROM SurgicalProcedures ORDER BY OutOfPocketExpense DESC"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Healthcare/vague_2cols_cost/vague_2cols_cost.sqlite",
      "db_dump": "CREATE TABLE Appointments (\n    AppointmentID INTEGER PRIMARY KEY,\n    PatientID INTEGER,\n    DoctorID INTEGER,\n    AppointmentDate TIMESTAMP,\n    ReasonForVisit TEXT,\n    FOREIGN KEY(PatientID) REFERENCES Patients(PatientID),\n    FOREIGN KEY(DoctorID) REFERENCES Doctors(DoctorID)\n);\nCREATE TABLE Doctors (\n    DoctorID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Specialization TEXT,\n    PhoneNumber CHAR(10),\n    EmailAddress TEXT\n);\nCREATE TABLE Patients (\n    PatientID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE,\n    InsuranceProvider TEXT,\n    Address TEXT\n);\nCREATE TABLE Prescriptions (\n    PrescriptionID INTEGER PRIMARY KEY,\n    AppointmentID INTEGER,\n    MedicationName TEXT,\n    Dosage NVARCHAR(20),\n    Instructions TEXT,\n    FOREIGN KEY(AppointmentID) REFERENCES Appointments(AppointmentID)\n);\nCREATE TABLE \"SurgicalProcedures\" (\n    ProcedureID INTEGER PRIMARY KEY,\n    Description TEXT,\n    \"InsuranceCovered\" NUMERIC,\n    OutOfPocketExpense NUMERIC,\n    TimeRequired TEXT\n);\n\nINSERT INTO \"Appointments\" (AppointmentID,PatientID,DoctorID,AppointmentDate,ReasonForVisit) VALUES (1,1,1,'2022-01-15 10:00:00','Routine Checkup'),(2,2,2,'2022-02-10 14:00:00','Headache');\nINSERT INTO \"Doctors\" (DoctorID,FirstName,LastName,Specialization,PhoneNumber,EmailAddress) VALUES (1,'Dr.','Jones','Cardiology','555-1234','drjones@example.com'),(2,'Dr.','Williams','Neurology','555-5678','dwilliams@example.com');\nINSERT INTO \"Patients\" (PatientID,FirstName,LastName,DateOfBirth,InsuranceProvider,Address) VALUES (1,'John','Doe','1985-07-30','Blue Cross Blue Shield','123 Main St'),(2,'Jane','Smith','1990-06-15','Aetna','456 Elm St');\nINSERT INTO \"Prescriptions\" (PrescriptionID,AppointmentID,MedicationName,Dosage,Instructions) VALUES (1,1,'Ibuprofen','2 tablets every 6 hours','Take with food'),(2,2,'Amoxicillin','500mg twice a day','Take with water on an empty stomach');\nINSERT INTO \"SurgicalProcedures\" (ProcedureID,Description,InsuranceCovered,OutOfPocketExpense,TimeRequired) VALUES (1,'Knee Arthroscopy',5000,1000,'2 hours'),(2,'Appendectomy',4000,2000,'1 hour');\n",
      "question": "What are the surgical procedures listed in descending order of cost?",
      "gold_queries": [
        "SELECT Description, InsuranceCovered\r\nFROM SurgicalProcedures\r\nORDER BY InsuranceCovered DESC;",
        "SELECT Description, OutOfPocketExpense\r\nFROM SurgicalProcedures\r\nORDER BY OutOfPocketExpense DESC;",
        "SELECT Description, InsuranceCovered, OutOfPocketExpense\r\nFROM SurgicalProcedures\r\nORDER BY InsuranceCovered, OutOfPocketExpense DESC;"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Return a list of \"SurgicalProcedure\" descriptions sorted from highest to lowest cost for the procedures.",
          "sql_queries": [
            "SELECT Description FROM SurgicalProcedures ORDER BY InsuranceCovered DESC"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List \"SurgicalProcedure\" descriptions, ordered from highest to lowest total cost (InsuranceCovered + OutOfPocketExpense).",
          "sql_queries": [
            "SELECT Description FROM SurgicalProcedures ORDER BY (InsuranceCovered + OutOfPocketExpense) DESC"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve the \"SurgicalProcedures\" table data sorted by \"OutOfPocketExpense\" in descending order.",
          "sql_queries": [
            "SELECT ProcedureID, Description, InsuranceCovered, OutOfPocketExpense, TimeRequired \nFROM SurgicalProcedures \nORDER BY OutOfPocketExpense DESC"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Find and display the surgical procedures with the most expensive out-of-pocket expenses.",
          "sql_queries": [
            "SELECT Description FROM SurgicalProcedures ORDER BY OutOfPocketExpense DESC LIMIT 1"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Healthcare/vague_2cols_cost/vague_2cols_cost.sqlite",
      "db_dump": "CREATE TABLE Appointments (\n    AppointmentID INTEGER PRIMARY KEY,\n    PatientID INTEGER,\n    DoctorID INTEGER,\n    AppointmentDate TIMESTAMP,\n    ReasonForVisit TEXT,\n    FOREIGN KEY(PatientID) REFERENCES Patients(PatientID),\n    FOREIGN KEY(DoctorID) REFERENCES Doctors(DoctorID)\n);\nCREATE TABLE Doctors (\n    DoctorID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Specialization TEXT,\n    PhoneNumber CHAR(10),\n    EmailAddress TEXT\n);\nCREATE TABLE Patients (\n    PatientID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE,\n    InsuranceProvider TEXT,\n    Address TEXT\n);\nCREATE TABLE Prescriptions (\n    PrescriptionID INTEGER PRIMARY KEY,\n    AppointmentID INTEGER,\n    MedicationName TEXT,\n    Dosage NVARCHAR(20),\n    Instructions TEXT,\n    FOREIGN KEY(AppointmentID) REFERENCES Appointments(AppointmentID)\n);\nCREATE TABLE \"SurgicalProcedures\" (\n    ProcedureID INTEGER PRIMARY KEY,\n    Description TEXT,\n    \"InsuranceCovered\" NUMERIC,\n    OutOfPocketExpense NUMERIC,\n    TimeRequired TEXT\n);\n\nINSERT INTO \"Appointments\" (AppointmentID,PatientID,DoctorID,AppointmentDate,ReasonForVisit) VALUES (1,1,1,'2022-01-15 10:00:00','Routine Checkup'),(2,2,2,'2022-02-10 14:00:00','Headache');\nINSERT INTO \"Doctors\" (DoctorID,FirstName,LastName,Specialization,PhoneNumber,EmailAddress) VALUES (1,'Dr.','Jones','Cardiology','555-1234','drjones@example.com'),(2,'Dr.','Williams','Neurology','555-5678','dwilliams@example.com');\nINSERT INTO \"Patients\" (PatientID,FirstName,LastName,DateOfBirth,InsuranceProvider,Address) VALUES (1,'John','Doe','1985-07-30','Blue Cross Blue Shield','123 Main St'),(2,'Jane','Smith','1990-06-15','Aetna','456 Elm St');\nINSERT INTO \"Prescriptions\" (PrescriptionID,AppointmentID,MedicationName,Dosage,Instructions) VALUES (1,1,'Ibuprofen','2 tablets every 6 hours','Take with food'),(2,2,'Amoxicillin','500mg twice a day','Take with water on an empty stomach');\nINSERT INTO \"SurgicalProcedures\" (ProcedureID,Description,InsuranceCovered,OutOfPocketExpense,TimeRequired) VALUES (1,'Knee Arthroscopy',5000,1000,'2 hours'),(2,'Appendectomy',4000,2000,'1 hour');\n",
      "question": "In descending order of out of pocket expenses and insurance covered, list the surgical procedures.",
      "gold_queries": [
        "SELECT Description, InsuranceCovered, OutOfPocketExpense\r\nFROM SurgicalProcedures\r\nORDER BY InsuranceCovered, OutOfPocketExpense DESC;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Sort surgical procedures by `OutOfPocketExpense` in descending order, then by `InsuranceCovered` in descending order.",
          "sql_queries": [
            "SELECT Description, InsuranceCovered, OutOfPocketExpense, TimeRequired \nFROM SurgicalProcedures \nORDER BY OutOfPocketExpense DESC, InsuranceCovered DESC"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve surgical procedures by their `OutOfPocketExpense` in descending order, then order those with equal `OutOfPocketExpense` by `InsuranceCovered` in descending order.",
          "sql_queries": [
            "SELECT Description, InsuranceCovered, OutOfPocketExpense, TimeRequired\nFROM SurgicalProcedures\nORDER BY OutOfPocketExpense DESC, InsuranceCovered DESC"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Healthcare/vague_2cols_cost/vague_2cols_cost.sqlite",
      "db_dump": "CREATE TABLE Appointments (\n    AppointmentID INTEGER PRIMARY KEY,\n    PatientID INTEGER,\n    DoctorID INTEGER,\n    AppointmentDate TIMESTAMP,\n    ReasonForVisit TEXT,\n    FOREIGN KEY(PatientID) REFERENCES Patients(PatientID),\n    FOREIGN KEY(DoctorID) REFERENCES Doctors(DoctorID)\n);\nCREATE TABLE Doctors (\n    DoctorID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Specialization TEXT,\n    PhoneNumber CHAR(10),\n    EmailAddress TEXT\n);\nCREATE TABLE Patients (\n    PatientID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE,\n    InsuranceProvider TEXT,\n    Address TEXT\n);\nCREATE TABLE Prescriptions (\n    PrescriptionID INTEGER PRIMARY KEY,\n    AppointmentID INTEGER,\n    MedicationName TEXT,\n    Dosage NVARCHAR(20),\n    Instructions TEXT,\n    FOREIGN KEY(AppointmentID) REFERENCES Appointments(AppointmentID)\n);\nCREATE TABLE \"SurgicalProcedures\" (\n    ProcedureID INTEGER PRIMARY KEY,\n    Description TEXT,\n    \"InsuranceCovered\" NUMERIC,\n    OutOfPocketExpense NUMERIC,\n    TimeRequired TEXT\n);\n\nINSERT INTO \"Appointments\" (AppointmentID,PatientID,DoctorID,AppointmentDate,ReasonForVisit) VALUES (1,1,1,'2022-01-15 10:00:00','Routine Checkup'),(2,2,2,'2022-02-10 14:00:00','Headache');\nINSERT INTO \"Doctors\" (DoctorID,FirstName,LastName,Specialization,PhoneNumber,EmailAddress) VALUES (1,'Dr.','Jones','Cardiology','555-1234','drjones@example.com'),(2,'Dr.','Williams','Neurology','555-5678','dwilliams@example.com');\nINSERT INTO \"Patients\" (PatientID,FirstName,LastName,DateOfBirth,InsuranceProvider,Address) VALUES (1,'John','Doe','1985-07-30','Blue Cross Blue Shield','123 Main St'),(2,'Jane','Smith','1990-06-15','Aetna','456 Elm St');\nINSERT INTO \"Prescriptions\" (PrescriptionID,AppointmentID,MedicationName,Dosage,Instructions) VALUES (1,1,'Ibuprofen','2 tablets every 6 hours','Take with food'),(2,2,'Amoxicillin','500mg twice a day','Take with water on an empty stomach');\nINSERT INTO \"SurgicalProcedures\" (ProcedureID,Description,InsuranceCovered,OutOfPocketExpense,TimeRequired) VALUES (1,'Knee Arthroscopy',5000,1000,'2 hours'),(2,'Appendectomy',4000,2000,'1 hour');\n",
      "question": "In descending order of the cost of insurance covered, list the surgical procedures.",
      "gold_queries": [
        "SELECT Description, InsuranceCovered\r\nFROM SurgicalProcedures\r\nORDER BY InsuranceCovered DESC;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List the surgical procedures, ordered by their insurance coverage cost from highest to lowest.",
          "sql_queries": [
            "SELECT Description FROM SurgicalProcedures ORDER BY InsuranceCovered DESC"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Show surgical procedures sorted by \"InsuranceCovered\" descending.",
          "sql_queries": [
            "SELECT Description, InsuranceCovered, OutOfPocketExpense, TimeRequired FROM SurgicalProcedures ORDER BY InsuranceCovered DESC"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "What are the surgical procedures, ordered by the amount of insurance covered from most to least?",
          "sql_queries": [
            "SELECT Description FROM SurgicalProcedures ORDER BY InsuranceCovered DESC"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Select \"SurgicalProcedures\".ProcedureID, \"SurgicalProcedures\".Description, \"SurgicalProcedures\".\"InsuranceCovered\", \"SurgicalProcedures\".OutOfPocketExpense, \"SurgicalProcedures\".TimeRequired FROM \"SurgicalProcedures\"  ORDER BY \"SurgicalProcedures\".\"InsuranceCovered\" DESC;",
          "sql_queries": [
            "SELECT ProcedureID, Description, InsuranceCovered, OutOfPocketExpense, TimeRequired FROM SurgicalProcedures ORDER BY InsuranceCovered DESC"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve all details of surgical procedures arranged in descending order based on insurancecovered amount.",
          "sql_queries": [
            "SELECT * FROM SurgicalProcedures ORDER BY InsuranceCovered DESC"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Healthcare/vague_2cols_survival_statistics/vague_2cols_survival_statistics.sqlite",
      "db_dump": "CREATE TABLE Appointments (\n    appointmentId INTEGER PRIMARY KEY AUTOINCREMENT,\n    patientId INTEGER,\n    doctorId INTEGER,\n    appointmentDate TIMESTAMP,\n    reasonForAppointment TEXT,\n    outcome TEXT,\n    FOREIGN KEY (patientId) REFERENCES Patients(id),\n    FOREIGN KEY (doctorId) REFERENCES Doctors(doctorID));\nCREATE TABLE Diagnoses (\n    diagnosisID INTEGER PRIMARY KEY AUTOINCREMENT,\n    patientId INTEGER,\n    illnessId INTEGER,\n    diagnosedDate DATE,\n    FOREIGN KEY (patientId) REFERENCES Patients(id),\n    FOREIGN KEY (illnessId) REFERENCES Illnesses(illnessID));\nCREATE TABLE Doctors (\n    doctorID INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    specialty TEXT,\n    yearsExperience INT DEFAULT 0);\nCREATE TABLE Illnesses (\n    illnessID INTEGER PRIMARY KEY,\n    name TEXT,\n    description TEXT,\n    fiveYearSurvivalRate REAL,\n    tenYearSurvivalRate REAL,\n    treatmentOption TEXT);\nCREATE TABLE Patients (\n    id INTEGER PRIMARY KEY,\n    dateOfBirth DATE,\n    gender CHAR(1) ,\n    contactNumber VARCHAR(20),\n    address TEXT, fullname TEXT);\nCREATE TABLE Prescriptions (\n    prescriptionId INTEGER PRIMARY KEY AUTOINCREMENT,\n    diagnosisId INTEGER,\n    medication TEXT,\n    dosage TEXT,\n    frequency TEXT,\n    startDate DATE,\n    endDate DATE,\n    FOREIGN KEY (diagnosisId) REFERENCES Diagnoses(diagnosisID));\n\nINSERT INTO \"Appointments\" (appointmentId,patientId,doctorId,appointmentDate,reasonForAppointment,outcome) VALUES (1,1,1,'2022-02-01 10:00:00','Regular checkup','Healthy'),(2,2,2,'2021-11-15 14:00:00','Flu symptoms','Recovering');\nINSERT INTO \"Diagnoses\" (diagnosisID,patientId,illnessId,diagnosedDate) VALUES (1,1,1,'2022-01-15'),(2,2,2,'2021-09-01');\nINSERT INTO \"Doctors\" (doctorID,firstName,lastName,specialty,yearsExperience) VALUES (1,'Dr.','Jones','Cardiology',10),(2,'Dr.','Williams','Pediatrics',15);\nINSERT INTO \"Illnesses\" (illnessID,name,description,fiveYearSurvivalRate,tenYearSurvivalRate,treatmentOption) VALUES (1,'Breast Cancer','A disease where malignant cells form in the breast tissue.',85.0,75.0,'Chemotherapy and radiation therapy'),(2,'Diabetes','A chronic condition characterized by high blood sugar levels.',85.0,75.0,'Diet, exercise, and insulin therapy');\nINSERT INTO \"Patients\" (id,dateOfBirth,gender,contactNumber,address,fullname) VALUES (1,'1980-06-15','M','+1234567890','123 Main St','John Doe'),(2,'1990-07-25','F','+0987654321','456 Elm St','Jane Smith');\nINSERT INTO \"Prescriptions\" (prescriptionId,diagnosisId,medication,dosage,frequency,startDate,endDate) VALUES (1,1,'Tamoxifen','20mg','Once daily','2022-01-16','2022-12-31'),(2,2,'Metformin','500mg','Twice daily','2021-09-02','2022-08-31');\n",
      "question": "List each patients name and their 5 year survival rate.",
      "gold_queries": [
        "SELECT ILLNESSES.fiveYearSurvivalRate, PATIENTS.fullname\r\nFROM PATIENTS \r\nJOIN DIAGNOSES ON PATIENTS.id = DIAGNOSES.patientId \r\nJOIN ILLNESSES ON  DIAGNOSES.illnessId = ILLNESSES.illnessID"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Output a list of patient names and the 5-year survival rate associated with the illness they have been diagnosed with.",
          "sql_queries": [
            "SELECT P.fullname, I.fiveYearSurvivalRate\nFROM Patients P\nJOIN Diagnoses D ON P.id = D.patientId\nJOIN Illnesses I ON D.illnessId = I.illnessID"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "List all patient names and their corresponding 5-year survival rates.",
          "sql_queries": [
            "SELECT P.fullname, I.fiveYearSurvivalRate \nFROM Patients P \nJOIN Diagnoses D ON P.id = D.patientId \nJOIN Illnesses I ON D.illnessId = I.illnessID"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "For each patient, retrieve the name and the 5-year survival rate of their diagnosed illness.",
          "sql_queries": [
            "SELECT P.fullname, I.fiveYearSurvivalRate\nFROM Patients P\nJOIN Diagnoses D ON P.id = D.patientId\nJOIN Illnesses I ON D.illnessId = I.illnessID"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 3,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/vague/Healthcare/vague_2cols_survival_statistics/vague_2cols_survival_statistics.sqlite",
      "db_dump": "CREATE TABLE Appointments (\n    appointmentId INTEGER PRIMARY KEY AUTOINCREMENT,\n    patientId INTEGER,\n    doctorId INTEGER,\n    appointmentDate TIMESTAMP,\n    reasonForAppointment TEXT,\n    outcome TEXT,\n    FOREIGN KEY (patientId) REFERENCES Patients(id),\n    FOREIGN KEY (doctorId) REFERENCES Doctors(doctorID));\nCREATE TABLE Diagnoses (\n    diagnosisID INTEGER PRIMARY KEY AUTOINCREMENT,\n    patientId INTEGER,\n    illnessId INTEGER,\n    diagnosedDate DATE,\n    FOREIGN KEY (patientId) REFERENCES Patients(id),\n    FOREIGN KEY (illnessId) REFERENCES Illnesses(illnessID));\nCREATE TABLE Doctors (\n    doctorID INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    specialty TEXT,\n    yearsExperience INT DEFAULT 0);\nCREATE TABLE Illnesses (\n    illnessID INTEGER PRIMARY KEY,\n    name TEXT,\n    description TEXT,\n    fiveYearSurvivalRate REAL,\n    tenYearSurvivalRate REAL,\n    treatmentOption TEXT);\nCREATE TABLE Patients (\n    id INTEGER PRIMARY KEY,\n    dateOfBirth DATE,\n    gender CHAR(1) ,\n    contactNumber VARCHAR(20),\n    address TEXT, fullname TEXT);\nCREATE TABLE Prescriptions (\n    prescriptionId INTEGER PRIMARY KEY AUTOINCREMENT,\n    diagnosisId INTEGER,\n    medication TEXT,\n    dosage TEXT,\n    frequency TEXT,\n    startDate DATE,\n    endDate DATE,\n    FOREIGN KEY (diagnosisId) REFERENCES Diagnoses(diagnosisID));\n\nINSERT INTO \"Appointments\" (appointmentId,patientId,doctorId,appointmentDate,reasonForAppointment,outcome) VALUES (1,1,1,'2022-02-01 10:00:00','Regular checkup','Healthy'),(2,2,2,'2021-11-15 14:00:00','Flu symptoms','Recovering');\nINSERT INTO \"Diagnoses\" (diagnosisID,patientId,illnessId,diagnosedDate) VALUES (1,1,1,'2022-01-15'),(2,2,2,'2021-09-01');\nINSERT INTO \"Doctors\" (doctorID,firstName,lastName,specialty,yearsExperience) VALUES (1,'Dr.','Jones','Cardiology',10),(2,'Dr.','Williams','Pediatrics',15);\nINSERT INTO \"Illnesses\" (illnessID,name,description,fiveYearSurvivalRate,tenYearSurvivalRate,treatmentOption) VALUES (1,'Breast Cancer','A disease where malignant cells form in the breast tissue.',85.0,75.0,'Chemotherapy and radiation therapy'),(2,'Diabetes','A chronic condition characterized by high blood sugar levels.',85.0,75.0,'Diet, exercise, and insulin therapy');\nINSERT INTO \"Patients\" (id,dateOfBirth,gender,contactNumber,address,fullname) VALUES (1,'1980-06-15','M','+1234567890','123 Main St','John Doe'),(2,'1990-07-25','F','+0987654321','456 Elm St','Jane Smith');\nINSERT INTO \"Prescriptions\" (prescriptionId,diagnosisId,medication,dosage,frequency,startDate,endDate) VALUES (1,1,'Tamoxifen','20mg','Once daily','2022-01-16','2022-12-31'),(2,2,'Metformin','500mg','Twice daily','2021-09-02','2022-08-31');\n",
      "question": "What is the 10 year survival rate and the outcomes and names of patients?",
      "gold_queries": [
        "SELECT ILLNESSES.tenYearSurvivalRate, APPOINTMENTS.Outcome, PATIENTS.fullname\r\nFROM APPOINTMENTS\r\nJOIN PATIENTS ON APPOINTMENTS.patientId = PATIENTS.id\r\nJOIN DIAGNOSES ON PATIENTS.id = DIAGNOSES.patientId \r\nJOIN ILLNESSES ON  DIAGNOSES.illnessId = ILLNESSES.illnessID"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What are the outcomes and names of patients with a 10-year survival rate > 90%?",
          "sql_queries": [
            "SELECT A.outcome, P.fullname\nFROM Appointments A\nJOIN Diagnoses D ON A.patientId = D.patientId\nJOIN Illnesses I ON D.illnessId = I.illnessID\nJOIN Patients P ON A.patientId = P.id\nWHERE I.tenYearSurvivalRate > 90"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Provide the 10-year survival rate, outcomes, and names of all patients.",
          "sql_queries": [
            "SELECT P.fullname, D.outcome, I.tenYearSurvivalRate \nFROM Patients P \nJOIN Diagnoses D ON P.id = D.patientId \nJOIN Illnesses I ON D.illnessId = I.illnessID"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT P.fullname, D.outcome, I.tenYearSurvivalRate \nFROM Patients P \nJOIN Diagnoses D ON P.id = D.patientId \nJOIN Illnesses I ON D.illnessId = I.illnessID",
                "original_exception": "no such column: D.outcome"
              }
            ],
            "all_found": false
          }
        },
        {
          "interpretation": "What is the 10-year survival rate for patients?",
          "sql_queries": [
            "SELECT name, tenYearSurvivalRate FROM Illnesses"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [
          {
            "query": "SELECT P.fullname, D.outcome, I.tenYearSurvivalRate \nFROM Patients P \nJOIN Diagnoses D ON P.id = D.patientId \nJOIN Illnesses I ON D.illnessId = I.illnessID",
            "original_exception": "no such column: D.outcome"
          }
        ],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Healthcare/vague_2cols_survival_statistics/vague_2cols_survival_statistics.sqlite",
      "db_dump": "CREATE TABLE Appointments (\n    appointmentId INTEGER PRIMARY KEY AUTOINCREMENT,\n    patientId INTEGER,\n    doctorId INTEGER,\n    appointmentDate TIMESTAMP,\n    reasonForAppointment TEXT,\n    outcome TEXT,\n    FOREIGN KEY (patientId) REFERENCES Patients(id),\n    FOREIGN KEY (doctorId) REFERENCES Doctors(doctorID));\nCREATE TABLE Diagnoses (\n    diagnosisID INTEGER PRIMARY KEY AUTOINCREMENT,\n    patientId INTEGER,\n    illnessId INTEGER,\n    diagnosedDate DATE,\n    FOREIGN KEY (patientId) REFERENCES Patients(id),\n    FOREIGN KEY (illnessId) REFERENCES Illnesses(illnessID));\nCREATE TABLE Doctors (\n    doctorID INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    specialty TEXT,\n    yearsExperience INT DEFAULT 0);\nCREATE TABLE Illnesses (\n    illnessID INTEGER PRIMARY KEY,\n    name TEXT,\n    description TEXT,\n    fiveYearSurvivalRate REAL,\n    tenYearSurvivalRate REAL,\n    treatmentOption TEXT);\nCREATE TABLE Patients (\n    id INTEGER PRIMARY KEY,\n    dateOfBirth DATE,\n    gender CHAR(1) ,\n    contactNumber VARCHAR(20),\n    address TEXT, fullname TEXT);\nCREATE TABLE Prescriptions (\n    prescriptionId INTEGER PRIMARY KEY AUTOINCREMENT,\n    diagnosisId INTEGER,\n    medication TEXT,\n    dosage TEXT,\n    frequency TEXT,\n    startDate DATE,\n    endDate DATE,\n    FOREIGN KEY (diagnosisId) REFERENCES Diagnoses(diagnosisID));\n\nINSERT INTO \"Appointments\" (appointmentId,patientId,doctorId,appointmentDate,reasonForAppointment,outcome) VALUES (1,1,1,'2022-02-01 10:00:00','Regular checkup','Healthy'),(2,2,2,'2021-11-15 14:00:00','Flu symptoms','Recovering');\nINSERT INTO \"Diagnoses\" (diagnosisID,patientId,illnessId,diagnosedDate) VALUES (1,1,1,'2022-01-15'),(2,2,2,'2021-09-01');\nINSERT INTO \"Doctors\" (doctorID,firstName,lastName,specialty,yearsExperience) VALUES (1,'Dr.','Jones','Cardiology',10),(2,'Dr.','Williams','Pediatrics',15);\nINSERT INTO \"Illnesses\" (illnessID,name,description,fiveYearSurvivalRate,tenYearSurvivalRate,treatmentOption) VALUES (1,'Breast Cancer','A disease where malignant cells form in the breast tissue.',85.0,75.0,'Chemotherapy and radiation therapy'),(2,'Diabetes','A chronic condition characterized by high blood sugar levels.',85.0,75.0,'Diet, exercise, and insulin therapy');\nINSERT INTO \"Patients\" (id,dateOfBirth,gender,contactNumber,address,fullname) VALUES (1,'1980-06-15','M','+1234567890','123 Main St','John Doe'),(2,'1990-07-25','F','+0987654321','456 Elm St','Jane Smith');\nINSERT INTO \"Prescriptions\" (prescriptionId,diagnosisId,medication,dosage,frequency,startDate,endDate) VALUES (1,1,'Tamoxifen','20mg','Once daily','2022-01-16','2022-12-31'),(2,2,'Metformin','500mg','Twice daily','2021-09-02','2022-08-31');\n",
      "question": "What is the 5 year survival rate and the outcomes and names of patients?",
      "gold_queries": [
        "SELECT ILLNESSES.fiveYearSurvivalRate, APPOINTMENTS.Outcome, PATIENTS.fullname\r\nFROM APPOINTMENTS\r\nJOIN PATIENTS ON APPOINTMENTS.patientId = PATIENTS.id\r\nJOIN DIAGNOSES ON PATIENTS.id = DIAGNOSES.patientId \r\nJOIN ILLNESSES ON  DIAGNOSES.illnessId = ILLNESSES.illnessID"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List the five-year survival rate, outcomes, and names of patients with diagnoses.",
          "sql_queries": [
            "SELECT I.fiveYearSurvivalRate, A.outcome, P.fullname\nFROM Diagnoses D\nJOIN Illnesses I ON D.illnessId = I.illnessID\nJOIN Appointments A ON D.patientId = A.patientId\nJOIN Patients P ON D.patientId = P.id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Fetch the outcomes and names of all patients who have appointments.",
          "sql_queries": [
            "SELECT A.outcome, P.fullname FROM Appointments A JOIN Patients P ON A.patientId = P.id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Find the five-year survival rate for each illness and the outcomes and names of all patients who have been diagnosed with those illnesses.",
          "sql_queries": [
            "SELECT I.name, I.fiveYearSurvivalRate, P.fullname, A.outcome \nFROM Illnesses I \nJOIN Diagnoses D ON I.illnessID = D.illnessId \nJOIN Patients P ON D.patientId = P.id \nJOIN Appointments A ON P.id = A.patientId"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve the five-year survival rate for all illnesses.",
          "sql_queries": [
            "SELECT fiveYearSurvivalRate FROM Illnesses"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Healthcare/vague_2cols_survival_statistics/vague_2cols_survival_statistics.sqlite",
      "db_dump": "CREATE TABLE Appointments (\n    appointmentId INTEGER PRIMARY KEY AUTOINCREMENT,\n    patientId INTEGER,\n    doctorId INTEGER,\n    appointmentDate TIMESTAMP,\n    reasonForAppointment TEXT,\n    outcome TEXT,\n    FOREIGN KEY (patientId) REFERENCES Patients(id),\n    FOREIGN KEY (doctorId) REFERENCES Doctors(doctorID));\nCREATE TABLE Diagnoses (\n    diagnosisID INTEGER PRIMARY KEY AUTOINCREMENT,\n    patientId INTEGER,\n    illnessId INTEGER,\n    diagnosedDate DATE,\n    FOREIGN KEY (patientId) REFERENCES Patients(id),\n    FOREIGN KEY (illnessId) REFERENCES Illnesses(illnessID));\nCREATE TABLE Doctors (\n    doctorID INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    specialty TEXT,\n    yearsExperience INT DEFAULT 0);\nCREATE TABLE Illnesses (\n    illnessID INTEGER PRIMARY KEY,\n    name TEXT,\n    description TEXT,\n    fiveYearSurvivalRate REAL,\n    tenYearSurvivalRate REAL,\n    treatmentOption TEXT);\nCREATE TABLE Patients (\n    id INTEGER PRIMARY KEY,\n    dateOfBirth DATE,\n    gender CHAR(1) ,\n    contactNumber VARCHAR(20),\n    address TEXT, fullname TEXT);\nCREATE TABLE Prescriptions (\n    prescriptionId INTEGER PRIMARY KEY AUTOINCREMENT,\n    diagnosisId INTEGER,\n    medication TEXT,\n    dosage TEXT,\n    frequency TEXT,\n    startDate DATE,\n    endDate DATE,\n    FOREIGN KEY (diagnosisId) REFERENCES Diagnoses(diagnosisID));\n\nINSERT INTO \"Appointments\" (appointmentId,patientId,doctorId,appointmentDate,reasonForAppointment,outcome) VALUES (1,1,1,'2022-02-01 10:00:00','Regular checkup','Healthy'),(2,2,2,'2021-11-15 14:00:00','Flu symptoms','Recovering');\nINSERT INTO \"Diagnoses\" (diagnosisID,patientId,illnessId,diagnosedDate) VALUES (1,1,1,'2022-01-15'),(2,2,2,'2021-09-01');\nINSERT INTO \"Doctors\" (doctorID,firstName,lastName,specialty,yearsExperience) VALUES (1,'Dr.','Jones','Cardiology',10),(2,'Dr.','Williams','Pediatrics',15);\nINSERT INTO \"Illnesses\" (illnessID,name,description,fiveYearSurvivalRate,tenYearSurvivalRate,treatmentOption) VALUES (1,'Breast Cancer','A disease where malignant cells form in the breast tissue.',85.0,75.0,'Chemotherapy and radiation therapy'),(2,'Diabetes','A chronic condition characterized by high blood sugar levels.',85.0,75.0,'Diet, exercise, and insulin therapy');\nINSERT INTO \"Patients\" (id,dateOfBirth,gender,contactNumber,address,fullname) VALUES (1,'1980-06-15','M','+1234567890','123 Main St','John Doe'),(2,'1990-07-25','F','+0987654321','456 Elm St','Jane Smith');\nINSERT INTO \"Prescriptions\" (prescriptionId,diagnosisId,medication,dosage,frequency,startDate,endDate) VALUES (1,1,'Tamoxifen','20mg','Once daily','2022-01-16','2022-12-31'),(2,2,'Metformin','500mg','Twice daily','2021-09-02','2022-08-31');\n",
      "question": "What are the survival statistics and outcomes of these patients and what are their names?",
      "gold_queries": [
        "SELECT ILLNESSES.fiveYearSurvivalRate, APPOINTMENTS.Outcome, PATIENTS.fullname\r\nFROM APPOINTMENTS\r\nJOIN PATIENTS ON APPOINTMENTS.patientId = PATIENTS.id\r\nJOIN DIAGNOSES ON PATIENTS.id = DIAGNOSES.patientId \r\nJOIN ILLNESSES ON  DIAGNOSES.illnessId = ILLNESSES.illnessID",
        "SELECT ILLNESSES.tenYearSurvivalRate, APPOINTMENTS.Outcome, PATIENTS.fullname\r\nFROM APPOINTMENTS\r\nJOIN PATIENTS ON APPOINTMENTS.patientId = PATIENTS.id\r\nJOIN DIAGNOSES ON PATIENTS.id = DIAGNOSES.patientId \r\nJOIN ILLNESSES ON  DIAGNOSES.illnessId = ILLNESSES.illnessID",
        "SELECT ILLNESSES.fiveYearSurvivalRate, tenYearSurvivalRate, APPOINTMENTS.Outcome, PATIENTS.fullname\r\nFROM APPOINTMENTS\r\nJOIN PATIENTS ON APPOINTMENTS.patientId = PATIENTS.id\r\nJOIN DIAGNOSES ON PATIENTS.id = DIAGNOSES.patientId \r\nJOIN ILLNESSES ON  DIAGNOSES.illnessId = ILLNESSES.illnessID"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List the complete medical history of each patient, including their diagnosis, outcomes, survival statistics, and name.",
          "sql_queries": [
            "SELECT \n    P.fullname,\n    I.name AS illnessName,\n    I.description,\n    I.fiveYearSurvivalRate,\n    I.tenYearSurvivalRate,\n    D.diagnosedDate,\n    A.outcome\nFROM \n    Patients P\nJOIN \n    Diagnoses D ON P.id = D.patientId\nJOIN \n    Illnesses I ON D.illnessId = I.illnessID\nJOIN \n    Appointments A ON P.id = A.patientId\nORDER BY \n    P.id, D.diagnosedDate"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "What are the outcomes of the appointments for the patients in the database, and what are their names?",
          "sql_queries": [
            "SELECT T1.outcome, T2.fullname FROM Appointments AS T1 JOIN Patients AS T2 ON T1.patientId = T2.id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "What are the five-year and ten-year survival rates for the patients in the database, along with their names?",
          "sql_queries": [
            "SELECT I.name, I.fiveYearSurvivalRate, I.tenYearSurvivalRate\nFROM Illnesses I\nJOIN Diagnoses D ON I.illnessID = D.illnessID"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "What is the overall survival rate of patients with a specific illness based on the database, and list their names?",
          "sql_queries": [
            "SELECT I.name, AVG(I.fiveYearSurvivalRate + I.tenYearSurvivalRate) / 2 AS overallSurvivalRate\nFROM Diagnoses D\nJOIN Illnesses I ON D.illnessId = I.illnessID\nGROUP BY I.name"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "For each patient, retrieve their name, diagnosis information, and survival statistics.",
          "sql_queries": [
            "SELECT \n    Patients.fullname, \n    Illnesses.name, \n    Illnesses.fiveYearSurvivalRate, \n    Illnesses.tenYearSurvivalRate\nFROM \n    Patients\nJOIN \n    Diagnoses ON Patients.id = Diagnoses.patientId\nJOIN \n    Illnesses ON Diagnoses.illnessId = Illnesses.illnessID"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Provide a list of patients' names and their respective survival statistics based on their diagnoses.",
          "sql_queries": [
            "SELECT P.fullname, I.fiveYearSurvivalRate, I.tenYearSurvivalRate\nFROM Patients P\nJOIN Diagnoses D ON P.id = D.patientId\nJOIN Illnesses I ON D.illnessId = I.illnessID"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Healthcare/vague_2cols_survival_statistics/vague_2cols_survival_statistics.sqlite",
      "db_dump": "CREATE TABLE Appointments (\n    appointmentId INTEGER PRIMARY KEY AUTOINCREMENT,\n    patientId INTEGER,\n    doctorId INTEGER,\n    appointmentDate TIMESTAMP,\n    reasonForAppointment TEXT,\n    outcome TEXT,\n    FOREIGN KEY (patientId) REFERENCES Patients(id),\n    FOREIGN KEY (doctorId) REFERENCES Doctors(doctorID));\nCREATE TABLE Diagnoses (\n    diagnosisID INTEGER PRIMARY KEY AUTOINCREMENT,\n    patientId INTEGER,\n    illnessId INTEGER,\n    diagnosedDate DATE,\n    FOREIGN KEY (patientId) REFERENCES Patients(id),\n    FOREIGN KEY (illnessId) REFERENCES Illnesses(illnessID));\nCREATE TABLE Doctors (\n    doctorID INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    specialty TEXT,\n    yearsExperience INT DEFAULT 0);\nCREATE TABLE Illnesses (\n    illnessID INTEGER PRIMARY KEY,\n    name TEXT,\n    description TEXT,\n    fiveYearSurvivalRate REAL,\n    tenYearSurvivalRate REAL,\n    treatmentOption TEXT);\nCREATE TABLE Patients (\n    id INTEGER PRIMARY KEY,\n    dateOfBirth DATE,\n    gender CHAR(1) ,\n    contactNumber VARCHAR(20),\n    address TEXT, fullname TEXT);\nCREATE TABLE Prescriptions (\n    prescriptionId INTEGER PRIMARY KEY AUTOINCREMENT,\n    diagnosisId INTEGER,\n    medication TEXT,\n    dosage TEXT,\n    frequency TEXT,\n    startDate DATE,\n    endDate DATE,\n    FOREIGN KEY (diagnosisId) REFERENCES Diagnoses(diagnosisID));\n\nINSERT INTO \"Appointments\" (appointmentId,patientId,doctorId,appointmentDate,reasonForAppointment,outcome) VALUES (1,1,1,'2022-02-01 10:00:00','Regular checkup','Healthy'),(2,2,2,'2021-11-15 14:00:00','Flu symptoms','Recovering');\nINSERT INTO \"Diagnoses\" (diagnosisID,patientId,illnessId,diagnosedDate) VALUES (1,1,1,'2022-01-15'),(2,2,2,'2021-09-01');\nINSERT INTO \"Doctors\" (doctorID,firstName,lastName,specialty,yearsExperience) VALUES (1,'Dr.','Jones','Cardiology',10),(2,'Dr.','Williams','Pediatrics',15);\nINSERT INTO \"Illnesses\" (illnessID,name,description,fiveYearSurvivalRate,tenYearSurvivalRate,treatmentOption) VALUES (1,'Breast Cancer','A disease where malignant cells form in the breast tissue.',85.0,75.0,'Chemotherapy and radiation therapy'),(2,'Diabetes','A chronic condition characterized by high blood sugar levels.',85.0,75.0,'Diet, exercise, and insulin therapy');\nINSERT INTO \"Patients\" (id,dateOfBirth,gender,contactNumber,address,fullname) VALUES (1,'1980-06-15','M','+1234567890','123 Main St','John Doe'),(2,'1990-07-25','F','+0987654321','456 Elm St','Jane Smith');\nINSERT INTO \"Prescriptions\" (prescriptionId,diagnosisId,medication,dosage,frequency,startDate,endDate) VALUES (1,1,'Tamoxifen','20mg','Once daily','2022-01-16','2022-12-31'),(2,2,'Metformin','500mg','Twice daily','2021-09-02','2022-08-31');\n",
      "question": "List each patients name along with their 5 and 10 year survival rate.",
      "gold_queries": [
        "SELECT ILLNESSES.fiveYearSurvivalRate, tenYearSurvivalRate, PATIENTS.fullname\r\nFROM PATIENTS \r\nJOIN DIAGNOSES ON PATIENTS.id = DIAGNOSES.patientId \r\nJOIN ILLNESSES ON  DIAGNOSES.illnessId = ILLNESSES.illnessID"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List the names of all patients along with their respective 5-year and 10-year survival rates.",
          "sql_queries": [
            "SELECT p.fullname, i.fiveYearSurvivalRate, i.tenYearSurvivalRate\nFROM Patients p\nJOIN Diagnoses d ON p.id = d.patientId\nJOIN Illnesses i ON d.illnessId = i.illnessID"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Retrieve the name of each patient and display their associated 5-year and 10-year survival rate corresponding to a specific illness they have.",
          "sql_queries": [
            "SELECT p.fullname, i.fiveYearSurvivalRate, i.tenYearSurvivalRate\nFROM Patients p\nJOIN Diagnoses d ON p.id = d.patientId\nJOIN Illnesses i ON d.illnessId = i.illnessID"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 2,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Healthcare/vague_2cols_survival_statistics/vague_2cols_survival_statistics.sqlite",
      "db_dump": "CREATE TABLE Appointments (\n    appointmentId INTEGER PRIMARY KEY AUTOINCREMENT,\n    patientId INTEGER,\n    doctorId INTEGER,\n    appointmentDate TIMESTAMP,\n    reasonForAppointment TEXT,\n    outcome TEXT,\n    FOREIGN KEY (patientId) REFERENCES Patients(id),\n    FOREIGN KEY (doctorId) REFERENCES Doctors(doctorID));\nCREATE TABLE Diagnoses (\n    diagnosisID INTEGER PRIMARY KEY AUTOINCREMENT,\n    patientId INTEGER,\n    illnessId INTEGER,\n    diagnosedDate DATE,\n    FOREIGN KEY (patientId) REFERENCES Patients(id),\n    FOREIGN KEY (illnessId) REFERENCES Illnesses(illnessID));\nCREATE TABLE Doctors (\n    doctorID INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    specialty TEXT,\n    yearsExperience INT DEFAULT 0);\nCREATE TABLE Illnesses (\n    illnessID INTEGER PRIMARY KEY,\n    name TEXT,\n    description TEXT,\n    fiveYearSurvivalRate REAL,\n    tenYearSurvivalRate REAL,\n    treatmentOption TEXT);\nCREATE TABLE Patients (\n    id INTEGER PRIMARY KEY,\n    dateOfBirth DATE,\n    gender CHAR(1) ,\n    contactNumber VARCHAR(20),\n    address TEXT, fullname TEXT);\nCREATE TABLE Prescriptions (\n    prescriptionId INTEGER PRIMARY KEY AUTOINCREMENT,\n    diagnosisId INTEGER,\n    medication TEXT,\n    dosage TEXT,\n    frequency TEXT,\n    startDate DATE,\n    endDate DATE,\n    FOREIGN KEY (diagnosisId) REFERENCES Diagnoses(diagnosisID));\n\nINSERT INTO \"Appointments\" (appointmentId,patientId,doctorId,appointmentDate,reasonForAppointment,outcome) VALUES (1,1,1,'2022-02-01 10:00:00','Regular checkup','Healthy'),(2,2,2,'2021-11-15 14:00:00','Flu symptoms','Recovering');\nINSERT INTO \"Diagnoses\" (diagnosisID,patientId,illnessId,diagnosedDate) VALUES (1,1,1,'2022-01-15'),(2,2,2,'2021-09-01');\nINSERT INTO \"Doctors\" (doctorID,firstName,lastName,specialty,yearsExperience) VALUES (1,'Dr.','Jones','Cardiology',10),(2,'Dr.','Williams','Pediatrics',15);\nINSERT INTO \"Illnesses\" (illnessID,name,description,fiveYearSurvivalRate,tenYearSurvivalRate,treatmentOption) VALUES (1,'Breast Cancer','A disease where malignant cells form in the breast tissue.',85.0,75.0,'Chemotherapy and radiation therapy'),(2,'Diabetes','A chronic condition characterized by high blood sugar levels.',85.0,75.0,'Diet, exercise, and insulin therapy');\nINSERT INTO \"Patients\" (id,dateOfBirth,gender,contactNumber,address,fullname) VALUES (1,'1980-06-15','M','+1234567890','123 Main St','John Doe'),(2,'1990-07-25','F','+0987654321','456 Elm St','Jane Smith');\nINSERT INTO \"Prescriptions\" (prescriptionId,diagnosisId,medication,dosage,frequency,startDate,endDate) VALUES (1,1,'Tamoxifen','20mg','Once daily','2022-01-16','2022-12-31'),(2,2,'Metformin','500mg','Twice daily','2021-09-02','2022-08-31');\n",
      "question": "List each patients name and their 10 year survival rate.",
      "gold_queries": [
        "SELECT ILLNESSES.tenYearSurvivalRate, PATIENTS.fullname\r\nFROM PATIENTS \r\nJOIN DIAGNOSES ON PATIENTS.id = DIAGNOSES.patientId \r\nJOIN ILLNESSES ON  DIAGNOSES.illnessId = ILLNESSES.illnessID"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Retrieve the full names of patients and their associated ten-year survival rates from the Illnesses table.",
          "sql_queries": [
            "SELECT Patients.fullname, Illnesses.tenYearSurvivalRate \nFROM Patients \nJOIN Diagnoses ON Patients.id = Diagnoses.patientId \nJOIN Illnesses ON Diagnoses.illnessId = Illnesses.illnessID"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Display a list of each patient's name along with the 10-year survival rate of the illness they have.",
          "sql_queries": [
            "SELECT p.fullname, i.tenYearSurvivalRate \nFROM Patients p \nJOIN Diagnoses d ON p.id = d.patientId \nJOIN Illnesses i ON d.illnessId = i.illnessID"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "List the names of all patients and their corresponding 10-year survival rates.",
          "sql_queries": [
            "SELECT P.fullname, I.tenYearSurvivalRate \nFROM Patients P \nJOIN Diagnoses D ON P.id = D.patientId \nJOIN Illnesses I ON D.illnessId = I.illnessID"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Show the names of all patients and the ten-year survival rate for each illness listed in the Illnesses table.",
          "sql_queries": [
            "SELECT P.fullname, I.tenYearSurvivalRate\nFROM Patients P\nJOIN Diagnoses D ON P.id = D.patientId\nJOIN Illnesses I ON D.illnessId = I.illnessID"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 4
    },
    {
      "db_file": "data/vague/Healthcare/vague_2cols_survival_statistics/vague_2cols_survival_statistics.sqlite",
      "db_dump": "CREATE TABLE Appointments (\n    appointmentId INTEGER PRIMARY KEY AUTOINCREMENT,\n    patientId INTEGER,\n    doctorId INTEGER,\n    appointmentDate TIMESTAMP,\n    reasonForAppointment TEXT,\n    outcome TEXT,\n    FOREIGN KEY (patientId) REFERENCES Patients(id),\n    FOREIGN KEY (doctorId) REFERENCES Doctors(doctorID));\nCREATE TABLE Diagnoses (\n    diagnosisID INTEGER PRIMARY KEY AUTOINCREMENT,\n    patientId INTEGER,\n    illnessId INTEGER,\n    diagnosedDate DATE,\n    FOREIGN KEY (patientId) REFERENCES Patients(id),\n    FOREIGN KEY (illnessId) REFERENCES Illnesses(illnessID));\nCREATE TABLE Doctors (\n    doctorID INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    specialty TEXT,\n    yearsExperience INT DEFAULT 0);\nCREATE TABLE Illnesses (\n    illnessID INTEGER PRIMARY KEY,\n    name TEXT,\n    description TEXT,\n    fiveYearSurvivalRate REAL,\n    tenYearSurvivalRate REAL,\n    treatmentOption TEXT);\nCREATE TABLE Patients (\n    id INTEGER PRIMARY KEY,\n    dateOfBirth DATE,\n    gender CHAR(1) ,\n    contactNumber VARCHAR(20),\n    address TEXT, fullname TEXT);\nCREATE TABLE Prescriptions (\n    prescriptionId INTEGER PRIMARY KEY AUTOINCREMENT,\n    diagnosisId INTEGER,\n    medication TEXT,\n    dosage TEXT,\n    frequency TEXT,\n    startDate DATE,\n    endDate DATE,\n    FOREIGN KEY (diagnosisId) REFERENCES Diagnoses(diagnosisID));\n\nINSERT INTO \"Appointments\" (appointmentId,patientId,doctorId,appointmentDate,reasonForAppointment,outcome) VALUES (1,1,1,'2022-02-01 10:00:00','Regular checkup','Healthy'),(2,2,2,'2021-11-15 14:00:00','Flu symptoms','Recovering');\nINSERT INTO \"Diagnoses\" (diagnosisID,patientId,illnessId,diagnosedDate) VALUES (1,1,1,'2022-01-15'),(2,2,2,'2021-09-01');\nINSERT INTO \"Doctors\" (doctorID,firstName,lastName,specialty,yearsExperience) VALUES (1,'Dr.','Jones','Cardiology',10),(2,'Dr.','Williams','Pediatrics',15);\nINSERT INTO \"Illnesses\" (illnessID,name,description,fiveYearSurvivalRate,tenYearSurvivalRate,treatmentOption) VALUES (1,'Breast Cancer','A disease where malignant cells form in the breast tissue.',85.0,75.0,'Chemotherapy and radiation therapy'),(2,'Diabetes','A chronic condition characterized by high blood sugar levels.',85.0,75.0,'Diet, exercise, and insulin therapy');\nINSERT INTO \"Patients\" (id,dateOfBirth,gender,contactNumber,address,fullname) VALUES (1,'1980-06-15','M','+1234567890','123 Main St','John Doe'),(2,'1990-07-25','F','+0987654321','456 Elm St','Jane Smith');\nINSERT INTO \"Prescriptions\" (prescriptionId,diagnosisId,medication,dosage,frequency,startDate,endDate) VALUES (1,1,'Tamoxifen','20mg','Once daily','2022-01-16','2022-12-31'),(2,2,'Metformin','500mg','Twice daily','2021-09-02','2022-08-31');\n",
      "question": "List the 5 and 10 year survival rate along with the outcomes and names of patients.",
      "gold_queries": [
        "SELECT ILLNESSES.fiveYearSurvivalRate, tenYearSurvivalRate, APPOINTMENTS.Outcome, PATIENTS.fullname\r\nFROM APPOINTMENTS\r\nJOIN PATIENTS ON APPOINTMENTS.patientId = PATIENTS.id\r\nJOIN DIAGNOSES ON PATIENTS.id = DIAGNOSES.patientId \r\nJOIN ILLNESSES ON  DIAGNOSES.illnessId = ILLNESSES.illnessID"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Retrieve the five and ten year survival rates for all illnesses.",
          "sql_queries": [
            "SELECT fiveYearSurvivalRate, tenYearSurvivalRate FROM Illnesses"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List the five year survival rate, ten year survival rate, outcomes and patient names for all appointments.",
          "sql_queries": [
            "SELECT I.fiveYearSurvivalRate, I.tenYearSurvivalRate, A.outcome, P.fullname\nFROM Appointments A\nJOIN Diagnoses D ON A.patientId = D.patientId\nJOIN Illnesses I ON D.illnessId = I.illnessID\nJOIN Patients P ON A.patientId = P.id"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Let me know if you have any other questions!",
          "sql_queries": [],
          "metrics": {
            "recall": 0.0,
            "precision": 0,
            "f1_score": 0,
            "num_queries": 0,
            "num_unique_queries": 0,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "For each patient, list their name, the five and ten year survival rates of the illnesses they have been diagnosed with, and the outcomes of their appointments.",
          "sql_queries": [
            "SELECT P.fullname, I.fiveYearSurvivalRate, I.tenYearSurvivalRate, A.outcome\nFROM Patients P\nJOIN Diagnoses D ON P.id = D.patientId\nJOIN Illnesses I ON D.illnessId = I.illnessID\nJOIN Appointments A ON P.id = A.patientId"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.6666666666666666,
        "f1_score": 0.8,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Healthcare/vague_2cols_survival_statistics/vague_2cols_survival_statistics.sqlite",
      "db_dump": "CREATE TABLE Appointments (\n    appointmentId INTEGER PRIMARY KEY AUTOINCREMENT,\n    patientId INTEGER,\n    doctorId INTEGER,\n    appointmentDate TIMESTAMP,\n    reasonForAppointment TEXT,\n    outcome TEXT,\n    FOREIGN KEY (patientId) REFERENCES Patients(id),\n    FOREIGN KEY (doctorId) REFERENCES Doctors(doctorID));\nCREATE TABLE Diagnoses (\n    diagnosisID INTEGER PRIMARY KEY AUTOINCREMENT,\n    patientId INTEGER,\n    illnessId INTEGER,\n    diagnosedDate DATE,\n    FOREIGN KEY (patientId) REFERENCES Patients(id),\n    FOREIGN KEY (illnessId) REFERENCES Illnesses(illnessID));\nCREATE TABLE Doctors (\n    doctorID INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    specialty TEXT,\n    yearsExperience INT DEFAULT 0);\nCREATE TABLE Illnesses (\n    illnessID INTEGER PRIMARY KEY,\n    name TEXT,\n    description TEXT,\n    fiveYearSurvivalRate REAL,\n    tenYearSurvivalRate REAL,\n    treatmentOption TEXT);\nCREATE TABLE Patients (\n    id INTEGER PRIMARY KEY,\n    dateOfBirth DATE,\n    gender CHAR(1) ,\n    contactNumber VARCHAR(20),\n    address TEXT, fullname TEXT);\nCREATE TABLE Prescriptions (\n    prescriptionId INTEGER PRIMARY KEY AUTOINCREMENT,\n    diagnosisId INTEGER,\n    medication TEXT,\n    dosage TEXT,\n    frequency TEXT,\n    startDate DATE,\n    endDate DATE,\n    FOREIGN KEY (diagnosisId) REFERENCES Diagnoses(diagnosisID));\n\nINSERT INTO \"Appointments\" (appointmentId,patientId,doctorId,appointmentDate,reasonForAppointment,outcome) VALUES (1,1,1,'2022-02-01 10:00:00','Regular checkup','Healthy'),(2,2,2,'2021-11-15 14:00:00','Flu symptoms','Recovering');\nINSERT INTO \"Diagnoses\" (diagnosisID,patientId,illnessId,diagnosedDate) VALUES (1,1,1,'2022-01-15'),(2,2,2,'2021-09-01');\nINSERT INTO \"Doctors\" (doctorID,firstName,lastName,specialty,yearsExperience) VALUES (1,'Dr.','Jones','Cardiology',10),(2,'Dr.','Williams','Pediatrics',15);\nINSERT INTO \"Illnesses\" (illnessID,name,description,fiveYearSurvivalRate,tenYearSurvivalRate,treatmentOption) VALUES (1,'Breast Cancer','A disease where malignant cells form in the breast tissue.',85.0,75.0,'Chemotherapy and radiation therapy'),(2,'Diabetes','A chronic condition characterized by high blood sugar levels.',85.0,75.0,'Diet, exercise, and insulin therapy');\nINSERT INTO \"Patients\" (id,dateOfBirth,gender,contactNumber,address,fullname) VALUES (1,'1980-06-15','M','+1234567890','123 Main St','John Doe'),(2,'1990-07-25','F','+0987654321','456 Elm St','Jane Smith');\nINSERT INTO \"Prescriptions\" (prescriptionId,diagnosisId,medication,dosage,frequency,startDate,endDate) VALUES (1,1,'Tamoxifen','20mg','Once daily','2022-01-16','2022-12-31'),(2,2,'Metformin','500mg','Twice daily','2021-09-02','2022-08-31');\n",
      "question": "What are the survival statistics of each of these patients and what are their names?",
      "gold_queries": [
        "SELECT ILLNESSES.fiveYearSurvivalRate, PATIENTS.fullname\r\nFROM PATIENTS \r\nJOIN DIAGNOSES ON PATIENTS.id = DIAGNOSES.patientId \r\nJOIN ILLNESSES ON  DIAGNOSES.illnessId = ILLNESSES.illnessID",
        "SELECT ILLNESSES.tenYearSurvivalRate, PATIENTS.fullname\r\nFROM PATIENTS \r\nJOIN DIAGNOSES ON PATIENTS.id = DIAGNOSES.patientId \r\nJOIN ILLNESSES ON  DIAGNOSES.illnessId = ILLNESSES.illnessID",
        "SELECT ILLNESSES.fiveYearSurvivalRate, tenYearSurvivalRate, PATIENTS.fullname\r\nFROM PATIENTS \r\nJOIN DIAGNOSES ON PATIENTS.id = DIAGNOSES.patientId \r\nJOIN ILLNESSES ON  DIAGNOSES.illnessId = ILLNESSES.illnessID"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Which illnesses were diagnosed in each patient and what are their respective survival rates?",
          "sql_queries": [
            "SELECT P.fullname, I.name, I.fiveYearSurvivalRate, I.tenYearSurvivalRate\nFROM Patients P\nJOIN Diagnoses D ON P.id = D.patientId\nJOIN Illnesses I ON D.illnessId = I.illnessID"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "For each patient, what are the survival statistics of the illnesses they have been diagnosed with?",
          "sql_queries": [
            "SELECT P.fullname, I.name, I.fiveYearSurvivalRate, I.tenYearSurvivalRate\nFROM Patients P\nJOIN Diagnoses D ON P.id = D.patientId\nJOIN Illnesses I ON D.illnessId = I.illnessID"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Variations in wording: \"patient survival\", \"treatments survival\"",
          "sql_queries": [
            "SELECT fiveYearSurvivalRate, tenYearSurvivalRate, treatmentOption FROM Illnesses"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "What is the survival rate associated with each illness diagnosed in each patient?",
          "sql_queries": [
            "SELECT Patients.fullname, Illnesses.name, Illnesses.fiveYearSurvivalRate, Illnesses.tenYearSurvivalRate\nFROM Diagnoses\nJOIN Patients ON Diagnoses.patientId = Patients.id\nJOIN Illnesses ON Diagnoses.illnessId = Illnesses.illnessID"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Student/vague_2cols_location1/vague_2cols_location1.sqlite",
      "db_dump": "CREATE TABLE Courses (\n    Course_id INT PRIMARY KEY,\n    Title TEXT,\n    Description TEXT,\n    Credits INT,\n    Teacher_id INT REFERENCES Teachers(Teacher_Id)\n);\nCREATE TABLE Departments (\n    Department_ID INT PRIMARY KEY,\n    Name TEXT,\n    Location TEXT\n);\nCREATE TABLE Enrollments (\n    Student_id INT REFERENCES Students(ID),\n    Course_id INT REFERENCES Courses(Course_id),\n    Semester_year YEAR,\n    Grade CHAR(2) ,\n    FOREIGN KEY (Student_id, Course_id, Semester_year) REFERENCES Schedule(Student_id, Course_id, Semester_year)\n);\nCREATE TABLE Rooms (\n    Room_number INTEGER PRIMARY KEY,\n    Building_name TEXT,\n    Capacity INT,\n    Lectures TEXT\n);\nCREATE TABLE Students (\n    ID INT PRIMARY KEY,\n    First_name TEXT,\n    Last_name TEXT,\n    Date_of_birth DATE,\n    Email VARCHAR(100) UNIQUE\n);\nCREATE TABLE Teachers (\n    Teacher_Id INT PRIMARY KEY,\n    First_name TEXT,\n    Last_name TEXT,\n    Hire_date DATE,\n    Office_room_number INTEGER REFERENCES Rooms(Room_number)\n);\n\nINSERT INTO \"Courses\" (Course_id,Title,Description,Credits,Teacher_id) VALUES (1,'Introduction to Computer Science','An overview of computer science fundamentals',4,1),(2,'Data Structures and Algorithms','Advanced study of data structures and algorithms',4,2),(3,'Calculus I','Fundamental concepts of calculus',4,3),(4,'Calculus II','More advanced topics in calculus',4,3),(5,'General Physics','Basic principles of physics',4,5);\nINSERT INTO \"Departments\" (Department_ID,Name,Location) VALUES (1,'Computer Science','Building A, Room 201'),(2,'Mathematics','Building B, Room 301'),(3,'Physics','Building C, Room 401'),(4,'Biology','Building D, Room 501'),(5,'History','Building E, Room 601');\nINSERT INTO \"Enrollments\" (Student_id,Course_id,Semester_year,Grade) VALUES (1,1,2021,'A'),(1,2,2021,'B'),(2,3,2021,'A'),(2,4,2021,'B'),(3,5,2021,'A');\nINSERT INTO \"Rooms\" (Room_number,Building_name,Capacity,Lectures) VALUES (101,'Building A',50,'CS101 - Introduction to Computer Science'),(102,'Building A',40,'CS102 - Data Structures and Algorithms'),(103,'Building B',30,'MA101 - Calculus I'),(104,'Building B',35,'MA102 - Calculus II'),(105,'Building C',25,'PH101 - General Physics');\nINSERT INTO \"Students\" (ID,First_name,Last_name,Date_of_birth,Email) VALUES (1,'John','Doe','1998-06-15','john.doe@example.com'),(2,'Jane','Smith','1997-03-20','jane.smith@example.com'),(3,'Michael','Brown','1996-09-05','michael.brown@example.com'),(4,'Emily','White','1999-11-25','emily.white@example.com'),(5,'William','Black','2000-02-10','william.black@example.com');\nINSERT INTO \"Teachers\" (Teacher_Id,First_name,Last_name,Hire_date,Office_room_number) VALUES (1,'Dr.','Smith','2015-05-01',101),(2,'Prof.','Jones','2010-08-01',102),(3,'Assoc. Prof.','Martin','2012-11-01',103),(4,'Instructor','Wilson','2018-02-01',104),(5,'Lecturer','Garcia','2013-06-01',105);\n",
      "question": "Which rooms does Assoc. Prof Martin use for classes?",
      "gold_queries": [
        "SELECT Rooms.Room_number\r\nFROM ROOMS \r\n            JOIN TEACHERS ON TEACHERS.Office_room_number = ROOMS.Room_number \r\nWHERE TEACHERS.Last_name = 'Martin' AND TEACHERS.First_name = 'Assoc. Prof.';"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What rooms are associated with Assoc. Prof. Martin based on the 'Lectures' column in the 'Rooms' table?",
          "sql_queries": [
            "SELECT Room_number FROM Rooms WHERE Lectures LIKE '%Assoc. Prof. Martin%'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Find the room numbers that Assoc. Prof. Martin teaches in.",
          "sql_queries": [
            "SELECT Office_room_number FROM Teachers WHERE First_name = 'Assoc.' AND Last_name = 'Prof.' AND First_name = 'Martin'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Identify the room number(s) referenced in the 'Lectures' column of the 'Rooms' table where Assoc. Prof. Martin is mentioned.",
          "sql_queries": [
            "SELECT Room_number FROM Rooms WHERE Lectures LIKE '%Assoc. Prof. Martin%'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Student/vague_2cols_location1/vague_2cols_location1.sqlite",
      "db_dump": "CREATE TABLE Courses (\n    Course_id INT PRIMARY KEY,\n    Title TEXT,\n    Description TEXT,\n    Credits INT,\n    Teacher_id INT REFERENCES Teachers(Teacher_Id)\n);\nCREATE TABLE Departments (\n    Department_ID INT PRIMARY KEY,\n    Name TEXT,\n    Location TEXT\n);\nCREATE TABLE Enrollments (\n    Student_id INT REFERENCES Students(ID),\n    Course_id INT REFERENCES Courses(Course_id),\n    Semester_year YEAR,\n    Grade CHAR(2) ,\n    FOREIGN KEY (Student_id, Course_id, Semester_year) REFERENCES Schedule(Student_id, Course_id, Semester_year)\n);\nCREATE TABLE Rooms (\n    Room_number INTEGER PRIMARY KEY,\n    Building_name TEXT,\n    Capacity INT,\n    Lectures TEXT\n);\nCREATE TABLE Students (\n    ID INT PRIMARY KEY,\n    First_name TEXT,\n    Last_name TEXT,\n    Date_of_birth DATE,\n    Email VARCHAR(100) UNIQUE\n);\nCREATE TABLE Teachers (\n    Teacher_Id INT PRIMARY KEY,\n    First_name TEXT,\n    Last_name TEXT,\n    Hire_date DATE,\n    Office_room_number INTEGER REFERENCES Rooms(Room_number)\n);\n\nINSERT INTO \"Courses\" (Course_id,Title,Description,Credits,Teacher_id) VALUES (1,'Introduction to Computer Science','An overview of computer science fundamentals',4,1),(2,'Data Structures and Algorithms','Advanced study of data structures and algorithms',4,2),(3,'Calculus I','Fundamental concepts of calculus',4,3),(4,'Calculus II','More advanced topics in calculus',4,3),(5,'General Physics','Basic principles of physics',4,5);\nINSERT INTO \"Departments\" (Department_ID,Name,Location) VALUES (1,'Computer Science','Building A, Room 201'),(2,'Mathematics','Building B, Room 301'),(3,'Physics','Building C, Room 401'),(4,'Biology','Building D, Room 501'),(5,'History','Building E, Room 601');\nINSERT INTO \"Enrollments\" (Student_id,Course_id,Semester_year,Grade) VALUES (1,1,2021,'A'),(1,2,2021,'B'),(2,3,2021,'A'),(2,4,2021,'B'),(3,5,2021,'A');\nINSERT INTO \"Rooms\" (Room_number,Building_name,Capacity,Lectures) VALUES (101,'Building A',50,'CS101 - Introduction to Computer Science'),(102,'Building A',40,'CS102 - Data Structures and Algorithms'),(103,'Building B',30,'MA101 - Calculus I'),(104,'Building B',35,'MA102 - Calculus II'),(105,'Building C',25,'PH101 - General Physics');\nINSERT INTO \"Students\" (ID,First_name,Last_name,Date_of_birth,Email) VALUES (1,'John','Doe','1998-06-15','john.doe@example.com'),(2,'Jane','Smith','1997-03-20','jane.smith@example.com'),(3,'Michael','Brown','1996-09-05','michael.brown@example.com'),(4,'Emily','White','1999-11-25','emily.white@example.com'),(5,'William','Black','2000-02-10','william.black@example.com');\nINSERT INTO \"Teachers\" (Teacher_Id,First_name,Last_name,Hire_date,Office_room_number) VALUES (1,'Dr.','Smith','2015-05-01',101),(2,'Prof.','Jones','2010-08-01',102),(3,'Assoc. Prof.','Martin','2012-11-01',103),(4,'Instructor','Wilson','2018-02-01',104),(5,'Lecturer','Garcia','2013-06-01',105);\n",
      "question": "Which buildings does Assoc. Prof Martin use for classes?",
      "gold_queries": [
        "SELECT Rooms.Building_name\r\nFROM ROOMS \r\n            JOIN TEACHERS ON TEACHERS.Office_room_number = ROOMS.Room_number \r\nWHERE TEACHERS.Last_name = 'Martin' AND TEACHERS.First_name = 'Assoc. Prof.';"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "In what buildings does Assoc. Prof. Martin's class schedule include rooms.",
          "sql_queries": [
            "SELECT DISTINCT Building_name\nFROM Teachers\nJOIN Courses ON Teachers.Teacher_Id = Courses.Teacher_id\nJOIN Rooms ON Courses.Course_id = Rooms.Lectures\nWHERE Teachers.First_name = 'Assoc. Prof.' AND Teachers.Last_name = 'Martin'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Which buildings contain rooms that Assoc. Prof Martin uses for classes.",
          "sql_queries": [
            "SELECT DISTINCT T2.Building_name \nFROM Teachers AS T1 \nJOIN Rooms AS T2 \nON T1.Office_room_number = T2.Room_number \nWHERE T1.First_name = 'Assoc. Prof.' AND T1.Last_name = 'Martin'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "What buildings house rooms where Assoc. Prof. Martin teaches.",
          "sql_queries": [
            "SELECT DISTINCT Rooms.Building_name \nFROM Rooms \nJOIN Teachers ON Rooms.Room_number = Teachers.Office_room_number \nWHERE Teachers.First_name = 'Assoc. Prof.' AND Teachers.Last_name = 'Martin'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Are there multiple buildings where Assoc. Prof. Martin's classes are held?",
          "sql_queries": [
            "SELECT DISTINCT building_name FROM Rooms WHERE room_number IN (SELECT office_room_number FROM Teachers WHERE first_name = 'Assoc. Prof.' AND last_name = 'Martin')"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.75,
        "f1_score": 0.8571428571428571,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/vague/Student/vague_2cols_location1/vague_2cols_location1.sqlite",
      "db_dump": "CREATE TABLE Courses (\n    Course_id INT PRIMARY KEY,\n    Title TEXT,\n    Description TEXT,\n    Credits INT,\n    Teacher_id INT REFERENCES Teachers(Teacher_Id)\n);\nCREATE TABLE Departments (\n    Department_ID INT PRIMARY KEY,\n    Name TEXT,\n    Location TEXT\n);\nCREATE TABLE Enrollments (\n    Student_id INT REFERENCES Students(ID),\n    Course_id INT REFERENCES Courses(Course_id),\n    Semester_year YEAR,\n    Grade CHAR(2) ,\n    FOREIGN KEY (Student_id, Course_id, Semester_year) REFERENCES Schedule(Student_id, Course_id, Semester_year)\n);\nCREATE TABLE Rooms (\n    Room_number INTEGER PRIMARY KEY,\n    Building_name TEXT,\n    Capacity INT,\n    Lectures TEXT\n);\nCREATE TABLE Students (\n    ID INT PRIMARY KEY,\n    First_name TEXT,\n    Last_name TEXT,\n    Date_of_birth DATE,\n    Email VARCHAR(100) UNIQUE\n);\nCREATE TABLE Teachers (\n    Teacher_Id INT PRIMARY KEY,\n    First_name TEXT,\n    Last_name TEXT,\n    Hire_date DATE,\n    Office_room_number INTEGER REFERENCES Rooms(Room_number)\n);\n\nINSERT INTO \"Courses\" (Course_id,Title,Description,Credits,Teacher_id) VALUES (1,'Introduction to Computer Science','An overview of computer science fundamentals',4,1),(2,'Data Structures and Algorithms','Advanced study of data structures and algorithms',4,2),(3,'Calculus I','Fundamental concepts of calculus',4,3),(4,'Calculus II','More advanced topics in calculus',4,3),(5,'General Physics','Basic principles of physics',4,5);\nINSERT INTO \"Departments\" (Department_ID,Name,Location) VALUES (1,'Computer Science','Building A, Room 201'),(2,'Mathematics','Building B, Room 301'),(3,'Physics','Building C, Room 401'),(4,'Biology','Building D, Room 501'),(5,'History','Building E, Room 601');\nINSERT INTO \"Enrollments\" (Student_id,Course_id,Semester_year,Grade) VALUES (1,1,2021,'A'),(1,2,2021,'B'),(2,3,2021,'A'),(2,4,2021,'B'),(3,5,2021,'A');\nINSERT INTO \"Rooms\" (Room_number,Building_name,Capacity,Lectures) VALUES (101,'Building A',50,'CS101 - Introduction to Computer Science'),(102,'Building A',40,'CS102 - Data Structures and Algorithms'),(103,'Building B',30,'MA101 - Calculus I'),(104,'Building B',35,'MA102 - Calculus II'),(105,'Building C',25,'PH101 - General Physics');\nINSERT INTO \"Students\" (ID,First_name,Last_name,Date_of_birth,Email) VALUES (1,'John','Doe','1998-06-15','john.doe@example.com'),(2,'Jane','Smith','1997-03-20','jane.smith@example.com'),(3,'Michael','Brown','1996-09-05','michael.brown@example.com'),(4,'Emily','White','1999-11-25','emily.white@example.com'),(5,'William','Black','2000-02-10','william.black@example.com');\nINSERT INTO \"Teachers\" (Teacher_Id,First_name,Last_name,Hire_date,Office_room_number) VALUES (1,'Dr.','Smith','2015-05-01',101),(2,'Prof.','Jones','2010-08-01',102),(3,'Assoc. Prof.','Martin','2012-11-01',103),(4,'Instructor','Wilson','2018-02-01',104),(5,'Lecturer','Garcia','2013-06-01',105);\n",
      "question": "What is the building name and room number for the room in which Dr. Smith holds classes?",
      "gold_queries": [
        "SELECT  Rooms.Room_number, Rooms.Building_name\r\nFROM ROOMS \r\n            JOIN TEACHERS ON TEACHERS.Office_room_number=ROOMS.Room_number \r\nWHERE TEACHERS.Last_name=='Smith' AND TEACHERS.First_name='Dr.'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What is the building name and room number associated with Dr. Smith's office?",
          "sql_queries": [
            "SELECT R.Building_name, R.Room_number \nFROM Rooms R \nJOIN Teachers T ON R.Room_number = T.Office_room_number \nWHERE T.First_name = 'Dr.' AND T.Last_name = 'Smith'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Which building and room number is used for Dr. Smith's lectures?",
          "sql_queries": [
            "SELECT T1.Building_name, T1.Room_number \nFROM Rooms AS T1 \nJOIN Teachers AS T2 ON T1.Room_number = T2.Office_room_number \nWHERE T2.First_name = 'Dr.' AND T2.Last_name = 'Smith'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Where does Dr. Smith conduct classes?",
          "sql_queries": [
            "SELECT Building_name, Lectures FROM Rooms WHERE Room_number = (SELECT Office_room_number FROM Teachers WHERE First_name = 'Dr.' AND Last_name = 'Smith')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "In which building and room does Dr. Smith teach?",
          "sql_queries": [
            "SELECT R.Building_name, R.Room_number FROM Rooms AS R JOIN Teachers AS T ON R.Room_number = T.Office_room_number WHERE T.First_name = 'Dr.' AND T.Last_name = 'Smith'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Which room is listed as Dr. Smith's office space?",
          "sql_queries": [
            "SELECT R.Room_number, R.Building_name, R.Capacity\nFROM Rooms R\nJOIN Teachers T ON R.Room_number = T.Office_room_number\nWHERE T.First_name = 'Dr.' AND T.Last_name = 'Smith'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "What is the address of Dr. Smith's office?",
          "sql_queries": [
            "SELECT T1.Building_name, T1.Room_number FROM Rooms AS T1 JOIN Teachers AS T2 ON T1.Room_number = T2.Office_room_number WHERE T2.First_name = 'Dr.' AND T2.Last_name = 'Smith'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.6666666666666666,
        "f1_score": 0.8,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 4
    },
    {
      "db_file": "data/vague/Student/vague_2cols_location1/vague_2cols_location1.sqlite",
      "db_dump": "CREATE TABLE Courses (\n    Course_id INT PRIMARY KEY,\n    Title TEXT,\n    Description TEXT,\n    Credits INT,\n    Teacher_id INT REFERENCES Teachers(Teacher_Id)\n);\nCREATE TABLE Departments (\n    Department_ID INT PRIMARY KEY,\n    Name TEXT,\n    Location TEXT\n);\nCREATE TABLE Enrollments (\n    Student_id INT REFERENCES Students(ID),\n    Course_id INT REFERENCES Courses(Course_id),\n    Semester_year YEAR,\n    Grade CHAR(2) ,\n    FOREIGN KEY (Student_id, Course_id, Semester_year) REFERENCES Schedule(Student_id, Course_id, Semester_year)\n);\nCREATE TABLE Rooms (\n    Room_number INTEGER PRIMARY KEY,\n    Building_name TEXT,\n    Capacity INT,\n    Lectures TEXT\n);\nCREATE TABLE Students (\n    ID INT PRIMARY KEY,\n    First_name TEXT,\n    Last_name TEXT,\n    Date_of_birth DATE,\n    Email VARCHAR(100) UNIQUE\n);\nCREATE TABLE Teachers (\n    Teacher_Id INT PRIMARY KEY,\n    First_name TEXT,\n    Last_name TEXT,\n    Hire_date DATE,\n    Office_room_number INTEGER REFERENCES Rooms(Room_number)\n);\n\nINSERT INTO \"Courses\" (Course_id,Title,Description,Credits,Teacher_id) VALUES (1,'Introduction to Computer Science','An overview of computer science fundamentals',4,1),(2,'Data Structures and Algorithms','Advanced study of data structures and algorithms',4,2),(3,'Calculus I','Fundamental concepts of calculus',4,3),(4,'Calculus II','More advanced topics in calculus',4,3),(5,'General Physics','Basic principles of physics',4,5);\nINSERT INTO \"Departments\" (Department_ID,Name,Location) VALUES (1,'Computer Science','Building A, Room 201'),(2,'Mathematics','Building B, Room 301'),(3,'Physics','Building C, Room 401'),(4,'Biology','Building D, Room 501'),(5,'History','Building E, Room 601');\nINSERT INTO \"Enrollments\" (Student_id,Course_id,Semester_year,Grade) VALUES (1,1,2021,'A'),(1,2,2021,'B'),(2,3,2021,'A'),(2,4,2021,'B'),(3,5,2021,'A');\nINSERT INTO \"Rooms\" (Room_number,Building_name,Capacity,Lectures) VALUES (101,'Building A',50,'CS101 - Introduction to Computer Science'),(102,'Building A',40,'CS102 - Data Structures and Algorithms'),(103,'Building B',30,'MA101 - Calculus I'),(104,'Building B',35,'MA102 - Calculus II'),(105,'Building C',25,'PH101 - General Physics');\nINSERT INTO \"Students\" (ID,First_name,Last_name,Date_of_birth,Email) VALUES (1,'John','Doe','1998-06-15','john.doe@example.com'),(2,'Jane','Smith','1997-03-20','jane.smith@example.com'),(3,'Michael','Brown','1996-09-05','michael.brown@example.com'),(4,'Emily','White','1999-11-25','emily.white@example.com'),(5,'William','Black','2000-02-10','william.black@example.com');\nINSERT INTO \"Teachers\" (Teacher_Id,First_name,Last_name,Hire_date,Office_room_number) VALUES (1,'Dr.','Smith','2015-05-01',101),(2,'Prof.','Jones','2010-08-01',102),(3,'Assoc. Prof.','Martin','2012-11-01',103),(4,'Instructor','Wilson','2018-02-01',104),(5,'Lecturer','Garcia','2013-06-01',105);\n",
      "question": "Which rooms and buildings does Assoc. Prof Martin use for classes?",
      "gold_queries": [
        "SELECT Rooms.Room_number,  Rooms.Building_name\r\nFROM ROOMS \r\n            JOIN TEACHERS ON TEACHERS.Office_room_number = ROOMS.Room_number \r\nWHERE TEACHERS.Last_name = 'Martin' AND TEACHERS.First_name = 'Assoc. Prof.';"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Which rooms does Assoc. Prof. Martin teach in?",
          "sql_queries": [
            "SELECT R.Room_number, R.Building_name\nFROM Teachers T\nJOIN Rooms R ON T.Office_room_number = R.Room_number\nWHERE T.First_name = 'Assoc.' AND T.Last_name = 'Martin'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "What are the building and room numbers where Assoc. Prof. Martin holds classes?",
          "sql_queries": [
            "SELECT T2.Building_name, T2.Room_number \nFROM Teachers AS T1 \nJOIN Rooms AS T2 \nON T1.Office_room_number = T2.Room_number \nWHERE T1.First_name = 'Assoc. Prof.' AND T1.Last_name = 'Martin'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Where does Assoc. Prof. Martin teach?",
          "sql_queries": [
            "SELECT T1.Building_name, T1.Capacity\nFROM Rooms AS T1\nJOIN Teachers AS T2 ON T1.Room_number = T2.Office_room_number\nWHERE T2.First_name = 'Assoc. Prof.' AND T2.Last_name = 'Martin'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Which rooms are used for Assoc. Prof. Martin's lectures?",
          "sql_queries": [
            "SELECT R.Room_number, R.Building_name \nFROM Rooms R \nJOIN Teachers T ON R.Room_number = T.Office_room_number \nWHERE T.First_name = 'Assoc. Prof.' AND T.Last_name = 'Martin'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Student/vague_2cols_location1/vague_2cols_location1.sqlite",
      "db_dump": "CREATE TABLE Courses (\n    Course_id INT PRIMARY KEY,\n    Title TEXT,\n    Description TEXT,\n    Credits INT,\n    Teacher_id INT REFERENCES Teachers(Teacher_Id)\n);\nCREATE TABLE Departments (\n    Department_ID INT PRIMARY KEY,\n    Name TEXT,\n    Location TEXT\n);\nCREATE TABLE Enrollments (\n    Student_id INT REFERENCES Students(ID),\n    Course_id INT REFERENCES Courses(Course_id),\n    Semester_year YEAR,\n    Grade CHAR(2) ,\n    FOREIGN KEY (Student_id, Course_id, Semester_year) REFERENCES Schedule(Student_id, Course_id, Semester_year)\n);\nCREATE TABLE Rooms (\n    Room_number INTEGER PRIMARY KEY,\n    Building_name TEXT,\n    Capacity INT,\n    Lectures TEXT\n);\nCREATE TABLE Students (\n    ID INT PRIMARY KEY,\n    First_name TEXT,\n    Last_name TEXT,\n    Date_of_birth DATE,\n    Email VARCHAR(100) UNIQUE\n);\nCREATE TABLE Teachers (\n    Teacher_Id INT PRIMARY KEY,\n    First_name TEXT,\n    Last_name TEXT,\n    Hire_date DATE,\n    Office_room_number INTEGER REFERENCES Rooms(Room_number)\n);\n\nINSERT INTO \"Courses\" (Course_id,Title,Description,Credits,Teacher_id) VALUES (1,'Introduction to Computer Science','An overview of computer science fundamentals',4,1),(2,'Data Structures and Algorithms','Advanced study of data structures and algorithms',4,2),(3,'Calculus I','Fundamental concepts of calculus',4,3),(4,'Calculus II','More advanced topics in calculus',4,3),(5,'General Physics','Basic principles of physics',4,5);\nINSERT INTO \"Departments\" (Department_ID,Name,Location) VALUES (1,'Computer Science','Building A, Room 201'),(2,'Mathematics','Building B, Room 301'),(3,'Physics','Building C, Room 401'),(4,'Biology','Building D, Room 501'),(5,'History','Building E, Room 601');\nINSERT INTO \"Enrollments\" (Student_id,Course_id,Semester_year,Grade) VALUES (1,1,2021,'A'),(1,2,2021,'B'),(2,3,2021,'A'),(2,4,2021,'B'),(3,5,2021,'A');\nINSERT INTO \"Rooms\" (Room_number,Building_name,Capacity,Lectures) VALUES (101,'Building A',50,'CS101 - Introduction to Computer Science'),(102,'Building A',40,'CS102 - Data Structures and Algorithms'),(103,'Building B',30,'MA101 - Calculus I'),(104,'Building B',35,'MA102 - Calculus II'),(105,'Building C',25,'PH101 - General Physics');\nINSERT INTO \"Students\" (ID,First_name,Last_name,Date_of_birth,Email) VALUES (1,'John','Doe','1998-06-15','john.doe@example.com'),(2,'Jane','Smith','1997-03-20','jane.smith@example.com'),(3,'Michael','Brown','1996-09-05','michael.brown@example.com'),(4,'Emily','White','1999-11-25','emily.white@example.com'),(5,'William','Black','2000-02-10','william.black@example.com');\nINSERT INTO \"Teachers\" (Teacher_Id,First_name,Last_name,Hire_date,Office_room_number) VALUES (1,'Dr.','Smith','2015-05-01',101),(2,'Prof.','Jones','2010-08-01',102),(3,'Assoc. Prof.','Martin','2012-11-01',103),(4,'Instructor','Wilson','2018-02-01',104),(5,'Lecturer','Garcia','2013-06-01',105);\n",
      "question": "What room number does Dr Smith hold classes in?",
      "gold_queries": [
        "SELECT Rooms.Room_number\r\nFROM ROOMS \r\n            JOIN TEACHERS ON TEACHERS.Office_room_number=ROOMS.Room_number \r\nWHERE TEACHERS.Last_name=='Smith' AND TEACHERS.First_name='Dr.'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "In which Room_number does the teacher named 'Dr. Smith' teach?",
          "sql_queries": [
            "SELECT Office_room_number FROM Teachers WHERE First_name = 'Dr.' AND Last_name = 'Smith'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "What is the Room_number associated with the Teacher_Id where First_name = 'Dr.' and Last_name = 'Smith'?",
          "sql_queries": [
            "SELECT Office_room_number FROM Teachers WHERE First_name = 'Dr.' AND Last_name = 'Smith'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Find the Room_number linked to the teacher Dr. Smith.",
          "sql_queries": [
            "SELECT Room_number FROM Teachers WHERE First_name = 'Dr.' AND Last_name = 'Smith'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT Room_number FROM Teachers WHERE First_name = 'Dr.' AND Last_name = 'Smith'",
                "original_exception": "no such column: Room_number"
              }
            ],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 3,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [
          {
            "query": "SELECT Room_number FROM Teachers WHERE First_name = 'Dr.' AND Last_name = 'Smith'",
            "original_exception": "no such column: Room_number"
          }
        ],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Student/vague_2cols_location1/vague_2cols_location1.sqlite",
      "db_dump": "CREATE TABLE Courses (\n    Course_id INT PRIMARY KEY,\n    Title TEXT,\n    Description TEXT,\n    Credits INT,\n    Teacher_id INT REFERENCES Teachers(Teacher_Id)\n);\nCREATE TABLE Departments (\n    Department_ID INT PRIMARY KEY,\n    Name TEXT,\n    Location TEXT\n);\nCREATE TABLE Enrollments (\n    Student_id INT REFERENCES Students(ID),\n    Course_id INT REFERENCES Courses(Course_id),\n    Semester_year YEAR,\n    Grade CHAR(2) ,\n    FOREIGN KEY (Student_id, Course_id, Semester_year) REFERENCES Schedule(Student_id, Course_id, Semester_year)\n);\nCREATE TABLE Rooms (\n    Room_number INTEGER PRIMARY KEY,\n    Building_name TEXT,\n    Capacity INT,\n    Lectures TEXT\n);\nCREATE TABLE Students (\n    ID INT PRIMARY KEY,\n    First_name TEXT,\n    Last_name TEXT,\n    Date_of_birth DATE,\n    Email VARCHAR(100) UNIQUE\n);\nCREATE TABLE Teachers (\n    Teacher_Id INT PRIMARY KEY,\n    First_name TEXT,\n    Last_name TEXT,\n    Hire_date DATE,\n    Office_room_number INTEGER REFERENCES Rooms(Room_number)\n);\n\nINSERT INTO \"Courses\" (Course_id,Title,Description,Credits,Teacher_id) VALUES (1,'Introduction to Computer Science','An overview of computer science fundamentals',4,1),(2,'Data Structures and Algorithms','Advanced study of data structures and algorithms',4,2),(3,'Calculus I','Fundamental concepts of calculus',4,3),(4,'Calculus II','More advanced topics in calculus',4,3),(5,'General Physics','Basic principles of physics',4,5);\nINSERT INTO \"Departments\" (Department_ID,Name,Location) VALUES (1,'Computer Science','Building A, Room 201'),(2,'Mathematics','Building B, Room 301'),(3,'Physics','Building C, Room 401'),(4,'Biology','Building D, Room 501'),(5,'History','Building E, Room 601');\nINSERT INTO \"Enrollments\" (Student_id,Course_id,Semester_year,Grade) VALUES (1,1,2021,'A'),(1,2,2021,'B'),(2,3,2021,'A'),(2,4,2021,'B'),(3,5,2021,'A');\nINSERT INTO \"Rooms\" (Room_number,Building_name,Capacity,Lectures) VALUES (101,'Building A',50,'CS101 - Introduction to Computer Science'),(102,'Building A',40,'CS102 - Data Structures and Algorithms'),(103,'Building B',30,'MA101 - Calculus I'),(104,'Building B',35,'MA102 - Calculus II'),(105,'Building C',25,'PH101 - General Physics');\nINSERT INTO \"Students\" (ID,First_name,Last_name,Date_of_birth,Email) VALUES (1,'John','Doe','1998-06-15','john.doe@example.com'),(2,'Jane','Smith','1997-03-20','jane.smith@example.com'),(3,'Michael','Brown','1996-09-05','michael.brown@example.com'),(4,'Emily','White','1999-11-25','emily.white@example.com'),(5,'William','Black','2000-02-10','william.black@example.com');\nINSERT INTO \"Teachers\" (Teacher_Id,First_name,Last_name,Hire_date,Office_room_number) VALUES (1,'Dr.','Smith','2015-05-01',101),(2,'Prof.','Jones','2010-08-01',102),(3,'Assoc. Prof.','Martin','2012-11-01',103),(4,'Instructor','Wilson','2018-02-01',104),(5,'Lecturer','Garcia','2013-06-01',105);\n",
      "question": "Where does Dr. Smith hold his class(es)?",
      "gold_queries": [
        "SELECT Rooms.Room_number\r\nFROM ROOMS \r\n            JOIN TEACHERS ON TEACHERS.Office_room_number=ROOMS.Room_number \r\nWHERE TEACHERS.Last_name=='Smith' AND TEACHERS.First_name='Dr.'",
        "SELECT Rooms.Building_name\r\nFROM ROOMS \r\n            JOIN TEACHERS ON TEACHERS.Office_room_number=ROOMS.Room_number \r\nWHERE TEACHERS.Last_name=='Smith' AND TEACHERS.First_name='Dr.'",
        "SELECT  Rooms.Room_number, Rooms.Building_name\r\nFROM ROOMS \r\n            JOIN TEACHERS ON TEACHERS.Office_room_number=ROOMS.Room_number \r\nWHERE TEACHERS.Last_name=='Smith' AND TEACHERS.First_name='Dr.'"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Which room(s) are associated with Dr. Smith's teaching?",
          "sql_queries": [
            "SELECT Room_number FROM Rooms WHERE Room_number = (SELECT Office_room_number FROM Teachers WHERE First_name = 'Dr.' AND Last_name = 'Smith')"
          ],
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "What is the location of Dr. Smith's class(es)?",
          "sql_queries": [
            "SELECT R.Location\nFROM Rooms R\nJOIN Teachers T ON R.Room_number = T.Office_room_number\nWHERE T.First_name = 'Dr.' AND T.Last_name = 'Smith'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT R.Location\nFROM Rooms R\nJOIN Teachers T ON R.Room_number = T.Office_room_number\nWHERE T.First_name = 'Dr.' AND T.Last_name = 'Smith'",
                "original_exception": "no such column: R.Location"
              }
            ],
            "all_found": false
          }
        },
        {
          "interpretation": "What is the room number of the classes taught by Dr. Smith?",
          "sql_queries": [
            "SELECT Room_number FROM Rooms WHERE Lectures LIKE '%CS101%'"
          ],
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "In which room(s) does Dr. Smith teach?",
          "sql_queries": [
            "SELECT Room_number FROM Rooms WHERE Room_number IN (SELECT Office_room_number FROM Teachers WHERE First_name = 'Dr.' AND Last_name = 'Smith')"
          ],
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.3333333333333333,
        "precision": 0.75,
        "f1_score": 0.46153846153846156,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [
          {
            "query": "SELECT R.Location\nFROM Rooms R\nJOIN Teachers T ON R.Room_number = T.Office_room_number\nWHERE T.First_name = 'Dr.' AND T.Last_name = 'Smith'",
            "original_exception": "no such column: R.Location"
          }
        ],
        "all_found": false
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/vague/Student/vague_2cols_location1/vague_2cols_location1.sqlite",
      "db_dump": "CREATE TABLE Courses (\n    Course_id INT PRIMARY KEY,\n    Title TEXT,\n    Description TEXT,\n    Credits INT,\n    Teacher_id INT REFERENCES Teachers(Teacher_Id)\n);\nCREATE TABLE Departments (\n    Department_ID INT PRIMARY KEY,\n    Name TEXT,\n    Location TEXT\n);\nCREATE TABLE Enrollments (\n    Student_id INT REFERENCES Students(ID),\n    Course_id INT REFERENCES Courses(Course_id),\n    Semester_year YEAR,\n    Grade CHAR(2) ,\n    FOREIGN KEY (Student_id, Course_id, Semester_year) REFERENCES Schedule(Student_id, Course_id, Semester_year)\n);\nCREATE TABLE Rooms (\n    Room_number INTEGER PRIMARY KEY,\n    Building_name TEXT,\n    Capacity INT,\n    Lectures TEXT\n);\nCREATE TABLE Students (\n    ID INT PRIMARY KEY,\n    First_name TEXT,\n    Last_name TEXT,\n    Date_of_birth DATE,\n    Email VARCHAR(100) UNIQUE\n);\nCREATE TABLE Teachers (\n    Teacher_Id INT PRIMARY KEY,\n    First_name TEXT,\n    Last_name TEXT,\n    Hire_date DATE,\n    Office_room_number INTEGER REFERENCES Rooms(Room_number)\n);\n\nINSERT INTO \"Courses\" (Course_id,Title,Description,Credits,Teacher_id) VALUES (1,'Introduction to Computer Science','An overview of computer science fundamentals',4,1),(2,'Data Structures and Algorithms','Advanced study of data structures and algorithms',4,2),(3,'Calculus I','Fundamental concepts of calculus',4,3),(4,'Calculus II','More advanced topics in calculus',4,3),(5,'General Physics','Basic principles of physics',4,5);\nINSERT INTO \"Departments\" (Department_ID,Name,Location) VALUES (1,'Computer Science','Building A, Room 201'),(2,'Mathematics','Building B, Room 301'),(3,'Physics','Building C, Room 401'),(4,'Biology','Building D, Room 501'),(5,'History','Building E, Room 601');\nINSERT INTO \"Enrollments\" (Student_id,Course_id,Semester_year,Grade) VALUES (1,1,2021,'A'),(1,2,2021,'B'),(2,3,2021,'A'),(2,4,2021,'B'),(3,5,2021,'A');\nINSERT INTO \"Rooms\" (Room_number,Building_name,Capacity,Lectures) VALUES (101,'Building A',50,'CS101 - Introduction to Computer Science'),(102,'Building A',40,'CS102 - Data Structures and Algorithms'),(103,'Building B',30,'MA101 - Calculus I'),(104,'Building B',35,'MA102 - Calculus II'),(105,'Building C',25,'PH101 - General Physics');\nINSERT INTO \"Students\" (ID,First_name,Last_name,Date_of_birth,Email) VALUES (1,'John','Doe','1998-06-15','john.doe@example.com'),(2,'Jane','Smith','1997-03-20','jane.smith@example.com'),(3,'Michael','Brown','1996-09-05','michael.brown@example.com'),(4,'Emily','White','1999-11-25','emily.white@example.com'),(5,'William','Black','2000-02-10','william.black@example.com');\nINSERT INTO \"Teachers\" (Teacher_Id,First_name,Last_name,Hire_date,Office_room_number) VALUES (1,'Dr.','Smith','2015-05-01',101),(2,'Prof.','Jones','2010-08-01',102),(3,'Assoc. Prof.','Martin','2012-11-01',103),(4,'Instructor','Wilson','2018-02-01',104),(5,'Lecturer','Garcia','2013-06-01',105);\n",
      "question": "What locations does Assoc. Prof Martin use for classes?",
      "gold_queries": [
        "SELECT Rooms.Room_number\r\nFROM ROOMS \r\n            JOIN TEACHERS ON TEACHERS.Office_room_number = ROOMS.Room_number \r\nWHERE TEACHERS.Last_name = 'Martin' AND TEACHERS.First_name = 'Assoc. Prof.';",
        "SELECT Rooms.Building_name\r\nFROM ROOMS \r\n            JOIN TEACHERS ON TEACHERS.Office_room_number = ROOMS.Room_number \r\nWHERE TEACHERS.Last_name = 'Martin' AND TEACHERS.First_name = 'Assoc. Prof.';",
        "SELECT Rooms.Room_number,  Rooms.Building_name\r\nFROM ROOMS \r\n            JOIN TEACHERS ON TEACHERS.Office_room_number = ROOMS.Room_number \r\nWHERE TEACHERS.Last_name = 'Martin' AND TEACHERS.First_name = 'Assoc. Prof.';"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Building location of Assoc. Prof Martin's classes",
          "sql_queries": [
            "SELECT Rooms.Building_name\nFROM Rooms\nJOIN Teachers ON Rooms.Room_number = Teachers.Office_room_number\nJOIN Courses ON Teachers.Teacher_Id = Courses.Teacher_id\nWHERE Teachers.First_name = 'Assoc. Prof.' AND Teachers.Last_name = 'Martin'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Office room of Assoc. Prof Martin",
          "sql_queries": [
            "SELECT Office_room_number FROM Teachers WHERE First_name = 'Assoc. Prof.' AND Last_name = 'Martin'"
          ],
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "The location of courses taught by Assoc. Prof Martin",
          "sql_queries": [
            "SELECT D.Location \nFROM Courses C \nJOIN Teachers T ON C.Teacher_id = T.Teacher_Id \nJOIN Rooms R ON T.Office_room_number = R.Room_number \nJOIN Departments D ON C.Course_id = R.Lectures \nWHERE T.First_name = 'Assoc. Prof.' AND T.Last_name = 'Martin'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Classrooms associated with Assoc Prof Martin",
          "sql_queries": [
            "SELECT T1.Room_number, T1.Building_name\nFROM Rooms AS T1\nJOIN Teachers AS T2 ON T1.Room_number = T2.Office_room_number\nWHERE T2.First_name = 'Assoc. Prof.' AND T2.Last_name = 'Martin'"
          ],
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Rooms used by Assoc. Prof Martin",
          "sql_queries": [
            "SELECT R.Building_name, R.Room_number\nFROM Rooms R\nJOIN Teachers T ON R.Room_number = T.Office_room_number\nWHERE T.First_name = 'Assoc. Prof.' AND T.Last_name = 'Martin'"
          ],
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.6666666666666666,
        "precision": 0.6,
        "f1_score": 0.631578947368421,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/vague/Student/vague_2cols_location1/vague_2cols_location1.sqlite",
      "db_dump": "CREATE TABLE Courses (\n    Course_id INT PRIMARY KEY,\n    Title TEXT,\n    Description TEXT,\n    Credits INT,\n    Teacher_id INT REFERENCES Teachers(Teacher_Id)\n);\nCREATE TABLE Departments (\n    Department_ID INT PRIMARY KEY,\n    Name TEXT,\n    Location TEXT\n);\nCREATE TABLE Enrollments (\n    Student_id INT REFERENCES Students(ID),\n    Course_id INT REFERENCES Courses(Course_id),\n    Semester_year YEAR,\n    Grade CHAR(2) ,\n    FOREIGN KEY (Student_id, Course_id, Semester_year) REFERENCES Schedule(Student_id, Course_id, Semester_year)\n);\nCREATE TABLE Rooms (\n    Room_number INTEGER PRIMARY KEY,\n    Building_name TEXT,\n    Capacity INT,\n    Lectures TEXT\n);\nCREATE TABLE Students (\n    ID INT PRIMARY KEY,\n    First_name TEXT,\n    Last_name TEXT,\n    Date_of_birth DATE,\n    Email VARCHAR(100) UNIQUE\n);\nCREATE TABLE Teachers (\n    Teacher_Id INT PRIMARY KEY,\n    First_name TEXT,\n    Last_name TEXT,\n    Hire_date DATE,\n    Office_room_number INTEGER REFERENCES Rooms(Room_number)\n);\n\nINSERT INTO \"Courses\" (Course_id,Title,Description,Credits,Teacher_id) VALUES (1,'Introduction to Computer Science','An overview of computer science fundamentals',4,1),(2,'Data Structures and Algorithms','Advanced study of data structures and algorithms',4,2),(3,'Calculus I','Fundamental concepts of calculus',4,3),(4,'Calculus II','More advanced topics in calculus',4,3),(5,'General Physics','Basic principles of physics',4,5);\nINSERT INTO \"Departments\" (Department_ID,Name,Location) VALUES (1,'Computer Science','Building A, Room 201'),(2,'Mathematics','Building B, Room 301'),(3,'Physics','Building C, Room 401'),(4,'Biology','Building D, Room 501'),(5,'History','Building E, Room 601');\nINSERT INTO \"Enrollments\" (Student_id,Course_id,Semester_year,Grade) VALUES (1,1,2021,'A'),(1,2,2021,'B'),(2,3,2021,'A'),(2,4,2021,'B'),(3,5,2021,'A');\nINSERT INTO \"Rooms\" (Room_number,Building_name,Capacity,Lectures) VALUES (101,'Building A',50,'CS101 - Introduction to Computer Science'),(102,'Building A',40,'CS102 - Data Structures and Algorithms'),(103,'Building B',30,'MA101 - Calculus I'),(104,'Building B',35,'MA102 - Calculus II'),(105,'Building C',25,'PH101 - General Physics');\nINSERT INTO \"Students\" (ID,First_name,Last_name,Date_of_birth,Email) VALUES (1,'John','Doe','1998-06-15','john.doe@example.com'),(2,'Jane','Smith','1997-03-20','jane.smith@example.com'),(3,'Michael','Brown','1996-09-05','michael.brown@example.com'),(4,'Emily','White','1999-11-25','emily.white@example.com'),(5,'William','Black','2000-02-10','william.black@example.com');\nINSERT INTO \"Teachers\" (Teacher_Id,First_name,Last_name,Hire_date,Office_room_number) VALUES (1,'Dr.','Smith','2015-05-01',101),(2,'Prof.','Jones','2010-08-01',102),(3,'Assoc. Prof.','Martin','2012-11-01',103),(4,'Instructor','Wilson','2018-02-01',104),(5,'Lecturer','Garcia','2013-06-01',105);\n",
      "question": "What is the name of the building where Dr. Smith holds classes?",
      "gold_queries": [
        "SELECT Rooms.Building_name\r\nFROM ROOMS \r\n            JOIN TEACHERS ON TEACHERS.Office_room_number=ROOMS.Room_number \r\nWHERE TEACHERS.Last_name=='Smith' AND TEACHERS.First_name='Dr.'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Dr. Smith's office building",
          "sql_queries": [
            "SELECT Building_name FROM Rooms WHERE Room_number = (SELECT Office_room_number FROM Teachers WHERE First_name = 'Dr.' AND Last_name = 'Smith')"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Building A",
          "sql_queries": [
            "SELECT Room_number FROM Rooms WHERE Building_name = 'Building A'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Student/vague_2tabs_resources/vague_2tabs_resources.sqlite",
      "db_dump": "CREATE TABLE OnlineResources (\n    resourceId INTEGER PRIMARY KEY,\n    url TEXT,\n    title TEXT);\nCREATE TABLE \"TestPreparations\" (\n    preparationId INTEGER PRIMARY KEY,\n    topic TEXT,\n    resourcesId INTEGER,\n    \"servicesId\" INTEGER,\n    FOREIGN KEY(resourcesId) REFERENCES OnlineResources(resourceId),\n    FOREIGN KEY(\"servicesId\") REFERENCES TutoringServices(serviceId));\nCREATE TABLE \"TutoringServices\" (\n    serviceId INTEGER PRIMARY KEY,\n    tutorId INTEGER,\n    date TIMESTAMP,\n    duration INTEGER,\n    FOREIGN KEY(tutorId) REFERENCES Students(id));\nCREATE TABLE \"Tutors\" (\n    id INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT);\n\nINSERT INTO \"OnlineResources\" (resourceId,url,title) VALUES (1,'https://www.mathopenref.com/','Math Open Ref'),(2,'https://www.english-test.net/','English Test Net'),(3,'https://www.historyworld.org/','History World'),(4,'https://www.physicsclassroom.com/','Physics Classroom'),(5,'https://www.chemguide.co.uk/','Chem Guide');\nINSERT INTO \"TestPreparations\" (preparationId,topic,resourcesId,servicesId) VALUES (1,'Algebra',1,1),(2,'Grammar',2,2),(3,'Ancient History',3,3),(4,'Electricity and Magnetism',4,4),(5,'Organic Chemistry',5,5);\nINSERT INTO \"TutoringServices\" (serviceId,tutorId,date,duration) VALUES (1,1,'2022-12-19 18:00:00',60),(2,2,'2022-12-20 17:30:00',45),(3,3,'2022-12-21 16:00:00',60),(4,4,'2022-12-22 15:30:00',60),(5,5,'2022-12-23 17:00:00',75);\nINSERT INTO \"Tutors\" (id,firstName,lastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Michael','Brown'),(4,'Emily','White'),(5,'David','Green');\n",
      "question": "How do students prepare for the ancient history test?",
      "gold_queries": [
        "SELECT Tutors.firstname, Tutors.lastname, TutoringServices.date, TutoringServices.duration FROM TutoringServices JOIN TestPreparations ON TutoringServices.serviceId = TestPreparations.servicesId JOIN Tutors ON Tutors.id = TutoringServices.tutorId WHERE topic  = 'Ancient History'",
        "SELECT OnlineResources.title, OnlineResources.url FROM OnlineResources JOIN TestPreparations ON OnlineResources.resourceID = TestPreparations.resourcesID WHERE topic  = 'Ancient History'",
        "SELECT Tutors.firstname, Tutors.lastname, TutoringServices.date, TutoringServices.duration, OnlineResources.title, OnlineResources.url FROM TutoringServices JOIN TestPreparations ON TutoringServices.serviceId = TestPreparations.servicesId JOIN OnlineResources ON OnlineResources.resourceID = TestPreparations.resourcesID JOIN Tutors ON Tutors.id = TutoringServices.tutorId WHERE topic  = 'Ancient History'"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What resources are used for studying ancient history?",
          "sql_queries": [
            "SELECT url, title FROM OnlineResources WHERE resourceId = (SELECT resourcesId FROM TestPreparations WHERE topic = 'Ancient History')"
          ],
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Which preparationId corresponds to ancient history?",
          "sql_queries": [
            "SELECT preparationId FROM TestPreparations WHERE topic = 'Ancient History'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "What OnlineResources are referenced in the preparations for the ancient history test?",
          "sql_queries": [
            "SELECT url, title FROM OnlineResources WHERE resourceId = (SELECT resourcesId FROM TestPreparations WHERE topic = 'Ancient History')"
          ],
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Identify all tutors involved in ancient history tutoring sessions.",
          "sql_queries": [
            "SELECT Tutors.firstName, Tutors.lastName\nFROM Tutors\nJOIN TutoringServices ON Tutors.id = TutoringServices.tutorId\nJOIN TestPreparations ON TutoringServices.serviceId = TestPreparations.servicesId\nWHERE TestPreparations.topic = 'Ancient History'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all TestPreparations entries related to ancient history.",
          "sql_queries": [
            "SELECT * FROM TestPreparations WHERE topic = 'Ancient History'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.3333333333333333,
        "precision": 0.25,
        "f1_score": 0.28571428571428575,
        "num_queries": 5,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Student/vague_2tabs_resources/vague_2tabs_resources.sqlite",
      "db_dump": "CREATE TABLE OnlineResources (\n    resourceId INTEGER PRIMARY KEY,\n    url TEXT,\n    title TEXT);\nCREATE TABLE \"TestPreparations\" (\n    preparationId INTEGER PRIMARY KEY,\n    topic TEXT,\n    resourcesId INTEGER,\n    \"servicesId\" INTEGER,\n    FOREIGN KEY(resourcesId) REFERENCES OnlineResources(resourceId),\n    FOREIGN KEY(\"servicesId\") REFERENCES TutoringServices(serviceId));\nCREATE TABLE \"TutoringServices\" (\n    serviceId INTEGER PRIMARY KEY,\n    tutorId INTEGER,\n    date TIMESTAMP,\n    duration INTEGER,\n    FOREIGN KEY(tutorId) REFERENCES Students(id));\nCREATE TABLE \"Tutors\" (\n    id INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT);\n\nINSERT INTO \"OnlineResources\" (resourceId,url,title) VALUES (1,'https://www.mathopenref.com/','Math Open Ref'),(2,'https://www.english-test.net/','English Test Net'),(3,'https://www.historyworld.org/','History World'),(4,'https://www.physicsclassroom.com/','Physics Classroom'),(5,'https://www.chemguide.co.uk/','Chem Guide');\nINSERT INTO \"TestPreparations\" (preparationId,topic,resourcesId,servicesId) VALUES (1,'Algebra',1,1),(2,'Grammar',2,2),(3,'Ancient History',3,3),(4,'Electricity and Magnetism',4,4),(5,'Organic Chemistry',5,5);\nINSERT INTO \"TutoringServices\" (serviceId,tutorId,date,duration) VALUES (1,1,'2022-12-19 18:00:00',60),(2,2,'2022-12-20 17:30:00',45),(3,3,'2022-12-21 16:00:00',60),(4,4,'2022-12-22 15:30:00',60),(5,5,'2022-12-23 17:00:00',75);\nINSERT INTO \"Tutors\" (id,firstName,lastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Michael','Brown'),(4,'Emily','White'),(5,'David','Green');\n",
      "question": "Which online resources are students using for the ancient history test?",
      "gold_queries": [
        "SELECT OnlineResources.title, OnlineResources.url FROM OnlineResources JOIN TestPreparations ON OnlineResources.resourceID = TestPreparations.resourcesID WHERE topic  = 'Ancient History'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Determine the specific url and title of the online resource used by students preparing for the ancient history test.",
          "sql_queries": [
            "SELECT T1.url, T1.title FROM OnlineResources AS T1 JOIN TestPreparations AS T2 ON T1.resourceId = T2.resourcesId WHERE T2.topic = 'Ancient History'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Identify all online resources referenced in test preparations for the topic \"Ancient History\".",
          "sql_queries": [
            "SELECT url, title FROM OnlineResources WHERE resourceId = (SELECT resourcesId FROM TestPreparations WHERE topic = 'Ancient History')"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "List the online resources that have a foreign key relationship with \"TestPreparations\" where the topic is \"Ancient History\".",
          "sql_queries": [
            "SELECT url, title FROM OnlineResources WHERE resourceId = (SELECT resourcesId FROM TestPreparations WHERE topic = 'Ancient History')"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Find all resources accessed through the \"TestPreparations\" table where the topic is \"Ancient History\".",
          "sql_queries": [
            "SELECT url, title \nFROM OnlineResources \nWHERE resourceId = (SELECT resourcesId FROM TestPreparations WHERE topic = 'Ancient History')"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 4,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 4
    },
    {
      "db_file": "data/vague/Student/vague_2tabs_resources/vague_2tabs_resources.sqlite",
      "db_dump": "CREATE TABLE OnlineResources (\n    resourceId INTEGER PRIMARY KEY,\n    url TEXT,\n    title TEXT);\nCREATE TABLE \"TestPreparations\" (\n    preparationId INTEGER PRIMARY KEY,\n    topic TEXT,\n    resourcesId INTEGER,\n    \"servicesId\" INTEGER,\n    FOREIGN KEY(resourcesId) REFERENCES OnlineResources(resourceId),\n    FOREIGN KEY(\"servicesId\") REFERENCES TutoringServices(serviceId));\nCREATE TABLE \"TutoringServices\" (\n    serviceId INTEGER PRIMARY KEY,\n    tutorId INTEGER,\n    date TIMESTAMP,\n    duration INTEGER,\n    FOREIGN KEY(tutorId) REFERENCES Students(id));\nCREATE TABLE \"Tutors\" (\n    id INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT);\n\nINSERT INTO \"OnlineResources\" (resourceId,url,title) VALUES (1,'https://www.mathopenref.com/','Math Open Ref'),(2,'https://www.english-test.net/','English Test Net'),(3,'https://www.historyworld.org/','History World'),(4,'https://www.physicsclassroom.com/','Physics Classroom'),(5,'https://www.chemguide.co.uk/','Chem Guide');\nINSERT INTO \"TestPreparations\" (preparationId,topic,resourcesId,servicesId) VALUES (1,'Algebra',1,1),(2,'Grammar',2,2),(3,'Ancient History',3,3),(4,'Electricity and Magnetism',4,4),(5,'Organic Chemistry',5,5);\nINSERT INTO \"TutoringServices\" (serviceId,tutorId,date,duration) VALUES (1,1,'2022-12-19 18:00:00',60),(2,2,'2022-12-20 17:30:00',45),(3,3,'2022-12-21 16:00:00',60),(4,4,'2022-12-22 15:30:00',60),(5,5,'2022-12-23 17:00:00',75);\nINSERT INTO \"Tutors\" (id,firstName,lastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Michael','Brown'),(4,'Emily','White'),(5,'David','Green');\n",
      "question": "What can help students prepare for testing?",
      "gold_queries": [
        "SELECT Tutors.firstname, Tutors.lastname, TutoringServices.date, TutoringServices.duration FROM TutoringServices JOIN Tutors ON Tutors.id = TutoringServices.tutorId ",
        "SELECT OnlineResources.title, OnlineResources.url FROM OnlineResources",
        "SELECT Tutors.firstname, Tutors.lastname, TutoringServices.date, TutoringServices.duration, OnlineResources.title, OnlineResources.url FROM TutoringServices JOIN TestPreparations ON TutoringServices.serviceId = TestPreparations.servicesId  JOIN OnlineResources ON OnlineResources.resourceID = TestPreparations.resourcesID JOIN Tutors ON Tutors.id = TutoringServices.tutorId"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What online resources are listed in the \"TestPreparations\" table?",
          "sql_queries": [
            "SELECT T2.title FROM TestPreparations AS T1 JOIN OnlineResources AS T2 ON T1.resourcesId = T2.resourceId"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Can the database information be used to identify resources helpful for specific test preparation needs?",
          "sql_queries": [
            "SELECT T1.title, T2.topic \nFROM OnlineResources AS T1 \nJOIN TestPreparations AS T2 ON T1.resourceId = T2.resourcesId"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Which tutoring services are relevant to test preparation?",
          "sql_queries": [
            "SELECT preparationId, topic, T2.serviceId, T2.tutorId, T2.date, T2.duration \nFROM TestPreparations AS T1 \nJOIN TutoringServices AS T2 \nON T1.servicesId = T2.serviceId"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "What resources are linked to specific test preparation topics in the database?",
          "sql_queries": [
            "SELECT topic, url, title \nFROM TestPreparations \nJOIN OnlineResources ON TestPreparations.resourcesId = OnlineResources.resourceId"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "What is the relationship between online resources, tutoring services, and test preparation in the database?",
          "sql_queries": [
            "SELECT TestPreparations.topic, OnlineResources.title, TutoringServices.date\nFROM TestPreparations\nJOIN OnlineResources ON TestPreparations.resourcesId = OnlineResources.resourceId\nJOIN TutoringServices ON TestPreparations.servicesId = TutoringServices.serviceId"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Student/vague_2tabs_resources/vague_2tabs_resources.sqlite",
      "db_dump": "CREATE TABLE OnlineResources (\n    resourceId INTEGER PRIMARY KEY,\n    url TEXT,\n    title TEXT);\nCREATE TABLE \"TestPreparations\" (\n    preparationId INTEGER PRIMARY KEY,\n    topic TEXT,\n    resourcesId INTEGER,\n    \"servicesId\" INTEGER,\n    FOREIGN KEY(resourcesId) REFERENCES OnlineResources(resourceId),\n    FOREIGN KEY(\"servicesId\") REFERENCES TutoringServices(serviceId));\nCREATE TABLE \"TutoringServices\" (\n    serviceId INTEGER PRIMARY KEY,\n    tutorId INTEGER,\n    date TIMESTAMP,\n    duration INTEGER,\n    FOREIGN KEY(tutorId) REFERENCES Students(id));\nCREATE TABLE \"Tutors\" (\n    id INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT);\n\nINSERT INTO \"OnlineResources\" (resourceId,url,title) VALUES (1,'https://www.mathopenref.com/','Math Open Ref'),(2,'https://www.english-test.net/','English Test Net'),(3,'https://www.historyworld.org/','History World'),(4,'https://www.physicsclassroom.com/','Physics Classroom'),(5,'https://www.chemguide.co.uk/','Chem Guide');\nINSERT INTO \"TestPreparations\" (preparationId,topic,resourcesId,servicesId) VALUES (1,'Algebra',1,1),(2,'Grammar',2,2),(3,'Ancient History',3,3),(4,'Electricity and Magnetism',4,4),(5,'Organic Chemistry',5,5);\nINSERT INTO \"TutoringServices\" (serviceId,tutorId,date,duration) VALUES (1,1,'2022-12-19 18:00:00',60),(2,2,'2022-12-20 17:30:00',45),(3,3,'2022-12-21 16:00:00',60),(4,4,'2022-12-22 15:30:00',60),(5,5,'2022-12-23 17:00:00',75);\nINSERT INTO \"Tutors\" (id,firstName,lastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Michael','Brown'),(4,'Emily','White'),(5,'David','Green');\n",
      "question": "Show all tutoring services students can use for test prep.",
      "gold_queries": [
        "SELECT Tutors.firstname, Tutors.lastname, TutoringServices.date, TutoringServices.duration FROM TutoringServices JOIN Tutors ON Tutors.id = TutoringServices.tutorId "
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Show all tutoring services that are linked to resources used for test preparation.",
          "sql_queries": [
            "SELECT DISTINCT T1.serviceId, T1.tutorId, T1.date, T1.duration\nFROM TutoringServices AS T1\nJOIN TestPreparations AS T2 ON T1.serviceId = T2.servicesId"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all tutoring services that have a related preparation.",
          "sql_queries": [
            "SELECT DISTINCT T1.serviceId, T1.tutorId, T1.date, T1.duration\nFROM TutoringServices AS T1\nJOIN TestPreparations AS T2 ON T1.serviceId = T2.servicesId"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve all tutoring services associated with preparations for tests.",
          "sql_queries": [
            "SELECT tutoringServices.serviceId, tutoringServices.tutorId, tutoringServices.date, tutoringServices.duration\nFROM tutoringServices\nJOIN testPreparations ON tutoringServices.serviceId = testPreparations.servicesId"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Display all tutoring services where the `servicesId` column in the \"TestPreparations\" table is not NULL.",
          "sql_queries": [
            "SELECT * FROM TutoringServices WHERE serviceId IN (SELECT servicesId FROM TestPreparations WHERE servicesId IS NOT NULL)"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Present a list of all tutoring services for topics covered in the \"TestPreparations\" table.",
          "sql_queries": [
            "SELECT T2.date, T2.duration, T3.firstName, T3.lastName, T1.topic \nFROM TestPreparations AS T1 \nJOIN TutoringServices AS T2 ON T1.servicesId = T2.serviceId \nJOIN Tutors AS T3 ON T2.tutorId = T3.id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Student/vague_2tabs_resources/vague_2tabs_resources.sqlite",
      "db_dump": "CREATE TABLE OnlineResources (\n    resourceId INTEGER PRIMARY KEY,\n    url TEXT,\n    title TEXT);\nCREATE TABLE \"TestPreparations\" (\n    preparationId INTEGER PRIMARY KEY,\n    topic TEXT,\n    resourcesId INTEGER,\n    \"servicesId\" INTEGER,\n    FOREIGN KEY(resourcesId) REFERENCES OnlineResources(resourceId),\n    FOREIGN KEY(\"servicesId\") REFERENCES TutoringServices(serviceId));\nCREATE TABLE \"TutoringServices\" (\n    serviceId INTEGER PRIMARY KEY,\n    tutorId INTEGER,\n    date TIMESTAMP,\n    duration INTEGER,\n    FOREIGN KEY(tutorId) REFERENCES Students(id));\nCREATE TABLE \"Tutors\" (\n    id INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT);\n\nINSERT INTO \"OnlineResources\" (resourceId,url,title) VALUES (1,'https://www.mathopenref.com/','Math Open Ref'),(2,'https://www.english-test.net/','English Test Net'),(3,'https://www.historyworld.org/','History World'),(4,'https://www.physicsclassroom.com/','Physics Classroom'),(5,'https://www.chemguide.co.uk/','Chem Guide');\nINSERT INTO \"TestPreparations\" (preparationId,topic,resourcesId,servicesId) VALUES (1,'Algebra',1,1),(2,'Grammar',2,2),(3,'Ancient History',3,3),(4,'Electricity and Magnetism',4,4),(5,'Organic Chemistry',5,5);\nINSERT INTO \"TutoringServices\" (serviceId,tutorId,date,duration) VALUES (1,1,'2022-12-19 18:00:00',60),(2,2,'2022-12-20 17:30:00',45),(3,3,'2022-12-21 16:00:00',60),(4,4,'2022-12-22 15:30:00',60),(5,5,'2022-12-23 17:00:00',75);\nINSERT INTO \"Tutors\" (id,firstName,lastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Michael','Brown'),(4,'Emily','White'),(5,'David','Green');\n",
      "question": "Show all tutoring services and online resources students can use for test prep.",
      "gold_queries": [
        "SELECT Tutors.firstname, Tutors.lastname, TutoringServices.date, TutoringServices.duration, OnlineResources.title, OnlineResources.url FROM TutoringServices JOIN TestPreparations ON TutoringServices.serviceId = TestPreparations.servicesId  JOIN OnlineResources ON OnlineResources.resourceID = TestPreparations.resourcesID JOIN Tutors ON Tutors.id = TutoringServices.tutorId"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "FROM TutoringServices t",
          "sql_queries": [
            "SELECT t.duration FROM TutoringServices t"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Select * FROM OnlineResources",
          "sql_queries": [
            "SELECT * FROM OnlineResources"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "FROM TestPreparations tp",
          "sql_queries": [
            "SELECT topic FROM TestPreparations tp"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Select tp.topic, r.url, r.title",
          "sql_queries": [
            "SELECT tp.topic, r.url, r.title FROM TestPreparations tp JOIN OnlineResources r ON tp.resourcesId = r.resourceId"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "FROM Tutors t",
          "sql_queries": [
            "SELECT t.firstName, t.lastName FROM Tutors t"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Select * FROM TutoringServices",
          "sql_queries": [
            "SELECT * FROM TutoringServices"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "JOIN TestPreparations tp ON t.id = tp.tutorId",
          "sql_queries": [
            "SELECT t.firstName, t.lastName, tp.topic\nFROM Tutors t\nJOIN TestPreparations tp ON t.id = tp.tutorId"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT t.firstName, t.lastName, tp.topic\nFROM Tutors t\nJOIN TestPreparations tp ON t.id = tp.tutorId",
                "original_exception": "no such column: tp.tutorId"
              }
            ],
            "all_found": false
          }
        },
        {
          "interpretation": "JOIN OnlineResources r ON tp.resourcesId = r.resourceId",
          "sql_queries": [
            "SELECT r.url, r.title \nFROM TestPreparations tp \nJOIN OnlineResources r ON tp.resourcesId = r.resourceId"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "JOIN TestPreparations tp ON t.serviceId = tp.servicesId",
          "sql_queries": [
            "SELECT t.serviceId, t.tutorId, t.date, t.duration, tp.topic, tp.resourcesId\nFROM TutoringServices t\nJOIN TestPreparations tp ON t.serviceId = tp.servicesId"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Select t.serviceId, t.tutorId, t.date, t.duration, r.resourceId, r.url, r.title",
          "sql_queries": [
            "SELECT t.serviceId, t.tutorId, t.date, t.duration, r.resourceId, r.url, r.title\nFROM TutoringServices t\nJOIN TestPreparations tp ON t.serviceId = tp.servicesId\nJOIN OnlineResources r ON tp.resourcesId = r.resourceId"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Select t.firstName, t.lastName, r.url, r.title",
          "sql_queries": [
            "SELECT t.firstName, t.lastName, r.url, r.title\nFROM TutoringServices ts\nJOIN Tutors t ON ts.tutorId = t.id\nJOIN TestPreparations tp ON ts.serviceId = tp.servicesId\nJOIN OnlineResources r ON tp.resourcesId = r.resourceId"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 11,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 11,
        "num_unique_queries": 11,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [
          {
            "query": "SELECT t.firstName, t.lastName, tp.topic\nFROM Tutors t\nJOIN TestPreparations tp ON t.id = tp.tutorId",
            "original_exception": "no such column: tp.tutorId"
          }
        ],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Student/vague_2tabs_resources/vague_2tabs_resources.sqlite",
      "db_dump": "CREATE TABLE OnlineResources (\n    resourceId INTEGER PRIMARY KEY,\n    url TEXT,\n    title TEXT);\nCREATE TABLE \"TestPreparations\" (\n    preparationId INTEGER PRIMARY KEY,\n    topic TEXT,\n    resourcesId INTEGER,\n    \"servicesId\" INTEGER,\n    FOREIGN KEY(resourcesId) REFERENCES OnlineResources(resourceId),\n    FOREIGN KEY(\"servicesId\") REFERENCES TutoringServices(serviceId));\nCREATE TABLE \"TutoringServices\" (\n    serviceId INTEGER PRIMARY KEY,\n    tutorId INTEGER,\n    date TIMESTAMP,\n    duration INTEGER,\n    FOREIGN KEY(tutorId) REFERENCES Students(id));\nCREATE TABLE \"Tutors\" (\n    id INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT);\n\nINSERT INTO \"OnlineResources\" (resourceId,url,title) VALUES (1,'https://www.mathopenref.com/','Math Open Ref'),(2,'https://www.english-test.net/','English Test Net'),(3,'https://www.historyworld.org/','History World'),(4,'https://www.physicsclassroom.com/','Physics Classroom'),(5,'https://www.chemguide.co.uk/','Chem Guide');\nINSERT INTO \"TestPreparations\" (preparationId,topic,resourcesId,servicesId) VALUES (1,'Algebra',1,1),(2,'Grammar',2,2),(3,'Ancient History',3,3),(4,'Electricity and Magnetism',4,4),(5,'Organic Chemistry',5,5);\nINSERT INTO \"TutoringServices\" (serviceId,tutorId,date,duration) VALUES (1,1,'2022-12-19 18:00:00',60),(2,2,'2022-12-20 17:30:00',45),(3,3,'2022-12-21 16:00:00',60),(4,4,'2022-12-22 15:30:00',60),(5,5,'2022-12-23 17:00:00',75);\nINSERT INTO \"Tutors\" (id,firstName,lastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Michael','Brown'),(4,'Emily','White'),(5,'David','Green');\n",
      "question": "Which tutoring services are students using for the ancient history test?",
      "gold_queries": [
        "SELECT Tutors.firstname, Tutors.lastname, TutoringServices.date, TutoringServices.duration FROM TutoringServices JOIN TestPreparations ON TutoringServices.serviceId = TestPreparations.servicesId JOIN Tutors ON Tutors.id = TutoringServices.tutorId WHERE topic  = 'Ancient History'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Find tutoring services related to the preparationId associated with the topic 'Ancient History'.",
          "sql_queries": [
            "SELECT T2.serviceId, T2.tutorId, T2.date, T2.duration \nFROM TestPreparations AS T1 \nJOIN TutoringServices AS T2 \nON T1.servicesId = T2.serviceId \nWHERE T1.topic = 'Ancient History'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Identify tutoring services used by students preparing for tests on ancient history.",
          "sql_queries": [
            "SELECT TutoringServices.*\nFROM TutoringServices\nJOIN TestPreparations ON TutoringServices.serviceId = TestPreparations.servicesId\nWHERE TestPreparations.topic = 'Ancient History'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Determine the serviceId of tutoring sessions booked for topics related to ancient history.",
          "sql_queries": [
            "SELECT servicesId FROM TestPreparations WHERE topic = 'Ancient History'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Student/vague_2tabs_resources/vague_2tabs_resources.sqlite",
      "db_dump": "CREATE TABLE OnlineResources (\n    resourceId INTEGER PRIMARY KEY,\n    url TEXT,\n    title TEXT);\nCREATE TABLE \"TestPreparations\" (\n    preparationId INTEGER PRIMARY KEY,\n    topic TEXT,\n    resourcesId INTEGER,\n    \"servicesId\" INTEGER,\n    FOREIGN KEY(resourcesId) REFERENCES OnlineResources(resourceId),\n    FOREIGN KEY(\"servicesId\") REFERENCES TutoringServices(serviceId));\nCREATE TABLE \"TutoringServices\" (\n    serviceId INTEGER PRIMARY KEY,\n    tutorId INTEGER,\n    date TIMESTAMP,\n    duration INTEGER,\n    FOREIGN KEY(tutorId) REFERENCES Students(id));\nCREATE TABLE \"Tutors\" (\n    id INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT);\n\nINSERT INTO \"OnlineResources\" (resourceId,url,title) VALUES (1,'https://www.mathopenref.com/','Math Open Ref'),(2,'https://www.english-test.net/','English Test Net'),(3,'https://www.historyworld.org/','History World'),(4,'https://www.physicsclassroom.com/','Physics Classroom'),(5,'https://www.chemguide.co.uk/','Chem Guide');\nINSERT INTO \"TestPreparations\" (preparationId,topic,resourcesId,servicesId) VALUES (1,'Algebra',1,1),(2,'Grammar',2,2),(3,'Ancient History',3,3),(4,'Electricity and Magnetism',4,4),(5,'Organic Chemistry',5,5);\nINSERT INTO \"TutoringServices\" (serviceId,tutorId,date,duration) VALUES (1,1,'2022-12-19 18:00:00',60),(2,2,'2022-12-20 17:30:00',45),(3,3,'2022-12-21 16:00:00',60),(4,4,'2022-12-22 15:30:00',60),(5,5,'2022-12-23 17:00:00',75);\nINSERT INTO \"Tutors\" (id,firstName,lastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Michael','Brown'),(4,'Emily','White'),(5,'David','Green');\n",
      "question": "Show all online resources students can use for test prep.",
      "gold_queries": [
        "SELECT OnlineResources.title, OnlineResources.url FROM OnlineResources"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Identify the online resources available to students for their test preparations.",
          "sql_queries": [
            "SELECT url, title FROM OnlineResources"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Retrieve all entries from the 'OnlineResources' table where 'resourceId' is referenced in the 'resourcesId' column of the 'TestPreparations' table.",
          "sql_queries": [
            "SELECT * FROM OnlineResources WHERE resourceId IN (SELECT resourcesId FROM TestPreparations)"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Return a list of URLs from the 'OnlineResources' table that are associated with test preparations in the 'TestPreparations' table.",
          "sql_queries": [
            "SELECT url FROM OnlineResources WHERE resourceId IN (SELECT resourcesId FROM TestPreparations)"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all distinct values in the 'title' column of the 'OnlineResources' table.",
          "sql_queries": [
            "SELECT DISTINCT title FROM OnlineResources"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Display the titles of all online resources used for test preparation.",
          "sql_queries": [
            "SELECT title FROM OnlineResources"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Traffic/vague_2cols_location/vague_2cols_location.sqlite",
      "db_dump": "CREATE TABLE Accidents (\n    AccidentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Date DATETIME,\n    LocationID INTEGER,\n    Severity VARCHAR(50),\n    FOREIGN KEY (LocationID) REFERENCES Streets (StreetID)\n);\nCREATE TABLE RoadWorks (\n    WorkID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StartDate DATETIME,\n    EndDate DATETIME,\n    StreetID INTEGER,\n    WorkType VARCHAR(50),\n    FOREIGN KEY (StreetID) REFERENCES Streets (StreetID)\n);\nCREATE TABLE SpeedingTickets (\n    TicketID INTEGER PRIMARY KEY AUTOINCREMENT,\n    IssueDate DATETIME,\n    OffenderVehicleID INTEGER,\n    FineAmount DECIMAL(8,2),\n    FOREIGN KEY (OffenderVehicleID) REFERENCES Vehicles (VehicleID)\n);\nCREATE TABLE Streets (\n    StreetID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Street_Name TEXT,\n    Block_Number INTEGER,\n    Bus_Stop BOOLEAN DEFAULT FALSE,\n    NumLanes INTEGER,\n    MaxSpeed MPH\n);\nCREATE TABLE Users (\n    UserID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName VARCHAR(50),\n    LastName VARCHAR(50),\n    Email VARCHAR(100),\n    PhoneNumber VARCHAR(15)\n);\nCREATE TABLE Vehicles (\n    VehicleID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Type VARCHAR(20),\n    LicensePlate CHAR(7),\n    OwnerID INTEGER,\n    FOREIGN KEY (OwnerID) REFERENCES Users (UserID)\n);\n\nINSERT INTO \"Accidents\" (AccidentID,Date,LocationID,Severity) VALUES (1,'2022-01-01 10:00:00',1,'Minor'),(2,'2022-02-01 14:30:00',2,'Moderate'),(3,'2022-03-01 19:00:00',3,'Major'),(4,'2022-04-01 23:30:00',4,'Catastrophic'),(5,'2022-05-01 01:00:00',5,'Fatal');\nINSERT INTO \"RoadWorks\" (WorkID,StartDate,EndDate,StreetID,WorkType) VALUES (1,'2022-06-01 08:00:00','2022-06-02 18:00:00',1,'Repair'),(2,'2022-07-01 08:00:00','2022-07-02 18:00:00',2,'Resurfacing'),(3,'2022-08-01 08:00:00','2022-08-02 18:00:00',3,'Construction'),(4,'2022-09-01 08:00:00','2022-09-02 18:00:00',4,'Drainage'),(5,'2022-10-01 08:00:00','2022-10-02 18:00:00',5,'Landscaping');\nINSERT INTO \"SpeedingTickets\" (TicketID,IssueDate,OffenderVehicleID,FineAmount) VALUES (1,'2022-01-15 12:34:56',1,50),(2,'2022-02-15 12:34:56',2,100),(3,'2022-03-15 12:34:56',3,75),(4,'2022-04-15 12:34:56',4,125),(5,'2022-05-15 12:34:56',5,150);\nINSERT INTO \"Streets\" (StreetID,Street_Name,Block_Number,Bus_Stop,NumLanes,MaxSpeed) VALUES (1,'Main St',123,1,2,30),(2,'Elm St',456,0,1,25),(3,'Pine Ave',789,1,2,30),(4,'Maple Dr',101,0,2,25),(5,'Oak Blvd',123,1,4,40);\nINSERT INTO \"Users\" (UserID,FirstName,LastName,Email,PhoneNumber) VALUES (1,'John','Doe','john.doe@example.com','+1234567890'),(2,'Jane','Smith','jane.smith@example.com','+0987654321'),(3,'Alice','Brown','alice.brown@example.com','+1123456789'),(4,'Bob','White','bob.white@example.com','+0987654321'),(5,'Charlie','Black','charlie.black@example.com','+1123456789');\nINSERT INTO \"Vehicles\" (VehicleID,Type,LicensePlate,OwnerID) VALUES (1,'Car','ABC123',1),(2,'Truck','DEF456',2),(3,'SUV','GHI789',3),(4,'Motorcycle','JKL012',4),(5,'Van','LMN321',5);\n",
      "question": "Which block number is having the street resurfaced?",
      "gold_queries": [
        "select Block_Number from streets join roadworks on Streets.StreetID = roadworks.StreetID where WorkType = 'Resurfacing'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Block number associated with the RoadWorks.",
          "sql_queries": [
            "SELECT Block_Number FROM Streets WHERE StreetID IN (SELECT StreetID FROM RoadWorks)"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Block number of the street where work type is \"Resurfacing\".",
          "sql_queries": [
            "SELECT T1.Block_Number FROM Streets AS T1 JOIN RoadWorks AS T2 ON T1.StreetID = T2.StreetID WHERE T2.WorkType = 'Resurfacing'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Block number of the street resurfaced.",
          "sql_queries": [
            "SELECT Block_Number \nFROM Streets \nWHERE StreetID = (\n    SELECT StreetID \n    FROM RoadWorks \n    WHERE WorkType = 'Resurfacing'\n)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.6666666666666666,
        "f1_score": 0.8,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Traffic/vague_2cols_location/vague_2cols_location.sqlite",
      "db_dump": "CREATE TABLE Accidents (\n    AccidentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Date DATETIME,\n    LocationID INTEGER,\n    Severity VARCHAR(50),\n    FOREIGN KEY (LocationID) REFERENCES Streets (StreetID)\n);\nCREATE TABLE RoadWorks (\n    WorkID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StartDate DATETIME,\n    EndDate DATETIME,\n    StreetID INTEGER,\n    WorkType VARCHAR(50),\n    FOREIGN KEY (StreetID) REFERENCES Streets (StreetID)\n);\nCREATE TABLE SpeedingTickets (\n    TicketID INTEGER PRIMARY KEY AUTOINCREMENT,\n    IssueDate DATETIME,\n    OffenderVehicleID INTEGER,\n    FineAmount DECIMAL(8,2),\n    FOREIGN KEY (OffenderVehicleID) REFERENCES Vehicles (VehicleID)\n);\nCREATE TABLE Streets (\n    StreetID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Street_Name TEXT,\n    Block_Number INTEGER,\n    Bus_Stop BOOLEAN DEFAULT FALSE,\n    NumLanes INTEGER,\n    MaxSpeed MPH\n);\nCREATE TABLE Users (\n    UserID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName VARCHAR(50),\n    LastName VARCHAR(50),\n    Email VARCHAR(100),\n    PhoneNumber VARCHAR(15)\n);\nCREATE TABLE Vehicles (\n    VehicleID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Type VARCHAR(20),\n    LicensePlate CHAR(7),\n    OwnerID INTEGER,\n    FOREIGN KEY (OwnerID) REFERENCES Users (UserID)\n);\n\nINSERT INTO \"Accidents\" (AccidentID,Date,LocationID,Severity) VALUES (1,'2022-01-01 10:00:00',1,'Minor'),(2,'2022-02-01 14:30:00',2,'Moderate'),(3,'2022-03-01 19:00:00',3,'Major'),(4,'2022-04-01 23:30:00',4,'Catastrophic'),(5,'2022-05-01 01:00:00',5,'Fatal');\nINSERT INTO \"RoadWorks\" (WorkID,StartDate,EndDate,StreetID,WorkType) VALUES (1,'2022-06-01 08:00:00','2022-06-02 18:00:00',1,'Repair'),(2,'2022-07-01 08:00:00','2022-07-02 18:00:00',2,'Resurfacing'),(3,'2022-08-01 08:00:00','2022-08-02 18:00:00',3,'Construction'),(4,'2022-09-01 08:00:00','2022-09-02 18:00:00',4,'Drainage'),(5,'2022-10-01 08:00:00','2022-10-02 18:00:00',5,'Landscaping');\nINSERT INTO \"SpeedingTickets\" (TicketID,IssueDate,OffenderVehicleID,FineAmount) VALUES (1,'2022-01-15 12:34:56',1,50),(2,'2022-02-15 12:34:56',2,100),(3,'2022-03-15 12:34:56',3,75),(4,'2022-04-15 12:34:56',4,125),(5,'2022-05-15 12:34:56',5,150);\nINSERT INTO \"Streets\" (StreetID,Street_Name,Block_Number,Bus_Stop,NumLanes,MaxSpeed) VALUES (1,'Main St',123,1,2,30),(2,'Elm St',456,0,1,25),(3,'Pine Ave',789,1,2,30),(4,'Maple Dr',101,0,2,25),(5,'Oak Blvd',123,1,4,40);\nINSERT INTO \"Users\" (UserID,FirstName,LastName,Email,PhoneNumber) VALUES (1,'John','Doe','john.doe@example.com','+1234567890'),(2,'Jane','Smith','jane.smith@example.com','+0987654321'),(3,'Alice','Brown','alice.brown@example.com','+1123456789'),(4,'Bob','White','bob.white@example.com','+0987654321'),(5,'Charlie','Black','charlie.black@example.com','+1123456789');\nINSERT INTO \"Vehicles\" (VehicleID,Type,LicensePlate,OwnerID) VALUES (1,'Car','ABC123',1),(2,'Truck','DEF456',2),(3,'SUV','GHI789',3),(4,'Motorcycle','JKL012',4),(5,'Van','LMN321',5);\n",
      "question": "where does the resurfacing take place?",
      "gold_queries": [
        "select Street_Name from streets join roadworks on Streets.StreetID = roadworks.StreetID where WorkType = 'Resurfacing'",
        "select Block_Number from streets join roadworks on Streets.StreetID = roadworks.StreetID where WorkType = 'Resurfacing'",
        "select Street_Name, Block_Number from streets join roadworks on Streets.StreetID = roadworks.StreetID where WorkType = 'Resurfacing'"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Which Streets have RoadWorks classified as 'Resurfacing'?",
          "sql_queries": [
            "SELECT Street_Name FROM Streets WHERE StreetID IN (SELECT StreetID FROM RoadWorks WHERE WorkType = 'Resurfacing')"
          ],
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "What are the Street Locations of  RoadWorks of type 'Resurfacing'?",
          "sql_queries": [
            "SELECT Streets.Street_Name\nFROM RoadWorks\nJOIN Streets ON RoadWorks.StreetID = Streets.StreetID\nWHERE RoadWorks.WorkType = 'Resurfacing'"
          ],
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Where are RoadWorks with WorkType 'Resurfacing' located?",
          "sql_queries": [
            "SELECT Street_Name FROM Streets WHERE StreetID IN (SELECT StreetID FROM RoadWorks WHERE WorkType = 'Resurfacing')"
          ],
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Located on which Streets are the resurfacing RoadWorks taking place?",
          "sql_queries": [
            "SELECT Street_Name\nFROM Streets\nWHERE StreetID IN (\n    SELECT StreetID\n    FROM RoadWorks\n    WHERE WorkType = 'Resurfacing'\n)"
          ],
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.3333333333333333,
        "precision": 1.0,
        "f1_score": 0.5,
        "num_queries": 4,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 4
    },
    {
      "db_file": "data/vague/Traffic/vague_2cols_commute_time/vague_2cols_commute_time.sqlite",
      "db_dump": "CREATE TABLE Accidents (\n    accident_date DATE,\n    neighborhood_id INTEGER,\n    num_accident INT ,\n    FOREIGN KEY(neighborhood_id) REFERENCES Neighborhood(id)\n);\nCREATE TABLE DailyTrafficVolume (\n    date DATE,\n    neighborhood_id INTEGER,\n    total_traffic INT ,\n    FOREIGN KEY(neighborhood_id) REFERENCES Neighborhood(id)\n);\nCREATE TABLE Neighborhood (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    population INTEGER ,\n    mean_commute_time REAL ,\n    median_commute_time REAL \n);\nCREATE TABLE SpeedLimits (\n    road_segment_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    street_name TEXT,\n    neighborhood_id INTEGER,\n    start_point LATITUDE,\n    end_point LONGITUDE,\n    max_limit INT ,\n    min_limit INT ,\n    FOREIGN KEY(neighborhood_id) REFERENCES Neighborhood(id)\n);\nCREATE TABLE VehicleType (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type_name VARCHAR(255),\n    count_passing INT \n);\nCREATE TABLE WeatherConditions (\n    condition_datetime DATETIME,\n    neighborhood_id INTEGER,\n    rainfall DECIMAL(10,2) ,\n    temperature DECIMAL(10,2) ,\n    windspeed MPH ,\n    FOREIGN KEY(neighborhood_id) REFERENCES Neighborhood(id)\n);\n\nINSERT INTO \"Accidents\" (accident_date,neighborhood_id,num_accident) VALUES ('2022-01-01',1,2),('2022-01-02',2,4),('2022-01-03',3,3),('2022-01-04',4,5),('2022-01-05',5,2);\nINSERT INTO \"DailyTrafficVolume\" (date,neighborhood_id,total_traffic) VALUES ('2022-01-01',1,3000),('2022-01-02',2,4500),('2022-01-03',3,6000),('2022-01-04',4,5500),('2022-01-05',5,4200);\nINSERT INTO \"Neighborhood\" (id,name,population,mean_commute_time,median_commute_time) VALUES (1,'Downtown',8000,30.5,27.6),(2,'Midtown',9500,28.5,25.3),(3,'Southside',11000,29.8,27.2),(4,'Northside',12000,30.2,26.9),(5,'Eastside',8500,31.5,28.4);\nINSERT INTO \"SpeedLimits\" (road_segment_id,street_name,neighborhood_id,start_point,end_point,max_limit,min_limit) VALUES (1,'Main St.',1,-79.999,-79.998,40,30),(2,'Elm St.',2,-79.995,-79.994,30,20),(3,'Oak St.',3,-79.993,-79.992,30,20),(4,'Maple St.',4,-79.989,-79.988,30,20),(5,'Pine St.',5,-79.987,-79.986,40,30);\nINSERT INTO \"VehicleType\" (id,type_name,count_passing) VALUES (1,'Car',500),(2,'Truck',100),(3,'Bicycle',50),(4,'Pedestrian',200),(5,'Bus',20);\nINSERT INTO \"WeatherConditions\" (condition_datetime,neighborhood_id,rainfall,temperature,windspeed) VALUES ('2022-01-01 08:00:00',1,0.2,10.5,5),('2022-01-01 12:00:00',1,0,12,7),('2022-01-01 16:00:00',1,0,8,4),('2022-01-01 20:00:00',1,0,5,2),('2022-01-02 08:00:00',2,0.1,10.8,6);\n",
      "question": "Show all neighborhoods and their commute time where population is less than 10000.",
      "gold_queries": [
        "SELECT name, mean_commute_time FROM Neighborhood WHERE population < '10000'",
        "SELECT name, median_commute_time FROM Neighborhood WHERE population < '10000'",
        "SELECT name, mean_commute_time, median_commute_time FROM Neighborhood WHERE population < '10000'"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Finding all neighborhoods having a population less than 10000 and displaying their mean and median commute times.",
          "sql_queries": [
            "SELECT mean_commute_time, median_commute_time \nFROM Neighborhood \nWHERE population < 10000"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieving neighborhood names and commute times for neighborhoods with a population under 10,000.",
          "sql_queries": [
            "SELECT name, mean_commute_time, median_commute_time FROM Neighborhood WHERE population < 10000"
          ],
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Let me know if you'd like me to analyze other questions!",
          "sql_queries": [],
          "metrics": {
            "recall": 0.0,
            "precision": 0,
            "f1_score": 0,
            "num_queries": 0,
            "num_unique_queries": 0,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "WHERE population < 10000;",
          "sql_queries": [
            "SELECT name FROM Neighborhood WHERE population < 10000"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "SELECT name, mean_commute_time, median_commute_time",
          "sql_queries": [
            "SELECT name, mean_commute_time, median_commute_time FROM Neighborhood"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "FROM Neighborhood",
          "sql_queries": [
            "SELECT name FROM Neighborhood"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.3333333333333333,
        "precision": 0.2,
        "f1_score": 0.25,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Traffic/vague_2cols_commute_time/vague_2cols_commute_time.sqlite",
      "db_dump": "CREATE TABLE Accidents (\n    accident_date DATE,\n    neighborhood_id INTEGER,\n    num_accident INT ,\n    FOREIGN KEY(neighborhood_id) REFERENCES Neighborhood(id)\n);\nCREATE TABLE DailyTrafficVolume (\n    date DATE,\n    neighborhood_id INTEGER,\n    total_traffic INT ,\n    FOREIGN KEY(neighborhood_id) REFERENCES Neighborhood(id)\n);\nCREATE TABLE Neighborhood (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    population INTEGER ,\n    mean_commute_time REAL ,\n    median_commute_time REAL \n);\nCREATE TABLE SpeedLimits (\n    road_segment_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    street_name TEXT,\n    neighborhood_id INTEGER,\n    start_point LATITUDE,\n    end_point LONGITUDE,\n    max_limit INT ,\n    min_limit INT ,\n    FOREIGN KEY(neighborhood_id) REFERENCES Neighborhood(id)\n);\nCREATE TABLE VehicleType (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type_name VARCHAR(255),\n    count_passing INT \n);\nCREATE TABLE WeatherConditions (\n    condition_datetime DATETIME,\n    neighborhood_id INTEGER,\n    rainfall DECIMAL(10,2) ,\n    temperature DECIMAL(10,2) ,\n    windspeed MPH ,\n    FOREIGN KEY(neighborhood_id) REFERENCES Neighborhood(id)\n);\n\nINSERT INTO \"Accidents\" (accident_date,neighborhood_id,num_accident) VALUES ('2022-01-01',1,2),('2022-01-02',2,4),('2022-01-03',3,3),('2022-01-04',4,5),('2022-01-05',5,2);\nINSERT INTO \"DailyTrafficVolume\" (date,neighborhood_id,total_traffic) VALUES ('2022-01-01',1,3000),('2022-01-02',2,4500),('2022-01-03',3,6000),('2022-01-04',4,5500),('2022-01-05',5,4200);\nINSERT INTO \"Neighborhood\" (id,name,population,mean_commute_time,median_commute_time) VALUES (1,'Downtown',8000,30.5,27.6),(2,'Midtown',9500,28.5,25.3),(3,'Southside',11000,29.8,27.2),(4,'Northside',12000,30.2,26.9),(5,'Eastside',8500,31.5,28.4);\nINSERT INTO \"SpeedLimits\" (road_segment_id,street_name,neighborhood_id,start_point,end_point,max_limit,min_limit) VALUES (1,'Main St.',1,-79.999,-79.998,40,30),(2,'Elm St.',2,-79.995,-79.994,30,20),(3,'Oak St.',3,-79.993,-79.992,30,20),(4,'Maple St.',4,-79.989,-79.988,30,20),(5,'Pine St.',5,-79.987,-79.986,40,30);\nINSERT INTO \"VehicleType\" (id,type_name,count_passing) VALUES (1,'Car',500),(2,'Truck',100),(3,'Bicycle',50),(4,'Pedestrian',200),(5,'Bus',20);\nINSERT INTO \"WeatherConditions\" (condition_datetime,neighborhood_id,rainfall,temperature,windspeed) VALUES ('2022-01-01 08:00:00',1,0.2,10.5,5),('2022-01-01 12:00:00',1,0,12,7),('2022-01-01 16:00:00',1,0,8,4),('2022-01-01 20:00:00',1,0,5,2),('2022-01-02 08:00:00',2,0.1,10.8,6);\n",
      "question": "List all the neighborhoods with population less than 10000 and their mean commute time.",
      "gold_queries": [
        "SELECT name, mean_commute_time FROM Neighborhood WHERE population < '10000'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Which neighborhoods have a population below 10000 and what are their mean commute times?",
          "sql_queries": [
            "SELECT name, mean_commute_time FROM Neighborhood WHERE population < 10000"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "GET neighborhoods with population under 10000, then output their mean commute times.",
          "sql_queries": [
            "SELECT mean_commute_time FROM Neighborhood WHERE population < 10000"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Select neighborhood.name, neighborhood.mean_commute_time FROM Neighborhood WHERE neighborhood.population < 10000;",
          "sql_queries": [
            "SELECT neighborhood.name, neighborhood.mean_commute_time FROM Neighborhood WHERE neighborhood.population < 10000"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.6666666666666666,
        "f1_score": 0.8,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Traffic/vague_2cols_commute_time/vague_2cols_commute_time.sqlite",
      "db_dump": "CREATE TABLE Accidents (\n    accident_date DATE,\n    neighborhood_id INTEGER,\n    num_accident INT ,\n    FOREIGN KEY(neighborhood_id) REFERENCES Neighborhood(id)\n);\nCREATE TABLE DailyTrafficVolume (\n    date DATE,\n    neighborhood_id INTEGER,\n    total_traffic INT ,\n    FOREIGN KEY(neighborhood_id) REFERENCES Neighborhood(id)\n);\nCREATE TABLE Neighborhood (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    population INTEGER ,\n    mean_commute_time REAL ,\n    median_commute_time REAL \n);\nCREATE TABLE SpeedLimits (\n    road_segment_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    street_name TEXT,\n    neighborhood_id INTEGER,\n    start_point LATITUDE,\n    end_point LONGITUDE,\n    max_limit INT ,\n    min_limit INT ,\n    FOREIGN KEY(neighborhood_id) REFERENCES Neighborhood(id)\n);\nCREATE TABLE VehicleType (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type_name VARCHAR(255),\n    count_passing INT \n);\nCREATE TABLE WeatherConditions (\n    condition_datetime DATETIME,\n    neighborhood_id INTEGER,\n    rainfall DECIMAL(10,2) ,\n    temperature DECIMAL(10,2) ,\n    windspeed MPH ,\n    FOREIGN KEY(neighborhood_id) REFERENCES Neighborhood(id)\n);\n\nINSERT INTO \"Accidents\" (accident_date,neighborhood_id,num_accident) VALUES ('2022-01-01',1,2),('2022-01-02',2,4),('2022-01-03',3,3),('2022-01-04',4,5),('2022-01-05',5,2);\nINSERT INTO \"DailyTrafficVolume\" (date,neighborhood_id,total_traffic) VALUES ('2022-01-01',1,3000),('2022-01-02',2,4500),('2022-01-03',3,6000),('2022-01-04',4,5500),('2022-01-05',5,4200);\nINSERT INTO \"Neighborhood\" (id,name,population,mean_commute_time,median_commute_time) VALUES (1,'Downtown',8000,30.5,27.6),(2,'Midtown',9500,28.5,25.3),(3,'Southside',11000,29.8,27.2),(4,'Northside',12000,30.2,26.9),(5,'Eastside',8500,31.5,28.4);\nINSERT INTO \"SpeedLimits\" (road_segment_id,street_name,neighborhood_id,start_point,end_point,max_limit,min_limit) VALUES (1,'Main St.',1,-79.999,-79.998,40,30),(2,'Elm St.',2,-79.995,-79.994,30,20),(3,'Oak St.',3,-79.993,-79.992,30,20),(4,'Maple St.',4,-79.989,-79.988,30,20),(5,'Pine St.',5,-79.987,-79.986,40,30);\nINSERT INTO \"VehicleType\" (id,type_name,count_passing) VALUES (1,'Car',500),(2,'Truck',100),(3,'Bicycle',50),(4,'Pedestrian',200),(5,'Bus',20);\nINSERT INTO \"WeatherConditions\" (condition_datetime,neighborhood_id,rainfall,temperature,windspeed) VALUES ('2022-01-01 08:00:00',1,0.2,10.5,5),('2022-01-01 12:00:00',1,0,12,7),('2022-01-01 16:00:00',1,0,8,4),('2022-01-01 20:00:00',1,0,5,2),('2022-01-02 08:00:00',2,0.1,10.8,6);\n",
      "question": "Show all neighborhoods and streets, commute time there and speed limits where minimum speed limit is 30.",
      "gold_queries": [
        "SELECT name, mean_commute_time, max_limit, min_limit FROM Neighborhood JOIN SpeedLimits ON SpeedLimits.neighborhood_id = Neighborhood.id WHERE SpeedLimits.min_limit >= '30'",
        "SELECT name, median_commute_time, max_limit, min_limit FROM Neighborhood JOIN SpeedLimits ON SpeedLimits.neighborhood_id = Neighborhood.id WHERE SpeedLimits.min_limit >= '30'",
        "SELECT name, mean_commute_time, median_commute_time, max_limit, min_limit FROM Neighborhood JOIN SpeedLimits ON SpeedLimits.neighborhood_id = Neighborhood.id WHERE SpeedLimits.min_limit >= '30'"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "SELECT Neighborhood.name, SpeedLimits.street_name, Neighborhood.mean_commute_time, Neighborhood.median_commute_time, SpeedLimits.min_limit FROM Neighborhood JOIN SpeedLimits ON Neighborhood.id = SpeedLimits.neighborhood_id WHERE SpeedLimits.min_limit >= 30;",
          "sql_queries": [
            "SELECT Neighborhood.name, SpeedLimits.street_name, Neighborhood.mean_commute_time, Neighborhood.median_commute_time, SpeedLimits.min_limit \nFROM Neighborhood \nJOIN SpeedLimits ON Neighborhood.id = SpeedLimits.neighborhood_id \nWHERE SpeedLimits.min_limit >= 30"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Find every neighborhood and street that has a speed limit minimum of 30 mph, as well as the avg and median commute time for each neighborhood.",
          "sql_queries": [
            "SELECT N.name, S.street_name, N.mean_commute_time, N.median_commute_time\nFROM Neighborhood N\nJOIN SpeedLimits S ON N.id = S.neighborhood_id\nWHERE S.min_limit = 30"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all neighborhoods, streets with at least 30 mph minimum speed limit and corresponding mean and median commute times.",
          "sql_queries": [
            "SELECT N.name, S.street_name, N.mean_commute_time, N.median_commute_time \nFROM Neighborhood N \nJOIN SpeedLimits S ON N.id = S.neighborhood_id \nWHERE S.min_limit >= 30"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Traffic/vague_2cols_commute_time/vague_2cols_commute_time.sqlite",
      "db_dump": "CREATE TABLE Accidents (\n    accident_date DATE,\n    neighborhood_id INTEGER,\n    num_accident INT ,\n    FOREIGN KEY(neighborhood_id) REFERENCES Neighborhood(id)\n);\nCREATE TABLE DailyTrafficVolume (\n    date DATE,\n    neighborhood_id INTEGER,\n    total_traffic INT ,\n    FOREIGN KEY(neighborhood_id) REFERENCES Neighborhood(id)\n);\nCREATE TABLE Neighborhood (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    population INTEGER ,\n    mean_commute_time REAL ,\n    median_commute_time REAL \n);\nCREATE TABLE SpeedLimits (\n    road_segment_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    street_name TEXT,\n    neighborhood_id INTEGER,\n    start_point LATITUDE,\n    end_point LONGITUDE,\n    max_limit INT ,\n    min_limit INT ,\n    FOREIGN KEY(neighborhood_id) REFERENCES Neighborhood(id)\n);\nCREATE TABLE VehicleType (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type_name VARCHAR(255),\n    count_passing INT \n);\nCREATE TABLE WeatherConditions (\n    condition_datetime DATETIME,\n    neighborhood_id INTEGER,\n    rainfall DECIMAL(10,2) ,\n    temperature DECIMAL(10,2) ,\n    windspeed MPH ,\n    FOREIGN KEY(neighborhood_id) REFERENCES Neighborhood(id)\n);\n\nINSERT INTO \"Accidents\" (accident_date,neighborhood_id,num_accident) VALUES ('2022-01-01',1,2),('2022-01-02',2,4),('2022-01-03',3,3),('2022-01-04',4,5),('2022-01-05',5,2);\nINSERT INTO \"DailyTrafficVolume\" (date,neighborhood_id,total_traffic) VALUES ('2022-01-01',1,3000),('2022-01-02',2,4500),('2022-01-03',3,6000),('2022-01-04',4,5500),('2022-01-05',5,4200);\nINSERT INTO \"Neighborhood\" (id,name,population,mean_commute_time,median_commute_time) VALUES (1,'Downtown',8000,30.5,27.6),(2,'Midtown',9500,28.5,25.3),(3,'Southside',11000,29.8,27.2),(4,'Northside',12000,30.2,26.9),(5,'Eastside',8500,31.5,28.4);\nINSERT INTO \"SpeedLimits\" (road_segment_id,street_name,neighborhood_id,start_point,end_point,max_limit,min_limit) VALUES (1,'Main St.',1,-79.999,-79.998,40,30),(2,'Elm St.',2,-79.995,-79.994,30,20),(3,'Oak St.',3,-79.993,-79.992,30,20),(4,'Maple St.',4,-79.989,-79.988,30,20),(5,'Pine St.',5,-79.987,-79.986,40,30);\nINSERT INTO \"VehicleType\" (id,type_name,count_passing) VALUES (1,'Car',500),(2,'Truck',100),(3,'Bicycle',50),(4,'Pedestrian',200),(5,'Bus',20);\nINSERT INTO \"WeatherConditions\" (condition_datetime,neighborhood_id,rainfall,temperature,windspeed) VALUES ('2022-01-01 08:00:00',1,0.2,10.5,5),('2022-01-01 12:00:00',1,0,12,7),('2022-01-01 16:00:00',1,0,8,4),('2022-01-01 20:00:00',1,0,5,2),('2022-01-02 08:00:00',2,0.1,10.8,6);\n",
      "question": "List all the neighborhoods with population less than 10000 and their mean and median commute time.",
      "gold_queries": [
        "SELECT name, mean_commute_time, median_commute_time FROM Neighborhood WHERE population < '10000'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "SELECT neighborhood_id, mean_commute_time, median_commute_time",
          "sql_queries": [
            "SELECT neighborhood_id, mean_commute_time, median_commute_time FROM Neighborhood"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT neighborhood_id, mean_commute_time, median_commute_time FROM Neighborhood",
                "original_exception": "no such column: neighborhood_id"
              }
            ],
            "all_found": false
          }
        },
        {
          "interpretation": "WHERE population < 10000;",
          "sql_queries": [
            "SELECT * FROM Neighborhood WHERE population < 10000"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "What are the average and median commute times for neighborhoods with a population under 10,000?",
          "sql_queries": [
            "SELECT AVG(mean_commute_time) AS average_commute_time, AVG(median_commute_time) AS median_commute_time\nFROM Neighborhood\nWHERE population < 10000"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Show me the names of neighborhoods with population less than 10,000 and their average and median commute times.",
          "sql_queries": [
            "SELECT name, mean_commute_time, median_commute_time FROM Neighborhood WHERE population < 10000"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "FROM Neighborhood",
          "sql_queries": [
            "SELECT name FROM Neighborhood"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [
          {
            "query": "SELECT neighborhood_id, mean_commute_time, median_commute_time FROM Neighborhood",
            "original_exception": "no such column: neighborhood_id"
          }
        ],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Traffic/vague_2cols_commute_time/vague_2cols_commute_time.sqlite",
      "db_dump": "CREATE TABLE Accidents (\n    accident_date DATE,\n    neighborhood_id INTEGER,\n    num_accident INT ,\n    FOREIGN KEY(neighborhood_id) REFERENCES Neighborhood(id)\n);\nCREATE TABLE DailyTrafficVolume (\n    date DATE,\n    neighborhood_id INTEGER,\n    total_traffic INT ,\n    FOREIGN KEY(neighborhood_id) REFERENCES Neighborhood(id)\n);\nCREATE TABLE Neighborhood (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    population INTEGER ,\n    mean_commute_time REAL ,\n    median_commute_time REAL \n);\nCREATE TABLE SpeedLimits (\n    road_segment_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    street_name TEXT,\n    neighborhood_id INTEGER,\n    start_point LATITUDE,\n    end_point LONGITUDE,\n    max_limit INT ,\n    min_limit INT ,\n    FOREIGN KEY(neighborhood_id) REFERENCES Neighborhood(id)\n);\nCREATE TABLE VehicleType (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type_name VARCHAR(255),\n    count_passing INT \n);\nCREATE TABLE WeatherConditions (\n    condition_datetime DATETIME,\n    neighborhood_id INTEGER,\n    rainfall DECIMAL(10,2) ,\n    temperature DECIMAL(10,2) ,\n    windspeed MPH ,\n    FOREIGN KEY(neighborhood_id) REFERENCES Neighborhood(id)\n);\n\nINSERT INTO \"Accidents\" (accident_date,neighborhood_id,num_accident) VALUES ('2022-01-01',1,2),('2022-01-02',2,4),('2022-01-03',3,3),('2022-01-04',4,5),('2022-01-05',5,2);\nINSERT INTO \"DailyTrafficVolume\" (date,neighborhood_id,total_traffic) VALUES ('2022-01-01',1,3000),('2022-01-02',2,4500),('2022-01-03',3,6000),('2022-01-04',4,5500),('2022-01-05',5,4200);\nINSERT INTO \"Neighborhood\" (id,name,population,mean_commute_time,median_commute_time) VALUES (1,'Downtown',8000,30.5,27.6),(2,'Midtown',9500,28.5,25.3),(3,'Southside',11000,29.8,27.2),(4,'Northside',12000,30.2,26.9),(5,'Eastside',8500,31.5,28.4);\nINSERT INTO \"SpeedLimits\" (road_segment_id,street_name,neighborhood_id,start_point,end_point,max_limit,min_limit) VALUES (1,'Main St.',1,-79.999,-79.998,40,30),(2,'Elm St.',2,-79.995,-79.994,30,20),(3,'Oak St.',3,-79.993,-79.992,30,20),(4,'Maple St.',4,-79.989,-79.988,30,20),(5,'Pine St.',5,-79.987,-79.986,40,30);\nINSERT INTO \"VehicleType\" (id,type_name,count_passing) VALUES (1,'Car',500),(2,'Truck',100),(3,'Bicycle',50),(4,'Pedestrian',200),(5,'Bus',20);\nINSERT INTO \"WeatherConditions\" (condition_datetime,neighborhood_id,rainfall,temperature,windspeed) VALUES ('2022-01-01 08:00:00',1,0.2,10.5,5),('2022-01-01 12:00:00',1,0,12,7),('2022-01-01 16:00:00',1,0,8,4),('2022-01-01 20:00:00',1,0,5,2),('2022-01-02 08:00:00',2,0.1,10.8,6);\n",
      "question": "show neighbourhoods, streets, median commute time and street speed limit where the minimum speed limit is 30.",
      "gold_queries": [
        "SELECT name, median_commute_time, max_limit, min_limit FROM Neighborhood JOIN SpeedLimits ON SpeedLimits.neighborhood_id = Neighborhood.id WHERE SpeedLimits.min_limit >= '30'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "list neighborhoods, streets, median commute times, minimum speed limits where SpeedLimits.min_limit >= 30",
          "sql_queries": [
            "SELECT Neighborhood.name, SpeedLimits.street_name, Neighborhood.median_commute_time, SpeedLimits.min_limit\nFROM Neighborhood\nJOIN SpeedLimits ON Neighborhood.id = SpeedLimits.neighborhood_id\nWHERE SpeedLimits.min_limit >= 30"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "SELECT neighborhood.name, SpeedLimits.street_name, Neighborhood.median_commute_time, SpeedLimits.min_limit FROM Neighborhood JOIN SpeedLimits ON Neighborhood.id = SpeedLimits.neighborhood_id WHERE SpeedLimits.min_limit >= 30",
          "sql_queries": [
            "SELECT neighborhood.name, SpeedLimits.street_name, Neighborhood.median_commute_time, SpeedLimits.min_limit FROM Neighborhood JOIN SpeedLimits ON Neighborhood.id = SpeedLimits.neighborhood_id WHERE SpeedLimits.min_limit >= 30"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "show neighborhoods, streets, median commute time, min speed limit HAVING min_limit >= 30",
          "sql_queries": [
            "SELECT N.name, S.street_name, N.median_commute_time, S.min_limit\nFROM Neighborhood N\nJOIN SpeedLimits S ON N.id = S.neighborhood_id\nHAVING S.min_limit >= 30"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT N.name, S.street_name, N.median_commute_time, S.min_limit\nFROM Neighborhood N\nJOIN SpeedLimits S ON N.id = S.neighborhood_id\nHAVING S.min_limit >= 30",
                "original_exception": "HAVING clause on a non-aggregate query"
              }
            ],
            "all_found": false
          }
        },
        {
          "interpretation": "find neighborhoods, street names, median commute times, and minimum speed limits  where minimum speed limit is at least 30.",
          "sql_queries": [
            "SELECT N.name, S.street_name, N.median_commute_time, S.min_limit\nFROM Neighborhood N\nJOIN SpeedLimits S ON N.id = S.neighborhood_id\nWHERE S.min_limit >= 30"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "SELECT neighborhood, street, median_commute_time, min_speed_limit FROM (SELECT n.name AS neighborhood, s.street_name, n.median_commute_time, sl.min_limit FROM Neighborhood n JOIN SpeedLimits sl ON n.id = sl.neighborhood_id) AS joined_data WHERE min_limit >= 30",
          "sql_queries": [
            "SELECT neighborhood, street, median_commute_time, min_speed_limit \nFROM (\n    SELECT n.name AS neighborhood, s.street_name, n.median_commute_time, sl.min_limit \n    FROM Neighborhood n \n    JOIN SpeedLimits sl ON n.id = sl.neighborhood_id\n) AS joined_data \nWHERE min_limit >= 30\n"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT neighborhood, street, median_commute_time, min_speed_limit \nFROM (\n    SELECT n.name AS neighborhood, s.street_name, n.median_commute_time, sl.min_limit \n    FROM Neighborhood n \n    JOIN SpeedLimits sl ON n.id = sl.neighborhood_id\n) AS joined_data \nWHERE min_limit >= 30\n",
                "original_exception": "no such column: s.street_name"
              }
            ],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [
          {
            "query": "SELECT N.name, S.street_name, N.median_commute_time, S.min_limit\nFROM Neighborhood N\nJOIN SpeedLimits S ON N.id = S.neighborhood_id\nHAVING S.min_limit >= 30",
            "original_exception": "HAVING clause on a non-aggregate query"
          },
          {
            "query": "SELECT neighborhood, street, median_commute_time, min_speed_limit \nFROM (\n    SELECT n.name AS neighborhood, s.street_name, n.median_commute_time, sl.min_limit \n    FROM Neighborhood n \n    JOIN SpeedLimits sl ON n.id = sl.neighborhood_id\n) AS joined_data \nWHERE min_limit >= 30\n",
            "original_exception": "no such column: s.street_name"
          }
        ],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Traffic/vague_2cols_commute_time/vague_2cols_commute_time.sqlite",
      "db_dump": "CREATE TABLE Accidents (\n    accident_date DATE,\n    neighborhood_id INTEGER,\n    num_accident INT ,\n    FOREIGN KEY(neighborhood_id) REFERENCES Neighborhood(id)\n);\nCREATE TABLE DailyTrafficVolume (\n    date DATE,\n    neighborhood_id INTEGER,\n    total_traffic INT ,\n    FOREIGN KEY(neighborhood_id) REFERENCES Neighborhood(id)\n);\nCREATE TABLE Neighborhood (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    population INTEGER ,\n    mean_commute_time REAL ,\n    median_commute_time REAL \n);\nCREATE TABLE SpeedLimits (\n    road_segment_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    street_name TEXT,\n    neighborhood_id INTEGER,\n    start_point LATITUDE,\n    end_point LONGITUDE,\n    max_limit INT ,\n    min_limit INT ,\n    FOREIGN KEY(neighborhood_id) REFERENCES Neighborhood(id)\n);\nCREATE TABLE VehicleType (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type_name VARCHAR(255),\n    count_passing INT \n);\nCREATE TABLE WeatherConditions (\n    condition_datetime DATETIME,\n    neighborhood_id INTEGER,\n    rainfall DECIMAL(10,2) ,\n    temperature DECIMAL(10,2) ,\n    windspeed MPH ,\n    FOREIGN KEY(neighborhood_id) REFERENCES Neighborhood(id)\n);\n\nINSERT INTO \"Accidents\" (accident_date,neighborhood_id,num_accident) VALUES ('2022-01-01',1,2),('2022-01-02',2,4),('2022-01-03',3,3),('2022-01-04',4,5),('2022-01-05',5,2);\nINSERT INTO \"DailyTrafficVolume\" (date,neighborhood_id,total_traffic) VALUES ('2022-01-01',1,3000),('2022-01-02',2,4500),('2022-01-03',3,6000),('2022-01-04',4,5500),('2022-01-05',5,4200);\nINSERT INTO \"Neighborhood\" (id,name,population,mean_commute_time,median_commute_time) VALUES (1,'Downtown',8000,30.5,27.6),(2,'Midtown',9500,28.5,25.3),(3,'Southside',11000,29.8,27.2),(4,'Northside',12000,30.2,26.9),(5,'Eastside',8500,31.5,28.4);\nINSERT INTO \"SpeedLimits\" (road_segment_id,street_name,neighborhood_id,start_point,end_point,max_limit,min_limit) VALUES (1,'Main St.',1,-79.999,-79.998,40,30),(2,'Elm St.',2,-79.995,-79.994,30,20),(3,'Oak St.',3,-79.993,-79.992,30,20),(4,'Maple St.',4,-79.989,-79.988,30,20),(5,'Pine St.',5,-79.987,-79.986,40,30);\nINSERT INTO \"VehicleType\" (id,type_name,count_passing) VALUES (1,'Car',500),(2,'Truck',100),(3,'Bicycle',50),(4,'Pedestrian',200),(5,'Bus',20);\nINSERT INTO \"WeatherConditions\" (condition_datetime,neighborhood_id,rainfall,temperature,windspeed) VALUES ('2022-01-01 08:00:00',1,0.2,10.5,5),('2022-01-01 12:00:00',1,0,12,7),('2022-01-01 16:00:00',1,0,8,4),('2022-01-01 20:00:00',1,0,5,2),('2022-01-02 08:00:00',2,0.1,10.8,6);\n",
      "question": "show neighbourhoods, streets, mean commute time and street speed limit where the minimum speed limit is 30.",
      "gold_queries": [
        "SELECT name, mean_commute_time, max_limit, min_limit FROM Neighborhood JOIN SpeedLimits ON SpeedLimits.neighborhood_id = Neighborhood.id WHERE SpeedLimits.min_limit >= '30'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Display the name of each neighborhood, street names having minimum speed limit of 30, the community's average commute time and the minimum speed limit.",
          "sql_queries": [
            "SELECT N.name, S.street_name, N.mean_commute_time, S.min_limit\nFROM Neighborhood N\nJOIN SpeedLimits S ON N.id = S.neighborhood_id\nWHERE S.min_limit = 30"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Show a list of neighborhoods, concatenated names of streets, average commute time, and minimum speed limit for streets categorized as having a minimum speed limit of 30.",
          "sql_queries": [
            "SELECT N.name, GROUP_CONCAT(S.street_name) AS concatenated_streets, N.mean_commute_time, MIN(S.min_limit) AS min_speed_limit\nFROM Neighborhood N\nJOIN SpeedLimits S ON N.id = S.neighborhood_id\nWHERE S.min_limit = 30\nGROUP BY N.name"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Given the specified conditions, display a list of neighborhoods, their associated streets, mean commute time, and corresponding street minimum speed limit.",
          "sql_queries": [
            "SELECT N.name, S.street_name, N.mean_commute_time, S.min_limit\nFROM Neighborhood N\nJOIN SpeedLimits S ON N.id = S.neighborhood_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "SELECT Neighborhood.name, SpeedLimits.street_name, Neighborhood.mean_commute_time, SpeedLimits.min_limit FROM Neighborhood JOIN SpeedLimits ON Neighborhood.id = SpeedLimits.neighborhood_id WHERE SpeedLimits.min_limit >= 30;",
          "sql_queries": [
            "SELECT Neighborhood.name, SpeedLimits.street_name, Neighborhood.mean_commute_time, SpeedLimits.min_limit FROM Neighborhood JOIN SpeedLimits ON Neighborhood.id = SpeedLimits.neighborhood_id WHERE SpeedLimits.min_limit >= 30"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve the name of each neighborhood, corresponding street names, average commute time, and minimum street speed limit for streets with a minimum speed limit meeting or exceeding 30 mph.",
          "sql_queries": [
            "SELECT N.name, S.street_name, N.mean_commute_time, S.min_limit\nFROM Neighborhood N\nJOIN SpeedLimits S ON N.id = S.neighborhood_id\nWHERE S.min_limit >= 30"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Traffic/vague_2cols_commute_time/vague_2cols_commute_time.sqlite",
      "db_dump": "CREATE TABLE Accidents (\n    accident_date DATE,\n    neighborhood_id INTEGER,\n    num_accident INT ,\n    FOREIGN KEY(neighborhood_id) REFERENCES Neighborhood(id)\n);\nCREATE TABLE DailyTrafficVolume (\n    date DATE,\n    neighborhood_id INTEGER,\n    total_traffic INT ,\n    FOREIGN KEY(neighborhood_id) REFERENCES Neighborhood(id)\n);\nCREATE TABLE Neighborhood (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    population INTEGER ,\n    mean_commute_time REAL ,\n    median_commute_time REAL \n);\nCREATE TABLE SpeedLimits (\n    road_segment_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    street_name TEXT,\n    neighborhood_id INTEGER,\n    start_point LATITUDE,\n    end_point LONGITUDE,\n    max_limit INT ,\n    min_limit INT ,\n    FOREIGN KEY(neighborhood_id) REFERENCES Neighborhood(id)\n);\nCREATE TABLE VehicleType (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type_name VARCHAR(255),\n    count_passing INT \n);\nCREATE TABLE WeatherConditions (\n    condition_datetime DATETIME,\n    neighborhood_id INTEGER,\n    rainfall DECIMAL(10,2) ,\n    temperature DECIMAL(10,2) ,\n    windspeed MPH ,\n    FOREIGN KEY(neighborhood_id) REFERENCES Neighborhood(id)\n);\n\nINSERT INTO \"Accidents\" (accident_date,neighborhood_id,num_accident) VALUES ('2022-01-01',1,2),('2022-01-02',2,4),('2022-01-03',3,3),('2022-01-04',4,5),('2022-01-05',5,2);\nINSERT INTO \"DailyTrafficVolume\" (date,neighborhood_id,total_traffic) VALUES ('2022-01-01',1,3000),('2022-01-02',2,4500),('2022-01-03',3,6000),('2022-01-04',4,5500),('2022-01-05',5,4200);\nINSERT INTO \"Neighborhood\" (id,name,population,mean_commute_time,median_commute_time) VALUES (1,'Downtown',8000,30.5,27.6),(2,'Midtown',9500,28.5,25.3),(3,'Southside',11000,29.8,27.2),(4,'Northside',12000,30.2,26.9),(5,'Eastside',8500,31.5,28.4);\nINSERT INTO \"SpeedLimits\" (road_segment_id,street_name,neighborhood_id,start_point,end_point,max_limit,min_limit) VALUES (1,'Main St.',1,-79.999,-79.998,40,30),(2,'Elm St.',2,-79.995,-79.994,30,20),(3,'Oak St.',3,-79.993,-79.992,30,20),(4,'Maple St.',4,-79.989,-79.988,30,20),(5,'Pine St.',5,-79.987,-79.986,40,30);\nINSERT INTO \"VehicleType\" (id,type_name,count_passing) VALUES (1,'Car',500),(2,'Truck',100),(3,'Bicycle',50),(4,'Pedestrian',200),(5,'Bus',20);\nINSERT INTO \"WeatherConditions\" (condition_datetime,neighborhood_id,rainfall,temperature,windspeed) VALUES ('2022-01-01 08:00:00',1,0.2,10.5,5),('2022-01-01 12:00:00',1,0,12,7),('2022-01-01 16:00:00',1,0,8,4),('2022-01-01 20:00:00',1,0,5,2),('2022-01-02 08:00:00',2,0.1,10.8,6);\n",
      "question": "List all the neighborhoods with population less than 10000 and their median commute time.",
      "gold_queries": [
        "SELECT name, median_commute_time FROM Neighborhood WHERE population < '10000'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "GET DISTINCT Neighbourhoods WHERE population <10000;",
          "sql_queries": [
            "SELECT DISTINCT name FROM Neighborhood WHERE population < 10000"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Under which neighborhoods does median commute time exist with a population less than 10 thousand;",
          "sql_queries": [
            "SELECT name FROM Neighborhood WHERE median_commute_time > 0 AND population < 10000"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Output a listing of neighborhoods meeting the population condition along with their respective median commute times.",
          "sql_queries": [
            "SELECT name, median_commute_time\nFROM Neighborhood\nWHERE population < 10000"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "SELECT name, median_commute_time FROM Neighborhood WHERE population < 10000;",
          "sql_queries": [
            "SELECT name, median_commute_time FROM Neighborhood WHERE population < 10000"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "List all neighborhood names and median commute times from the Neighborhood table for neighborhoods that have a population below 10000.",
          "sql_queries": [
            "SELECT name, median_commute_time FROM Neighborhood WHERE population < 10000"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 5,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/vague/Traffic/vague_2cols_commute_time/vague_2cols_commute_time.sqlite",
      "db_dump": "CREATE TABLE Accidents (\n    accident_date DATE,\n    neighborhood_id INTEGER,\n    num_accident INT ,\n    FOREIGN KEY(neighborhood_id) REFERENCES Neighborhood(id)\n);\nCREATE TABLE DailyTrafficVolume (\n    date DATE,\n    neighborhood_id INTEGER,\n    total_traffic INT ,\n    FOREIGN KEY(neighborhood_id) REFERENCES Neighborhood(id)\n);\nCREATE TABLE Neighborhood (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    population INTEGER ,\n    mean_commute_time REAL ,\n    median_commute_time REAL \n);\nCREATE TABLE SpeedLimits (\n    road_segment_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    street_name TEXT,\n    neighborhood_id INTEGER,\n    start_point LATITUDE,\n    end_point LONGITUDE,\n    max_limit INT ,\n    min_limit INT ,\n    FOREIGN KEY(neighborhood_id) REFERENCES Neighborhood(id)\n);\nCREATE TABLE VehicleType (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type_name VARCHAR(255),\n    count_passing INT \n);\nCREATE TABLE WeatherConditions (\n    condition_datetime DATETIME,\n    neighborhood_id INTEGER,\n    rainfall DECIMAL(10,2) ,\n    temperature DECIMAL(10,2) ,\n    windspeed MPH ,\n    FOREIGN KEY(neighborhood_id) REFERENCES Neighborhood(id)\n);\n\nINSERT INTO \"Accidents\" (accident_date,neighborhood_id,num_accident) VALUES ('2022-01-01',1,2),('2022-01-02',2,4),('2022-01-03',3,3),('2022-01-04',4,5),('2022-01-05',5,2);\nINSERT INTO \"DailyTrafficVolume\" (date,neighborhood_id,total_traffic) VALUES ('2022-01-01',1,3000),('2022-01-02',2,4500),('2022-01-03',3,6000),('2022-01-04',4,5500),('2022-01-05',5,4200);\nINSERT INTO \"Neighborhood\" (id,name,population,mean_commute_time,median_commute_time) VALUES (1,'Downtown',8000,30.5,27.6),(2,'Midtown',9500,28.5,25.3),(3,'Southside',11000,29.8,27.2),(4,'Northside',12000,30.2,26.9),(5,'Eastside',8500,31.5,28.4);\nINSERT INTO \"SpeedLimits\" (road_segment_id,street_name,neighborhood_id,start_point,end_point,max_limit,min_limit) VALUES (1,'Main St.',1,-79.999,-79.998,40,30),(2,'Elm St.',2,-79.995,-79.994,30,20),(3,'Oak St.',3,-79.993,-79.992,30,20),(4,'Maple St.',4,-79.989,-79.988,30,20),(5,'Pine St.',5,-79.987,-79.986,40,30);\nINSERT INTO \"VehicleType\" (id,type_name,count_passing) VALUES (1,'Car',500),(2,'Truck',100),(3,'Bicycle',50),(4,'Pedestrian',200),(5,'Bus',20);\nINSERT INTO \"WeatherConditions\" (condition_datetime,neighborhood_id,rainfall,temperature,windspeed) VALUES ('2022-01-01 08:00:00',1,0.2,10.5,5),('2022-01-01 12:00:00',1,0,12,7),('2022-01-01 16:00:00',1,0,8,4),('2022-01-01 20:00:00',1,0,5,2),('2022-01-02 08:00:00',2,0.1,10.8,6);\n",
      "question": "show neighbourhoods, streets, mean and median commute time and street speed limit where the minimum speed limit is 30.",
      "gold_queries": [
        "SELECT name, mean_commute_time, median_commute_time, max_limit, min_limit FROM Neighborhood JOIN SpeedLimits ON SpeedLimits.neighborhood_id = Neighborhood.id WHERE SpeedLimits.min_limit >= '30'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "JOIN SpeedLimits ON Neighborhood.id = SpeedLimits.neighborhood_id",
          "sql_queries": [
            "SELECT Neighborhood.id, Neighborhood.name, SpeedLimits.street_name, SpeedLimits.max_limit, SpeedLimits.min_limit\nFROM Neighborhood\nJOIN SpeedLimits ON Neighborhood.id = SpeedLimits.neighborhood_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "display Neighborhood.name, StreetNames, mean_commute_time, median_commute_time, min_limit from Neighborhood and SpeedLimits JOINed on Neighborhood.id = SpeedLimits.neighborhood_id WHERE min_limit = 30;",
          "sql_queries": [
            "SELECT Neighborhood.name, SpeedLimits.street_name, Neighborhood.mean_commute_time, Neighborhood.median_commute_time, SpeedLimits.min_limit \nFROM Neighborhood \nJOIN SpeedLimits ON Neighborhood.id = SpeedLimits.neighborhood_id \nWHERE SpeedLimits.min_limit = 30"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "WHERE SpeedLimits.min_limit = 30;",
          "sql_queries": [
            "SELECT road_segment_id, street_name, neighborhood_id, start_point, end_point, max_limit, min_limit \nFROM SpeedLimits \nWHERE min_limit = 30"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List Neighborhoods, Streets, average commute time, median commute time, and minimum speed limit where minimum speed limit is 30.",
          "sql_queries": [
            "SELECT N.name, S.street_name, N.mean_commute_time, N.median_commute_time, S.min_limit\nFROM Neighborhood N\nJOIN SpeedLimits S ON N.id = S.neighborhood_id\nWHERE S.min_limit = 30"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "SELECT Neighborhood.name, SpeedLimits.street_name, Neighborhood.mean_commute_time, Neighborhood.median_commute_time, SpeedLimits.min_limit",
          "sql_queries": [
            "SELECT Neighborhood.name, SpeedLimits.street_name, Neighborhood.mean_commute_time, Neighborhood.median_commute_time, SpeedLimits.min_limit\nFROM Neighborhood\nJOIN SpeedLimits ON Neighborhood.id = SpeedLimits.neighborhood_id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "FROM Neighborhood",
          "sql_queries": [
            "SELECT name FROM Neighborhood"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Student/vague_2tabs_resources/vague_2tabs_resources.sqlite",
      "db_dump": "CREATE TABLE OnlineResources (\n    resourceId INTEGER PRIMARY KEY,\n    url TEXT,\n    title TEXT);\nCREATE TABLE \"TestPreparations\" (\n    preparationId INTEGER PRIMARY KEY,\n    topic TEXT,\n    resourcesId INTEGER,\n    \"servicesId\" INTEGER,\n    FOREIGN KEY(resourcesId) REFERENCES OnlineResources(resourceId),\n    FOREIGN KEY(\"servicesId\") REFERENCES TutoringServices(serviceId));\nCREATE TABLE \"TutoringServices\" (\n    serviceId INTEGER PRIMARY KEY,\n    tutorId INTEGER,\n    date TIMESTAMP,\n    duration INTEGER,\n    FOREIGN KEY(tutorId) REFERENCES Students(id));\nCREATE TABLE \"Tutors\" (\n    id INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT);\n\nINSERT INTO \"OnlineResources\" (resourceId,url,title) VALUES (1,'https://www.mathopenref.com/','Math Open Ref'),(2,'https://www.english-test.net/','English Test Net'),(3,'https://www.historyworld.org/','History World'),(4,'https://www.physicsclassroom.com/','Physics Classroom'),(5,'https://www.chemguide.co.uk/','Chem Guide');\nINSERT INTO \"TestPreparations\" (preparationId,topic,resourcesId,servicesId) VALUES (1,'Algebra',1,1),(2,'Grammar',2,2),(3,'Ancient History',3,3),(4,'Electricity and Magnetism',4,4),(5,'Organic Chemistry',5,5);\nINSERT INTO \"TutoringServices\" (serviceId,tutorId,date,duration) VALUES (1,1,'2022-12-19 18:00:00',60),(2,2,'2022-12-20 17:30:00',45),(3,3,'2022-12-21 16:00:00',60),(4,4,'2022-12-22 15:30:00',60),(5,5,'2022-12-23 17:00:00',75);\nINSERT INTO \"Tutors\" (id,firstName,lastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Michael','Brown'),(4,'Emily','White'),(5,'David','Green');\n",
      "question": "Which tutoring services and online resources are students using for the ancient history test?",
      "gold_queries": [
        "SELECT Tutors.firstname, Tutors.lastname, TutoringServices.date, TutoringServices.duration, OnlineResources.title, OnlineResources.url FROM TutoringServices JOIN TestPreparations ON TutoringServices.serviceId = TestPreparations.servicesId JOIN OnlineResources ON OnlineResources.resourceID = TestPreparations.resourcesID JOIN Tutors ON Tutors.id = TutoringServices.tutorId WHERE topic  = 'Ancient History'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List the `title` of the online resource and `tutorId` of the tutoring service used for the 'Ancient History' topic.",
          "sql_queries": [
            "SELECT OnlineResources.title, TutoringServices.tutorId \nFROM TestPreparations \nJOIN OnlineResources ON TestPreparations.resourcesId = OnlineResources.resourceId \nJOIN TutoringServices ON TestPreparations.servicesId = TutoringServices.serviceId \nWHERE TestPreparations.topic = 'Ancient History'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve the `serviceId` and `resourceId` values associated with the preparationId where the `topic` is 'Ancient History'.",
          "sql_queries": [
            "SELECT servicesId, resourcesId FROM TestPreparations WHERE topic = 'Ancient History'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Find the `date`, `duration`,  and `tutorId` for the tutoring service used for the 'Ancient History'  preparation.",
          "sql_queries": [
            "SELECT T2.date, T2.duration, T2.tutorId \nFROM TestPreparations AS T1 \nJOIN TutoringServices AS T2 \nON T1.servicesId = T2.serviceId \nWHERE T1.topic = 'Ancient History'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Identify all tutoring services and online resources that have a relationship to the 'Ancient History' preparation.",
          "sql_queries": [
            "SELECT T1.serviceId, T2.resourceId \nFROM TestPreparations AS T1 \nJOIN OnlineResources AS T2 ON T1.resourcesId = T2.resourceId \nWHERE T1.topic = 'Ancient History'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT T1.serviceId, T2.resourceId \nFROM TestPreparations AS T1 \nJOIN OnlineResources AS T2 ON T1.resourcesId = T2.resourceId \nWHERE T1.topic = 'Ancient History'",
                "original_exception": "no such column: T1.serviceId"
              }
            ],
            "all_found": false
          }
        },
        {
          "interpretation": "Return a list of `firstName` and `lastName` for tutors providing services related to 'Ancient History' preparations.",
          "sql_queries": [
            "SELECT Tutors.firstName, Tutors.lastName \nFROM Tutors \nJOIN TutoringServices ON Tutors.id = TutoringServices.tutorId \nJOIN TestPreparations ON TutoringServices.serviceId = TestPreparations.servicesId \nWHERE TestPreparations.topic = 'Ancient History'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [
          {
            "query": "SELECT T1.serviceId, T2.resourceId \nFROM TestPreparations AS T1 \nJOIN OnlineResources AS T2 ON T1.resourcesId = T2.resourceId \nWHERE T1.topic = 'Ancient History'",
            "original_exception": "no such column: T1.serviceId"
          }
        ],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Streaming Service/vague_2cols_number_of_seasons/vague_2cols_number_of_seasons.sqlite",
      "db_dump": "CREATE TABLE Genre (\n    id INTEGER PRIMARY KEY,\n    Name TEXT UNIQUE\n);\nCREATE TABLE Platforms (\n    id INTEGER PRIMARY KEY,\n    Name TEXT UNIQUE\n);\nCREATE TABLE Ratings (\n    id INTEGER PRIMARY KEY,\n    RateValue FLOAT \n);\nCREATE TABLE TV_Shows (\n    id INTEGER PRIMARY KEY,\n    Title TEXT,\n    Released_Seasons INT,\n    Planned_Seasons INT,\n    Series TEXT,\n    GenreID INTEGER,\n    PlatformID INTEGER,\n    RatingID INTEGER,\n    FOREIGN KEY(GenreID) REFERENCES Genre(id),\n    FOREIGN KEY(PlatformID) REFERENCES Platforms(id),\n    FOREIGN KEY(RatingID) REFERENCES Ratings(id)\n);\nCREATE TABLE User_Reviews (\n    id INTEGER PRIMARY KEY,\n    UserID INTEGER,\n    ShowID INTEGER,\n    ReviewText TEXT,\n    RatingID INTEGER,\n    FOREIGN KEY(UserID) REFERENCES Users(id),\n    FOREIGN KEY(ShowID) REFERENCES TV_Shows(id),\n    FOREIGN KEY(RatingID) REFERENCES Ratings(id)\n);\nCREATE TABLE Users (\n    id INTEGER PRIMARY KEY,\n    Username TEXT,\n    Email TEXT,\n    Password TEXT\n);\n\nINSERT INTO \"Genre\" (id,Name) VALUES (1,'Action'),(2,'Comedy'),(3,'Horror'),(4,'Documentary');\nINSERT INTO \"Platforms\" (id,Name) VALUES (1,'Netflix'),(2,'Hulu'),(3,'Disney+'),(4,'Amazon Prime Video');\nINSERT INTO \"Ratings\" (id,RateValue) VALUES (1,9.0),(2,8.9),(3,8.6),(4,8.4),(5,8.1);\nINSERT INTO \"TV_Shows\" (id,Title,Released_Seasons,Planned_Seasons,Series,GenreID,PlatformID,RatingID) VALUES (1,'Breaking Bad',6,8,'Drama',2,3,4),(2,'Game of Thrones',7,8,'Fantasy Drama',3,3,5),(3,'Stranger Things',3,4,'Mystery Sci-Fi',1,4,3),(4,'The Witcher',1,2,'Adventure Fantasy',4,4,2),(5,'Ozark',3,4,'Crime Drama',2,3,4);\nINSERT INTO \"User_Reviews\" (id,UserID,ShowID,ReviewText,RatingID) VALUES (1,1,1,'Great show!',1),(2,2,2,'Best series ever.',2),(3,3,3,'Loved it! Can''t wait for season 4.',3),(4,4,4,'Not a fan of this one.',3),(5,5,5,'Interesting storyline and characters.',4);\nINSERT INTO \"Users\" (id,Username,Email,Password) VALUES (1,'user1','user1@example.com','password1'),(2,'user2','user2@example.com','password2'),(3,'user3','user3@example.com','password3'),(4,'user4','user4@example.com','password4'),(5,'user5','user5@example.com','password5');\n",
      "question": "How many released and planned seasons of mystery sci-fi are there?",
      "gold_queries": [
        "Select Released_Seasons, Planned_Seasons From TV_Shows Where Series = 'Mystery Sci-Fi'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Calculate the sum of 'Released_Seasons' and 'Planned_Seasons' for all TV shows tagged as 'Mystery Sci-Fi'.",
          "sql_queries": [
            "SELECT SUM(Released_Seasons + Planned_Seasons) \nFROM TV_Shows \nJOIN Genre ON TV_Shows.GenreID = Genre.id \nWHERE Genre.Name = 'Mystery Sci-Fi'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "What is the total number of seasons released and planned for TV shows classified as 'Mystery Sci-Fi'?",
          "sql_queries": [
            "SELECT SUM(Released_Seasons + Planned_Seasons) \nFROM TV_Shows \nWHERE Series = 'Mystery Sci-Fi'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "How many individuals seasons are there in total for shows belonging to the 'Mystery Sci-Fi' genre, considering both currently aired and future seasons?",
          "sql_queries": [
            "SELECT SUM(Released_Seasons + Planned_Seasons) AS Total_Seasons\nFROM TV_Shows\nWHERE GenreID = (SELECT id FROM Genre WHERE Name = 'Mystery Sci-Fi')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Streaming Service/vague_2cols_number_of_seasons/vague_2cols_number_of_seasons.sqlite",
      "db_dump": "CREATE TABLE Genre (\n    id INTEGER PRIMARY KEY,\n    Name TEXT UNIQUE\n);\nCREATE TABLE Platforms (\n    id INTEGER PRIMARY KEY,\n    Name TEXT UNIQUE\n);\nCREATE TABLE Ratings (\n    id INTEGER PRIMARY KEY,\n    RateValue FLOAT \n);\nCREATE TABLE TV_Shows (\n    id INTEGER PRIMARY KEY,\n    Title TEXT,\n    Released_Seasons INT,\n    Planned_Seasons INT,\n    Series TEXT,\n    GenreID INTEGER,\n    PlatformID INTEGER,\n    RatingID INTEGER,\n    FOREIGN KEY(GenreID) REFERENCES Genre(id),\n    FOREIGN KEY(PlatformID) REFERENCES Platforms(id),\n    FOREIGN KEY(RatingID) REFERENCES Ratings(id)\n);\nCREATE TABLE User_Reviews (\n    id INTEGER PRIMARY KEY,\n    UserID INTEGER,\n    ShowID INTEGER,\n    ReviewText TEXT,\n    RatingID INTEGER,\n    FOREIGN KEY(UserID) REFERENCES Users(id),\n    FOREIGN KEY(ShowID) REFERENCES TV_Shows(id),\n    FOREIGN KEY(RatingID) REFERENCES Ratings(id)\n);\nCREATE TABLE Users (\n    id INTEGER PRIMARY KEY,\n    Username TEXT,\n    Email TEXT,\n    Password TEXT\n);\n\nINSERT INTO \"Genre\" (id,Name) VALUES (1,'Action'),(2,'Comedy'),(3,'Horror'),(4,'Documentary');\nINSERT INTO \"Platforms\" (id,Name) VALUES (1,'Netflix'),(2,'Hulu'),(3,'Disney+'),(4,'Amazon Prime Video');\nINSERT INTO \"Ratings\" (id,RateValue) VALUES (1,9.0),(2,8.9),(3,8.6),(4,8.4),(5,8.1);\nINSERT INTO \"TV_Shows\" (id,Title,Released_Seasons,Planned_Seasons,Series,GenreID,PlatformID,RatingID) VALUES (1,'Breaking Bad',6,8,'Drama',2,3,4),(2,'Game of Thrones',7,8,'Fantasy Drama',3,3,5),(3,'Stranger Things',3,4,'Mystery Sci-Fi',1,4,3),(4,'The Witcher',1,2,'Adventure Fantasy',4,4,2),(5,'Ozark',3,4,'Crime Drama',2,3,4);\nINSERT INTO \"User_Reviews\" (id,UserID,ShowID,ReviewText,RatingID) VALUES (1,1,1,'Great show!',1),(2,2,2,'Best series ever.',2),(3,3,3,'Loved it! Can''t wait for season 4.',3),(4,4,4,'Not a fan of this one.',3),(5,5,5,'Interesting storyline and characters.',4);\nINSERT INTO \"Users\" (id,Username,Email,Password) VALUES (1,'user1','user1@example.com','password1'),(2,'user2','user2@example.com','password2'),(3,'user3','user3@example.com','password3'),(4,'user4','user4@example.com','password4'),(5,'user5','user5@example.com','password5');\n",
      "question": "Who has the highest number of tv seasons ordered by most to least",
      "gold_queries": [
        "Select * From TV_Shows Order by Released_Seasons DESC",
        "Select * From TV_Shows Order by Planned_Seasons DESC",
        "Select * From TV_Shows Order by Released_Seasons, Planned_Seasons DESC"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Which TV show has the most seasons (released + planned)",
          "sql_queries": [
            "SELECT Title FROM TV_Shows ORDER BY (Released_Seasons + Planned_Seasons) DESC LIMIT 1"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Who has the highest number of planned seasons ordered by most to least",
          "sql_queries": [
            "SELECT Title FROM TV_Shows ORDER BY Planned_Seasons DESC"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Who has the highest number of seasons ordered by most to least",
          "sql_queries": [
            "SELECT Title FROM TV_Shows ORDER BY Planned_Seasons DESC"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Who has the highest number of released seasons ordered by most to least",
          "sql_queries": [
            "SELECT Title FROM TV_Shows ORDER BY Released_Seasons DESC LIMIT 1"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Who has the highest total number of seasons (released + planned) ordered by most to least",
          "sql_queries": [
            "SELECT Title, (Released_Seasons + Planned_Seasons) AS Total_Seasons\nFROM TV_Shows\nORDER BY Total_Seasons DESC"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Streaming Service/vague_2cols_number_of_seasons/vague_2cols_number_of_seasons.sqlite",
      "db_dump": "CREATE TABLE Genre (\n    id INTEGER PRIMARY KEY,\n    Name TEXT UNIQUE\n);\nCREATE TABLE Platforms (\n    id INTEGER PRIMARY KEY,\n    Name TEXT UNIQUE\n);\nCREATE TABLE Ratings (\n    id INTEGER PRIMARY KEY,\n    RateValue FLOAT \n);\nCREATE TABLE TV_Shows (\n    id INTEGER PRIMARY KEY,\n    Title TEXT,\n    Released_Seasons INT,\n    Planned_Seasons INT,\n    Series TEXT,\n    GenreID INTEGER,\n    PlatformID INTEGER,\n    RatingID INTEGER,\n    FOREIGN KEY(GenreID) REFERENCES Genre(id),\n    FOREIGN KEY(PlatformID) REFERENCES Platforms(id),\n    FOREIGN KEY(RatingID) REFERENCES Ratings(id)\n);\nCREATE TABLE User_Reviews (\n    id INTEGER PRIMARY KEY,\n    UserID INTEGER,\n    ShowID INTEGER,\n    ReviewText TEXT,\n    RatingID INTEGER,\n    FOREIGN KEY(UserID) REFERENCES Users(id),\n    FOREIGN KEY(ShowID) REFERENCES TV_Shows(id),\n    FOREIGN KEY(RatingID) REFERENCES Ratings(id)\n);\nCREATE TABLE Users (\n    id INTEGER PRIMARY KEY,\n    Username TEXT,\n    Email TEXT,\n    Password TEXT\n);\n\nINSERT INTO \"Genre\" (id,Name) VALUES (1,'Action'),(2,'Comedy'),(3,'Horror'),(4,'Documentary');\nINSERT INTO \"Platforms\" (id,Name) VALUES (1,'Netflix'),(2,'Hulu'),(3,'Disney+'),(4,'Amazon Prime Video');\nINSERT INTO \"Ratings\" (id,RateValue) VALUES (1,9.0),(2,8.9),(3,8.6),(4,8.4),(5,8.1);\nINSERT INTO \"TV_Shows\" (id,Title,Released_Seasons,Planned_Seasons,Series,GenreID,PlatformID,RatingID) VALUES (1,'Breaking Bad',6,8,'Drama',2,3,4),(2,'Game of Thrones',7,8,'Fantasy Drama',3,3,5),(3,'Stranger Things',3,4,'Mystery Sci-Fi',1,4,3),(4,'The Witcher',1,2,'Adventure Fantasy',4,4,2),(5,'Ozark',3,4,'Crime Drama',2,3,4);\nINSERT INTO \"User_Reviews\" (id,UserID,ShowID,ReviewText,RatingID) VALUES (1,1,1,'Great show!',1),(2,2,2,'Best series ever.',2),(3,3,3,'Loved it! Can''t wait for season 4.',3),(4,4,4,'Not a fan of this one.',3),(5,5,5,'Interesting storyline and characters.',4);\nINSERT INTO \"Users\" (id,Username,Email,Password) VALUES (1,'user1','user1@example.com','password1'),(2,'user2','user2@example.com','password2'),(3,'user3','user3@example.com','password3'),(4,'user4','user4@example.com','password4'),(5,'user5','user5@example.com','password5');\n",
      "question": "Show me the titles of tv shows in descending number of planned seasons",
      "gold_queries": [
        "Select * From TV_Shows Order by Planned_Seasons DESC"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List TV show titles where the number of planned seasons is the highest.",
          "sql_queries": [
            "SELECT Title FROM TV_Shows WHERE Planned_Seasons = (SELECT MAX(Planned_Seasons) FROM TV_Shows)"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Order TV shows by Planned_Seasons in descending order and show the Title column.",
          "sql_queries": [
            "SELECT Title FROM TV_Shows ORDER BY Planned_Seasons DESC"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Streaming Service/vague_2cols_number_of_seasons/vague_2cols_number_of_seasons.sqlite",
      "db_dump": "CREATE TABLE Genre (\n    id INTEGER PRIMARY KEY,\n    Name TEXT UNIQUE\n);\nCREATE TABLE Platforms (\n    id INTEGER PRIMARY KEY,\n    Name TEXT UNIQUE\n);\nCREATE TABLE Ratings (\n    id INTEGER PRIMARY KEY,\n    RateValue FLOAT \n);\nCREATE TABLE TV_Shows (\n    id INTEGER PRIMARY KEY,\n    Title TEXT,\n    Released_Seasons INT,\n    Planned_Seasons INT,\n    Series TEXT,\n    GenreID INTEGER,\n    PlatformID INTEGER,\n    RatingID INTEGER,\n    FOREIGN KEY(GenreID) REFERENCES Genre(id),\n    FOREIGN KEY(PlatformID) REFERENCES Platforms(id),\n    FOREIGN KEY(RatingID) REFERENCES Ratings(id)\n);\nCREATE TABLE User_Reviews (\n    id INTEGER PRIMARY KEY,\n    UserID INTEGER,\n    ShowID INTEGER,\n    ReviewText TEXT,\n    RatingID INTEGER,\n    FOREIGN KEY(UserID) REFERENCES Users(id),\n    FOREIGN KEY(ShowID) REFERENCES TV_Shows(id),\n    FOREIGN KEY(RatingID) REFERENCES Ratings(id)\n);\nCREATE TABLE Users (\n    id INTEGER PRIMARY KEY,\n    Username TEXT,\n    Email TEXT,\n    Password TEXT\n);\n\nINSERT INTO \"Genre\" (id,Name) VALUES (1,'Action'),(2,'Comedy'),(3,'Horror'),(4,'Documentary');\nINSERT INTO \"Platforms\" (id,Name) VALUES (1,'Netflix'),(2,'Hulu'),(3,'Disney+'),(4,'Amazon Prime Video');\nINSERT INTO \"Ratings\" (id,RateValue) VALUES (1,9.0),(2,8.9),(3,8.6),(4,8.4),(5,8.1);\nINSERT INTO \"TV_Shows\" (id,Title,Released_Seasons,Planned_Seasons,Series,GenreID,PlatformID,RatingID) VALUES (1,'Breaking Bad',6,8,'Drama',2,3,4),(2,'Game of Thrones',7,8,'Fantasy Drama',3,3,5),(3,'Stranger Things',3,4,'Mystery Sci-Fi',1,4,3),(4,'The Witcher',1,2,'Adventure Fantasy',4,4,2),(5,'Ozark',3,4,'Crime Drama',2,3,4);\nINSERT INTO \"User_Reviews\" (id,UserID,ShowID,ReviewText,RatingID) VALUES (1,1,1,'Great show!',1),(2,2,2,'Best series ever.',2),(3,3,3,'Loved it! Can''t wait for season 4.',3),(4,4,4,'Not a fan of this one.',3),(5,5,5,'Interesting storyline and characters.',4);\nINSERT INTO \"Users\" (id,Username,Email,Password) VALUES (1,'user1','user1@example.com','password1'),(2,'user2','user2@example.com','password2'),(3,'user3','user3@example.com','password3'),(4,'user4','user4@example.com','password4'),(5,'user5','user5@example.com','password5');\n",
      "question": "For mystery sci-fi, how many seasons were planned?",
      "gold_queries": [
        "Select Planned_Seasons From TV_Shows Where Series = 'Mystery Sci-Fi'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What is the total number of planned seasons for all TV shows with the genre 'Mystery Sci-Fi'?",
          "sql_queries": [
            "SELECT SUM(Planned_Seasons) FROM TV_Shows WHERE GenreID = (SELECT id FROM Genre WHERE Name = 'Mystery Sci-Fi')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Is there a TV show with the genre 'Mystery Sci-Fi' and if so, how many seasons were planned for it?",
          "sql_queries": [
            "SELECT Planned_Seasons \nFROM TV_Shows \nWHERE GenreID = (SELECT id FROM Genre WHERE Name = 'Mystery Sci-Fi')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Which TV shows have the genre 'Mystery Sci-Fi' and what are their planned seasons?",
          "sql_queries": [
            "SELECT Title, Planned_Seasons FROM TV_Shows WHERE Series = 'Mystery Sci-Fi'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Streaming Service/vague_2cols_number_of_seasons/vague_2cols_number_of_seasons.sqlite",
      "db_dump": "CREATE TABLE Genre (\n    id INTEGER PRIMARY KEY,\n    Name TEXT UNIQUE\n);\nCREATE TABLE Platforms (\n    id INTEGER PRIMARY KEY,\n    Name TEXT UNIQUE\n);\nCREATE TABLE Ratings (\n    id INTEGER PRIMARY KEY,\n    RateValue FLOAT \n);\nCREATE TABLE TV_Shows (\n    id INTEGER PRIMARY KEY,\n    Title TEXT,\n    Released_Seasons INT,\n    Planned_Seasons INT,\n    Series TEXT,\n    GenreID INTEGER,\n    PlatformID INTEGER,\n    RatingID INTEGER,\n    FOREIGN KEY(GenreID) REFERENCES Genre(id),\n    FOREIGN KEY(PlatformID) REFERENCES Platforms(id),\n    FOREIGN KEY(RatingID) REFERENCES Ratings(id)\n);\nCREATE TABLE User_Reviews (\n    id INTEGER PRIMARY KEY,\n    UserID INTEGER,\n    ShowID INTEGER,\n    ReviewText TEXT,\n    RatingID INTEGER,\n    FOREIGN KEY(UserID) REFERENCES Users(id),\n    FOREIGN KEY(ShowID) REFERENCES TV_Shows(id),\n    FOREIGN KEY(RatingID) REFERENCES Ratings(id)\n);\nCREATE TABLE Users (\n    id INTEGER PRIMARY KEY,\n    Username TEXT,\n    Email TEXT,\n    Password TEXT\n);\n\nINSERT INTO \"Genre\" (id,Name) VALUES (1,'Action'),(2,'Comedy'),(3,'Horror'),(4,'Documentary');\nINSERT INTO \"Platforms\" (id,Name) VALUES (1,'Netflix'),(2,'Hulu'),(3,'Disney+'),(4,'Amazon Prime Video');\nINSERT INTO \"Ratings\" (id,RateValue) VALUES (1,9.0),(2,8.9),(3,8.6),(4,8.4),(5,8.1);\nINSERT INTO \"TV_Shows\" (id,Title,Released_Seasons,Planned_Seasons,Series,GenreID,PlatformID,RatingID) VALUES (1,'Breaking Bad',6,8,'Drama',2,3,4),(2,'Game of Thrones',7,8,'Fantasy Drama',3,3,5),(3,'Stranger Things',3,4,'Mystery Sci-Fi',1,4,3),(4,'The Witcher',1,2,'Adventure Fantasy',4,4,2),(5,'Ozark',3,4,'Crime Drama',2,3,4);\nINSERT INTO \"User_Reviews\" (id,UserID,ShowID,ReviewText,RatingID) VALUES (1,1,1,'Great show!',1),(2,2,2,'Best series ever.',2),(3,3,3,'Loved it! Can''t wait for season 4.',3),(4,4,4,'Not a fan of this one.',3),(5,5,5,'Interesting storyline and characters.',4);\nINSERT INTO \"Users\" (id,Username,Email,Password) VALUES (1,'user1','user1@example.com','password1'),(2,'user2','user2@example.com','password2'),(3,'user3','user3@example.com','password3'),(4,'user4','user4@example.com','password4'),(5,'user5','user5@example.com','password5');\n",
      "question": "For mystery sci-fi, how many seasons were released?",
      "gold_queries": [
        "Select Released_Seasons From TV_Shows Where Series = 'Mystery Sci-Fi'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "How many seasons of TV shows belonging to the genre \"Mystery Sci-Fi\" have been released?",
          "sql_queries": [
            "SELECT SUM(Released_Seasons) FROM TV_Shows WHERE GenreID = (SELECT id FROM Genre WHERE Name = 'Mystery Sci-Fi')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Given the genre \"Mystery Sci-Fi\", what is the sum of the 'Released_Seasons' column in the TV_Shows table?",
          "sql_queries": [
            "SELECT SUM(Released_Seasons) FROM TV_Shows WHERE GenreID = (SELECT id FROM Genre WHERE Name = 'Mystery Sci-Fi')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "What is the total number of released seasons across all TV shows classified as \"Mystery Sci-Fi\"?",
          "sql_queries": [
            "SELECT SUM(Released_Seasons) FROM TV_Shows WHERE Series = 'Mystery Sci-Fi'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "For the genre \"Mystery Sci-Fi\", what is the count of released seasons?",
          "sql_queries": [
            "SELECT SUM(Released_Seasons) FROM TV_Shows WHERE GenreID = (SELECT id FROM Genre WHERE Name = 'Mystery Sci-Fi')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 4,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Streaming Service/vague_2cols_number_of_seasons/vague_2cols_number_of_seasons.sqlite",
      "db_dump": "CREATE TABLE Genre (\n    id INTEGER PRIMARY KEY,\n    Name TEXT UNIQUE\n);\nCREATE TABLE Platforms (\n    id INTEGER PRIMARY KEY,\n    Name TEXT UNIQUE\n);\nCREATE TABLE Ratings (\n    id INTEGER PRIMARY KEY,\n    RateValue FLOAT \n);\nCREATE TABLE TV_Shows (\n    id INTEGER PRIMARY KEY,\n    Title TEXT,\n    Released_Seasons INT,\n    Planned_Seasons INT,\n    Series TEXT,\n    GenreID INTEGER,\n    PlatformID INTEGER,\n    RatingID INTEGER,\n    FOREIGN KEY(GenreID) REFERENCES Genre(id),\n    FOREIGN KEY(PlatformID) REFERENCES Platforms(id),\n    FOREIGN KEY(RatingID) REFERENCES Ratings(id)\n);\nCREATE TABLE User_Reviews (\n    id INTEGER PRIMARY KEY,\n    UserID INTEGER,\n    ShowID INTEGER,\n    ReviewText TEXT,\n    RatingID INTEGER,\n    FOREIGN KEY(UserID) REFERENCES Users(id),\n    FOREIGN KEY(ShowID) REFERENCES TV_Shows(id),\n    FOREIGN KEY(RatingID) REFERENCES Ratings(id)\n);\nCREATE TABLE Users (\n    id INTEGER PRIMARY KEY,\n    Username TEXT,\n    Email TEXT,\n    Password TEXT\n);\n\nINSERT INTO \"Genre\" (id,Name) VALUES (1,'Action'),(2,'Comedy'),(3,'Horror'),(4,'Documentary');\nINSERT INTO \"Platforms\" (id,Name) VALUES (1,'Netflix'),(2,'Hulu'),(3,'Disney+'),(4,'Amazon Prime Video');\nINSERT INTO \"Ratings\" (id,RateValue) VALUES (1,9.0),(2,8.9),(3,8.6),(4,8.4),(5,8.1);\nINSERT INTO \"TV_Shows\" (id,Title,Released_Seasons,Planned_Seasons,Series,GenreID,PlatformID,RatingID) VALUES (1,'Breaking Bad',6,8,'Drama',2,3,4),(2,'Game of Thrones',7,8,'Fantasy Drama',3,3,5),(3,'Stranger Things',3,4,'Mystery Sci-Fi',1,4,3),(4,'The Witcher',1,2,'Adventure Fantasy',4,4,2),(5,'Ozark',3,4,'Crime Drama',2,3,4);\nINSERT INTO \"User_Reviews\" (id,UserID,ShowID,ReviewText,RatingID) VALUES (1,1,1,'Great show!',1),(2,2,2,'Best series ever.',2),(3,3,3,'Loved it! Can''t wait for season 4.',3),(4,4,4,'Not a fan of this one.',3),(5,5,5,'Interesting storyline and characters.',4);\nINSERT INTO \"Users\" (id,Username,Email,Password) VALUES (1,'user1','user1@example.com','password1'),(2,'user2','user2@example.com','password2'),(3,'user3','user3@example.com','password3'),(4,'user4','user4@example.com','password4'),(5,'user5','user5@example.com','password5');\n",
      "question": "How many seasons are in mystery sci-fi?",
      "gold_queries": [
        "Select Released_Seasons From TV_Shows Where Series = 'Mystery Sci-Fi'",
        "Select Planned_Seasons From TV_Shows Where Series = 'Mystery Sci-Fi'",
        "Select Released_Seasons, Planned_Seasons From TV_Shows Where Series = 'Mystery Sci-Fi'"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "How many seasons are in the TV show genre \"Mystery Sci-Fi\"?",
          "sql_queries": [
            "SELECT Released_Seasons FROM TV_Shows WHERE Series = 'Mystery Sci-Fi'"
          ],
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "How many seasons are associated with the genre \"Mystery Sci-Fi\", regardless of specific TV shows?",
          "sql_queries": [
            "SELECT SUM(TV_Shows.Released_Seasons) \nFROM TV_Shows \nJOIN Genre ON TV_Shows.GenreID = Genre.id \nWHERE Genre.Name = 'Mystery Sci-Fi'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.3333333333333333,
        "precision": 0.5,
        "f1_score": 0.4,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Streaming Service/vague_2cols_number_of_seasons/vague_2cols_number_of_seasons.sqlite",
      "db_dump": "CREATE TABLE Genre (\n    id INTEGER PRIMARY KEY,\n    Name TEXT UNIQUE\n);\nCREATE TABLE Platforms (\n    id INTEGER PRIMARY KEY,\n    Name TEXT UNIQUE\n);\nCREATE TABLE Ratings (\n    id INTEGER PRIMARY KEY,\n    RateValue FLOAT \n);\nCREATE TABLE TV_Shows (\n    id INTEGER PRIMARY KEY,\n    Title TEXT,\n    Released_Seasons INT,\n    Planned_Seasons INT,\n    Series TEXT,\n    GenreID INTEGER,\n    PlatformID INTEGER,\n    RatingID INTEGER,\n    FOREIGN KEY(GenreID) REFERENCES Genre(id),\n    FOREIGN KEY(PlatformID) REFERENCES Platforms(id),\n    FOREIGN KEY(RatingID) REFERENCES Ratings(id)\n);\nCREATE TABLE User_Reviews (\n    id INTEGER PRIMARY KEY,\n    UserID INTEGER,\n    ShowID INTEGER,\n    ReviewText TEXT,\n    RatingID INTEGER,\n    FOREIGN KEY(UserID) REFERENCES Users(id),\n    FOREIGN KEY(ShowID) REFERENCES TV_Shows(id),\n    FOREIGN KEY(RatingID) REFERENCES Ratings(id)\n);\nCREATE TABLE Users (\n    id INTEGER PRIMARY KEY,\n    Username TEXT,\n    Email TEXT,\n    Password TEXT\n);\n\nINSERT INTO \"Genre\" (id,Name) VALUES (1,'Action'),(2,'Comedy'),(3,'Horror'),(4,'Documentary');\nINSERT INTO \"Platforms\" (id,Name) VALUES (1,'Netflix'),(2,'Hulu'),(3,'Disney+'),(4,'Amazon Prime Video');\nINSERT INTO \"Ratings\" (id,RateValue) VALUES (1,9.0),(2,8.9),(3,8.6),(4,8.4),(5,8.1);\nINSERT INTO \"TV_Shows\" (id,Title,Released_Seasons,Planned_Seasons,Series,GenreID,PlatformID,RatingID) VALUES (1,'Breaking Bad',6,8,'Drama',2,3,4),(2,'Game of Thrones',7,8,'Fantasy Drama',3,3,5),(3,'Stranger Things',3,4,'Mystery Sci-Fi',1,4,3),(4,'The Witcher',1,2,'Adventure Fantasy',4,4,2),(5,'Ozark',3,4,'Crime Drama',2,3,4);\nINSERT INTO \"User_Reviews\" (id,UserID,ShowID,ReviewText,RatingID) VALUES (1,1,1,'Great show!',1),(2,2,2,'Best series ever.',2),(3,3,3,'Loved it! Can''t wait for season 4.',3),(4,4,4,'Not a fan of this one.',3),(5,5,5,'Interesting storyline and characters.',4);\nINSERT INTO \"Users\" (id,Username,Email,Password) VALUES (1,'user1','user1@example.com','password1'),(2,'user2','user2@example.com','password2'),(3,'user3','user3@example.com','password3'),(4,'user4','user4@example.com','password4'),(5,'user5','user5@example.com','password5');\n",
      "question": "Show me the titles of tv shows in descending number of released seasons and then by planned seasons",
      "gold_queries": [
        "Select * From TV_Shows Order by Released_Seasons, Planned_Seasons DESC"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Return a list of TV show titles sorted by the number of released seasons in descending order, then by the number of planned seasons in descending order.",
          "sql_queries": [
            "SELECT Title FROM TV_Shows ORDER BY Released_Seasons DESC, Planned_Seasons DESC"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve a list of TV shows ordered first by their \"Released_Seasons\" column in descending order, and then within each group of tied \"Released_Seasons\" values, order by \"Planned_Seasons\" column in descending order.",
          "sql_queries": [
            "SELECT Title FROM TV_Shows ORDER BY Released_Seasons DESC, Planned_Seasons DESC"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 2,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Streaming Service/vague_2cols_number_of_seasons/vague_2cols_number_of_seasons.sqlite",
      "db_dump": "CREATE TABLE Genre (\n    id INTEGER PRIMARY KEY,\n    Name TEXT UNIQUE\n);\nCREATE TABLE Platforms (\n    id INTEGER PRIMARY KEY,\n    Name TEXT UNIQUE\n);\nCREATE TABLE Ratings (\n    id INTEGER PRIMARY KEY,\n    RateValue FLOAT \n);\nCREATE TABLE TV_Shows (\n    id INTEGER PRIMARY KEY,\n    Title TEXT,\n    Released_Seasons INT,\n    Planned_Seasons INT,\n    Series TEXT,\n    GenreID INTEGER,\n    PlatformID INTEGER,\n    RatingID INTEGER,\n    FOREIGN KEY(GenreID) REFERENCES Genre(id),\n    FOREIGN KEY(PlatformID) REFERENCES Platforms(id),\n    FOREIGN KEY(RatingID) REFERENCES Ratings(id)\n);\nCREATE TABLE User_Reviews (\n    id INTEGER PRIMARY KEY,\n    UserID INTEGER,\n    ShowID INTEGER,\n    ReviewText TEXT,\n    RatingID INTEGER,\n    FOREIGN KEY(UserID) REFERENCES Users(id),\n    FOREIGN KEY(ShowID) REFERENCES TV_Shows(id),\n    FOREIGN KEY(RatingID) REFERENCES Ratings(id)\n);\nCREATE TABLE Users (\n    id INTEGER PRIMARY KEY,\n    Username TEXT,\n    Email TEXT,\n    Password TEXT\n);\n\nINSERT INTO \"Genre\" (id,Name) VALUES (1,'Action'),(2,'Comedy'),(3,'Horror'),(4,'Documentary');\nINSERT INTO \"Platforms\" (id,Name) VALUES (1,'Netflix'),(2,'Hulu'),(3,'Disney+'),(4,'Amazon Prime Video');\nINSERT INTO \"Ratings\" (id,RateValue) VALUES (1,9.0),(2,8.9),(3,8.6),(4,8.4),(5,8.1);\nINSERT INTO \"TV_Shows\" (id,Title,Released_Seasons,Planned_Seasons,Series,GenreID,PlatformID,RatingID) VALUES (1,'Breaking Bad',6,8,'Drama',2,3,4),(2,'Game of Thrones',7,8,'Fantasy Drama',3,3,5),(3,'Stranger Things',3,4,'Mystery Sci-Fi',1,4,3),(4,'The Witcher',1,2,'Adventure Fantasy',4,4,2),(5,'Ozark',3,4,'Crime Drama',2,3,4);\nINSERT INTO \"User_Reviews\" (id,UserID,ShowID,ReviewText,RatingID) VALUES (1,1,1,'Great show!',1),(2,2,2,'Best series ever.',2),(3,3,3,'Loved it! Can''t wait for season 4.',3),(4,4,4,'Not a fan of this one.',3),(5,5,5,'Interesting storyline and characters.',4);\nINSERT INTO \"Users\" (id,Username,Email,Password) VALUES (1,'user1','user1@example.com','password1'),(2,'user2','user2@example.com','password2'),(3,'user3','user3@example.com','password3'),(4,'user4','user4@example.com','password4'),(5,'user5','user5@example.com','password5');\n",
      "question": "Show me the titles of tv shows in descending number of released seasons",
      "gold_queries": [
        "Select * From TV_Shows Order by Released_Seasons DESC"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Display the TV show titles sorted by the number of released seasons from highest to lowest",
          "sql_queries": [
            "SELECT Title FROM TV_Shows ORDER BY Released_Seasons DESC"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List TV_Show titles sorted by order of decreasing released seasons",
          "sql_queries": [
            "SELECT Title FROM TV_Shows ORDER BY Released_Seasons DESC"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Which TV shows have the most released seasons?",
          "sql_queries": [
            "SELECT Title FROM TV_Shows ORDER BY Released_Seasons DESC LIMIT 1"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "SELECT Title FROM TV_Shows ORDER BY Released_Seasons DESC;",
          "sql_queries": [
            "SELECT Title FROM TV_Shows ORDER BY Released_Seasons DESC"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Return a list of TV show titles with released seasons in descending order",
          "sql_queries": [
            "SELECT Title, Released_Seasons FROM TV_Shows ORDER BY Released_Seasons DESC"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Banking/vague_2cols_stock_allocation/vague_2cols_stock_allocation.sqlite",
      "db_dump": "CREATE TABLE Accounts (\n    AccountNumber INTEGER PRIMARY KEY,\n    Balance REAL ,\n    InterestRate REAL DEFAULT 1,\n    OpenDate DATE,\n    CustomerID INTEGER,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Customers (\n    CustomerID INTEGER PRIMARY KEY,\n    Email TEXT UNIQUE\n, fullname TEXT);\nCREATE TABLE Investments (\n    InvestmentID INTEGER PRIMARY KEY,\n    AccountNumber INTEGER,\n    StockSymbol TEXT,\n    Quantity INTEGER ,\n    PurchaseDate DATE,\n    FOREIGN KEY(AccountNumber) REFERENCES Accounts(AccountNumber),\n    FOREIGN KEY(StockSymbol) REFERENCES Stocks(StockSymbol)\n);\nCREATE TABLE PortfolioPerformance (\n    PerformanceID INTEGER PRIMARY KEY,\n    InvestmentID INTEGER,\n    Stock_Percentage REAL ,\n    Stock_Value REAL,\n    Investment_Portfolios REAL,\n    FOREIGN KEY(InvestmentID) REFERENCES Investments(InvestmentID)\n);\nCREATE TABLE Stocks (\n    StockSymbol TEXT PRIMARY KEY,\n    CompanyName TEXT,\n    CurrentPrice REAL\n);\nCREATE TABLE Transactions (\n    TransactionID INTEGER PRIMARY KEY,\n    AccountNumber INTEGER,\n    Amount REAL,\n    Type TEXT ,\n    Date DATE,\n    FOREIGN KEY(AccountNumber) REFERENCES Accounts(AccountNumber)\n);\n\nINSERT INTO \"Accounts\" (AccountNumber,Balance,InterestRate,OpenDate,CustomerID) VALUES (1,1000.0,2.0,'2023-01-01',1),(2,800.0,1.5,'2023-01-02',2),(3,700.0,1.0,'2023-01-03',3),(4,600.0,1.0,'2023-01-04',4),(5,900.0,2.5,'2023-01-05',5);\nINSERT INTO \"Customers\" (CustomerID,Email,fullname) VALUES (1,'john.doe@example.com','John Doe'),(2,'jane.smith@example.com','Jane Smith'),(3,'michael.brown@example.com','Michael Brown'),(4,'emma.wilson@example.com','Emma Wilson'),(5,'david.jackson@example.com','David Jackson');\nINSERT INTO \"Investments\" (InvestmentID,AccountNumber,StockSymbol,Quantity,PurchaseDate) VALUES (1,1,'AAPL',10,'2023-01-01'),(2,1,'GOOG',5,'2023-01-01'),(3,2,'AMZN',20,'2023-01-02'),(4,2,'MSFT',10,'2023-01-02'),(5,3,'TSLA',15,'2023-01-03');\nINSERT INTO \"PortfolioPerformance\" (PerformanceID,InvestmentID,Stock_Percentage,Stock_Value,Investment_Portfolios) VALUES (1,1,0.5,5000.0,1000.0),(2,2,0.3,15000.0,4500.0),(3,3,0.2,10000.0,2000.0),(4,4,0.4,20000.0,8000.0),(5,5,0.6,12000.0,7200.0);\nINSERT INTO \"Stocks\" (StockSymbol,CompanyName,CurrentPrice) VALUES ('AAPL','Apple Inc.',150.0),('GOOG','Alphabet Inc.',2800.0),('AMZN','Amazon.com Inc.',130.0),('MSFT','Microsoft Corporation',300.0),('TSLA','Tesla Inc.',200.0);\nINSERT INTO \"Transactions\" (TransactionID,AccountNumber,Amount,Type,Date) VALUES (1,1,200.0,'Deposit','2023-01-01'),(2,1,-50.0,'Withdrawal','2023-01-02'),(3,2,300.0,'Deposit','2023-01-03'),(4,2,-100.0,'Withdrawal','2023-01-04'),(5,3,150.0,'Deposit','2023-01-05');\n",
      "question": "Show me accounts with balances above 700 and their stock percentages.",
      "gold_queries": [
        "SELECT Accounts.AccountNumber , PortfolioPerformance.Stock_Percentage FROM PortfolioPerformance JOIN Investments ON Investments.InvestmentID = PortfolioPerformance.InvestmentID JOIN Accounts ON Investments.AccountNumber = Accounts.AccountNumber WHERE Balance > 700"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List accounts having a balance exceeding 700, accompanied by the percentage of their holdings represented by each stock in their portfolio.",
          "sql_queries": [
            "SELECT Accounts.AccountNumber, Stocks.StockSymbol, PortfolioPerformance.Stock_Percentage\nFROM Accounts\nJOIN Investments ON Accounts.AccountNumber = Investments.AccountNumber\nJOIN PortfolioPerformance ON Investments.InvestmentID = PortfolioPerformance.InvestmentID\nJOIN Stocks ON Investments.StockSymbol = Stocks.StockSymbol\nWHERE Accounts.Balance > 700"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Show accounts from the Accounts table where the balance is greater than 700, including the stock percentages linked to those accounts via Investments and PortfolioPerformance tables.",
          "sql_queries": [
            "SELECT Accounts.AccountNumber, PortfolioPerformance.Stock_Percentage\nFROM Accounts\nJOIN Investments ON Accounts.AccountNumber = Investments.AccountNumber\nJOIN PortfolioPerformance ON Investments.InvestmentID = PortfolioPerformance.InvestmentID\nWHERE Accounts.Balance > 700"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Retrieve accounts with a balance greater than 700, along with their associated stock percentages within the PortfolioPerformance table.",
          "sql_queries": [
            "SELECT A.AccountNumber, PP.Stock_Percentage\nFROM Accounts A\nJOIN Investments I ON A.AccountNumber = I.AccountNumber\nJOIN PortfolioPerformance PP ON I.InvestmentID = PP.InvestmentID\nWHERE A.Balance > 700"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.6666666666666666,
        "f1_score": 0.8,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Banking/vague_2cols_stock_allocation/vague_2cols_stock_allocation.sqlite",
      "db_dump": "CREATE TABLE Accounts (\n    AccountNumber INTEGER PRIMARY KEY,\n    Balance REAL ,\n    InterestRate REAL DEFAULT 1,\n    OpenDate DATE,\n    CustomerID INTEGER,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Customers (\n    CustomerID INTEGER PRIMARY KEY,\n    Email TEXT UNIQUE\n, fullname TEXT);\nCREATE TABLE Investments (\n    InvestmentID INTEGER PRIMARY KEY,\n    AccountNumber INTEGER,\n    StockSymbol TEXT,\n    Quantity INTEGER ,\n    PurchaseDate DATE,\n    FOREIGN KEY(AccountNumber) REFERENCES Accounts(AccountNumber),\n    FOREIGN KEY(StockSymbol) REFERENCES Stocks(StockSymbol)\n);\nCREATE TABLE PortfolioPerformance (\n    PerformanceID INTEGER PRIMARY KEY,\n    InvestmentID INTEGER,\n    Stock_Percentage REAL ,\n    Stock_Value REAL,\n    Investment_Portfolios REAL,\n    FOREIGN KEY(InvestmentID) REFERENCES Investments(InvestmentID)\n);\nCREATE TABLE Stocks (\n    StockSymbol TEXT PRIMARY KEY,\n    CompanyName TEXT,\n    CurrentPrice REAL\n);\nCREATE TABLE Transactions (\n    TransactionID INTEGER PRIMARY KEY,\n    AccountNumber INTEGER,\n    Amount REAL,\n    Type TEXT ,\n    Date DATE,\n    FOREIGN KEY(AccountNumber) REFERENCES Accounts(AccountNumber)\n);\n\nINSERT INTO \"Accounts\" (AccountNumber,Balance,InterestRate,OpenDate,CustomerID) VALUES (1,1000.0,2.0,'2023-01-01',1),(2,800.0,1.5,'2023-01-02',2),(3,700.0,1.0,'2023-01-03',3),(4,600.0,1.0,'2023-01-04',4),(5,900.0,2.5,'2023-01-05',5);\nINSERT INTO \"Customers\" (CustomerID,Email,fullname) VALUES (1,'john.doe@example.com','John Doe'),(2,'jane.smith@example.com','Jane Smith'),(3,'michael.brown@example.com','Michael Brown'),(4,'emma.wilson@example.com','Emma Wilson'),(5,'david.jackson@example.com','David Jackson');\nINSERT INTO \"Investments\" (InvestmentID,AccountNumber,StockSymbol,Quantity,PurchaseDate) VALUES (1,1,'AAPL',10,'2023-01-01'),(2,1,'GOOG',5,'2023-01-01'),(3,2,'AMZN',20,'2023-01-02'),(4,2,'MSFT',10,'2023-01-02'),(5,3,'TSLA',15,'2023-01-03');\nINSERT INTO \"PortfolioPerformance\" (PerformanceID,InvestmentID,Stock_Percentage,Stock_Value,Investment_Portfolios) VALUES (1,1,0.5,5000.0,1000.0),(2,2,0.3,15000.0,4500.0),(3,3,0.2,10000.0,2000.0),(4,4,0.4,20000.0,8000.0),(5,5,0.6,12000.0,7200.0);\nINSERT INTO \"Stocks\" (StockSymbol,CompanyName,CurrentPrice) VALUES ('AAPL','Apple Inc.',150.0),('GOOG','Alphabet Inc.',2800.0),('AMZN','Amazon.com Inc.',130.0),('MSFT','Microsoft Corporation',300.0),('TSLA','Tesla Inc.',200.0);\nINSERT INTO \"Transactions\" (TransactionID,AccountNumber,Amount,Type,Date) VALUES (1,1,200.0,'Deposit','2023-01-01'),(2,1,-50.0,'Withdrawal','2023-01-02'),(3,2,300.0,'Deposit','2023-01-03'),(4,2,-100.0,'Withdrawal','2023-01-04'),(5,3,150.0,'Deposit','2023-01-05');\n",
      "question": "Show me accounts with balances above 700 and their stock allocation.",
      "gold_queries": [
        "SELECT Accounts.AccountNumber , PortfolioPerformance.Stock_Percentage FROM PortfolioPerformance JOIN Investments ON Investments.InvestmentID = PortfolioPerformance.InvestmentID JOIN Accounts ON Investments.AccountNumber = Accounts.AccountNumber WHERE Balance > 700",
        "SELECT Accounts.AccountNumber , PortfolioPerformance.Stock_Value FROM PortfolioPerformance JOIN Investments ON Investments.InvestmentID = PortfolioPerformance.InvestmentID JOIN Accounts ON Investments.AccountNumber = Accounts.AccountNumber WHERE Balance > 700",
        "SELECT Accounts.AccountNumber , PortfolioPerformance.Stock_Percentage, Stock_Value FROM PortfolioPerformance JOIN Investments ON Investments.InvestmentID = PortfolioPerformance.InvestmentID JOIN Accounts ON Investments.AccountNumber = Accounts.AccountNumber WHERE Balance > 700"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Accounts with balances greater than 700, including the percentage and value of each stock held.",
          "sql_queries": [
            "SELECT a.AccountNumber, a.Balance, i.StockSymbol, pp.Stock_Percentage, pp.Stock_Value\nFROM Accounts a\nJOIN Investments i ON a.AccountNumber = i.AccountNumber\nJOIN PortfolioPerformance pp ON i.InvestmentID = pp.InvestmentID\nWHERE a.Balance > 700"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Accounts where the balance is above 700, showing the allocation percentage and value of each stock within those accounts.",
          "sql_queries": [
            "SELECT a.AccountNumber, p.Stock_Percentage, p.Stock_Value\nFROM Accounts a\nJOIN Investments i ON a.AccountNumber = i.AccountNumber\nJOIN PortfolioPerformance p ON i.InvestmentID = p.InvestmentID\nWHERE a.Balance > 700"
          ],
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "A list of accounts that have a balance exceeding 700, alongside the breakdown of their stock holdings.",
          "sql_queries": [
            "SELECT A.AccountNumber, A.Balance, I.StockSymbol, I.Quantity, S.CurrentPrice\nFROM Accounts A\nJOIN Investments I ON A.AccountNumber = I.AccountNumber\nJOIN Stocks S ON I.StockSymbol = S.StockSymbol\nWHERE A.Balance > 700"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "For every account with a balance higher than 700, display the stock allocation details.",
          "sql_queries": [
            "SELECT Accounts.AccountNumber, Stocks.StockSymbol, Investments.Quantity, PortfolioPerformance.Stock_Percentage, PortfolioPerformance.Stock_Value\nFROM Accounts\nJOIN Investments ON Accounts.AccountNumber = Investments.AccountNumber\nJOIN PortfolioPerformance ON Investments.InvestmentID = PortfolioPerformance.InvestmentID\nJOIN Stocks ON Investments.StockSymbol = Stocks.StockSymbol\nWHERE Accounts.Balance > 700"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve accounts having a balance greater than 700 and list the stock allocation percentages and values for each account.",
          "sql_queries": [
            "SELECT A.AccountNumber, PP.Stock_Percentage, PP.Stock_Value\nFROM Accounts A\nJOIN Investments I ON A.AccountNumber = I.AccountNumber\nJOIN PortfolioPerformance PP ON I.InvestmentID = PP.InvestmentID\nWHERE A.Balance > 700"
          ],
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.3333333333333333,
        "precision": 0.4,
        "f1_score": 0.3636363636363636,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Banking/vague_2cols_stock_allocation/vague_2cols_stock_allocation.sqlite",
      "db_dump": "CREATE TABLE Accounts (\n    AccountNumber INTEGER PRIMARY KEY,\n    Balance REAL ,\n    InterestRate REAL DEFAULT 1,\n    OpenDate DATE,\n    CustomerID INTEGER,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Customers (\n    CustomerID INTEGER PRIMARY KEY,\n    Email TEXT UNIQUE\n, fullname TEXT);\nCREATE TABLE Investments (\n    InvestmentID INTEGER PRIMARY KEY,\n    AccountNumber INTEGER,\n    StockSymbol TEXT,\n    Quantity INTEGER ,\n    PurchaseDate DATE,\n    FOREIGN KEY(AccountNumber) REFERENCES Accounts(AccountNumber),\n    FOREIGN KEY(StockSymbol) REFERENCES Stocks(StockSymbol)\n);\nCREATE TABLE PortfolioPerformance (\n    PerformanceID INTEGER PRIMARY KEY,\n    InvestmentID INTEGER,\n    Stock_Percentage REAL ,\n    Stock_Value REAL,\n    Investment_Portfolios REAL,\n    FOREIGN KEY(InvestmentID) REFERENCES Investments(InvestmentID)\n);\nCREATE TABLE Stocks (\n    StockSymbol TEXT PRIMARY KEY,\n    CompanyName TEXT,\n    CurrentPrice REAL\n);\nCREATE TABLE Transactions (\n    TransactionID INTEGER PRIMARY KEY,\n    AccountNumber INTEGER,\n    Amount REAL,\n    Type TEXT ,\n    Date DATE,\n    FOREIGN KEY(AccountNumber) REFERENCES Accounts(AccountNumber)\n);\n\nINSERT INTO \"Accounts\" (AccountNumber,Balance,InterestRate,OpenDate,CustomerID) VALUES (1,1000.0,2.0,'2023-01-01',1),(2,800.0,1.5,'2023-01-02',2),(3,700.0,1.0,'2023-01-03',3),(4,600.0,1.0,'2023-01-04',4),(5,900.0,2.5,'2023-01-05',5);\nINSERT INTO \"Customers\" (CustomerID,Email,fullname) VALUES (1,'john.doe@example.com','John Doe'),(2,'jane.smith@example.com','Jane Smith'),(3,'michael.brown@example.com','Michael Brown'),(4,'emma.wilson@example.com','Emma Wilson'),(5,'david.jackson@example.com','David Jackson');\nINSERT INTO \"Investments\" (InvestmentID,AccountNumber,StockSymbol,Quantity,PurchaseDate) VALUES (1,1,'AAPL',10,'2023-01-01'),(2,1,'GOOG',5,'2023-01-01'),(3,2,'AMZN',20,'2023-01-02'),(4,2,'MSFT',10,'2023-01-02'),(5,3,'TSLA',15,'2023-01-03');\nINSERT INTO \"PortfolioPerformance\" (PerformanceID,InvestmentID,Stock_Percentage,Stock_Value,Investment_Portfolios) VALUES (1,1,0.5,5000.0,1000.0),(2,2,0.3,15000.0,4500.0),(3,3,0.2,10000.0,2000.0),(4,4,0.4,20000.0,8000.0),(5,5,0.6,12000.0,7200.0);\nINSERT INTO \"Stocks\" (StockSymbol,CompanyName,CurrentPrice) VALUES ('AAPL','Apple Inc.',150.0),('GOOG','Alphabet Inc.',2800.0),('AMZN','Amazon.com Inc.',130.0),('MSFT','Microsoft Corporation',300.0),('TSLA','Tesla Inc.',200.0);\nINSERT INTO \"Transactions\" (TransactionID,AccountNumber,Amount,Type,Date) VALUES (1,1,200.0,'Deposit','2023-01-01'),(2,1,-50.0,'Withdrawal','2023-01-02'),(3,2,300.0,'Deposit','2023-01-03'),(4,2,-100.0,'Withdrawal','2023-01-04'),(5,3,150.0,'Deposit','2023-01-05');\n",
      "question": "Show me accounts with balances above 700 and their stock percentages and stock values.",
      "gold_queries": [
        "SELECT Accounts.AccountNumber , PortfolioPerformance.Stock_Percentage, Stock_Value FROM PortfolioPerformance JOIN Investments ON Investments.InvestmentID = PortfolioPerformance.InvestmentID JOIN Accounts ON Investments.AccountNumber = Accounts.AccountNumber WHERE Balance > 700"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "WHERE Accounts.Balance > 700;",
          "sql_queries": [
            "SELECT AccountNumber, Balance, InterestRate, OpenDate, CustomerID\nFROM Accounts\nWHERE Accounts.Balance > 700"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "JOIN PortfolioPerformance ON Accounts.AccountNumber = PortfolioPerformance.AccountNumber",
          "sql_queries": [
            "SELECT Accounts.AccountNumber, PortfolioPerformance.Stock_Percentage, PortfolioPerformance.Stock_Value\nFROM Accounts\nJOIN Investments ON Accounts.AccountNumber = Investments.AccountNumber\nJOIN PortfolioPerformance ON Investments.InvestmentID = PortfolioPerformance.InvestmentID"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "FROM Accounts",
          "sql_queries": [
            "SELECT AccountNumber, Balance, InterestRate, OpenDate, CustomerID FROM Accounts"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "SELECT Accounts.AccountNumber, PortfolioPerformance.Stock_Percentage, PortfolioPerformance.Stock_Value",
          "sql_queries": [
            "SELECT Accounts.AccountNumber, PortfolioPerformance.Stock_Percentage, PortfolioPerformance.Stock_Value\nFROM Accounts\nJOIN Investments ON Accounts.AccountNumber = Investments.AccountNumber\nJOIN PortfolioPerformance ON Investments.InvestmentID = PortfolioPerformance.InvestmentID"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "SHOW me accOUNTS where BALANCE is greater than 700 and JOIN PortfolioPerformance WHERE  PortfolioPerformance.AccountNumber = Accounts.AccountNumber",
          "sql_queries": [
            "SELECT Accounts.AccountNumber, Balance, InterestRate, OpenDate, CustomerID, PerformanceID, Stock_Percentage, Stock_Value, Investment_Portfolios\nFROM Accounts\nJOIN PortfolioPerformance ON Accounts.AccountNumber = PortfolioPerformance.AccountNumber\nWHERE Balance > 700"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT Accounts.AccountNumber, Balance, InterestRate, OpenDate, CustomerID, PerformanceID, Stock_Percentage, Stock_Value, Investment_Portfolios\nFROM Accounts\nJOIN PortfolioPerformance ON Accounts.AccountNumber = PortfolioPerformance.AccountNumber\nWHERE Balance > 700",
                "original_exception": "no such column: PortfolioPerformance.AccountNumber"
              }
            ],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [
          {
            "query": "SELECT Accounts.AccountNumber, Balance, InterestRate, OpenDate, CustomerID, PerformanceID, Stock_Percentage, Stock_Value, Investment_Portfolios\nFROM Accounts\nJOIN PortfolioPerformance ON Accounts.AccountNumber = PortfolioPerformance.AccountNumber\nWHERE Balance > 700",
            "original_exception": "no such column: PortfolioPerformance.AccountNumber"
          }
        ],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Banking/vague_2cols_stock_allocation/vague_2cols_stock_allocation.sqlite",
      "db_dump": "CREATE TABLE Accounts (\n    AccountNumber INTEGER PRIMARY KEY,\n    Balance REAL ,\n    InterestRate REAL DEFAULT 1,\n    OpenDate DATE,\n    CustomerID INTEGER,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Customers (\n    CustomerID INTEGER PRIMARY KEY,\n    Email TEXT UNIQUE\n, fullname TEXT);\nCREATE TABLE Investments (\n    InvestmentID INTEGER PRIMARY KEY,\n    AccountNumber INTEGER,\n    StockSymbol TEXT,\n    Quantity INTEGER ,\n    PurchaseDate DATE,\n    FOREIGN KEY(AccountNumber) REFERENCES Accounts(AccountNumber),\n    FOREIGN KEY(StockSymbol) REFERENCES Stocks(StockSymbol)\n);\nCREATE TABLE PortfolioPerformance (\n    PerformanceID INTEGER PRIMARY KEY,\n    InvestmentID INTEGER,\n    Stock_Percentage REAL ,\n    Stock_Value REAL,\n    Investment_Portfolios REAL,\n    FOREIGN KEY(InvestmentID) REFERENCES Investments(InvestmentID)\n);\nCREATE TABLE Stocks (\n    StockSymbol TEXT PRIMARY KEY,\n    CompanyName TEXT,\n    CurrentPrice REAL\n);\nCREATE TABLE Transactions (\n    TransactionID INTEGER PRIMARY KEY,\n    AccountNumber INTEGER,\n    Amount REAL,\n    Type TEXT ,\n    Date DATE,\n    FOREIGN KEY(AccountNumber) REFERENCES Accounts(AccountNumber)\n);\n\nINSERT INTO \"Accounts\" (AccountNumber,Balance,InterestRate,OpenDate,CustomerID) VALUES (1,1000.0,2.0,'2023-01-01',1),(2,800.0,1.5,'2023-01-02',2),(3,700.0,1.0,'2023-01-03',3),(4,600.0,1.0,'2023-01-04',4),(5,900.0,2.5,'2023-01-05',5);\nINSERT INTO \"Customers\" (CustomerID,Email,fullname) VALUES (1,'john.doe@example.com','John Doe'),(2,'jane.smith@example.com','Jane Smith'),(3,'michael.brown@example.com','Michael Brown'),(4,'emma.wilson@example.com','Emma Wilson'),(5,'david.jackson@example.com','David Jackson');\nINSERT INTO \"Investments\" (InvestmentID,AccountNumber,StockSymbol,Quantity,PurchaseDate) VALUES (1,1,'AAPL',10,'2023-01-01'),(2,1,'GOOG',5,'2023-01-01'),(3,2,'AMZN',20,'2023-01-02'),(4,2,'MSFT',10,'2023-01-02'),(5,3,'TSLA',15,'2023-01-03');\nINSERT INTO \"PortfolioPerformance\" (PerformanceID,InvestmentID,Stock_Percentage,Stock_Value,Investment_Portfolios) VALUES (1,1,0.5,5000.0,1000.0),(2,2,0.3,15000.0,4500.0),(3,3,0.2,10000.0,2000.0),(4,4,0.4,20000.0,8000.0),(5,5,0.6,12000.0,7200.0);\nINSERT INTO \"Stocks\" (StockSymbol,CompanyName,CurrentPrice) VALUES ('AAPL','Apple Inc.',150.0),('GOOG','Alphabet Inc.',2800.0),('AMZN','Amazon.com Inc.',130.0),('MSFT','Microsoft Corporation',300.0),('TSLA','Tesla Inc.',200.0);\nINSERT INTO \"Transactions\" (TransactionID,AccountNumber,Amount,Type,Date) VALUES (1,1,200.0,'Deposit','2023-01-01'),(2,1,-50.0,'Withdrawal','2023-01-02'),(3,2,300.0,'Deposit','2023-01-03'),(4,2,-100.0,'Withdrawal','2023-01-04'),(5,3,150.0,'Deposit','2023-01-05');\n",
      "question": "what percentage does jane smith have allocated to each stock in her portfolio?",
      "gold_queries": [
        "SELECT Stock_Percentage FROM PortfolioPerformance JOIN Investments ON Investments.InvestmentID = PortfolioPerformance.InvestmentID JOIN Accounts ON Investments.AccountNumber = Accounts.AccountNumber JOIN Customers ON Accounts.CustomerID = Customers.CustomerID WHERE Customers.fullname = 'Jane Smith'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What proportion of Jane Smith's total investment portfolio is dedicated to each individual stock?",
          "sql_queries": [
            "SELECT S.CompanyName, (PP.Stock_Value / SUM(PP.Stock_Value) OVER (PARTITION BY I.AccountNumber)) AS Proportion\nFROM Customers C\nJOIN Accounts A ON C.CustomerID = A.CustomerID\nJOIN Investments I ON A.AccountNumber = I.AccountNumber\nJOIN PortfolioPerformance PP ON I.InvestmentID = PP.InvestmentID\nJOIN Stocks S ON I.StockSymbol = S.StockSymbol\nWHERE C.fullname = 'Jane Smith'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "For each stock held by Jane Smith, what percentage of her total investment value is represented by that stock?",
          "sql_queries": [
            "SELECT S.StockSymbol, (PP.Stock_Value / SUM(PP.Stock_Value) OVER (PARTITION BY I.AccountNumber)) * 100 AS Percentage\nFROM Customers C\nJOIN Accounts A ON C.CustomerID = A.CustomerID\nJOIN Investments I ON A.AccountNumber = I.AccountNumber\nJOIN PortfolioPerformance PP ON I.InvestmentID = PP.InvestmentID\nJOIN Stocks S ON I.StockSymbol = S.StockSymbol\nWHERE C.fullname = 'Jane Smith'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "What is the percentage of each stock owned by Jane Smith across all her investments?",
          "sql_queries": [
            "SELECT S.StockSymbol, SUM(PP.Stock_Percentage) as Total_Stock_Percentage\nFROM Customers C\nJOIN Accounts A ON C.CustomerID = A.CustomerID\nJOIN Investments I ON A.AccountNumber = I.AccountNumber\nJOIN PortfolioPerformance PP ON I.InvestmentID = PP.InvestmentID\nJOIN Stocks S ON I.StockSymbol = S.StockSymbol\nWHERE C.fullname = 'Jane Smith'\nGROUP BY S.StockSymbol"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Banking/vague_2cols_stock_allocation/vague_2cols_stock_allocation.sqlite",
      "db_dump": "CREATE TABLE Accounts (\n    AccountNumber INTEGER PRIMARY KEY,\n    Balance REAL ,\n    InterestRate REAL DEFAULT 1,\n    OpenDate DATE,\n    CustomerID INTEGER,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Customers (\n    CustomerID INTEGER PRIMARY KEY,\n    Email TEXT UNIQUE\n, fullname TEXT);\nCREATE TABLE Investments (\n    InvestmentID INTEGER PRIMARY KEY,\n    AccountNumber INTEGER,\n    StockSymbol TEXT,\n    Quantity INTEGER ,\n    PurchaseDate DATE,\n    FOREIGN KEY(AccountNumber) REFERENCES Accounts(AccountNumber),\n    FOREIGN KEY(StockSymbol) REFERENCES Stocks(StockSymbol)\n);\nCREATE TABLE PortfolioPerformance (\n    PerformanceID INTEGER PRIMARY KEY,\n    InvestmentID INTEGER,\n    Stock_Percentage REAL ,\n    Stock_Value REAL,\n    Investment_Portfolios REAL,\n    FOREIGN KEY(InvestmentID) REFERENCES Investments(InvestmentID)\n);\nCREATE TABLE Stocks (\n    StockSymbol TEXT PRIMARY KEY,\n    CompanyName TEXT,\n    CurrentPrice REAL\n);\nCREATE TABLE Transactions (\n    TransactionID INTEGER PRIMARY KEY,\n    AccountNumber INTEGER,\n    Amount REAL,\n    Type TEXT ,\n    Date DATE,\n    FOREIGN KEY(AccountNumber) REFERENCES Accounts(AccountNumber)\n);\n\nINSERT INTO \"Accounts\" (AccountNumber,Balance,InterestRate,OpenDate,CustomerID) VALUES (1,1000.0,2.0,'2023-01-01',1),(2,800.0,1.5,'2023-01-02',2),(3,700.0,1.0,'2023-01-03',3),(4,600.0,1.0,'2023-01-04',4),(5,900.0,2.5,'2023-01-05',5);\nINSERT INTO \"Customers\" (CustomerID,Email,fullname) VALUES (1,'john.doe@example.com','John Doe'),(2,'jane.smith@example.com','Jane Smith'),(3,'michael.brown@example.com','Michael Brown'),(4,'emma.wilson@example.com','Emma Wilson'),(5,'david.jackson@example.com','David Jackson');\nINSERT INTO \"Investments\" (InvestmentID,AccountNumber,StockSymbol,Quantity,PurchaseDate) VALUES (1,1,'AAPL',10,'2023-01-01'),(2,1,'GOOG',5,'2023-01-01'),(3,2,'AMZN',20,'2023-01-02'),(4,2,'MSFT',10,'2023-01-02'),(5,3,'TSLA',15,'2023-01-03');\nINSERT INTO \"PortfolioPerformance\" (PerformanceID,InvestmentID,Stock_Percentage,Stock_Value,Investment_Portfolios) VALUES (1,1,0.5,5000.0,1000.0),(2,2,0.3,15000.0,4500.0),(3,3,0.2,10000.0,2000.0),(4,4,0.4,20000.0,8000.0),(5,5,0.6,12000.0,7200.0);\nINSERT INTO \"Stocks\" (StockSymbol,CompanyName,CurrentPrice) VALUES ('AAPL','Apple Inc.',150.0),('GOOG','Alphabet Inc.',2800.0),('AMZN','Amazon.com Inc.',130.0),('MSFT','Microsoft Corporation',300.0),('TSLA','Tesla Inc.',200.0);\nINSERT INTO \"Transactions\" (TransactionID,AccountNumber,Amount,Type,Date) VALUES (1,1,200.0,'Deposit','2023-01-01'),(2,1,-50.0,'Withdrawal','2023-01-02'),(3,2,300.0,'Deposit','2023-01-03'),(4,2,-100.0,'Withdrawal','2023-01-04'),(5,3,150.0,'Deposit','2023-01-05');\n",
      "question": "what value does jane smith have allocated to each stock in her portfolio?",
      "gold_queries": [
        "SELECT Stock_Value FROM PortfolioPerformance JOIN Investments ON Investments.InvestmentID = PortfolioPerformance.InvestmentID JOIN Accounts ON Investments.AccountNumber = Accounts.AccountNumber JOIN Customers ON Accounts.CustomerID = Customers.CustomerID WHERE Customers.fullname = 'Jane Smith'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List all the StockSymbols held by Jane Smith and the corresponding Stock_Value from the PortfolioPerformance table.",
          "sql_queries": [
            "SELECT StockSymbol, Stock_Value \nFROM Investments \nJOIN Accounts ON Investments.AccountNumber = Accounts.AccountNumber \nJOIN Customers ON Accounts.CustomerID = Customers.CustomerID \nJOIN PortfolioPerformance ON Investments.InvestmentID = PortfolioPerformance.InvestmentID \nWHERE Customers.fullname = 'Jane Smith'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "How much money has Jane Smith invested in each stock?",
          "sql_queries": [
            "SELECT S.StockSymbol, I.Quantity * S.CurrentPrice AS InvestmentValue\nFROM Customers C\nJOIN Accounts A ON C.CustomerID = A.CustomerID\nJOIN Investments I ON A.AccountNumber = I.AccountNumber\nJOIN Stocks S ON I.StockSymbol = S.StockSymbol\nWHERE C.fullname = 'Jane Smith'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Break down the investments of Jane Smith by StockSymbol and show the value of each position.",
          "sql_queries": [
            "SELECT I.StockSymbol, PP.Stock_Value\nFROM Investments I\nJOIN Customers C ON I.AccountNumber = C.CustomerID\nJOIN PortfolioPerformance PP ON I.InvestmentID = PP.InvestmentID\nWHERE C.fullname = 'Jane Smith'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "For each StockSymbol in the PortfolioPerformance table, what is the Stock_Value for Jane Smith's Investments?",
          "sql_queries": [
            "SELECT S.StockSymbol, P.Stock_Value \nFROM PortfolioPerformance AS P \nJOIN Investments AS I ON P.InvestmentID = I.InvestmentID \nJOIN Customers AS C ON C.CustomerID = I.AccountNumber \nWHERE C.fullname = 'Jane Smith'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT S.StockSymbol, P.Stock_Value \nFROM PortfolioPerformance AS P \nJOIN Investments AS I ON P.InvestmentID = I.InvestmentID \nJOIN Customers AS C ON C.CustomerID = I.AccountNumber \nWHERE C.fullname = 'Jane Smith'",
                "original_exception": "no such column: S.StockSymbol"
              }
            ],
            "all_found": false
          }
        },
        {
          "interpretation": "What is the Stock_Value for each StockSymbol in Investments where CustomerID = 2?",
          "sql_queries": [
            "SELECT Stock_Value\nFROM Investments\nJOIN PortfolioPerformance ON Investments.InvestmentID = PortfolioPerformance.InvestmentID\nJOIN Accounts ON Investments.AccountNumber = Accounts.AccountNumber\nWHERE Accounts.CustomerID = 2"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Which Stocks are held by the customer with Email 'jane.smith@example.com' and what is the value of each holding?",
          "sql_queries": [
            "SELECT S.CompanyName, PP.Stock_Value\nFROM Investments I\nJOIN Accounts A ON I.AccountNumber = A.AccountNumber\nJOIN Customers C ON A.CustomerID = C.CustomerID\nJOIN PortfolioPerformance PP ON I.InvestmentID = PP.InvestmentID\nJOIN Stocks S ON I.StockSymbol = S.StockSymbol\nWHERE C.Email = 'jane.smith@example.com'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.16666666666666666,
        "f1_score": 0.2857142857142857,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [
          {
            "query": "SELECT S.StockSymbol, P.Stock_Value \nFROM PortfolioPerformance AS P \nJOIN Investments AS I ON P.InvestmentID = I.InvestmentID \nJOIN Customers AS C ON C.CustomerID = I.AccountNumber \nWHERE C.fullname = 'Jane Smith'",
            "original_exception": "no such column: S.StockSymbol"
          }
        ],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Banking/vague_2cols_stock_allocation/vague_2cols_stock_allocation.sqlite",
      "db_dump": "CREATE TABLE Accounts (\n    AccountNumber INTEGER PRIMARY KEY,\n    Balance REAL ,\n    InterestRate REAL DEFAULT 1,\n    OpenDate DATE,\n    CustomerID INTEGER,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Customers (\n    CustomerID INTEGER PRIMARY KEY,\n    Email TEXT UNIQUE\n, fullname TEXT);\nCREATE TABLE Investments (\n    InvestmentID INTEGER PRIMARY KEY,\n    AccountNumber INTEGER,\n    StockSymbol TEXT,\n    Quantity INTEGER ,\n    PurchaseDate DATE,\n    FOREIGN KEY(AccountNumber) REFERENCES Accounts(AccountNumber),\n    FOREIGN KEY(StockSymbol) REFERENCES Stocks(StockSymbol)\n);\nCREATE TABLE PortfolioPerformance (\n    PerformanceID INTEGER PRIMARY KEY,\n    InvestmentID INTEGER,\n    Stock_Percentage REAL ,\n    Stock_Value REAL,\n    Investment_Portfolios REAL,\n    FOREIGN KEY(InvestmentID) REFERENCES Investments(InvestmentID)\n);\nCREATE TABLE Stocks (\n    StockSymbol TEXT PRIMARY KEY,\n    CompanyName TEXT,\n    CurrentPrice REAL\n);\nCREATE TABLE Transactions (\n    TransactionID INTEGER PRIMARY KEY,\n    AccountNumber INTEGER,\n    Amount REAL,\n    Type TEXT ,\n    Date DATE,\n    FOREIGN KEY(AccountNumber) REFERENCES Accounts(AccountNumber)\n);\n\nINSERT INTO \"Accounts\" (AccountNumber,Balance,InterestRate,OpenDate,CustomerID) VALUES (1,1000.0,2.0,'2023-01-01',1),(2,800.0,1.5,'2023-01-02',2),(3,700.0,1.0,'2023-01-03',3),(4,600.0,1.0,'2023-01-04',4),(5,900.0,2.5,'2023-01-05',5);\nINSERT INTO \"Customers\" (CustomerID,Email,fullname) VALUES (1,'john.doe@example.com','John Doe'),(2,'jane.smith@example.com','Jane Smith'),(3,'michael.brown@example.com','Michael Brown'),(4,'emma.wilson@example.com','Emma Wilson'),(5,'david.jackson@example.com','David Jackson');\nINSERT INTO \"Investments\" (InvestmentID,AccountNumber,StockSymbol,Quantity,PurchaseDate) VALUES (1,1,'AAPL',10,'2023-01-01'),(2,1,'GOOG',5,'2023-01-01'),(3,2,'AMZN',20,'2023-01-02'),(4,2,'MSFT',10,'2023-01-02'),(5,3,'TSLA',15,'2023-01-03');\nINSERT INTO \"PortfolioPerformance\" (PerformanceID,InvestmentID,Stock_Percentage,Stock_Value,Investment_Portfolios) VALUES (1,1,0.5,5000.0,1000.0),(2,2,0.3,15000.0,4500.0),(3,3,0.2,10000.0,2000.0),(4,4,0.4,20000.0,8000.0),(5,5,0.6,12000.0,7200.0);\nINSERT INTO \"Stocks\" (StockSymbol,CompanyName,CurrentPrice) VALUES ('AAPL','Apple Inc.',150.0),('GOOG','Alphabet Inc.',2800.0),('AMZN','Amazon.com Inc.',130.0),('MSFT','Microsoft Corporation',300.0),('TSLA','Tesla Inc.',200.0);\nINSERT INTO \"Transactions\" (TransactionID,AccountNumber,Amount,Type,Date) VALUES (1,1,200.0,'Deposit','2023-01-01'),(2,1,-50.0,'Withdrawal','2023-01-02'),(3,2,300.0,'Deposit','2023-01-03'),(4,2,-100.0,'Withdrawal','2023-01-04'),(5,3,150.0,'Deposit','2023-01-05');\n",
      "question": "What is Jane Smith's stock allocation?",
      "gold_queries": [
        "SELECT Stock_Percentage FROM PortfolioPerformance JOIN Investments ON Investments.InvestmentID = PortfolioPerformance.InvestmentID JOIN Accounts ON Investments.AccountNumber = Accounts.AccountNumber JOIN Customers ON Accounts.CustomerID = Customers.CustomerID WHERE Customers.fullname = 'Jane Smith'",
        "SELECT Stock_Value FROM PortfolioPerformance JOIN Investments ON Investments.InvestmentID = PortfolioPerformance.InvestmentID JOIN Accounts ON Investments.AccountNumber = Accounts.AccountNumber JOIN Customers ON Accounts.CustomerID = Customers.CustomerID WHERE Customers.fullname = 'Jane Smith'",
        "SELECT Stock_Percentage, Stock_Value FROM PortfolioPerformance JOIN Investments ON Investments.InvestmentID = PortfolioPerformance.InvestmentID JOIN Accounts ON Investments.AccountNumber = Accounts.AccountNumber JOIN Customers ON Accounts.CustomerID = Customers.CustomerID WHERE Customers.fullname = 'Jane Smith'"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What is the percentage allocation of each stock within Jane Smith's investment portfolio?",
          "sql_queries": [
            "SELECT Stock_Percentage\nFROM PortfolioPerformance\nJOIN Investments ON PortfolioPerformance.InvestmentID = Investments.InvestmentID\nJOIN Accounts ON Investments.AccountNumber = Accounts.AccountNumber\nJOIN Customers ON Accounts.CustomerID = Customers.CustomerID\nWHERE Customers.fullname = 'Jane Smith'"
          ],
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "What stocks does Jane Smith own, and how many shares of each stock does she own?",
          "sql_queries": [
            "SELECT S.CompanyName, I.Quantity\nFROM Customers C\nJOIN Accounts A ON C.CustomerID = A.CustomerID\nJOIN Investments I ON A.AccountNumber = I.AccountNumber\nJOIN Stocks S ON I.StockSymbol = S.StockSymbol\nWHERE C.fullname = 'Jane Smith'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "What is the total value of Jane Smith's stock investments?",
          "sql_queries": [
            "SELECT SUM(PortfolioPerformance.Stock_Value) \nFROM Customers \nJOIN Accounts ON Customers.CustomerID = Accounts.CustomerID \nJOIN Investments ON Accounts.AccountNumber = Investments.AccountNumber \nJOIN PortfolioPerformance ON Investments.InvestmentID = PortfolioPerformance.InvestmentID \nWHERE Customers.fullname = 'Jane Smith'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.3333333333333333,
        "precision": 0.3333333333333333,
        "f1_score": 0.3333333333333333,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Banking/vague_2cols_stock_allocation/vague_2cols_stock_allocation.sqlite",
      "db_dump": "CREATE TABLE Accounts (\n    AccountNumber INTEGER PRIMARY KEY,\n    Balance REAL ,\n    InterestRate REAL DEFAULT 1,\n    OpenDate DATE,\n    CustomerID INTEGER,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Customers (\n    CustomerID INTEGER PRIMARY KEY,\n    Email TEXT UNIQUE\n, fullname TEXT);\nCREATE TABLE Investments (\n    InvestmentID INTEGER PRIMARY KEY,\n    AccountNumber INTEGER,\n    StockSymbol TEXT,\n    Quantity INTEGER ,\n    PurchaseDate DATE,\n    FOREIGN KEY(AccountNumber) REFERENCES Accounts(AccountNumber),\n    FOREIGN KEY(StockSymbol) REFERENCES Stocks(StockSymbol)\n);\nCREATE TABLE PortfolioPerformance (\n    PerformanceID INTEGER PRIMARY KEY,\n    InvestmentID INTEGER,\n    Stock_Percentage REAL ,\n    Stock_Value REAL,\n    Investment_Portfolios REAL,\n    FOREIGN KEY(InvestmentID) REFERENCES Investments(InvestmentID)\n);\nCREATE TABLE Stocks (\n    StockSymbol TEXT PRIMARY KEY,\n    CompanyName TEXT,\n    CurrentPrice REAL\n);\nCREATE TABLE Transactions (\n    TransactionID INTEGER PRIMARY KEY,\n    AccountNumber INTEGER,\n    Amount REAL,\n    Type TEXT ,\n    Date DATE,\n    FOREIGN KEY(AccountNumber) REFERENCES Accounts(AccountNumber)\n);\n\nINSERT INTO \"Accounts\" (AccountNumber,Balance,InterestRate,OpenDate,CustomerID) VALUES (1,1000.0,2.0,'2023-01-01',1),(2,800.0,1.5,'2023-01-02',2),(3,700.0,1.0,'2023-01-03',3),(4,600.0,1.0,'2023-01-04',4),(5,900.0,2.5,'2023-01-05',5);\nINSERT INTO \"Customers\" (CustomerID,Email,fullname) VALUES (1,'john.doe@example.com','John Doe'),(2,'jane.smith@example.com','Jane Smith'),(3,'michael.brown@example.com','Michael Brown'),(4,'emma.wilson@example.com','Emma Wilson'),(5,'david.jackson@example.com','David Jackson');\nINSERT INTO \"Investments\" (InvestmentID,AccountNumber,StockSymbol,Quantity,PurchaseDate) VALUES (1,1,'AAPL',10,'2023-01-01'),(2,1,'GOOG',5,'2023-01-01'),(3,2,'AMZN',20,'2023-01-02'),(4,2,'MSFT',10,'2023-01-02'),(5,3,'TSLA',15,'2023-01-03');\nINSERT INTO \"PortfolioPerformance\" (PerformanceID,InvestmentID,Stock_Percentage,Stock_Value,Investment_Portfolios) VALUES (1,1,0.5,5000.0,1000.0),(2,2,0.3,15000.0,4500.0),(3,3,0.2,10000.0,2000.0),(4,4,0.4,20000.0,8000.0),(5,5,0.6,12000.0,7200.0);\nINSERT INTO \"Stocks\" (StockSymbol,CompanyName,CurrentPrice) VALUES ('AAPL','Apple Inc.',150.0),('GOOG','Alphabet Inc.',2800.0),('AMZN','Amazon.com Inc.',130.0),('MSFT','Microsoft Corporation',300.0),('TSLA','Tesla Inc.',200.0);\nINSERT INTO \"Transactions\" (TransactionID,AccountNumber,Amount,Type,Date) VALUES (1,1,200.0,'Deposit','2023-01-01'),(2,1,-50.0,'Withdrawal','2023-01-02'),(3,2,300.0,'Deposit','2023-01-03'),(4,2,-100.0,'Withdrawal','2023-01-04'),(5,3,150.0,'Deposit','2023-01-05');\n",
      "question": "what percentage and value does jane smith have allocated to each stock in her portfolio?",
      "gold_queries": [
        "SELECT Stock_Percentage, Stock_Value FROM PortfolioPerformance JOIN Investments ON Investments.InvestmentID = PortfolioPerformance.InvestmentID JOIN Accounts ON Investments.AccountNumber = Accounts.AccountNumber JOIN Customers ON Accounts.CustomerID = Customers.CustomerID WHERE Customers.fullname = 'Jane Smith'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "For each stock in Jane Smith's portfolio, what is the percentage allocation and the corresponding stock value?",
          "sql_queries": [
            "SELECT S.CompanyName, PP.Stock_Percentage, PP.Stock_Value\nFROM Customers C\nJOIN Accounts A ON C.CustomerID = A.CustomerID\nJOIN Investments I ON A.AccountNumber = I.AccountNumber\nJOIN PortfolioPerformance PP ON I.InvestmentID = PP.InvestmentID\nJOIN Stocks S ON I.StockSymbol = S.StockSymbol\nWHERE C.fullname = 'Jane Smith'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "What percentage and value of Jane Smith's total portfolio is allocated to each stock?",
          "sql_queries": [
            "SELECT S.StockSymbol, S.CompanyName, PP.Stock_Percentage, PP.Stock_Value\nFROM Customers C\nJOIN Accounts A ON C.CustomerID = A.CustomerID\nJOIN Investments I ON A.AccountNumber = I.AccountNumber\nJOIN PortfolioPerformance PP ON I.InvestmentID = PP.InvestmentID\nJOIN Stocks S ON I.StockSymbol = S.StockSymbol\nWHERE C.fullname = 'Jane Smith'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Calculate the stock percentage and value for each stock held by Jane Smith.",
          "sql_queries": [
            "SELECT T2.Stock_Percentage, T2.Stock_Value\nFROM Customers AS T1\nJOIN Investments AS T3 ON T1.CustomerID = T3.CustomerID\nJOIN PortfolioPerformance AS T2 ON T3.InvestmentID = T2.InvestmentID\nWHERE T1.fullname = 'Jane Smith'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT T2.Stock_Percentage, T2.Stock_Value\nFROM Customers AS T1\nJOIN Investments AS T3 ON T1.CustomerID = T3.CustomerID\nJOIN PortfolioPerformance AS T2 ON T3.InvestmentID = T2.InvestmentID\nWHERE T1.fullname = 'Jane Smith'",
                "original_exception": "no such column: T3.CustomerID"
              }
            ],
            "all_found": false
          }
        },
        {
          "interpretation": "Breakdown the stock holdings of Jane Smith's portfolio by percentage and value.",
          "sql_queries": [
            "SELECT Stocks.CompanyName, PortfolioPerformance.Stock_Percentage, PortfolioPerformance.Stock_Value\nFROM PortfolioPerformance\nJOIN Investments ON PortfolioPerformance.InvestmentID = Investments.InvestmentID\nJOIN Accounts ON Investments.AccountNumber = Accounts.AccountNumber\nJOIN Customers ON Accounts.CustomerID = Customers.CustomerID\nJOIN Stocks ON Investments.StockSymbol = Stocks.StockSymbol\nWHERE Customers.fullname = 'Jane Smith'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List the percentage and value of each stock held by Jane Smith.",
          "sql_queries": [
            "SELECT Stock_Percentage, Stock_Value \nFROM PortfolioPerformance \nJOIN Investments ON PortfolioPerformance.InvestmentID = Investments.InvestmentID \nJOIN Accounts ON Investments.AccountNumber = Accounts.AccountNumber \nJOIN Customers ON Accounts.CustomerID = Customers.CustomerID \nWHERE Customers.fullname = 'Jane Smith'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [
          {
            "query": "SELECT T2.Stock_Percentage, T2.Stock_Value\nFROM Customers AS T1\nJOIN Investments AS T3 ON T1.CustomerID = T3.CustomerID\nJOIN PortfolioPerformance AS T2 ON T3.InvestmentID = T2.InvestmentID\nWHERE T1.fullname = 'Jane Smith'",
            "original_exception": "no such column: T3.CustomerID"
          }
        ],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Banking/vague_2cols_stock_allocation/vague_2cols_stock_allocation.sqlite",
      "db_dump": "CREATE TABLE Accounts (\n    AccountNumber INTEGER PRIMARY KEY,\n    Balance REAL ,\n    InterestRate REAL DEFAULT 1,\n    OpenDate DATE,\n    CustomerID INTEGER,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Customers (\n    CustomerID INTEGER PRIMARY KEY,\n    Email TEXT UNIQUE\n, fullname TEXT);\nCREATE TABLE Investments (\n    InvestmentID INTEGER PRIMARY KEY,\n    AccountNumber INTEGER,\n    StockSymbol TEXT,\n    Quantity INTEGER ,\n    PurchaseDate DATE,\n    FOREIGN KEY(AccountNumber) REFERENCES Accounts(AccountNumber),\n    FOREIGN KEY(StockSymbol) REFERENCES Stocks(StockSymbol)\n);\nCREATE TABLE PortfolioPerformance (\n    PerformanceID INTEGER PRIMARY KEY,\n    InvestmentID INTEGER,\n    Stock_Percentage REAL ,\n    Stock_Value REAL,\n    Investment_Portfolios REAL,\n    FOREIGN KEY(InvestmentID) REFERENCES Investments(InvestmentID)\n);\nCREATE TABLE Stocks (\n    StockSymbol TEXT PRIMARY KEY,\n    CompanyName TEXT,\n    CurrentPrice REAL\n);\nCREATE TABLE Transactions (\n    TransactionID INTEGER PRIMARY KEY,\n    AccountNumber INTEGER,\n    Amount REAL,\n    Type TEXT ,\n    Date DATE,\n    FOREIGN KEY(AccountNumber) REFERENCES Accounts(AccountNumber)\n);\n\nINSERT INTO \"Accounts\" (AccountNumber,Balance,InterestRate,OpenDate,CustomerID) VALUES (1,1000.0,2.0,'2023-01-01',1),(2,800.0,1.5,'2023-01-02',2),(3,700.0,1.0,'2023-01-03',3),(4,600.0,1.0,'2023-01-04',4),(5,900.0,2.5,'2023-01-05',5);\nINSERT INTO \"Customers\" (CustomerID,Email,fullname) VALUES (1,'john.doe@example.com','John Doe'),(2,'jane.smith@example.com','Jane Smith'),(3,'michael.brown@example.com','Michael Brown'),(4,'emma.wilson@example.com','Emma Wilson'),(5,'david.jackson@example.com','David Jackson');\nINSERT INTO \"Investments\" (InvestmentID,AccountNumber,StockSymbol,Quantity,PurchaseDate) VALUES (1,1,'AAPL',10,'2023-01-01'),(2,1,'GOOG',5,'2023-01-01'),(3,2,'AMZN',20,'2023-01-02'),(4,2,'MSFT',10,'2023-01-02'),(5,3,'TSLA',15,'2023-01-03');\nINSERT INTO \"PortfolioPerformance\" (PerformanceID,InvestmentID,Stock_Percentage,Stock_Value,Investment_Portfolios) VALUES (1,1,0.5,5000.0,1000.0),(2,2,0.3,15000.0,4500.0),(3,3,0.2,10000.0,2000.0),(4,4,0.4,20000.0,8000.0),(5,5,0.6,12000.0,7200.0);\nINSERT INTO \"Stocks\" (StockSymbol,CompanyName,CurrentPrice) VALUES ('AAPL','Apple Inc.',150.0),('GOOG','Alphabet Inc.',2800.0),('AMZN','Amazon.com Inc.',130.0),('MSFT','Microsoft Corporation',300.0),('TSLA','Tesla Inc.',200.0);\nINSERT INTO \"Transactions\" (TransactionID,AccountNumber,Amount,Type,Date) VALUES (1,1,200.0,'Deposit','2023-01-01'),(2,1,-50.0,'Withdrawal','2023-01-02'),(3,2,300.0,'Deposit','2023-01-03'),(4,2,-100.0,'Withdrawal','2023-01-04'),(5,3,150.0,'Deposit','2023-01-05');\n",
      "question": "Show me accounts with balances above 700 and their stock values.",
      "gold_queries": [
        "SELECT Accounts.AccountNumber , PortfolioPerformance.Stock_Value FROM PortfolioPerformance JOIN Investments ON Investments.InvestmentID = PortfolioPerformance.InvestmentID JOIN Accounts ON Investments.AccountNumber = Accounts.AccountNumber WHERE Balance > 700"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Select AccountNumber, Balance from Accounts where Balance > 700 and select StockSymbol, PortfolioPerformance.Stock_Value from PortfolioPerformance where InvestmentID in (select InvestmentID from Investments where AccountNumber in (select AccountNumber from Accounts where Balance > 700)).",
          "sql_queries": [
            "SELECT StockSymbol, PortfolioPerformance.Stock_Value FROM PortfolioPerformance WHERE InvestmentID IN (SELECT InvestmentID FROM Investments WHERE AccountNumber IN (SELECT AccountNumber FROM Accounts WHERE Balance > 700))",
            "SELECT AccountNumber, Balance FROM Accounts WHERE Balance > 700"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT StockSymbol, PortfolioPerformance.Stock_Value FROM PortfolioPerformance WHERE InvestmentID IN (SELECT InvestmentID FROM Investments WHERE AccountNumber IN (SELECT AccountNumber FROM Accounts WHERE Balance > 700))",
                "original_exception": "no such column: StockSymbol"
              }
            ],
            "all_found": false
          }
        },
        {
          "interpretation": "Show Accounts with Balance > 700, join with Investments, and display InvestmentID, Account Number, StockSymbol, and PortfolioPerformance.Stock_Value",
          "sql_queries": [
            "SELECT I.InvestmentID, I.AccountNumber, I.StockSymbol, P.Stock_Value\nFROM Accounts A\nJOIN Investments I ON A.AccountNumber = I.AccountNumber\nJOIN PortfolioPerformance P ON I.InvestmentID = P.InvestmentID\nWHERE A.Balance > 700"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Show Accounts with Balance > 700, join with Investments, and sum up PortfolioPerformance.Stock_Value for each account.",
          "sql_queries": [
            "SELECT A.AccountNumber, SUM(P.Stock_Value) as TotalStockValue\nFROM Accounts A\nJOIN Investments I ON A.AccountNumber = I.AccountNumber\nJOIN PortfolioPerformance P ON I.InvestmentID = P.InvestmentID\nWHERE A.Balance > 700\nGROUP BY A.AccountNumber"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [
          {
            "query": "SELECT StockSymbol, PortfolioPerformance.Stock_Value FROM PortfolioPerformance WHERE InvestmentID IN (SELECT InvestmentID FROM Investments WHERE AccountNumber IN (SELECT AccountNumber FROM Accounts WHERE Balance > 700))",
            "original_exception": "no such column: StockSymbol"
          }
        ],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Airport/vague_2cols_location1/vague_2cols_location1.sqlite",
      "db_dump": "CREATE TABLE Aircrafts (\n    Aircraft_Id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Model_Name TEXT,\n    Manufacturer TEXT,\n    Registration_Mark TEXT,\n    Type TEXT,\n    Capacity INT,\n    Range_Miles TEXT,\n    Maximum_Speed MPH,\n    Cruise_Speed MPH,\n    Service_Ceiling FEET,\n    Operator_Id INTEGER,\n    FOREIGN KEY (Operator_Id) REFERENCES Airlines(Airline_Id)\n);\nCREATE TABLE Airports (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    IATA_Code CHAR(3),\n    ICAA_Code CHAR(3),\n    Latitude REAL,\n    Longitude REAL,\n    Elevation INT,\n    Timezone INT,\n    Direction_Indicator CHAR(2),\n    Surface_Area FLOAT,\n    Movement_Area FLOAT,\n    Runway_Length FLOAT,\n    City TEXT,\n    \"State\" TEXT,\n    Phone_Number VARCHAR(15),\n    Website VARCHAR(50),\n    Email VARCHAR(50),\n    Year_Established INT\n);\nCREATE TABLE Baggage (\n    Bag_Id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Flight_Id INTEGER,\n    Owner_FirstName TEXT,\n    Owner_LastName TEXT,\n    Size_Inches TEXT,\n    Weight_Kgs DOUBLE,\n    Description TEXT,\n    Status TEXT,\n    FOREIGN KEY (Flight_Id) REFERENCES Flights(Flight_Id)\n);\nCREATE TABLE Flights (\n    Flight_ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Origin_Airport TEXT,\n    Destination_Airport TEXT,\n    Departure_Time TIMESTAMP,\n    Arrival_Time TIMESTAMP,\n    Carrier_Airlines TEXT,\n    Aircraft_Type TEXT,\n    Number_of_Passengers INT,\n    Flight_Status TEXT,\n    Gate_Number INT\n);\nCREATE TABLE Passengers (\n    Passenger_Id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    Date_Of_Birth DATE,\n    Nationality TEXT,\n    Passport_Number VARCHAR(15),\n    Contact_Phone_Number VARCHAR(15),\n    Seat_Preference TEXT,\n    Special_Assistance BOOLEAN\n);\nCREATE TABLE Pilots (\n    Pilot_Id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    License_Number VARCHAR(15),\n    Date_Of_Birth DATE,\n    Total_Flight_Hours INT,\n    Rating TEXT,\n    Current_Assignment TEXT,\n    Hire_Date DATE\n);\n\nINSERT INTO \"Aircrafts\" (Aircraft_Id,Model_Name,Manufacturer,Registration_Mark,Type,Capacity,Range_Miles,Maximum_Speed,Cruise_Speed,Service_Ceiling,Operator_Id) VALUES (1,'Boeing 787-8','Boeing','N123BA','Passenger',265,'7000',0.85,0.8,41000,1),(2,'Airbus A320neo','Airbus','F-HSEZ','Passenger',180,'3100',0.85,0.8,43000,2);\nINSERT INTO \"Airports\" (id,Name,IATA_Code,ICAA_Code,Latitude,Longitude,Elevation,Timezone,Direction_Indicator,Surface_Area,Movement_Area,Runway_Length,City,State,Phone_Number,Website,Email,Year_Established) VALUES (1,'John F Kennedy International Airport','JFK','N7988',-73.6954,-40.6452,13,-5,'R',1627.4,1627.4,3147.0,'New York','Queens','+1-800-222-1222','https://www.jfkairport.com/','info@jfkairport.com',1943),(2,'Los Angeles International Airport','LAX','LACI',-118.4053,33.9435,279,-8,'W',2560.0,2560.0,9899.0,'Los Angeles','Los Angeles County','+1-855-463-5252','https://www.flylax.com/','information@flylax.com',1937);\nINSERT INTO \"Baggage\" (Bag_Id,Flight_Id,Owner_FirstName,Owner_LastName,Size_Inches,Weight_Kgs,Description,Status) VALUES (1,1,'John','Smith','22x15x10',10.0,'Business suit and laptop','Checked'),(2,2,'Jane','Doe','21x14x9',8.0,'Personal items and toiletries','Carry on');\nINSERT INTO \"Flights\" (Flight_ID,Origin_Airport,Destination_Airport,Departure_Time,Arrival_Time,Carrier_Airlines,Aircraft_Type,Number_of_Passengers,Flight_Status,Gate_Number) VALUES (1,'JFK','LAX','2023-01-01 08:00:00','2023-01-01 11:00:00','American Airlines','Boeing 787 Dreamliner',250,'On Time',10),(2,'Dallas/Fort Worth International Airport','Heathrow Airport','2023-01-02 14:00:00','2023-01-02 19:00:00','British Airways','Boeing 747 Jumbo Jet',300,'On Time',15);\nINSERT INTO \"Passengers\" (Passenger_Id,FirstName,LastName,Date_Of_Birth,Nationality,Passport_Number,Contact_Phone_Number,Seat_Preference,Special_Assistance) VALUES (1,'Alice','Johnson','1985-07-25','USA','US123456789','+1-555-123-4567','Window',0),(2,'Bob','Williams','1990-03-10','UK','GB987654321','+44-777-123-4567','Aisle',1);\nINSERT INTO \"Pilots\" (Pilot_Id,FirstName,LastName,License_Number,Date_Of_Birth,Total_Flight_Hours,Rating,Current_Assignment,Hire_Date) VALUES (1,'John','Smith','ABCD1234','1985-06-15',5000,'ATP','Captain','2015-01-01'),(2,'Jane','Doe','EFGH5678','1990-09-20',4000,'ATP','Co-pilot','2018-01-01');\n",
      "question": "Can you list all airports, including their names, cities, contact numbers, and websites?",
      "gold_queries": [
        "SELECT \r\n    id, \r\n    Name, \r\n    City, \r\n    Phone_Number, \r\n    Website \r\nFROM \r\n    Airports"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Retrieve the names, cities, phone numbers, and websites of all airports.",
          "sql_queries": [
            "SELECT Name, City, Phone_Number, Website FROM Airports"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Display the name, city, phone number, and website for each airport in the database.",
          "sql_queries": [
            "SELECT Name, City, Phone_Number, Website FROM Airports"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Which airports have a name, city, phone number, and website available?",
          "sql_queries": [
            "SELECT Name, City, Phone_Number, Website FROM Airports"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List airports, including their name, city, contact details, and website address.",
          "sql_queries": [
            "SELECT Name, City, Phone_Number, Website FROM Airports"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Provide a list of all airports with their name, city, phone number, and website.",
          "sql_queries": [
            "SELECT Name, City, Phone_Number, Website FROM Airports"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Airport/vague_2cols_location1/vague_2cols_location1.sqlite",
      "db_dump": "CREATE TABLE Aircrafts (\n    Aircraft_Id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Model_Name TEXT,\n    Manufacturer TEXT,\n    Registration_Mark TEXT,\n    Type TEXT,\n    Capacity INT,\n    Range_Miles TEXT,\n    Maximum_Speed MPH,\n    Cruise_Speed MPH,\n    Service_Ceiling FEET,\n    Operator_Id INTEGER,\n    FOREIGN KEY (Operator_Id) REFERENCES Airlines(Airline_Id)\n);\nCREATE TABLE Airports (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    IATA_Code CHAR(3),\n    ICAA_Code CHAR(3),\n    Latitude REAL,\n    Longitude REAL,\n    Elevation INT,\n    Timezone INT,\n    Direction_Indicator CHAR(2),\n    Surface_Area FLOAT,\n    Movement_Area FLOAT,\n    Runway_Length FLOAT,\n    City TEXT,\n    \"State\" TEXT,\n    Phone_Number VARCHAR(15),\n    Website VARCHAR(50),\n    Email VARCHAR(50),\n    Year_Established INT\n);\nCREATE TABLE Baggage (\n    Bag_Id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Flight_Id INTEGER,\n    Owner_FirstName TEXT,\n    Owner_LastName TEXT,\n    Size_Inches TEXT,\n    Weight_Kgs DOUBLE,\n    Description TEXT,\n    Status TEXT,\n    FOREIGN KEY (Flight_Id) REFERENCES Flights(Flight_Id)\n);\nCREATE TABLE Flights (\n    Flight_ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Origin_Airport TEXT,\n    Destination_Airport TEXT,\n    Departure_Time TIMESTAMP,\n    Arrival_Time TIMESTAMP,\n    Carrier_Airlines TEXT,\n    Aircraft_Type TEXT,\n    Number_of_Passengers INT,\n    Flight_Status TEXT,\n    Gate_Number INT\n);\nCREATE TABLE Passengers (\n    Passenger_Id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    Date_Of_Birth DATE,\n    Nationality TEXT,\n    Passport_Number VARCHAR(15),\n    Contact_Phone_Number VARCHAR(15),\n    Seat_Preference TEXT,\n    Special_Assistance BOOLEAN\n);\nCREATE TABLE Pilots (\n    Pilot_Id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    License_Number VARCHAR(15),\n    Date_Of_Birth DATE,\n    Total_Flight_Hours INT,\n    Rating TEXT,\n    Current_Assignment TEXT,\n    Hire_Date DATE\n);\n\nINSERT INTO \"Aircrafts\" (Aircraft_Id,Model_Name,Manufacturer,Registration_Mark,Type,Capacity,Range_Miles,Maximum_Speed,Cruise_Speed,Service_Ceiling,Operator_Id) VALUES (1,'Boeing 787-8','Boeing','N123BA','Passenger',265,'7000',0.85,0.8,41000,1),(2,'Airbus A320neo','Airbus','F-HSEZ','Passenger',180,'3100',0.85,0.8,43000,2);\nINSERT INTO \"Airports\" (id,Name,IATA_Code,ICAA_Code,Latitude,Longitude,Elevation,Timezone,Direction_Indicator,Surface_Area,Movement_Area,Runway_Length,City,State,Phone_Number,Website,Email,Year_Established) VALUES (1,'John F Kennedy International Airport','JFK','N7988',-73.6954,-40.6452,13,-5,'R',1627.4,1627.4,3147.0,'New York','Queens','+1-800-222-1222','https://www.jfkairport.com/','info@jfkairport.com',1943),(2,'Los Angeles International Airport','LAX','LACI',-118.4053,33.9435,279,-8,'W',2560.0,2560.0,9899.0,'Los Angeles','Los Angeles County','+1-855-463-5252','https://www.flylax.com/','information@flylax.com',1937);\nINSERT INTO \"Baggage\" (Bag_Id,Flight_Id,Owner_FirstName,Owner_LastName,Size_Inches,Weight_Kgs,Description,Status) VALUES (1,1,'John','Smith','22x15x10',10.0,'Business suit and laptop','Checked'),(2,2,'Jane','Doe','21x14x9',8.0,'Personal items and toiletries','Carry on');\nINSERT INTO \"Flights\" (Flight_ID,Origin_Airport,Destination_Airport,Departure_Time,Arrival_Time,Carrier_Airlines,Aircraft_Type,Number_of_Passengers,Flight_Status,Gate_Number) VALUES (1,'JFK','LAX','2023-01-01 08:00:00','2023-01-01 11:00:00','American Airlines','Boeing 787 Dreamliner',250,'On Time',10),(2,'Dallas/Fort Worth International Airport','Heathrow Airport','2023-01-02 14:00:00','2023-01-02 19:00:00','British Airways','Boeing 747 Jumbo Jet',300,'On Time',15);\nINSERT INTO \"Passengers\" (Passenger_Id,FirstName,LastName,Date_Of_Birth,Nationality,Passport_Number,Contact_Phone_Number,Seat_Preference,Special_Assistance) VALUES (1,'Alice','Johnson','1985-07-25','USA','US123456789','+1-555-123-4567','Window',0),(2,'Bob','Williams','1990-03-10','UK','GB987654321','+44-777-123-4567','Aisle',1);\nINSERT INTO \"Pilots\" (Pilot_Id,FirstName,LastName,License_Number,Date_Of_Birth,Total_Flight_Hours,Rating,Current_Assignment,Hire_Date) VALUES (1,'John','Smith','ABCD1234','1985-06-15',5000,'ATP','Captain','2015-01-01'),(2,'Jane','Doe','EFGH5678','1990-09-20',4000,'ATP','Co-pilot','2018-01-01');\n",
      "question": "List all the airports established before 1950, including their ids, states and websites.",
      "gold_queries": [
        "SELECT \r\n    id, \r\n    Name, \r\n    State, \r\n    Website \r\nFROM \r\n    Airports \r\nWHERE \r\n Year_Established < 1950"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Select id, \"State\", Website FROM Airports WHERE Year_Established < 1950;",
          "sql_queries": [
            "SELECT id, \"State\", Website FROM Airports WHERE Year_Established < 1950"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve data for airports created prior to 1950, including id, state, and website.",
          "sql_queries": [
            "SELECT id, State, Website FROM Airports WHERE Year_Established < 1950"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List airports established before 1950, ordered by id, including state and website.",
          "sql_queries": [
            "SELECT id, State, Website FROM Airports WHERE Year_Established < 1950 ORDER BY id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Find airports with Year_Established less than 1950, return id, state, and website.",
          "sql_queries": [
            "SELECT id, State, Website FROM Airports WHERE Year_Established < 1950"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Airport/vague_2cols_location1/vague_2cols_location1.sqlite",
      "db_dump": "CREATE TABLE Aircrafts (\n    Aircraft_Id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Model_Name TEXT,\n    Manufacturer TEXT,\n    Registration_Mark TEXT,\n    Type TEXT,\n    Capacity INT,\n    Range_Miles TEXT,\n    Maximum_Speed MPH,\n    Cruise_Speed MPH,\n    Service_Ceiling FEET,\n    Operator_Id INTEGER,\n    FOREIGN KEY (Operator_Id) REFERENCES Airlines(Airline_Id)\n);\nCREATE TABLE Airports (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    IATA_Code CHAR(3),\n    ICAA_Code CHAR(3),\n    Latitude REAL,\n    Longitude REAL,\n    Elevation INT,\n    Timezone INT,\n    Direction_Indicator CHAR(2),\n    Surface_Area FLOAT,\n    Movement_Area FLOAT,\n    Runway_Length FLOAT,\n    City TEXT,\n    \"State\" TEXT,\n    Phone_Number VARCHAR(15),\n    Website VARCHAR(50),\n    Email VARCHAR(50),\n    Year_Established INT\n);\nCREATE TABLE Baggage (\n    Bag_Id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Flight_Id INTEGER,\n    Owner_FirstName TEXT,\n    Owner_LastName TEXT,\n    Size_Inches TEXT,\n    Weight_Kgs DOUBLE,\n    Description TEXT,\n    Status TEXT,\n    FOREIGN KEY (Flight_Id) REFERENCES Flights(Flight_Id)\n);\nCREATE TABLE Flights (\n    Flight_ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Origin_Airport TEXT,\n    Destination_Airport TEXT,\n    Departure_Time TIMESTAMP,\n    Arrival_Time TIMESTAMP,\n    Carrier_Airlines TEXT,\n    Aircraft_Type TEXT,\n    Number_of_Passengers INT,\n    Flight_Status TEXT,\n    Gate_Number INT\n);\nCREATE TABLE Passengers (\n    Passenger_Id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    Date_Of_Birth DATE,\n    Nationality TEXT,\n    Passport_Number VARCHAR(15),\n    Contact_Phone_Number VARCHAR(15),\n    Seat_Preference TEXT,\n    Special_Assistance BOOLEAN\n);\nCREATE TABLE Pilots (\n    Pilot_Id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    License_Number VARCHAR(15),\n    Date_Of_Birth DATE,\n    Total_Flight_Hours INT,\n    Rating TEXT,\n    Current_Assignment TEXT,\n    Hire_Date DATE\n);\n\nINSERT INTO \"Aircrafts\" (Aircraft_Id,Model_Name,Manufacturer,Registration_Mark,Type,Capacity,Range_Miles,Maximum_Speed,Cruise_Speed,Service_Ceiling,Operator_Id) VALUES (1,'Boeing 787-8','Boeing','N123BA','Passenger',265,'7000',0.85,0.8,41000,1),(2,'Airbus A320neo','Airbus','F-HSEZ','Passenger',180,'3100',0.85,0.8,43000,2);\nINSERT INTO \"Airports\" (id,Name,IATA_Code,ICAA_Code,Latitude,Longitude,Elevation,Timezone,Direction_Indicator,Surface_Area,Movement_Area,Runway_Length,City,State,Phone_Number,Website,Email,Year_Established) VALUES (1,'John F Kennedy International Airport','JFK','N7988',-73.6954,-40.6452,13,-5,'R',1627.4,1627.4,3147.0,'New York','Queens','+1-800-222-1222','https://www.jfkairport.com/','info@jfkairport.com',1943),(2,'Los Angeles International Airport','LAX','LACI',-118.4053,33.9435,279,-8,'W',2560.0,2560.0,9899.0,'Los Angeles','Los Angeles County','+1-855-463-5252','https://www.flylax.com/','information@flylax.com',1937);\nINSERT INTO \"Baggage\" (Bag_Id,Flight_Id,Owner_FirstName,Owner_LastName,Size_Inches,Weight_Kgs,Description,Status) VALUES (1,1,'John','Smith','22x15x10',10.0,'Business suit and laptop','Checked'),(2,2,'Jane','Doe','21x14x9',8.0,'Personal items and toiletries','Carry on');\nINSERT INTO \"Flights\" (Flight_ID,Origin_Airport,Destination_Airport,Departure_Time,Arrival_Time,Carrier_Airlines,Aircraft_Type,Number_of_Passengers,Flight_Status,Gate_Number) VALUES (1,'JFK','LAX','2023-01-01 08:00:00','2023-01-01 11:00:00','American Airlines','Boeing 787 Dreamliner',250,'On Time',10),(2,'Dallas/Fort Worth International Airport','Heathrow Airport','2023-01-02 14:00:00','2023-01-02 19:00:00','British Airways','Boeing 747 Jumbo Jet',300,'On Time',15);\nINSERT INTO \"Passengers\" (Passenger_Id,FirstName,LastName,Date_Of_Birth,Nationality,Passport_Number,Contact_Phone_Number,Seat_Preference,Special_Assistance) VALUES (1,'Alice','Johnson','1985-07-25','USA','US123456789','+1-555-123-4567','Window',0),(2,'Bob','Williams','1990-03-10','UK','GB987654321','+44-777-123-4567','Aisle',1);\nINSERT INTO \"Pilots\" (Pilot_Id,FirstName,LastName,License_Number,Date_Of_Birth,Total_Flight_Hours,Rating,Current_Assignment,Hire_Date) VALUES (1,'John','Smith','ABCD1234','1985-06-15',5000,'ATP','Captain','2015-01-01'),(2,'Jane','Doe','EFGH5678','1990-09-20',4000,'ATP','Co-pilot','2018-01-01');\n",
      "question": "Can you list all airports, including their names, states, contact numbers, and websites?",
      "gold_queries": [
        "SELECT \r\n    id, \r\n    Name, \r\n    State, \r\n    Phone_Number, \r\n    Website \r\nFROM \r\n    Airports"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List all airports, including name, state, phone number, websites.",
          "sql_queries": [
            "SELECT Name, State, Phone_Number, Website FROM Airports"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Provide a list of all airports, their names, state, phone number, and website.",
          "sql_queries": [
            "SELECT Name, State, Phone_Number, Website FROM Airports"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "What are the names, states, phone numbers, and websites of all airports?",
          "sql_queries": [
            "SELECT Name, State, Phone_Number, Website FROM Airports"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Select Name, \"State\", Phone_Number, Website FROM Airports;",
          "sql_queries": [
            "SELECT Name, \"State\", Phone_Number, Website FROM Airports"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Airport/vague_2cols_location1/vague_2cols_location1.sqlite",
      "db_dump": "CREATE TABLE Aircrafts (\n    Aircraft_Id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Model_Name TEXT,\n    Manufacturer TEXT,\n    Registration_Mark TEXT,\n    Type TEXT,\n    Capacity INT,\n    Range_Miles TEXT,\n    Maximum_Speed MPH,\n    Cruise_Speed MPH,\n    Service_Ceiling FEET,\n    Operator_Id INTEGER,\n    FOREIGN KEY (Operator_Id) REFERENCES Airlines(Airline_Id)\n);\nCREATE TABLE Airports (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    IATA_Code CHAR(3),\n    ICAA_Code CHAR(3),\n    Latitude REAL,\n    Longitude REAL,\n    Elevation INT,\n    Timezone INT,\n    Direction_Indicator CHAR(2),\n    Surface_Area FLOAT,\n    Movement_Area FLOAT,\n    Runway_Length FLOAT,\n    City TEXT,\n    \"State\" TEXT,\n    Phone_Number VARCHAR(15),\n    Website VARCHAR(50),\n    Email VARCHAR(50),\n    Year_Established INT\n);\nCREATE TABLE Baggage (\n    Bag_Id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Flight_Id INTEGER,\n    Owner_FirstName TEXT,\n    Owner_LastName TEXT,\n    Size_Inches TEXT,\n    Weight_Kgs DOUBLE,\n    Description TEXT,\n    Status TEXT,\n    FOREIGN KEY (Flight_Id) REFERENCES Flights(Flight_Id)\n);\nCREATE TABLE Flights (\n    Flight_ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Origin_Airport TEXT,\n    Destination_Airport TEXT,\n    Departure_Time TIMESTAMP,\n    Arrival_Time TIMESTAMP,\n    Carrier_Airlines TEXT,\n    Aircraft_Type TEXT,\n    Number_of_Passengers INT,\n    Flight_Status TEXT,\n    Gate_Number INT\n);\nCREATE TABLE Passengers (\n    Passenger_Id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    Date_Of_Birth DATE,\n    Nationality TEXT,\n    Passport_Number VARCHAR(15),\n    Contact_Phone_Number VARCHAR(15),\n    Seat_Preference TEXT,\n    Special_Assistance BOOLEAN\n);\nCREATE TABLE Pilots (\n    Pilot_Id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    License_Number VARCHAR(15),\n    Date_Of_Birth DATE,\n    Total_Flight_Hours INT,\n    Rating TEXT,\n    Current_Assignment TEXT,\n    Hire_Date DATE\n);\n\nINSERT INTO \"Aircrafts\" (Aircraft_Id,Model_Name,Manufacturer,Registration_Mark,Type,Capacity,Range_Miles,Maximum_Speed,Cruise_Speed,Service_Ceiling,Operator_Id) VALUES (1,'Boeing 787-8','Boeing','N123BA','Passenger',265,'7000',0.85,0.8,41000,1),(2,'Airbus A320neo','Airbus','F-HSEZ','Passenger',180,'3100',0.85,0.8,43000,2);\nINSERT INTO \"Airports\" (id,Name,IATA_Code,ICAA_Code,Latitude,Longitude,Elevation,Timezone,Direction_Indicator,Surface_Area,Movement_Area,Runway_Length,City,State,Phone_Number,Website,Email,Year_Established) VALUES (1,'John F Kennedy International Airport','JFK','N7988',-73.6954,-40.6452,13,-5,'R',1627.4,1627.4,3147.0,'New York','Queens','+1-800-222-1222','https://www.jfkairport.com/','info@jfkairport.com',1943),(2,'Los Angeles International Airport','LAX','LACI',-118.4053,33.9435,279,-8,'W',2560.0,2560.0,9899.0,'Los Angeles','Los Angeles County','+1-855-463-5252','https://www.flylax.com/','information@flylax.com',1937);\nINSERT INTO \"Baggage\" (Bag_Id,Flight_Id,Owner_FirstName,Owner_LastName,Size_Inches,Weight_Kgs,Description,Status) VALUES (1,1,'John','Smith','22x15x10',10.0,'Business suit and laptop','Checked'),(2,2,'Jane','Doe','21x14x9',8.0,'Personal items and toiletries','Carry on');\nINSERT INTO \"Flights\" (Flight_ID,Origin_Airport,Destination_Airport,Departure_Time,Arrival_Time,Carrier_Airlines,Aircraft_Type,Number_of_Passengers,Flight_Status,Gate_Number) VALUES (1,'JFK','LAX','2023-01-01 08:00:00','2023-01-01 11:00:00','American Airlines','Boeing 787 Dreamliner',250,'On Time',10),(2,'Dallas/Fort Worth International Airport','Heathrow Airport','2023-01-02 14:00:00','2023-01-02 19:00:00','British Airways','Boeing 747 Jumbo Jet',300,'On Time',15);\nINSERT INTO \"Passengers\" (Passenger_Id,FirstName,LastName,Date_Of_Birth,Nationality,Passport_Number,Contact_Phone_Number,Seat_Preference,Special_Assistance) VALUES (1,'Alice','Johnson','1985-07-25','USA','US123456789','+1-555-123-4567','Window',0),(2,'Bob','Williams','1990-03-10','UK','GB987654321','+44-777-123-4567','Aisle',1);\nINSERT INTO \"Pilots\" (Pilot_Id,FirstName,LastName,License_Number,Date_Of_Birth,Total_Flight_Hours,Rating,Current_Assignment,Hire_Date) VALUES (1,'John','Smith','ABCD1234','1985-06-15',5000,'ATP','Captain','2015-01-01'),(2,'Jane','Doe','EFGH5678','1990-09-20',4000,'ATP','Co-pilot','2018-01-01');\n",
      "question": "Can you list all airports, including their names, locations, contact numbers, and websites?",
      "gold_queries": [
        "SELECT \r\n    id, \r\n    Name, \r\n    City, \r\n    Phone_Number, \r\n    Website \r\nFROM \r\n    Airports",
        "SELECT \r\n    id, \r\n    Name, \r\n    State, \r\n    Phone_Number, \r\n    Website \r\nFROM \r\n    Airports",
        "SELECT \r\n    id, \r\n    Name, \r\n    City, State, \r\n    Phone_Number, \r\n    Website \r\nFROM \r\n    Airports"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List all airports with their names, latitudes/longitudes, phone numbers, and websites.",
          "sql_queries": [
            "SELECT Name, Latitude, Longitude, Phone_Number, Website FROM Airports"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve all columns from the Airports table.",
          "sql_queries": [
            "SELECT * FROM Airports"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Select the name, location (latitude, longitude), contact number, and website from the Airports table.",
          "sql_queries": [
            "SELECT Name, Latitude, Longitude, Phone_Number, Website FROM Airports"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Airport/vague_2cols_location1/vague_2cols_location1.sqlite",
      "db_dump": "CREATE TABLE Aircrafts (\n    Aircraft_Id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Model_Name TEXT,\n    Manufacturer TEXT,\n    Registration_Mark TEXT,\n    Type TEXT,\n    Capacity INT,\n    Range_Miles TEXT,\n    Maximum_Speed MPH,\n    Cruise_Speed MPH,\n    Service_Ceiling FEET,\n    Operator_Id INTEGER,\n    FOREIGN KEY (Operator_Id) REFERENCES Airlines(Airline_Id)\n);\nCREATE TABLE Airports (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    IATA_Code CHAR(3),\n    ICAA_Code CHAR(3),\n    Latitude REAL,\n    Longitude REAL,\n    Elevation INT,\n    Timezone INT,\n    Direction_Indicator CHAR(2),\n    Surface_Area FLOAT,\n    Movement_Area FLOAT,\n    Runway_Length FLOAT,\n    City TEXT,\n    \"State\" TEXT,\n    Phone_Number VARCHAR(15),\n    Website VARCHAR(50),\n    Email VARCHAR(50),\n    Year_Established INT\n);\nCREATE TABLE Baggage (\n    Bag_Id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Flight_Id INTEGER,\n    Owner_FirstName TEXT,\n    Owner_LastName TEXT,\n    Size_Inches TEXT,\n    Weight_Kgs DOUBLE,\n    Description TEXT,\n    Status TEXT,\n    FOREIGN KEY (Flight_Id) REFERENCES Flights(Flight_Id)\n);\nCREATE TABLE Flights (\n    Flight_ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Origin_Airport TEXT,\n    Destination_Airport TEXT,\n    Departure_Time TIMESTAMP,\n    Arrival_Time TIMESTAMP,\n    Carrier_Airlines TEXT,\n    Aircraft_Type TEXT,\n    Number_of_Passengers INT,\n    Flight_Status TEXT,\n    Gate_Number INT\n);\nCREATE TABLE Passengers (\n    Passenger_Id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    Date_Of_Birth DATE,\n    Nationality TEXT,\n    Passport_Number VARCHAR(15),\n    Contact_Phone_Number VARCHAR(15),\n    Seat_Preference TEXT,\n    Special_Assistance BOOLEAN\n);\nCREATE TABLE Pilots (\n    Pilot_Id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    License_Number VARCHAR(15),\n    Date_Of_Birth DATE,\n    Total_Flight_Hours INT,\n    Rating TEXT,\n    Current_Assignment TEXT,\n    Hire_Date DATE\n);\n\nINSERT INTO \"Aircrafts\" (Aircraft_Id,Model_Name,Manufacturer,Registration_Mark,Type,Capacity,Range_Miles,Maximum_Speed,Cruise_Speed,Service_Ceiling,Operator_Id) VALUES (1,'Boeing 787-8','Boeing','N123BA','Passenger',265,'7000',0.85,0.8,41000,1),(2,'Airbus A320neo','Airbus','F-HSEZ','Passenger',180,'3100',0.85,0.8,43000,2);\nINSERT INTO \"Airports\" (id,Name,IATA_Code,ICAA_Code,Latitude,Longitude,Elevation,Timezone,Direction_Indicator,Surface_Area,Movement_Area,Runway_Length,City,State,Phone_Number,Website,Email,Year_Established) VALUES (1,'John F Kennedy International Airport','JFK','N7988',-73.6954,-40.6452,13,-5,'R',1627.4,1627.4,3147.0,'New York','Queens','+1-800-222-1222','https://www.jfkairport.com/','info@jfkairport.com',1943),(2,'Los Angeles International Airport','LAX','LACI',-118.4053,33.9435,279,-8,'W',2560.0,2560.0,9899.0,'Los Angeles','Los Angeles County','+1-855-463-5252','https://www.flylax.com/','information@flylax.com',1937);\nINSERT INTO \"Baggage\" (Bag_Id,Flight_Id,Owner_FirstName,Owner_LastName,Size_Inches,Weight_Kgs,Description,Status) VALUES (1,1,'John','Smith','22x15x10',10.0,'Business suit and laptop','Checked'),(2,2,'Jane','Doe','21x14x9',8.0,'Personal items and toiletries','Carry on');\nINSERT INTO \"Flights\" (Flight_ID,Origin_Airport,Destination_Airport,Departure_Time,Arrival_Time,Carrier_Airlines,Aircraft_Type,Number_of_Passengers,Flight_Status,Gate_Number) VALUES (1,'JFK','LAX','2023-01-01 08:00:00','2023-01-01 11:00:00','American Airlines','Boeing 787 Dreamliner',250,'On Time',10),(2,'Dallas/Fort Worth International Airport','Heathrow Airport','2023-01-02 14:00:00','2023-01-02 19:00:00','British Airways','Boeing 747 Jumbo Jet',300,'On Time',15);\nINSERT INTO \"Passengers\" (Passenger_Id,FirstName,LastName,Date_Of_Birth,Nationality,Passport_Number,Contact_Phone_Number,Seat_Preference,Special_Assistance) VALUES (1,'Alice','Johnson','1985-07-25','USA','US123456789','+1-555-123-4567','Window',0),(2,'Bob','Williams','1990-03-10','UK','GB987654321','+44-777-123-4567','Aisle',1);\nINSERT INTO \"Pilots\" (Pilot_Id,FirstName,LastName,License_Number,Date_Of_Birth,Total_Flight_Hours,Rating,Current_Assignment,Hire_Date) VALUES (1,'John','Smith','ABCD1234','1985-06-15',5000,'ATP','Captain','2015-01-01'),(2,'Jane','Doe','EFGH5678','1990-09-20',4000,'ATP','Co-pilot','2018-01-01');\n",
      "question": "List all the airports established before 1950, including their ids, cities and websites.",
      "gold_queries": [
        "SELECT \r\n    id, \r\n    Name, \r\n    City, \r\n    Website \r\nFROM \r\n    Airports \r\nWHERE \r\n Year_Established < 1950"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List airports created prior to 1950, returning their IDs, names, and websites.",
          "sql_queries": [
            "SELECT id, Name, Website FROM Airports WHERE Year_Established < 1950"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Find airports with 'Year_Established' < 1950 and output 'id', 'Name', 'Website'.",
          "sql_queries": [
            "SELECT id, Name, Website FROM Airports WHERE Year_Established < 1950"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve all distinct airport rows where Year_Established is less than 1950.",
          "sql_queries": [
            "SELECT DISTINCT * FROM Airports WHERE Year_Established < 1950"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Extract information about airports founded before 1950: ID, city, and website.",
          "sql_queries": [
            "SELECT id, City, Website FROM Airports WHERE Year_Established < 1950"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Select the 'id', 'Name', 'Website' columns from the 'Airports' table for airports established before 1950.",
          "sql_queries": [
            "SELECT id, Name, Website FROM Airports WHERE Year_Established < 1950"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Airport/vague_2cols_location1/vague_2cols_location1.sqlite",
      "db_dump": "CREATE TABLE Aircrafts (\n    Aircraft_Id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Model_Name TEXT,\n    Manufacturer TEXT,\n    Registration_Mark TEXT,\n    Type TEXT,\n    Capacity INT,\n    Range_Miles TEXT,\n    Maximum_Speed MPH,\n    Cruise_Speed MPH,\n    Service_Ceiling FEET,\n    Operator_Id INTEGER,\n    FOREIGN KEY (Operator_Id) REFERENCES Airlines(Airline_Id)\n);\nCREATE TABLE Airports (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    IATA_Code CHAR(3),\n    ICAA_Code CHAR(3),\n    Latitude REAL,\n    Longitude REAL,\n    Elevation INT,\n    Timezone INT,\n    Direction_Indicator CHAR(2),\n    Surface_Area FLOAT,\n    Movement_Area FLOAT,\n    Runway_Length FLOAT,\n    City TEXT,\n    \"State\" TEXT,\n    Phone_Number VARCHAR(15),\n    Website VARCHAR(50),\n    Email VARCHAR(50),\n    Year_Established INT\n);\nCREATE TABLE Baggage (\n    Bag_Id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Flight_Id INTEGER,\n    Owner_FirstName TEXT,\n    Owner_LastName TEXT,\n    Size_Inches TEXT,\n    Weight_Kgs DOUBLE,\n    Description TEXT,\n    Status TEXT,\n    FOREIGN KEY (Flight_Id) REFERENCES Flights(Flight_Id)\n);\nCREATE TABLE Flights (\n    Flight_ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Origin_Airport TEXT,\n    Destination_Airport TEXT,\n    Departure_Time TIMESTAMP,\n    Arrival_Time TIMESTAMP,\n    Carrier_Airlines TEXT,\n    Aircraft_Type TEXT,\n    Number_of_Passengers INT,\n    Flight_Status TEXT,\n    Gate_Number INT\n);\nCREATE TABLE Passengers (\n    Passenger_Id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    Date_Of_Birth DATE,\n    Nationality TEXT,\n    Passport_Number VARCHAR(15),\n    Contact_Phone_Number VARCHAR(15),\n    Seat_Preference TEXT,\n    Special_Assistance BOOLEAN\n);\nCREATE TABLE Pilots (\n    Pilot_Id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    License_Number VARCHAR(15),\n    Date_Of_Birth DATE,\n    Total_Flight_Hours INT,\n    Rating TEXT,\n    Current_Assignment TEXT,\n    Hire_Date DATE\n);\n\nINSERT INTO \"Aircrafts\" (Aircraft_Id,Model_Name,Manufacturer,Registration_Mark,Type,Capacity,Range_Miles,Maximum_Speed,Cruise_Speed,Service_Ceiling,Operator_Id) VALUES (1,'Boeing 787-8','Boeing','N123BA','Passenger',265,'7000',0.85,0.8,41000,1),(2,'Airbus A320neo','Airbus','F-HSEZ','Passenger',180,'3100',0.85,0.8,43000,2);\nINSERT INTO \"Airports\" (id,Name,IATA_Code,ICAA_Code,Latitude,Longitude,Elevation,Timezone,Direction_Indicator,Surface_Area,Movement_Area,Runway_Length,City,State,Phone_Number,Website,Email,Year_Established) VALUES (1,'John F Kennedy International Airport','JFK','N7988',-73.6954,-40.6452,13,-5,'R',1627.4,1627.4,3147.0,'New York','Queens','+1-800-222-1222','https://www.jfkairport.com/','info@jfkairport.com',1943),(2,'Los Angeles International Airport','LAX','LACI',-118.4053,33.9435,279,-8,'W',2560.0,2560.0,9899.0,'Los Angeles','Los Angeles County','+1-855-463-5252','https://www.flylax.com/','information@flylax.com',1937);\nINSERT INTO \"Baggage\" (Bag_Id,Flight_Id,Owner_FirstName,Owner_LastName,Size_Inches,Weight_Kgs,Description,Status) VALUES (1,1,'John','Smith','22x15x10',10.0,'Business suit and laptop','Checked'),(2,2,'Jane','Doe','21x14x9',8.0,'Personal items and toiletries','Carry on');\nINSERT INTO \"Flights\" (Flight_ID,Origin_Airport,Destination_Airport,Departure_Time,Arrival_Time,Carrier_Airlines,Aircraft_Type,Number_of_Passengers,Flight_Status,Gate_Number) VALUES (1,'JFK','LAX','2023-01-01 08:00:00','2023-01-01 11:00:00','American Airlines','Boeing 787 Dreamliner',250,'On Time',10),(2,'Dallas/Fort Worth International Airport','Heathrow Airport','2023-01-02 14:00:00','2023-01-02 19:00:00','British Airways','Boeing 747 Jumbo Jet',300,'On Time',15);\nINSERT INTO \"Passengers\" (Passenger_Id,FirstName,LastName,Date_Of_Birth,Nationality,Passport_Number,Contact_Phone_Number,Seat_Preference,Special_Assistance) VALUES (1,'Alice','Johnson','1985-07-25','USA','US123456789','+1-555-123-4567','Window',0),(2,'Bob','Williams','1990-03-10','UK','GB987654321','+44-777-123-4567','Aisle',1);\nINSERT INTO \"Pilots\" (Pilot_Id,FirstName,LastName,License_Number,Date_Of_Birth,Total_Flight_Hours,Rating,Current_Assignment,Hire_Date) VALUES (1,'John','Smith','ABCD1234','1985-06-15',5000,'ATP','Captain','2015-01-01'),(2,'Jane','Doe','EFGH5678','1990-09-20',4000,'ATP','Co-pilot','2018-01-01');\n",
      "question": "What are the airports that were established before 1950, and can you provide their ids, locations and websites?",
      "gold_queries": [
        "SELECT \r\n    id, \r\n    Name, \r\n    City, \r\n    Website \r\nFROM \r\n    Airports \r\nWHERE \r\n Year_Established < 1950",
        "SELECT \r\n    id, \r\n    Name, \r\n    State, \r\n    Website \r\nFROM \r\n    Airports \r\nWHERE \r\n Year_Established < 1950",
        "SELECT \r\n    id, \r\n    Name, \r\n    City, State, \r\n    Website \r\nFROM \r\n    Airports \r\nWHERE \r\n Year_Established < 1950"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What airports have the 'Year_Established' value below 1950? Return their ID, latitude, longitude and website.",
          "sql_queries": [
            "SELECT id, Latitude, Longitude, Website FROM Airports WHERE Year_Established < 1950"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Identify airports created before 1950.  Include their ID, geographical coordinates (latitude and longitude), and associated websites.",
          "sql_queries": [
            "SELECT id, Latitude, Longitude, Website \nFROM Airports \nWHERE Year_Established < 1950"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Find the airports with an establishment year prior to 1950. List their ID, location (latitude, longitude), and website.",
          "sql_queries": [
            "SELECT id, Latitude, Longitude, Website FROM Airports WHERE Year_Established < 1950"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Airport/vague_2cols_location1/vague_2cols_location1.sqlite",
      "db_dump": "CREATE TABLE Aircrafts (\n    Aircraft_Id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Model_Name TEXT,\n    Manufacturer TEXT,\n    Registration_Mark TEXT,\n    Type TEXT,\n    Capacity INT,\n    Range_Miles TEXT,\n    Maximum_Speed MPH,\n    Cruise_Speed MPH,\n    Service_Ceiling FEET,\n    Operator_Id INTEGER,\n    FOREIGN KEY (Operator_Id) REFERENCES Airlines(Airline_Id)\n);\nCREATE TABLE Airports (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    IATA_Code CHAR(3),\n    ICAA_Code CHAR(3),\n    Latitude REAL,\n    Longitude REAL,\n    Elevation INT,\n    Timezone INT,\n    Direction_Indicator CHAR(2),\n    Surface_Area FLOAT,\n    Movement_Area FLOAT,\n    Runway_Length FLOAT,\n    City TEXT,\n    \"State\" TEXT,\n    Phone_Number VARCHAR(15),\n    Website VARCHAR(50),\n    Email VARCHAR(50),\n    Year_Established INT\n);\nCREATE TABLE Baggage (\n    Bag_Id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Flight_Id INTEGER,\n    Owner_FirstName TEXT,\n    Owner_LastName TEXT,\n    Size_Inches TEXT,\n    Weight_Kgs DOUBLE,\n    Description TEXT,\n    Status TEXT,\n    FOREIGN KEY (Flight_Id) REFERENCES Flights(Flight_Id)\n);\nCREATE TABLE Flights (\n    Flight_ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Origin_Airport TEXT,\n    Destination_Airport TEXT,\n    Departure_Time TIMESTAMP,\n    Arrival_Time TIMESTAMP,\n    Carrier_Airlines TEXT,\n    Aircraft_Type TEXT,\n    Number_of_Passengers INT,\n    Flight_Status TEXT,\n    Gate_Number INT\n);\nCREATE TABLE Passengers (\n    Passenger_Id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    Date_Of_Birth DATE,\n    Nationality TEXT,\n    Passport_Number VARCHAR(15),\n    Contact_Phone_Number VARCHAR(15),\n    Seat_Preference TEXT,\n    Special_Assistance BOOLEAN\n);\nCREATE TABLE Pilots (\n    Pilot_Id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    License_Number VARCHAR(15),\n    Date_Of_Birth DATE,\n    Total_Flight_Hours INT,\n    Rating TEXT,\n    Current_Assignment TEXT,\n    Hire_Date DATE\n);\n\nINSERT INTO \"Aircrafts\" (Aircraft_Id,Model_Name,Manufacturer,Registration_Mark,Type,Capacity,Range_Miles,Maximum_Speed,Cruise_Speed,Service_Ceiling,Operator_Id) VALUES (1,'Boeing 787-8','Boeing','N123BA','Passenger',265,'7000',0.85,0.8,41000,1),(2,'Airbus A320neo','Airbus','F-HSEZ','Passenger',180,'3100',0.85,0.8,43000,2);\nINSERT INTO \"Airports\" (id,Name,IATA_Code,ICAA_Code,Latitude,Longitude,Elevation,Timezone,Direction_Indicator,Surface_Area,Movement_Area,Runway_Length,City,State,Phone_Number,Website,Email,Year_Established) VALUES (1,'John F Kennedy International Airport','JFK','N7988',-73.6954,-40.6452,13,-5,'R',1627.4,1627.4,3147.0,'New York','Queens','+1-800-222-1222','https://www.jfkairport.com/','info@jfkairport.com',1943),(2,'Los Angeles International Airport','LAX','LACI',-118.4053,33.9435,279,-8,'W',2560.0,2560.0,9899.0,'Los Angeles','Los Angeles County','+1-855-463-5252','https://www.flylax.com/','information@flylax.com',1937);\nINSERT INTO \"Baggage\" (Bag_Id,Flight_Id,Owner_FirstName,Owner_LastName,Size_Inches,Weight_Kgs,Description,Status) VALUES (1,1,'John','Smith','22x15x10',10.0,'Business suit and laptop','Checked'),(2,2,'Jane','Doe','21x14x9',8.0,'Personal items and toiletries','Carry on');\nINSERT INTO \"Flights\" (Flight_ID,Origin_Airport,Destination_Airport,Departure_Time,Arrival_Time,Carrier_Airlines,Aircraft_Type,Number_of_Passengers,Flight_Status,Gate_Number) VALUES (1,'JFK','LAX','2023-01-01 08:00:00','2023-01-01 11:00:00','American Airlines','Boeing 787 Dreamliner',250,'On Time',10),(2,'Dallas/Fort Worth International Airport','Heathrow Airport','2023-01-02 14:00:00','2023-01-02 19:00:00','British Airways','Boeing 747 Jumbo Jet',300,'On Time',15);\nINSERT INTO \"Passengers\" (Passenger_Id,FirstName,LastName,Date_Of_Birth,Nationality,Passport_Number,Contact_Phone_Number,Seat_Preference,Special_Assistance) VALUES (1,'Alice','Johnson','1985-07-25','USA','US123456789','+1-555-123-4567','Window',0),(2,'Bob','Williams','1990-03-10','UK','GB987654321','+44-777-123-4567','Aisle',1);\nINSERT INTO \"Pilots\" (Pilot_Id,FirstName,LastName,License_Number,Date_Of_Birth,Total_Flight_Hours,Rating,Current_Assignment,Hire_Date) VALUES (1,'John','Smith','ABCD1234','1985-06-15',5000,'ATP','Captain','2015-01-01'),(2,'Jane','Doe','EFGH5678','1990-09-20',4000,'ATP','Co-pilot','2018-01-01');\n",
      "question": "List all the airports established before 1950, including their ids, cities, states and websites.",
      "gold_queries": [
        "SELECT \r\n    id, \r\n    Name, \r\n    City, State, \r\n    Website \r\nFROM \r\n    Airports \r\nWHERE \r\n Year_Established < 1950"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Given the airports table, identify airports established before 1950 and return their IDs, cities, states, and website URLs.",
          "sql_queries": [
            "SELECT id, City, State, Website FROM Airports WHERE Year_Established < 1950"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Which airports, based on the `Year_Established` column, were founded before 1950? Output their IDs, cities, states, and websites.",
          "sql_queries": [
            "SELECT id, City, State, Website FROM Airports WHERE Year_Established < 1950"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Find all airports in the `Airports` table founded prior to the year 1950 and display their IDs, city names, corresponding states, and website addresses.",
          "sql_queries": [
            "SELECT id, City, State, Website FROM Airports WHERE Year_Established < 1950"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Select the `id`, `City`, `\"State\"`, and `Website` columns from the `Airports` table for rows where `Year_Established` is before 1950.",
          "sql_queries": [
            "SELECT id, City, \"State\", Website FROM Airports WHERE Year_Established < 1950"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve the IDs, cities, states, and websites of all airports where `Year_Established` is less than 1950.",
          "sql_queries": [
            "SELECT id, City, State, Website FROM Airports WHERE Year_Established < 1950"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Airport/vague_2cols_location1/vague_2cols_location1.sqlite",
      "db_dump": "CREATE TABLE Aircrafts (\n    Aircraft_Id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Model_Name TEXT,\n    Manufacturer TEXT,\n    Registration_Mark TEXT,\n    Type TEXT,\n    Capacity INT,\n    Range_Miles TEXT,\n    Maximum_Speed MPH,\n    Cruise_Speed MPH,\n    Service_Ceiling FEET,\n    Operator_Id INTEGER,\n    FOREIGN KEY (Operator_Id) REFERENCES Airlines(Airline_Id)\n);\nCREATE TABLE Airports (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    IATA_Code CHAR(3),\n    ICAA_Code CHAR(3),\n    Latitude REAL,\n    Longitude REAL,\n    Elevation INT,\n    Timezone INT,\n    Direction_Indicator CHAR(2),\n    Surface_Area FLOAT,\n    Movement_Area FLOAT,\n    Runway_Length FLOAT,\n    City TEXT,\n    \"State\" TEXT,\n    Phone_Number VARCHAR(15),\n    Website VARCHAR(50),\n    Email VARCHAR(50),\n    Year_Established INT\n);\nCREATE TABLE Baggage (\n    Bag_Id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Flight_Id INTEGER,\n    Owner_FirstName TEXT,\n    Owner_LastName TEXT,\n    Size_Inches TEXT,\n    Weight_Kgs DOUBLE,\n    Description TEXT,\n    Status TEXT,\n    FOREIGN KEY (Flight_Id) REFERENCES Flights(Flight_Id)\n);\nCREATE TABLE Flights (\n    Flight_ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Origin_Airport TEXT,\n    Destination_Airport TEXT,\n    Departure_Time TIMESTAMP,\n    Arrival_Time TIMESTAMP,\n    Carrier_Airlines TEXT,\n    Aircraft_Type TEXT,\n    Number_of_Passengers INT,\n    Flight_Status TEXT,\n    Gate_Number INT\n);\nCREATE TABLE Passengers (\n    Passenger_Id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    Date_Of_Birth DATE,\n    Nationality TEXT,\n    Passport_Number VARCHAR(15),\n    Contact_Phone_Number VARCHAR(15),\n    Seat_Preference TEXT,\n    Special_Assistance BOOLEAN\n);\nCREATE TABLE Pilots (\n    Pilot_Id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    License_Number VARCHAR(15),\n    Date_Of_Birth DATE,\n    Total_Flight_Hours INT,\n    Rating TEXT,\n    Current_Assignment TEXT,\n    Hire_Date DATE\n);\n\nINSERT INTO \"Aircrafts\" (Aircraft_Id,Model_Name,Manufacturer,Registration_Mark,Type,Capacity,Range_Miles,Maximum_Speed,Cruise_Speed,Service_Ceiling,Operator_Id) VALUES (1,'Boeing 787-8','Boeing','N123BA','Passenger',265,'7000',0.85,0.8,41000,1),(2,'Airbus A320neo','Airbus','F-HSEZ','Passenger',180,'3100',0.85,0.8,43000,2);\nINSERT INTO \"Airports\" (id,Name,IATA_Code,ICAA_Code,Latitude,Longitude,Elevation,Timezone,Direction_Indicator,Surface_Area,Movement_Area,Runway_Length,City,State,Phone_Number,Website,Email,Year_Established) VALUES (1,'John F Kennedy International Airport','JFK','N7988',-73.6954,-40.6452,13,-5,'R',1627.4,1627.4,3147.0,'New York','Queens','+1-800-222-1222','https://www.jfkairport.com/','info@jfkairport.com',1943),(2,'Los Angeles International Airport','LAX','LACI',-118.4053,33.9435,279,-8,'W',2560.0,2560.0,9899.0,'Los Angeles','Los Angeles County','+1-855-463-5252','https://www.flylax.com/','information@flylax.com',1937);\nINSERT INTO \"Baggage\" (Bag_Id,Flight_Id,Owner_FirstName,Owner_LastName,Size_Inches,Weight_Kgs,Description,Status) VALUES (1,1,'John','Smith','22x15x10',10.0,'Business suit and laptop','Checked'),(2,2,'Jane','Doe','21x14x9',8.0,'Personal items and toiletries','Carry on');\nINSERT INTO \"Flights\" (Flight_ID,Origin_Airport,Destination_Airport,Departure_Time,Arrival_Time,Carrier_Airlines,Aircraft_Type,Number_of_Passengers,Flight_Status,Gate_Number) VALUES (1,'JFK','LAX','2023-01-01 08:00:00','2023-01-01 11:00:00','American Airlines','Boeing 787 Dreamliner',250,'On Time',10),(2,'Dallas/Fort Worth International Airport','Heathrow Airport','2023-01-02 14:00:00','2023-01-02 19:00:00','British Airways','Boeing 747 Jumbo Jet',300,'On Time',15);\nINSERT INTO \"Passengers\" (Passenger_Id,FirstName,LastName,Date_Of_Birth,Nationality,Passport_Number,Contact_Phone_Number,Seat_Preference,Special_Assistance) VALUES (1,'Alice','Johnson','1985-07-25','USA','US123456789','+1-555-123-4567','Window',0),(2,'Bob','Williams','1990-03-10','UK','GB987654321','+44-777-123-4567','Aisle',1);\nINSERT INTO \"Pilots\" (Pilot_Id,FirstName,LastName,License_Number,Date_Of_Birth,Total_Flight_Hours,Rating,Current_Assignment,Hire_Date) VALUES (1,'John','Smith','ABCD1234','1985-06-15',5000,'ATP','Captain','2015-01-01'),(2,'Jane','Doe','EFGH5678','1990-09-20',4000,'ATP','Co-pilot','2018-01-01');\n",
      "question": "Can you list all airports, including their names, states, cities, contact numbers, and websites?",
      "gold_queries": [
        "SELECT \r\n    id, \r\n    Name, \r\n    City, State, \r\n    Phone_Number, \r\n    Website \r\nFROM \r\n    Airports"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Select airports and display name, city, state, phone number, and website.",
          "sql_queries": [
            "SELECT Name, City, State, Phone_Number, Website FROM Airports"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List airports with name, state, city, phone number, and website.",
          "sql_queries": [
            "SELECT Name, State, City, Phone_Number, Website FROM Airports"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve all columns from the Airports table.",
          "sql_queries": [
            "SELECT * FROM Airports"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Airport/vague_2cols_airport2/vague_2cols_airport2.sqlite",
      "db_dump": "CREATE TABLE Airports(\n    Id INTEGER PRIMARY KEY AUTOINCREMENT,\n    CityId INTEGER REFERENCES Cities(Id),\n    Code CHAR(2),\n    RunwayCount INTEGER DEFAULT 1,\n    FOREIGN KEY(CityId) REFERENCES Cities(Id));\nCREATE TABLE Cities(\n    Id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Country TEXT);\nCREATE TABLE Flights(\n    FlightId INTEGER PRIMARY KEY AUTOINCREMENT,\n    DepartureAirportId INTEGER REFERENCES Airports(Id),\n    ArrivalAirportId INTEGER REFERENCES Airports(Id),\n    ScheduledDeparture TIMESTAMP,\n    ActualDeparture TIMESTAMP,\n    EstimatedArrival TIMESTAMP,\n    Status TEXT ,\n    AircraftModel TEXT);\nCREATE TABLE Runways(\n    Id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Length REAL,\n    Width REAL,\n    SurfaceType TEXT,\n    AirportId INTEGER REFERENCES Airports(Id),\n    FOREIGN KEY(AirportId) REFERENCES Airports(Id));\n\nINSERT INTO \"Airports\" (Id,CityId,Code,RunwayCount) VALUES (1,1,'JFK',3),(2,2,'LHR',2),(3,3,'CDG',2),(4,4,'HND',4),(5,5,'DXB',6);\nINSERT INTO \"Cities\" (Id,Name,Country) VALUES (1,'New York','USA'),(2,'London','UK'),(3,'Paris','France'),(4,'Tokyo','Japan'),(5,'Dubai','UAE');\nINSERT INTO \"Flights\" (FlightId,DepartureAirportId,ArrivalAirportId,ScheduledDeparture,ActualDeparture,EstimatedArrival,Status,AircraftModel) VALUES (1,1,2,'2023-03-25 12:00:00','2023-03-25 12:15:00','2023-03-25 13:45:00','On Time','Boeing 747'),(2,2,3,'2023-03-25 15:00:00','2023-03-25 15:30:00','2023-03-25 18:30:00','Delayed','Airbus A380'),(3,3,4,'2023-03-25 18:00:00','2023-03-25 18:30:00','2023-03-25 22:15:00','On Time','Boeing 787'),(4,4,5,'2023-03-25 21:00:00','2023-03-25 21:30:00','2023-03-25 23:15:00','Delayed','Boeing 777'),(5,5,1,'2023-03-26 02:00:00','2023-03-26 02:30:00','2023-03-26 04:15:00','On Time','Emirates A380');\nINSERT INTO \"Runways\" (Id,Length,Width,SurfaceType,AirportId) VALUES (1,9000.0,150.0,'Asphalt',1),(2,8000.0,170.0,'Concrete',2),(3,9500.0,200.0,'Grass',3),(4,8800.0,180.0,'Asphalt',4),(5,12000.0,220.0,'Tarmac',5);\n",
      "question": "List the cities with airports ordered by the number of runways alongside the runway details for each.",
      "gold_queries": [
        "select cities.name, Airports.RunwayCount from Airports JOIN Cities ON Cities.Id = Airports.Id order by RunwayCount"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Provide a ranked list of all cities with airports, prioritizing them based on the number of runways they have, and for each city, list the specific attributes of each runway at their airports.",
          "sql_queries": [
            "SELECT C.Name, A.RunwayCount, R.Length, R.Width, R.SurfaceType\nFROM Cities C\nJOIN Airports A ON C.Id = A.CityId\nJOIN Runways R ON A.Id = R.AirportId\nORDER BY A.RunwayCount DESC, C.Name, R.Id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all cities with airports, order them by the number of runways at their airports, with each city's runway information contained in a separate row.",
          "sql_queries": [
            "SELECT C.Name, A.RunwayCount FROM Cities C JOIN Airports A ON C.Id = A.CityId ORDER BY A.RunwayCount"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "List all cities that have airports, order them by the number of runways at their airports, and for each city, list details about the runways at its airports.",
          "sql_queries": [
            "SELECT C.Name, R.Length, R.Width, R.SurfaceType\nFROM Cities C\nJOIN Airports A ON C.Id = A.CityId\nJOIN Runways R ON A.Id = R.AirportId\nORDER BY A.RunwayCount DESC, C.Name, R.Id"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Airport/vague_2cols_airport2/vague_2cols_airport2.sqlite",
      "db_dump": "CREATE TABLE Airports(\n    Id INTEGER PRIMARY KEY AUTOINCREMENT,\n    CityId INTEGER REFERENCES Cities(Id),\n    Code CHAR(2),\n    RunwayCount INTEGER DEFAULT 1,\n    FOREIGN KEY(CityId) REFERENCES Cities(Id));\nCREATE TABLE Cities(\n    Id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Country TEXT);\nCREATE TABLE Flights(\n    FlightId INTEGER PRIMARY KEY AUTOINCREMENT,\n    DepartureAirportId INTEGER REFERENCES Airports(Id),\n    ArrivalAirportId INTEGER REFERENCES Airports(Id),\n    ScheduledDeparture TIMESTAMP,\n    ActualDeparture TIMESTAMP,\n    EstimatedArrival TIMESTAMP,\n    Status TEXT ,\n    AircraftModel TEXT);\nCREATE TABLE Runways(\n    Id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Length REAL,\n    Width REAL,\n    SurfaceType TEXT,\n    AirportId INTEGER REFERENCES Airports(Id),\n    FOREIGN KEY(AirportId) REFERENCES Airports(Id));\n\nINSERT INTO \"Airports\" (Id,CityId,Code,RunwayCount) VALUES (1,1,'JFK',3),(2,2,'LHR',2),(3,3,'CDG',2),(4,4,'HND',4),(5,5,'DXB',6);\nINSERT INTO \"Cities\" (Id,Name,Country) VALUES (1,'New York','USA'),(2,'London','UK'),(3,'Paris','France'),(4,'Tokyo','Japan'),(5,'Dubai','UAE');\nINSERT INTO \"Flights\" (FlightId,DepartureAirportId,ArrivalAirportId,ScheduledDeparture,ActualDeparture,EstimatedArrival,Status,AircraftModel) VALUES (1,1,2,'2023-03-25 12:00:00','2023-03-25 12:15:00','2023-03-25 13:45:00','On Time','Boeing 747'),(2,2,3,'2023-03-25 15:00:00','2023-03-25 15:30:00','2023-03-25 18:30:00','Delayed','Airbus A380'),(3,3,4,'2023-03-25 18:00:00','2023-03-25 18:30:00','2023-03-25 22:15:00','On Time','Boeing 787'),(4,4,5,'2023-03-25 21:00:00','2023-03-25 21:30:00','2023-03-25 23:15:00','Delayed','Boeing 777'),(5,5,1,'2023-03-26 02:00:00','2023-03-26 02:30:00','2023-03-26 04:15:00','On Time','Emirates A380');\nINSERT INTO \"Runways\" (Id,Length,Width,SurfaceType,AirportId) VALUES (1,9000.0,150.0,'Asphalt',1),(2,8000.0,170.0,'Concrete',2),(3,9500.0,200.0,'Grass',3),(4,8800.0,180.0,'Asphalt',4),(5,12000.0,220.0,'Tarmac',5);\n",
      "question": "Display a list of the delayed flights and what airport city they are in",
      "gold_queries": [
        "select cities.name, flights.FlightId from Airports JOIN flights ON flights.DepartureAirportId = airports.Id JOIN Cities ON Cities.Id = Airports.Id where status = 'Delayed'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Show all flights marked as \"Delayed\" along with the departure city of the airport.",
          "sql_queries": [
            "SELECT F.FlightId, C.Name AS DepartureCity\nFROM Flights F\nJOIN Airports A ON F.DepartureAirportId = A.Id\nJOIN Cities C ON A.CityId = C.Id\nWHERE F.Status = 'Delayed'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Retrieve and display details of delayed flights, including the city name of the departure airport.",
          "sql_queries": [
            "SELECT Flights.FlightId, Flights.ScheduledDeparture, Flights.ActualDeparture, Flights.EstimatedArrival, Flights.AircraftModel, Cities.Name AS DepartureCity\nFROM Flights\nJOIN Airports ON Flights.DepartureAirportId = Airports.Id\nJOIN Cities ON Airports.CityId = Cities.Id\nWHERE Flights.Status = 'Delayed'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List flights with a \"Delayed\" status, including the city name associated with the departure airport.",
          "sql_queries": [
            "SELECT Cities.Name, Flights.FlightId, Flights.ScheduledDeparture, Flights.ActualDeparture, Flights.EstimatedArrival, Flights.Status, Flights.AircraftModel\nFROM Flights\nJOIN Airports ON Flights.DepartureAirportId = Airports.Id\nJOIN Cities ON Airports.CityId = Cities.Id\nWHERE Flights.Status = 'Delayed'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Airport/vague_2cols_airport2/vague_2cols_airport2.sqlite",
      "db_dump": "CREATE TABLE Airports(\n    Id INTEGER PRIMARY KEY AUTOINCREMENT,\n    CityId INTEGER REFERENCES Cities(Id),\n    Code CHAR(2),\n    RunwayCount INTEGER DEFAULT 1,\n    FOREIGN KEY(CityId) REFERENCES Cities(Id));\nCREATE TABLE Cities(\n    Id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Country TEXT);\nCREATE TABLE Flights(\n    FlightId INTEGER PRIMARY KEY AUTOINCREMENT,\n    DepartureAirportId INTEGER REFERENCES Airports(Id),\n    ArrivalAirportId INTEGER REFERENCES Airports(Id),\n    ScheduledDeparture TIMESTAMP,\n    ActualDeparture TIMESTAMP,\n    EstimatedArrival TIMESTAMP,\n    Status TEXT ,\n    AircraftModel TEXT);\nCREATE TABLE Runways(\n    Id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Length REAL,\n    Width REAL,\n    SurfaceType TEXT,\n    AirportId INTEGER REFERENCES Airports(Id),\n    FOREIGN KEY(AirportId) REFERENCES Airports(Id));\n\nINSERT INTO \"Airports\" (Id,CityId,Code,RunwayCount) VALUES (1,1,'JFK',3),(2,2,'LHR',2),(3,3,'CDG',2),(4,4,'HND',4),(5,5,'DXB',6);\nINSERT INTO \"Cities\" (Id,Name,Country) VALUES (1,'New York','USA'),(2,'London','UK'),(3,'Paris','France'),(4,'Tokyo','Japan'),(5,'Dubai','UAE');\nINSERT INTO \"Flights\" (FlightId,DepartureAirportId,ArrivalAirportId,ScheduledDeparture,ActualDeparture,EstimatedArrival,Status,AircraftModel) VALUES (1,1,2,'2023-03-25 12:00:00','2023-03-25 12:15:00','2023-03-25 13:45:00','On Time','Boeing 747'),(2,2,3,'2023-03-25 15:00:00','2023-03-25 15:30:00','2023-03-25 18:30:00','Delayed','Airbus A380'),(3,3,4,'2023-03-25 18:00:00','2023-03-25 18:30:00','2023-03-25 22:15:00','On Time','Boeing 787'),(4,4,5,'2023-03-25 21:00:00','2023-03-25 21:30:00','2023-03-25 23:15:00','Delayed','Boeing 777'),(5,5,1,'2023-03-26 02:00:00','2023-03-26 02:30:00','2023-03-26 04:15:00','On Time','Emirates A380');\nINSERT INTO \"Runways\" (Id,Length,Width,SurfaceType,AirportId) VALUES (1,9000.0,150.0,'Asphalt',1),(2,8000.0,170.0,'Concrete',2),(3,9500.0,200.0,'Grass',3),(4,8800.0,180.0,'Asphalt',4),(5,12000.0,220.0,'Tarmac',5);\n",
      "question": "Display a list of the delayed flights and what airport code they are in",
      "gold_queries": [
        "select Airports.Code, flights.FlightId from Airports JOIN flights ON flights.DepartureAirportId = airports.Id JOIN Cities ON Cities.Id = Airports.Id where status = 'Delayed'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Display delayed flights with their arrival airport codes.",
          "sql_queries": [
            "SELECT T1.AircraftModel, T2.Code \nFROM Flights AS T1 \nJOIN Airports AS T2 \nON T1.ArrivalAirportId = T2.Id \nWHERE T1.Status = 'Delayed'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Show all delayed flights with the airport code of the destination airport only.",
          "sql_queries": [
            "SELECT A.Code FROM Airports AS A JOIN Flights AS F ON A.Id = F.ArrivalAirportId WHERE F.Status = 'Delayed'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Show flights with 'Delayed' status.",
          "sql_queries": [
            "SELECT * FROM Flights WHERE Status = 'Delayed'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Provide a list of all delayed flights and their associated airport codes (both departure and arrival).",
          "sql_queries": [
            "SELECT F.FlightId, DA.Code AS DepartureCode, AA.Code AS ArrivalCode\nFROM Flights F\nJOIN Airports DA ON F.DepartureAirportId = DA.Id\nJOIN Airports AA ON F.ArrivalAirportId = AA.Id\nWHERE F.Status = 'Delayed'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List delayed flights and include their departure airport code.",
          "sql_queries": [
            "SELECT A.Code, F.FlightId\nFROM Flights F\nJOIN Airports A ON F.DepartureAirportId = A.Id\nWHERE F.Status = 'Delayed'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Airport/vague_2cols_airport2/vague_2cols_airport2.sqlite",
      "db_dump": "CREATE TABLE Airports(\n    Id INTEGER PRIMARY KEY AUTOINCREMENT,\n    CityId INTEGER REFERENCES Cities(Id),\n    Code CHAR(2),\n    RunwayCount INTEGER DEFAULT 1,\n    FOREIGN KEY(CityId) REFERENCES Cities(Id));\nCREATE TABLE Cities(\n    Id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Country TEXT);\nCREATE TABLE Flights(\n    FlightId INTEGER PRIMARY KEY AUTOINCREMENT,\n    DepartureAirportId INTEGER REFERENCES Airports(Id),\n    ArrivalAirportId INTEGER REFERENCES Airports(Id),\n    ScheduledDeparture TIMESTAMP,\n    ActualDeparture TIMESTAMP,\n    EstimatedArrival TIMESTAMP,\n    Status TEXT ,\n    AircraftModel TEXT);\nCREATE TABLE Runways(\n    Id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Length REAL,\n    Width REAL,\n    SurfaceType TEXT,\n    AirportId INTEGER REFERENCES Airports(Id),\n    FOREIGN KEY(AirportId) REFERENCES Airports(Id));\n\nINSERT INTO \"Airports\" (Id,CityId,Code,RunwayCount) VALUES (1,1,'JFK',3),(2,2,'LHR',2),(3,3,'CDG',2),(4,4,'HND',4),(5,5,'DXB',6);\nINSERT INTO \"Cities\" (Id,Name,Country) VALUES (1,'New York','USA'),(2,'London','UK'),(3,'Paris','France'),(4,'Tokyo','Japan'),(5,'Dubai','UAE');\nINSERT INTO \"Flights\" (FlightId,DepartureAirportId,ArrivalAirportId,ScheduledDeparture,ActualDeparture,EstimatedArrival,Status,AircraftModel) VALUES (1,1,2,'2023-03-25 12:00:00','2023-03-25 12:15:00','2023-03-25 13:45:00','On Time','Boeing 747'),(2,2,3,'2023-03-25 15:00:00','2023-03-25 15:30:00','2023-03-25 18:30:00','Delayed','Airbus A380'),(3,3,4,'2023-03-25 18:00:00','2023-03-25 18:30:00','2023-03-25 22:15:00','On Time','Boeing 787'),(4,4,5,'2023-03-25 21:00:00','2023-03-25 21:30:00','2023-03-25 23:15:00','Delayed','Boeing 777'),(5,5,1,'2023-03-26 02:00:00','2023-03-26 02:30:00','2023-03-26 04:15:00','On Time','Emirates A380');\nINSERT INTO \"Runways\" (Id,Length,Width,SurfaceType,AirportId) VALUES (1,9000.0,150.0,'Asphalt',1),(2,8000.0,170.0,'Concrete',2),(3,9500.0,200.0,'Grass',3),(4,8800.0,180.0,'Asphalt',4),(5,12000.0,220.0,'Tarmac',5);\n",
      "question": "Display a list of the delayed flights and what airport they are in",
      "gold_queries": [
        "select cities.name, flights.FlightId from Airports JOIN flights ON flights.DepartureAirportId = airports.Id JOIN Cities ON Cities.Id = Airports.Id where status = 'Delayed'",
        "select Airports.Code, flights.FlightId from Airports JOIN flights ON flights.DepartureAirportId = airports.Id JOIN Cities ON Cities.Id = Airports.Id where status = 'Delayed'",
        "select cities.name, flights.FlightId from Airports JOIN flights ON flights.DepartureAirportId = airports.Id JOIN Cities ON Cities.Id = Airports.Id where status = 'Delayed'"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Show all Flights whose Status is 'Delayed' and their Departure Airport",
          "sql_queries": [
            "SELECT Flights.FlightId, Airports.Code \nFROM Flights \nJOIN Airports ON Flights.DepartureAirportId = Airports.Id \nWHERE Flights.Status = 'Delayed'"
          ],
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve the Delayed Flights and the Airport ID of their Departure Airport",
          "sql_queries": [
            "SELECT Status, DepartureAirportId FROM Flights WHERE Status = 'Delayed'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all flights with a 'Delayed' Status",
          "sql_queries": [
            "SELECT FlightId, DepartureAirportId, ArrivalAirportId, ScheduledDeparture, ActualDeparture, EstimatedArrival, Status, AircraftModel FROM Flights WHERE Status = 'Delayed'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List Flights marked as Delayed along with their Arrival Airport ID",
          "sql_queries": [
            "SELECT ArrivalAirportId FROM Flights WHERE Status = 'Delayed'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.3333333333333333,
        "precision": 0.25,
        "f1_score": 0.28571428571428575,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Airport/vague_2cols_airport2/vague_2cols_airport2.sqlite",
      "db_dump": "CREATE TABLE Airports(\n    Id INTEGER PRIMARY KEY AUTOINCREMENT,\n    CityId INTEGER REFERENCES Cities(Id),\n    Code CHAR(2),\n    RunwayCount INTEGER DEFAULT 1,\n    FOREIGN KEY(CityId) REFERENCES Cities(Id));\nCREATE TABLE Cities(\n    Id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Country TEXT);\nCREATE TABLE Flights(\n    FlightId INTEGER PRIMARY KEY AUTOINCREMENT,\n    DepartureAirportId INTEGER REFERENCES Airports(Id),\n    ArrivalAirportId INTEGER REFERENCES Airports(Id),\n    ScheduledDeparture TIMESTAMP,\n    ActualDeparture TIMESTAMP,\n    EstimatedArrival TIMESTAMP,\n    Status TEXT ,\n    AircraftModel TEXT);\nCREATE TABLE Runways(\n    Id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Length REAL,\n    Width REAL,\n    SurfaceType TEXT,\n    AirportId INTEGER REFERENCES Airports(Id),\n    FOREIGN KEY(AirportId) REFERENCES Airports(Id));\n\nINSERT INTO \"Airports\" (Id,CityId,Code,RunwayCount) VALUES (1,1,'JFK',3),(2,2,'LHR',2),(3,3,'CDG',2),(4,4,'HND',4),(5,5,'DXB',6);\nINSERT INTO \"Cities\" (Id,Name,Country) VALUES (1,'New York','USA'),(2,'London','UK'),(3,'Paris','France'),(4,'Tokyo','Japan'),(5,'Dubai','UAE');\nINSERT INTO \"Flights\" (FlightId,DepartureAirportId,ArrivalAirportId,ScheduledDeparture,ActualDeparture,EstimatedArrival,Status,AircraftModel) VALUES (1,1,2,'2023-03-25 12:00:00','2023-03-25 12:15:00','2023-03-25 13:45:00','On Time','Boeing 747'),(2,2,3,'2023-03-25 15:00:00','2023-03-25 15:30:00','2023-03-25 18:30:00','Delayed','Airbus A380'),(3,3,4,'2023-03-25 18:00:00','2023-03-25 18:30:00','2023-03-25 22:15:00','On Time','Boeing 787'),(4,4,5,'2023-03-25 21:00:00','2023-03-25 21:30:00','2023-03-25 23:15:00','Delayed','Boeing 777'),(5,5,1,'2023-03-26 02:00:00','2023-03-26 02:30:00','2023-03-26 04:15:00','On Time','Emirates A380');\nINSERT INTO \"Runways\" (Id,Length,Width,SurfaceType,AirportId) VALUES (1,9000.0,150.0,'Asphalt',1),(2,8000.0,170.0,'Concrete',2),(3,9500.0,200.0,'Grass',3),(4,8800.0,180.0,'Asphalt',4),(5,12000.0,220.0,'Tarmac',5);\n",
      "question": "Display a list of the delayed flights and what airport city and code they are in",
      "gold_queries": [
        "select cities.name, flights.FlightId from Airports JOIN flights ON flights.DepartureAirportId = airports.Id JOIN Cities ON Cities.Id = Airports.Id where status = 'Delayed'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List FlightId, DepartureAirportCity, DepartureAirportCode, ArrivalAirportCity, ArrivalAirportCode for all flights with a Status of 'Delayed'.",
          "sql_queries": [
            "SELECT \n    Flights.FlightId, \n    Cities1.Name AS DepartureAirportCity, \n    Airports1.Code AS DepartureAirportCode, \n    Cities2.Name AS ArrivalAirportCity, \n    Airports2.Code AS ArrivalAirportCode \nFROM \n    Flights \nJOIN \n    Airports AS Airports1 ON Flights.DepartureAirportId = Airports1.Id \nJOIN \n    Cities AS Cities1 ON Airports1.CityId = Cities1.Id \nJOIN \n    Airports AS Airports2 ON Flights.ArrivalAirportId = Airports2.Id \nJOIN \n    Cities AS Cities2 ON Airports2.CityId = Cities2.Id \nWHERE \n    Flights.Status = 'Delayed'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Return a list of FlightId, DepartureAirportCity, DepartureAirportCode, ArrivalAirportCity, ArrivalAirportCode, Status for all flights where Status equals 'Delayed'.",
          "sql_queries": [
            "SELECT F.FlightId, C1.Name AS DepartureAirportCity, A1.Code AS DepartureAirportCode, C2.Name AS ArrivalAirportCity, A2.Code AS ArrivalAirportCode, F.Status\nFROM Flights F\nJOIN Airports A1 ON F.DepartureAirportId = A1.Id\nJOIN Airports A2 ON F.ArrivalAirportId = A2.Id\nJOIN Cities C1 ON A1.CityId = C1.Id\nJOIN Cities C2 ON A2.CityId = C2.Id\nWHERE F.Status = 'Delayed'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Show all flights with a Status of 'Delayed', including their origin and destination cities and airport codes.",
          "sql_queries": [
            "SELECT C1.Name AS OriginCity, C2.Name AS DestinationCity, A1.Code AS OriginAirportCode, A2.Code AS DestinationAirportCode\nFROM Flights F\nJOIN Airports A1 ON F.DepartureAirportId = A1.Id\nJOIN Airports A2 ON F.ArrivalAirportId = A2.Id\nJOIN Cities C1 ON A1.CityId = C1.Id\nJOIN Cities C2 ON A2.CityId = C2.Id\nWHERE F.Status = 'Delayed'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Airport/vague_2cols_airport1/vague_2cols_airport1.sqlite",
      "db_dump": "CREATE TABLE Airlines (\n    Airline_Code CHAR(2) PRIMARY KEY UNIQUE ,\n    Airline_Name TEXT,\n    Headquarters_City TEXT,\n    Website TEXT\n);\nCREATE TABLE Airports (\n    Airport_Code CHAR(5) PRIMARY KEY UNIQUE ,\n    Airport_Name TEXT,\n    Country TEXT,\n    City TEXT,\n    Elevation INT DEFAULT 0,\n    Timezone TEXT,\n    IATA_Code VARCHAR(4),\n    Latitude DECIMAL(9,6),\n    Longitude DECIMAL(11,8)\n);\nCREATE TABLE Flights (\n    Flight_ID INTEGER PRIMARY KEY,\n    Departure_Time TIMESTAMP,\n    Arrival_Time TIMESTAMP,\n    Aircraft_Type TEXT,\n    Origin_Airport_Code VARCHAR(5) REFERENCES Airports(Airport_Code),\n    Destination_Airport_Code VARCHAR(5) REFERENCES Airports(Airport_Code)\n);\nCREATE TABLE Maintenance_Records (\n    Record_ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Plane_ID INTEGER REFERENCES Planes(Plane_ID),\n    Work_Order_Description TEXT,\n    Start_DateTime TIMESTAMP,\n    End_DateTime TIMESTAMP,\n    Total_Hours_Worked FLOAT,\n    Cost FLOAT\n);\nCREATE TABLE Pilots (\n    Pilot_ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    First_Name TEXT,\n    Last_Name TEXT,\n    Date_Of_Birth DATE,\n    License_Number VARCHAR(20),\n    License_Issue_Date DATE,\n    Rating TEXT,\n    Airline_Code CHAR(2) REFERENCES Airlines(Airline_Code)\n);\nCREATE TABLE Planes (\n    Plane_ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Registration_Number VARCHAR(7),\n    Model_Name TEXT,\n    Manufacturer_Name TEXT,\n    Year_Manufactured INT,\n    Capacity INT,\n    Pilot_ID INTEGER REFERENCES Pilots(Pilot_ID)\n);\n\nINSERT INTO \"Airlines\" (Airline_Code,Airline_Name,Headquarters_City,Website) VALUES ('AA','American Airlines','Fort Worth','https://www.aa.com'),('DL','Delta Air Lines','Atlanta','https://www.delta.com'),('UA','United Airlines','Chicago','https://www.united.com'),('BA','British Airways','London','https://www.britishairways.com'),('LU','Luftansa','Frankfurt','https://www.luftansa.com');\nINSERT INTO \"Airports\" (Airport_Code,Airport_Name,Country,City,Elevation,Timezone,IATA_Code,Latitude,Longitude) VALUES ('JFK','John F. Kennedy International Airport','USA','New York',3,'-05:00','JFK',40.6418,-73.7789),('LAX','Los Angeles International Airport','USA','Los Angeles',239,'-08:00','LAX',33.9451,-118.4052),('YYZ','Toronto Pearson International Airport','Canada','Toronto',253,'-05:00','YYZ',55.6815,-79.4536),('DUB','Dublin Airport','Ireland','Dublin',75,'GMT+00:00','DUB',53.3749,-6.1432),('NRT','Tokyo Haneda Airport','Japan','Tokyo',13,'JST+09:00','NRT',35.6051,139.7691);\nINSERT INTO \"Maintenance_Records\" (Record_ID,Plane_ID,Work_Order_Description,Start_DateTime,End_DateTime,Total_Hours_Worked,Cost) VALUES (1,1,'Engine overhaul','2021-01-01 08:00:00','2021-01-02 18:00:00',12.0,15000.0),(2,2,'Landing gear repair','2021-02-01 08:00:00','2021-02-02 18:00:00',10.0,10000.0),(3,3,'Interior cleaning and refurbishment','2021-03-01 08:00:00','2021-03-05 18:00:00',40.0,8000.0),(4,4,'Avionics upgrade','2021-04-01 08:00:00','2021-04-03 18:00:00',24.0,20000.0),(5,5,'Wing inspection','2021-05-01 08:00:00','2021-05-02 18:00:00',8.0,5000.0);\nINSERT INTO \"Pilots\" (Pilot_ID,First_Name,Last_Name,Date_Of_Birth,License_Number,License_Issue_Date,Rating,Airline_Code) VALUES (1,'John','Smith','1990-01-01','123ABCD','2015-01-01','ATP','AA'),(2,'Jane','Doe','1992-02-02','XYZWEE','2016-02-02','ATP','UA'),(3,'Michael','Jackson','1991-03-03','ABCDEF','2017-03-03','ATP','DL'),(4,'Emma','Swift','1993-04-04','GIHJKL','2018-04-04','ATP','BA'),(5,'Paul','McCartney','1942-06-06','LMNOPQ','1964-06-06','ATP','LU');\nINSERT INTO \"Planes\" (Plane_ID,Registration_Number,Model_Name,Manufacturer_Name,Year_Manufactured,Capacity,Pilot_ID) VALUES (1,'N12345','Boeing 737-800','Boeing',2010,200,1),(2,'EI-DVB','Airbus A320neo','Airbus',2015,180,2),(3,'VY-BCR','Embraer E190','Embraer',2008,100,3),(4,'SE-RML','Bombardier CRJ900','Bombardier',2006,88,4),(5,'EC-IXQ','Airbus A380-800','Airbus',2012,500,5);\n",
      "question": "What's the highest airport?",
      "gold_queries": [
        "SELECT Airport_Code\r\nFROM Airports\r\nWHERE Elevation = (\r\nSELECT MAX(Elevation) FROM Airports)",
        "SELECT Airport_Name\r\nFROM Airports\r\nWHERE Elevation = (\r\nSELECT MAX(Elevation) FROM Airports)",
        "SELECT Airport_Code, Airport_Name\r\nFROM Airports\r\nWHERE Elevation = (\r\nSELECT MAX(Elevation) FROM Airports)"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Find the airport having the maximum altitude among all airports listed.",
          "sql_queries": [
            "SELECT Airport_Name FROM Airports WHERE Elevation = (SELECT MAX(Elevation) FROM Airports)"
          ],
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Which airport has the biggest elevation in meters?",
          "sql_queries": [
            "SELECT Airport_Name FROM Airports ORDER BY Elevation DESC LIMIT 1"
          ],
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Identify the Airport with the maximum Elevation value in the Airports table.",
          "sql_queries": [
            "SELECT Airport_Name FROM Airports ORDER BY Elevation DESC LIMIT 1"
          ],
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Determine the airport with the highest elevation according to the 'Elevation' column.",
          "sql_queries": [
            "SELECT Airport_Name FROM Airports ORDER BY Elevation DESC LIMIT 1"
          ],
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.3333333333333333,
        "precision": 1.0,
        "f1_score": 0.5,
        "num_queries": 4,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 4
    },
    {
      "db_file": "data/vague/Airport/vague_2cols_airport1/vague_2cols_airport1.sqlite",
      "db_dump": "CREATE TABLE Airlines (\n    Airline_Code CHAR(2) PRIMARY KEY UNIQUE ,\n    Airline_Name TEXT,\n    Headquarters_City TEXT,\n    Website TEXT\n);\nCREATE TABLE Airports (\n    Airport_Code CHAR(5) PRIMARY KEY UNIQUE ,\n    Airport_Name TEXT,\n    Country TEXT,\n    City TEXT,\n    Elevation INT DEFAULT 0,\n    Timezone TEXT,\n    IATA_Code VARCHAR(4),\n    Latitude DECIMAL(9,6),\n    Longitude DECIMAL(11,8)\n);\nCREATE TABLE Flights (\n    Flight_ID INTEGER PRIMARY KEY,\n    Departure_Time TIMESTAMP,\n    Arrival_Time TIMESTAMP,\n    Aircraft_Type TEXT,\n    Origin_Airport_Code VARCHAR(5) REFERENCES Airports(Airport_Code),\n    Destination_Airport_Code VARCHAR(5) REFERENCES Airports(Airport_Code)\n);\nCREATE TABLE Maintenance_Records (\n    Record_ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Plane_ID INTEGER REFERENCES Planes(Plane_ID),\n    Work_Order_Description TEXT,\n    Start_DateTime TIMESTAMP,\n    End_DateTime TIMESTAMP,\n    Total_Hours_Worked FLOAT,\n    Cost FLOAT\n);\nCREATE TABLE Pilots (\n    Pilot_ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    First_Name TEXT,\n    Last_Name TEXT,\n    Date_Of_Birth DATE,\n    License_Number VARCHAR(20),\n    License_Issue_Date DATE,\n    Rating TEXT,\n    Airline_Code CHAR(2) REFERENCES Airlines(Airline_Code)\n);\nCREATE TABLE Planes (\n    Plane_ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Registration_Number VARCHAR(7),\n    Model_Name TEXT,\n    Manufacturer_Name TEXT,\n    Year_Manufactured INT,\n    Capacity INT,\n    Pilot_ID INTEGER REFERENCES Pilots(Pilot_ID)\n);\n\nINSERT INTO \"Airlines\" (Airline_Code,Airline_Name,Headquarters_City,Website) VALUES ('AA','American Airlines','Fort Worth','https://www.aa.com'),('DL','Delta Air Lines','Atlanta','https://www.delta.com'),('UA','United Airlines','Chicago','https://www.united.com'),('BA','British Airways','London','https://www.britishairways.com'),('LU','Luftansa','Frankfurt','https://www.luftansa.com');\nINSERT INTO \"Airports\" (Airport_Code,Airport_Name,Country,City,Elevation,Timezone,IATA_Code,Latitude,Longitude) VALUES ('JFK','John F. Kennedy International Airport','USA','New York',3,'-05:00','JFK',40.6418,-73.7789),('LAX','Los Angeles International Airport','USA','Los Angeles',239,'-08:00','LAX',33.9451,-118.4052),('YYZ','Toronto Pearson International Airport','Canada','Toronto',253,'-05:00','YYZ',55.6815,-79.4536),('DUB','Dublin Airport','Ireland','Dublin',75,'GMT+00:00','DUB',53.3749,-6.1432),('NRT','Tokyo Haneda Airport','Japan','Tokyo',13,'JST+09:00','NRT',35.6051,139.7691);\nINSERT INTO \"Maintenance_Records\" (Record_ID,Plane_ID,Work_Order_Description,Start_DateTime,End_DateTime,Total_Hours_Worked,Cost) VALUES (1,1,'Engine overhaul','2021-01-01 08:00:00','2021-01-02 18:00:00',12.0,15000.0),(2,2,'Landing gear repair','2021-02-01 08:00:00','2021-02-02 18:00:00',10.0,10000.0),(3,3,'Interior cleaning and refurbishment','2021-03-01 08:00:00','2021-03-05 18:00:00',40.0,8000.0),(4,4,'Avionics upgrade','2021-04-01 08:00:00','2021-04-03 18:00:00',24.0,20000.0),(5,5,'Wing inspection','2021-05-01 08:00:00','2021-05-02 18:00:00',8.0,5000.0);\nINSERT INTO \"Pilots\" (Pilot_ID,First_Name,Last_Name,Date_Of_Birth,License_Number,License_Issue_Date,Rating,Airline_Code) VALUES (1,'John','Smith','1990-01-01','123ABCD','2015-01-01','ATP','AA'),(2,'Jane','Doe','1992-02-02','XYZWEE','2016-02-02','ATP','UA'),(3,'Michael','Jackson','1991-03-03','ABCDEF','2017-03-03','ATP','DL'),(4,'Emma','Swift','1993-04-04','GIHJKL','2018-04-04','ATP','BA'),(5,'Paul','McCartney','1942-06-06','LMNOPQ','1964-06-06','ATP','LU');\nINSERT INTO \"Planes\" (Plane_ID,Registration_Number,Model_Name,Manufacturer_Name,Year_Manufactured,Capacity,Pilot_ID) VALUES (1,'N12345','Boeing 737-800','Boeing',2010,200,1),(2,'EI-DVB','Airbus A320neo','Airbus',2015,180,2),(3,'VY-BCR','Embraer E190','Embraer',2008,100,3),(4,'SE-RML','Bombardier CRJ900','Bombardier',2006,88,4),(5,'EC-IXQ','Airbus A380-800','Airbus',2012,500,5);\n",
      "question": "what is the airport code and airport name of the airport with the highest elevation?",
      "gold_queries": [
        "SELECT Airport_Code, Airport_Name\r\nFROM Airports\r\nWHERE Elevation = (\r\nSELECT MAX(Elevation) FROM Airports)"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What is the Airport_Code and Airport_Name of the Airport with the highest Elevation",
          "sql_queries": [
            "SELECT Airport_Code, Airport_Name FROM Airports ORDER BY Elevation DESC LIMIT 1"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Which airport has the highest Elevation and what are its Airport_Code and Airport_Name?",
          "sql_queries": [
            "SELECT Airport_Code, Airport_Name FROM Airports ORDER BY Elevation DESC LIMIT 1"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Retrieving Airport_Code and Airport_Name of the airport having the maximum Elevation",
          "sql_queries": [
            "SELECT Airport_Code, Airport_Name FROM Airports ORDER BY Elevation DESC LIMIT 1"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Identify the Airport_Code and Airport_Name corresponding to the airport with the greatest Elevation value",
          "sql_queries": [
            "SELECT Airport_Code, Airport_Name FROM Airports ORDER BY Elevation DESC LIMIT 1"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Find the Airport_Code and Airport_Name for the airport having the maximum Elevation",
          "sql_queries": [
            "SELECT Airport_Code, Airport_Name FROM Airports WHERE Elevation = (SELECT MAX(Elevation) FROM Airports)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 5,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 5
    },
    {
      "db_file": "data/vague/Airport/vague_2cols_airport1/vague_2cols_airport1.sqlite",
      "db_dump": "CREATE TABLE Airlines (\n    Airline_Code CHAR(2) PRIMARY KEY UNIQUE ,\n    Airline_Name TEXT,\n    Headquarters_City TEXT,\n    Website TEXT\n);\nCREATE TABLE Airports (\n    Airport_Code CHAR(5) PRIMARY KEY UNIQUE ,\n    Airport_Name TEXT,\n    Country TEXT,\n    City TEXT,\n    Elevation INT DEFAULT 0,\n    Timezone TEXT,\n    IATA_Code VARCHAR(4),\n    Latitude DECIMAL(9,6),\n    Longitude DECIMAL(11,8)\n);\nCREATE TABLE Flights (\n    Flight_ID INTEGER PRIMARY KEY,\n    Departure_Time TIMESTAMP,\n    Arrival_Time TIMESTAMP,\n    Aircraft_Type TEXT,\n    Origin_Airport_Code VARCHAR(5) REFERENCES Airports(Airport_Code),\n    Destination_Airport_Code VARCHAR(5) REFERENCES Airports(Airport_Code)\n);\nCREATE TABLE Maintenance_Records (\n    Record_ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Plane_ID INTEGER REFERENCES Planes(Plane_ID),\n    Work_Order_Description TEXT,\n    Start_DateTime TIMESTAMP,\n    End_DateTime TIMESTAMP,\n    Total_Hours_Worked FLOAT,\n    Cost FLOAT\n);\nCREATE TABLE Pilots (\n    Pilot_ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    First_Name TEXT,\n    Last_Name TEXT,\n    Date_Of_Birth DATE,\n    License_Number VARCHAR(20),\n    License_Issue_Date DATE,\n    Rating TEXT,\n    Airline_Code CHAR(2) REFERENCES Airlines(Airline_Code)\n);\nCREATE TABLE Planes (\n    Plane_ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Registration_Number VARCHAR(7),\n    Model_Name TEXT,\n    Manufacturer_Name TEXT,\n    Year_Manufactured INT,\n    Capacity INT,\n    Pilot_ID INTEGER REFERENCES Pilots(Pilot_ID)\n);\n\nINSERT INTO \"Airlines\" (Airline_Code,Airline_Name,Headquarters_City,Website) VALUES ('AA','American Airlines','Fort Worth','https://www.aa.com'),('DL','Delta Air Lines','Atlanta','https://www.delta.com'),('UA','United Airlines','Chicago','https://www.united.com'),('BA','British Airways','London','https://www.britishairways.com'),('LU','Luftansa','Frankfurt','https://www.luftansa.com');\nINSERT INTO \"Airports\" (Airport_Code,Airport_Name,Country,City,Elevation,Timezone,IATA_Code,Latitude,Longitude) VALUES ('JFK','John F. Kennedy International Airport','USA','New York',3,'-05:00','JFK',40.6418,-73.7789),('LAX','Los Angeles International Airport','USA','Los Angeles',239,'-08:00','LAX',33.9451,-118.4052),('YYZ','Toronto Pearson International Airport','Canada','Toronto',253,'-05:00','YYZ',55.6815,-79.4536),('DUB','Dublin Airport','Ireland','Dublin',75,'GMT+00:00','DUB',53.3749,-6.1432),('NRT','Tokyo Haneda Airport','Japan','Tokyo',13,'JST+09:00','NRT',35.6051,139.7691);\nINSERT INTO \"Maintenance_Records\" (Record_ID,Plane_ID,Work_Order_Description,Start_DateTime,End_DateTime,Total_Hours_Worked,Cost) VALUES (1,1,'Engine overhaul','2021-01-01 08:00:00','2021-01-02 18:00:00',12.0,15000.0),(2,2,'Landing gear repair','2021-02-01 08:00:00','2021-02-02 18:00:00',10.0,10000.0),(3,3,'Interior cleaning and refurbishment','2021-03-01 08:00:00','2021-03-05 18:00:00',40.0,8000.0),(4,4,'Avionics upgrade','2021-04-01 08:00:00','2021-04-03 18:00:00',24.0,20000.0),(5,5,'Wing inspection','2021-05-01 08:00:00','2021-05-02 18:00:00',8.0,5000.0);\nINSERT INTO \"Pilots\" (Pilot_ID,First_Name,Last_Name,Date_Of_Birth,License_Number,License_Issue_Date,Rating,Airline_Code) VALUES (1,'John','Smith','1990-01-01','123ABCD','2015-01-01','ATP','AA'),(2,'Jane','Doe','1992-02-02','XYZWEE','2016-02-02','ATP','UA'),(3,'Michael','Jackson','1991-03-03','ABCDEF','2017-03-03','ATP','DL'),(4,'Emma','Swift','1993-04-04','GIHJKL','2018-04-04','ATP','BA'),(5,'Paul','McCartney','1942-06-06','LMNOPQ','1964-06-06','ATP','LU');\nINSERT INTO \"Planes\" (Plane_ID,Registration_Number,Model_Name,Manufacturer_Name,Year_Manufactured,Capacity,Pilot_ID) VALUES (1,'N12345','Boeing 737-800','Boeing',2010,200,1),(2,'EI-DVB','Airbus A320neo','Airbus',2015,180,2),(3,'VY-BCR','Embraer E190','Embraer',2008,100,3),(4,'SE-RML','Bombardier CRJ900','Bombardier',2006,88,4),(5,'EC-IXQ','Airbus A380-800','Airbus',2012,500,5);\n",
      "question": "What's the airport code of the airports that are east of the Prime Meridian?",
      "gold_queries": [
        "SELECT Airport_Code\r\nFROM Airports\r\nWHERE Longitude >0"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What is the `Airport_Code` from `Airports` where `Longitude` is greater than 0?",
          "sql_queries": [
            "SELECT Airport_Code FROM Airports WHERE Longitude > 0"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "List all airport codes from the `Airports` table for airports with a positive longitude.",
          "sql_queries": [
            "SELECT Airport_Code FROM Airports WHERE Longitude > 0"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Retrieve the `Airport_Code` values for airports located east of the Prime Meridian (longitude 0).",
          "sql_queries": [
            "SELECT Airport_Code FROM Airports WHERE Longitude > 0"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Identify the `Airport_Code` for every airport in the `Airports` table that lies east of the Prime Meridian.",
          "sql_queries": [
            "SELECT Airport_Code FROM Airports WHERE Longitude > 0"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Which airports, according to the `Airports` table, have `Longitude` values east of 0?  Provide only the `Airport_Code`.",
          "sql_queries": [
            "SELECT Airport_Code FROM Airports WHERE Longitude > 0"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 5,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 5
    },
    {
      "db_file": "data/vague/Airport/vague_2cols_airport1/vague_2cols_airport1.sqlite",
      "db_dump": "CREATE TABLE Airlines (\n    Airline_Code CHAR(2) PRIMARY KEY UNIQUE ,\n    Airline_Name TEXT,\n    Headquarters_City TEXT,\n    Website TEXT\n);\nCREATE TABLE Airports (\n    Airport_Code CHAR(5) PRIMARY KEY UNIQUE ,\n    Airport_Name TEXT,\n    Country TEXT,\n    City TEXT,\n    Elevation INT DEFAULT 0,\n    Timezone TEXT,\n    IATA_Code VARCHAR(4),\n    Latitude DECIMAL(9,6),\n    Longitude DECIMAL(11,8)\n);\nCREATE TABLE Flights (\n    Flight_ID INTEGER PRIMARY KEY,\n    Departure_Time TIMESTAMP,\n    Arrival_Time TIMESTAMP,\n    Aircraft_Type TEXT,\n    Origin_Airport_Code VARCHAR(5) REFERENCES Airports(Airport_Code),\n    Destination_Airport_Code VARCHAR(5) REFERENCES Airports(Airport_Code)\n);\nCREATE TABLE Maintenance_Records (\n    Record_ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Plane_ID INTEGER REFERENCES Planes(Plane_ID),\n    Work_Order_Description TEXT,\n    Start_DateTime TIMESTAMP,\n    End_DateTime TIMESTAMP,\n    Total_Hours_Worked FLOAT,\n    Cost FLOAT\n);\nCREATE TABLE Pilots (\n    Pilot_ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    First_Name TEXT,\n    Last_Name TEXT,\n    Date_Of_Birth DATE,\n    License_Number VARCHAR(20),\n    License_Issue_Date DATE,\n    Rating TEXT,\n    Airline_Code CHAR(2) REFERENCES Airlines(Airline_Code)\n);\nCREATE TABLE Planes (\n    Plane_ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Registration_Number VARCHAR(7),\n    Model_Name TEXT,\n    Manufacturer_Name TEXT,\n    Year_Manufactured INT,\n    Capacity INT,\n    Pilot_ID INTEGER REFERENCES Pilots(Pilot_ID)\n);\n\nINSERT INTO \"Airlines\" (Airline_Code,Airline_Name,Headquarters_City,Website) VALUES ('AA','American Airlines','Fort Worth','https://www.aa.com'),('DL','Delta Air Lines','Atlanta','https://www.delta.com'),('UA','United Airlines','Chicago','https://www.united.com'),('BA','British Airways','London','https://www.britishairways.com'),('LU','Luftansa','Frankfurt','https://www.luftansa.com');\nINSERT INTO \"Airports\" (Airport_Code,Airport_Name,Country,City,Elevation,Timezone,IATA_Code,Latitude,Longitude) VALUES ('JFK','John F. Kennedy International Airport','USA','New York',3,'-05:00','JFK',40.6418,-73.7789),('LAX','Los Angeles International Airport','USA','Los Angeles',239,'-08:00','LAX',33.9451,-118.4052),('YYZ','Toronto Pearson International Airport','Canada','Toronto',253,'-05:00','YYZ',55.6815,-79.4536),('DUB','Dublin Airport','Ireland','Dublin',75,'GMT+00:00','DUB',53.3749,-6.1432),('NRT','Tokyo Haneda Airport','Japan','Tokyo',13,'JST+09:00','NRT',35.6051,139.7691);\nINSERT INTO \"Maintenance_Records\" (Record_ID,Plane_ID,Work_Order_Description,Start_DateTime,End_DateTime,Total_Hours_Worked,Cost) VALUES (1,1,'Engine overhaul','2021-01-01 08:00:00','2021-01-02 18:00:00',12.0,15000.0),(2,2,'Landing gear repair','2021-02-01 08:00:00','2021-02-02 18:00:00',10.0,10000.0),(3,3,'Interior cleaning and refurbishment','2021-03-01 08:00:00','2021-03-05 18:00:00',40.0,8000.0),(4,4,'Avionics upgrade','2021-04-01 08:00:00','2021-04-03 18:00:00',24.0,20000.0),(5,5,'Wing inspection','2021-05-01 08:00:00','2021-05-02 18:00:00',8.0,5000.0);\nINSERT INTO \"Pilots\" (Pilot_ID,First_Name,Last_Name,Date_Of_Birth,License_Number,License_Issue_Date,Rating,Airline_Code) VALUES (1,'John','Smith','1990-01-01','123ABCD','2015-01-01','ATP','AA'),(2,'Jane','Doe','1992-02-02','XYZWEE','2016-02-02','ATP','UA'),(3,'Michael','Jackson','1991-03-03','ABCDEF','2017-03-03','ATP','DL'),(4,'Emma','Swift','1993-04-04','GIHJKL','2018-04-04','ATP','BA'),(5,'Paul','McCartney','1942-06-06','LMNOPQ','1964-06-06','ATP','LU');\nINSERT INTO \"Planes\" (Plane_ID,Registration_Number,Model_Name,Manufacturer_Name,Year_Manufactured,Capacity,Pilot_ID) VALUES (1,'N12345','Boeing 737-800','Boeing',2010,200,1),(2,'EI-DVB','Airbus A320neo','Airbus',2015,180,2),(3,'VY-BCR','Embraer E190','Embraer',2008,100,3),(4,'SE-RML','Bombardier CRJ900','Bombardier',2006,88,4),(5,'EC-IXQ','Airbus A380-800','Airbus',2012,500,5);\n",
      "question": "What's the airport name(s) and code(s) of the airports that are east of the Prime Meridian?",
      "gold_queries": [
        "SELECT Airport_Code, Airport_Name\r\nFROM Airports\r\nWHERE Longitude >0"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Return the Airport_Name and Airport_Code for all Airports where Longitude > 0",
          "sql_queries": [
            "SELECT Airport_Name, Airport_Code FROM Airports WHERE Longitude > 0"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "List all airports east of the longitude line at 0 degrees.",
          "sql_queries": [
            "SELECT Airport_Name, City, Country, Longitude FROM Airports WHERE Longitude > 0"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve the names and codes of airports east of 0° longitude.",
          "sql_queries": [
            "SELECT Airport_Name, Airport_Code FROM Airports WHERE Longitude > 0"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Identify airports situated to the east of the Prime Meridian",
          "sql_queries": [
            "SELECT Airport_Name FROM Airports WHERE Longitude > 0"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Which airports have a longitude value greater than 0?",
          "sql_queries": [
            "SELECT Airport_Name FROM Airports WHERE Longitude > 0"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Find airports located east of the Prime Meridian.",
          "sql_queries": [
            "SELECT Airport_Name FROM Airports WHERE Longitude > 0"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 6,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Airport/vague_2cols_airport1/vague_2cols_airport1.sqlite",
      "db_dump": "CREATE TABLE Airlines (\n    Airline_Code CHAR(2) PRIMARY KEY UNIQUE ,\n    Airline_Name TEXT,\n    Headquarters_City TEXT,\n    Website TEXT\n);\nCREATE TABLE Airports (\n    Airport_Code CHAR(5) PRIMARY KEY UNIQUE ,\n    Airport_Name TEXT,\n    Country TEXT,\n    City TEXT,\n    Elevation INT DEFAULT 0,\n    Timezone TEXT,\n    IATA_Code VARCHAR(4),\n    Latitude DECIMAL(9,6),\n    Longitude DECIMAL(11,8)\n);\nCREATE TABLE Flights (\n    Flight_ID INTEGER PRIMARY KEY,\n    Departure_Time TIMESTAMP,\n    Arrival_Time TIMESTAMP,\n    Aircraft_Type TEXT,\n    Origin_Airport_Code VARCHAR(5) REFERENCES Airports(Airport_Code),\n    Destination_Airport_Code VARCHAR(5) REFERENCES Airports(Airport_Code)\n);\nCREATE TABLE Maintenance_Records (\n    Record_ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Plane_ID INTEGER REFERENCES Planes(Plane_ID),\n    Work_Order_Description TEXT,\n    Start_DateTime TIMESTAMP,\n    End_DateTime TIMESTAMP,\n    Total_Hours_Worked FLOAT,\n    Cost FLOAT\n);\nCREATE TABLE Pilots (\n    Pilot_ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    First_Name TEXT,\n    Last_Name TEXT,\n    Date_Of_Birth DATE,\n    License_Number VARCHAR(20),\n    License_Issue_Date DATE,\n    Rating TEXT,\n    Airline_Code CHAR(2) REFERENCES Airlines(Airline_Code)\n);\nCREATE TABLE Planes (\n    Plane_ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Registration_Number VARCHAR(7),\n    Model_Name TEXT,\n    Manufacturer_Name TEXT,\n    Year_Manufactured INT,\n    Capacity INT,\n    Pilot_ID INTEGER REFERENCES Pilots(Pilot_ID)\n);\n\nINSERT INTO \"Airlines\" (Airline_Code,Airline_Name,Headquarters_City,Website) VALUES ('AA','American Airlines','Fort Worth','https://www.aa.com'),('DL','Delta Air Lines','Atlanta','https://www.delta.com'),('UA','United Airlines','Chicago','https://www.united.com'),('BA','British Airways','London','https://www.britishairways.com'),('LU','Luftansa','Frankfurt','https://www.luftansa.com');\nINSERT INTO \"Airports\" (Airport_Code,Airport_Name,Country,City,Elevation,Timezone,IATA_Code,Latitude,Longitude) VALUES ('JFK','John F. Kennedy International Airport','USA','New York',3,'-05:00','JFK',40.6418,-73.7789),('LAX','Los Angeles International Airport','USA','Los Angeles',239,'-08:00','LAX',33.9451,-118.4052),('YYZ','Toronto Pearson International Airport','Canada','Toronto',253,'-05:00','YYZ',55.6815,-79.4536),('DUB','Dublin Airport','Ireland','Dublin',75,'GMT+00:00','DUB',53.3749,-6.1432),('NRT','Tokyo Haneda Airport','Japan','Tokyo',13,'JST+09:00','NRT',35.6051,139.7691);\nINSERT INTO \"Maintenance_Records\" (Record_ID,Plane_ID,Work_Order_Description,Start_DateTime,End_DateTime,Total_Hours_Worked,Cost) VALUES (1,1,'Engine overhaul','2021-01-01 08:00:00','2021-01-02 18:00:00',12.0,15000.0),(2,2,'Landing gear repair','2021-02-01 08:00:00','2021-02-02 18:00:00',10.0,10000.0),(3,3,'Interior cleaning and refurbishment','2021-03-01 08:00:00','2021-03-05 18:00:00',40.0,8000.0),(4,4,'Avionics upgrade','2021-04-01 08:00:00','2021-04-03 18:00:00',24.0,20000.0),(5,5,'Wing inspection','2021-05-01 08:00:00','2021-05-02 18:00:00',8.0,5000.0);\nINSERT INTO \"Pilots\" (Pilot_ID,First_Name,Last_Name,Date_Of_Birth,License_Number,License_Issue_Date,Rating,Airline_Code) VALUES (1,'John','Smith','1990-01-01','123ABCD','2015-01-01','ATP','AA'),(2,'Jane','Doe','1992-02-02','XYZWEE','2016-02-02','ATP','UA'),(3,'Michael','Jackson','1991-03-03','ABCDEF','2017-03-03','ATP','DL'),(4,'Emma','Swift','1993-04-04','GIHJKL','2018-04-04','ATP','BA'),(5,'Paul','McCartney','1942-06-06','LMNOPQ','1964-06-06','ATP','LU');\nINSERT INTO \"Planes\" (Plane_ID,Registration_Number,Model_Name,Manufacturer_Name,Year_Manufactured,Capacity,Pilot_ID) VALUES (1,'N12345','Boeing 737-800','Boeing',2010,200,1),(2,'EI-DVB','Airbus A320neo','Airbus',2015,180,2),(3,'VY-BCR','Embraer E190','Embraer',2008,100,3),(4,'SE-RML','Bombardier CRJ900','Bombardier',2006,88,4),(5,'EC-IXQ','Airbus A380-800','Airbus',2012,500,5);\n",
      "question": "what is the airport code of the airport with the highest elevation?",
      "gold_queries": [
        "SELECT Airport_Code\r\nFROM Airports\r\nWHERE Elevation = (\r\nSELECT MAX(Elevation) FROM Airports)"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Which airport has the maximum elevation?",
          "sql_queries": [
            "SELECT Airport_Name FROM Airports ORDER BY Elevation DESC LIMIT 1"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Identify the Airport Code of the Airport with the highest elevation.",
          "sql_queries": [
            "SELECT Airport_Code FROM Airports ORDER BY Elevation DESC LIMIT 1"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Find the Airport Code associated with the airport at the greatest elevation.",
          "sql_queries": [
            "SELECT Airport_Code FROM Airports ORDER BY Elevation DESC LIMIT 1"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "What is the code for the airport with the highest elevation?",
          "sql_queries": [
            "SELECT Airport_Code FROM Airports ORDER BY Elevation DESC LIMIT 1"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 4,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/vague/Airport/vague_2cols_airport2/vague_2cols_airport2.sqlite",
      "db_dump": "CREATE TABLE Airports(\n    Id INTEGER PRIMARY KEY AUTOINCREMENT,\n    CityId INTEGER REFERENCES Cities(Id),\n    Code CHAR(2),\n    RunwayCount INTEGER DEFAULT 1,\n    FOREIGN KEY(CityId) REFERENCES Cities(Id));\nCREATE TABLE Cities(\n    Id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Country TEXT);\nCREATE TABLE Flights(\n    FlightId INTEGER PRIMARY KEY AUTOINCREMENT,\n    DepartureAirportId INTEGER REFERENCES Airports(Id),\n    ArrivalAirportId INTEGER REFERENCES Airports(Id),\n    ScheduledDeparture TIMESTAMP,\n    ActualDeparture TIMESTAMP,\n    EstimatedArrival TIMESTAMP,\n    Status TEXT ,\n    AircraftModel TEXT);\nCREATE TABLE Runways(\n    Id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Length REAL,\n    Width REAL,\n    SurfaceType TEXT,\n    AirportId INTEGER REFERENCES Airports(Id),\n    FOREIGN KEY(AirportId) REFERENCES Airports(Id));\n\nINSERT INTO \"Airports\" (Id,CityId,Code,RunwayCount) VALUES (1,1,'JFK',3),(2,2,'LHR',2),(3,3,'CDG',2),(4,4,'HND',4),(5,5,'DXB',6);\nINSERT INTO \"Cities\" (Id,Name,Country) VALUES (1,'New York','USA'),(2,'London','UK'),(3,'Paris','France'),(4,'Tokyo','Japan'),(5,'Dubai','UAE');\nINSERT INTO \"Flights\" (FlightId,DepartureAirportId,ArrivalAirportId,ScheduledDeparture,ActualDeparture,EstimatedArrival,Status,AircraftModel) VALUES (1,1,2,'2023-03-25 12:00:00','2023-03-25 12:15:00','2023-03-25 13:45:00','On Time','Boeing 747'),(2,2,3,'2023-03-25 15:00:00','2023-03-25 15:30:00','2023-03-25 18:30:00','Delayed','Airbus A380'),(3,3,4,'2023-03-25 18:00:00','2023-03-25 18:30:00','2023-03-25 22:15:00','On Time','Boeing 787'),(4,4,5,'2023-03-25 21:00:00','2023-03-25 21:30:00','2023-03-25 23:15:00','Delayed','Boeing 777'),(5,5,1,'2023-03-26 02:00:00','2023-03-26 02:30:00','2023-03-26 04:15:00','On Time','Emirates A380');\nINSERT INTO \"Runways\" (Id,Length,Width,SurfaceType,AirportId) VALUES (1,9000.0,150.0,'Asphalt',1),(2,8000.0,170.0,'Concrete',2),(3,9500.0,200.0,'Grass',3),(4,8800.0,180.0,'Asphalt',4),(5,12000.0,220.0,'Tarmac',5);\n",
      "question": "Show the airport codes and runway information all ordered by the number of runways.",
      "gold_queries": [
        "select Airports.Code, Airports.RunwayCount from Airports JOIN Cities ON Cities.Id = Airports.Id order by RunwayCount"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Show airport codes and runway length, width, and surface type sorted by runway count.",
          "sql_queries": [
            "SELECT A.Code, R.Length, R.Width, R.SurfaceType\nFROM Airports A\nJOIN Runways R ON A.Id = R.AirportId\nORDER BY A.RunwayCount"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Show airport codes and runway count sorted by runway count.",
          "sql_queries": [
            "SELECT Code, RunwayCount FROM Airports ORDER BY RunwayCount"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Airport/vague_2cols_airport1/vague_2cols_airport1.sqlite",
      "db_dump": "CREATE TABLE Airlines (\n    Airline_Code CHAR(2) PRIMARY KEY UNIQUE ,\n    Airline_Name TEXT,\n    Headquarters_City TEXT,\n    Website TEXT\n);\nCREATE TABLE Airports (\n    Airport_Code CHAR(5) PRIMARY KEY UNIQUE ,\n    Airport_Name TEXT,\n    Country TEXT,\n    City TEXT,\n    Elevation INT DEFAULT 0,\n    Timezone TEXT,\n    IATA_Code VARCHAR(4),\n    Latitude DECIMAL(9,6),\n    Longitude DECIMAL(11,8)\n);\nCREATE TABLE Flights (\n    Flight_ID INTEGER PRIMARY KEY,\n    Departure_Time TIMESTAMP,\n    Arrival_Time TIMESTAMP,\n    Aircraft_Type TEXT,\n    Origin_Airport_Code VARCHAR(5) REFERENCES Airports(Airport_Code),\n    Destination_Airport_Code VARCHAR(5) REFERENCES Airports(Airport_Code)\n);\nCREATE TABLE Maintenance_Records (\n    Record_ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Plane_ID INTEGER REFERENCES Planes(Plane_ID),\n    Work_Order_Description TEXT,\n    Start_DateTime TIMESTAMP,\n    End_DateTime TIMESTAMP,\n    Total_Hours_Worked FLOAT,\n    Cost FLOAT\n);\nCREATE TABLE Pilots (\n    Pilot_ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    First_Name TEXT,\n    Last_Name TEXT,\n    Date_Of_Birth DATE,\n    License_Number VARCHAR(20),\n    License_Issue_Date DATE,\n    Rating TEXT,\n    Airline_Code CHAR(2) REFERENCES Airlines(Airline_Code)\n);\nCREATE TABLE Planes (\n    Plane_ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Registration_Number VARCHAR(7),\n    Model_Name TEXT,\n    Manufacturer_Name TEXT,\n    Year_Manufactured INT,\n    Capacity INT,\n    Pilot_ID INTEGER REFERENCES Pilots(Pilot_ID)\n);\n\nINSERT INTO \"Airlines\" (Airline_Code,Airline_Name,Headquarters_City,Website) VALUES ('AA','American Airlines','Fort Worth','https://www.aa.com'),('DL','Delta Air Lines','Atlanta','https://www.delta.com'),('UA','United Airlines','Chicago','https://www.united.com'),('BA','British Airways','London','https://www.britishairways.com'),('LU','Luftansa','Frankfurt','https://www.luftansa.com');\nINSERT INTO \"Airports\" (Airport_Code,Airport_Name,Country,City,Elevation,Timezone,IATA_Code,Latitude,Longitude) VALUES ('JFK','John F. Kennedy International Airport','USA','New York',3,'-05:00','JFK',40.6418,-73.7789),('LAX','Los Angeles International Airport','USA','Los Angeles',239,'-08:00','LAX',33.9451,-118.4052),('YYZ','Toronto Pearson International Airport','Canada','Toronto',253,'-05:00','YYZ',55.6815,-79.4536),('DUB','Dublin Airport','Ireland','Dublin',75,'GMT+00:00','DUB',53.3749,-6.1432),('NRT','Tokyo Haneda Airport','Japan','Tokyo',13,'JST+09:00','NRT',35.6051,139.7691);\nINSERT INTO \"Maintenance_Records\" (Record_ID,Plane_ID,Work_Order_Description,Start_DateTime,End_DateTime,Total_Hours_Worked,Cost) VALUES (1,1,'Engine overhaul','2021-01-01 08:00:00','2021-01-02 18:00:00',12.0,15000.0),(2,2,'Landing gear repair','2021-02-01 08:00:00','2021-02-02 18:00:00',10.0,10000.0),(3,3,'Interior cleaning and refurbishment','2021-03-01 08:00:00','2021-03-05 18:00:00',40.0,8000.0),(4,4,'Avionics upgrade','2021-04-01 08:00:00','2021-04-03 18:00:00',24.0,20000.0),(5,5,'Wing inspection','2021-05-01 08:00:00','2021-05-02 18:00:00',8.0,5000.0);\nINSERT INTO \"Pilots\" (Pilot_ID,First_Name,Last_Name,Date_Of_Birth,License_Number,License_Issue_Date,Rating,Airline_Code) VALUES (1,'John','Smith','1990-01-01','123ABCD','2015-01-01','ATP','AA'),(2,'Jane','Doe','1992-02-02','XYZWEE','2016-02-02','ATP','UA'),(3,'Michael','Jackson','1991-03-03','ABCDEF','2017-03-03','ATP','DL'),(4,'Emma','Swift','1993-04-04','GIHJKL','2018-04-04','ATP','BA'),(5,'Paul','McCartney','1942-06-06','LMNOPQ','1964-06-06','ATP','LU');\nINSERT INTO \"Planes\" (Plane_ID,Registration_Number,Model_Name,Manufacturer_Name,Year_Manufactured,Capacity,Pilot_ID) VALUES (1,'N12345','Boeing 737-800','Boeing',2010,200,1),(2,'EI-DVB','Airbus A320neo','Airbus',2015,180,2),(3,'VY-BCR','Embraer E190','Embraer',2008,100,3),(4,'SE-RML','Bombardier CRJ900','Bombardier',2006,88,4),(5,'EC-IXQ','Airbus A380-800','Airbus',2012,500,5);\n",
      "question": "What airport is East of the Prime Meridian?",
      "gold_queries": [
        "SELECT Airport_Code\r\nFROM Airports\r\nWHERE Longitude >0",
        "SELECT Airport_Name\r\nFROM Airports\r\nWHERE Longitude >0",
        "SELECT Airport_Code, Airport_Name\r\nFROM Airports\r\nWHERE Longitude >0"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Identify airports whose longitude is east of the prime meridian.",
          "sql_queries": [
            "SELECT Airport_Name, Longitude FROM Airports WHERE Longitude > 0"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Find all airports with Longitude greater than 0.",
          "sql_queries": [
            "SELECT Airport_Name, Country, City, Longitude FROM Airports WHERE Longitude > 0"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List the names of airports located east of 0 degrees longitude.",
          "sql_queries": [
            "SELECT Airport_Name FROM Airports WHERE Longitude > 0"
          ],
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.3333333333333333,
        "precision": 0.3333333333333333,
        "f1_score": 0.3333333333333333,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Airport/vague_2cols_airport1/vague_2cols_airport1.sqlite",
      "db_dump": "CREATE TABLE Airlines (\n    Airline_Code CHAR(2) PRIMARY KEY UNIQUE ,\n    Airline_Name TEXT,\n    Headquarters_City TEXT,\n    Website TEXT\n);\nCREATE TABLE Airports (\n    Airport_Code CHAR(5) PRIMARY KEY UNIQUE ,\n    Airport_Name TEXT,\n    Country TEXT,\n    City TEXT,\n    Elevation INT DEFAULT 0,\n    Timezone TEXT,\n    IATA_Code VARCHAR(4),\n    Latitude DECIMAL(9,6),\n    Longitude DECIMAL(11,8)\n);\nCREATE TABLE Flights (\n    Flight_ID INTEGER PRIMARY KEY,\n    Departure_Time TIMESTAMP,\n    Arrival_Time TIMESTAMP,\n    Aircraft_Type TEXT,\n    Origin_Airport_Code VARCHAR(5) REFERENCES Airports(Airport_Code),\n    Destination_Airport_Code VARCHAR(5) REFERENCES Airports(Airport_Code)\n);\nCREATE TABLE Maintenance_Records (\n    Record_ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Plane_ID INTEGER REFERENCES Planes(Plane_ID),\n    Work_Order_Description TEXT,\n    Start_DateTime TIMESTAMP,\n    End_DateTime TIMESTAMP,\n    Total_Hours_Worked FLOAT,\n    Cost FLOAT\n);\nCREATE TABLE Pilots (\n    Pilot_ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    First_Name TEXT,\n    Last_Name TEXT,\n    Date_Of_Birth DATE,\n    License_Number VARCHAR(20),\n    License_Issue_Date DATE,\n    Rating TEXT,\n    Airline_Code CHAR(2) REFERENCES Airlines(Airline_Code)\n);\nCREATE TABLE Planes (\n    Plane_ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Registration_Number VARCHAR(7),\n    Model_Name TEXT,\n    Manufacturer_Name TEXT,\n    Year_Manufactured INT,\n    Capacity INT,\n    Pilot_ID INTEGER REFERENCES Pilots(Pilot_ID)\n);\n\nINSERT INTO \"Airlines\" (Airline_Code,Airline_Name,Headquarters_City,Website) VALUES ('AA','American Airlines','Fort Worth','https://www.aa.com'),('DL','Delta Air Lines','Atlanta','https://www.delta.com'),('UA','United Airlines','Chicago','https://www.united.com'),('BA','British Airways','London','https://www.britishairways.com'),('LU','Luftansa','Frankfurt','https://www.luftansa.com');\nINSERT INTO \"Airports\" (Airport_Code,Airport_Name,Country,City,Elevation,Timezone,IATA_Code,Latitude,Longitude) VALUES ('JFK','John F. Kennedy International Airport','USA','New York',3,'-05:00','JFK',40.6418,-73.7789),('LAX','Los Angeles International Airport','USA','Los Angeles',239,'-08:00','LAX',33.9451,-118.4052),('YYZ','Toronto Pearson International Airport','Canada','Toronto',253,'-05:00','YYZ',55.6815,-79.4536),('DUB','Dublin Airport','Ireland','Dublin',75,'GMT+00:00','DUB',53.3749,-6.1432),('NRT','Tokyo Haneda Airport','Japan','Tokyo',13,'JST+09:00','NRT',35.6051,139.7691);\nINSERT INTO \"Maintenance_Records\" (Record_ID,Plane_ID,Work_Order_Description,Start_DateTime,End_DateTime,Total_Hours_Worked,Cost) VALUES (1,1,'Engine overhaul','2021-01-01 08:00:00','2021-01-02 18:00:00',12.0,15000.0),(2,2,'Landing gear repair','2021-02-01 08:00:00','2021-02-02 18:00:00',10.0,10000.0),(3,3,'Interior cleaning and refurbishment','2021-03-01 08:00:00','2021-03-05 18:00:00',40.0,8000.0),(4,4,'Avionics upgrade','2021-04-01 08:00:00','2021-04-03 18:00:00',24.0,20000.0),(5,5,'Wing inspection','2021-05-01 08:00:00','2021-05-02 18:00:00',8.0,5000.0);\nINSERT INTO \"Pilots\" (Pilot_ID,First_Name,Last_Name,Date_Of_Birth,License_Number,License_Issue_Date,Rating,Airline_Code) VALUES (1,'John','Smith','1990-01-01','123ABCD','2015-01-01','ATP','AA'),(2,'Jane','Doe','1992-02-02','XYZWEE','2016-02-02','ATP','UA'),(3,'Michael','Jackson','1991-03-03','ABCDEF','2017-03-03','ATP','DL'),(4,'Emma','Swift','1993-04-04','GIHJKL','2018-04-04','ATP','BA'),(5,'Paul','McCartney','1942-06-06','LMNOPQ','1964-06-06','ATP','LU');\nINSERT INTO \"Planes\" (Plane_ID,Registration_Number,Model_Name,Manufacturer_Name,Year_Manufactured,Capacity,Pilot_ID) VALUES (1,'N12345','Boeing 737-800','Boeing',2010,200,1),(2,'EI-DVB','Airbus A320neo','Airbus',2015,180,2),(3,'VY-BCR','Embraer E190','Embraer',2008,100,3),(4,'SE-RML','Bombardier CRJ900','Bombardier',2006,88,4),(5,'EC-IXQ','Airbus A380-800','Airbus',2012,500,5);\n",
      "question": "what is the airport name of the airport with the highest elevation?",
      "gold_queries": [
        "SELECT Airport_Name\r\nFROM Airports\r\nWHERE Elevation = (\r\nSELECT MAX(Elevation) FROM Airports)"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Find the airport with the maximum elevation value in the Airports table.",
          "sql_queries": [
            "SELECT Airport_Name, Elevation FROM Airports ORDER BY Elevation DESC LIMIT 1"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Airport name corresponds to which airport in the Airports table has highest elevation.",
          "sql_queries": [
            "SELECT Airport_Name FROM Airports ORDER BY Elevation DESC LIMIT 1"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Retrieve the Airport_Name from Airports table for the airport with maximum elevation.",
          "sql_queries": [
            "SELECT Airport_Name FROM Airports ORDER BY Elevation DESC LIMIT 1"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "What is the name of the airport that has the highest elevation?",
          "sql_queries": [
            "SELECT Airport_Name FROM Airports ORDER BY Elevation DESC LIMIT 1"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 4,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/vague/Traffic/vague_2cols_location/vague_2cols_location.sqlite",
      "db_dump": "CREATE TABLE Accidents (\n    AccidentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Date DATETIME,\n    LocationID INTEGER,\n    Severity VARCHAR(50),\n    FOREIGN KEY (LocationID) REFERENCES Streets (StreetID)\n);\nCREATE TABLE RoadWorks (\n    WorkID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StartDate DATETIME,\n    EndDate DATETIME,\n    StreetID INTEGER,\n    WorkType VARCHAR(50),\n    FOREIGN KEY (StreetID) REFERENCES Streets (StreetID)\n);\nCREATE TABLE SpeedingTickets (\n    TicketID INTEGER PRIMARY KEY AUTOINCREMENT,\n    IssueDate DATETIME,\n    OffenderVehicleID INTEGER,\n    FineAmount DECIMAL(8,2),\n    FOREIGN KEY (OffenderVehicleID) REFERENCES Vehicles (VehicleID)\n);\nCREATE TABLE Streets (\n    StreetID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Street_Name TEXT,\n    Block_Number INTEGER,\n    Bus_Stop BOOLEAN DEFAULT FALSE,\n    NumLanes INTEGER,\n    MaxSpeed MPH\n);\nCREATE TABLE Users (\n    UserID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName VARCHAR(50),\n    LastName VARCHAR(50),\n    Email VARCHAR(100),\n    PhoneNumber VARCHAR(15)\n);\nCREATE TABLE Vehicles (\n    VehicleID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Type VARCHAR(20),\n    LicensePlate CHAR(7),\n    OwnerID INTEGER,\n    FOREIGN KEY (OwnerID) REFERENCES Users (UserID)\n);\n\nINSERT INTO \"Accidents\" (AccidentID,Date,LocationID,Severity) VALUES (1,'2022-01-01 10:00:00',1,'Minor'),(2,'2022-02-01 14:30:00',2,'Moderate'),(3,'2022-03-01 19:00:00',3,'Major'),(4,'2022-04-01 23:30:00',4,'Catastrophic'),(5,'2022-05-01 01:00:00',5,'Fatal');\nINSERT INTO \"RoadWorks\" (WorkID,StartDate,EndDate,StreetID,WorkType) VALUES (1,'2022-06-01 08:00:00','2022-06-02 18:00:00',1,'Repair'),(2,'2022-07-01 08:00:00','2022-07-02 18:00:00',2,'Resurfacing'),(3,'2022-08-01 08:00:00','2022-08-02 18:00:00',3,'Construction'),(4,'2022-09-01 08:00:00','2022-09-02 18:00:00',4,'Drainage'),(5,'2022-10-01 08:00:00','2022-10-02 18:00:00',5,'Landscaping');\nINSERT INTO \"SpeedingTickets\" (TicketID,IssueDate,OffenderVehicleID,FineAmount) VALUES (1,'2022-01-15 12:34:56',1,50),(2,'2022-02-15 12:34:56',2,100),(3,'2022-03-15 12:34:56',3,75),(4,'2022-04-15 12:34:56',4,125),(5,'2022-05-15 12:34:56',5,150);\nINSERT INTO \"Streets\" (StreetID,Street_Name,Block_Number,Bus_Stop,NumLanes,MaxSpeed) VALUES (1,'Main St',123,1,2,30),(2,'Elm St',456,0,1,25),(3,'Pine Ave',789,1,2,30),(4,'Maple Dr',101,0,2,25),(5,'Oak Blvd',123,1,4,40);\nINSERT INTO \"Users\" (UserID,FirstName,LastName,Email,PhoneNumber) VALUES (1,'John','Doe','john.doe@example.com','+1234567890'),(2,'Jane','Smith','jane.smith@example.com','+0987654321'),(3,'Alice','Brown','alice.brown@example.com','+1123456789'),(4,'Bob','White','bob.white@example.com','+0987654321'),(5,'Charlie','Black','charlie.black@example.com','+1123456789');\nINSERT INTO \"Vehicles\" (VehicleID,Type,LicensePlate,OwnerID) VALUES (1,'Car','ABC123',1),(2,'Truck','DEF456',2),(3,'SUV','GHI789',3),(4,'Motorcycle','JKL012',4),(5,'Van','LMN321',5);\n",
      "question": "What street name and block number are scheduled for street resurfacing?",
      "gold_queries": [
        "select Street_Name, Block_Number from streets join roadworks on Streets.StreetID = roadworks.StreetID where WorkType = 'Resurfacing'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What street names and block numbers will have street resurfacing?",
          "sql_queries": [
            "SELECT S.Street_Name, S.Block_Number \nFROM Streets S \nJOIN RoadWorks RW ON S.StreetID = RW.StreetID \nWHERE RW.WorkType = 'Resurfacing'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "For which streets is resurfacing scheduled?",
          "sql_queries": [
            "SELECT S.Street_Name FROM Streets S JOIN RoadWorks RW ON S.StreetID = RW.StreetID WHERE RW.WorkType = 'Resurfacing'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "What street names and block numbers have scheduled resurfacing?",
          "sql_queries": [
            "SELECT Street_Name, Block_Number FROM Streets WHERE StreetID IN (SELECT StreetID FROM RoadWorks WHERE WorkType = 'Resurfacing')"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Which streets are scheduled for resurfacing?",
          "sql_queries": [
            "SELECT Street_Name FROM Streets WHERE StreetID IN (SELECT StreetID FROM RoadWorks WHERE WorkType = 'Resurfacing')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Airport/vague_2cols_airport1/vague_2cols_airport1.sqlite",
      "db_dump": "CREATE TABLE Airlines (\n    Airline_Code CHAR(2) PRIMARY KEY UNIQUE ,\n    Airline_Name TEXT,\n    Headquarters_City TEXT,\n    Website TEXT\n);\nCREATE TABLE Airports (\n    Airport_Code CHAR(5) PRIMARY KEY UNIQUE ,\n    Airport_Name TEXT,\n    Country TEXT,\n    City TEXT,\n    Elevation INT DEFAULT 0,\n    Timezone TEXT,\n    IATA_Code VARCHAR(4),\n    Latitude DECIMAL(9,6),\n    Longitude DECIMAL(11,8)\n);\nCREATE TABLE Flights (\n    Flight_ID INTEGER PRIMARY KEY,\n    Departure_Time TIMESTAMP,\n    Arrival_Time TIMESTAMP,\n    Aircraft_Type TEXT,\n    Origin_Airport_Code VARCHAR(5) REFERENCES Airports(Airport_Code),\n    Destination_Airport_Code VARCHAR(5) REFERENCES Airports(Airport_Code)\n);\nCREATE TABLE Maintenance_Records (\n    Record_ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Plane_ID INTEGER REFERENCES Planes(Plane_ID),\n    Work_Order_Description TEXT,\n    Start_DateTime TIMESTAMP,\n    End_DateTime TIMESTAMP,\n    Total_Hours_Worked FLOAT,\n    Cost FLOAT\n);\nCREATE TABLE Pilots (\n    Pilot_ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    First_Name TEXT,\n    Last_Name TEXT,\n    Date_Of_Birth DATE,\n    License_Number VARCHAR(20),\n    License_Issue_Date DATE,\n    Rating TEXT,\n    Airline_Code CHAR(2) REFERENCES Airlines(Airline_Code)\n);\nCREATE TABLE Planes (\n    Plane_ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Registration_Number VARCHAR(7),\n    Model_Name TEXT,\n    Manufacturer_Name TEXT,\n    Year_Manufactured INT,\n    Capacity INT,\n    Pilot_ID INTEGER REFERENCES Pilots(Pilot_ID)\n);\n\nINSERT INTO \"Airlines\" (Airline_Code,Airline_Name,Headquarters_City,Website) VALUES ('AA','American Airlines','Fort Worth','https://www.aa.com'),('DL','Delta Air Lines','Atlanta','https://www.delta.com'),('UA','United Airlines','Chicago','https://www.united.com'),('BA','British Airways','London','https://www.britishairways.com'),('LU','Luftansa','Frankfurt','https://www.luftansa.com');\nINSERT INTO \"Airports\" (Airport_Code,Airport_Name,Country,City,Elevation,Timezone,IATA_Code,Latitude,Longitude) VALUES ('JFK','John F. Kennedy International Airport','USA','New York',3,'-05:00','JFK',40.6418,-73.7789),('LAX','Los Angeles International Airport','USA','Los Angeles',239,'-08:00','LAX',33.9451,-118.4052),('YYZ','Toronto Pearson International Airport','Canada','Toronto',253,'-05:00','YYZ',55.6815,-79.4536),('DUB','Dublin Airport','Ireland','Dublin',75,'GMT+00:00','DUB',53.3749,-6.1432),('NRT','Tokyo Haneda Airport','Japan','Tokyo',13,'JST+09:00','NRT',35.6051,139.7691);\nINSERT INTO \"Maintenance_Records\" (Record_ID,Plane_ID,Work_Order_Description,Start_DateTime,End_DateTime,Total_Hours_Worked,Cost) VALUES (1,1,'Engine overhaul','2021-01-01 08:00:00','2021-01-02 18:00:00',12.0,15000.0),(2,2,'Landing gear repair','2021-02-01 08:00:00','2021-02-02 18:00:00',10.0,10000.0),(3,3,'Interior cleaning and refurbishment','2021-03-01 08:00:00','2021-03-05 18:00:00',40.0,8000.0),(4,4,'Avionics upgrade','2021-04-01 08:00:00','2021-04-03 18:00:00',24.0,20000.0),(5,5,'Wing inspection','2021-05-01 08:00:00','2021-05-02 18:00:00',8.0,5000.0);\nINSERT INTO \"Pilots\" (Pilot_ID,First_Name,Last_Name,Date_Of_Birth,License_Number,License_Issue_Date,Rating,Airline_Code) VALUES (1,'John','Smith','1990-01-01','123ABCD','2015-01-01','ATP','AA'),(2,'Jane','Doe','1992-02-02','XYZWEE','2016-02-02','ATP','UA'),(3,'Michael','Jackson','1991-03-03','ABCDEF','2017-03-03','ATP','DL'),(4,'Emma','Swift','1993-04-04','GIHJKL','2018-04-04','ATP','BA'),(5,'Paul','McCartney','1942-06-06','LMNOPQ','1964-06-06','ATP','LU');\nINSERT INTO \"Planes\" (Plane_ID,Registration_Number,Model_Name,Manufacturer_Name,Year_Manufactured,Capacity,Pilot_ID) VALUES (1,'N12345','Boeing 737-800','Boeing',2010,200,1),(2,'EI-DVB','Airbus A320neo','Airbus',2015,180,2),(3,'VY-BCR','Embraer E190','Embraer',2008,100,3),(4,'SE-RML','Bombardier CRJ900','Bombardier',2006,88,4),(5,'EC-IXQ','Airbus A380-800','Airbus',2012,500,5);\n",
      "question": "What's the name(s) of the airports that are east of the Prime Meridian?",
      "gold_queries": [
        "SELECT Airport_Name\r\nFROM Airports\r\nWHERE Longitude >0"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Identify Airports located to the east of the Prime Meridian.",
          "sql_queries": [
            "SELECT Airport_Name FROM Airports WHERE Longitude > 0"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Which Airports have a Longitude greater than 0?",
          "sql_queries": [
            "SELECT Airport_Name FROM Airports WHERE Longitude > 0"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Return the names of Airports with positive Longitude values.",
          "sql_queries": [
            "SELECT Airport_Name FROM Airports WHERE Longitude > 0"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "List Airports where the Longitude coordinate exceeds 0.",
          "sql_queries": [
            "SELECT Airport_Name FROM Airports WHERE Longitude > 0"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Find all Airport names east of 0 longitude.",
          "sql_queries": [
            "SELECT Airport_Name FROM Airports WHERE Longitude > 0"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 5,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 5
    },
    {
      "db_file": "data/vague/Airport/vague_2cols_airport2/vague_2cols_airport2.sqlite",
      "db_dump": "CREATE TABLE Airports(\n    Id INTEGER PRIMARY KEY AUTOINCREMENT,\n    CityId INTEGER REFERENCES Cities(Id),\n    Code CHAR(2),\n    RunwayCount INTEGER DEFAULT 1,\n    FOREIGN KEY(CityId) REFERENCES Cities(Id));\nCREATE TABLE Cities(\n    Id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Country TEXT);\nCREATE TABLE Flights(\n    FlightId INTEGER PRIMARY KEY AUTOINCREMENT,\n    DepartureAirportId INTEGER REFERENCES Airports(Id),\n    ArrivalAirportId INTEGER REFERENCES Airports(Id),\n    ScheduledDeparture TIMESTAMP,\n    ActualDeparture TIMESTAMP,\n    EstimatedArrival TIMESTAMP,\n    Status TEXT ,\n    AircraftModel TEXT);\nCREATE TABLE Runways(\n    Id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Length REAL,\n    Width REAL,\n    SurfaceType TEXT,\n    AirportId INTEGER REFERENCES Airports(Id),\n    FOREIGN KEY(AirportId) REFERENCES Airports(Id));\n\nINSERT INTO \"Airports\" (Id,CityId,Code,RunwayCount) VALUES (1,1,'JFK',3),(2,2,'LHR',2),(3,3,'CDG',2),(4,4,'HND',4),(5,5,'DXB',6);\nINSERT INTO \"Cities\" (Id,Name,Country) VALUES (1,'New York','USA'),(2,'London','UK'),(3,'Paris','France'),(4,'Tokyo','Japan'),(5,'Dubai','UAE');\nINSERT INTO \"Flights\" (FlightId,DepartureAirportId,ArrivalAirportId,ScheduledDeparture,ActualDeparture,EstimatedArrival,Status,AircraftModel) VALUES (1,1,2,'2023-03-25 12:00:00','2023-03-25 12:15:00','2023-03-25 13:45:00','On Time','Boeing 747'),(2,2,3,'2023-03-25 15:00:00','2023-03-25 15:30:00','2023-03-25 18:30:00','Delayed','Airbus A380'),(3,3,4,'2023-03-25 18:00:00','2023-03-25 18:30:00','2023-03-25 22:15:00','On Time','Boeing 787'),(4,4,5,'2023-03-25 21:00:00','2023-03-25 21:30:00','2023-03-25 23:15:00','Delayed','Boeing 777'),(5,5,1,'2023-03-26 02:00:00','2023-03-26 02:30:00','2023-03-26 04:15:00','On Time','Emirates A380');\nINSERT INTO \"Runways\" (Id,Length,Width,SurfaceType,AirportId) VALUES (1,9000.0,150.0,'Asphalt',1),(2,8000.0,170.0,'Concrete',2),(3,9500.0,200.0,'Grass',3),(4,8800.0,180.0,'Asphalt',4),(5,12000.0,220.0,'Tarmac',5);\n",
      "question": "Show the airports by city and code, including the runway data, ordered by the amount of runways.",
      "gold_queries": [
        "select cities.name, Airports.Code, Airports.RunwayCount from Airports JOIN Cities ON Cities.Id = Airports.Id order by RunwayCount"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List cities and their airports, with airport codes, runway information (length, width, surface type), sorted by number of runways.",
          "sql_queries": [
            "SELECT C.Name, A.Code, R.Length, R.Width, R.SurfaceType\nFROM Cities C\nJOIN Airports A ON C.Id = A.CityId\nJOIN Runways R ON A.Id = R.AirportId\nORDER BY A.RunwayCount"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Display the airports grouped by city and code, along with runway details (length, width, surface type), arranged in descending order of runway count.",
          "sql_queries": [
            "SELECT Cities.Name, Airports.Code, Runways.Length, Runways.Width, Runways.SurfaceType\nFROM Airports\nJOIN Cities ON Airports.CityId = Cities.Id\nJOIN Runways ON Airports.Id = Runways.AirportId\nGROUP BY Airports.CityId, Airports.Code\nORDER BY Airports.RunwayCount DESC"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve a list of airports, ordered by runway count, with associated city name and airport code. Also include runway data (length, width, surface type).",
          "sql_queries": [
            "SELECT A.Code, C.Name, A.RunwayCount, R.Length, R.Width, R.SurfaceType \nFROM Airports A \nJOIN Cities C ON A.CityId = C.Id \nJOIN Runways R ON A.Id = R.AirportId \nORDER BY A.RunwayCount"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Output airports, cities, codes, runway length, runway width, surface type, and airport ID. Order by runway count.",
          "sql_queries": [
            "SELECT T1.Name, T2.Name, T2.Code, T3.Length, T3.Width, T3.SurfaceType, T2.Id FROM Cities AS T1 JOIN Airports AS T2 ON T1.Id = T2.CityId JOIN Runways AS T3 ON T2.Id = T3.AirportId ORDER BY T2.RunwayCount"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT T1.Name, T2.Name, T2.Code, T3.Length, T3.Width, T3.SurfaceType, T2.Id FROM Cities AS T1 JOIN Airports AS T2 ON T1.Id = T2.CityId JOIN Runways AS T3 ON T2.Id = T3.AirportId ORDER BY T2.RunwayCount",
                "original_exception": "no such column: T2.Name"
              }
            ],
            "all_found": false
          }
        },
        {
          "interpretation": "Show all airports, sorted by the number of runways they have, displaying city, airport code, runway length, width, and surface type.",
          "sql_queries": [
            "SELECT c.Name, a.Code, r.Length, r.Width, r.SurfaceType\nFROM Airports a\nJOIN Cities c ON a.CityId = c.Id\nJOIN Runways r ON a.Id = r.AirportId\nORDER BY a.RunwayCount"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [
          {
            "query": "SELECT T1.Name, T2.Name, T2.Code, T3.Length, T3.Width, T3.SurfaceType, T2.Id FROM Cities AS T1 JOIN Airports AS T2 ON T1.Id = T2.CityId JOIN Runways AS T3 ON T2.Id = T3.AirportId ORDER BY T2.RunwayCount",
            "original_exception": "no such column: T2.Name"
          }
        ],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Airport/vague_2cols_airport2/vague_2cols_airport2.sqlite",
      "db_dump": "CREATE TABLE Airports(\n    Id INTEGER PRIMARY KEY AUTOINCREMENT,\n    CityId INTEGER REFERENCES Cities(Id),\n    Code CHAR(2),\n    RunwayCount INTEGER DEFAULT 1,\n    FOREIGN KEY(CityId) REFERENCES Cities(Id));\nCREATE TABLE Cities(\n    Id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Country TEXT);\nCREATE TABLE Flights(\n    FlightId INTEGER PRIMARY KEY AUTOINCREMENT,\n    DepartureAirportId INTEGER REFERENCES Airports(Id),\n    ArrivalAirportId INTEGER REFERENCES Airports(Id),\n    ScheduledDeparture TIMESTAMP,\n    ActualDeparture TIMESTAMP,\n    EstimatedArrival TIMESTAMP,\n    Status TEXT ,\n    AircraftModel TEXT);\nCREATE TABLE Runways(\n    Id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Length REAL,\n    Width REAL,\n    SurfaceType TEXT,\n    AirportId INTEGER REFERENCES Airports(Id),\n    FOREIGN KEY(AirportId) REFERENCES Airports(Id));\n\nINSERT INTO \"Airports\" (Id,CityId,Code,RunwayCount) VALUES (1,1,'JFK',3),(2,2,'LHR',2),(3,3,'CDG',2),(4,4,'HND',4),(5,5,'DXB',6);\nINSERT INTO \"Cities\" (Id,Name,Country) VALUES (1,'New York','USA'),(2,'London','UK'),(3,'Paris','France'),(4,'Tokyo','Japan'),(5,'Dubai','UAE');\nINSERT INTO \"Flights\" (FlightId,DepartureAirportId,ArrivalAirportId,ScheduledDeparture,ActualDeparture,EstimatedArrival,Status,AircraftModel) VALUES (1,1,2,'2023-03-25 12:00:00','2023-03-25 12:15:00','2023-03-25 13:45:00','On Time','Boeing 747'),(2,2,3,'2023-03-25 15:00:00','2023-03-25 15:30:00','2023-03-25 18:30:00','Delayed','Airbus A380'),(3,3,4,'2023-03-25 18:00:00','2023-03-25 18:30:00','2023-03-25 22:15:00','On Time','Boeing 787'),(4,4,5,'2023-03-25 21:00:00','2023-03-25 21:30:00','2023-03-25 23:15:00','Delayed','Boeing 777'),(5,5,1,'2023-03-26 02:00:00','2023-03-26 02:30:00','2023-03-26 04:15:00','On Time','Emirates A380');\nINSERT INTO \"Runways\" (Id,Length,Width,SurfaceType,AirportId) VALUES (1,9000.0,150.0,'Asphalt',1),(2,8000.0,170.0,'Concrete',2),(3,9500.0,200.0,'Grass',3),(4,8800.0,180.0,'Asphalt',4),(5,12000.0,220.0,'Tarmac',5);\n",
      "question": "Display the airports and their runways in order of the number of runways they have",
      "gold_queries": [
        "select cities.name, Airports.RunwayCount from Airports JOIN Cities ON Cities.Id = Airports.Id order by RunwayCount",
        "select Airports.Code, Airports.RunwayCount from Airports JOIN Cities ON Cities.Id = Airports.Id order by RunwayCount",
        "select cities.name, Airports.Code, Airports.RunwayCount from Airports JOIN Cities ON Cities.Id = Airports.Id order by RunwayCount"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Rank airports according to their runway count, displaying the airport name and number of runways for each.",
          "sql_queries": [
            "SELECT C.Name, A.RunwayCount \nFROM Airports A \nJOIN Cities C ON A.CityId = C.Id \nORDER BY A.RunwayCount DESC"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List airports and their associated runways, sorted by runway count in descending order.",
          "sql_queries": [
            "SELECT Airports.Code, Runways.Length, Runways.Width, Runways.SurfaceType \nFROM Airports \nJOIN Runways ON Airports.Id = Runways.AirportId \nORDER BY Airports.RunwayCount DESC"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Return a result set of airport identifiers, runway identifiers, and runway counts, ordered by airport runway count descending.",
          "sql_queries": [
            "SELECT T1.Id, T2.Id, T1.RunwayCount \nFROM Airports AS T1 \nJOIN Runways AS T2 ON T1.Id = T2.AirportId \nORDER BY T1.RunwayCount DESC"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Present a list of airport names and their corresponding runway counts, sorted by the number of runways.",
          "sql_queries": [
            "SELECT Cities.Name, Airports.RunwayCount FROM Airports JOIN Cities ON Airports.CityId = Cities.Id ORDER BY Airports.RunwayCount"
          ],
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Show a table with columns for airport code, city, and runway count, sorted by runway count.",
          "sql_queries": [
            "SELECT A.Code, C.Name, A.RunwayCount FROM Airports AS A JOIN Cities AS C ON A.CityId = C.Id ORDER BY A.RunwayCount"
          ],
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.6666666666666666,
        "precision": 0.4,
        "f1_score": 0.5,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Banking/vague_2cols_issuer/vague_2cols_issuer.sqlite",
      "db_dump": "CREATE TABLE Accounts (\n    AccountID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    AccountType TEXT,\n    Balance REAL ,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Bank (\n    BankName TEXT PRIMARY KEY,\n    HeadquarterLocation TEXT,\n    FoundedYear INTEGER,\n    TotalAssets REAL,\n    NumberOfBranches INTEGER,\n    WebsiteURL TEXT UNIQUE\n);\nCREATE TABLE BankingProducts (\n    ProductID INTEGER PRIMARY KEY AUTOINCREMENT,\n    BankName TEXT,\n    ProductName TEXT,\n    Description TEXT,\n    AnnualInterestRate REAL,\n    MinimumDepositAmount REAL,\n    MaximumDepositAmount REAL, `BranchName` TEXT REFERENCES `Branch`(`BranchID`),\n    FOREIGN KEY (BankName) REFERENCES Bank(BankName)\n);\nCREATE TABLE Branch (\n    BranchID INTEGER PRIMARY KEY AUTOINCREMENT,\n    BankName TEXT,\n    BranchName TEXT,\n    Address TEXT,\n    City TEXT,\n    State TEXT,\n    ZipCode TEXT,\n    FOREIGN KEY (BankName) REFERENCES Bank(BankName)\n);\nCREATE TABLE Customers (\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    Email TEXT,\n    PhoneNumber VARCHAR(15) UNIQUE\n);\nCREATE TABLE Deposits (\n    DepositID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountID INTEGER,\n    Amount REAL,\n    Date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (AccountID) REFERENCES Accounts(AccountID)\n);\nCREATE TABLE Loans (\n    LoanID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Amount REAL,\n    InterestRate REAL,\n    TermYears INTEGER,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Transactions (\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountID INTEGER,\n    Type TEXT, -- 'Deposit' or 'Withdrawal'\n    Amount REAL,\n    Date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (AccountID) REFERENCES Accounts(AccountID)\n);\n\nINSERT INTO \"Accounts\" (AccountID,CustomerID,AccountType,Balance) VALUES (1,1,'Checking',500.0),(2,2,'Savings',1000.0);\nINSERT INTO \"Bank\" (BankName,HeadquarterLocation,FoundedYear,TotalAssets,NumberOfBranches,WebsiteURL) VALUES ('Example Bank','New York',2000,1000000.0,50,'https://www.examplebank.com/');\nINSERT INTO \"BankingProducts\" (ProductID,BankName,ProductName,Description,AnnualInterestRate,MinimumDepositAmount,MaximumDepositAmount,BranchName) VALUES (1,'Example Bank','High-Yield Savings','A high interest rate savings account with no monthly fees.',1.0,1000.0,NULL,'1'),(2,'Example Bank','CD Special','Certificate of deposit offering a fixed annual percentage yield.',2.5,1000.0,1000000.0,'2');\nINSERT INTO \"Branch\" (BranchID,BankName,BranchName,Address,City,State,ZipCode) VALUES (1,'Example Bank','Main Branch','123 Main St','New York','NY','10001'),(2,'Example Bank','East Side Branch','456 East Ave','New York','NY','10010');\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,Email,PhoneNumber) VALUES (1,'John','Doe','john.doe@example.com','+1234567890'),(2,'Jane','Smith','jane.smith@example.com','+0987654321');\nINSERT INTO \"Deposits\" (DepositID,AccountID,Amount,Date) VALUES (1,1,500.0,'2024-02-19 14:31:33'),(2,2,1000.0,'2024-02-19 14:31:33');\nINSERT INTO \"Loans\" (LoanID,CustomerID,Amount,InterestRate,TermYears) VALUES (1,1,15000.0,6.0,5),(2,2,10000.0,5.5,3);\nINSERT INTO \"Transactions\" (TransactionID,AccountID,Type,Amount,Date) VALUES (1,1,'Deposit',500.0,'2024-02-19 14:31:33'),(2,2,'Withdrawal',200.0,'2024-02-19 14:31:33');\n",
      "question": "Which bank and branch issued CD Special?",
      "gold_queries": [
        "SELECT Bank.BankName, Branch.BranchName FROM Branch JOIN BankingProducts ON BankingProducts.BranchName = Branch.BranchID JOIN Bank ON BankingProducts.BankName = Bank.BankName WHERE ProductName = 'CD Special'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Where was the \"CD Special\" product offered?",
          "sql_queries": [
            "SELECT BranchName FROM BankingProducts WHERE ProductName = 'CD Special'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Which bank offers a product called \"CD Special\"?",
          "sql_queries": [
            "SELECT BankName FROM BankingProducts WHERE ProductName = 'CD Special'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Which branch is associated with the \"CD Special\" product?",
          "sql_queries": [
            "SELECT BranchName FROM BankingProducts WHERE ProductName = 'CD Special'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Which bank and branch physically sold the \"CD Special\" product?",
          "sql_queries": [
            "SELECT B.BankName, BR.BranchName FROM BankingProducts AS P JOIN Branch AS BR ON P.BranchName = BR.BranchID JOIN Bank AS B ON P.BankName = B.BankName WHERE P.ProductName = 'CD Special'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 4,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Banking/vague_2cols_issuer/vague_2cols_issuer.sqlite",
      "db_dump": "CREATE TABLE Accounts (\n    AccountID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    AccountType TEXT,\n    Balance REAL ,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Bank (\n    BankName TEXT PRIMARY KEY,\n    HeadquarterLocation TEXT,\n    FoundedYear INTEGER,\n    TotalAssets REAL,\n    NumberOfBranches INTEGER,\n    WebsiteURL TEXT UNIQUE\n);\nCREATE TABLE BankingProducts (\n    ProductID INTEGER PRIMARY KEY AUTOINCREMENT,\n    BankName TEXT,\n    ProductName TEXT,\n    Description TEXT,\n    AnnualInterestRate REAL,\n    MinimumDepositAmount REAL,\n    MaximumDepositAmount REAL, `BranchName` TEXT REFERENCES `Branch`(`BranchID`),\n    FOREIGN KEY (BankName) REFERENCES Bank(BankName)\n);\nCREATE TABLE Branch (\n    BranchID INTEGER PRIMARY KEY AUTOINCREMENT,\n    BankName TEXT,\n    BranchName TEXT,\n    Address TEXT,\n    City TEXT,\n    State TEXT,\n    ZipCode TEXT,\n    FOREIGN KEY (BankName) REFERENCES Bank(BankName)\n);\nCREATE TABLE Customers (\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    Email TEXT,\n    PhoneNumber VARCHAR(15) UNIQUE\n);\nCREATE TABLE Deposits (\n    DepositID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountID INTEGER,\n    Amount REAL,\n    Date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (AccountID) REFERENCES Accounts(AccountID)\n);\nCREATE TABLE Loans (\n    LoanID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Amount REAL,\n    InterestRate REAL,\n    TermYears INTEGER,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Transactions (\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountID INTEGER,\n    Type TEXT, -- 'Deposit' or 'Withdrawal'\n    Amount REAL,\n    Date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (AccountID) REFERENCES Accounts(AccountID)\n);\n\nINSERT INTO \"Accounts\" (AccountID,CustomerID,AccountType,Balance) VALUES (1,1,'Checking',500.0),(2,2,'Savings',1000.0);\nINSERT INTO \"Bank\" (BankName,HeadquarterLocation,FoundedYear,TotalAssets,NumberOfBranches,WebsiteURL) VALUES ('Example Bank','New York',2000,1000000.0,50,'https://www.examplebank.com/');\nINSERT INTO \"BankingProducts\" (ProductID,BankName,ProductName,Description,AnnualInterestRate,MinimumDepositAmount,MaximumDepositAmount,BranchName) VALUES (1,'Example Bank','High-Yield Savings','A high interest rate savings account with no monthly fees.',1.0,1000.0,NULL,'1'),(2,'Example Bank','CD Special','Certificate of deposit offering a fixed annual percentage yield.',2.5,1000.0,1000000.0,'2');\nINSERT INTO \"Branch\" (BranchID,BankName,BranchName,Address,City,State,ZipCode) VALUES (1,'Example Bank','Main Branch','123 Main St','New York','NY','10001'),(2,'Example Bank','East Side Branch','456 East Ave','New York','NY','10010');\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,Email,PhoneNumber) VALUES (1,'John','Doe','john.doe@example.com','+1234567890'),(2,'Jane','Smith','jane.smith@example.com','+0987654321');\nINSERT INTO \"Deposits\" (DepositID,AccountID,Amount,Date) VALUES (1,1,500.0,'2024-02-19 14:31:33'),(2,2,1000.0,'2024-02-19 14:31:33');\nINSERT INTO \"Loans\" (LoanID,CustomerID,Amount,InterestRate,TermYears) VALUES (1,1,15000.0,6.0,5),(2,2,10000.0,5.5,3);\nINSERT INTO \"Transactions\" (TransactionID,AccountID,Type,Amount,Date) VALUES (1,1,'Deposit',500.0,'2024-02-19 14:31:33'),(2,2,'Withdrawal',200.0,'2024-02-19 14:31:33');\n",
      "question": "Which bank and their branches issue products where I can invest more than 50k?",
      "gold_queries": [
        "SELECT Bank.BankName, Branch.BranchName FROM Branch JOIN BankingProducts ON BankingProducts.BranchName = Branch.BranchID JOIN Bank ON BankingProducts.BankName = Bank.BankName where MaximumDepositAmount > 49999"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Which banks and branches offer products allowing deposits exceeding 50000?",
          "sql_queries": [
            "SELECT BankName, BranchName FROM BankingProducts WHERE MaximumDepositAmount > 50000"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Find all banks and branches with products allowing deposits in excess of 50,000.",
          "sql_queries": [
            "SELECT B.BankName, Br.BranchName\nFROM BankingProducts P\nJOIN Bank B ON P.BankName = B.BankName\nJOIN Branch Br ON P.BranchName = Br.BranchID\nWHERE P.MaximumDepositAmount > 50000"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "List the banks and branches that support investments beyond 50,000 in their products.",
          "sql_queries": [
            "SELECT DISTINCT BankName, BranchName\nFROM BankingProducts\nWHERE MaximumDepositAmount > 50000 OR MaximumDepositAmount IS NULL"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "What banks and branches offer products with a maximum deposit amount greater than 50000?",
          "sql_queries": [
            "SELECT BankName, BranchName FROM BankingProducts WHERE MaximumDepositAmount > 50000"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Identify banks and their branches that provide investment products with no upper deposit limit exceeding 50000.",
          "sql_queries": [
            "SELECT BP.BankName, BP.BranchName \nFROM BankingProducts BP \nWHERE BP.MinimumDepositAmount <= 50000 AND BP.MaximumDepositAmount IS NULL"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 5,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Banking/vague_2cols_issuer/vague_2cols_issuer.sqlite",
      "db_dump": "CREATE TABLE Accounts (\n    AccountID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    AccountType TEXT,\n    Balance REAL ,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Bank (\n    BankName TEXT PRIMARY KEY,\n    HeadquarterLocation TEXT,\n    FoundedYear INTEGER,\n    TotalAssets REAL,\n    NumberOfBranches INTEGER,\n    WebsiteURL TEXT UNIQUE\n);\nCREATE TABLE BankingProducts (\n    ProductID INTEGER PRIMARY KEY AUTOINCREMENT,\n    BankName TEXT,\n    ProductName TEXT,\n    Description TEXT,\n    AnnualInterestRate REAL,\n    MinimumDepositAmount REAL,\n    MaximumDepositAmount REAL, `BranchName` TEXT REFERENCES `Branch`(`BranchID`),\n    FOREIGN KEY (BankName) REFERENCES Bank(BankName)\n);\nCREATE TABLE Branch (\n    BranchID INTEGER PRIMARY KEY AUTOINCREMENT,\n    BankName TEXT,\n    BranchName TEXT,\n    Address TEXT,\n    City TEXT,\n    State TEXT,\n    ZipCode TEXT,\n    FOREIGN KEY (BankName) REFERENCES Bank(BankName)\n);\nCREATE TABLE Customers (\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    Email TEXT,\n    PhoneNumber VARCHAR(15) UNIQUE\n);\nCREATE TABLE Deposits (\n    DepositID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountID INTEGER,\n    Amount REAL,\n    Date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (AccountID) REFERENCES Accounts(AccountID)\n);\nCREATE TABLE Loans (\n    LoanID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Amount REAL,\n    InterestRate REAL,\n    TermYears INTEGER,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Transactions (\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountID INTEGER,\n    Type TEXT, -- 'Deposit' or 'Withdrawal'\n    Amount REAL,\n    Date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (AccountID) REFERENCES Accounts(AccountID)\n);\n\nINSERT INTO \"Accounts\" (AccountID,CustomerID,AccountType,Balance) VALUES (1,1,'Checking',500.0),(2,2,'Savings',1000.0);\nINSERT INTO \"Bank\" (BankName,HeadquarterLocation,FoundedYear,TotalAssets,NumberOfBranches,WebsiteURL) VALUES ('Example Bank','New York',2000,1000000.0,50,'https://www.examplebank.com/');\nINSERT INTO \"BankingProducts\" (ProductID,BankName,ProductName,Description,AnnualInterestRate,MinimumDepositAmount,MaximumDepositAmount,BranchName) VALUES (1,'Example Bank','High-Yield Savings','A high interest rate savings account with no monthly fees.',1.0,1000.0,NULL,'1'),(2,'Example Bank','CD Special','Certificate of deposit offering a fixed annual percentage yield.',2.5,1000.0,1000000.0,'2');\nINSERT INTO \"Branch\" (BranchID,BankName,BranchName,Address,City,State,ZipCode) VALUES (1,'Example Bank','Main Branch','123 Main St','New York','NY','10001'),(2,'Example Bank','East Side Branch','456 East Ave','New York','NY','10010');\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,Email,PhoneNumber) VALUES (1,'John','Doe','john.doe@example.com','+1234567890'),(2,'Jane','Smith','jane.smith@example.com','+0987654321');\nINSERT INTO \"Deposits\" (DepositID,AccountID,Amount,Date) VALUES (1,1,500.0,'2024-02-19 14:31:33'),(2,2,1000.0,'2024-02-19 14:31:33');\nINSERT INTO \"Loans\" (LoanID,CustomerID,Amount,InterestRate,TermYears) VALUES (1,1,15000.0,6.0,5),(2,2,10000.0,5.5,3);\nINSERT INTO \"Transactions\" (TransactionID,AccountID,Type,Amount,Date) VALUES (1,1,'Deposit',500.0,'2024-02-19 14:31:33'),(2,2,'Withdrawal',200.0,'2024-02-19 14:31:33');\n",
      "question": "Who issued products where I can invest more than 50k",
      "gold_queries": [
        "SELECT Branch.BranchName FROM Branch JOIN BankingProducts ON BankingProducts.BranchName = Branch.BranchID where MaximumDepositAmount > 49999",
        "SELECT Bank.BankName FROM Bank JOIN BankingProducts ON BankingProducts.BankName = Bank.BankName  where MaximumDepositAmount > 49999",
        "SELECT Bank.BankName, Branch.BranchName FROM Branch JOIN BankingProducts ON BankingProducts.BranchName = Branch.BranchID JOIN Bank ON BankingProducts.BankName = Bank.BankName where MaximumDepositAmount > 49999"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Which banks offer products with a maximum deposit amount greater than 50000?",
          "sql_queries": [
            "SELECT DISTINCT BankName FROM BankingProducts WHERE MaximumDepositAmount > 50000"
          ],
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Identify banks that provide products allowing deposits exceeding 50000.",
          "sql_queries": [
            "SELECT DISTINCT BankName FROM BankingProducts WHERE MaximumDepositAmount > 50000"
          ],
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.3333333333333333,
        "precision": 1.0,
        "f1_score": 0.5,
        "num_queries": 2,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Banking/vague_2cols_issuer/vague_2cols_issuer.sqlite",
      "db_dump": "CREATE TABLE Accounts (\n    AccountID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    AccountType TEXT,\n    Balance REAL ,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Bank (\n    BankName TEXT PRIMARY KEY,\n    HeadquarterLocation TEXT,\n    FoundedYear INTEGER,\n    TotalAssets REAL,\n    NumberOfBranches INTEGER,\n    WebsiteURL TEXT UNIQUE\n);\nCREATE TABLE BankingProducts (\n    ProductID INTEGER PRIMARY KEY AUTOINCREMENT,\n    BankName TEXT,\n    ProductName TEXT,\n    Description TEXT,\n    AnnualInterestRate REAL,\n    MinimumDepositAmount REAL,\n    MaximumDepositAmount REAL, `BranchName` TEXT REFERENCES `Branch`(`BranchID`),\n    FOREIGN KEY (BankName) REFERENCES Bank(BankName)\n);\nCREATE TABLE Branch (\n    BranchID INTEGER PRIMARY KEY AUTOINCREMENT,\n    BankName TEXT,\n    BranchName TEXT,\n    Address TEXT,\n    City TEXT,\n    State TEXT,\n    ZipCode TEXT,\n    FOREIGN KEY (BankName) REFERENCES Bank(BankName)\n);\nCREATE TABLE Customers (\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    Email TEXT,\n    PhoneNumber VARCHAR(15) UNIQUE\n);\nCREATE TABLE Deposits (\n    DepositID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountID INTEGER,\n    Amount REAL,\n    Date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (AccountID) REFERENCES Accounts(AccountID)\n);\nCREATE TABLE Loans (\n    LoanID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Amount REAL,\n    InterestRate REAL,\n    TermYears INTEGER,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Transactions (\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountID INTEGER,\n    Type TEXT, -- 'Deposit' or 'Withdrawal'\n    Amount REAL,\n    Date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (AccountID) REFERENCES Accounts(AccountID)\n);\n\nINSERT INTO \"Accounts\" (AccountID,CustomerID,AccountType,Balance) VALUES (1,1,'Checking',500.0),(2,2,'Savings',1000.0);\nINSERT INTO \"Bank\" (BankName,HeadquarterLocation,FoundedYear,TotalAssets,NumberOfBranches,WebsiteURL) VALUES ('Example Bank','New York',2000,1000000.0,50,'https://www.examplebank.com/');\nINSERT INTO \"BankingProducts\" (ProductID,BankName,ProductName,Description,AnnualInterestRate,MinimumDepositAmount,MaximumDepositAmount,BranchName) VALUES (1,'Example Bank','High-Yield Savings','A high interest rate savings account with no monthly fees.',1.0,1000.0,NULL,'1'),(2,'Example Bank','CD Special','Certificate of deposit offering a fixed annual percentage yield.',2.5,1000.0,1000000.0,'2');\nINSERT INTO \"Branch\" (BranchID,BankName,BranchName,Address,City,State,ZipCode) VALUES (1,'Example Bank','Main Branch','123 Main St','New York','NY','10001'),(2,'Example Bank','East Side Branch','456 East Ave','New York','NY','10010');\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,Email,PhoneNumber) VALUES (1,'John','Doe','john.doe@example.com','+1234567890'),(2,'Jane','Smith','jane.smith@example.com','+0987654321');\nINSERT INTO \"Deposits\" (DepositID,AccountID,Amount,Date) VALUES (1,1,500.0,'2024-02-19 14:31:33'),(2,2,1000.0,'2024-02-19 14:31:33');\nINSERT INTO \"Loans\" (LoanID,CustomerID,Amount,InterestRate,TermYears) VALUES (1,1,15000.0,6.0,5),(2,2,10000.0,5.5,3);\nINSERT INTO \"Transactions\" (TransactionID,AccountID,Type,Amount,Date) VALUES (1,1,'Deposit',500.0,'2024-02-19 14:31:33'),(2,2,'Withdrawal',200.0,'2024-02-19 14:31:33');\n",
      "question": "Which bank issues products where I can invest more than 50k?",
      "gold_queries": [
        "SELECT Bank.BankName FROM Bank JOIN BankingProducts ON BankingProducts.BankName = Bank.BankName  where MaximumDepositAmount > 49999"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Find banks whose BankingProducts accommodate deposits of over 50000.",
          "sql_queries": [
            "SELECT DISTINCT BankName FROM BankingProducts WHERE MinimumDepositAmount > 50000"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Which banks offer BankingProducts with a MaximumDepositAmount greater than 50000?",
          "sql_queries": [
            "SELECT DISTINCT BankName FROM BankingProducts WHERE MaximumDepositAmount > 50000"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Which banks have BankingProducts permitting deposits exceeding 50000?",
          "sql_queries": [
            "SELECT DISTINCT BankName FROM BankingProducts WHERE MaximumDepositAmount > 50000"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Identify banks issuing products allowing investments surpassing 50000.",
          "sql_queries": [
            "SELECT DISTINCT BankName FROM BankingProducts WHERE MaximumDepositAmount > 50000"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 4,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/vague/Banking/vague_2cols_issuer/vague_2cols_issuer.sqlite",
      "db_dump": "CREATE TABLE Accounts (\n    AccountID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    AccountType TEXT,\n    Balance REAL ,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Bank (\n    BankName TEXT PRIMARY KEY,\n    HeadquarterLocation TEXT,\n    FoundedYear INTEGER,\n    TotalAssets REAL,\n    NumberOfBranches INTEGER,\n    WebsiteURL TEXT UNIQUE\n);\nCREATE TABLE BankingProducts (\n    ProductID INTEGER PRIMARY KEY AUTOINCREMENT,\n    BankName TEXT,\n    ProductName TEXT,\n    Description TEXT,\n    AnnualInterestRate REAL,\n    MinimumDepositAmount REAL,\n    MaximumDepositAmount REAL, `BranchName` TEXT REFERENCES `Branch`(`BranchID`),\n    FOREIGN KEY (BankName) REFERENCES Bank(BankName)\n);\nCREATE TABLE Branch (\n    BranchID INTEGER PRIMARY KEY AUTOINCREMENT,\n    BankName TEXT,\n    BranchName TEXT,\n    Address TEXT,\n    City TEXT,\n    State TEXT,\n    ZipCode TEXT,\n    FOREIGN KEY (BankName) REFERENCES Bank(BankName)\n);\nCREATE TABLE Customers (\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    Email TEXT,\n    PhoneNumber VARCHAR(15) UNIQUE\n);\nCREATE TABLE Deposits (\n    DepositID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountID INTEGER,\n    Amount REAL,\n    Date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (AccountID) REFERENCES Accounts(AccountID)\n);\nCREATE TABLE Loans (\n    LoanID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Amount REAL,\n    InterestRate REAL,\n    TermYears INTEGER,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Transactions (\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountID INTEGER,\n    Type TEXT, -- 'Deposit' or 'Withdrawal'\n    Amount REAL,\n    Date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (AccountID) REFERENCES Accounts(AccountID)\n);\n\nINSERT INTO \"Accounts\" (AccountID,CustomerID,AccountType,Balance) VALUES (1,1,'Checking',500.0),(2,2,'Savings',1000.0);\nINSERT INTO \"Bank\" (BankName,HeadquarterLocation,FoundedYear,TotalAssets,NumberOfBranches,WebsiteURL) VALUES ('Example Bank','New York',2000,1000000.0,50,'https://www.examplebank.com/');\nINSERT INTO \"BankingProducts\" (ProductID,BankName,ProductName,Description,AnnualInterestRate,MinimumDepositAmount,MaximumDepositAmount,BranchName) VALUES (1,'Example Bank','High-Yield Savings','A high interest rate savings account with no monthly fees.',1.0,1000.0,NULL,'1'),(2,'Example Bank','CD Special','Certificate of deposit offering a fixed annual percentage yield.',2.5,1000.0,1000000.0,'2');\nINSERT INTO \"Branch\" (BranchID,BankName,BranchName,Address,City,State,ZipCode) VALUES (1,'Example Bank','Main Branch','123 Main St','New York','NY','10001'),(2,'Example Bank','East Side Branch','456 East Ave','New York','NY','10010');\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,Email,PhoneNumber) VALUES (1,'John','Doe','john.doe@example.com','+1234567890'),(2,'Jane','Smith','jane.smith@example.com','+0987654321');\nINSERT INTO \"Deposits\" (DepositID,AccountID,Amount,Date) VALUES (1,1,500.0,'2024-02-19 14:31:33'),(2,2,1000.0,'2024-02-19 14:31:33');\nINSERT INTO \"Loans\" (LoanID,CustomerID,Amount,InterestRate,TermYears) VALUES (1,1,15000.0,6.0,5),(2,2,10000.0,5.5,3);\nINSERT INTO \"Transactions\" (TransactionID,AccountID,Type,Amount,Date) VALUES (1,1,'Deposit',500.0,'2024-02-19 14:31:33'),(2,2,'Withdrawal',200.0,'2024-02-19 14:31:33');\n",
      "question": "Who issued CD Special?",
      "gold_queries": [
        "SELECT Branch.BranchName FROM Branch JOIN BankingProducts ON BankingProducts.BranchName = Branch.BranchID WHERE ProductName = 'CD Special'",
        "SELECT Bank.BankName FROM Bank JOIN BankingProducts ON BankingProducts.BankName = Bank.BankName WHERE ProductName = 'CD Special'",
        "SELECT Bank.BankName, Branch.BranchName FROM Branch JOIN BankingProducts ON BankingProducts.BranchName = Branch.BranchID JOIN Bank ON BankingProducts.BankName = Bank.BankName WHERE ProductName = 'CD Special'"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Example Bank",
          "sql_queries": [
            "SELECT TotalAssets FROM Bank WHERE BankName = 'Example Bank'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Banking/vague_2cols_issuer/vague_2cols_issuer.sqlite",
      "db_dump": "CREATE TABLE Accounts (\n    AccountID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    AccountType TEXT,\n    Balance REAL ,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Bank (\n    BankName TEXT PRIMARY KEY,\n    HeadquarterLocation TEXT,\n    FoundedYear INTEGER,\n    TotalAssets REAL,\n    NumberOfBranches INTEGER,\n    WebsiteURL TEXT UNIQUE\n);\nCREATE TABLE BankingProducts (\n    ProductID INTEGER PRIMARY KEY AUTOINCREMENT,\n    BankName TEXT,\n    ProductName TEXT,\n    Description TEXT,\n    AnnualInterestRate REAL,\n    MinimumDepositAmount REAL,\n    MaximumDepositAmount REAL, `BranchName` TEXT REFERENCES `Branch`(`BranchID`),\n    FOREIGN KEY (BankName) REFERENCES Bank(BankName)\n);\nCREATE TABLE Branch (\n    BranchID INTEGER PRIMARY KEY AUTOINCREMENT,\n    BankName TEXT,\n    BranchName TEXT,\n    Address TEXT,\n    City TEXT,\n    State TEXT,\n    ZipCode TEXT,\n    FOREIGN KEY (BankName) REFERENCES Bank(BankName)\n);\nCREATE TABLE Customers (\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    Email TEXT,\n    PhoneNumber VARCHAR(15) UNIQUE\n);\nCREATE TABLE Deposits (\n    DepositID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountID INTEGER,\n    Amount REAL,\n    Date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (AccountID) REFERENCES Accounts(AccountID)\n);\nCREATE TABLE Loans (\n    LoanID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Amount REAL,\n    InterestRate REAL,\n    TermYears INTEGER,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Transactions (\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountID INTEGER,\n    Type TEXT, -- 'Deposit' or 'Withdrawal'\n    Amount REAL,\n    Date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (AccountID) REFERENCES Accounts(AccountID)\n);\n\nINSERT INTO \"Accounts\" (AccountID,CustomerID,AccountType,Balance) VALUES (1,1,'Checking',500.0),(2,2,'Savings',1000.0);\nINSERT INTO \"Bank\" (BankName,HeadquarterLocation,FoundedYear,TotalAssets,NumberOfBranches,WebsiteURL) VALUES ('Example Bank','New York',2000,1000000.0,50,'https://www.examplebank.com/');\nINSERT INTO \"BankingProducts\" (ProductID,BankName,ProductName,Description,AnnualInterestRate,MinimumDepositAmount,MaximumDepositAmount,BranchName) VALUES (1,'Example Bank','High-Yield Savings','A high interest rate savings account with no monthly fees.',1.0,1000.0,NULL,'1'),(2,'Example Bank','CD Special','Certificate of deposit offering a fixed annual percentage yield.',2.5,1000.0,1000000.0,'2');\nINSERT INTO \"Branch\" (BranchID,BankName,BranchName,Address,City,State,ZipCode) VALUES (1,'Example Bank','Main Branch','123 Main St','New York','NY','10001'),(2,'Example Bank','East Side Branch','456 East Ave','New York','NY','10010');\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,Email,PhoneNumber) VALUES (1,'John','Doe','john.doe@example.com','+1234567890'),(2,'Jane','Smith','jane.smith@example.com','+0987654321');\nINSERT INTO \"Deposits\" (DepositID,AccountID,Amount,Date) VALUES (1,1,500.0,'2024-02-19 14:31:33'),(2,2,1000.0,'2024-02-19 14:31:33');\nINSERT INTO \"Loans\" (LoanID,CustomerID,Amount,InterestRate,TermYears) VALUES (1,1,15000.0,6.0,5),(2,2,10000.0,5.5,3);\nINSERT INTO \"Transactions\" (TransactionID,AccountID,Type,Amount,Date) VALUES (1,1,'Deposit',500.0,'2024-02-19 14:31:33'),(2,2,'Withdrawal',200.0,'2024-02-19 14:31:33');\n",
      "question": "Which branches issues products where I can invest more than 50k?",
      "gold_queries": [
        "SELECT Branch.BranchName FROM Branch JOIN BankingProducts ON BankingProducts.BranchName = Branch.BranchID where MaximumDepositAmount > 49999"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Find branches associated with products allowing deposits greater than 50000.",
          "sql_queries": [
            "SELECT DISTINCT BranchName FROM BankingProducts WHERE MinimumDepositAmount > 50000"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Which branches have BankingProducts allowing deposit amounts exceeding 50000?",
          "sql_queries": [
            "SELECT DISTINCT BranchName FROM BankingProducts WHERE MinimumDepositAmount > 50000"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List branch names that offer products permitting investments over 50k.",
          "sql_queries": [
            "SELECT DISTINCT BranchName FROM BankingProducts WHERE MaximumDepositAmount > 50000"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Which branches offer BankingProducts with a MaximumDepositAmount greater than 50000?",
          "sql_queries": [
            "SELECT DISTINCT B.BranchName\nFROM BankingProducts BP\nJOIN Branch B ON BP.BranchName = B.BranchID\nWHERE BP.MaximumDepositAmount > 50000"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 4,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Banking/vague_2cols_issuer/vague_2cols_issuer.sqlite",
      "db_dump": "CREATE TABLE Accounts (\n    AccountID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    AccountType TEXT,\n    Balance REAL ,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Bank (\n    BankName TEXT PRIMARY KEY,\n    HeadquarterLocation TEXT,\n    FoundedYear INTEGER,\n    TotalAssets REAL,\n    NumberOfBranches INTEGER,\n    WebsiteURL TEXT UNIQUE\n);\nCREATE TABLE BankingProducts (\n    ProductID INTEGER PRIMARY KEY AUTOINCREMENT,\n    BankName TEXT,\n    ProductName TEXT,\n    Description TEXT,\n    AnnualInterestRate REAL,\n    MinimumDepositAmount REAL,\n    MaximumDepositAmount REAL, `BranchName` TEXT REFERENCES `Branch`(`BranchID`),\n    FOREIGN KEY (BankName) REFERENCES Bank(BankName)\n);\nCREATE TABLE Branch (\n    BranchID INTEGER PRIMARY KEY AUTOINCREMENT,\n    BankName TEXT,\n    BranchName TEXT,\n    Address TEXT,\n    City TEXT,\n    State TEXT,\n    ZipCode TEXT,\n    FOREIGN KEY (BankName) REFERENCES Bank(BankName)\n);\nCREATE TABLE Customers (\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    Email TEXT,\n    PhoneNumber VARCHAR(15) UNIQUE\n);\nCREATE TABLE Deposits (\n    DepositID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountID INTEGER,\n    Amount REAL,\n    Date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (AccountID) REFERENCES Accounts(AccountID)\n);\nCREATE TABLE Loans (\n    LoanID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Amount REAL,\n    InterestRate REAL,\n    TermYears INTEGER,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Transactions (\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountID INTEGER,\n    Type TEXT, -- 'Deposit' or 'Withdrawal'\n    Amount REAL,\n    Date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (AccountID) REFERENCES Accounts(AccountID)\n);\n\nINSERT INTO \"Accounts\" (AccountID,CustomerID,AccountType,Balance) VALUES (1,1,'Checking',500.0),(2,2,'Savings',1000.0);\nINSERT INTO \"Bank\" (BankName,HeadquarterLocation,FoundedYear,TotalAssets,NumberOfBranches,WebsiteURL) VALUES ('Example Bank','New York',2000,1000000.0,50,'https://www.examplebank.com/');\nINSERT INTO \"BankingProducts\" (ProductID,BankName,ProductName,Description,AnnualInterestRate,MinimumDepositAmount,MaximumDepositAmount,BranchName) VALUES (1,'Example Bank','High-Yield Savings','A high interest rate savings account with no monthly fees.',1.0,1000.0,NULL,'1'),(2,'Example Bank','CD Special','Certificate of deposit offering a fixed annual percentage yield.',2.5,1000.0,1000000.0,'2');\nINSERT INTO \"Branch\" (BranchID,BankName,BranchName,Address,City,State,ZipCode) VALUES (1,'Example Bank','Main Branch','123 Main St','New York','NY','10001'),(2,'Example Bank','East Side Branch','456 East Ave','New York','NY','10010');\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,Email,PhoneNumber) VALUES (1,'John','Doe','john.doe@example.com','+1234567890'),(2,'Jane','Smith','jane.smith@example.com','+0987654321');\nINSERT INTO \"Deposits\" (DepositID,AccountID,Amount,Date) VALUES (1,1,500.0,'2024-02-19 14:31:33'),(2,2,1000.0,'2024-02-19 14:31:33');\nINSERT INTO \"Loans\" (LoanID,CustomerID,Amount,InterestRate,TermYears) VALUES (1,1,15000.0,6.0,5),(2,2,10000.0,5.5,3);\nINSERT INTO \"Transactions\" (TransactionID,AccountID,Type,Amount,Date) VALUES (1,1,'Deposit',500.0,'2024-02-19 14:31:33'),(2,2,'Withdrawal',200.0,'2024-02-19 14:31:33');\n",
      "question": "Which bank issued CD Special?",
      "gold_queries": [
        "SELECT Bank.BankName FROM Bank JOIN BankingProducts ON BankingProducts.BankName = Bank.BankName WHERE ProductName = 'CD Special'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What bank is responsible for the 'CD Special' product?",
          "sql_queries": [
            "SELECT BankName FROM BankingProducts WHERE ProductName = 'CD Special'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Name the bank offering a banking product called 'CD Special'.",
          "sql_queries": [
            "SELECT BankName FROM BankingProducts WHERE ProductName = 'CD Special'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Which bank's name is associated with the BankingProducts record having ProductName 'CD Special'?",
          "sql_queries": [
            "SELECT BankName FROM BankingProducts WHERE ProductName = 'CD Special'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 3,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/vague/Banking/vague_2cols_issuer/vague_2cols_issuer.sqlite",
      "db_dump": "CREATE TABLE Accounts (\n    AccountID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    AccountType TEXT,\n    Balance REAL ,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Bank (\n    BankName TEXT PRIMARY KEY,\n    HeadquarterLocation TEXT,\n    FoundedYear INTEGER,\n    TotalAssets REAL,\n    NumberOfBranches INTEGER,\n    WebsiteURL TEXT UNIQUE\n);\nCREATE TABLE BankingProducts (\n    ProductID INTEGER PRIMARY KEY AUTOINCREMENT,\n    BankName TEXT,\n    ProductName TEXT,\n    Description TEXT,\n    AnnualInterestRate REAL,\n    MinimumDepositAmount REAL,\n    MaximumDepositAmount REAL, `BranchName` TEXT REFERENCES `Branch`(`BranchID`),\n    FOREIGN KEY (BankName) REFERENCES Bank(BankName)\n);\nCREATE TABLE Branch (\n    BranchID INTEGER PRIMARY KEY AUTOINCREMENT,\n    BankName TEXT,\n    BranchName TEXT,\n    Address TEXT,\n    City TEXT,\n    State TEXT,\n    ZipCode TEXT,\n    FOREIGN KEY (BankName) REFERENCES Bank(BankName)\n);\nCREATE TABLE Customers (\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    Email TEXT,\n    PhoneNumber VARCHAR(15) UNIQUE\n);\nCREATE TABLE Deposits (\n    DepositID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountID INTEGER,\n    Amount REAL,\n    Date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (AccountID) REFERENCES Accounts(AccountID)\n);\nCREATE TABLE Loans (\n    LoanID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Amount REAL,\n    InterestRate REAL,\n    TermYears INTEGER,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Transactions (\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountID INTEGER,\n    Type TEXT, -- 'Deposit' or 'Withdrawal'\n    Amount REAL,\n    Date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (AccountID) REFERENCES Accounts(AccountID)\n);\n\nINSERT INTO \"Accounts\" (AccountID,CustomerID,AccountType,Balance) VALUES (1,1,'Checking',500.0),(2,2,'Savings',1000.0);\nINSERT INTO \"Bank\" (BankName,HeadquarterLocation,FoundedYear,TotalAssets,NumberOfBranches,WebsiteURL) VALUES ('Example Bank','New York',2000,1000000.0,50,'https://www.examplebank.com/');\nINSERT INTO \"BankingProducts\" (ProductID,BankName,ProductName,Description,AnnualInterestRate,MinimumDepositAmount,MaximumDepositAmount,BranchName) VALUES (1,'Example Bank','High-Yield Savings','A high interest rate savings account with no monthly fees.',1.0,1000.0,NULL,'1'),(2,'Example Bank','CD Special','Certificate of deposit offering a fixed annual percentage yield.',2.5,1000.0,1000000.0,'2');\nINSERT INTO \"Branch\" (BranchID,BankName,BranchName,Address,City,State,ZipCode) VALUES (1,'Example Bank','Main Branch','123 Main St','New York','NY','10001'),(2,'Example Bank','East Side Branch','456 East Ave','New York','NY','10010');\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,Email,PhoneNumber) VALUES (1,'John','Doe','john.doe@example.com','+1234567890'),(2,'Jane','Smith','jane.smith@example.com','+0987654321');\nINSERT INTO \"Deposits\" (DepositID,AccountID,Amount,Date) VALUES (1,1,500.0,'2024-02-19 14:31:33'),(2,2,1000.0,'2024-02-19 14:31:33');\nINSERT INTO \"Loans\" (LoanID,CustomerID,Amount,InterestRate,TermYears) VALUES (1,1,15000.0,6.0,5),(2,2,10000.0,5.5,3);\nINSERT INTO \"Transactions\" (TransactionID,AccountID,Type,Amount,Date) VALUES (1,1,'Deposit',500.0,'2024-02-19 14:31:33'),(2,2,'Withdrawal',200.0,'2024-02-19 14:31:33');\n",
      "question": "Which branch issued CD Special?",
      "gold_queries": [
        "SELECT Branch.BranchName FROM Branch JOIN BankingProducts ON BankingProducts.BranchName = Branch.BranchID WHERE ProductName = 'CD Special'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Which branch (\"2\") issued the CD Special product from Example Bank?",
          "sql_queries": [
            "SELECT BranchName FROM BankingProducts WHERE BankName = 'Example Bank' AND ProductName = 'CD Special' AND BranchName = '2'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Which branch of Example Bank issued the CD Special product?",
          "sql_queries": [
            "SELECT BranchName FROM BankingProducts WHERE ProductName = 'CD Special' AND BankName = 'Example Bank'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Which branch with the name \"East Side Branch\" issued the CD Special product?",
          "sql_queries": [
            "SELECT BranchName FROM Branch WHERE BranchID = (SELECT BranchName FROM BankingProducts WHERE ProductName = 'CD Special' AND BranchName = 'East Side Branch')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Which branch (\"1\") issued the CD Special product from Example Bank?",
          "sql_queries": [
            "SELECT BranchName FROM BankingProducts WHERE ProductName = 'CD Special' AND BankName = 'Example Bank'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Which branch with the name \"Main Branch\" issued the CD Special product?",
          "sql_queries": [
            "SELECT BranchName FROM BankingProducts WHERE ProductName = 'CD Special' AND BranchName = (SELECT BranchName FROM Branch WHERE BranchName = 'Main Branch')"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Banking/vague_2cols_extra_charges/vague_2cols_extra_charges.sqlite",
      "db_dump": "CREATE TABLE Accounts (\n    AccountID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER REFERENCES Customers(CustomerID),\n    AccountType TEXT ,\n    Balance REAL ,\n    OpenDate DATE\n);\nCREATE TABLE Customers (\n    CustomerID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    EmailAddress TEXT,\n    PhoneNumber VARCHAR(15)\n);\nCREATE TABLE Loans (\n    LoanID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER REFERENCES Customers(CustomerID),\n    LoanAmount REAL ,\n    InterestRate DECIMAL(5,2) ,\n    TermYears INTEGER ,\n    ApprovalDate DATE\n);\nCREATE TABLE Overdrafts (\n    OverdraftID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountID INTEGER REFERENCES Accounts(AccountID),\n    LimitAmount REAL ,\n    InterestRate DECIMAL(5,2) ,\n    Fees PERCENTAGE \n);\nCREATE TABLE Rewards (\n    RewardID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountID INTEGER REFERENCES Accounts(AccountID),\n    Points ,\n    RedemptionValue REAL \n);\nCREATE TABLE Transactions (\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FromAccountID INTEGER REFERENCES Accounts(AccountID),\n    ToAccountID INTEGER REFERENCES Accounts(AccountID),\n    Amount REAL ,\n    Date DATE,\n    Fee_Amount REAL,\n    Commission_Percentage REAL,\n    Transactions INT DEFAULT 1\n);\n\nINSERT INTO \"Accounts\" (AccountID,CustomerID,AccountType,Balance,OpenDate) VALUES (1,1,'Checking',1000.0,'2021-01-01'),(2,2,'Savings',500.0,'2021-01-02');\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,EmailAddress,PhoneNumber) VALUES (1,'John','Doe','john.doe@example.com','+1-503-789-1234'),(2,'Jane','Smith','jane.smith@example.com','+1-503-789-5678');\nINSERT INTO \"Loans\" (LoanID,CustomerID,LoanAmount,InterestRate,TermYears,ApprovalDate) VALUES (1,1,10000.0,3.5,5,'2021-01-01'),(2,2,5000.0,4,3,'2021-01-02');\nINSERT INTO \"Overdrafts\" (OverdraftID,AccountID,LimitAmount,InterestRate,Fees) VALUES (1,1,500.0,4.5,0.1),(2,2,1000.0,4,0.15);\nINSERT INTO \"Rewards\" (RewardID,AccountID,Points,RedemptionValue) VALUES (1,1,100,10.0),(2,2,50,5.0);\nINSERT INTO \"Transactions\" (TransactionID,FromAccountID,ToAccountID,Amount,Date,Fee_Amount,Commission_Percentage,Transactions) VALUES (1,1,2,100.0,'2021-01-01',2.0,0.2,1),(2,2,3,200.0,'2021-01-02',4.0,0.3,2);\n",
      "question": "Show me extra charges as % of the total amount",
      "gold_queries": [
        "Select Fee_Amount / Amount * 100 as  Percentage from Transactions",
        "Select Commission_Percentage / Amount * 100 as  Percentage from Transactions",
        "Select Fee_Amount, Commission_Percentage / Amount * 100 as  Percentage from Transactions"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Calculate the percentage of fee_amount over amount for all transactions.",
          "sql_queries": [
            "SELECT (Fee_Amount / Amount) * 100 AS Fee_Percentage FROM Transactions"
          ],
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Show the total fee_amount and commission_percentage separately for each transaction.",
          "sql_queries": [
            "SELECT TransactionID, SUM(Fee_Amount) AS TotalFeeAmount, AVG(Commission_Percentage) AS AverageCommissionPercentage\nFROM Transactions\nGROUP BY TransactionID"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Calculate the percentage of commission_percentage over amount for all transactions.",
          "sql_queries": [
            "SELECT (Fee_Amount / Amount) * 100 AS Commission_Percentage_Over_Amount \nFROM Transactions"
          ],
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all transactions with extra charges (fee_amount or commission_percentage) and calculate the percentage of each extra charge compared to the total transaction amount.",
          "sql_queries": [
            "SELECT \n    TransactionID, \n    Fee_Amount, \n    Commission_Percentage, \n    (Fee_Amount / Amount) * 100 AS Fee_Percentage, \n    (Commission_Percentage * Amount / 100) AS Commission_Amount, \n    ((Fee_Amount + (Commission_Percentage * Amount / 100)) / Amount) * 100 AS Total_Extra_Charge_Percentage\nFROM \n    Transactions\nWHERE \n    Fee_Amount > 0 OR Commission_Percentage > 0"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.3333333333333333,
        "precision": 0.5,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Banking/vague_2cols_extra_charges/vague_2cols_extra_charges.sqlite",
      "db_dump": "CREATE TABLE Accounts (\n    AccountID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER REFERENCES Customers(CustomerID),\n    AccountType TEXT ,\n    Balance REAL ,\n    OpenDate DATE\n);\nCREATE TABLE Customers (\n    CustomerID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    EmailAddress TEXT,\n    PhoneNumber VARCHAR(15)\n);\nCREATE TABLE Loans (\n    LoanID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER REFERENCES Customers(CustomerID),\n    LoanAmount REAL ,\n    InterestRate DECIMAL(5,2) ,\n    TermYears INTEGER ,\n    ApprovalDate DATE\n);\nCREATE TABLE Overdrafts (\n    OverdraftID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountID INTEGER REFERENCES Accounts(AccountID),\n    LimitAmount REAL ,\n    InterestRate DECIMAL(5,2) ,\n    Fees PERCENTAGE \n);\nCREATE TABLE Rewards (\n    RewardID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountID INTEGER REFERENCES Accounts(AccountID),\n    Points ,\n    RedemptionValue REAL \n);\nCREATE TABLE Transactions (\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FromAccountID INTEGER REFERENCES Accounts(AccountID),\n    ToAccountID INTEGER REFERENCES Accounts(AccountID),\n    Amount REAL ,\n    Date DATE,\n    Fee_Amount REAL,\n    Commission_Percentage REAL,\n    Transactions INT DEFAULT 1\n);\n\nINSERT INTO \"Accounts\" (AccountID,CustomerID,AccountType,Balance,OpenDate) VALUES (1,1,'Checking',1000.0,'2021-01-01'),(2,2,'Savings',500.0,'2021-01-02');\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,EmailAddress,PhoneNumber) VALUES (1,'John','Doe','john.doe@example.com','+1-503-789-1234'),(2,'Jane','Smith','jane.smith@example.com','+1-503-789-5678');\nINSERT INTO \"Loans\" (LoanID,CustomerID,LoanAmount,InterestRate,TermYears,ApprovalDate) VALUES (1,1,10000.0,3.5,5,'2021-01-01'),(2,2,5000.0,4,3,'2021-01-02');\nINSERT INTO \"Overdrafts\" (OverdraftID,AccountID,LimitAmount,InterestRate,Fees) VALUES (1,1,500.0,4.5,0.1),(2,2,1000.0,4,0.15);\nINSERT INTO \"Rewards\" (RewardID,AccountID,Points,RedemptionValue) VALUES (1,1,100,10.0),(2,2,50,5.0);\nINSERT INTO \"Transactions\" (TransactionID,FromAccountID,ToAccountID,Amount,Date,Fee_Amount,Commission_Percentage,Transactions) VALUES (1,1,2,100.0,'2021-01-01',2.0,0.2,1),(2,2,3,200.0,'2021-01-02',4.0,0.3,2);\n",
      "question": "Show me the most recent transaction amount and commission percentage.",
      "gold_queries": [
        "Select Commission_Percentage from Transactions order by Date DESC Limit 1"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Return the  `Amount` and `Commission_Percentage` for the transaction with the highest `Transactions` value.",
          "sql_queries": [
            "SELECT Amount, Commission_Percentage FROM Transactions ORDER BY Transactions DESC LIMIT 1"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Extract the `Amount` and `Commission_Percentage` from the last row of the `Transactions` table.",
          "sql_queries": [
            "SELECT Amount, Commission_Percentage FROM Transactions ORDER BY TransactionID DESC LIMIT 1"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Find the latest transaction record and display its `Amount` and `Commission_Percentage`.",
          "sql_queries": [
            "SELECT Amount, Commission_Percentage FROM Transactions ORDER BY Date DESC LIMIT 1"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve the maximum `Amount` and `Commission_Percentage` from the `Transactions` table.",
          "sql_queries": [
            "SELECT MAX(Amount), MAX(Commission_Percentage) FROM Transactions"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Identify the transaction with the most recent `Date` and return its `Amount` and `Commission_Percentage`.",
          "sql_queries": [
            "SELECT Amount, Commission_Percentage FROM Transactions ORDER BY Date DESC LIMIT 1"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Banking/vague_2cols_extra_charges/vague_2cols_extra_charges.sqlite",
      "db_dump": "CREATE TABLE Accounts (\n    AccountID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER REFERENCES Customers(CustomerID),\n    AccountType TEXT ,\n    Balance REAL ,\n    OpenDate DATE\n);\nCREATE TABLE Customers (\n    CustomerID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    EmailAddress TEXT,\n    PhoneNumber VARCHAR(15)\n);\nCREATE TABLE Loans (\n    LoanID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER REFERENCES Customers(CustomerID),\n    LoanAmount REAL ,\n    InterestRate DECIMAL(5,2) ,\n    TermYears INTEGER ,\n    ApprovalDate DATE\n);\nCREATE TABLE Overdrafts (\n    OverdraftID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountID INTEGER REFERENCES Accounts(AccountID),\n    LimitAmount REAL ,\n    InterestRate DECIMAL(5,2) ,\n    Fees PERCENTAGE \n);\nCREATE TABLE Rewards (\n    RewardID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountID INTEGER REFERENCES Accounts(AccountID),\n    Points ,\n    RedemptionValue REAL \n);\nCREATE TABLE Transactions (\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FromAccountID INTEGER REFERENCES Accounts(AccountID),\n    ToAccountID INTEGER REFERENCES Accounts(AccountID),\n    Amount REAL ,\n    Date DATE,\n    Fee_Amount REAL,\n    Commission_Percentage REAL,\n    Transactions INT DEFAULT 1\n);\n\nINSERT INTO \"Accounts\" (AccountID,CustomerID,AccountType,Balance,OpenDate) VALUES (1,1,'Checking',1000.0,'2021-01-01'),(2,2,'Savings',500.0,'2021-01-02');\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,EmailAddress,PhoneNumber) VALUES (1,'John','Doe','john.doe@example.com','+1-503-789-1234'),(2,'Jane','Smith','jane.smith@example.com','+1-503-789-5678');\nINSERT INTO \"Loans\" (LoanID,CustomerID,LoanAmount,InterestRate,TermYears,ApprovalDate) VALUES (1,1,10000.0,3.5,5,'2021-01-01'),(2,2,5000.0,4,3,'2021-01-02');\nINSERT INTO \"Overdrafts\" (OverdraftID,AccountID,LimitAmount,InterestRate,Fees) VALUES (1,1,500.0,4.5,0.1),(2,2,1000.0,4,0.15);\nINSERT INTO \"Rewards\" (RewardID,AccountID,Points,RedemptionValue) VALUES (1,1,100,10.0),(2,2,50,5.0);\nINSERT INTO \"Transactions\" (TransactionID,FromAccountID,ToAccountID,Amount,Date,Fee_Amount,Commission_Percentage,Transactions) VALUES (1,1,2,100.0,'2021-01-01',2.0,0.2,1),(2,2,3,200.0,'2021-01-02',4.0,0.3,2);\n",
      "question": "Show me the fee amounts as a percentage of the total amount and commission percentages as a percentage of the total amount.",
      "gold_queries": [
        "Select Fee_Amount, Commission_Percentage / Amount * 100 as  Percentage from Transactions"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Show the percentage of fee amount to total transaction amount.",
          "sql_queries": [
            "SELECT (Fee_Amount / Amount) * 100 AS Fee_Percentage FROM Transactions"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Calculate the percentage of each fee amount relative to the total fees.",
          "sql_queries": [
            "SELECT Fee_Amount, (Fee_Amount / SUM(Fee_Amount) OVER()) * 100 AS Percentage\nFROM Transactions"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Calculate the percentage of each commission amount relative to the total commissions.",
          "sql_queries": [
            "SELECT \n    (Commission_Percentage / SUM(Commission_Percentage) OVER()) * 100 AS CommissionPercentage\nFROM \n    Transactions"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Display the fee amount and commission percentage for each transaction.",
          "sql_queries": [
            "SELECT Fee_Amount, Commission_Percentage FROM Transactions"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Show the percentage of commission amount to total transaction amount.",
          "sql_queries": [
            "SELECT SUM(TransactionID) * Commission_Percentage / SUM(Amount) * 100 AS Commission_Percentage_of_Total_Amount\nFROM Transactions"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Banking/vague_2cols_extra_charges/vague_2cols_extra_charges.sqlite",
      "db_dump": "CREATE TABLE Accounts (\n    AccountID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER REFERENCES Customers(CustomerID),\n    AccountType TEXT ,\n    Balance REAL ,\n    OpenDate DATE\n);\nCREATE TABLE Customers (\n    CustomerID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    EmailAddress TEXT,\n    PhoneNumber VARCHAR(15)\n);\nCREATE TABLE Loans (\n    LoanID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER REFERENCES Customers(CustomerID),\n    LoanAmount REAL ,\n    InterestRate DECIMAL(5,2) ,\n    TermYears INTEGER ,\n    ApprovalDate DATE\n);\nCREATE TABLE Overdrafts (\n    OverdraftID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountID INTEGER REFERENCES Accounts(AccountID),\n    LimitAmount REAL ,\n    InterestRate DECIMAL(5,2) ,\n    Fees PERCENTAGE \n);\nCREATE TABLE Rewards (\n    RewardID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountID INTEGER REFERENCES Accounts(AccountID),\n    Points ,\n    RedemptionValue REAL \n);\nCREATE TABLE Transactions (\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FromAccountID INTEGER REFERENCES Accounts(AccountID),\n    ToAccountID INTEGER REFERENCES Accounts(AccountID),\n    Amount REAL ,\n    Date DATE,\n    Fee_Amount REAL,\n    Commission_Percentage REAL,\n    Transactions INT DEFAULT 1\n);\n\nINSERT INTO \"Accounts\" (AccountID,CustomerID,AccountType,Balance,OpenDate) VALUES (1,1,'Checking',1000.0,'2021-01-01'),(2,2,'Savings',500.0,'2021-01-02');\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,EmailAddress,PhoneNumber) VALUES (1,'John','Doe','john.doe@example.com','+1-503-789-1234'),(2,'Jane','Smith','jane.smith@example.com','+1-503-789-5678');\nINSERT INTO \"Loans\" (LoanID,CustomerID,LoanAmount,InterestRate,TermYears,ApprovalDate) VALUES (1,1,10000.0,3.5,5,'2021-01-01'),(2,2,5000.0,4,3,'2021-01-02');\nINSERT INTO \"Overdrafts\" (OverdraftID,AccountID,LimitAmount,InterestRate,Fees) VALUES (1,1,500.0,4.5,0.1),(2,2,1000.0,4,0.15);\nINSERT INTO \"Rewards\" (RewardID,AccountID,Points,RedemptionValue) VALUES (1,1,100,10.0),(2,2,50,5.0);\nINSERT INTO \"Transactions\" (TransactionID,FromAccountID,ToAccountID,Amount,Date,Fee_Amount,Commission_Percentage,Transactions) VALUES (1,1,2,100.0,'2021-01-01',2.0,0.2,1),(2,2,3,200.0,'2021-01-02',4.0,0.3,2);\n",
      "question": "Show me the most recent transaction amount along with fee amount and commission percentage.",
      "gold_queries": [
        "Select Fee_Amount, Commission_Percentage from Transactions order by Date DESC Limit 1"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Retrieve the maximum TransactionID and corresponding Amount, Fee_Amount, and Commission_Percentage.",
          "sql_queries": [
            "SELECT TransactionID, Amount, Fee_Amount, Commission_Percentage FROM Transactions WHERE TransactionID = (SELECT MAX(TransactionID) FROM Transactions)"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Identify the most recently created transaction and show its Amount, Fee_Amount, and Commission_Percentage.",
          "sql_queries": [
            "SELECT Amount, Fee_Amount, Commission_Percentage FROM Transactions ORDER BY Date DESC LIMIT 1"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "For each account, find the most recent transaction and display its Amount, Fee_Amount, and Commission_Percentage.",
          "sql_queries": [
            "SELECT T1.Amount, T1.Fee_Amount, T1.Commission_Percentage\nFROM Transactions AS T1\nJOIN (\n    SELECT FromAccountID, MAX(Date) AS LatestDate\n    FROM Transactions\n    GROUP BY FromAccountID\n) AS T2\nON T1.FromAccountID = T2.FromAccountID AND T1.Date = T2.LatestDate"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Find the transaction with the highest Amount and return its Fee_Amount and Commission_Percentage.",
          "sql_queries": [
            "SELECT Fee_Amount, Commission_Percentage FROM Transactions ORDER BY Amount DESC LIMIT 1"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "List all transactions ordered by date descending and display the Amount, Fee_Amount, and Commission_Percentage for the first transaction.",
          "sql_queries": [
            "SELECT Amount, Fee_Amount, Commission_Percentage FROM Transactions ORDER BY Date DESC LIMIT 1"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 5,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Banking/vague_2cols_extra_charges/vague_2cols_extra_charges.sqlite",
      "db_dump": "CREATE TABLE Accounts (\n    AccountID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER REFERENCES Customers(CustomerID),\n    AccountType TEXT ,\n    Balance REAL ,\n    OpenDate DATE\n);\nCREATE TABLE Customers (\n    CustomerID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    EmailAddress TEXT,\n    PhoneNumber VARCHAR(15)\n);\nCREATE TABLE Loans (\n    LoanID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER REFERENCES Customers(CustomerID),\n    LoanAmount REAL ,\n    InterestRate DECIMAL(5,2) ,\n    TermYears INTEGER ,\n    ApprovalDate DATE\n);\nCREATE TABLE Overdrafts (\n    OverdraftID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountID INTEGER REFERENCES Accounts(AccountID),\n    LimitAmount REAL ,\n    InterestRate DECIMAL(5,2) ,\n    Fees PERCENTAGE \n);\nCREATE TABLE Rewards (\n    RewardID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountID INTEGER REFERENCES Accounts(AccountID),\n    Points ,\n    RedemptionValue REAL \n);\nCREATE TABLE Transactions (\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FromAccountID INTEGER REFERENCES Accounts(AccountID),\n    ToAccountID INTEGER REFERENCES Accounts(AccountID),\n    Amount REAL ,\n    Date DATE,\n    Fee_Amount REAL,\n    Commission_Percentage REAL,\n    Transactions INT DEFAULT 1\n);\n\nINSERT INTO \"Accounts\" (AccountID,CustomerID,AccountType,Balance,OpenDate) VALUES (1,1,'Checking',1000.0,'2021-01-01'),(2,2,'Savings',500.0,'2021-01-02');\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,EmailAddress,PhoneNumber) VALUES (1,'John','Doe','john.doe@example.com','+1-503-789-1234'),(2,'Jane','Smith','jane.smith@example.com','+1-503-789-5678');\nINSERT INTO \"Loans\" (LoanID,CustomerID,LoanAmount,InterestRate,TermYears,ApprovalDate) VALUES (1,1,10000.0,3.5,5,'2021-01-01'),(2,2,5000.0,4,3,'2021-01-02');\nINSERT INTO \"Overdrafts\" (OverdraftID,AccountID,LimitAmount,InterestRate,Fees) VALUES (1,1,500.0,4.5,0.1),(2,2,1000.0,4,0.15);\nINSERT INTO \"Rewards\" (RewardID,AccountID,Points,RedemptionValue) VALUES (1,1,100,10.0),(2,2,50,5.0);\nINSERT INTO \"Transactions\" (TransactionID,FromAccountID,ToAccountID,Amount,Date,Fee_Amount,Commission_Percentage,Transactions) VALUES (1,1,2,100.0,'2021-01-01',2.0,0.2,1),(2,2,3,200.0,'2021-01-02',4.0,0.3,2);\n",
      "question": "Show me the most recent transaction amount and charges",
      "gold_queries": [
        "Select Fee_Amount from Transactions order by Date DESC Limit 1",
        "Select Commission_Percentage from Transactions order by Date DESC Limit 1",
        "Select Fee_Amount, Commission_Percentage from Transactions order by Date DESC Limit 1"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Find the latest transaction in the `Transactions` table and return its `Fee_Amount`.",
          "sql_queries": [
            "SELECT Fee_Amount FROM Transactions ORDER BY Date DESC LIMIT 1"
          ],
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Find the maximum `Fee_Amount` from the `Transactions` table.",
          "sql_queries": [
            "SELECT MAX(Fee_Amount) FROM Transactions"
          ],
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Identify the latest transaction in the `Transactions` table and return its `Amount`.",
          "sql_queries": [
            "SELECT Amount FROM Transactions ORDER BY Date DESC LIMIT 1"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve the maximum `Amount` from the `Transactions` table.",
          "sql_queries": [
            "SELECT MAX(Amount) FROM Transactions"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List the `Amount` and `Fee_Amount` of the last transaction in the `Transactions` table.",
          "sql_queries": [
            "SELECT Amount, Fee_Amount FROM Transactions ORDER BY Date DESC LIMIT 1"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.3333333333333333,
        "precision": 0.4,
        "f1_score": 0.3636363636363636,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Banking/vague_2cols_extra_charges/vague_2cols_extra_charges.sqlite",
      "db_dump": "CREATE TABLE Accounts (\n    AccountID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER REFERENCES Customers(CustomerID),\n    AccountType TEXT ,\n    Balance REAL ,\n    OpenDate DATE\n);\nCREATE TABLE Customers (\n    CustomerID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    EmailAddress TEXT,\n    PhoneNumber VARCHAR(15)\n);\nCREATE TABLE Loans (\n    LoanID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER REFERENCES Customers(CustomerID),\n    LoanAmount REAL ,\n    InterestRate DECIMAL(5,2) ,\n    TermYears INTEGER ,\n    ApprovalDate DATE\n);\nCREATE TABLE Overdrafts (\n    OverdraftID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountID INTEGER REFERENCES Accounts(AccountID),\n    LimitAmount REAL ,\n    InterestRate DECIMAL(5,2) ,\n    Fees PERCENTAGE \n);\nCREATE TABLE Rewards (\n    RewardID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountID INTEGER REFERENCES Accounts(AccountID),\n    Points ,\n    RedemptionValue REAL \n);\nCREATE TABLE Transactions (\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FromAccountID INTEGER REFERENCES Accounts(AccountID),\n    ToAccountID INTEGER REFERENCES Accounts(AccountID),\n    Amount REAL ,\n    Date DATE,\n    Fee_Amount REAL,\n    Commission_Percentage REAL,\n    Transactions INT DEFAULT 1\n);\n\nINSERT INTO \"Accounts\" (AccountID,CustomerID,AccountType,Balance,OpenDate) VALUES (1,1,'Checking',1000.0,'2021-01-01'),(2,2,'Savings',500.0,'2021-01-02');\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,EmailAddress,PhoneNumber) VALUES (1,'John','Doe','john.doe@example.com','+1-503-789-1234'),(2,'Jane','Smith','jane.smith@example.com','+1-503-789-5678');\nINSERT INTO \"Loans\" (LoanID,CustomerID,LoanAmount,InterestRate,TermYears,ApprovalDate) VALUES (1,1,10000.0,3.5,5,'2021-01-01'),(2,2,5000.0,4,3,'2021-01-02');\nINSERT INTO \"Overdrafts\" (OverdraftID,AccountID,LimitAmount,InterestRate,Fees) VALUES (1,1,500.0,4.5,0.1),(2,2,1000.0,4,0.15);\nINSERT INTO \"Rewards\" (RewardID,AccountID,Points,RedemptionValue) VALUES (1,1,100,10.0),(2,2,50,5.0);\nINSERT INTO \"Transactions\" (TransactionID,FromAccountID,ToAccountID,Amount,Date,Fee_Amount,Commission_Percentage,Transactions) VALUES (1,1,2,100.0,'2021-01-01',2.0,0.2,1),(2,2,3,200.0,'2021-01-02',4.0,0.3,2);\n",
      "question": "Show me the fee amounts as a percentage of the total amount.",
      "gold_queries": [
        "Select Fee_Amount / Amount * 100 as  Percentage from Transactions"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Calculate the average Fee_Amount percentage across all transactions.",
          "sql_queries": [
            "SELECT AVG(Fee_Amount) FROM Transactions"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Show the total Fee_Amount across all transactions as a percentage of the total transferred Amount.",
          "sql_queries": [
            "SELECT CAST(SUM(Fee_Amount) AS REAL) * 100 / SUM(Amount) FROM Transactions"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Calculate the percentage of each transaction's Fee_Amount relative to its Amount.",
          "sql_queries": [
            "SELECT Fee_Amount * 100 / Amount AS Fee_Percentage FROM Transactions"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "For each transaction type, calculate the percentage of Fee_Amount relative to the total Amount of that type.",
          "sql_queries": [
            "SELECT Transactions, \n       (SUM(Fee_Amount) / SUM(Amount)) * 100 AS Fee_Percentage\nFROM Transactions\nGROUP BY Transactions"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Banking/vague_2cols_extra_charges/vague_2cols_extra_charges.sqlite",
      "db_dump": "CREATE TABLE Accounts (\n    AccountID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER REFERENCES Customers(CustomerID),\n    AccountType TEXT ,\n    Balance REAL ,\n    OpenDate DATE\n);\nCREATE TABLE Customers (\n    CustomerID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    EmailAddress TEXT,\n    PhoneNumber VARCHAR(15)\n);\nCREATE TABLE Loans (\n    LoanID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER REFERENCES Customers(CustomerID),\n    LoanAmount REAL ,\n    InterestRate DECIMAL(5,2) ,\n    TermYears INTEGER ,\n    ApprovalDate DATE\n);\nCREATE TABLE Overdrafts (\n    OverdraftID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountID INTEGER REFERENCES Accounts(AccountID),\n    LimitAmount REAL ,\n    InterestRate DECIMAL(5,2) ,\n    Fees PERCENTAGE \n);\nCREATE TABLE Rewards (\n    RewardID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountID INTEGER REFERENCES Accounts(AccountID),\n    Points ,\n    RedemptionValue REAL \n);\nCREATE TABLE Transactions (\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FromAccountID INTEGER REFERENCES Accounts(AccountID),\n    ToAccountID INTEGER REFERENCES Accounts(AccountID),\n    Amount REAL ,\n    Date DATE,\n    Fee_Amount REAL,\n    Commission_Percentage REAL,\n    Transactions INT DEFAULT 1\n);\n\nINSERT INTO \"Accounts\" (AccountID,CustomerID,AccountType,Balance,OpenDate) VALUES (1,1,'Checking',1000.0,'2021-01-01'),(2,2,'Savings',500.0,'2021-01-02');\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,EmailAddress,PhoneNumber) VALUES (1,'John','Doe','john.doe@example.com','+1-503-789-1234'),(2,'Jane','Smith','jane.smith@example.com','+1-503-789-5678');\nINSERT INTO \"Loans\" (LoanID,CustomerID,LoanAmount,InterestRate,TermYears,ApprovalDate) VALUES (1,1,10000.0,3.5,5,'2021-01-01'),(2,2,5000.0,4,3,'2021-01-02');\nINSERT INTO \"Overdrafts\" (OverdraftID,AccountID,LimitAmount,InterestRate,Fees) VALUES (1,1,500.0,4.5,0.1),(2,2,1000.0,4,0.15);\nINSERT INTO \"Rewards\" (RewardID,AccountID,Points,RedemptionValue) VALUES (1,1,100,10.0),(2,2,50,5.0);\nINSERT INTO \"Transactions\" (TransactionID,FromAccountID,ToAccountID,Amount,Date,Fee_Amount,Commission_Percentage,Transactions) VALUES (1,1,2,100.0,'2021-01-01',2.0,0.2,1),(2,2,3,200.0,'2021-01-02',4.0,0.3,2);\n",
      "question": "Show me the most recent transaction and fee amounts.",
      "gold_queries": [
        "Select Fee_Amount from Transactions order by Date DESC Limit 1"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Retrieve the most recent transaction record and display its Amount and Fee_Amount columns.",
          "sql_queries": [
            "SELECT Amount, Fee_Amount FROM Transactions ORDER BY Date DESC LIMIT 1"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Present the single transaction with the highest Transactions value and its corresponding Amount and Fee_Amount.",
          "sql_queries": [
            "SELECT Amount, Fee_Amount FROM Transactions ORDER BY Transactions DESC LIMIT 1"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List the transaction record with the latest Date and show its Amount and Fee_Amount.",
          "sql_queries": [
            "SELECT Amount, Fee_Amount FROM Transactions ORDER BY Date DESC LIMIT 1"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Identify the transaction with the highest TransactionID and return its Amount and Fee_Amount.",
          "sql_queries": [
            "SELECT Amount, Fee_Amount FROM Transactions WHERE TransactionID = (SELECT MAX(TransactionID) FROM Transactions)"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Banking/vague_2cols_extra_charges/vague_2cols_extra_charges.sqlite",
      "db_dump": "CREATE TABLE Accounts (\n    AccountID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER REFERENCES Customers(CustomerID),\n    AccountType TEXT ,\n    Balance REAL ,\n    OpenDate DATE\n);\nCREATE TABLE Customers (\n    CustomerID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    EmailAddress TEXT,\n    PhoneNumber VARCHAR(15)\n);\nCREATE TABLE Loans (\n    LoanID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER REFERENCES Customers(CustomerID),\n    LoanAmount REAL ,\n    InterestRate DECIMAL(5,2) ,\n    TermYears INTEGER ,\n    ApprovalDate DATE\n);\nCREATE TABLE Overdrafts (\n    OverdraftID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountID INTEGER REFERENCES Accounts(AccountID),\n    LimitAmount REAL ,\n    InterestRate DECIMAL(5,2) ,\n    Fees PERCENTAGE \n);\nCREATE TABLE Rewards (\n    RewardID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountID INTEGER REFERENCES Accounts(AccountID),\n    Points ,\n    RedemptionValue REAL \n);\nCREATE TABLE Transactions (\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FromAccountID INTEGER REFERENCES Accounts(AccountID),\n    ToAccountID INTEGER REFERENCES Accounts(AccountID),\n    Amount REAL ,\n    Date DATE,\n    Fee_Amount REAL,\n    Commission_Percentage REAL,\n    Transactions INT DEFAULT 1\n);\n\nINSERT INTO \"Accounts\" (AccountID,CustomerID,AccountType,Balance,OpenDate) VALUES (1,1,'Checking',1000.0,'2021-01-01'),(2,2,'Savings',500.0,'2021-01-02');\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,EmailAddress,PhoneNumber) VALUES (1,'John','Doe','john.doe@example.com','+1-503-789-1234'),(2,'Jane','Smith','jane.smith@example.com','+1-503-789-5678');\nINSERT INTO \"Loans\" (LoanID,CustomerID,LoanAmount,InterestRate,TermYears,ApprovalDate) VALUES (1,1,10000.0,3.5,5,'2021-01-01'),(2,2,5000.0,4,3,'2021-01-02');\nINSERT INTO \"Overdrafts\" (OverdraftID,AccountID,LimitAmount,InterestRate,Fees) VALUES (1,1,500.0,4.5,0.1),(2,2,1000.0,4,0.15);\nINSERT INTO \"Rewards\" (RewardID,AccountID,Points,RedemptionValue) VALUES (1,1,100,10.0),(2,2,50,5.0);\nINSERT INTO \"Transactions\" (TransactionID,FromAccountID,ToAccountID,Amount,Date,Fee_Amount,Commission_Percentage,Transactions) VALUES (1,1,2,100.0,'2021-01-01',2.0,0.2,1),(2,2,3,200.0,'2021-01-02',4.0,0.3,2);\n",
      "question": "Show me the commission percentages as a percentage of the total amount.",
      "gold_queries": [
        "Select Commission_Percentage / Amount * 100 as  Percentage from Transactions"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Show the commission percentage for each transaction as a percentage of the transaction amount.",
          "sql_queries": [
            "SELECT Commission_Percentage, (Amount * Commission_Percentage) AS Commission_Amount FROM Transactions"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Show the percentage of total transaction value that is represented by commission.",
          "sql_queries": [
            "SELECT (SUM(Amount * Commission_Percentage / 100) / SUM(Amount)) * 100 AS CommissionPercentage\nFROM Transactions"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Calculate the average commission percentage of all transactions.",
          "sql_queries": [
            "SELECT AVG(Commission_Percentage) AS Average_Commission_Percentage \nFROM Transactions"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Display the commission percentage for each transaction relative to the total commission earned.",
          "sql_queries": [
            "SELECT Commission_Percentage, (Commission_Percentage * Amount) / SUM(Commission_Percentage * Amount) OVER () AS Relative_Commission\nFROM Transactions"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Calculate the total commission percentage across all transactions.",
          "sql_queries": [
            "SELECT SUM(Commission_Percentage) FROM Transactions"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Entertainment/vague_2cols_location/vague_2cols_location.sqlite",
      "db_dump": "CREATE TABLE artists (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    genre TEXT\n);\nCREATE TABLE bookings (\n    id INTEGER PRIMARY KEY,\n    userId INTEGER,\n    ticketId INTEGER,\n    bookingDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    status TEXT ,\n    FOREIGN KEY(userId) REFERENCES users(id),\n    FOREIGN KEY(ticketId) REFERENCES tickets(id)\n);\nCREATE TABLE concerts (\n    id INTEGER PRIMARY KEY,\n    artistId INTEGER,\n    date DATE,\n    city TEXT,\n    concertHall TEXT,\n    FOREIGN KEY(artistId) REFERENCES artists(id)\n);\nCREATE TABLE tickets (\n    id INTEGER PRIMARY KEY,\n    concertId INTEGER,\n    price DECIMAL(5,2),\n    quantity INTEGER,\n    type TEXT, -- e.g., VIP, General Admission\n    FOREIGN KEY(concertId) REFERENCES concerts(id)\n);\nCREATE TABLE users (\n    id INTEGER PRIMARY KEY,\n    username TEXT,\n    email TEXT,\n    passwordHash TEXT\n);\nCREATE TABLE venues (\n    id INTEGER PRIMARY KEY,\n    venueName TEXT,\n    location TEXT,\n    capacity INTEGER\n);\n\nINSERT INTO \"artists\" (id,name,genre) VALUES (1,'The Beatles','Rock'),(2,'Michael Jackson','Pop'),(3,'Lady Gaga','Pop'),(4,'Elton John','Classic Rock'),(5,'Adele','Pop');\nINSERT INTO \"bookings\" (id,userId,ticketId,bookingDate,status) VALUES (1,1,1,'2024-02-19 13:13:50','Confirmed'),(2,2,2,'2024-02-19 13:13:50','Confirmed'),(3,3,3,'2024-02-19 13:13:50','Confirmed'),(4,4,4,'2024-02-19 13:13:50','Confirmed'),(5,5,5,'2024-02-19 13:13:50','Confirmed');\nINSERT INTO \"concerts\" (id,artistId,date,city,concertHall) VALUES (1,1,'2023-06-01','New York','Madison Square Garden'),(2,2,'2023-07-15','Los Angeles','Staples Center'),(3,3,'2023-08-30','Chicago','United Center'),(4,4,'2023-09-10','Dallas','American Airlines Center'),(5,5,'2023-10-01','Boston','TD Garden');\nINSERT INTO \"tickets\" (id,concertId,price,quantity,type) VALUES (1,1,100,1000,'General Admission'),(2,1,200,500,'VIP'),(3,2,120,1000,'General Admission'),(4,2,220,500,'VIP'),(5,3,150,1000,'General Admission');\nINSERT INTO \"users\" (id,username,email,passwordHash) VALUES (1,'user1','user1@example.com','passwordhash1'),(2,'user2','user2@example.com','passwordhash2'),(3,'user3','user3@example.com','passwordhash3'),(4,'user4','user4@example.com','passwordhash4'),(5,'user5','user5@example.com','passwordhash5');\nINSERT INTO \"venues\" (id,venueName,location,capacity) VALUES (1,'Madison Square Garden','New York',20000),(2,'Staples Center','Los Angeles',19000),(3,'United Center','Chicago',23000),(4,'American Airlines Center','Dallas',19000),(5,'TD Garden','Boston',19000);\n",
      "question": "Where will user2 go to the concert and who will perform?",
      "gold_queries": [
        "SELECT artists.name, concerts.city FROM concerts JOIN tickets ON concerts.id = tickets.concertId JOIN artists ON artists.id = concerts.artistId JOIN bookings ON bookings.ticketId = tickets.id  JOIN users ON bookings.userId = users.id WHERE users.username = \"user2\";",
        "SELECT artists.name, concerts.concertHall FROM concerts JOIN tickets ON concerts.id = tickets.concertId JOIN artists ON artists.id = concerts.artistId JOIN bookings ON bookings.ticketId = tickets.id  JOIN users ON bookings.userId = users.id WHERE users.username = \"user2\";",
        "SELECT artists.name, concerts.city, concertHall FROM concerts JOIN tickets ON concerts.id = tickets.concertId JOIN artists ON artists.id = concerts.artistId JOIN bookings ON bookings.ticketId = tickets.id  JOIN users ON bookings.userId = users.id WHERE users.username = \"user2\";"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Booking information for user2",
          "sql_queries": [
            "SELECT bookings.id, bookings.ticketId, bookings.bookingDate, bookings.status \nFROM bookings \nJOIN users ON bookings.userId = users.id \nWHERE users.username = 'user2'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Concerts attended by user2",
          "sql_queries": [
            "SELECT c.date, c.city, c.concertHall, a.name\nFROM concerts c\nJOIN tickets t ON c.id = t.concertId\nJOIN bookings b ON t.id = b.ticketId\nJOIN users u ON b.userId = u.id\nJOIN artists a ON c.artistId = a.id\nWHERE u.username = 'user2'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Artist performing at user2's next booked concert",
          "sql_queries": [
            "SELECT a.name\nFROM artists a\nJOIN concerts c ON a.id = c.artistId\nJOIN tickets t ON c.id = t.concertId\nJOIN bookings b ON t.id = b.ticketId\nJOIN users u ON b.userId = u.id\nWHERE u.username = 'user2'\nORDER BY c.date ASC\nLIMIT 1"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "User2's concert preferences",
          "sql_queries": [
            "SELECT a.name, c.date, c.city, c.concertHall, t.type, t.price\nFROM bookings b\nJOIN tickets t ON b.ticketId = t.id\nJOIN concerts c ON t.concertId = c.id\nJOIN artists a ON c.artistId = a.id\nJOIN users u ON b.userId = u.id\nWHERE u.username = 'user2'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "City of the next concert attended by user2",
          "sql_queries": [
            "SELECT c.city\nFROM users u\nJOIN bookings b ON u.id = b.userId\nJOIN tickets t ON b.ticketId = t.id\nJOIN concerts c ON t.concertId = c.id\nWHERE u.username = 'user2'\nORDER BY c.date\nLIMIT 1"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Entertainment/vague_2cols_location/vague_2cols_location.sqlite",
      "db_dump": "CREATE TABLE artists (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    genre TEXT\n);\nCREATE TABLE bookings (\n    id INTEGER PRIMARY KEY,\n    userId INTEGER,\n    ticketId INTEGER,\n    bookingDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    status TEXT ,\n    FOREIGN KEY(userId) REFERENCES users(id),\n    FOREIGN KEY(ticketId) REFERENCES tickets(id)\n);\nCREATE TABLE concerts (\n    id INTEGER PRIMARY KEY,\n    artistId INTEGER,\n    date DATE,\n    city TEXT,\n    concertHall TEXT,\n    FOREIGN KEY(artistId) REFERENCES artists(id)\n);\nCREATE TABLE tickets (\n    id INTEGER PRIMARY KEY,\n    concertId INTEGER,\n    price DECIMAL(5,2),\n    quantity INTEGER,\n    type TEXT, -- e.g., VIP, General Admission\n    FOREIGN KEY(concertId) REFERENCES concerts(id)\n);\nCREATE TABLE users (\n    id INTEGER PRIMARY KEY,\n    username TEXT,\n    email TEXT,\n    passwordHash TEXT\n);\nCREATE TABLE venues (\n    id INTEGER PRIMARY KEY,\n    venueName TEXT,\n    location TEXT,\n    capacity INTEGER\n);\n\nINSERT INTO \"artists\" (id,name,genre) VALUES (1,'The Beatles','Rock'),(2,'Michael Jackson','Pop'),(3,'Lady Gaga','Pop'),(4,'Elton John','Classic Rock'),(5,'Adele','Pop');\nINSERT INTO \"bookings\" (id,userId,ticketId,bookingDate,status) VALUES (1,1,1,'2024-02-19 13:13:50','Confirmed'),(2,2,2,'2024-02-19 13:13:50','Confirmed'),(3,3,3,'2024-02-19 13:13:50','Confirmed'),(4,4,4,'2024-02-19 13:13:50','Confirmed'),(5,5,5,'2024-02-19 13:13:50','Confirmed');\nINSERT INTO \"concerts\" (id,artistId,date,city,concertHall) VALUES (1,1,'2023-06-01','New York','Madison Square Garden'),(2,2,'2023-07-15','Los Angeles','Staples Center'),(3,3,'2023-08-30','Chicago','United Center'),(4,4,'2023-09-10','Dallas','American Airlines Center'),(5,5,'2023-10-01','Boston','TD Garden');\nINSERT INTO \"tickets\" (id,concertId,price,quantity,type) VALUES (1,1,100,1000,'General Admission'),(2,1,200,500,'VIP'),(3,2,120,1000,'General Admission'),(4,2,220,500,'VIP'),(5,3,150,1000,'General Admission');\nINSERT INTO \"users\" (id,username,email,passwordHash) VALUES (1,'user1','user1@example.com','passwordhash1'),(2,'user2','user2@example.com','passwordhash2'),(3,'user3','user3@example.com','passwordhash3'),(4,'user4','user4@example.com','passwordhash4'),(5,'user5','user5@example.com','passwordhash5');\nINSERT INTO \"venues\" (id,venueName,location,capacity) VALUES (1,'Madison Square Garden','New York',20000),(2,'Staples Center','Los Angeles',19000),(3,'United Center','Chicago',23000),(4,'American Airlines Center','Dallas',19000),(5,'TD Garden','Boston',19000);\n",
      "question": "In which city will user2 go to the concert and who will perform?",
      "gold_queries": [
        "SELECT artists.name, concerts.city FROM concerts JOIN tickets ON concerts.id = tickets.concertId JOIN artists ON artists.id = concerts.artistId JOIN bookings ON bookings.ticketId = tickets.id  JOIN users ON bookings.userId = users.id WHERE users.username = \"user2\";"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Identify the city where user2 has a concert booking and the name of the performing artist for that concert.",
          "sql_queries": [
            "SELECT c.city, a.name\nFROM bookings b\nJOIN users u ON b.userId = u.id\nJOIN tickets t ON b.ticketId = t.id\nJOIN concerts c ON t.concertId = c.id\nJOIN artists a ON c.artistId = a.id\nWHERE u.username = 'user2'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "In which city will user2 attend a concert, and what artist will perform at that concert?",
          "sql_queries": [
            "SELECT c.city, a.name \nFROM users u \nJOIN bookings b ON u.id = b.userId \nJOIN tickets t ON b.ticketId = t.id \nJOIN concerts c ON t.concertId = c.id \nJOIN artists a ON c.artistId = a.id \nWHERE u.username = 'user2'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Given user2's bookings, what city hosts the concert and who is the performing artist?",
          "sql_queries": [
            "SELECT C.city, A.name \nFROM bookings B \nJOIN tickets T ON B.ticketId = T.id \nJOIN concerts C ON T.concertId = C.id \nJOIN artists A ON C.artistId = A.id \nJOIN users U ON B.userId = U.id \nWHERE U.username = 'user2'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "What is the location of the concert attended by user2, and which artist will be performing there?",
          "sql_queries": [
            "SELECT v.location, a.name\nFROM bookings b\nJOIN tickets t ON b.ticketId = t.id\nJOIN concerts c ON t.concertId = c.id\nJOIN venues v ON c.concertHall = v.venueName\nJOIN artists a ON c.artistId = a.id\nJOIN users u ON b.userId = u.id\nWHERE u.username = 'user2'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 4
    },
    {
      "db_file": "data/vague/Entertainment/vague_2cols_location/vague_2cols_location.sqlite",
      "db_dump": "CREATE TABLE artists (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    genre TEXT\n);\nCREATE TABLE bookings (\n    id INTEGER PRIMARY KEY,\n    userId INTEGER,\n    ticketId INTEGER,\n    bookingDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    status TEXT ,\n    FOREIGN KEY(userId) REFERENCES users(id),\n    FOREIGN KEY(ticketId) REFERENCES tickets(id)\n);\nCREATE TABLE concerts (\n    id INTEGER PRIMARY KEY,\n    artistId INTEGER,\n    date DATE,\n    city TEXT,\n    concertHall TEXT,\n    FOREIGN KEY(artistId) REFERENCES artists(id)\n);\nCREATE TABLE tickets (\n    id INTEGER PRIMARY KEY,\n    concertId INTEGER,\n    price DECIMAL(5,2),\n    quantity INTEGER,\n    type TEXT, -- e.g., VIP, General Admission\n    FOREIGN KEY(concertId) REFERENCES concerts(id)\n);\nCREATE TABLE users (\n    id INTEGER PRIMARY KEY,\n    username TEXT,\n    email TEXT,\n    passwordHash TEXT\n);\nCREATE TABLE venues (\n    id INTEGER PRIMARY KEY,\n    venueName TEXT,\n    location TEXT,\n    capacity INTEGER\n);\n\nINSERT INTO \"artists\" (id,name,genre) VALUES (1,'The Beatles','Rock'),(2,'Michael Jackson','Pop'),(3,'Lady Gaga','Pop'),(4,'Elton John','Classic Rock'),(5,'Adele','Pop');\nINSERT INTO \"bookings\" (id,userId,ticketId,bookingDate,status) VALUES (1,1,1,'2024-02-19 13:13:50','Confirmed'),(2,2,2,'2024-02-19 13:13:50','Confirmed'),(3,3,3,'2024-02-19 13:13:50','Confirmed'),(4,4,4,'2024-02-19 13:13:50','Confirmed'),(5,5,5,'2024-02-19 13:13:50','Confirmed');\nINSERT INTO \"concerts\" (id,artistId,date,city,concertHall) VALUES (1,1,'2023-06-01','New York','Madison Square Garden'),(2,2,'2023-07-15','Los Angeles','Staples Center'),(3,3,'2023-08-30','Chicago','United Center'),(4,4,'2023-09-10','Dallas','American Airlines Center'),(5,5,'2023-10-01','Boston','TD Garden');\nINSERT INTO \"tickets\" (id,concertId,price,quantity,type) VALUES (1,1,100,1000,'General Admission'),(2,1,200,500,'VIP'),(3,2,120,1000,'General Admission'),(4,2,220,500,'VIP'),(5,3,150,1000,'General Admission');\nINSERT INTO \"users\" (id,username,email,passwordHash) VALUES (1,'user1','user1@example.com','passwordhash1'),(2,'user2','user2@example.com','passwordhash2'),(3,'user3','user3@example.com','passwordhash3'),(4,'user4','user4@example.com','passwordhash4'),(5,'user5','user5@example.com','passwordhash5');\nINSERT INTO \"venues\" (id,venueName,location,capacity) VALUES (1,'Madison Square Garden','New York',20000),(2,'Staples Center','Los Angeles',19000),(3,'United Center','Chicago',23000),(4,'American Airlines Center','Dallas',19000),(5,'TD Garden','Boston',19000);\n",
      "question": "Using the number of tickets as the criteria for popularity, list the top 3 most popular concert dates and their concert halls.",
      "gold_queries": [
        "SELECT c.date, c.concertHall FROM `concerts` c JOIN `tickets` t ON c.id = t.concertId GROUP BY c.id ORDER BY SUM(t.quantity) DESC LIMIT 3;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List the three concert dates with the highest combined quantity of General Admission and VIP tickets sold.",
          "sql_queries": [
            "SELECT c.date \nFROM concerts c \nJOIN tickets t ON c.id = t.concertId \nWHERE t.type IN ('General Admission', 'VIP') \nGROUP BY c.date \nORDER BY SUM(t.quantity) DESC \nLIMIT 3"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List the three concert dates with the highest total number of tickets sold across all ticket types.",
          "sql_queries": [
            "SELECT c.date, SUM(t.quantity) AS total_tickets_sold\nFROM concerts c\nJOIN tickets t ON c.id = t.concertId\nGROUP BY c.date\nORDER BY total_tickets_sold DESC\nLIMIT 3"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Identify the three concert halls that have hosted concerts with the highest total ticket quantities.",
          "sql_queries": [
            "SELECT c.concertHall, SUM(t.quantity) AS total_quantity\nFROM concerts c\nJOIN tickets t ON c.id = t.concertId\nGROUP BY c.concertHall\nORDER BY total_quantity DESC\nLIMIT 3"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List the three concert dates with the highest number of tickets remaining for sale.",
          "sql_queries": [
            "SELECT c.date \nFROM concerts c \nJOIN tickets t ON c.id = t.concertId \nWHERE t.quantity > 0 \nGROUP BY c.id \nORDER BY SUM(t.quantity) DESC \nLIMIT 3"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Rank the three concert halls with the highest average ticket quantity sold per concert.",
          "sql_queries": [
            "SELECT c.concertHall, AVG(t.quantity) AS avg_quantity\nFROM concerts c\nJOIN tickets t ON c.id = t.concertId\nGROUP BY c.concertHall\nORDER BY avg_quantity DESC\nLIMIT 3"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Entertainment/vague_2cols_location/vague_2cols_location.sqlite",
      "db_dump": "CREATE TABLE artists (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    genre TEXT\n);\nCREATE TABLE bookings (\n    id INTEGER PRIMARY KEY,\n    userId INTEGER,\n    ticketId INTEGER,\n    bookingDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    status TEXT ,\n    FOREIGN KEY(userId) REFERENCES users(id),\n    FOREIGN KEY(ticketId) REFERENCES tickets(id)\n);\nCREATE TABLE concerts (\n    id INTEGER PRIMARY KEY,\n    artistId INTEGER,\n    date DATE,\n    city TEXT,\n    concertHall TEXT,\n    FOREIGN KEY(artistId) REFERENCES artists(id)\n);\nCREATE TABLE tickets (\n    id INTEGER PRIMARY KEY,\n    concertId INTEGER,\n    price DECIMAL(5,2),\n    quantity INTEGER,\n    type TEXT, -- e.g., VIP, General Admission\n    FOREIGN KEY(concertId) REFERENCES concerts(id)\n);\nCREATE TABLE users (\n    id INTEGER PRIMARY KEY,\n    username TEXT,\n    email TEXT,\n    passwordHash TEXT\n);\nCREATE TABLE venues (\n    id INTEGER PRIMARY KEY,\n    venueName TEXT,\n    location TEXT,\n    capacity INTEGER\n);\n\nINSERT INTO \"artists\" (id,name,genre) VALUES (1,'The Beatles','Rock'),(2,'Michael Jackson','Pop'),(3,'Lady Gaga','Pop'),(4,'Elton John','Classic Rock'),(5,'Adele','Pop');\nINSERT INTO \"bookings\" (id,userId,ticketId,bookingDate,status) VALUES (1,1,1,'2024-02-19 13:13:50','Confirmed'),(2,2,2,'2024-02-19 13:13:50','Confirmed'),(3,3,3,'2024-02-19 13:13:50','Confirmed'),(4,4,4,'2024-02-19 13:13:50','Confirmed'),(5,5,5,'2024-02-19 13:13:50','Confirmed');\nINSERT INTO \"concerts\" (id,artistId,date,city,concertHall) VALUES (1,1,'2023-06-01','New York','Madison Square Garden'),(2,2,'2023-07-15','Los Angeles','Staples Center'),(3,3,'2023-08-30','Chicago','United Center'),(4,4,'2023-09-10','Dallas','American Airlines Center'),(5,5,'2023-10-01','Boston','TD Garden');\nINSERT INTO \"tickets\" (id,concertId,price,quantity,type) VALUES (1,1,100,1000,'General Admission'),(2,1,200,500,'VIP'),(3,2,120,1000,'General Admission'),(4,2,220,500,'VIP'),(5,3,150,1000,'General Admission');\nINSERT INTO \"users\" (id,username,email,passwordHash) VALUES (1,'user1','user1@example.com','passwordhash1'),(2,'user2','user2@example.com','passwordhash2'),(3,'user3','user3@example.com','passwordhash3'),(4,'user4','user4@example.com','passwordhash4'),(5,'user5','user5@example.com','passwordhash5');\nINSERT INTO \"venues\" (id,venueName,location,capacity) VALUES (1,'Madison Square Garden','New York',20000),(2,'Staples Center','Los Angeles',19000),(3,'United Center','Chicago',23000),(4,'American Airlines Center','Dallas',19000),(5,'TD Garden','Boston',19000);\n",
      "question": "Using the number of tickets as the criteria for popularity, list the top 3 most popular concert dates and their cities.",
      "gold_queries": [
        "SELECT c.date, c.city FROM `concerts` c JOIN `tickets` t ON c.id = t.concertId GROUP BY c.id ORDER BY SUM(t.quantity) DESC LIMIT 3;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "For each concert, calculate the total number of tickets, rank the concert dates by this total, and display the top 3 with their corresponding cities.",
          "sql_queries": [
            "SELECT c.date, c.city, SUM(t.quantity) AS total_tickets\nFROM concerts c\nJOIN tickets t ON c.id = t.concertId\nGROUP BY c.id\nORDER BY total_tickets DESC\nLIMIT 3"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Identify the 3 concerts with the highest total ticket quantity across all ticket types and return the date and city.",
          "sql_queries": [
            "SELECT c.date, c.city\nFROM concerts c\nJOIN tickets t ON c.id = t.concertId\nGROUP BY c.id\nORDER BY SUM(t.quantity) DESC\nLIMIT 3"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Rank concert dates based on the sum of General Admission and VIP ticket quantities, displaying the top 3 with their cities.",
          "sql_queries": [
            "SELECT c.city, c.date, SUM(t.quantity) as total_tickets\nFROM concerts c\nJOIN tickets t ON c.id = t.concertId\nWHERE t.type IN ('General Admission', 'VIP')\nGROUP BY c.id\nORDER BY total_tickets DESC\nLIMIT 3"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List the top 3 concert dates with the highest quantity of tickets sold, sorted by  total tickets sold, displaying the date and city for each concert.",
          "sql_queries": [
            "SELECT c.date, c.city, SUM(t.quantity) AS total_tickets_sold\nFROM concerts c\nJOIN tickets t ON c.id = t.concertId\nGROUP BY c.id\nORDER BY total_tickets_sold DESC\nLIMIT 3"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Entertainment/vague_2cols_location/vague_2cols_location.sqlite",
      "db_dump": "CREATE TABLE artists (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    genre TEXT\n);\nCREATE TABLE bookings (\n    id INTEGER PRIMARY KEY,\n    userId INTEGER,\n    ticketId INTEGER,\n    bookingDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    status TEXT ,\n    FOREIGN KEY(userId) REFERENCES users(id),\n    FOREIGN KEY(ticketId) REFERENCES tickets(id)\n);\nCREATE TABLE concerts (\n    id INTEGER PRIMARY KEY,\n    artistId INTEGER,\n    date DATE,\n    city TEXT,\n    concertHall TEXT,\n    FOREIGN KEY(artistId) REFERENCES artists(id)\n);\nCREATE TABLE tickets (\n    id INTEGER PRIMARY KEY,\n    concertId INTEGER,\n    price DECIMAL(5,2),\n    quantity INTEGER,\n    type TEXT, -- e.g., VIP, General Admission\n    FOREIGN KEY(concertId) REFERENCES concerts(id)\n);\nCREATE TABLE users (\n    id INTEGER PRIMARY KEY,\n    username TEXT,\n    email TEXT,\n    passwordHash TEXT\n);\nCREATE TABLE venues (\n    id INTEGER PRIMARY KEY,\n    venueName TEXT,\n    location TEXT,\n    capacity INTEGER\n);\n\nINSERT INTO \"artists\" (id,name,genre) VALUES (1,'The Beatles','Rock'),(2,'Michael Jackson','Pop'),(3,'Lady Gaga','Pop'),(4,'Elton John','Classic Rock'),(5,'Adele','Pop');\nINSERT INTO \"bookings\" (id,userId,ticketId,bookingDate,status) VALUES (1,1,1,'2024-02-19 13:13:50','Confirmed'),(2,2,2,'2024-02-19 13:13:50','Confirmed'),(3,3,3,'2024-02-19 13:13:50','Confirmed'),(4,4,4,'2024-02-19 13:13:50','Confirmed'),(5,5,5,'2024-02-19 13:13:50','Confirmed');\nINSERT INTO \"concerts\" (id,artistId,date,city,concertHall) VALUES (1,1,'2023-06-01','New York','Madison Square Garden'),(2,2,'2023-07-15','Los Angeles','Staples Center'),(3,3,'2023-08-30','Chicago','United Center'),(4,4,'2023-09-10','Dallas','American Airlines Center'),(5,5,'2023-10-01','Boston','TD Garden');\nINSERT INTO \"tickets\" (id,concertId,price,quantity,type) VALUES (1,1,100,1000,'General Admission'),(2,1,200,500,'VIP'),(3,2,120,1000,'General Admission'),(4,2,220,500,'VIP'),(5,3,150,1000,'General Admission');\nINSERT INTO \"users\" (id,username,email,passwordHash) VALUES (1,'user1','user1@example.com','passwordhash1'),(2,'user2','user2@example.com','passwordhash2'),(3,'user3','user3@example.com','passwordhash3'),(4,'user4','user4@example.com','passwordhash4'),(5,'user5','user5@example.com','passwordhash5');\nINSERT INTO \"venues\" (id,venueName,location,capacity) VALUES (1,'Madison Square Garden','New York',20000),(2,'Staples Center','Los Angeles',19000),(3,'United Center','Chicago',23000),(4,'American Airlines Center','Dallas',19000),(5,'TD Garden','Boston',19000);\n",
      "question": "In which city and concert hall will user2 go to the concert and who will perform?",
      "gold_queries": [
        "SELECT artists.name, concerts.city, concertHall FROM concerts JOIN tickets ON concerts.id = tickets.concertId JOIN artists ON artists.id = concerts.artistId JOIN bookings ON bookings.ticketId = tickets.id  JOIN users ON bookings.userId = users.id WHERE users.username = \"user2\";"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Find the city and concert hall of the concert booked by user2.",
          "sql_queries": [
            "SELECT c.city, c.concertHall\nFROM concerts c\nJOIN tickets t ON c.id = t.concertId\nJOIN bookings b ON t.id = b.ticketId\nJOIN users u ON b.userId = u.id\nWHERE u.username = 'user2'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve the artist performing at the concert booked by user2.",
          "sql_queries": [
            "SELECT T3.name FROM users AS T1 JOIN bookings AS T2 ON T1.id = T2.userId JOIN tickets AS T4 ON T2.ticketId = T4.id JOIN concerts AS T5 ON T4.concertId = T5.id JOIN artists AS T3 ON T5.artistId = T3.id WHERE T1.username = 'user2'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Identify the concert location and performing artist for user2's ticket purchase.",
          "sql_queries": [
            "SELECT venues.location, artists.name\nFROM bookings\nJOIN tickets ON bookings.ticketId = tickets.id\nJOIN concerts ON tickets.concertId = concerts.id\nJOIN artists ON concerts.artistId = artists.id\nJOIN venues ON concerts.concertHall = venues.venueName\nJOIN users ON bookings.userId = users.id\nWHERE users.username = 'user2'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Determine the city, concert hall, and performing artist for user2's booking.",
          "sql_queries": [
            "SELECT c.city, c.concertHall, a.name\nFROM bookings b\nJOIN tickets t ON b.ticketId = t.id\nJOIN concerts c ON t.concertId = c.id\nJOIN artists a ON c.artistId = a.id\nJOIN users u ON b.userId = u.id\nWHERE u.username = 'user2'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Entertainment/vague_2cols_location/vague_2cols_location.sqlite",
      "db_dump": "CREATE TABLE artists (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    genre TEXT\n);\nCREATE TABLE bookings (\n    id INTEGER PRIMARY KEY,\n    userId INTEGER,\n    ticketId INTEGER,\n    bookingDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    status TEXT ,\n    FOREIGN KEY(userId) REFERENCES users(id),\n    FOREIGN KEY(ticketId) REFERENCES tickets(id)\n);\nCREATE TABLE concerts (\n    id INTEGER PRIMARY KEY,\n    artistId INTEGER,\n    date DATE,\n    city TEXT,\n    concertHall TEXT,\n    FOREIGN KEY(artistId) REFERENCES artists(id)\n);\nCREATE TABLE tickets (\n    id INTEGER PRIMARY KEY,\n    concertId INTEGER,\n    price DECIMAL(5,2),\n    quantity INTEGER,\n    type TEXT, -- e.g., VIP, General Admission\n    FOREIGN KEY(concertId) REFERENCES concerts(id)\n);\nCREATE TABLE users (\n    id INTEGER PRIMARY KEY,\n    username TEXT,\n    email TEXT,\n    passwordHash TEXT\n);\nCREATE TABLE venues (\n    id INTEGER PRIMARY KEY,\n    venueName TEXT,\n    location TEXT,\n    capacity INTEGER\n);\n\nINSERT INTO \"artists\" (id,name,genre) VALUES (1,'The Beatles','Rock'),(2,'Michael Jackson','Pop'),(3,'Lady Gaga','Pop'),(4,'Elton John','Classic Rock'),(5,'Adele','Pop');\nINSERT INTO \"bookings\" (id,userId,ticketId,bookingDate,status) VALUES (1,1,1,'2024-02-19 13:13:50','Confirmed'),(2,2,2,'2024-02-19 13:13:50','Confirmed'),(3,3,3,'2024-02-19 13:13:50','Confirmed'),(4,4,4,'2024-02-19 13:13:50','Confirmed'),(5,5,5,'2024-02-19 13:13:50','Confirmed');\nINSERT INTO \"concerts\" (id,artistId,date,city,concertHall) VALUES (1,1,'2023-06-01','New York','Madison Square Garden'),(2,2,'2023-07-15','Los Angeles','Staples Center'),(3,3,'2023-08-30','Chicago','United Center'),(4,4,'2023-09-10','Dallas','American Airlines Center'),(5,5,'2023-10-01','Boston','TD Garden');\nINSERT INTO \"tickets\" (id,concertId,price,quantity,type) VALUES (1,1,100,1000,'General Admission'),(2,1,200,500,'VIP'),(3,2,120,1000,'General Admission'),(4,2,220,500,'VIP'),(5,3,150,1000,'General Admission');\nINSERT INTO \"users\" (id,username,email,passwordHash) VALUES (1,'user1','user1@example.com','passwordhash1'),(2,'user2','user2@example.com','passwordhash2'),(3,'user3','user3@example.com','passwordhash3'),(4,'user4','user4@example.com','passwordhash4'),(5,'user5','user5@example.com','passwordhash5');\nINSERT INTO \"venues\" (id,venueName,location,capacity) VALUES (1,'Madison Square Garden','New York',20000),(2,'Staples Center','Los Angeles',19000),(3,'United Center','Chicago',23000),(4,'American Airlines Center','Dallas',19000),(5,'TD Garden','Boston',19000);\n",
      "question": "List all the concert dates, cities, concert halls, types of ticket and the total number of tickets sold, sorted by highest ticket sales.",
      "gold_queries": [
        "SELECT c.date, c.city, concertHall, t.type AS ticket_type, SUM(t.quantity) as total_tickets_sold FROM `concerts` c JOIN `tickets` t ON c.id = t.concertId GROUP BY c.id ORDER BY SUM(t.quantity) DESC;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Retrieve a list of all concerts, including date, city, concert hall, and ticket type data. Include a count of total tickets sold for each concert, ordered from highest to lowest sales.",
          "sql_queries": [
            "SELECT c.date, c.city, c.concertHall, t.type, SUM(t.quantity) AS totalTicketsSold\nFROM concerts c\nJOIN tickets t ON c.id = t.concertId\nGROUP BY c.id, t.type\nORDER BY totalTicketsSold DESC"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Calculate the total number of tickets sold for each unique concert (date, city, hall) and display the result with corresponding ticket types, sorted by total sales in descending order.",
          "sql_queries": [
            "SELECT c.date, c.city, c.concertHall, t.type, SUM(t.quantity) AS total_tickets_sold\nFROM concerts c\nJOIN tickets t ON c.id = t.concertId\nGROUP BY c.id, t.type\nORDER BY total_tickets_sold DESC"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all concert dates, cities, concert halls, ticket types, and total tickets sold, sorted by total sales descending.",
          "sql_queries": [
            "SELECT c.date, c.city, c.concertHall, t.type, SUM(t.quantity) AS total_tickets_sold\nFROM concerts c\nJOIN tickets t ON c.id = t.concertId\nGROUP BY c.id, t.type\nORDER BY total_tickets_sold DESC"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "For each concert, display the date, city, concert hall, ticket types, and the aggregate sum of tickets sold for all types, ranked by highest total sales.",
          "sql_queries": [
            "SELECT \n    concerts.date,\n    concerts.city,\n    concerts.concertHall,\n    GROUP_CONCAT(tickets.type) AS ticketTypes,\n    SUM(bookings.quantity) AS totalTicketsSold\nFROM \n    concerts\nJOIN \n    tickets ON concerts.id = tickets.concertId\nJOIN \n    bookings ON tickets.id = bookings.ticketId\nGROUP BY \n    concerts.id\nORDER BY \n    totalTicketsSold DESC"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT \n    concerts.date,\n    concerts.city,\n    concerts.concertHall,\n    GROUP_CONCAT(tickets.type) AS ticketTypes,\n    SUM(bookings.quantity) AS totalTicketsSold\nFROM \n    concerts\nJOIN \n    tickets ON concerts.id = tickets.concertId\nJOIN \n    bookings ON tickets.id = bookings.ticketId\nGROUP BY \n    concerts.id\nORDER BY \n    totalTicketsSold DESC",
                "original_exception": "no such column: bookings.quantity"
              }
            ],
            "all_found": false
          }
        },
        {
          "interpretation": "List distinct concert dates, cities, concert halls, ticket types, and the total number of tickets sold for each combination, ordered by overall sales volume.",
          "sql_queries": [
            "SELECT \n    c.date, \n    c.city, \n    c.concertHall, \n    t.type, \n    SUM(t.quantity) AS total_tickets_sold\nFROM \n    concerts c\nJOIN \n    tickets t ON c.id = t.concertId\nGROUP BY \n    c.date, \n    c.city, \n    c.concertHall, \n    t.type\nORDER BY \n    total_tickets_sold DESC"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [
          {
            "query": "SELECT \n    concerts.date,\n    concerts.city,\n    concerts.concertHall,\n    GROUP_CONCAT(tickets.type) AS ticketTypes,\n    SUM(bookings.quantity) AS totalTicketsSold\nFROM \n    concerts\nJOIN \n    tickets ON concerts.id = tickets.concertId\nJOIN \n    bookings ON tickets.id = bookings.ticketId\nGROUP BY \n    concerts.id\nORDER BY \n    totalTicketsSold DESC",
            "original_exception": "no such column: bookings.quantity"
          }
        ],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Entertainment/vague_2cols_location/vague_2cols_location.sqlite",
      "db_dump": "CREATE TABLE artists (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    genre TEXT\n);\nCREATE TABLE bookings (\n    id INTEGER PRIMARY KEY,\n    userId INTEGER,\n    ticketId INTEGER,\n    bookingDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    status TEXT ,\n    FOREIGN KEY(userId) REFERENCES users(id),\n    FOREIGN KEY(ticketId) REFERENCES tickets(id)\n);\nCREATE TABLE concerts (\n    id INTEGER PRIMARY KEY,\n    artistId INTEGER,\n    date DATE,\n    city TEXT,\n    concertHall TEXT,\n    FOREIGN KEY(artistId) REFERENCES artists(id)\n);\nCREATE TABLE tickets (\n    id INTEGER PRIMARY KEY,\n    concertId INTEGER,\n    price DECIMAL(5,2),\n    quantity INTEGER,\n    type TEXT, -- e.g., VIP, General Admission\n    FOREIGN KEY(concertId) REFERENCES concerts(id)\n);\nCREATE TABLE users (\n    id INTEGER PRIMARY KEY,\n    username TEXT,\n    email TEXT,\n    passwordHash TEXT\n);\nCREATE TABLE venues (\n    id INTEGER PRIMARY KEY,\n    venueName TEXT,\n    location TEXT,\n    capacity INTEGER\n);\n\nINSERT INTO \"artists\" (id,name,genre) VALUES (1,'The Beatles','Rock'),(2,'Michael Jackson','Pop'),(3,'Lady Gaga','Pop'),(4,'Elton John','Classic Rock'),(5,'Adele','Pop');\nINSERT INTO \"bookings\" (id,userId,ticketId,bookingDate,status) VALUES (1,1,1,'2024-02-19 13:13:50','Confirmed'),(2,2,2,'2024-02-19 13:13:50','Confirmed'),(3,3,3,'2024-02-19 13:13:50','Confirmed'),(4,4,4,'2024-02-19 13:13:50','Confirmed'),(5,5,5,'2024-02-19 13:13:50','Confirmed');\nINSERT INTO \"concerts\" (id,artistId,date,city,concertHall) VALUES (1,1,'2023-06-01','New York','Madison Square Garden'),(2,2,'2023-07-15','Los Angeles','Staples Center'),(3,3,'2023-08-30','Chicago','United Center'),(4,4,'2023-09-10','Dallas','American Airlines Center'),(5,5,'2023-10-01','Boston','TD Garden');\nINSERT INTO \"tickets\" (id,concertId,price,quantity,type) VALUES (1,1,100,1000,'General Admission'),(2,1,200,500,'VIP'),(3,2,120,1000,'General Admission'),(4,2,220,500,'VIP'),(5,3,150,1000,'General Admission');\nINSERT INTO \"users\" (id,username,email,passwordHash) VALUES (1,'user1','user1@example.com','passwordhash1'),(2,'user2','user2@example.com','passwordhash2'),(3,'user3','user3@example.com','passwordhash3'),(4,'user4','user4@example.com','passwordhash4'),(5,'user5','user5@example.com','passwordhash5');\nINSERT INTO \"venues\" (id,venueName,location,capacity) VALUES (1,'Madison Square Garden','New York',20000),(2,'Staples Center','Los Angeles',19000),(3,'United Center','Chicago',23000),(4,'American Airlines Center','Dallas',19000),(5,'TD Garden','Boston',19000);\n",
      "question": "List all the concert dates, concert halls, types of ticket and the total number of tickets sold, sorted by highest ticket sales.",
      "gold_queries": [
        "SELECT c.date, c.concertHall, t.type AS ticket_type, SUM(t.quantity) as total_tickets_sold FROM `concerts` c JOIN `tickets` t ON c.id = t.concertId GROUP BY c.id ORDER BY SUM(t.quantity) DESC;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "For each concert date, concert hall, and ticket type, retrieve the total tickets sold, then order these results from highest to lowest sales.",
          "sql_queries": [
            "SELECT concerts.date, concerts.concertHall, tickets.type, SUM(tickets.quantity) AS total_tickets_sold\nFROM concerts\nJOIN tickets ON concerts.id = tickets.concertId\nGROUP BY concerts.date, concerts.concertHall, tickets.type\nORDER BY total_tickets_sold DESC"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all unique concert dates, concert halls, and ticket types, with the total number of tickets sold for each combination, sorted in descending order of sale count.",
          "sql_queries": [
            "SELECT concerts.date, concerts.concertHall, tickets.type, COUNT(bookings.id) AS totalTicketsSold\nFROM concerts\nJOIN tickets ON concerts.id = tickets.concertId\nJOIN bookings ON tickets.id = bookings.ticketId\nGROUP BY concerts.date, concerts.concertHall, tickets.type\nORDER BY totalTicketsSold DESC"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List all distinct concert dates, concert halls, and ticket types, ordered by descending total ticket sales.",
          "sql_queries": [
            "SELECT DISTINCT c.date, c.concertHall, t.type\nFROM concerts c\nJOIN tickets t ON c.id = t.concertId\nJOIN bookings b ON t.id = b.ticketId\nGROUP BY c.date, c.concertHall, t.type\nORDER BY SUM(b.quantity) * t.price DESC"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT DISTINCT c.date, c.concertHall, t.type\nFROM concerts c\nJOIN tickets t ON c.id = t.concertId\nJOIN bookings b ON t.id = b.ticketId\nGROUP BY c.date, c.concertHall, t.type\nORDER BY SUM(b.quantity) * t.price DESC",
                "original_exception": "no such column: b.quantity"
              }
            ],
            "all_found": false
          }
        },
        {
          "interpretation": "Show a breakdown of concert dates, concert halls, ticket types, and the corresponding total tickets sold, ranked by total tickets sold in descending order.",
          "sql_queries": [
            "SELECT c.date, c.concertHall, t.type, SUM(t.quantity) AS total_tickets_sold\nFROM concerts c\nJOIN tickets t ON c.id = t.concertId\nGROUP BY c.date, c.concertHall, t.type\nORDER BY total_tickets_sold DESC"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [
          {
            "query": "SELECT DISTINCT c.date, c.concertHall, t.type\nFROM concerts c\nJOIN tickets t ON c.id = t.concertId\nJOIN bookings b ON t.id = b.ticketId\nGROUP BY c.date, c.concertHall, t.type\nORDER BY SUM(b.quantity) * t.price DESC",
            "original_exception": "no such column: b.quantity"
          }
        ],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Entertainment/vague_2cols_location/vague_2cols_location.sqlite",
      "db_dump": "CREATE TABLE artists (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    genre TEXT\n);\nCREATE TABLE bookings (\n    id INTEGER PRIMARY KEY,\n    userId INTEGER,\n    ticketId INTEGER,\n    bookingDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    status TEXT ,\n    FOREIGN KEY(userId) REFERENCES users(id),\n    FOREIGN KEY(ticketId) REFERENCES tickets(id)\n);\nCREATE TABLE concerts (\n    id INTEGER PRIMARY KEY,\n    artistId INTEGER,\n    date DATE,\n    city TEXT,\n    concertHall TEXT,\n    FOREIGN KEY(artistId) REFERENCES artists(id)\n);\nCREATE TABLE tickets (\n    id INTEGER PRIMARY KEY,\n    concertId INTEGER,\n    price DECIMAL(5,2),\n    quantity INTEGER,\n    type TEXT, -- e.g., VIP, General Admission\n    FOREIGN KEY(concertId) REFERENCES concerts(id)\n);\nCREATE TABLE users (\n    id INTEGER PRIMARY KEY,\n    username TEXT,\n    email TEXT,\n    passwordHash TEXT\n);\nCREATE TABLE venues (\n    id INTEGER PRIMARY KEY,\n    venueName TEXT,\n    location TEXT,\n    capacity INTEGER\n);\n\nINSERT INTO \"artists\" (id,name,genre) VALUES (1,'The Beatles','Rock'),(2,'Michael Jackson','Pop'),(3,'Lady Gaga','Pop'),(4,'Elton John','Classic Rock'),(5,'Adele','Pop');\nINSERT INTO \"bookings\" (id,userId,ticketId,bookingDate,status) VALUES (1,1,1,'2024-02-19 13:13:50','Confirmed'),(2,2,2,'2024-02-19 13:13:50','Confirmed'),(3,3,3,'2024-02-19 13:13:50','Confirmed'),(4,4,4,'2024-02-19 13:13:50','Confirmed'),(5,5,5,'2024-02-19 13:13:50','Confirmed');\nINSERT INTO \"concerts\" (id,artistId,date,city,concertHall) VALUES (1,1,'2023-06-01','New York','Madison Square Garden'),(2,2,'2023-07-15','Los Angeles','Staples Center'),(3,3,'2023-08-30','Chicago','United Center'),(4,4,'2023-09-10','Dallas','American Airlines Center'),(5,5,'2023-10-01','Boston','TD Garden');\nINSERT INTO \"tickets\" (id,concertId,price,quantity,type) VALUES (1,1,100,1000,'General Admission'),(2,1,200,500,'VIP'),(3,2,120,1000,'General Admission'),(4,2,220,500,'VIP'),(5,3,150,1000,'General Admission');\nINSERT INTO \"users\" (id,username,email,passwordHash) VALUES (1,'user1','user1@example.com','passwordhash1'),(2,'user2','user2@example.com','passwordhash2'),(3,'user3','user3@example.com','passwordhash3'),(4,'user4','user4@example.com','passwordhash4'),(5,'user5','user5@example.com','passwordhash5');\nINSERT INTO \"venues\" (id,venueName,location,capacity) VALUES (1,'Madison Square Garden','New York',20000),(2,'Staples Center','Los Angeles',19000),(3,'United Center','Chicago',23000),(4,'American Airlines Center','Dallas',19000),(5,'TD Garden','Boston',19000);\n",
      "question": "In which concert hall will user2 go to the concert and who will perform?",
      "gold_queries": [
        "SELECT artists.name, concerts.concertHall FROM concerts JOIN tickets ON concerts.id = tickets.concertId JOIN artists ON artists.id = concerts.artistId JOIN bookings ON bookings.ticketId = tickets.id  JOIN users ON bookings.userId = users.id WHERE users.username = \"user2\";"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Find the concert hall and artist of the concert user2 has a booking for.",
          "sql_queries": [
            "SELECT c.concertHall, a.name \nFROM bookings b\nJOIN tickets t ON b.ticketId = t.id\nJOIN concerts c ON t.concertId = c.id\nJOIN artists a ON c.artistId = a.id\nJOIN users u ON b.userId = u.id\nWHERE u.username = 'user2'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Identify the concert hall and performing artist associated with user2's booking.",
          "sql_queries": [
            "SELECT c.concertHall, a.name\nFROM bookings b\nJOIN tickets t ON b.ticketId = t.id\nJOIN concerts c ON t.concertId = c.id\nJOIN artists a ON c.artistId = a.id\nJOIN users u ON b.userId = u.id\nWHERE u.username = 'user2'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Retrieve the concert hall name and artist name for the concert attended by user with id 2.",
          "sql_queries": [
            "SELECT T3.concertHall, T4.name \nFROM bookings AS T1 \nJOIN tickets AS T2 ON T1.ticketId = T2.id \nJOIN concerts AS T3 ON T2.concertId = T3.id \nJOIN artists AS T4 ON T3.artistId = T4.id \nWHERE T1.userId = 2"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/vague/Entertainment/vague_2cols_location/vague_2cols_location.sqlite",
      "db_dump": "CREATE TABLE artists (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    genre TEXT\n);\nCREATE TABLE bookings (\n    id INTEGER PRIMARY KEY,\n    userId INTEGER,\n    ticketId INTEGER,\n    bookingDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    status TEXT ,\n    FOREIGN KEY(userId) REFERENCES users(id),\n    FOREIGN KEY(ticketId) REFERENCES tickets(id)\n);\nCREATE TABLE concerts (\n    id INTEGER PRIMARY KEY,\n    artistId INTEGER,\n    date DATE,\n    city TEXT,\n    concertHall TEXT,\n    FOREIGN KEY(artistId) REFERENCES artists(id)\n);\nCREATE TABLE tickets (\n    id INTEGER PRIMARY KEY,\n    concertId INTEGER,\n    price DECIMAL(5,2),\n    quantity INTEGER,\n    type TEXT, -- e.g., VIP, General Admission\n    FOREIGN KEY(concertId) REFERENCES concerts(id)\n);\nCREATE TABLE users (\n    id INTEGER PRIMARY KEY,\n    username TEXT,\n    email TEXT,\n    passwordHash TEXT\n);\nCREATE TABLE venues (\n    id INTEGER PRIMARY KEY,\n    venueName TEXT,\n    location TEXT,\n    capacity INTEGER\n);\n\nINSERT INTO \"artists\" (id,name,genre) VALUES (1,'The Beatles','Rock'),(2,'Michael Jackson','Pop'),(3,'Lady Gaga','Pop'),(4,'Elton John','Classic Rock'),(5,'Adele','Pop');\nINSERT INTO \"bookings\" (id,userId,ticketId,bookingDate,status) VALUES (1,1,1,'2024-02-19 13:13:50','Confirmed'),(2,2,2,'2024-02-19 13:13:50','Confirmed'),(3,3,3,'2024-02-19 13:13:50','Confirmed'),(4,4,4,'2024-02-19 13:13:50','Confirmed'),(5,5,5,'2024-02-19 13:13:50','Confirmed');\nINSERT INTO \"concerts\" (id,artistId,date,city,concertHall) VALUES (1,1,'2023-06-01','New York','Madison Square Garden'),(2,2,'2023-07-15','Los Angeles','Staples Center'),(3,3,'2023-08-30','Chicago','United Center'),(4,4,'2023-09-10','Dallas','American Airlines Center'),(5,5,'2023-10-01','Boston','TD Garden');\nINSERT INTO \"tickets\" (id,concertId,price,quantity,type) VALUES (1,1,100,1000,'General Admission'),(2,1,200,500,'VIP'),(3,2,120,1000,'General Admission'),(4,2,220,500,'VIP'),(5,3,150,1000,'General Admission');\nINSERT INTO \"users\" (id,username,email,passwordHash) VALUES (1,'user1','user1@example.com','passwordhash1'),(2,'user2','user2@example.com','passwordhash2'),(3,'user3','user3@example.com','passwordhash3'),(4,'user4','user4@example.com','passwordhash4'),(5,'user5','user5@example.com','passwordhash5');\nINSERT INTO \"venues\" (id,venueName,location,capacity) VALUES (1,'Madison Square Garden','New York',20000),(2,'Staples Center','Los Angeles',19000),(3,'United Center','Chicago',23000),(4,'American Airlines Center','Dallas',19000),(5,'TD Garden','Boston',19000);\n",
      "question": "Using the number of tickets as the criteria for popularity, list the top 3 most popular concert dates, their cities and their concert halls.",
      "gold_queries": [
        "SELECT c.date, c.city, concertHall FROM `concerts` c JOIN `tickets` t ON c.id = t.concertId GROUP BY c.id ORDER BY SUM(t.quantity) DESC LIMIT 3;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Return the top 3 concert dates based on the combined ticket quantities of all ticket types sold.",
          "sql_queries": [
            "SELECT c.date \nFROM concerts c \nJOIN tickets t ON c.id = t.concertId \nGROUP BY c.date \nORDER BY SUM(t.quantity) DESC \nLIMIT 3"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Identify the 3 concert dates that have sold the most tickets individually, sorting by ticket quantity.",
          "sql_queries": [
            "SELECT c.date, SUM(t.quantity) AS total_tickets_sold\nFROM concerts c\nJOIN tickets t ON c.id = t.concertId\nGROUP BY c.id\nORDER BY total_tickets_sold DESC\nLIMIT 3"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List the top 3 concert dates with the highest total ticket quantity sold, along with their cities and concert halls.",
          "sql_queries": [
            "SELECT c.date, c.city, c.concertHall\nFROM concerts c\nJOIN tickets t ON c.id = t.concertId\nGROUP BY c.id, c.date, c.city, c.concertHall\nORDER BY SUM(t.quantity) DESC\nLIMIT 3"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Demographics/vague_2cols_speakers/vague_2cols_speakers.sqlite",
      "db_dump": "CREATE TABLE AgeGroup (AgeGroupID INTEGER PRIMARY KEY, LowerBound INTEGER, UpperBound INTEGER, TotalPopulation INTEGER, CityID INTEGER, FOREIGN KEY(CityID) REFERENCES City(CityID));\nCREATE TABLE City (CityID INTEGER PRIMARY KEY, Name TEXT, Population INTEGER, ForeignKeyID INTEGER, FOREIGN KEY(ForeignKeyID) REFERENCES Country(CountryID));\nCREATE TABLE Country (CountryID INTEGER PRIMARY KEY, Name TEXT);\nCREATE TABLE EducationLevel (EducationLevelID INTEGER PRIMARY KEY, LevelName TEXT, CityID INTEGER, TotalEnrolled INTEGER, TotalGraduated INTEGER, FOREIGN KEY(CityID) REFERENCES City(CityID));\nCREATE TABLE EthnicGroup (EthnicGroupID INTEGER PRIMARY KEY, GroupName TEXT, Population INTEGER, CityID INTEGER, FOREIGN KEY(CityID) REFERENCES City(CityID));\nCREATE TABLE \"Language\" (LanguageID INTEGER PRIMARY KEY, Name TEXT, Number_of_speakers INTEGER, Percentage_of_population REAL);\n\nINSERT INTO \"AgeGroup\" (AgeGroupID,LowerBound,UpperBound,TotalPopulation,CityID) VALUES (1,0,17,8200000,1),(2,18,24,7500000,2);\nINSERT INTO \"City\" (CityID,Name,Population,ForeignKeyID) VALUES (1,'New York',8419000,1),(2,'London',8982000,2);\nINSERT INTO \"Country\" (CountryID,Name) VALUES (1,'USA'),(2,'UK');\nINSERT INTO \"EducationLevel\" (EducationLevelID,LevelName,CityID,TotalEnrolled,TotalGraduated) VALUES (1,'Primary School',1,2000000,1500000),(2,'Secondary School',1,1500000,1200000),(3,'University',1,100000,80000),(4,'Postgraduate',1,30000,20000),(5,'Vocational Training',1,100000,75000);\nINSERT INTO \"EthnicGroup\" (EthnicGroupID,GroupName,Population,CityID) VALUES (1,'Hispanic',5900000,1),(2,'White British',5400000,2);\nINSERT INTO \"Language\" (LanguageID,Name,Number_of_speakers,Percentage_of_population) VALUES (1,'English',379000000,68.0),(2,'Spanish',41300000,7.5);\n",
      "question": "How many people speak different languages?",
      "gold_queries": [
        "SELECT Name, Number_of_speakers FROM Language",
        "SELECT Name, Percentage_of_population FROM Language",
        "SELECT Name, Number_of_speakers, Percentage_of_population FROM Language"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What is the total number of speakers across all languages?",
          "sql_queries": [
            "SELECT SUM(Number_of_speakers) FROM Language"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "How many distinct languages are spoken?",
          "sql_queries": [
            "SELECT COUNT(LanguageID) FROM Language"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "How many people speak at least two languages?",
          "sql_queries": [
            "SELECT SUM(Number_of_speakers) - MAX(Number_of_speakers) FROM Language"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Demographics/vague_2cols_speakers/vague_2cols_speakers.sqlite",
      "db_dump": "CREATE TABLE AgeGroup (AgeGroupID INTEGER PRIMARY KEY, LowerBound INTEGER, UpperBound INTEGER, TotalPopulation INTEGER, CityID INTEGER, FOREIGN KEY(CityID) REFERENCES City(CityID));\nCREATE TABLE City (CityID INTEGER PRIMARY KEY, Name TEXT, Population INTEGER, ForeignKeyID INTEGER, FOREIGN KEY(ForeignKeyID) REFERENCES Country(CountryID));\nCREATE TABLE Country (CountryID INTEGER PRIMARY KEY, Name TEXT);\nCREATE TABLE EducationLevel (EducationLevelID INTEGER PRIMARY KEY, LevelName TEXT, CityID INTEGER, TotalEnrolled INTEGER, TotalGraduated INTEGER, FOREIGN KEY(CityID) REFERENCES City(CityID));\nCREATE TABLE EthnicGroup (EthnicGroupID INTEGER PRIMARY KEY, GroupName TEXT, Population INTEGER, CityID INTEGER, FOREIGN KEY(CityID) REFERENCES City(CityID));\nCREATE TABLE \"Language\" (LanguageID INTEGER PRIMARY KEY, Name TEXT, Number_of_speakers INTEGER, Percentage_of_population REAL);\n\nINSERT INTO \"AgeGroup\" (AgeGroupID,LowerBound,UpperBound,TotalPopulation,CityID) VALUES (1,0,17,8200000,1),(2,18,24,7500000,2);\nINSERT INTO \"City\" (CityID,Name,Population,ForeignKeyID) VALUES (1,'New York',8419000,1),(2,'London',8982000,2);\nINSERT INTO \"Country\" (CountryID,Name) VALUES (1,'USA'),(2,'UK');\nINSERT INTO \"EducationLevel\" (EducationLevelID,LevelName,CityID,TotalEnrolled,TotalGraduated) VALUES (1,'Primary School',1,2000000,1500000),(2,'Secondary School',1,1500000,1200000),(3,'University',1,100000,80000),(4,'Postgraduate',1,30000,20000),(5,'Vocational Training',1,100000,75000);\nINSERT INTO \"EthnicGroup\" (EthnicGroupID,GroupName,Population,CityID) VALUES (1,'Hispanic',5900000,1),(2,'White British',5400000,2);\nINSERT INTO \"Language\" (LanguageID,Name,Number_of_speakers,Percentage_of_population) VALUES (1,'English',379000000,68.0),(2,'Spanish',41300000,7.5);\n",
      "question": "What percentage of the population speak each language?",
      "gold_queries": [
        "SELECT Name, Percentage_of_population FROM Language"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What is the percentage of the total population in each country that speaks each language?",
          "sql_queries": [
            "SELECT C.Name, L.Name, (L.Number_of_speakers * 1.0 / SUM(C2.Population) * 100) AS Percentage\nFROM Language L\nJOIN City C2 ON L.Number_of_speakers <= C2.Population\nJOIN City C ON C.ForeignKeyID = (SELECT CountryID FROM City WHERE CityID = C2.CityID)\nGROUP BY C.Name, L.Name"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT C.Name, L.Name, (L.Number_of_speakers * 1.0 / SUM(C2.Population) * 100) AS Percentage\nFROM Language L\nJOIN City C2 ON L.Number_of_speakers <= C2.Population\nJOIN City C ON C.ForeignKeyID = (SELECT CountryID FROM City WHERE CityID = C2.CityID)\nGROUP BY C.Name, L.Name",
                "original_exception": "no such column: CountryID"
              }
            ],
            "all_found": false
          }
        },
        {
          "interpretation": "What is the percentage of the population in each age group that speaks each language?",
          "sql_queries": [
            "SELECT A.AgeGroupID, A.LowerBound, A.UpperBound, L.Name AS LanguageName, (1.0 * A.TotalPopulation * L.Number_of_speakers) / (C.Population * L.Number_of_speakers) * 100 AS Percentage\nFROM AgeGroup A\nJOIN City C ON A.CityID = C.CityID\nJOIN Language L ON L.LanguageID = L.LanguageID"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "What is the percentage of each city's population that speaks each language?",
          "sql_queries": [
            "SELECT c.Name, l.Name, (l.Number_of_speakers * 1.0 / c.Population) * 100 AS Percentage\nFROM Language l\nJOIN City c ON l.Number_of_speakers = c.Population"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "What is the percentage of each ethnic group's population that speaks each language?",
          "sql_queries": [
            "SELECT E.GroupName, L.Name, (L.Number_of_speakers * E.Population / C.Population * L.Percentage_of_population) AS Percentage_Speaking\nFROM EthnicGroup E\nJOIN City C ON E.CityID = C.CityID\nJOIN Language L ON C.Name = L.Name"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "What is the percentage breakdown of speakers for each language across all languages?",
          "sql_queries": [
            "SELECT Name, Percentage_of_population FROM Language"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [
          {
            "query": "SELECT C.Name, L.Name, (L.Number_of_speakers * 1.0 / SUM(C2.Population) * 100) AS Percentage\nFROM Language L\nJOIN City C2 ON L.Number_of_speakers <= C2.Population\nJOIN City C ON C.ForeignKeyID = (SELECT CountryID FROM City WHERE CityID = C2.CityID)\nGROUP BY C.Name, L.Name",
            "original_exception": "no such column: CountryID"
          }
        ],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Demographics/vague_2cols_speakers/vague_2cols_speakers.sqlite",
      "db_dump": "CREATE TABLE AgeGroup (AgeGroupID INTEGER PRIMARY KEY, LowerBound INTEGER, UpperBound INTEGER, TotalPopulation INTEGER, CityID INTEGER, FOREIGN KEY(CityID) REFERENCES City(CityID));\nCREATE TABLE City (CityID INTEGER PRIMARY KEY, Name TEXT, Population INTEGER, ForeignKeyID INTEGER, FOREIGN KEY(ForeignKeyID) REFERENCES Country(CountryID));\nCREATE TABLE Country (CountryID INTEGER PRIMARY KEY, Name TEXT);\nCREATE TABLE EducationLevel (EducationLevelID INTEGER PRIMARY KEY, LevelName TEXT, CityID INTEGER, TotalEnrolled INTEGER, TotalGraduated INTEGER, FOREIGN KEY(CityID) REFERENCES City(CityID));\nCREATE TABLE EthnicGroup (EthnicGroupID INTEGER PRIMARY KEY, GroupName TEXT, Population INTEGER, CityID INTEGER, FOREIGN KEY(CityID) REFERENCES City(CityID));\nCREATE TABLE \"Language\" (LanguageID INTEGER PRIMARY KEY, Name TEXT, Number_of_speakers INTEGER, Percentage_of_population REAL);\n\nINSERT INTO \"AgeGroup\" (AgeGroupID,LowerBound,UpperBound,TotalPopulation,CityID) VALUES (1,0,17,8200000,1),(2,18,24,7500000,2);\nINSERT INTO \"City\" (CityID,Name,Population,ForeignKeyID) VALUES (1,'New York',8419000,1),(2,'London',8982000,2);\nINSERT INTO \"Country\" (CountryID,Name) VALUES (1,'USA'),(2,'UK');\nINSERT INTO \"EducationLevel\" (EducationLevelID,LevelName,CityID,TotalEnrolled,TotalGraduated) VALUES (1,'Primary School',1,2000000,1500000),(2,'Secondary School',1,1500000,1200000),(3,'University',1,100000,80000),(4,'Postgraduate',1,30000,20000),(5,'Vocational Training',1,100000,75000);\nINSERT INTO \"EthnicGroup\" (EthnicGroupID,GroupName,Population,CityID) VALUES (1,'Hispanic',5900000,1),(2,'White British',5400000,2);\nINSERT INTO \"Language\" (LanguageID,Name,Number_of_speakers,Percentage_of_population) VALUES (1,'English',379000000,68.0),(2,'Spanish',41300000,7.5);\n",
      "question": "What number of people speak each language?",
      "gold_queries": [
        "SELECT Name, Number_of_speakers FROM Language"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Number of speakers for each language.",
          "sql_queries": [
            "SELECT Name, Number_of_speakers FROM Language"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Language speaker distribution.",
          "sql_queries": [
            "SELECT Name, Number_of_speakers, Percentage_of_population FROM Language"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Population count for languages.",
          "sql_queries": [
            "SELECT LanguageID, Name, Number_of_speakers \nFROM Language"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Count of individuals per spoken language.",
          "sql_queries": [
            "SELECT Name, Number_of_speakers FROM Language"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Individuals speaking each language.",
          "sql_queries": [
            "SELECT Name, Number_of_speakers FROM Language"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Total speakers per language.",
          "sql_queries": [
            "SELECT Number_of_speakers FROM Language"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 6,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/vague/Demographics/vague_2cols_speakers/vague_2cols_speakers.sqlite",
      "db_dump": "CREATE TABLE AgeGroup (AgeGroupID INTEGER PRIMARY KEY, LowerBound INTEGER, UpperBound INTEGER, TotalPopulation INTEGER, CityID INTEGER, FOREIGN KEY(CityID) REFERENCES City(CityID));\nCREATE TABLE City (CityID INTEGER PRIMARY KEY, Name TEXT, Population INTEGER, ForeignKeyID INTEGER, FOREIGN KEY(ForeignKeyID) REFERENCES Country(CountryID));\nCREATE TABLE Country (CountryID INTEGER PRIMARY KEY, Name TEXT);\nCREATE TABLE EducationLevel (EducationLevelID INTEGER PRIMARY KEY, LevelName TEXT, CityID INTEGER, TotalEnrolled INTEGER, TotalGraduated INTEGER, FOREIGN KEY(CityID) REFERENCES City(CityID));\nCREATE TABLE EthnicGroup (EthnicGroupID INTEGER PRIMARY KEY, GroupName TEXT, Population INTEGER, CityID INTEGER, FOREIGN KEY(CityID) REFERENCES City(CityID));\nCREATE TABLE \"Language\" (LanguageID INTEGER PRIMARY KEY, Name TEXT, Number_of_speakers INTEGER, Percentage_of_population REAL);\n\nINSERT INTO \"AgeGroup\" (AgeGroupID,LowerBound,UpperBound,TotalPopulation,CityID) VALUES (1,0,17,8200000,1),(2,18,24,7500000,2);\nINSERT INTO \"City\" (CityID,Name,Population,ForeignKeyID) VALUES (1,'New York',8419000,1),(2,'London',8982000,2);\nINSERT INTO \"Country\" (CountryID,Name) VALUES (1,'USA'),(2,'UK');\nINSERT INTO \"EducationLevel\" (EducationLevelID,LevelName,CityID,TotalEnrolled,TotalGraduated) VALUES (1,'Primary School',1,2000000,1500000),(2,'Secondary School',1,1500000,1200000),(3,'University',1,100000,80000),(4,'Postgraduate',1,30000,20000),(5,'Vocational Training',1,100000,75000);\nINSERT INTO \"EthnicGroup\" (EthnicGroupID,GroupName,Population,CityID) VALUES (1,'Hispanic',5900000,1),(2,'White British',5400000,2);\nINSERT INTO \"Language\" (LanguageID,Name,Number_of_speakers,Percentage_of_population) VALUES (1,'English',379000000,68.0),(2,'Spanish',41300000,7.5);\n",
      "question": "What is the number of people and percentage of population that speak each language?",
      "gold_queries": [
        "SELECT Name, Number_of_speakers, Percentage_of_population FROM Language"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Provide a count of individuals speaking each language and the corresponding population percentage.",
          "sql_queries": [
            "SELECT Name, Number_of_speakers, Percentage_of_population FROM Language"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "List the number of speakers and percentage of population for every language.",
          "sql_queries": [
            "SELECT Number_of_speakers, Percentage_of_population FROM Language"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Calculate the population speaking each language and their respective percentages.",
          "sql_queries": [
            "SELECT Name, Number_of_speakers, Percentage_of_population FROM Language"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Retrieve the number of speakers and percentage of population for each language.",
          "sql_queries": [
            "SELECT Number_of_speakers, Percentage_of_population FROM Language"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 4,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Entertainment/vague_2cols_location/vague_2cols_location.sqlite",
      "db_dump": "CREATE TABLE artists (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    genre TEXT\n);\nCREATE TABLE bookings (\n    id INTEGER PRIMARY KEY,\n    userId INTEGER,\n    ticketId INTEGER,\n    bookingDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    status TEXT ,\n    FOREIGN KEY(userId) REFERENCES users(id),\n    FOREIGN KEY(ticketId) REFERENCES tickets(id)\n);\nCREATE TABLE concerts (\n    id INTEGER PRIMARY KEY,\n    artistId INTEGER,\n    date DATE,\n    city TEXT,\n    concertHall TEXT,\n    FOREIGN KEY(artistId) REFERENCES artists(id)\n);\nCREATE TABLE tickets (\n    id INTEGER PRIMARY KEY,\n    concertId INTEGER,\n    price DECIMAL(5,2),\n    quantity INTEGER,\n    type TEXT, -- e.g., VIP, General Admission\n    FOREIGN KEY(concertId) REFERENCES concerts(id)\n);\nCREATE TABLE users (\n    id INTEGER PRIMARY KEY,\n    username TEXT,\n    email TEXT,\n    passwordHash TEXT\n);\nCREATE TABLE venues (\n    id INTEGER PRIMARY KEY,\n    venueName TEXT,\n    location TEXT,\n    capacity INTEGER\n);\n\nINSERT INTO \"artists\" (id,name,genre) VALUES (1,'The Beatles','Rock'),(2,'Michael Jackson','Pop'),(3,'Lady Gaga','Pop'),(4,'Elton John','Classic Rock'),(5,'Adele','Pop');\nINSERT INTO \"bookings\" (id,userId,ticketId,bookingDate,status) VALUES (1,1,1,'2024-02-19 13:13:50','Confirmed'),(2,2,2,'2024-02-19 13:13:50','Confirmed'),(3,3,3,'2024-02-19 13:13:50','Confirmed'),(4,4,4,'2024-02-19 13:13:50','Confirmed'),(5,5,5,'2024-02-19 13:13:50','Confirmed');\nINSERT INTO \"concerts\" (id,artistId,date,city,concertHall) VALUES (1,1,'2023-06-01','New York','Madison Square Garden'),(2,2,'2023-07-15','Los Angeles','Staples Center'),(3,3,'2023-08-30','Chicago','United Center'),(4,4,'2023-09-10','Dallas','American Airlines Center'),(5,5,'2023-10-01','Boston','TD Garden');\nINSERT INTO \"tickets\" (id,concertId,price,quantity,type) VALUES (1,1,100,1000,'General Admission'),(2,1,200,500,'VIP'),(3,2,120,1000,'General Admission'),(4,2,220,500,'VIP'),(5,3,150,1000,'General Admission');\nINSERT INTO \"users\" (id,username,email,passwordHash) VALUES (1,'user1','user1@example.com','passwordhash1'),(2,'user2','user2@example.com','passwordhash2'),(3,'user3','user3@example.com','passwordhash3'),(4,'user4','user4@example.com','passwordhash4'),(5,'user5','user5@example.com','passwordhash5');\nINSERT INTO \"venues\" (id,venueName,location,capacity) VALUES (1,'Madison Square Garden','New York',20000),(2,'Staples Center','Los Angeles',19000),(3,'United Center','Chicago',23000),(4,'American Airlines Center','Dallas',19000),(5,'TD Garden','Boston',19000);\n",
      "question": "List all the concert dates, cities, types of ticket and the total number of tickets sold, sorted by highest ticket sales.",
      "gold_queries": [
        "SELECT c.date, c.city, t.type AS ticket_type, SUM(t.quantity) as total_tickets_sold FROM `concerts` c JOIN `tickets` t ON c.id = t.concertId GROUP BY c.id ORDER BY SUM(t.quantity) DESC;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List concert dates, cities, ticket types, and total tickets sold, sorted by descending total tickets sold.",
          "sql_queries": [
            "SELECT c.date, c.city, t.type, SUM(t.quantity) as total_tickets_sold\nFROM concerts c\nJOIN tickets t ON c.id = t.concertId\nGROUP BY c.date, c.city, t.type\nORDER BY total_tickets_sold DESC"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "List distinct concert dates, cities, ticket types, and calculate and list the total number of tickets sold for each combination, sorted by total tickets sold in descending order.",
          "sql_queries": [
            "SELECT \n    c.date, \n    c.city, \n    t.type, \n    SUM(t.quantity) AS total_tickets_sold\nFROM \n    concerts c\nJOIN \n    tickets t ON c.id = t.concertId\nGROUP BY \n    c.date, \n    c.city, \n    t.type\nORDER BY \n    total_tickets_sold DESC"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Entertainment/vague_2cols_location/vague_2cols_location.sqlite",
      "db_dump": "CREATE TABLE artists (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    genre TEXT\n);\nCREATE TABLE bookings (\n    id INTEGER PRIMARY KEY,\n    userId INTEGER,\n    ticketId INTEGER,\n    bookingDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    status TEXT ,\n    FOREIGN KEY(userId) REFERENCES users(id),\n    FOREIGN KEY(ticketId) REFERENCES tickets(id)\n);\nCREATE TABLE concerts (\n    id INTEGER PRIMARY KEY,\n    artistId INTEGER,\n    date DATE,\n    city TEXT,\n    concertHall TEXT,\n    FOREIGN KEY(artistId) REFERENCES artists(id)\n);\nCREATE TABLE tickets (\n    id INTEGER PRIMARY KEY,\n    concertId INTEGER,\n    price DECIMAL(5,2),\n    quantity INTEGER,\n    type TEXT, -- e.g., VIP, General Admission\n    FOREIGN KEY(concertId) REFERENCES concerts(id)\n);\nCREATE TABLE users (\n    id INTEGER PRIMARY KEY,\n    username TEXT,\n    email TEXT,\n    passwordHash TEXT\n);\nCREATE TABLE venues (\n    id INTEGER PRIMARY KEY,\n    venueName TEXT,\n    location TEXT,\n    capacity INTEGER\n);\n\nINSERT INTO \"artists\" (id,name,genre) VALUES (1,'The Beatles','Rock'),(2,'Michael Jackson','Pop'),(3,'Lady Gaga','Pop'),(4,'Elton John','Classic Rock'),(5,'Adele','Pop');\nINSERT INTO \"bookings\" (id,userId,ticketId,bookingDate,status) VALUES (1,1,1,'2024-02-19 13:13:50','Confirmed'),(2,2,2,'2024-02-19 13:13:50','Confirmed'),(3,3,3,'2024-02-19 13:13:50','Confirmed'),(4,4,4,'2024-02-19 13:13:50','Confirmed'),(5,5,5,'2024-02-19 13:13:50','Confirmed');\nINSERT INTO \"concerts\" (id,artistId,date,city,concertHall) VALUES (1,1,'2023-06-01','New York','Madison Square Garden'),(2,2,'2023-07-15','Los Angeles','Staples Center'),(3,3,'2023-08-30','Chicago','United Center'),(4,4,'2023-09-10','Dallas','American Airlines Center'),(5,5,'2023-10-01','Boston','TD Garden');\nINSERT INTO \"tickets\" (id,concertId,price,quantity,type) VALUES (1,1,100,1000,'General Admission'),(2,1,200,500,'VIP'),(3,2,120,1000,'General Admission'),(4,2,220,500,'VIP'),(5,3,150,1000,'General Admission');\nINSERT INTO \"users\" (id,username,email,passwordHash) VALUES (1,'user1','user1@example.com','passwordhash1'),(2,'user2','user2@example.com','passwordhash2'),(3,'user3','user3@example.com','passwordhash3'),(4,'user4','user4@example.com','passwordhash4'),(5,'user5','user5@example.com','passwordhash5');\nINSERT INTO \"venues\" (id,venueName,location,capacity) VALUES (1,'Madison Square Garden','New York',20000),(2,'Staples Center','Los Angeles',19000),(3,'United Center','Chicago',23000),(4,'American Airlines Center','Dallas',19000),(5,'TD Garden','Boston',19000);\n",
      "question": "List all concert dates, locations, types of tickets available, and the total number of tickets sold, sorted by the highest total number of tickets sold.",
      "gold_queries": [
        "SELECT c.date, c.city, t.type AS ticket_type, SUM(t.quantity) as total_tickets_sold FROM `concerts` c JOIN `tickets` t ON c.id = t.concertId GROUP BY c.id ORDER BY SUM(t.quantity) DESC;",
        "SELECT c.date, c.concertHall, t.type AS ticket_type, SUM(t.quantity) as total_tickets_sold FROM `concerts` c JOIN `tickets` t ON c.id = t.concertId GROUP BY c.id ORDER BY SUM(t.quantity) DESC;",
        "SELECT c.date, c.city, concertHall, t.type AS ticket_type, SUM(t.quantity) as total_tickets_sold FROM `concerts` c JOIN `tickets` t ON c.id = t.concertId GROUP BY c.id ORDER BY SUM(t.quantity) DESC;"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Retrieve a list of unique concert dates, city locations, ticket types, and the sum of sold tickets for each concert, ordered by total tickets sold in descending order.",
          "sql_queries": [
            "SELECT DISTINCT c.date, c.city, t.type, SUM(t.quantity) AS total_tickets_sold\nFROM concerts c\nJOIN tickets t ON c.id = t.concertId\nGROUP BY c.date, c.city, t.type\nORDER BY total_tickets_sold DESC"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Generate a report containing distinct concert dates, cities, ticket types, and the overall number of tickets sold for each concert, prioritizing the concerts with the highest sales figures.",
          "sql_queries": [
            "SELECT DISTINCT \n    c.date,\n    c.city,\n    t.type,\n    SUM(t.quantity) AS total_tickets_sold\nFROM \n    concerts c\nJOIN \n    tickets t ON c.id = t.concertId\nGROUP BY \n    c.date, c.city, t.type\nORDER BY \n    total_tickets_sold DESC"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Display a consolidated view of concert dates, cities, ticket types, and the total number of tickets sold for each concert grouping, ranked from highest to lowest total sales.",
          "sql_queries": [
            "SELECT c.date, c.city, t.type, SUM(t.quantity) as total_tickets_sold\nFROM concerts c\nJOIN tickets t ON c.id = t.concertId\nGROUP BY c.id, t.type\nORDER BY total_tickets_sold DESC"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Select distinct concert dates, city locations, ticket types, and calculate the aggregated number of tickets sold per concert combination, then order the results by total sold tickets.",
          "sql_queries": [
            "SELECT c.date, c.city, t.type, SUM(t.quantity) AS total_tickets_sold\nFROM concerts c\nJOIN tickets t ON c.id = t.concertId\nGROUP BY c.date, c.city, t.type\nORDER BY total_tickets_sold"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Entertainment/vague_2cols_creator/vague_2cols_creator.sqlite",
      "db_dump": "CREATE TABLE Albums (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE,\n    artist_name TEXT\n);\nCREATE TABLE Artists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    genre TEXT,\n    country TEXT\n);\nCREATE TABLE Ballets (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    choreographer TEXT,\n    musician TEXT\n);\nCREATE TABLE Concerts (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date DATETIME,\n    location TEXT,\n    headliner_artist_id INTEGER,\n    opening_act_artist_id INTEGER,\n    FOREIGN KEY(headliner_artist_id) REFERENCES Artists(id),\n    FOREIGN KEY(opening_act_artist_id) REFERENCES Artists(id)\n);\nCREATE TABLE Performances (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date DATETIME,\n    ballet_id INTEGER,\n    performers_count INTEGER,\n    FOREIGN KEY(ballet_id) REFERENCES Ballets(id)\n);\nCREATE TABLE Songs (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    length REAL,\n    album_id INTEGER,\n    FOREIGN KEY(album_id) REFERENCES Albums(id)\n);\n\nINSERT INTO \"Albums\" (id,title,release_date,artist_name) VALUES (1,'Thriller','1982-06-30','Michael Jackson'),(2,'Abbey Road','1969-09-26','The Beatles');\nINSERT INTO \"Artists\" (id,name,genre,country) VALUES (1,'Michael Jackson','Pop','USA'),(2,'The Beatles','Rock','UK');\nINSERT INTO \"Ballets\" (id,name,choreographer,musician) VALUES (1,'Swan Lake','Marius Petipa','Pyotr Ilyich Tchaikovsky'),(2,'Giselle','Jean Coralli and Jules Perrot','Adolphe Adam');\nINSERT INTO \"Concerts\" (id,date,location,headliner_artist_id,opening_act_artist_id) VALUES (1,'2022-06-01','New York City',1,2),(2,'2022-06-02','Los Angeles',1,NULL);\nINSERT INTO \"Performances\" (id,date,ballet_id,performers_count) VALUES (1,'2022-07-01',1,50),(2,'2022-07-02',2,45);\nINSERT INTO \"Songs\" (id,title,length,album_id) VALUES (1,'Billie Jean',4.57,1),(2,'Hey Jude',7.1,2);\n",
      "question": "show me the musician with the largest performance count",
      "gold_queries": [
        "SELECT musician FROM Ballets JOIN Performances ON Performances.ballet_id = Ballets.id ORDER BY performers_count DESC LIMIT 1;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Find the musician who composed the music for the ballet with the most performances.",
          "sql_queries": [
            "SELECT musician\nFROM Ballets\nJOIN Performances ON Ballets.id = Performances.ballet_id\nGROUP BY musician\nORDER BY COUNT(*) DESC\nLIMIT 1"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Determine which musician has contributed music to ballets that have been performed most frequently.",
          "sql_queries": [
            "SELECT musician \nFROM Ballets \nWHERE id = (\n    SELECT ballet_id \n    FROM Performances \n    GROUP BY ballet_id \n    ORDER BY COUNT(*) DESC \n    LIMIT 1\n)"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Identify the musician associated with the ballet that has had the highest number of performances.",
          "sql_queries": [
            "SELECT T1.musician \nFROM Ballets AS T1 \nJOIN Performances AS T2 \nON T1.id = T2.ballet_id \nGROUP BY T1.id \nORDER BY COUNT(*) DESC \nLIMIT 1"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Entertainment/vague_2cols_creator/vague_2cols_creator.sqlite",
      "db_dump": "CREATE TABLE Albums (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE,\n    artist_name TEXT\n);\nCREATE TABLE Artists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    genre TEXT,\n    country TEXT\n);\nCREATE TABLE Ballets (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    choreographer TEXT,\n    musician TEXT\n);\nCREATE TABLE Concerts (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date DATETIME,\n    location TEXT,\n    headliner_artist_id INTEGER,\n    opening_act_artist_id INTEGER,\n    FOREIGN KEY(headliner_artist_id) REFERENCES Artists(id),\n    FOREIGN KEY(opening_act_artist_id) REFERENCES Artists(id)\n);\nCREATE TABLE Performances (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date DATETIME,\n    ballet_id INTEGER,\n    performers_count INTEGER,\n    FOREIGN KEY(ballet_id) REFERENCES Ballets(id)\n);\nCREATE TABLE Songs (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    length REAL,\n    album_id INTEGER,\n    FOREIGN KEY(album_id) REFERENCES Albums(id)\n);\n\nINSERT INTO \"Albums\" (id,title,release_date,artist_name) VALUES (1,'Thriller','1982-06-30','Michael Jackson'),(2,'Abbey Road','1969-09-26','The Beatles');\nINSERT INTO \"Artists\" (id,name,genre,country) VALUES (1,'Michael Jackson','Pop','USA'),(2,'The Beatles','Rock','UK');\nINSERT INTO \"Ballets\" (id,name,choreographer,musician) VALUES (1,'Swan Lake','Marius Petipa','Pyotr Ilyich Tchaikovsky'),(2,'Giselle','Jean Coralli and Jules Perrot','Adolphe Adam');\nINSERT INTO \"Concerts\" (id,date,location,headliner_artist_id,opening_act_artist_id) VALUES (1,'2022-06-01','New York City',1,2),(2,'2022-06-02','Los Angeles',1,NULL);\nINSERT INTO \"Performances\" (id,date,ballet_id,performers_count) VALUES (1,'2022-07-01',1,50),(2,'2022-07-02',2,45);\nINSERT INTO \"Songs\" (id,title,length,album_id) VALUES (1,'Billie Jean',4.57,1),(2,'Hey Jude',7.1,2);\n",
      "question": "show me the choreographer with the largest performance count",
      "gold_queries": [
        "SELECT choreographer FROM Ballets JOIN Performances ON Performances.ballet_id = Ballets.id ORDER BY performers_count DESC LIMIT 1;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Show the choreographer whose ballet has the highest number of performances",
          "sql_queries": [
            "SELECT T1.choreographer \nFROM Ballets AS T1 \nJOIN Performances AS T2 ON T1.id = T2.ballet_id \nGROUP BY T1.choreographer \nORDER BY SUM(T2.performers_count) DESC \nLIMIT 1"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Find the choreographer who has the largest total performers count across all performances",
          "sql_queries": [
            "SELECT B.choreographer \nFROM Ballets B \nJOIN Performances P ON B.id = P.ballet_id \nGROUP BY B.choreographer \nORDER BY SUM(P.performers_count) DESC \nLIMIT 1"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "List the choreographer whose ballet has been performed most frequently",
          "sql_queries": [
            "SELECT B.choreographer \nFROM Ballets B \nJOIN Performances P ON B.id = P.ballet_id \nGROUP BY B.choreographer \nORDER BY COUNT(*) DESC \nLIMIT 1"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Retrieve the name of the choreographer associated with the ballet having the most performances",
          "sql_queries": [
            "SELECT T2.choreographer \nFROM Performances AS T1 \nJOIN Ballets AS T2 \nON T1.ballet_id = T2.id \nGROUP BY T2.choreographer \nORDER BY COUNT(*) DESC \nLIMIT 1"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Identify the choreographer with the maximum number of performances linked to them",
          "sql_queries": [
            "SELECT T1.choreographer \nFROM Ballets AS T1 \nJOIN Performances AS T2 ON T1.id = T2.ballet_id \nGROUP BY T1.choreographer \nORDER BY COUNT(*) DESC \nLIMIT 1"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 5
    },
    {
      "db_file": "data/vague/Entertainment/vague_2cols_creator/vague_2cols_creator.sqlite",
      "db_dump": "CREATE TABLE Albums (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE,\n    artist_name TEXT\n);\nCREATE TABLE Artists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    genre TEXT,\n    country TEXT\n);\nCREATE TABLE Ballets (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    choreographer TEXT,\n    musician TEXT\n);\nCREATE TABLE Concerts (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date DATETIME,\n    location TEXT,\n    headliner_artist_id INTEGER,\n    opening_act_artist_id INTEGER,\n    FOREIGN KEY(headliner_artist_id) REFERENCES Artists(id),\n    FOREIGN KEY(opening_act_artist_id) REFERENCES Artists(id)\n);\nCREATE TABLE Performances (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date DATETIME,\n    ballet_id INTEGER,\n    performers_count INTEGER,\n    FOREIGN KEY(ballet_id) REFERENCES Ballets(id)\n);\nCREATE TABLE Songs (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    length REAL,\n    album_id INTEGER,\n    FOREIGN KEY(album_id) REFERENCES Albums(id)\n);\n\nINSERT INTO \"Albums\" (id,title,release_date,artist_name) VALUES (1,'Thriller','1982-06-30','Michael Jackson'),(2,'Abbey Road','1969-09-26','The Beatles');\nINSERT INTO \"Artists\" (id,name,genre,country) VALUES (1,'Michael Jackson','Pop','USA'),(2,'The Beatles','Rock','UK');\nINSERT INTO \"Ballets\" (id,name,choreographer,musician) VALUES (1,'Swan Lake','Marius Petipa','Pyotr Ilyich Tchaikovsky'),(2,'Giselle','Jean Coralli and Jules Perrot','Adolphe Adam');\nINSERT INTO \"Concerts\" (id,date,location,headliner_artist_id,opening_act_artist_id) VALUES (1,'2022-06-01','New York City',1,2),(2,'2022-06-02','Los Angeles',1,NULL);\nINSERT INTO \"Performances\" (id,date,ballet_id,performers_count) VALUES (1,'2022-07-01',1,50),(2,'2022-07-02',2,45);\nINSERT INTO \"Songs\" (id,title,length,album_id) VALUES (1,'Billie Jean',4.57,1),(2,'Hey Jude',7.1,2);\n",
      "question": "Who created Giselle?",
      "gold_queries": [
        "SELECT musician FROM Ballets WHERE name = 'Giselle';",
        "SELECT choreographer FROM Ballets WHERE name = 'Giselle';",
        "SELECT musician, choreographer FROM Ballets WHERE name = 'Giselle';"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "The choreographer of Giselle",
          "sql_queries": [
            "SELECT choreographer FROM Ballets WHERE name = 'Giselle'"
          ],
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Jean Coralli and Jules Perrot",
          "sql_queries": [
            "SELECT name FROM Ballets WHERE choreographer = 'Jean Coralli and Jules Perrot'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.3333333333333333,
        "precision": 0.5,
        "f1_score": 0.4,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Entertainment/vague_2cols_creator/vague_2cols_creator.sqlite",
      "db_dump": "CREATE TABLE Albums (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE,\n    artist_name TEXT\n);\nCREATE TABLE Artists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    genre TEXT,\n    country TEXT\n);\nCREATE TABLE Ballets (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    choreographer TEXT,\n    musician TEXT\n);\nCREATE TABLE Concerts (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date DATETIME,\n    location TEXT,\n    headliner_artist_id INTEGER,\n    opening_act_artist_id INTEGER,\n    FOREIGN KEY(headliner_artist_id) REFERENCES Artists(id),\n    FOREIGN KEY(opening_act_artist_id) REFERENCES Artists(id)\n);\nCREATE TABLE Performances (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date DATETIME,\n    ballet_id INTEGER,\n    performers_count INTEGER,\n    FOREIGN KEY(ballet_id) REFERENCES Ballets(id)\n);\nCREATE TABLE Songs (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    length REAL,\n    album_id INTEGER,\n    FOREIGN KEY(album_id) REFERENCES Albums(id)\n);\n\nINSERT INTO \"Albums\" (id,title,release_date,artist_name) VALUES (1,'Thriller','1982-06-30','Michael Jackson'),(2,'Abbey Road','1969-09-26','The Beatles');\nINSERT INTO \"Artists\" (id,name,genre,country) VALUES (1,'Michael Jackson','Pop','USA'),(2,'The Beatles','Rock','UK');\nINSERT INTO \"Ballets\" (id,name,choreographer,musician) VALUES (1,'Swan Lake','Marius Petipa','Pyotr Ilyich Tchaikovsky'),(2,'Giselle','Jean Coralli and Jules Perrot','Adolphe Adam');\nINSERT INTO \"Concerts\" (id,date,location,headliner_artist_id,opening_act_artist_id) VALUES (1,'2022-06-01','New York City',1,2),(2,'2022-06-02','Los Angeles',1,NULL);\nINSERT INTO \"Performances\" (id,date,ballet_id,performers_count) VALUES (1,'2022-07-01',1,50),(2,'2022-07-02',2,45);\nINSERT INTO \"Songs\" (id,title,length,album_id) VALUES (1,'Billie Jean',4.57,1),(2,'Hey Jude',7.1,2);\n",
      "question": "Who created the ballet with the most performances?",
      "gold_queries": [
        "SELECT musician FROM Ballets JOIN Performances ON Performances.ballet_id = Ballets.id ORDER BY performers_count DESC LIMIT 1;",
        "SELECT choreographer FROM Ballets JOIN Performances ON Performances.ballet_id = Ballets.id ORDER BY performers_count DESC LIMIT 1;",
        "SELECT musician, choreographer FROM Ballets JOIN Performances ON Performances.ballet_id = Ballets.id ORDER BY performers_count DESC LIMIT 1;"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Who is the choreographer of the ballet with the most performances?",
          "sql_queries": [
            "SELECT B.choreographer\nFROM Ballets B\nJOIN Performances P ON B.id = P.ballet_id\nGROUP BY B.id\nORDER BY COUNT(P.id) DESC\nLIMIT 1"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Who created the ballet that had the highest number of performances?",
          "sql_queries": [
            "SELECT T1.choreographer FROM Ballets AS T1 JOIN Performances AS T2 ON T1.id = T2.ballet_id GROUP BY T1.choreographer ORDER BY COUNT(T2.performers_count) DESC LIMIT 1"
          ],
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Which ballet has the most performances and who created it?",
          "sql_queries": [
            "SELECT B.name, B.choreographer\nFROM Ballets B\nJOIN Performances P ON B.id = P.ballet_id\nGROUP BY B.id\nORDER BY COUNT(P.id) DESC\nLIMIT 1"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.3333333333333333,
        "precision": 0.3333333333333333,
        "f1_score": 0.3333333333333333,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Entertainment/vague_2cols_creator/vague_2cols_creator.sqlite",
      "db_dump": "CREATE TABLE Albums (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE,\n    artist_name TEXT\n);\nCREATE TABLE Artists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    genre TEXT,\n    country TEXT\n);\nCREATE TABLE Ballets (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    choreographer TEXT,\n    musician TEXT\n);\nCREATE TABLE Concerts (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date DATETIME,\n    location TEXT,\n    headliner_artist_id INTEGER,\n    opening_act_artist_id INTEGER,\n    FOREIGN KEY(headliner_artist_id) REFERENCES Artists(id),\n    FOREIGN KEY(opening_act_artist_id) REFERENCES Artists(id)\n);\nCREATE TABLE Performances (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date DATETIME,\n    ballet_id INTEGER,\n    performers_count INTEGER,\n    FOREIGN KEY(ballet_id) REFERENCES Ballets(id)\n);\nCREATE TABLE Songs (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    length REAL,\n    album_id INTEGER,\n    FOREIGN KEY(album_id) REFERENCES Albums(id)\n);\n\nINSERT INTO \"Albums\" (id,title,release_date,artist_name) VALUES (1,'Thriller','1982-06-30','Michael Jackson'),(2,'Abbey Road','1969-09-26','The Beatles');\nINSERT INTO \"Artists\" (id,name,genre,country) VALUES (1,'Michael Jackson','Pop','USA'),(2,'The Beatles','Rock','UK');\nINSERT INTO \"Ballets\" (id,name,choreographer,musician) VALUES (1,'Swan Lake','Marius Petipa','Pyotr Ilyich Tchaikovsky'),(2,'Giselle','Jean Coralli and Jules Perrot','Adolphe Adam');\nINSERT INTO \"Concerts\" (id,date,location,headliner_artist_id,opening_act_artist_id) VALUES (1,'2022-06-01','New York City',1,2),(2,'2022-06-02','Los Angeles',1,NULL);\nINSERT INTO \"Performances\" (id,date,ballet_id,performers_count) VALUES (1,'2022-07-01',1,50),(2,'2022-07-02',2,45);\nINSERT INTO \"Songs\" (id,title,length,album_id) VALUES (1,'Billie Jean',4.57,1),(2,'Hey Jude',7.1,2);\n",
      "question": "Which choreographer created Giselle?",
      "gold_queries": [
        "SELECT musician FROM Ballets WHERE name = 'Giselle';"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What is the name of the person who choreographed the ballet Giselle?",
          "sql_queries": [
            "SELECT choreographer FROM Ballets WHERE name = 'Giselle'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Who is credited as the choreographer of the ballet Giselle?",
          "sql_queries": [
            "SELECT choreographer FROM Ballets WHERE name = 'Giselle'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Who designed the choreography for the ballet Giselle?",
          "sql_queries": [
            "SELECT choreographer FROM Ballets WHERE name = 'Giselle'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "For which ballet did Jean Coralli and Jules Perrot create the choreography?",
          "sql_queries": [
            "SELECT name FROM Ballets WHERE choreographer = 'Jean Coralli and Jules Perrot'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Entertainment/vague_2cols_creator/vague_2cols_creator.sqlite",
      "db_dump": "CREATE TABLE Albums (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE,\n    artist_name TEXT\n);\nCREATE TABLE Artists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    genre TEXT,\n    country TEXT\n);\nCREATE TABLE Ballets (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    choreographer TEXT,\n    musician TEXT\n);\nCREATE TABLE Concerts (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date DATETIME,\n    location TEXT,\n    headliner_artist_id INTEGER,\n    opening_act_artist_id INTEGER,\n    FOREIGN KEY(headliner_artist_id) REFERENCES Artists(id),\n    FOREIGN KEY(opening_act_artist_id) REFERENCES Artists(id)\n);\nCREATE TABLE Performances (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date DATETIME,\n    ballet_id INTEGER,\n    performers_count INTEGER,\n    FOREIGN KEY(ballet_id) REFERENCES Ballets(id)\n);\nCREATE TABLE Songs (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    length REAL,\n    album_id INTEGER,\n    FOREIGN KEY(album_id) REFERENCES Albums(id)\n);\n\nINSERT INTO \"Albums\" (id,title,release_date,artist_name) VALUES (1,'Thriller','1982-06-30','Michael Jackson'),(2,'Abbey Road','1969-09-26','The Beatles');\nINSERT INTO \"Artists\" (id,name,genre,country) VALUES (1,'Michael Jackson','Pop','USA'),(2,'The Beatles','Rock','UK');\nINSERT INTO \"Ballets\" (id,name,choreographer,musician) VALUES (1,'Swan Lake','Marius Petipa','Pyotr Ilyich Tchaikovsky'),(2,'Giselle','Jean Coralli and Jules Perrot','Adolphe Adam');\nINSERT INTO \"Concerts\" (id,date,location,headliner_artist_id,opening_act_artist_id) VALUES (1,'2022-06-01','New York City',1,2),(2,'2022-06-02','Los Angeles',1,NULL);\nINSERT INTO \"Performances\" (id,date,ballet_id,performers_count) VALUES (1,'2022-07-01',1,50),(2,'2022-07-02',2,45);\nINSERT INTO \"Songs\" (id,title,length,album_id) VALUES (1,'Billie Jean',4.57,1),(2,'Hey Jude',7.1,2);\n",
      "question": "Which choreographer and musician created Giselle?",
      "gold_queries": [
        "SELECT musician, choreographer FROM Ballets WHERE name = 'Giselle';"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Who are the choreographer and musician associated with the ballet Giselle?",
          "sql_queries": [
            "SELECT choreographer, musician FROM Ballets WHERE name = 'Giselle'"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Which ballet was created by Jean Coralli and Jules Perrot with music by Adolphe Adam?",
          "sql_queries": [
            "SELECT name FROM Ballets WHERE choreographer = 'Jean Coralli and Jules Perrot' AND musician = 'Adolphe Adam'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Entertainment/vague_2cols_creator/vague_2cols_creator.sqlite",
      "db_dump": "CREATE TABLE Albums (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE,\n    artist_name TEXT\n);\nCREATE TABLE Artists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    genre TEXT,\n    country TEXT\n);\nCREATE TABLE Ballets (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    choreographer TEXT,\n    musician TEXT\n);\nCREATE TABLE Concerts (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date DATETIME,\n    location TEXT,\n    headliner_artist_id INTEGER,\n    opening_act_artist_id INTEGER,\n    FOREIGN KEY(headliner_artist_id) REFERENCES Artists(id),\n    FOREIGN KEY(opening_act_artist_id) REFERENCES Artists(id)\n);\nCREATE TABLE Performances (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date DATETIME,\n    ballet_id INTEGER,\n    performers_count INTEGER,\n    FOREIGN KEY(ballet_id) REFERENCES Ballets(id)\n);\nCREATE TABLE Songs (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    length REAL,\n    album_id INTEGER,\n    FOREIGN KEY(album_id) REFERENCES Albums(id)\n);\n\nINSERT INTO \"Albums\" (id,title,release_date,artist_name) VALUES (1,'Thriller','1982-06-30','Michael Jackson'),(2,'Abbey Road','1969-09-26','The Beatles');\nINSERT INTO \"Artists\" (id,name,genre,country) VALUES (1,'Michael Jackson','Pop','USA'),(2,'The Beatles','Rock','UK');\nINSERT INTO \"Ballets\" (id,name,choreographer,musician) VALUES (1,'Swan Lake','Marius Petipa','Pyotr Ilyich Tchaikovsky'),(2,'Giselle','Jean Coralli and Jules Perrot','Adolphe Adam');\nINSERT INTO \"Concerts\" (id,date,location,headliner_artist_id,opening_act_artist_id) VALUES (1,'2022-06-01','New York City',1,2),(2,'2022-06-02','Los Angeles',1,NULL);\nINSERT INTO \"Performances\" (id,date,ballet_id,performers_count) VALUES (1,'2022-07-01',1,50),(2,'2022-07-02',2,45);\nINSERT INTO \"Songs\" (id,title,length,album_id) VALUES (1,'Billie Jean',4.57,1),(2,'Hey Jude',7.1,2);\n",
      "question": "Which musician composed Giselle?",
      "gold_queries": [
        "SELECT choreographer FROM Ballets WHERE name = 'Giselle';"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Adolphe Adam",
          "sql_queries": [
            "SELECT name FROM Ballets WHERE musician = 'Adolphe Adam'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "The musician listed in the Ballets table for Giselle.",
          "sql_queries": [
            "SELECT musician FROM Ballets WHERE name = 'Giselle'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "The composer of the ballet Giselle.",
          "sql_queries": [
            "SELECT musician FROM Ballets WHERE name = 'Giselle'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Entertainment/vague_2cols_creator/vague_2cols_creator.sqlite",
      "db_dump": "CREATE TABLE Albums (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE,\n    artist_name TEXT\n);\nCREATE TABLE Artists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    genre TEXT,\n    country TEXT\n);\nCREATE TABLE Ballets (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    choreographer TEXT,\n    musician TEXT\n);\nCREATE TABLE Concerts (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date DATETIME,\n    location TEXT,\n    headliner_artist_id INTEGER,\n    opening_act_artist_id INTEGER,\n    FOREIGN KEY(headliner_artist_id) REFERENCES Artists(id),\n    FOREIGN KEY(opening_act_artist_id) REFERENCES Artists(id)\n);\nCREATE TABLE Performances (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date DATETIME,\n    ballet_id INTEGER,\n    performers_count INTEGER,\n    FOREIGN KEY(ballet_id) REFERENCES Ballets(id)\n);\nCREATE TABLE Songs (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    length REAL,\n    album_id INTEGER,\n    FOREIGN KEY(album_id) REFERENCES Albums(id)\n);\n\nINSERT INTO \"Albums\" (id,title,release_date,artist_name) VALUES (1,'Thriller','1982-06-30','Michael Jackson'),(2,'Abbey Road','1969-09-26','The Beatles');\nINSERT INTO \"Artists\" (id,name,genre,country) VALUES (1,'Michael Jackson','Pop','USA'),(2,'The Beatles','Rock','UK');\nINSERT INTO \"Ballets\" (id,name,choreographer,musician) VALUES (1,'Swan Lake','Marius Petipa','Pyotr Ilyich Tchaikovsky'),(2,'Giselle','Jean Coralli and Jules Perrot','Adolphe Adam');\nINSERT INTO \"Concerts\" (id,date,location,headliner_artist_id,opening_act_artist_id) VALUES (1,'2022-06-01','New York City',1,2),(2,'2022-06-02','Los Angeles',1,NULL);\nINSERT INTO \"Performances\" (id,date,ballet_id,performers_count) VALUES (1,'2022-07-01',1,50),(2,'2022-07-02',2,45);\nINSERT INTO \"Songs\" (id,title,length,album_id) VALUES (1,'Billie Jean',4.57,1),(2,'Hey Jude',7.1,2);\n",
      "question": "show me the musician with the largest number of performances and also the choreographer he largest number of performances.",
      "gold_queries": [
        "SELECT musician, choreographer FROM Ballets JOIN Performances ON Performances.ballet_id = Ballets.id ORDER BY performers_count DESC LIMIT 1;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Find the choreographer associated with the ballet that has been performed the most times.",
          "sql_queries": [
            "SELECT b.choreographer \nFROM Ballets b \nJOIN Performances p ON b.id = p.ballet_id \nGROUP BY b.id \nORDER BY COUNT(p.id) DESC \nLIMIT 1"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Identify the musician and choreographer for the ballet with the highest performance count.",
          "sql_queries": [
            "SELECT B.musician, B.choreographer\nFROM Ballets B\nJOIN Performances P ON B.id = P.ballet_id\nGROUP BY B.id\nORDER BY SUM(P.performers_count) DESC\nLIMIT 1"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "List the names of the musicians and choreographers who have contributed to the ballets with the highest performance frequencies.",
          "sql_queries": [
            "SELECT T1.musician, T1.choreographer \nFROM Ballets AS T1 \nJOIN Performances AS T2 ON T1.id = T2.ballet_id \nGROUP BY T1.id \nORDER BY COUNT(*) DESC \nLIMIT 1"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Retrieve the name of the musician who has performed in the most ballet productions.",
          "sql_queries": [
            "SELECT musician, COUNT(*) as performances FROM Ballets GROUP BY musician ORDER BY performances DESC LIMIT 1"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Show the musician with the most performances and the choreographer with the most performances.",
          "sql_queries": [
            "SELECT musician, choreographer \nFROM (\n    SELECT musician, COUNT(*) AS musician_count \n    FROM Performances \n    JOIN Ballets ON Performances.ballet_id = Ballets.id \n    GROUP BY musician \n    ORDER BY musician_count DESC \n    LIMIT 1\n) AS musician_result,\n(\n    SELECT choreographer, COUNT(*) AS choreographer_count \n    FROM Performances \n    JOIN Ballets ON Performances.ballet_id = Ballets.id \n    GROUP BY choreographer \n    ORDER BY choreographer_count DESC \n    LIMIT 1\n) AS choreographer_result"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.4,
        "f1_score": 0.5714285714285715,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Entertainment/vague_2cols_location/vague_2cols_location.sqlite",
      "db_dump": "CREATE TABLE artists (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    genre TEXT\n);\nCREATE TABLE bookings (\n    id INTEGER PRIMARY KEY,\n    userId INTEGER,\n    ticketId INTEGER,\n    bookingDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    status TEXT ,\n    FOREIGN KEY(userId) REFERENCES users(id),\n    FOREIGN KEY(ticketId) REFERENCES tickets(id)\n);\nCREATE TABLE concerts (\n    id INTEGER PRIMARY KEY,\n    artistId INTEGER,\n    date DATE,\n    city TEXT,\n    concertHall TEXT,\n    FOREIGN KEY(artistId) REFERENCES artists(id)\n);\nCREATE TABLE tickets (\n    id INTEGER PRIMARY KEY,\n    concertId INTEGER,\n    price DECIMAL(5,2),\n    quantity INTEGER,\n    type TEXT, -- e.g., VIP, General Admission\n    FOREIGN KEY(concertId) REFERENCES concerts(id)\n);\nCREATE TABLE users (\n    id INTEGER PRIMARY KEY,\n    username TEXT,\n    email TEXT,\n    passwordHash TEXT\n);\nCREATE TABLE venues (\n    id INTEGER PRIMARY KEY,\n    venueName TEXT,\n    location TEXT,\n    capacity INTEGER\n);\n\nINSERT INTO \"artists\" (id,name,genre) VALUES (1,'The Beatles','Rock'),(2,'Michael Jackson','Pop'),(3,'Lady Gaga','Pop'),(4,'Elton John','Classic Rock'),(5,'Adele','Pop');\nINSERT INTO \"bookings\" (id,userId,ticketId,bookingDate,status) VALUES (1,1,1,'2024-02-19 13:13:50','Confirmed'),(2,2,2,'2024-02-19 13:13:50','Confirmed'),(3,3,3,'2024-02-19 13:13:50','Confirmed'),(4,4,4,'2024-02-19 13:13:50','Confirmed'),(5,5,5,'2024-02-19 13:13:50','Confirmed');\nINSERT INTO \"concerts\" (id,artistId,date,city,concertHall) VALUES (1,1,'2023-06-01','New York','Madison Square Garden'),(2,2,'2023-07-15','Los Angeles','Staples Center'),(3,3,'2023-08-30','Chicago','United Center'),(4,4,'2023-09-10','Dallas','American Airlines Center'),(5,5,'2023-10-01','Boston','TD Garden');\nINSERT INTO \"tickets\" (id,concertId,price,quantity,type) VALUES (1,1,100,1000,'General Admission'),(2,1,200,500,'VIP'),(3,2,120,1000,'General Admission'),(4,2,220,500,'VIP'),(5,3,150,1000,'General Admission');\nINSERT INTO \"users\" (id,username,email,passwordHash) VALUES (1,'user1','user1@example.com','passwordhash1'),(2,'user2','user2@example.com','passwordhash2'),(3,'user3','user3@example.com','passwordhash3'),(4,'user4','user4@example.com','passwordhash4'),(5,'user5','user5@example.com','passwordhash5');\nINSERT INTO \"venues\" (id,venueName,location,capacity) VALUES (1,'Madison Square Garden','New York',20000),(2,'Staples Center','Los Angeles',19000),(3,'United Center','Chicago',23000),(4,'American Airlines Center','Dallas',19000),(5,'TD Garden','Boston',19000);\n",
      "question": "Display the top 3 most popular concert dates and locations based on the number of tickets.",
      "gold_queries": [
        "SELECT c.date, c.city FROM `concerts` c JOIN `tickets` t ON c.id = t.concertId GROUP BY c.id ORDER BY SUM(t.quantity) DESC LIMIT 3;",
        "SELECT c.date, c.concertHall FROM `concerts` c JOIN `tickets` t ON c.id = t.concertId GROUP BY c.id ORDER BY SUM(t.quantity) DESC LIMIT 3;",
        "SELECT c.date, c.city, concertHall FROM `concerts` c JOIN `tickets` t ON c.id = t.concertId GROUP BY c.id ORDER BY SUM(t.quantity) DESC LIMIT 3;"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Identify the three concert dates and locations having the most bookings.",
          "sql_queries": [
            "SELECT c.date, c.city, COUNT(b.id) AS booking_count\nFROM bookings b\nJOIN tickets t ON b.ticketId = t.id\nJOIN concerts c ON t.concertId = c.id\nGROUP BY c.date, c.city\nORDER BY booking_count DESC\nLIMIT 3"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Display the three concert dates and locations with the highest total number of tickets sold.",
          "sql_queries": [
            "SELECT c.date AS concert_date, c.city AS location, SUM(t.quantity) AS total_tickets_sold\nFROM concerts c\nJOIN tickets t ON c.id = t.concertId\nJOIN bookings b ON t.id = b.ticketId\nGROUP BY c.id\nORDER BY total_tickets_sold DESC\nLIMIT 3"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "Show the three concert dates and locations with the highest quantity of tickets for each event.",
          "sql_queries": [
            "SELECT c.date, c.city, MAX(t.quantity) as max_quantity\nFROM concerts c\nJOIN tickets t ON c.id = t.concertId\nGROUP BY c.id\nORDER BY max_quantity DESC\nLIMIT 3"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Traffic/vague_2cols_location/vague_2cols_location.sqlite",
      "db_dump": "CREATE TABLE Accidents (\n    AccidentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Date DATETIME,\n    LocationID INTEGER,\n    Severity VARCHAR(50),\n    FOREIGN KEY (LocationID) REFERENCES Streets (StreetID)\n);\nCREATE TABLE RoadWorks (\n    WorkID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StartDate DATETIME,\n    EndDate DATETIME,\n    StreetID INTEGER,\n    WorkType VARCHAR(50),\n    FOREIGN KEY (StreetID) REFERENCES Streets (StreetID)\n);\nCREATE TABLE SpeedingTickets (\n    TicketID INTEGER PRIMARY KEY AUTOINCREMENT,\n    IssueDate DATETIME,\n    OffenderVehicleID INTEGER,\n    FineAmount DECIMAL(8,2),\n    FOREIGN KEY (OffenderVehicleID) REFERENCES Vehicles (VehicleID)\n);\nCREATE TABLE Streets (\n    StreetID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Street_Name TEXT,\n    Block_Number INTEGER,\n    Bus_Stop BOOLEAN DEFAULT FALSE,\n    NumLanes INTEGER,\n    MaxSpeed MPH\n);\nCREATE TABLE Users (\n    UserID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName VARCHAR(50),\n    LastName VARCHAR(50),\n    Email VARCHAR(100),\n    PhoneNumber VARCHAR(15)\n);\nCREATE TABLE Vehicles (\n    VehicleID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Type VARCHAR(20),\n    LicensePlate CHAR(7),\n    OwnerID INTEGER,\n    FOREIGN KEY (OwnerID) REFERENCES Users (UserID)\n);\n\nINSERT INTO \"Accidents\" (AccidentID,Date,LocationID,Severity) VALUES (1,'2022-01-01 10:00:00',1,'Minor'),(2,'2022-02-01 14:30:00',2,'Moderate'),(3,'2022-03-01 19:00:00',3,'Major'),(4,'2022-04-01 23:30:00',4,'Catastrophic'),(5,'2022-05-01 01:00:00',5,'Fatal');\nINSERT INTO \"RoadWorks\" (WorkID,StartDate,EndDate,StreetID,WorkType) VALUES (1,'2022-06-01 08:00:00','2022-06-02 18:00:00',1,'Repair'),(2,'2022-07-01 08:00:00','2022-07-02 18:00:00',2,'Resurfacing'),(3,'2022-08-01 08:00:00','2022-08-02 18:00:00',3,'Construction'),(4,'2022-09-01 08:00:00','2022-09-02 18:00:00',4,'Drainage'),(5,'2022-10-01 08:00:00','2022-10-02 18:00:00',5,'Landscaping');\nINSERT INTO \"SpeedingTickets\" (TicketID,IssueDate,OffenderVehicleID,FineAmount) VALUES (1,'2022-01-15 12:34:56',1,50),(2,'2022-02-15 12:34:56',2,100),(3,'2022-03-15 12:34:56',3,75),(4,'2022-04-15 12:34:56',4,125),(5,'2022-05-15 12:34:56',5,150);\nINSERT INTO \"Streets\" (StreetID,Street_Name,Block_Number,Bus_Stop,NumLanes,MaxSpeed) VALUES (1,'Main St',123,1,2,30),(2,'Elm St',456,0,1,25),(3,'Pine Ave',789,1,2,30),(4,'Maple Dr',101,0,2,25),(5,'Oak Blvd',123,1,4,40);\nINSERT INTO \"Users\" (UserID,FirstName,LastName,Email,PhoneNumber) VALUES (1,'John','Doe','john.doe@example.com','+1234567890'),(2,'Jane','Smith','jane.smith@example.com','+0987654321'),(3,'Alice','Brown','alice.brown@example.com','+1123456789'),(4,'Bob','White','bob.white@example.com','+0987654321'),(5,'Charlie','Black','charlie.black@example.com','+1123456789');\nINSERT INTO \"Vehicles\" (VehicleID,Type,LicensePlate,OwnerID) VALUES (1,'Car','ABC123',1),(2,'Truck','DEF456',2),(3,'SUV','GHI789',3),(4,'Motorcycle','JKL012',4),(5,'Van','LMN321',5);\n",
      "question": "On what street does the resurfacing take place?",
      "gold_queries": [
        "select Street_Name from streets join roadworks on Streets.StreetID = roadworks.StreetID where WorkType = 'Resurfacing'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Where are resurfacing road works occurring?",
          "sql_queries": [
            "SELECT Street_Name \nFROM Streets \nWHERE StreetID IN (\n    SELECT StreetID \n    FROM RoadWorks \n    WHERE WorkType = 'Resurfacing'\n)"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Which StreetID has resurfacing WorkType",
          "sql_queries": [
            "SELECT StreetID FROM RoadWorks WHERE WorkType = 'Resurfacing'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "What is the Street_Name related to a RoadWorks entry with 'Resurfacing' work type?",
          "sql_queries": [
            "SELECT Street_Name FROM Streets WHERE StreetID = (SELECT StreetID FROM RoadWorks WHERE WorkType = 'Resurfacing')"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        },
        {
          "interpretation": "Which StreetID has an associated WorkType of 'Resurfacing'?",
          "sql_queries": [
            "SELECT StreetID FROM RoadWorks WHERE WorkType = 'Resurfacing'"
          ],
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          }
        },
        {
          "interpretation": "What street is associated with the RoadWorks entry having 'Resurfacing' as WorkType",
          "sql_queries": [
            "SELECT Street_Name FROM Streets WHERE StreetID = (SELECT StreetID FROM RoadWorks WHERE WorkType = 'Resurfacing')"
          ],
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          }
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.6666666666666666,
        "f1_score": 0.8,
        "num_queries": 5,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    }
  ],
  "metrics": {
    "ambig": {
      "attachment": {
        "recall": 0.3125,
        "precision": 0.20773809523809525,
        "f1_score": 0.23431547619047616,
        "all_found": 0.0
      },
      "scope": {
        "recall": 0.4318181818181818,
        "precision": 0.5333874458874459,
        "f1_score": 0.45302273484091665,
        "all_found": 0.045454545454545456
      },
      "vague": {
        "recall": 0.24074074074074078,
        "precision": 0.3398148148148148,
        "f1_score": 0.2621302917355549,
        "all_found": 0.0
      },
      "total": {
        "recall": 0.33472222222222214,
        "precision": 0.366765873015873,
        "f1_score": 0.3228525823591613,
        "all_found": 0.016666666666666666
      }
    },
    "unambig": {
      "attachment": {
        "recall": 0.4,
        "precision": 0.16312499999999996,
        "f1_score": 0.2209027777777778,
        "all_found": 0.4
      },
      "scope": {
        "recall": 0.8977272727272727,
        "precision": 0.6045454545454546,
        "f1_score": 0.6974296536796537,
        "all_found": 0.8977272727272727
      },
      "vague": {
        "recall": 0.6111111111111112,
        "precision": 0.3578703703703703,
        "f1_score": 0.4242063492063491,
        "all_found": 0.6111111111111112
      },
      "total": {
        "recall": 0.6413043478260869,
        "precision": 0.380072463768116,
        "f1_score": 0.4523924545663676,
        "all_found": 0.6413043478260869
      }
    }
  },
  "statistics": {
    "total_examples": 396,
    "avg_interpretations": 4.320707070707071,
    "avg_unique_execution_results": 2.8636363636363638,
    "avg_matched_gold_sql": 1.606060606060606
  },
  "args": {
    "interpretations_file": "outputs/initial_interpretations/interpretations_gemma-2-9b-it_seed42_ambrosia_validation_tgi.json",
    "output_dir": "outputs/sql_generation",
    "exp_name": null,
    "model_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "dtype": "auto",
    "load_in_4bit": false,
    "max_seq_length": 8192,
    "chat_template": null,
    "overwrite": false,
    "seed": 42,
    "backend": "tgi",
    "tgi_url": "http://0.0.0.0/v1",
    "max_workers": 1,
    "sample_size": null,
    "dataset_type": "ambrosia",
    "split": "validation",
    "no_database": false,
    "filter_gold": false,
    "filter_interpr": false
  }
}