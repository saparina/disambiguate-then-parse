{
  "results": [
    {
      "db_file": "data/attachment/Hospitality/attachment_1tab_val_indoor-outdoor_space/attachment_1tab_val_indoor-outdoor_space.sqlite",
      "db_dump": "CREATE TABLE Amenities(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    amenityName TEXT,\n    available BOOL DEFAULT FALSE\n);\nCREATE TABLE Booking(\n    bookingID INTEGER PRIMARY KEY AUTOINCREMENT,\n    roomId INTEGER REFERENCES Room(id),\n    customerId INTEGER REFERENCES Customer(customerID),\n    startDate DATE,\n    endDate DATE,\n    totalPrice DECIMAL(10,2)\n);\nCREATE TABLE Customer(\n    customerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber CHAR(10)\n);\nCREATE TABLE Room(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Indoor_Outdoor_Space TEXT,\n    Size INT,\n    Price DECIMAL(10,2)\n);\n\nINSERT INTO \"Amenities\" (id,amenityName,available) VALUES (1,'WiFi',1),(2,'Parking Space',1),(3,'Air Conditioner',1),(4,'Projector',0);\nINSERT INTO \"Booking\" (bookingID,roomId,customerId,startDate,endDate,totalPrice) VALUES (1,1,1,'2022-01-10','2022-01-12',2000),(2,2,2,'2022-01-15','2022-01-17',3000),(3,3,3,'2022-01-20','2022-01-22',4000),(4,4,4,'2022-01-25','2022-01-27',5000);\nINSERT INTO \"Customer\" (customerID,firstName,lastName,email,phoneNumber) VALUES (1,'John','Doe','john@example.com','+123456789'),(2,'Jane','Smith','jane@example.com','+234567890'),(3,'Michael','Johnson','michael@example.com','+345678901'),(4,'Emily','Williams','emily@example.com','+45678902');\nINSERT INTO \"Room\" (id,Name,Indoor_Outdoor_Space,Size,Price) VALUES (1,'Conference Hall','Lobby',500,678.99),(2,'Banquet Hall','Lobby',600,830.99),(3,'Rooftop Terrace','Terrace',500,1000.99),(4,'Garden Patio','Terrace',400,870.99);\n",
      "question": "List all lobbies or terraces that can accomodate 500 people. Show them in one table.",
      "gold_queries": [
        "SELECT Room.Name \r\nFROM Room\r\nWHERE (Room.Indoor_Outdoor_Space = \"Lobby\" OR Room.Indoor_Outdoor_Space = \"Terrace\") AND Room.Size = 500",
        "SELECT Room.Name \r\nFROM Room\r\nWHERE Room.Indoor_Outdoor_Space = \"Lobby\" OR Room.Indoor_Outdoor_Space = \"Terrace\" AND Room.Size = 500"
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List all rooms with \"Lobby\" or \"Terrace\" in the Indoor_Outdoor_Space column and a Size of 500 or greater.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Indoor_Outdoor_Space, Size FROM Room WHERE (Indoor_Outdoor_Space = 'Lobby' OR Indoor_Outdoor_Space = 'Terrace') AND Size >= 500"
          ]
        },
        {
          "interpretation": "List the names of all rooms that are either lobbies or terraces and have a capacity of 500 or more.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name FROM Room WHERE Indoor_Outdoor_Space IN ('Lobby', 'Terrace') AND Size >= 500"
          ]
        },
        {
          "interpretation": "Find all \"Lobby\" or \"Terrace\" rooms with a Size attribute equal to or greater than 500.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Indoor_Outdoor_Space, Size, Price \nFROM Room \nWHERE Indoor_Outdoor_Space IN ('Lobby', 'Terrace') AND Size >= 500"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.3333333333333333,
        "f1_score": 0.4,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_1tab_val_indoor-outdoor_space/attachment_1tab_val_indoor-outdoor_space.sqlite",
      "db_dump": "CREATE TABLE Amenities(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    amenityName TEXT,\n    available BOOL DEFAULT FALSE\n);\nCREATE TABLE Booking(\n    bookingID INTEGER PRIMARY KEY AUTOINCREMENT,\n    roomId INTEGER REFERENCES Room(id),\n    customerId INTEGER REFERENCES Customer(customerID),\n    startDate DATE,\n    endDate DATE,\n    totalPrice DECIMAL(10,2)\n);\nCREATE TABLE Customer(\n    customerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber CHAR(10)\n);\nCREATE TABLE Room(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Indoor_Outdoor_Space TEXT,\n    Size INT,\n    Price DECIMAL(10,2)\n);\n\nINSERT INTO \"Amenities\" (id,amenityName,available) VALUES (1,'WiFi',1),(2,'Parking Space',1),(3,'Air Conditioner',1),(4,'Projector',0);\nINSERT INTO \"Booking\" (bookingID,roomId,customerId,startDate,endDate,totalPrice) VALUES (1,1,1,'2022-01-10','2022-01-12',2000),(2,2,2,'2022-01-15','2022-01-17',3000),(3,3,3,'2022-01-20','2022-01-22',4000),(4,4,4,'2022-01-25','2022-01-27',5000);\nINSERT INTO \"Customer\" (customerID,firstName,lastName,email,phoneNumber) VALUES (1,'John','Doe','john@example.com','+123456789'),(2,'Jane','Smith','jane@example.com','+234567890'),(3,'Michael','Johnson','michael@example.com','+345678901'),(4,'Emily','Williams','emily@example.com','+45678902');\nINSERT INTO \"Room\" (id,Name,Indoor_Outdoor_Space,Size,Price) VALUES (1,'Conference Hall','Lobby',500,678.99),(2,'Banquet Hall','Lobby',600,830.99),(3,'Rooftop Terrace','Terrace',500,1000.99),(4,'Garden Patio','Terrace',400,870.99);\n",
      "question": "Show all lobbies and also show all terraces that can accommodate 500 people. Show them in one table.",
      "gold_queries": [
        "SELECT Room.Name \r\nFROM Room\r\nWHERE Room.Indoor_Outdoor_Space = \"Lobby\" OR Room.Indoor_Outdoor_Space = \"Terrace\" AND Room.Size = 500"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Retrieve Room records with 'Lobby' in Indoor_Outdoor_Space.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Indoor_Outdoor_Space, Size, Price FROM Room WHERE Indoor_Outdoor_Space = 'Lobby'"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_1tab_val_indoor-outdoor_space/attachment_1tab_val_indoor-outdoor_space.sqlite",
      "db_dump": "CREATE TABLE Amenities(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    amenityName TEXT,\n    available BOOL DEFAULT FALSE\n);\nCREATE TABLE Booking(\n    bookingID INTEGER PRIMARY KEY AUTOINCREMENT,\n    roomId INTEGER REFERENCES Room(id),\n    customerId INTEGER REFERENCES Customer(customerID),\n    startDate DATE,\n    endDate DATE,\n    totalPrice DECIMAL(10,2)\n);\nCREATE TABLE Customer(\n    customerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber CHAR(10)\n);\nCREATE TABLE Room(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Indoor_Outdoor_Space TEXT,\n    Size INT,\n    Price DECIMAL(10,2)\n);\n\nINSERT INTO \"Amenities\" (id,amenityName,available) VALUES (1,'WiFi',1),(2,'Parking Space',1),(3,'Air Conditioner',1),(4,'Projector',0);\nINSERT INTO \"Booking\" (bookingID,roomId,customerId,startDate,endDate,totalPrice) VALUES (1,1,1,'2022-01-10','2022-01-12',2000),(2,2,2,'2022-01-15','2022-01-17',3000),(3,3,3,'2022-01-20','2022-01-22',4000),(4,4,4,'2022-01-25','2022-01-27',5000);\nINSERT INTO \"Customer\" (customerID,firstName,lastName,email,phoneNumber) VALUES (1,'John','Doe','john@example.com','+123456789'),(2,'Jane','Smith','jane@example.com','+234567890'),(3,'Michael','Johnson','michael@example.com','+345678901'),(4,'Emily','Williams','emily@example.com','+45678902');\nINSERT INTO \"Room\" (id,Name,Indoor_Outdoor_Space,Size,Price) VALUES (1,'Conference Hall','Lobby',500,678.99),(2,'Banquet Hall','Lobby',600,830.99),(3,'Rooftop Terrace','Terrace',500,1000.99),(4,'Garden Patio','Terrace',400,870.99);\n",
      "question": "List all lobbies that can accommodate 500 people and terraces of the same size. Show them in one table.",
      "gold_queries": [
        "SELECT Room.Name \r\nFROM Room\r\nWHERE (Room.Indoor_Outdoor_Space = \"Lobby\" OR Room.Indoor_Outdoor_Space = \"Terrace\") AND Room.Size = 500"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List all rooms where Indoor_Outdoor_Space is 'Lobby' and Size is 500, excluding terraces.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name FROM Room WHERE Indoor_Outdoor_Space = 'Lobby' AND Size = 500 AND Indoor_Outdoor_Space != 'Terrace'"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_1tab_ref_hospitality_staff/attachment_1tab_ref_hospitality_staff.sqlite",
      "db_dump": "CREATE TABLE Bookings (\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    GuestName TEXT,\n    CheckInDate DATE,\n    CheckOutDate DATE,\n    RoomID INTEGER,\n    FOREIGN KEY(RoomID) REFERENCES Rooms(ID));\nCREATE TABLE Languages (\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Language TEXT UNIQUE);\nCREATE TABLE Rooms (\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    RoomNumber INTEGER);\nCREATE TABLE Staff (\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Position TEXT,\n    LanguageID INTEGER,\n    FOREIGN KEY(LanguageID) REFERENCES Languages(ID));\nCREATE TABLE StaffRooms (\n    StaffID INTEGER,\n    RoomID INTEGER,\n    WorkDays TEXT,\n    PRIMARY KEY(StaffID, RoomID),\n    FOREIGN KEY(StaffID) REFERENCES Staff(ID),\n    FOREIGN KEY(RoomID) REFERENCES Rooms(ID));\n\nINSERT INTO \"Bookings\" (ID,GuestName,CheckInDate,CheckOutDate,RoomID) VALUES (1,'Alice Cooper','2023-06-01','2023-06-07',101),(2,'Bob Marley','2023-06-08','2023-06-14',102),(3,'Carol King','2023-06-15','2023-06-21',103),(4,'Daniel Ricciardo','2023-06-22','2023-06-29',104),(5,'Eva Mendes','2023-06-30','2023-07-07',105);\nINSERT INTO \"Languages\" (ID,Language) VALUES (1,'Spanish'),(2,'French'),(3,'German'),(4,'Italian'),(5,'Japanese');\nINSERT INTO \"Rooms\" (ID,RoomNumber) VALUES (1,101),(2,102),(3,103),(4,104),(5,105);\nINSERT INTO \"Staff\" (ID,Name,Position,LanguageID) VALUES (1,'John Doe','Chef',1),(2,'Mike Smith','Chef',3),(3,'Emily Johnson','Server',1),(4,'David Brown','Server',4),(5,'Anna Davis','Manager',2),(6,'Peter Miller','Bartender',5);\nINSERT INTO \"StaffRooms\" (StaffID,RoomID,WorkDays) VALUES (5,101,'Monday,Wednesday'),(6,102,'Tuesday,Thursday');\n",
      "question": "Provide a list of all chefs and also provide a list of all Spanish-speaking servers. Show them in one table.",
      "gold_queries": [
        "SELECT Staff.name \r\nFROM Staff JOIN Languages ON Staff.LanguageID = Languages.ID\r\nWHERE Staff.Position = \"Chef\" OR Staff.Position = \"Server\" AND Languages.Language = \"Spanish\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List all staff members whose position is 'Chef' and list all staff members whose LanguageID is 1, filtering for those whose position is 'Server', in a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Position FROM Staff WHERE Position = 'Chef' UNION SELECT Name, Position FROM Staff WHERE LanguageID = 1 AND Position = 'Server'"
          ]
        },
        {
          "interpretation": "Create a table with two columns, one containing all chefs and the other containing all Spanish-speaking servers.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name AS Chef, NULL AS SpanishSpeakingServer\nFROM Staff\nWHERE Position = 'Chef'\nUNION ALL\nSELECT NULL AS Chef, Name AS SpanishSpeakingServer\nFROM Staff\nWHERE Position = 'Server' AND LanguageID = 1"
          ]
        },
        {
          "interpretation": "Return a combined table with two columns: one labeled 'Chefs' containing all chef names and a second labeled 'Spanish-Speaking Servers' containing all names of servers who speak Spanish.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Chef.Name AS Chefs, Server.Name AS 'Spanish-Speaking Servers'\nFROM Staff Chef\nLEFT JOIN Staff Server ON Server.LanguageID = Chef.LanguageID\nWHERE Chef.Position = 'Chef' AND (Server.Position = 'Server' AND Server.LanguageID = (SELECT ID FROM Languages WHERE Language = 'Spanish') OR Server.ID IS NULL)"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_1tab_ref_hospitality_staff/attachment_1tab_ref_hospitality_staff.sqlite",
      "db_dump": "CREATE TABLE Bookings (\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    GuestName TEXT,\n    CheckInDate DATE,\n    CheckOutDate DATE,\n    RoomID INTEGER,\n    FOREIGN KEY(RoomID) REFERENCES Rooms(ID));\nCREATE TABLE Languages (\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Language TEXT UNIQUE);\nCREATE TABLE Rooms (\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    RoomNumber INTEGER);\nCREATE TABLE Staff (\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Position TEXT,\n    LanguageID INTEGER,\n    FOREIGN KEY(LanguageID) REFERENCES Languages(ID));\nCREATE TABLE StaffRooms (\n    StaffID INTEGER,\n    RoomID INTEGER,\n    WorkDays TEXT,\n    PRIMARY KEY(StaffID, RoomID),\n    FOREIGN KEY(StaffID) REFERENCES Staff(ID),\n    FOREIGN KEY(RoomID) REFERENCES Rooms(ID));\n\nINSERT INTO \"Bookings\" (ID,GuestName,CheckInDate,CheckOutDate,RoomID) VALUES (1,'Alice Cooper','2023-06-01','2023-06-07',101),(2,'Bob Marley','2023-06-08','2023-06-14',102),(3,'Carol King','2023-06-15','2023-06-21',103),(4,'Daniel Ricciardo','2023-06-22','2023-06-29',104),(5,'Eva Mendes','2023-06-30','2023-07-07',105);\nINSERT INTO \"Languages\" (ID,Language) VALUES (1,'Spanish'),(2,'French'),(3,'German'),(4,'Italian'),(5,'Japanese');\nINSERT INTO \"Rooms\" (ID,RoomNumber) VALUES (1,101),(2,102),(3,103),(4,104),(5,105);\nINSERT INTO \"Staff\" (ID,Name,Position,LanguageID) VALUES (1,'John Doe','Chef',1),(2,'Mike Smith','Chef',3),(3,'Emily Johnson','Server',1),(4,'David Brown','Server',4),(5,'Anna Davis','Manager',2),(6,'Peter Miller','Bartender',5);\nINSERT INTO \"StaffRooms\" (StaffID,RoomID,WorkDays) VALUES (5,101,'Monday,Wednesday'),(6,102,'Tuesday,Thursday');\n",
      "question": "What chefs speak Spanish and what servers also speak it? Show them in one table.",
      "gold_queries": [
        "SELECT Staff.name \r\nFROM Staff JOIN Languages ON Staff.LanguageID = Languages.ID\r\nWHERE (Staff.Position = \"Chef\" OR Staff.Position = \"Server\") AND Languages.Language = \"Spanish\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List all chefs and servers who list Spanish as their spoken language.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Position FROM Staff WHERE LanguageID = 1 AND (Position = 'Chef' OR Position = 'Server')"
          ]
        },
        {
          "interpretation": "Which chefs and servers have Spanish as a spoken language?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Name FROM Staff WHERE Position IN ('Chef', 'Server') AND LanguageID = 1"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_1tab_ref_hospitality_staff/attachment_1tab_ref_hospitality_staff.sqlite",
      "db_dump": "CREATE TABLE Bookings (\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    GuestName TEXT,\n    CheckInDate DATE,\n    CheckOutDate DATE,\n    RoomID INTEGER,\n    FOREIGN KEY(RoomID) REFERENCES Rooms(ID));\nCREATE TABLE Languages (\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Language TEXT UNIQUE);\nCREATE TABLE Rooms (\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    RoomNumber INTEGER);\nCREATE TABLE Staff (\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Position TEXT,\n    LanguageID INTEGER,\n    FOREIGN KEY(LanguageID) REFERENCES Languages(ID));\nCREATE TABLE StaffRooms (\n    StaffID INTEGER,\n    RoomID INTEGER,\n    WorkDays TEXT,\n    PRIMARY KEY(StaffID, RoomID),\n    FOREIGN KEY(StaffID) REFERENCES Staff(ID),\n    FOREIGN KEY(RoomID) REFERENCES Rooms(ID));\n\nINSERT INTO \"Bookings\" (ID,GuestName,CheckInDate,CheckOutDate,RoomID) VALUES (1,'Alice Cooper','2023-06-01','2023-06-07',101),(2,'Bob Marley','2023-06-08','2023-06-14',102),(3,'Carol King','2023-06-15','2023-06-21',103),(4,'Daniel Ricciardo','2023-06-22','2023-06-29',104),(5,'Eva Mendes','2023-06-30','2023-07-07',105);\nINSERT INTO \"Languages\" (ID,Language) VALUES (1,'Spanish'),(2,'French'),(3,'German'),(4,'Italian'),(5,'Japanese');\nINSERT INTO \"Rooms\" (ID,RoomNumber) VALUES (1,101),(2,102),(3,103),(4,104),(5,105);\nINSERT INTO \"Staff\" (ID,Name,Position,LanguageID) VALUES (1,'John Doe','Chef',1),(2,'Mike Smith','Chef',3),(3,'Emily Johnson','Server',1),(4,'David Brown','Server',4),(5,'Anna Davis','Manager',2),(6,'Peter Miller','Bartender',5);\nINSERT INTO \"StaffRooms\" (StaffID,RoomID,WorkDays) VALUES (5,101,'Monday,Wednesday'),(6,102,'Tuesday,Thursday');\n",
      "question": "Show Spanish-speaking servers and chefs. Show them in one table.",
      "gold_queries": [
        "SELECT Staff.name \r\nFROM Staff JOIN Languages ON Staff.LanguageID = Languages.ID\r\nWHERE (Staff.Position = \"Chef\" OR Staff.Position = \"Server\") AND Languages.Language = \"Spanish\"",
        "SELECT Staff.name \r\nFROM Staff JOIN Languages ON Staff.LanguageID = Languages.ID\r\nWHERE Staff.Position = \"Chef\" OR Staff.Position = \"Server\" AND Languages.Language = \"Spanish\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List Spanish Speakers Who Work as Chefs or Servers",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name FROM Staff WHERE Position IN ('Chef', 'Server') AND LanguageID = (SELECT ID FROM Languages WHERE Language = 'Spanish')"
          ]
        },
        {
          "interpretation": "Combine Chef and Server Staff Members Speaking Spanish into One Table",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Position FROM Staff WHERE LanguageID = 1 AND (Position = 'Chef' OR Position = 'Server')"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.5,
        "f1_score": 0.5,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_2tab_val_relaxation_getaway/attachment_2tab_val_relaxation_getaway.sqlite",
      "db_dump": "CREATE TABLE Day_Spa(\n    id INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT,\n    Services TEXT,\n    Price INTEGER\n);\nCREATE TABLE Guest(\n    id INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Email TEXT,\n    PhoneNumber TEXT\n);\nCREATE TABLE Hotel(\n    id INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT,\n    Rooms TEXT,\n    Amenities TEXT\n);\nCREATE TABLE Restaurant(\n    id INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT,\n    Cuisine TEXT,\n    Menu TEXT\n);\nCREATE TABLE Spa_Therapist(\n    id INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Specialty TEXT,\n    Experience INT\n);\nCREATE TABLE Wellness_Retreat(\n    id INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT,\n    Activities TEXT,\n    Price INTEGER\n);\n\nINSERT INTO \"Day_Spa\" (id,Name,Location,Services,Price) VALUES (1,'Oasis Day Spa','New York','Massage, Facial, Manicure',150),(2,'Serenity Day Spa','Los Angeles','Aromatherapy, Yoga',300),(3,'Escape Day Spa','Chicago','Hot Stone Massage, Acupuncture',250),(4,'Zen Day Spa','Miami','Reflexology, Herbal Wraps',200),(5,'Paradise Day Spa','Dallas','Infrared Sauna, Meditation',180);\nINSERT INTO \"Guest\" (id,FirstName,LastName,Email,PhoneNumber) VALUES (1,'Anna','White','anna@example.com','123-456-7890'),(2,'Ben','Black','ben@example.com','234-567-8901'),(3,'Cathy','Green','cathy@example.com','345-678-9012'),(4,'Daniel','Blue','daniel@example.com','456-789-0123'),(5,'Elizabeth','Red','elizabeth@example.com','567-890-1234');\nINSERT INTO \"Hotel\" (id,Name,Location,Rooms,Amenities) VALUES (1,'Grand Plaza Hotel','New York','300 rooms','Gym, Pool, Restaurant'),(2,'Riverview Inn','California','200 rooms','Spa, Bar, Parking'),(3,'City Center Suites','Illinois','250 rooms','Business center, Concierge service, Laundry'),(4,'Coastal Breeze Resort','Texas','275 rooms','Kids club, Tennis courts, Beach access'),(5,'Urban Loft Hotel','Georgia','225 rooms','Free WiFi, Lounge area, Room service');\nINSERT INTO \"Restaurant\" (id,Name,Location,Cuisine,Menu) VALUES (1,'The Gourmet Table','New York','French','Steak frites, Coq au vin, Cr\u00e8me br\u00fbl\u00e9e'),(2,'Asian Delights','California','Japanese','Sushi rolls, Tempura, Soba noodles'),(3,'Italiano Ristorante','Illinois','Italian','Pasta, Risotto, Tiramisu'),(4,'Baja Grill','Texas','Mexican','Enchiladas, Fajitas, Churros'),(5,'Curry House','Georgia','Indian','Butter chicken, Biryani, Samosas');\nINSERT INTO \"Spa_Therapist\" (id,FirstName,LastName,Specialty,Experience) VALUES (1,'Alice','Smith','Massage',10),(2,'Bob','Johnson','Yoga',8),(3,'Carol','Williams','Acupuncture',6),(4,'David','Brown','Herbal Wraps',12),(5,'Emily','Jones','Facials',7);\nINSERT INTO \"Wellness_Retreat\" (id,Name,Location,Activities,Price) VALUES (1,'Mountain Retreat','Colorado','Hiking, Birdwatching',150),(2,'Beachside Retreat','Florida','Surfing, Paddleboarding',300),(3,'Forest Retreat','Washington','Camping, Fishing',250),(4,'Desert Oasis','Nevada','Stargazing, Offroading',200),(5,'Lakeside Escape','Minnesota','Boating, Swimming',180);\n",
      "question": "Show me $150 wellness programs and $150 day spas. Show them in one table.",
      "gold_queries": [
        "SELECT Day_Spa.name\r\nFROM Day_Spa\r\nWHERE Day_Spa.Price = 150\r\nUNION\r\nSELECT Wellness_Retreat.name\r\nFROM Wellness_Retreat\r\nWHERE Wellness_Retreat.Price = 150"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List all wellness retreats with a price of $150 and all day spas with a price of $150, combining the results into a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Location, Activities AS Services, Price FROM Wellness_Retreat WHERE Price = 150\nUNION\nSELECT Name, Location, Services, Price FROM Day_Spa WHERE Price = 150"
          ]
        },
        {
          "interpretation": "Display a table showing the intersection of wellness retreats priced at $150 and day spas priced at $150.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Location, Activities FROM Wellness_Retreat WHERE Price = 150\nINTERSECT\nSELECT Name, Location, Services FROM Day_Spa WHERE Price = 150"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_2tab_val_relaxation_getaway/attachment_2tab_val_relaxation_getaway.sqlite",
      "db_dump": "CREATE TABLE Day_Spa(\n    id INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT,\n    Services TEXT,\n    Price INTEGER\n);\nCREATE TABLE Guest(\n    id INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Email TEXT,\n    PhoneNumber TEXT\n);\nCREATE TABLE Hotel(\n    id INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT,\n    Rooms TEXT,\n    Amenities TEXT\n);\nCREATE TABLE Restaurant(\n    id INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT,\n    Cuisine TEXT,\n    Menu TEXT\n);\nCREATE TABLE Spa_Therapist(\n    id INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Specialty TEXT,\n    Experience INT\n);\nCREATE TABLE Wellness_Retreat(\n    id INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT,\n    Activities TEXT,\n    Price INTEGER\n);\n\nINSERT INTO \"Day_Spa\" (id,Name,Location,Services,Price) VALUES (1,'Oasis Day Spa','New York','Massage, Facial, Manicure',150),(2,'Serenity Day Spa','Los Angeles','Aromatherapy, Yoga',300),(3,'Escape Day Spa','Chicago','Hot Stone Massage, Acupuncture',250),(4,'Zen Day Spa','Miami','Reflexology, Herbal Wraps',200),(5,'Paradise Day Spa','Dallas','Infrared Sauna, Meditation',180);\nINSERT INTO \"Guest\" (id,FirstName,LastName,Email,PhoneNumber) VALUES (1,'Anna','White','anna@example.com','123-456-7890'),(2,'Ben','Black','ben@example.com','234-567-8901'),(3,'Cathy','Green','cathy@example.com','345-678-9012'),(4,'Daniel','Blue','daniel@example.com','456-789-0123'),(5,'Elizabeth','Red','elizabeth@example.com','567-890-1234');\nINSERT INTO \"Hotel\" (id,Name,Location,Rooms,Amenities) VALUES (1,'Grand Plaza Hotel','New York','300 rooms','Gym, Pool, Restaurant'),(2,'Riverview Inn','California','200 rooms','Spa, Bar, Parking'),(3,'City Center Suites','Illinois','250 rooms','Business center, Concierge service, Laundry'),(4,'Coastal Breeze Resort','Texas','275 rooms','Kids club, Tennis courts, Beach access'),(5,'Urban Loft Hotel','Georgia','225 rooms','Free WiFi, Lounge area, Room service');\nINSERT INTO \"Restaurant\" (id,Name,Location,Cuisine,Menu) VALUES (1,'The Gourmet Table','New York','French','Steak frites, Coq au vin, Cr\u00e8me br\u00fbl\u00e9e'),(2,'Asian Delights','California','Japanese','Sushi rolls, Tempura, Soba noodles'),(3,'Italiano Ristorante','Illinois','Italian','Pasta, Risotto, Tiramisu'),(4,'Baja Grill','Texas','Mexican','Enchiladas, Fajitas, Churros'),(5,'Curry House','Georgia','Indian','Butter chicken, Biryani, Samosas');\nINSERT INTO \"Spa_Therapist\" (id,FirstName,LastName,Specialty,Experience) VALUES (1,'Alice','Smith','Massage',10),(2,'Bob','Johnson','Yoga',8),(3,'Carol','Williams','Acupuncture',6),(4,'David','Brown','Herbal Wraps',12),(5,'Emily','Jones','Facials',7);\nINSERT INTO \"Wellness_Retreat\" (id,Name,Location,Activities,Price) VALUES (1,'Mountain Retreat','Colorado','Hiking, Birdwatching',150),(2,'Beachside Retreat','Florida','Surfing, Paddleboarding',300),(3,'Forest Retreat','Washington','Camping, Fishing',250),(4,'Desert Oasis','Nevada','Stargazing, Offroading',200),(5,'Lakeside Escape','Minnesota','Boating, Swimming',180);\n",
      "question": "Show $150 wellness programs and day spas. Show them in one table.",
      "gold_queries": [
        "SELECT Day_Spa.name\r\nFROM Day_Spa\r\nWHERE Day_Spa.Price = 150\r\nUNION\r\nSELECT Wellness_Retreat.name\r\nFROM Wellness_Retreat\r\nWHERE Wellness_Retreat.Price = 150",
        "SELECT Day_Spa.name\r\nFROM Day_Spa\r\nUNION\r\nSELECT Wellness_Retreat.name\r\nFROM Wellness_Retreat\r\nWHERE Wellness_Retreat.Price = 150"
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List all wellness retreats priced at $150 and all day spas priced at $150, presenting both in a consolidated table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Location, Activities AS Description, Price FROM Wellness_Retreat WHERE Price = 150\nUNION\nSELECT Name, Location, Services AS Description, Price FROM Day_Spa WHERE Price = 150"
          ]
        },
        {
          "interpretation": "Display all wellness retreats and day spas with a price of $150, combining them into a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Location, 'Wellness_Retreat' AS Type, Price \nFROM Wellness_Retreat \nWHERE Price = 150 \nUNION \nSELECT Name, Location, 'Day_Spa' AS Type, Price \nFROM Day_Spa \nWHERE Price = 150"
          ]
        },
        {
          "interpretation": "Present a table showing the name, location, and price of all wellness retreats and day spas that cost $150.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Location, Price FROM Wellness_Retreat WHERE Price = 150 UNION SELECT Name, Location, Price FROM Day_Spa WHERE Price = 150"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_2tab_val_relaxation_getaway/attachment_2tab_val_relaxation_getaway.sqlite",
      "db_dump": "CREATE TABLE Day_Spa(\n    id INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT,\n    Services TEXT,\n    Price INTEGER\n);\nCREATE TABLE Guest(\n    id INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Email TEXT,\n    PhoneNumber TEXT\n);\nCREATE TABLE Hotel(\n    id INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT,\n    Rooms TEXT,\n    Amenities TEXT\n);\nCREATE TABLE Restaurant(\n    id INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT,\n    Cuisine TEXT,\n    Menu TEXT\n);\nCREATE TABLE Spa_Therapist(\n    id INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Specialty TEXT,\n    Experience INT\n);\nCREATE TABLE Wellness_Retreat(\n    id INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT,\n    Activities TEXT,\n    Price INTEGER\n);\n\nINSERT INTO \"Day_Spa\" (id,Name,Location,Services,Price) VALUES (1,'Oasis Day Spa','New York','Massage, Facial, Manicure',150),(2,'Serenity Day Spa','Los Angeles','Aromatherapy, Yoga',300),(3,'Escape Day Spa','Chicago','Hot Stone Massage, Acupuncture',250),(4,'Zen Day Spa','Miami','Reflexology, Herbal Wraps',200),(5,'Paradise Day Spa','Dallas','Infrared Sauna, Meditation',180);\nINSERT INTO \"Guest\" (id,FirstName,LastName,Email,PhoneNumber) VALUES (1,'Anna','White','anna@example.com','123-456-7890'),(2,'Ben','Black','ben@example.com','234-567-8901'),(3,'Cathy','Green','cathy@example.com','345-678-9012'),(4,'Daniel','Blue','daniel@example.com','456-789-0123'),(5,'Elizabeth','Red','elizabeth@example.com','567-890-1234');\nINSERT INTO \"Hotel\" (id,Name,Location,Rooms,Amenities) VALUES (1,'Grand Plaza Hotel','New York','300 rooms','Gym, Pool, Restaurant'),(2,'Riverview Inn','California','200 rooms','Spa, Bar, Parking'),(3,'City Center Suites','Illinois','250 rooms','Business center, Concierge service, Laundry'),(4,'Coastal Breeze Resort','Texas','275 rooms','Kids club, Tennis courts, Beach access'),(5,'Urban Loft Hotel','Georgia','225 rooms','Free WiFi, Lounge area, Room service');\nINSERT INTO \"Restaurant\" (id,Name,Location,Cuisine,Menu) VALUES (1,'The Gourmet Table','New York','French','Steak frites, Coq au vin, Cr\u00e8me br\u00fbl\u00e9e'),(2,'Asian Delights','California','Japanese','Sushi rolls, Tempura, Soba noodles'),(3,'Italiano Ristorante','Illinois','Italian','Pasta, Risotto, Tiramisu'),(4,'Baja Grill','Texas','Mexican','Enchiladas, Fajitas, Churros'),(5,'Curry House','Georgia','Indian','Butter chicken, Biryani, Samosas');\nINSERT INTO \"Spa_Therapist\" (id,FirstName,LastName,Specialty,Experience) VALUES (1,'Alice','Smith','Massage',10),(2,'Bob','Johnson','Yoga',8),(3,'Carol','Williams','Acupuncture',6),(4,'David','Brown','Herbal Wraps',12),(5,'Emily','Jones','Facials',7);\nINSERT INTO \"Wellness_Retreat\" (id,Name,Location,Activities,Price) VALUES (1,'Mountain Retreat','Colorado','Hiking, Birdwatching',150),(2,'Beachside Retreat','Florida','Surfing, Paddleboarding',300),(3,'Forest Retreat','Washington','Camping, Fishing',250),(4,'Desert Oasis','Nevada','Stargazing, Offroading',200),(5,'Lakeside Escape','Minnesota','Boating, Swimming',180);\n",
      "question": "Show all day spas and $150 wellness programs. Show them in one table.",
      "gold_queries": [
        "SELECT Day_Spa.name\r\nFROM Day_Spa\r\nUNION\r\nSELECT Wellness_Retreat.name\r\nFROM Wellness_Retreat\r\nWHERE Wellness_Retreat.Price = 150"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List all day spas and wellness retreats with a price of $150, displayed side-by-side in a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DS.Name AS DaySpaName, WR.Name AS WellnessRetreatName\nFROM Day_Spa DS\nFULL OUTER JOIN Wellness_Retreat WR\nON DS.Price = WR.Price\nWHERE DS.Price = 150 AND WR.Price = 150"
          ]
        },
        {
          "interpretation": "Show a single table that combines data from `Day_Spa`, filtering for entries with a price of $150, and data from `Wellness_Retreat`, also filtering for entries with a price of $150.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Day_Spa WHERE Price = 150 UNION SELECT * FROM Wellness_Retreat WHERE Price = 150"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_2tab_val_vacation_option/attachment_2tab_val_vacation_option.sqlite",
      "db_dump": "CREATE TABLE All_Inclusive_Resort (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT,\n    star_rating INTEGER,\n    number_of_rooms INTEGER,\n    activities TEXT);\nCREATE TABLE Booking(\n    bookingId INTEGER PRIMARY KEY AUTOINCREMENT,\n    customerId INTEGER,\n    cruiseOrResort BOOLEAN,\n    checkinDate DATE,\n    checkoutDate DATE,\n    FOREIGN KEY(customerId) REFERENCES Customer(id));\nCREATE TABLE Cruise_Ship (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    capacity INTEGER,\n    destination TEXT,\n    cruise_start_date DATE,\n    cruise_end_date DATE,\n    activities TEXT);\nCREATE TABLE Customer(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber CHAR(10),\n    preferredLanguage TEXT);\nCREATE TABLE Employee(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    position TEXT,\n    yearsOfExperience INTEGER,\n    skill TEXT);\n\nINSERT INTO \"All_Inclusive_Resort\" (id,name,location,star_rating,number_of_rooms,activities) VALUES (1,'Paradise Beach','Hawaii',4,150,'Dance Class'),(2,'Sunset Oasis','Mexico',3,200,'Yoga Session');\nINSERT INTO \"Booking\" (bookingId,customerId,cruiseOrResort,checkinDate,checkoutDate) VALUES (1,1,1,'2023-06-01','2023-06-07'),(2,2,0,'2023-06-10','2023-06-20');\nINSERT INTO \"Cruise_Ship\" (id,name,capacity,destination,cruise_start_date,cruise_end_date,activities) VALUES (1,'Majestic Ocean',3000,'Caribbean','2023-06-01','2023-06-07','Dance Class'),(2,'Grand Voyage',2500,'Alaska','2023-05-15','2023-05-28','Bingo Night');\nINSERT INTO \"Customer\" (id,firstName,lastName,email,phoneNumber,preferredLanguage) VALUES (1,'John','Smith','johnsmith@example.com','+1234567890','English'),(2,'Jane','Doe','janedoe@example.com','+9876543210','French');\nINSERT INTO \"Employee\" (id,firstName,lastName,position,yearsOfExperience,skill) VALUES (1,'Tom','Anderson','Receptionist',5,'Customer Service'),(2,'Laura','Williams','Chef',8,'Cooking');\n",
      "question": "Display all the cruise ships but only the resorts that offer a dance class. Show them in one table.",
      "gold_queries": [
        "SELECT Cruise_Ship.name\r\nFROM Cruise_Ship\r\nUNION\r\nSELECT All_Inclusive_Resort.name\r\nFROM All_Inclusive_Resort\r\nWHERE All_Inclusive_Resort.activities = \"Dance Class\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Display all cruise ships in a table, merged with a view of all resorts offering dance classes.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Cruise_Ship\nUNION ALL\nSELECT id AS id, name AS name, location AS destination, number_of_rooms AS capacity, NULL AS cruise_start_date, NULL AS cruise_end_date, activities AS activities\nFROM All_Inclusive_Resort\nWHERE activities = 'Dance Class'"
          ]
        },
        {
          "interpretation": "Display a table containing only resort information, filtered to show only resorts offering dance classes.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, location, star_rating, number_of_rooms, activities \nFROM All_Inclusive_Resort \nWHERE activities LIKE '%Dance Class%'"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_2tab_val_vacation_option/attachment_2tab_val_vacation_option.sqlite",
      "db_dump": "CREATE TABLE All_Inclusive_Resort (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT,\n    star_rating INTEGER,\n    number_of_rooms INTEGER,\n    activities TEXT);\nCREATE TABLE Booking(\n    bookingId INTEGER PRIMARY KEY AUTOINCREMENT,\n    customerId INTEGER,\n    cruiseOrResort BOOLEAN,\n    checkinDate DATE,\n    checkoutDate DATE,\n    FOREIGN KEY(customerId) REFERENCES Customer(id));\nCREATE TABLE Cruise_Ship (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    capacity INTEGER,\n    destination TEXT,\n    cruise_start_date DATE,\n    cruise_end_date DATE,\n    activities TEXT);\nCREATE TABLE Customer(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber CHAR(10),\n    preferredLanguage TEXT);\nCREATE TABLE Employee(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    position TEXT,\n    yearsOfExperience INTEGER,\n    skill TEXT);\n\nINSERT INTO \"All_Inclusive_Resort\" (id,name,location,star_rating,number_of_rooms,activities) VALUES (1,'Paradise Beach','Hawaii',4,150,'Dance Class'),(2,'Sunset Oasis','Mexico',3,200,'Yoga Session');\nINSERT INTO \"Booking\" (bookingId,customerId,cruiseOrResort,checkinDate,checkoutDate) VALUES (1,1,1,'2023-06-01','2023-06-07'),(2,2,0,'2023-06-10','2023-06-20');\nINSERT INTO \"Cruise_Ship\" (id,name,capacity,destination,cruise_start_date,cruise_end_date,activities) VALUES (1,'Majestic Ocean',3000,'Caribbean','2023-06-01','2023-06-07','Dance Class'),(2,'Grand Voyage',2500,'Alaska','2023-05-15','2023-05-28','Bingo Night');\nINSERT INTO \"Customer\" (id,firstName,lastName,email,phoneNumber,preferredLanguage) VALUES (1,'John','Smith','johnsmith@example.com','+1234567890','English'),(2,'Jane','Doe','janedoe@example.com','+9876543210','French');\nINSERT INTO \"Employee\" (id,firstName,lastName,position,yearsOfExperience,skill) VALUES (1,'Tom','Anderson','Receptionist',5,'Customer Service'),(2,'Laura','Williams','Chef',8,'Cooking');\n",
      "question": "Show cruise ships and resorts that offer a dance class. Show them in one table.",
      "gold_queries": [
        "SELECT Cruise_Ship.name\r\nFROM Cruise_Ship\r\nWHERE Cruise_Ship.activities = \"Dance Class\"\r\nUNION\r\nSELECT All_Inclusive_Resort.name\r\nFROM All_Inclusive_Resort\r\nWHERE All_Inclusive_Resort.activities = \"Dance Class\"",
        "SELECT Cruise_Ship.name\r\nFROM Cruise_Ship\r\nUNION\r\nSELECT All_Inclusive_Resort.name\r\nFROM All_Inclusive_Resort\r\nWHERE All_Inclusive_Resort.activities = \"Dance Class\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Return a single table containing all cruise ship names and resort names that have \"Dance Class\" listed in their \"activities\" field.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name FROM All_Inclusive_Resort WHERE activities = 'Dance Class' UNION SELECT name FROM Cruise_Ship WHERE activities = 'Dance Class'"
          ]
        },
        {
          "interpretation": "Return a table with columns for \"Name\" and \"Type\" (Cruise Ship / Resort), populated with the names of all cruise ships and resorts offering dance classes.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name AS \"Name\", 'Cruise Ship' AS \"Type\" FROM Cruise_Ship WHERE activities LIKE '%Dance Class%' \nUNION \nSELECT name AS \"Name\", 'Resort' AS \"Type\" FROM All_Inclusive_Resort WHERE activities LIKE '%Dance Class%'"
          ]
        },
        {
          "interpretation": "Return a combined table listing cruise ships and resorts, distinguishing between them with a column header or indicator. Each row should list a name with the activity \"Dance Class\".",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT 'Resort' AS type, name, activities FROM All_Inclusive_Resort WHERE activities = 'Dance Class'\nUNION\nSELECT 'Cruise Ship' AS type, name, activities FROM Cruise_Ship WHERE activities = 'Dance Class'"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.3333333333333333,
        "f1_score": 0.4,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_2tab_val_vacation_option/attachment_2tab_val_vacation_option.sqlite",
      "db_dump": "CREATE TABLE All_Inclusive_Resort (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT,\n    star_rating INTEGER,\n    number_of_rooms INTEGER,\n    activities TEXT);\nCREATE TABLE Booking(\n    bookingId INTEGER PRIMARY KEY AUTOINCREMENT,\n    customerId INTEGER,\n    cruiseOrResort BOOLEAN,\n    checkinDate DATE,\n    checkoutDate DATE,\n    FOREIGN KEY(customerId) REFERENCES Customer(id));\nCREATE TABLE Cruise_Ship (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    capacity INTEGER,\n    destination TEXT,\n    cruise_start_date DATE,\n    cruise_end_date DATE,\n    activities TEXT);\nCREATE TABLE Customer(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber CHAR(10),\n    preferredLanguage TEXT);\nCREATE TABLE Employee(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    position TEXT,\n    yearsOfExperience INTEGER,\n    skill TEXT);\n\nINSERT INTO \"All_Inclusive_Resort\" (id,name,location,star_rating,number_of_rooms,activities) VALUES (1,'Paradise Beach','Hawaii',4,150,'Dance Class'),(2,'Sunset Oasis','Mexico',3,200,'Yoga Session');\nINSERT INTO \"Booking\" (bookingId,customerId,cruiseOrResort,checkinDate,checkoutDate) VALUES (1,1,1,'2023-06-01','2023-06-07'),(2,2,0,'2023-06-10','2023-06-20');\nINSERT INTO \"Cruise_Ship\" (id,name,capacity,destination,cruise_start_date,cruise_end_date,activities) VALUES (1,'Majestic Ocean',3000,'Caribbean','2023-06-01','2023-06-07','Dance Class'),(2,'Grand Voyage',2500,'Alaska','2023-05-15','2023-05-28','Bingo Night');\nINSERT INTO \"Customer\" (id,firstName,lastName,email,phoneNumber,preferredLanguage) VALUES (1,'John','Smith','johnsmith@example.com','+1234567890','English'),(2,'Jane','Doe','janedoe@example.com','+9876543210','French');\nINSERT INTO \"Employee\" (id,firstName,lastName,position,yearsOfExperience,skill) VALUES (1,'Tom','Anderson','Receptionist',5,'Customer Service'),(2,'Laura','Williams','Chef',8,'Cooking');\n",
      "question": "Show any cruise ships and resorts where either offer a dance class. Show them in one table.",
      "gold_queries": [
        "SELECT Cruise_Ship.name\r\nFROM Cruise_Ship\r\nWHERE Cruise_Ship.activities = \"Dance Class\"\r\nUNION\r\nSELECT All_Inclusive_Resort.name\r\nFROM All_Inclusive_Resort\r\nWHERE All_Inclusive_Resort.activities = \"Dance Class\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List all cruise ships and resorts providing dance classes in a single output table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, 'All_Inclusive_Resort' AS type FROM All_Inclusive_Resort WHERE activities LIKE '%Dance Class%' UNION SELECT name, 'Cruise_Ship' AS type FROM Cruise_Ship WHERE activities LIKE '%Dance Class%'"
          ]
        },
        {
          "interpretation": "Show a combined table with cruise ships and resorts that have \"Dance Class\" activity.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, activity FROM (SELECT name, activities AS activity FROM All_Inclusive_Resort UNION SELECT name, activities AS activity FROM Cruise_Ship) WHERE activity = 'Dance Class'"
          ]
        },
        {
          "interpretation": "Select a unified table including both cruise ships and resorts offering dance classes.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, location, star_rating, number_of_rooms, activities AS source FROM All_Inclusive_Resort WHERE activities = 'Dance Class'\nUNION\nSELECT name, destination AS location, NULL AS star_rating, capacity AS number_of_rooms, activities AS source FROM Cruise_Ship WHERE activities = 'Dance Class'"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_1tab_ref_customer_facing_roles/attachment_1tab_ref_customer_facing_roles.sqlite",
      "db_dump": "CREATE TABLE Companies (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT\n);\nCREATE TABLE Customer_Facing_Roles (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    role TEXT\n);\nCREATE TABLE Employees (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    email TEXT,\n    phone TEXT,\n    customer_role_id INTEGER,\n    language_proficiency_id INTEGER, FullName TEXT,\n    FOREIGN KEY(customer_role_id) REFERENCES Customer_Facing_Roles(id),\n    FOREIGN KEY(language_proficiency_id) REFERENCES Language_Proficiencies(id)\n);\nCREATE TABLE Language_Proficiencies (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    language TEXT\n);\n\nINSERT INTO \"Companies\" (id,name) VALUES (1,'TechCorp'),(2,'Software Inc.'),(3,'Data Solutions Ltd.'),(4,'AI Developers'),(5,'Network Services Co.');\nINSERT INTO \"Customer_Facing_Roles\" (id,role) VALUES (1,'Customer Service Advisor'),(2,'IT Support Technician');\nINSERT INTO \"Employees\" (id,email,phone,customer_role_id,language_proficiency_id,FullName) VALUES (1,'mikeadams@email.com','+1112223333',1,1,'Mike Adams'),(2,'nancywalker@email.com','+2223334444',1,2,'Nancy Walker'),(3,'thanks@email.com','+3344556677',2,1,'Tom Hanks'),(4,'laurawilliams@email.com','+4455667788',2,2,'Laura Williams'),(5,'stevemartin@email.com','+5566778899',1,1,'Steve Martin');\nINSERT INTO \"Language_Proficiencies\" (id,language) VALUES (1,'Bilingual'),(2,'Multilingual');\n",
      "question": "Provide the customer service advisors and IT support technicians who are bilingual. Show them in one table.",
      "gold_queries": [
        "SELECT Employees.FullName\r\nFROM Customer_Facing_Roles JOIN Employees ON Customer_Facing_Roles.id = Employees.customer_role_id JOIN Language_Proficiencies ON Employees.language_proficiency_id = Language_Proficiencies.id\r\nWHERE (Customer_Facing_Roles.role = \"Customer Service Advisor\" OR Customer_Facing_Roles.role = \"IT Support Technician\") AND Language_Proficiencies.language = \"Bilingual\"",
        "SELECT Employees.FullName\r\nFROM Customer_Facing_Roles JOIN Employees ON Customer_Facing_Roles.id = Employees.customer_role_id JOIN Language_Proficiencies ON Employees.language_proficiency_id = Language_Proficiencies.id\r\nWHERE Customer_Facing_Roles.role = \"Customer Service Advisor\" OR Customer_Facing_Roles.role = \"IT Support Technician\" AND Language_Proficiencies.language = \"Bilingual\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "where Customer_Facing_Roles.role in ('Customer Service Advisor', 'IT Support Technician')",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Employees.FullName, Customer_Facing_Roles.role, Language_Proficiencies.language\nFROM Employees\nJOIN Customer_Facing_Roles ON Employees.customer_role_id = Customer_Facing_Roles.id\nJOIN Language_Proficiencies ON Employees.language_proficiency_id = Language_Proficiencies.id\nWHERE Customer_Facing_Roles.role IN ('Customer Service Advisor', 'IT Support Technician')"
          ]
        },
        {
          "interpretation": "Select Employees.FullName, Employees.email from Employees",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Employees.FullName, Employees.email FROM Employees"
          ]
        },
        {
          "interpretation": "List all Customer Service Advisors and IT Support Technicians who can speak two languages. Show their full names and email addresses.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.FullName, E.email\nFROM Employees E\nJOIN Customer_Facing_Roles CFR ON E.customer_role_id = CFR.id\nJOIN Language_Proficiencies LP ON E.language_proficiency_id = LP.id\nWHERE CFR.role IN ('Customer Service Advisor', 'IT Support Technician')\nAND LP.language = 'Multilingual'"
          ]
        },
        {
          "interpretation": "Which bilingual employees have roles as Customer Service Advisors or IT Support Technicians? List their names and emails.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.FullName, E.email\nFROM Employees E\nJOIN Customer_Facing_Roles CFR ON E.customer_role_id = CFR.id\nJOIN Language_Proficiencies LP ON E.language_proficiency_id = LP.id\nWHERE LP.language = 'Bilingual'\n  AND CFR.role IN ('Customer Service Advisor', 'IT Support Technician')"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_1tab_ref_customer_facing_roles/attachment_1tab_ref_customer_facing_roles.sqlite",
      "db_dump": "CREATE TABLE Companies (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT\n);\nCREATE TABLE Customer_Facing_Roles (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    role TEXT\n);\nCREATE TABLE Employees (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    email TEXT,\n    phone TEXT,\n    customer_role_id INTEGER,\n    language_proficiency_id INTEGER, FullName TEXT,\n    FOREIGN KEY(customer_role_id) REFERENCES Customer_Facing_Roles(id),\n    FOREIGN KEY(language_proficiency_id) REFERENCES Language_Proficiencies(id)\n);\nCREATE TABLE Language_Proficiencies (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    language TEXT\n);\n\nINSERT INTO \"Companies\" (id,name) VALUES (1,'TechCorp'),(2,'Software Inc.'),(3,'Data Solutions Ltd.'),(4,'AI Developers'),(5,'Network Services Co.');\nINSERT INTO \"Customer_Facing_Roles\" (id,role) VALUES (1,'Customer Service Advisor'),(2,'IT Support Technician');\nINSERT INTO \"Employees\" (id,email,phone,customer_role_id,language_proficiency_id,FullName) VALUES (1,'mikeadams@email.com','+1112223333',1,1,'Mike Adams'),(2,'nancywalker@email.com','+2223334444',1,2,'Nancy Walker'),(3,'thanks@email.com','+3344556677',2,1,'Tom Hanks'),(4,'laurawilliams@email.com','+4455667788',2,2,'Laura Williams'),(5,'stevemartin@email.com','+5566778899',1,1,'Steve Martin');\nINSERT INTO \"Language_Proficiencies\" (id,language) VALUES (1,'Bilingual'),(2,'Multilingual');\n",
      "question": "Show all of the customer service advisor details, also show the bilingual IT support technicians. Show them in one table.",
      "gold_queries": [
        "SELECT Employees.FullName\r\nFROM Customer_Facing_Roles JOIN Employees ON Customer_Facing_Roles.id = Employees.customer_role_id JOIN Language_Proficiencies ON Employees.language_proficiency_id = Language_Proficiencies.id\r\nWHERE Customer_Facing_Roles.role = \"Customer Service Advisor\" OR Customer_Facing_Roles.role = \"IT Support Technician\" AND Language_Proficiencies.language = \"Bilingual\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Show all employees whose customer role is \"Customer Service Advisor\" and all employees whose customer role is \"IT Support Technician\" and whose language proficiency is \"Bilingual\", in a combined table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT e.FullName, e.email, e.phone, cfr.role, lp.language\nFROM Employees e\nJOIN Customer_Facing_Roles cfr ON e.customer_role_id = cfr.id\nJOIN Language_Proficiencies lp ON e.language_proficiency_id = lp.id\nWHERE cfr.role = 'Customer Service Advisor'\nUNION\nSELECT e.FullName, e.email, e.phone, cfr.role, lp.language\nFROM Employees e\nJOIN Customer_Facing_Roles cfr ON e.customer_role_id = cfr.id\nJOIN Language_Proficiencies lp ON e.language_proficiency_id = lp.id\nWHERE cfr.role = 'IT Support Technician' AND lp.language = 'Bilingual'"
          ]
        },
        {
          "interpretation": "Show all employees with the \"Customer Service Advisor\" role and all employees with the \"IT Support Technician\" role and a language proficiency of \"Bilingual\".",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT FullName FROM Employees WHERE customer_role_id IN (1, 2) AND (customer_role_id = 1 OR (customer_role_id = 2 AND language_proficiency_id = 1))"
          ]
        },
        {
          "interpretation": "List a combined table containing details of all employees who have the \"Customer Service Advisor\" role and those who have the \"IT Support Technician\" role and are \"Bilingual\".",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Employees.email, Employees.phone, Employees.FullName\nFROM Employees\nJOIN Customer_Facing_Roles ON Employees.customer_role_id = Customer_Facing_Roles.id\nJOIN Language_Proficiencies ON Employees.language_proficiency_id = Language_Proficiencies.id\nWHERE Customer_Facing_Roles.role = 'Customer Service Advisor'\nUNION\nSELECT Employees.email, Employees.phone, Employees.FullName\nFROM Employees\nJOIN Customer_Facing_Roles ON Employees.customer_role_id = Customer_Facing_Roles.id\nJOIN Language_Proficiencies ON Employees.language_proficiency_id = Language_Proficiencies.id\nWHERE Customer_Facing_Roles.role = 'IT Support Technician' AND Language_Proficiencies.language = 'Bilingual'"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_1tab_ref_customer_facing_roles/attachment_1tab_ref_customer_facing_roles.sqlite",
      "db_dump": "CREATE TABLE Companies (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT\n);\nCREATE TABLE Customer_Facing_Roles (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    role TEXT\n);\nCREATE TABLE Employees (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    email TEXT,\n    phone TEXT,\n    customer_role_id INTEGER,\n    language_proficiency_id INTEGER, FullName TEXT,\n    FOREIGN KEY(customer_role_id) REFERENCES Customer_Facing_Roles(id),\n    FOREIGN KEY(language_proficiency_id) REFERENCES Language_Proficiencies(id)\n);\nCREATE TABLE Language_Proficiencies (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    language TEXT\n);\n\nINSERT INTO \"Companies\" (id,name) VALUES (1,'TechCorp'),(2,'Software Inc.'),(3,'Data Solutions Ltd.'),(4,'AI Developers'),(5,'Network Services Co.');\nINSERT INTO \"Customer_Facing_Roles\" (id,role) VALUES (1,'Customer Service Advisor'),(2,'IT Support Technician');\nINSERT INTO \"Employees\" (id,email,phone,customer_role_id,language_proficiency_id,FullName) VALUES (1,'mikeadams@email.com','+1112223333',1,1,'Mike Adams'),(2,'nancywalker@email.com','+2223334444',1,2,'Nancy Walker'),(3,'thanks@email.com','+3344556677',2,1,'Tom Hanks'),(4,'laurawilliams@email.com','+4455667788',2,2,'Laura Williams'),(5,'stevemartin@email.com','+5566778899',1,1,'Steve Martin');\nINSERT INTO \"Language_Proficiencies\" (id,language) VALUES (1,'Bilingual'),(2,'Multilingual');\n",
      "question": "Display all of the bilingual employees working as either customer service advisors or IT support technicians. Show them in one table.",
      "gold_queries": [
        "SELECT Employees.FullName\r\nFROM Customer_Facing_Roles JOIN Employees ON Customer_Facing_Roles.id = Employees.customer_role_id JOIN Language_Proficiencies ON Employees.language_proficiency_id = Language_Proficiencies.id\r\nWHERE (Customer_Facing_Roles.role = \"Customer Service Advisor\" OR Customer_Facing_Roles.role = \"IT Support Technician\") AND Language_Proficiencies.language = \"Bilingual\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List all workers who are \" Bilingual\", and who work as either \"Customer Service Advisor\" or \"IT Support Technician\"",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Employees.FullName\nFROM Employees\nJOIN Customer_Facing_Roles ON Employees.customer_role_id = Customer_Facing_Roles.id\nJOIN Language_Proficiencies ON Employees.language_proficiency_id = Language_Proficiencies.id\nWHERE Language_Proficiencies.language = 'Bilingual'\nAND (Customer_Facing_Roles.role = 'Customer Service Advisor' OR Customer_Facing_Roles.role = 'IT Support Technician')"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Job Postings/scope_lab_technicians_instruments/scope_lab_technicians_instruments.sqlite",
      "db_dump": "CREATE TABLE Instruments(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    instrumentName TEXT,\n    description TEXT);\nCREATE TABLE Lab_Technicians(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT);\nCREATE TABLE Lab_Technicians_Instruments(\n    technicianId INTEGER,\n    instrumentId INTEGER,\n    FOREIGN KEY (technicianId) REFERENCES Lab_Technicians(id),\n    FOREIGN KEY (instrumentId) REFERENCES Instruments(id));\n\nINSERT INTO \"Instruments\" (id,instrumentName,description) VALUES (1,'Microscope','A device used for viewing objects at high magnification.'),(2,'Centrifuge','An apparatus that uses centrifugal force to separate substances based on their density.'),(3,'Autoclave','A sterilization chamber that uses pressurized steam to kill bacteria and other microorganisms.'),(4,'pH Meter','A device that measures the acidity or alkalinity of a solution.'),(5,'Thermometer','A device that measures temperature.');\nINSERT INTO \"Lab_Technicians\" (id,name,email) VALUES (1,'John Doe','john.doe@example.com'),(2,'Jane Smith','jane.smith@example.com'),(3,'Alice Johnson','alice.johnson@example.com'),(4,'Bob Brown','bob.brown@example.com'),(5,'Charlie Davis','charlie.davis@example.com');\nINSERT INTO \"Lab_Technicians_Instruments\" (technicianId,instrumentId) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\n",
      "question": "What instruments are associated with each lab technician?",
      "gold_queries": [
        "SELECT Instruments.instrumentName  from Lab_Technicians_Instruments join Instruments on Lab_Technicians_Instruments.instrumentId = Instruments.id join Lab_Technicians on Lab_Technicians_Instruments.technicianId = Lab_Technicians.id   GROUP BY Lab_Technicians_Instruments.instrumentId HAVING COUNT(DISTINCT Lab_Technicians_Instruments.technicianId) = (SELECT COUNT(*) FROM  Lab_Technicians)",
        "select lab_technicians.name , instruments.instrumentname from Lab_Technicians_Instruments join Instruments on Lab_Technicians_Instruments.instrumentId = Instruments.id join Lab_Technicians on Lab_Technicians_Instruments.technicianId = Lab_Technicians.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For each lab technician, display a personalized list of instruments they have access to or are assigned.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T.name AS technicianName, I.instrumentName\nFROM Lab_Technicians AS T\nJOIN Lab_Technicians_Instruments AS LTI ON T.id = LTI.technicianId\nJOIN Instruments AS I ON LTI.instrumentId = I.id"
          ]
        },
        {
          "interpretation": "The city's residents are bearing the brunt of the pollution.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Lab_Technicians WHERE name = 'The city''s residents are bearing the brunt of the pollution.'"
          ]
        },
        {
          "interpretation": "Sukarno\u2019s vision of a \"Green Metropolis\" seems far from reality as smog continues to choke the city.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Instruments"
          ]
        },
        {
          "interpretation": "Environmental groups argue that more needs to be done.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT instrumentName FROM Instruments"
          ]
        },
        {
          "interpretation": "\"It's a living nightmare,\" said 45-year-old teacher, Lili Handayani, coughing as she walked her son to school amidst the thick smog. \"This air scares me. It makes me worried about my son's health.\"",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name FROM Lab_Technicians WHERE id = 1"
          ]
        },
        {
          "interpretation": "Retrieve a list of all unique instruments used by at least one lab technician, potentially with counts or affiliations to technicians.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT instrumentName, COUNT(technicianId) AS numberOfTechnicians\nFROM Instruments\nJOIN Lab_Technicians_Instruments ON Instruments.id = Lab_Technicians_Instruments.instrumentId\nGROUP BY instrumentName"
          ]
        },
        {
          "interpretation": "They call for stricter regulations on industries and vehicles, as well as increased investment in public transportation and renewable energy sources.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT instrumentName, description FROM Instruments"
          ]
        },
        {
          "interpretation": "Jakarta faces a daunting challenge in cleaning its air.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Instruments WHERE instrumentName = 'Microscope'"
          ]
        },
        {
          "interpretation": "But amid the thick haze there are rays of hope.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Lab_Technicians WHERE name = 'Alice Johnson'"
          ]
        },
        {
          "interpretation": "JAKARTA, Indonesia\u2014Commuters ride bicycles on a street in Jakarta, Indonesia's capital city, heavily affected by its recurring smog. (EPA)",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT instrumentName FROM Instruments WHERE id IN (SELECT instrumentId FROM Lab_Technicians_Instruments WHERE technicianId = 5)"
          ]
        },
        {
          "interpretation": "List each instrument along with the id of each technician who uses it, referencing the Lab_Technicians_Instruments table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT instrumentId, technicianId FROM Lab_Technicians_Instruments"
          ]
        }
      ],
      "num_unique_execution_results": 11,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.09090909090909091,
        "f1_score": 0.15384615384615385,
        "num_queries": 11,
        "num_unique_queries": 11,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Job Postings/scope_lab_technicians_instruments/scope_lab_technicians_instruments.sqlite",
      "db_dump": "CREATE TABLE Instruments(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    instrumentName TEXT,\n    description TEXT);\nCREATE TABLE Lab_Technicians(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT);\nCREATE TABLE Lab_Technicians_Instruments(\n    technicianId INTEGER,\n    instrumentId INTEGER,\n    FOREIGN KEY (technicianId) REFERENCES Lab_Technicians(id),\n    FOREIGN KEY (instrumentId) REFERENCES Instruments(id));\n\nINSERT INTO \"Instruments\" (id,instrumentName,description) VALUES (1,'Microscope','A device used for viewing objects at high magnification.'),(2,'Centrifuge','An apparatus that uses centrifugal force to separate substances based on their density.'),(3,'Autoclave','A sterilization chamber that uses pressurized steam to kill bacteria and other microorganisms.'),(4,'pH Meter','A device that measures the acidity or alkalinity of a solution.'),(5,'Thermometer','A device that measures temperature.');\nINSERT INTO \"Lab_Technicians\" (id,name,email) VALUES (1,'John Doe','john.doe@example.com'),(2,'Jane Smith','jane.smith@example.com'),(3,'Alice Johnson','alice.johnson@example.com'),(4,'Bob Brown','bob.brown@example.com'),(5,'Charlie Davis','charlie.davis@example.com');\nINSERT INTO \"Lab_Technicians_Instruments\" (technicianId,instrumentId) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\n",
      "question": "What description of instruments is common for all lab technicians?",
      "gold_queries": [
        "SELECT Instruments.description  from Lab_Technicians_Instruments join Instruments on Lab_Technicians_Instruments.instrumentId = Instruments.id join Lab_Technicians on Lab_Technicians_Instruments.technicianId = Lab_Technicians.id   GROUP BY Lab_Technicians_Instruments.instrumentId HAVING COUNT(DISTINCT Lab_Technicians_Instruments.technicianId) = (SELECT COUNT(*) FROM  Lab_Technicians)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What is the description field value that appears in the Instruments table for every instrument assigned to any lab technician?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT description FROM Instruments WHERE id IN (SELECT instrumentId FROM Lab_Technicians_Instruments)"
          ]
        },
        {
          "interpretation": "What descriptions are shared by all instruments used by any lab technician?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT description FROM Instruments"
          ]
        },
        {
          "interpretation": "For each lab technician, what is the most common instrument description that they are assigned?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT LT.name, I.description\nFROM (\n    SELECT technicianId, instrumentId, COUNT(*) as count\n    FROM Lab_Technicians_Instruments\n    GROUP BY technicianId, instrumentId\n) AS TI\nJOIN (\n    SELECT technicianId, MAX(count) AS max_count\n    FROM (\n        SELECT technicianId, instrumentId, COUNT(*) as count\n        FROM Lab_Technicians_Instruments\n        GROUP BY technicianId, instrumentId\n    )\n    GROUP BY technicianId\n) AS MaxTI ON TI.technicianId = MaxTI.technicianId AND TI.count = MaxTI.max_count\nJOIN Lab_Technicians AS LT ON TI.technicianId = LT.id\nJOIN Instruments AS I ON TI.instrumentId = I.id"
          ]
        },
        {
          "interpretation": "Are there any instrument descriptions that are assigned to multiple lab technicians?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT I.description\nFROM Instruments I\nJOIN Lab_Technicians_Instruments LTI ON I.id = LTI.instrumentId\nGROUP BY I.description\nHAVING COUNT(DISTINCT LTI.technicianId) > 1"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Job Postings/scope_lab_technicians_instruments/scope_lab_technicians_instruments.sqlite",
      "db_dump": "CREATE TABLE Instruments(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    instrumentName TEXT,\n    description TEXT);\nCREATE TABLE Lab_Technicians(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT);\nCREATE TABLE Lab_Technicians_Instruments(\n    technicianId INTEGER,\n    instrumentId INTEGER,\n    FOREIGN KEY (technicianId) REFERENCES Lab_Technicians(id),\n    FOREIGN KEY (instrumentId) REFERENCES Instruments(id));\n\nINSERT INTO \"Instruments\" (id,instrumentName,description) VALUES (1,'Microscope','A device used for viewing objects at high magnification.'),(2,'Centrifuge','An apparatus that uses centrifugal force to separate substances based on their density.'),(3,'Autoclave','A sterilization chamber that uses pressurized steam to kill bacteria and other microorganisms.'),(4,'pH Meter','A device that measures the acidity or alkalinity of a solution.'),(5,'Thermometer','A device that measures temperature.');\nINSERT INTO \"Lab_Technicians\" (id,name,email) VALUES (1,'John Doe','john.doe@example.com'),(2,'Jane Smith','jane.smith@example.com'),(3,'Alice Johnson','alice.johnson@example.com'),(4,'Bob Brown','bob.brown@example.com'),(5,'Charlie Davis','charlie.davis@example.com');\nINSERT INTO \"Lab_Technicians_Instruments\" (technicianId,instrumentId) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\n",
      "question": "For each lab technician, list information about the instruments they use (their names and descriptions).",
      "gold_queries": [
        "select lab_technicians.name , instruments.instrumentname , instruments.description from Lab_Technicians_Instruments join Instruments on Lab_Technicians_Instruments.instrumentId = Instruments.id join Lab_Technicians on Lab_Technicians_Instruments.technicianId = Lab_Technicians.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List each lab technician alongside a list of instruments they use, along with the instrument descriptions.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT LT.name, I.instrumentName, I.description\nFROM Lab_Technicians_Instruments LTI\nJOIN Lab_Technicians LT ON LTI.technicianId = LT.id\nJOIN Instruments I ON LTI.instrumentId = I.id"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Job Postings/scope_lab_technicians_instruments/scope_lab_technicians_instruments.sqlite",
      "db_dump": "CREATE TABLE Instruments(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    instrumentName TEXT,\n    description TEXT);\nCREATE TABLE Lab_Technicians(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT);\nCREATE TABLE Lab_Technicians_Instruments(\n    technicianId INTEGER,\n    instrumentId INTEGER,\n    FOREIGN KEY (technicianId) REFERENCES Lab_Technicians(id),\n    FOREIGN KEY (instrumentId) REFERENCES Instruments(id));\n\nINSERT INTO \"Instruments\" (id,instrumentName,description) VALUES (1,'Microscope','A device used for viewing objects at high magnification.'),(2,'Centrifuge','An apparatus that uses centrifugal force to separate substances based on their density.'),(3,'Autoclave','A sterilization chamber that uses pressurized steam to kill bacteria and other microorganisms.'),(4,'pH Meter','A device that measures the acidity or alkalinity of a solution.'),(5,'Thermometer','A device that measures temperature.');\nINSERT INTO \"Lab_Technicians\" (id,name,email) VALUES (1,'John Doe','john.doe@example.com'),(2,'Jane Smith','jane.smith@example.com'),(3,'Alice Johnson','alice.johnson@example.com'),(4,'Bob Brown','bob.brown@example.com'),(5,'Charlie Davis','charlie.davis@example.com');\nINSERT INTO \"Lab_Technicians_Instruments\" (technicianId,instrumentId) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\n",
      "question": "Tell me about the instruments every lab technician uses (their names and descriptions).",
      "gold_queries": [
        "SELECT Instruments.instrumentName, Instruments.description  from Lab_Technicians_Instruments join Instruments on Lab_Technicians_Instruments.instrumentId = Instruments.id join Lab_Technicians on Lab_Technicians_Instruments.technicianId = Lab_Technicians.id   GROUP BY Lab_Technicians_Instruments.instrumentId HAVING COUNT(DISTINCT Lab_Technicians_Instruments.technicianId) = (SELECT COUNT(*) FROM  Lab_Technicians)",
        "select lab_technicians.name , instruments.instrumentname , instruments.description from Lab_Technicians_Instruments join Instruments on Lab_Technicians_Instruments.instrumentId = Instruments.id join Lab_Technicians on Lab_Technicians_Instruments.technicianId = Lab_Technicians.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Find all unique instruments used by any lab technician, displaying their names and descriptions",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT T1.instrumentName, T1.description FROM Instruments AS T1 JOIN Lab_Technicians_Instruments AS T2 ON T1.id = T2.instrumentId"
          ]
        },
        {
          "interpretation": "List every instrument used by each laboratory technician, including their names and descriptions",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Lab_Technicians.name, Instruments.instrumentName, Instruments.description \nFROM Lab_Technicians \nJOIN Lab_Technicians_Instruments ON Lab_Technicians.id = Lab_Technicians_Instruments.technicianId \nJOIN Instruments ON Lab_Technicians_Instruments.instrumentId = Instruments.id"
          ]
        },
        {
          "interpretation": "Retrieve the names and descriptions of instruments where the 'technicianId' in the 'Lab_Technicians_Instruments' table matches each technician's 'id' in the 'Lab_Technicians' table",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT i.instrumentName, i.description\nFROM Instruments i\nJOIN Lab_Technicians_Instruments lti ON i.id = lti.instrumentId"
          ]
        },
        {
          "interpretation": "List the names and descriptions of all instruments in the database",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT instrumentName, description FROM Instruments"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.25,
        "f1_score": 0.3333333333333333,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Job Postings/scope_lab_technicians_instruments/scope_lab_technicians_instruments.sqlite",
      "db_dump": "CREATE TABLE Instruments(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    instrumentName TEXT,\n    description TEXT);\nCREATE TABLE Lab_Technicians(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT);\nCREATE TABLE Lab_Technicians_Instruments(\n    technicianId INTEGER,\n    instrumentId INTEGER,\n    FOREIGN KEY (technicianId) REFERENCES Lab_Technicians(id),\n    FOREIGN KEY (instrumentId) REFERENCES Instruments(id));\n\nINSERT INTO \"Instruments\" (id,instrumentName,description) VALUES (1,'Microscope','A device used for viewing objects at high magnification.'),(2,'Centrifuge','An apparatus that uses centrifugal force to separate substances based on their density.'),(3,'Autoclave','A sterilization chamber that uses pressurized steam to kill bacteria and other microorganisms.'),(4,'pH Meter','A device that measures the acidity or alkalinity of a solution.'),(5,'Thermometer','A device that measures temperature.');\nINSERT INTO \"Lab_Technicians\" (id,name,email) VALUES (1,'John Doe','john.doe@example.com'),(2,'Jane Smith','jane.smith@example.com'),(3,'Alice Johnson','alice.johnson@example.com'),(4,'Bob Brown','bob.brown@example.com'),(5,'Charlie Davis','charlie.davis@example.com');\nINSERT INTO \"Lab_Technicians_Instruments\" (technicianId,instrumentId) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\n",
      "question": "What description of instruments do we have for each laboratory technician?",
      "gold_queries": [
        "SELECT Instruments.description  from Lab_Technicians_Instruments join Instruments on Lab_Technicians_Instruments.instrumentId = Instruments.id join Lab_Technicians on Lab_Technicians_Instruments.technicianId = Lab_Technicians.id   GROUP BY Lab_Technicians_Instruments.instrumentId HAVING COUNT(DISTINCT Lab_Technicians_Instruments.technicianId) = (SELECT COUNT(*) FROM  Lab_Technicians)",
        "select lab_technicians.name , instruments.description from Lab_Technicians_Instruments join Instruments on Lab_Technicians_Instruments.instrumentId = Instruments.id join Lab_Technicians on Lab_Technicians_Instruments.technicianId = Lab_Technicians.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Retrieve a list of all instrument descriptions and group them by the technician responsible for each instrument.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Lab_Technicians.name, Instruments.description\nFROM Lab_Technicians\nJOIN Lab_Technicians_Instruments ON Lab_Technicians.id = Lab_Technicians_Instruments.technicianId\nJOIN Instruments ON Lab_Technicians_Instruments.instrumentId = Instruments.id\nGROUP BY Lab_Technicians.name, Instruments.description"
          ]
        },
        {
          "interpretation": "What instruments are used by each technician, excluding their descriptions?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.name AS technicianName, T1.instrumentName \nFROM Instruments AS T1 \nJOIN Lab_Technicians_Instruments AS T3 ON T1.id = T3.instrumentId \nJOIN Lab_Technicians AS T2 ON T3.technicianId = T2.id"
          ]
        },
        {
          "interpretation": "For each technician, list the names of each instrument they are assigned, followed by its description.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT L.name AS technicianName, I.instrumentName, I.description\nFROM Lab_Technicians_Instruments AS T\nJOIN Lab_Technicians AS L ON T.technicianId = L.id\nJOIN Instruments AS I ON T.instrumentId = I.id"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.3333333333333333,
        "f1_score": 0.4,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Job Postings/scope_lab_technicians_instruments/scope_lab_technicians_instruments.sqlite",
      "db_dump": "CREATE TABLE Instruments(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    instrumentName TEXT,\n    description TEXT);\nCREATE TABLE Lab_Technicians(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT);\nCREATE TABLE Lab_Technicians_Instruments(\n    technicianId INTEGER,\n    instrumentId INTEGER,\n    FOREIGN KEY (technicianId) REFERENCES Lab_Technicians(id),\n    FOREIGN KEY (instrumentId) REFERENCES Instruments(id));\n\nINSERT INTO \"Instruments\" (id,instrumentName,description) VALUES (1,'Microscope','A device used for viewing objects at high magnification.'),(2,'Centrifuge','An apparatus that uses centrifugal force to separate substances based on their density.'),(3,'Autoclave','A sterilization chamber that uses pressurized steam to kill bacteria and other microorganisms.'),(4,'pH Meter','A device that measures the acidity or alkalinity of a solution.'),(5,'Thermometer','A device that measures temperature.');\nINSERT INTO \"Lab_Technicians\" (id,name,email) VALUES (1,'John Doe','john.doe@example.com'),(2,'Jane Smith','jane.smith@example.com'),(3,'Alice Johnson','alice.johnson@example.com'),(4,'Bob Brown','bob.brown@example.com'),(5,'Charlie Davis','charlie.davis@example.com');\nINSERT INTO \"Lab_Technicians_Instruments\" (technicianId,instrumentId) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\n",
      "question": "What information is there about the instruments that are used equally by all lab technicians (their names and descriptions)?",
      "gold_queries": [
        "SELECT Instruments.instrumentName, Instruments.description  from Lab_Technicians_Instruments join Instruments on Lab_Technicians_Instruments.instrumentId = Instruments.id join Lab_Technicians on Lab_Technicians_Instruments.technicianId = Lab_Technicians.id   GROUP BY Lab_Technicians_Instruments.instrumentId HAVING COUNT(DISTINCT Lab_Technicians_Instruments.technicianId) = (SELECT COUNT(*) FROM  Lab_Technicians)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Find the instruments utilized by every lab technician, providing their names and descriptions.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT I.instrumentName, I.description\nFROM Instruments I\nWHERE NOT EXISTS (\n    SELECT L.id\n    FROM Lab_Technicians L\n    WHERE NOT EXISTS (\n        SELECT LT.technicianId\n        FROM Lab_Technicians_Instruments LT\n        WHERE LT.technicianId = L.id AND LT.instrumentId = I.id\n    )\n)"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Job Postings/scope_lab_technicians_instruments/scope_lab_technicians_instruments.sqlite",
      "db_dump": "CREATE TABLE Instruments(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    instrumentName TEXT,\n    description TEXT);\nCREATE TABLE Lab_Technicians(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT);\nCREATE TABLE Lab_Technicians_Instruments(\n    technicianId INTEGER,\n    instrumentId INTEGER,\n    FOREIGN KEY (technicianId) REFERENCES Lab_Technicians(id),\n    FOREIGN KEY (instrumentId) REFERENCES Instruments(id));\n\nINSERT INTO \"Instruments\" (id,instrumentName,description) VALUES (1,'Microscope','A device used for viewing objects at high magnification.'),(2,'Centrifuge','An apparatus that uses centrifugal force to separate substances based on their density.'),(3,'Autoclave','A sterilization chamber that uses pressurized steam to kill bacteria and other microorganisms.'),(4,'pH Meter','A device that measures the acidity or alkalinity of a solution.'),(5,'Thermometer','A device that measures temperature.');\nINSERT INTO \"Lab_Technicians\" (id,name,email) VALUES (1,'John Doe','john.doe@example.com'),(2,'Jane Smith','jane.smith@example.com'),(3,'Alice Johnson','alice.johnson@example.com'),(4,'Bob Brown','bob.brown@example.com'),(5,'Charlie Davis','charlie.davis@example.com');\nINSERT INTO \"Lab_Technicians_Instruments\" (technicianId,instrumentId) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\n",
      "question": "What instrument is common for all lab technicians?",
      "gold_queries": [
        "SELECT Instruments.instrumentName  from Lab_Technicians_Instruments join Instruments on Lab_Technicians_Instruments.instrumentId = Instruments.id join Lab_Technicians on Lab_Technicians_Instruments.technicianId = Lab_Technicians.id   GROUP BY Lab_Technicians_Instruments.instrumentId HAVING COUNT(DISTINCT Lab_Technicians_Instruments.technicianId) = (SELECT COUNT(*) FROM  Lab_Technicians)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Which instrument has the most associated technicians?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT instrumentName \nFROM Instruments \nWHERE id = (SELECT instrumentId \n            FROM Lab_Technicians_Instruments \n            GROUP BY instrumentId \n            ORDER BY COUNT(technicianId) DESC \n            LIMIT 1)"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Job Postings/scope_lab_technicians_instruments/scope_lab_technicians_instruments.sqlite",
      "db_dump": "CREATE TABLE Instruments(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    instrumentName TEXT,\n    description TEXT);\nCREATE TABLE Lab_Technicians(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT);\nCREATE TABLE Lab_Technicians_Instruments(\n    technicianId INTEGER,\n    instrumentId INTEGER,\n    FOREIGN KEY (technicianId) REFERENCES Lab_Technicians(id),\n    FOREIGN KEY (instrumentId) REFERENCES Instruments(id));\n\nINSERT INTO \"Instruments\" (id,instrumentName,description) VALUES (1,'Microscope','A device used for viewing objects at high magnification.'),(2,'Centrifuge','An apparatus that uses centrifugal force to separate substances based on their density.'),(3,'Autoclave','A sterilization chamber that uses pressurized steam to kill bacteria and other microorganisms.'),(4,'pH Meter','A device that measures the acidity or alkalinity of a solution.'),(5,'Thermometer','A device that measures temperature.');\nINSERT INTO \"Lab_Technicians\" (id,name,email) VALUES (1,'John Doe','john.doe@example.com'),(2,'Jane Smith','jane.smith@example.com'),(3,'Alice Johnson','alice.johnson@example.com'),(4,'Bob Brown','bob.brown@example.com'),(5,'Charlie Davis','charlie.davis@example.com');\nINSERT INTO \"Lab_Technicians_Instruments\" (technicianId,instrumentId) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\n",
      "question": "For every lab technicians, provide the corresponding description of instruments.",
      "gold_queries": [
        "select lab_technicians.name , instruments.description from Lab_Technicians_Instruments join Instruments on Lab_Technicians_Instruments.instrumentId = Instruments.id join Lab_Technicians on Lab_Technicians_Instruments.technicianId = Lab_Technicians.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For each lab technician, return a single concatenated description of all instruments they are assigned.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT lt.name, GROUP_CONCAT(i.description) AS instrumentDescriptions\nFROM Lab_Technicians lt\nJOIN Lab_Technicians_Instruments lti ON lt.id = lti.technicianId\nJOIN Instruments i ON lti.instrumentId = i.id\nGROUP BY lt.name"
          ]
        },
        {
          "interpretation": "For each instrument, retrieve the name of the lab technician assigned to it and their description.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT T2.name, T3.description FROM Lab_Technicians_Instruments AS T1 JOIN Lab_Technicians AS T2 ON T1.technicianId = T2.id JOIN Instruments AS T3 ON T1.instrumentId = T3.id"
          ]
        },
        {
          "interpretation": "List all lab technicians and for each technician, display the description of the first instrument they are assigned to.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.name, I.description\nFROM Lab_Technicians AS T1\nJOIN Lab_Technicians_Instruments AS LTI ON T1.id = LTI.technicianId\nJOIN Instruments AS I ON LTI.instrumentId = I.id\nWHERE (T1.id, LTI.instrumentId) IN (\n    SELECT technicianId, MIN(instrumentId)\n    FROM Lab_Technicians_Instruments\n    GROUP BY technicianId\n)"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Job Postings/scope_lab_technicians_instruments/scope_lab_technicians_instruments.sqlite",
      "db_dump": "CREATE TABLE Instruments(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    instrumentName TEXT,\n    description TEXT);\nCREATE TABLE Lab_Technicians(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT);\nCREATE TABLE Lab_Technicians_Instruments(\n    technicianId INTEGER,\n    instrumentId INTEGER,\n    FOREIGN KEY (technicianId) REFERENCES Lab_Technicians(id),\n    FOREIGN KEY (instrumentId) REFERENCES Instruments(id));\n\nINSERT INTO \"Instruments\" (id,instrumentName,description) VALUES (1,'Microscope','A device used for viewing objects at high magnification.'),(2,'Centrifuge','An apparatus that uses centrifugal force to separate substances based on their density.'),(3,'Autoclave','A sterilization chamber that uses pressurized steam to kill bacteria and other microorganisms.'),(4,'pH Meter','A device that measures the acidity or alkalinity of a solution.'),(5,'Thermometer','A device that measures temperature.');\nINSERT INTO \"Lab_Technicians\" (id,name,email) VALUES (1,'John Doe','john.doe@example.com'),(2,'Jane Smith','jane.smith@example.com'),(3,'Alice Johnson','alice.johnson@example.com'),(4,'Bob Brown','bob.brown@example.com'),(5,'Charlie Davis','charlie.davis@example.com');\nINSERT INTO \"Lab_Technicians_Instruments\" (technicianId,instrumentId) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\n",
      "question": "For every lab technician, what are the corresponding instrument?",
      "gold_queries": [
        "select lab_technicians.name , instruments.instrumentname from Lab_Technicians_Instruments join Instruments on Lab_Technicians_Instruments.instrumentId = Instruments.id join Lab_Technicians on Lab_Technicians_Instruments.technicianId = Lab_Technicians.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Return a table with columns for lab technician name and the instrument they use.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT T2.name, T3.instrumentName\nFROM Lab_Technicians_Instruments AS T1\nJOIN Lab_Technicians AS T2 ON T1.technicianId = T2.id\nJOIN Instruments AS T3 ON T1.instrumentId = T3.id"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Job Postings/scope_content_creators_platforms/scope_content_creators_platforms.sqlite",
      "db_dump": "CREATE TABLE Content_Creators (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT\n);\nCREATE TABLE Content_Creators_Platforms (\n    content_creator_id INTEGER,\n    platform_id INTEGER,\n    FOREIGN KEY (content_creator_id) REFERENCES Content_Creators(id),\n    FOREIGN KEY (platform_id) REFERENCES Platforms(id),\n    PRIMARY KEY (content_creator_id, platform_id)\n);\nCREATE TABLE Platforms (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    platform_name TEXT\n);\n\nINSERT INTO \"Content_Creators\" (id,name,email) VALUES (1,'Alice','alice@example.com'),(2,'Bob','bob@example.com'),(3,'Charlie','charlie@example.com'),(4,'Dave','dave@example.com'),(5,'Eve','eve@example.com');\nINSERT INTO \"Content_Creators_Platforms\" (content_creator_id,platform_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\nINSERT INTO \"Platforms\" (id,platform_name) VALUES (1,'YouTube'),(2,'Twitch'),(3,'Vimeo'),(4,'Facebook'),(5,'Instagram');\n",
      "question": "Show me the platforms each content creator uses.",
      "gold_queries": [
        "SELECT Platforms.platform_name  from Content_Creators_Platforms join Platforms on Content_Creators_Platforms.platform_id = Platforms.id join Content_Creators on Content_Creators_Platforms.content_creator_id = Content_Creators.id   GROUP BY Content_Creators_Platforms.platform_id HAVING COUNT(DISTINCT Content_Creators_Platforms.content_creator_id) = (SELECT COUNT(*) FROM  Content_Creators)",
        "select content_creators.name , platforms.platform_name from Content_Creators_Platforms join Platforms on Content_Creators_Platforms.platform_id = Platforms.id join Content_Creators on Content_Creators_Platforms.content_creator_id = Content_Creators.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Select Platforms.platform_name",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Platforms.platform_name FROM Platforms"
          ]
        },
        {
          "interpretation": "From Content_Creators_Platforms ccp",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT content_creator_id, platform_id FROM Content_Creators_Platforms"
          ]
        },
        {
          "interpretation": "Show a table with content creators' names and a list of their used platforms.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT cc.name, GROUP_CONCAT(p.platform_name) AS platforms\nFROM Content_Creators cc\nJOIN Content_Creators_Platforms ccp ON cc.id = ccp.content_creator_id\nJOIN Platforms p ON ccp.platform_id = p.id\nGROUP BY cc.name"
          ]
        },
        {
          "interpretation": "List all platforms used by each content creator alongside their names.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT CC.name, P.platform_name\nFROM Content_Creators AS CC\nJOIN Content_Creators_Platforms AS CCP ON CC.id = CCP.content_creator_id\nJOIN Platforms AS P ON CCP.platform_id = P.id"
          ]
        },
        {
          "interpretation": "Group By ccp.content_creator_id",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ccp.content_creator_id, COUNT(ccp.platform_id) AS platform_count\nFROM Content_Creators_Platforms ccp\nGROUP BY ccp.content_creator_id"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.2,
        "f1_score": 0.28571428571428575,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Job Postings/scope_content_creators_platforms/scope_content_creators_platforms.sqlite",
      "db_dump": "CREATE TABLE Content_Creators (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT\n);\nCREATE TABLE Content_Creators_Platforms (\n    content_creator_id INTEGER,\n    platform_id INTEGER,\n    FOREIGN KEY (content_creator_id) REFERENCES Content_Creators(id),\n    FOREIGN KEY (platform_id) REFERENCES Platforms(id),\n    PRIMARY KEY (content_creator_id, platform_id)\n);\nCREATE TABLE Platforms (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    platform_name TEXT\n);\n\nINSERT INTO \"Content_Creators\" (id,name,email) VALUES (1,'Alice','alice@example.com'),(2,'Bob','bob@example.com'),(3,'Charlie','charlie@example.com'),(4,'Dave','dave@example.com'),(5,'Eve','eve@example.com');\nINSERT INTO \"Content_Creators_Platforms\" (content_creator_id,platform_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\nINSERT INTO \"Platforms\" (id,platform_name) VALUES (1,'YouTube'),(2,'Twitch'),(3,'Vimeo'),(4,'Facebook'),(5,'Instagram');\n",
      "question": "What platforms are shared between all content creators?",
      "gold_queries": [
        "SELECT Platforms.platform_name  from Content_Creators_Platforms join Platforms on Content_Creators_Platforms.platform_id = Platforms.id join Content_Creators on Content_Creators_Platforms.content_creator_id = Content_Creators.id   GROUP BY Content_Creators_Platforms.platform_id HAVING COUNT(DISTINCT Content_Creators_Platforms.content_creator_id) = (SELECT COUNT(*) FROM  Content_Creators)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Which platform has the highest number of associated content creators?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT t2.platform_name \nFROM Content_Creators_Platforms AS t1 \nJOIN Platforms AS t2 ON t1.platform_id = t2.id \nGROUP BY t2.platform_name \nORDER BY COUNT(t1.content_creator_id) DESC \nLIMIT 1"
          ]
        },
        {
          "interpretation": "Identify the intersection of all content creators' platform usages.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT platform_id\nFROM Content_Creators_Platforms\nGROUP BY platform_id\nHAVING COUNT(DISTINCT content_creator_id) = (SELECT COUNT(*) FROM Content_Creators)"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Job Postings/scope_content_creators_platforms/scope_content_creators_platforms.sqlite",
      "db_dump": "CREATE TABLE Content_Creators (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT\n);\nCREATE TABLE Content_Creators_Platforms (\n    content_creator_id INTEGER,\n    platform_id INTEGER,\n    FOREIGN KEY (content_creator_id) REFERENCES Content_Creators(id),\n    FOREIGN KEY (platform_id) REFERENCES Platforms(id),\n    PRIMARY KEY (content_creator_id, platform_id)\n);\nCREATE TABLE Platforms (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    platform_name TEXT\n);\n\nINSERT INTO \"Content_Creators\" (id,name,email) VALUES (1,'Alice','alice@example.com'),(2,'Bob','bob@example.com'),(3,'Charlie','charlie@example.com'),(4,'Dave','dave@example.com'),(5,'Eve','eve@example.com');\nINSERT INTO \"Content_Creators_Platforms\" (content_creator_id,platform_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\nINSERT INTO \"Platforms\" (id,platform_name) VALUES (1,'YouTube'),(2,'Twitch'),(3,'Vimeo'),(4,'Facebook'),(5,'Instagram');\n",
      "question": "For every content creator, list the platforms used.",
      "gold_queries": [
        "select content_creators.name , platforms.platform_name from Content_Creators_Platforms join Platforms on Content_Creators_Platforms.platform_id = Platforms.id join Content_Creators on Content_Creators_Platforms.content_creator_id = Content_Creators.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What platforms are used by each person categorized as a content creator?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Content_Creators.name, Platforms.platform_name\nFROM Content_Creators\nJOIN Content_Creators_Platforms ON Content_Creators.id = Content_Creators_Platforms.content_creator_id\nJOIN Platforms ON Content_Creators_Platforms.platform_id = Platforms.id"
          ]
        },
        {
          "interpretation": "Display a list of platforms, grouped by content creator.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Content_Creators.name, GROUP_CONCAT(Platforms.platform_name) AS platforms\nFROM Content_Creators\nJOIN Content_Creators_Platforms ON Content_Creators.id = Content_Creators_Platforms.content_creator_id\nJOIN Platforms ON Content_Creators_Platforms.platform_id = Platforms.id\nGROUP BY Content_Creators.name"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Job Postings/scope_financial_analysts_metrics/scope_financial_analysts_metrics.sqlite",
      "db_dump": "CREATE TABLE Company (\n    company_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    company_name TEXT,\n    location TEXT\n);\nCREATE TABLE Financial_Analysts (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    experience INT\n);\nCREATE TABLE Financial_Analysts_JobPostings (\n    financial_analyst_id INTEGER,\n    job_posting_id INTEGER,\n    FOREIGN KEY(financial_analyst_id) REFERENCES Financial_Analysts(id),\n    FOREIGN KEY(job_posting_id) REFERENCES JobPostings(job_posting_id)\n);\nCREATE TABLE Financial_Analysts_Metrics (\n    financial_analyst_id INTEGER,\n    metric_id INTEGER,\n    FOREIGN KEY(financial_analyst_id) REFERENCES Financial_Analysts(id),\n    FOREIGN KEY(metric_id) REFERENCES Metrics(metric_id)\n);\nCREATE TABLE JobPostings (\n    job_posting_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    description TEXT,\n    salary REAL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\nCREATE TABLE JobPostings_Company (\n    job_posting_id INTEGER,\n    company_id INTEGER,\n    FOREIGN KEY(job_posting_id) REFERENCES JobPostings(job_posting_id),\n    FOREIGN KEY(company_id) REFERENCES Company(company_id)\n);\nCREATE TABLE Metrics (\n    metric_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    metric_name TEXT);\n\nINSERT INTO \"Company\" (company_id,company_name,location) VALUES (1,'ABC Corporation','New York'),(2,'XYZ Inc.','California'),(3,'LNM Limited','Texas'),(4,'MNO Enterprises','Florida'),(5,'PQR Holdings','Illinois');\nINSERT INTO \"Financial_Analysts\" (id,name,experience) VALUES (1,'John Doe',3),(2,'Jane Smith',2),(3,'Alice Johnson',10),(4,'Bob Brown',7),(5,'Emma Wilson',6);\nINSERT INTO \"Financial_Analysts_Metrics\" (financial_analyst_id,metric_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\nINSERT INTO \"JobPostings\" (job_posting_id,title,description,salary,created_at) VALUES (1,'Financial Analyst','Analyze market trends and make recommendations based on research',75000.0,'2024-01-30 19:22:37'),(2,'Senior Financial Analyst','Lead a team of analysts in providing investment advice',100000.0,'2024-01-30 19:22:37'),(3,'Associate Financial Analyst','Assist senior analysts in preparing reports and forecasts',60000.0,'2024-01-30 19:22:37'),(4,'Financial Modelling Analyst','Develop financial models to assist in decision-making processes',70000.0,'2024-01-30 19:22:37'),(5,'Equity Research Analyst','Conduct analysis on specific industries and companies to provide buy/sell/hold recommendations',80000.0,'2024-01-30 19:22:37');\nINSERT INTO \"Metrics\" (metric_id,metric_name) VALUES (1,'Earnings_Per_Share'),(2,'Revenue'),(3,'Gross_Profit'),(4,'Net_Income'),(5,'Market_Capitalization');\n",
      "question": "Give me the metrics corresponding to each financial analyst.",
      "gold_queries": [
        "SELECT Metrics.metric_name  from Financial_Analysts_Metrics join Metrics on Financial_Analysts_Metrics.metric_id = Metrics.metric_id join Financial_Analysts on Financial_Analysts_Metrics.financial_analyst_id = Financial_Analysts.id   GROUP BY Financial_Analysts_Metrics.metric_id HAVING COUNT(DISTINCT Financial_Analysts_Metrics.financial_analyst_id) = (SELECT COUNT(*) FROM  Financial_Analysts)",
        "select financial_analysts.name , metrics.metric_name from Financial_Analysts_Metrics join Metrics on Financial_Analysts_Metrics.metric_id = Metrics.metric_id join Financial_Analysts on Financial_Analysts_Metrics.financial_analyst_id = Financial_Analysts.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Display the metrics employed by each financial analyst.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Financial_Analysts.name, Metrics.metric_name \nFROM Financial_Analysts \nJOIN Financial_Analysts_Metrics ON Financial_Analysts.id = Financial_Analysts_Metrics.financial_analyst_id \nJOIN Metrics ON Financial_Analysts_Metrics.metric_id = Metrics.metric_id"
          ]
        },
        {
          "interpretation": "Identify the metrics listed in `Financial_Analysts_Metrics` for each financial analyst.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Financial_Analysts.id, Financial_Analysts.name, Metrics.metric_name\nFROM Financial_Analysts\nJOIN Financial_Analysts_Metrics ON Financial_Analysts.id = Financial_Analysts_Metrics.financial_analyst_id\nJOIN Metrics ON Financial_Analysts_Metrics.metric_id = Metrics.metric_id"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.5,
        "f1_score": 0.5,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Job Postings/scope_financial_analysts_metrics/scope_financial_analysts_metrics.sqlite",
      "db_dump": "CREATE TABLE Company (\n    company_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    company_name TEXT,\n    location TEXT\n);\nCREATE TABLE Financial_Analysts (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    experience INT\n);\nCREATE TABLE Financial_Analysts_JobPostings (\n    financial_analyst_id INTEGER,\n    job_posting_id INTEGER,\n    FOREIGN KEY(financial_analyst_id) REFERENCES Financial_Analysts(id),\n    FOREIGN KEY(job_posting_id) REFERENCES JobPostings(job_posting_id)\n);\nCREATE TABLE Financial_Analysts_Metrics (\n    financial_analyst_id INTEGER,\n    metric_id INTEGER,\n    FOREIGN KEY(financial_analyst_id) REFERENCES Financial_Analysts(id),\n    FOREIGN KEY(metric_id) REFERENCES Metrics(metric_id)\n);\nCREATE TABLE JobPostings (\n    job_posting_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    description TEXT,\n    salary REAL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\nCREATE TABLE JobPostings_Company (\n    job_posting_id INTEGER,\n    company_id INTEGER,\n    FOREIGN KEY(job_posting_id) REFERENCES JobPostings(job_posting_id),\n    FOREIGN KEY(company_id) REFERENCES Company(company_id)\n);\nCREATE TABLE Metrics (\n    metric_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    metric_name TEXT);\n\nINSERT INTO \"Company\" (company_id,company_name,location) VALUES (1,'ABC Corporation','New York'),(2,'XYZ Inc.','California'),(3,'LNM Limited','Texas'),(4,'MNO Enterprises','Florida'),(5,'PQR Holdings','Illinois');\nINSERT INTO \"Financial_Analysts\" (id,name,experience) VALUES (1,'John Doe',3),(2,'Jane Smith',2),(3,'Alice Johnson',10),(4,'Bob Brown',7),(5,'Emma Wilson',6);\nINSERT INTO \"Financial_Analysts_Metrics\" (financial_analyst_id,metric_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\nINSERT INTO \"JobPostings\" (job_posting_id,title,description,salary,created_at) VALUES (1,'Financial Analyst','Analyze market trends and make recommendations based on research',75000.0,'2024-01-30 19:22:37'),(2,'Senior Financial Analyst','Lead a team of analysts in providing investment advice',100000.0,'2024-01-30 19:22:37'),(3,'Associate Financial Analyst','Assist senior analysts in preparing reports and forecasts',60000.0,'2024-01-30 19:22:37'),(4,'Financial Modelling Analyst','Develop financial models to assist in decision-making processes',70000.0,'2024-01-30 19:22:37'),(5,'Equity Research Analyst','Conduct analysis on specific industries and companies to provide buy/sell/hold recommendations',80000.0,'2024-01-30 19:22:37');\nINSERT INTO \"Metrics\" (metric_id,metric_name) VALUES (1,'Earnings_Per_Share'),(2,'Revenue'),(3,'Gross_Profit'),(4,'Net_Income'),(5,'Market_Capitalization');\n",
      "question": "Show me the metric that all financial analysts have in common.",
      "gold_queries": [
        "SELECT Metrics.metric_name  from Financial_Analysts_Metrics join Metrics on Financial_Analysts_Metrics.metric_id = Metrics.metric_id join Financial_Analysts on Financial_Analysts_Metrics.financial_analyst_id = Financial_Analysts.id   GROUP BY Financial_Analysts_Metrics.metric_id HAVING COUNT(DISTINCT Financial_Analysts_Metrics.financial_analyst_id) = (SELECT COUNT(*) FROM  Financial_Analysts)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Find the metric that is linked to the highest number of financial analysts.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT metric_name\nFROM Metrics\nJOIN Financial_Analysts_Metrics ON Metrics.metric_id = Financial_Analysts_Metrics.metric_id\nGROUP BY metric_name\nORDER BY COUNT(financial_analyst_id) DESC\nLIMIT 1"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Job Postings/scope_financial_analysts_metrics/scope_financial_analysts_metrics.sqlite",
      "db_dump": "CREATE TABLE Company (\n    company_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    company_name TEXT,\n    location TEXT\n);\nCREATE TABLE Financial_Analysts (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    experience INT\n);\nCREATE TABLE Financial_Analysts_JobPostings (\n    financial_analyst_id INTEGER,\n    job_posting_id INTEGER,\n    FOREIGN KEY(financial_analyst_id) REFERENCES Financial_Analysts(id),\n    FOREIGN KEY(job_posting_id) REFERENCES JobPostings(job_posting_id)\n);\nCREATE TABLE Financial_Analysts_Metrics (\n    financial_analyst_id INTEGER,\n    metric_id INTEGER,\n    FOREIGN KEY(financial_analyst_id) REFERENCES Financial_Analysts(id),\n    FOREIGN KEY(metric_id) REFERENCES Metrics(metric_id)\n);\nCREATE TABLE JobPostings (\n    job_posting_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    description TEXT,\n    salary REAL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\nCREATE TABLE JobPostings_Company (\n    job_posting_id INTEGER,\n    company_id INTEGER,\n    FOREIGN KEY(job_posting_id) REFERENCES JobPostings(job_posting_id),\n    FOREIGN KEY(company_id) REFERENCES Company(company_id)\n);\nCREATE TABLE Metrics (\n    metric_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    metric_name TEXT);\n\nINSERT INTO \"Company\" (company_id,company_name,location) VALUES (1,'ABC Corporation','New York'),(2,'XYZ Inc.','California'),(3,'LNM Limited','Texas'),(4,'MNO Enterprises','Florida'),(5,'PQR Holdings','Illinois');\nINSERT INTO \"Financial_Analysts\" (id,name,experience) VALUES (1,'John Doe',3),(2,'Jane Smith',2),(3,'Alice Johnson',10),(4,'Bob Brown',7),(5,'Emma Wilson',6);\nINSERT INTO \"Financial_Analysts_Metrics\" (financial_analyst_id,metric_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\nINSERT INTO \"JobPostings\" (job_posting_id,title,description,salary,created_at) VALUES (1,'Financial Analyst','Analyze market trends and make recommendations based on research',75000.0,'2024-01-30 19:22:37'),(2,'Senior Financial Analyst','Lead a team of analysts in providing investment advice',100000.0,'2024-01-30 19:22:37'),(3,'Associate Financial Analyst','Assist senior analysts in preparing reports and forecasts',60000.0,'2024-01-30 19:22:37'),(4,'Financial Modelling Analyst','Develop financial models to assist in decision-making processes',70000.0,'2024-01-30 19:22:37'),(5,'Equity Research Analyst','Conduct analysis on specific industries and companies to provide buy/sell/hold recommendations',80000.0,'2024-01-30 19:22:37');\nINSERT INTO \"Metrics\" (metric_id,metric_name) VALUES (1,'Earnings_Per_Share'),(2,'Revenue'),(3,'Gross_Profit'),(4,'Net_Income'),(5,'Market_Capitalization');\n",
      "question": "Give me the financial analysts and the corresponding metrics",
      "gold_queries": [
        "select financial_analysts.name , metrics.metric_name from Financial_Analysts_Metrics join Metrics on Financial_Analysts_Metrics.metric_id = Metrics.metric_id join Financial_Analysts on Financial_Analysts_Metrics.financial_analyst_id = Financial_Analysts.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Give me a list of all financial analysts in the database along with the metrics they are associated with.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT FA.name, M.metric_name\nFROM Financial_Analysts FA\nJOIN Financial_Analysts_Metrics FAM ON FA.id = FAM.financial_analyst_id\nJOIN Metrics M ON FAM.metric_id = M.metric_id"
          ]
        },
        {
          "interpretation": "Display a list of financial analysts paired with their corresponding metric IDs.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT financial_analyst_id, metric_id FROM Financial_Analysts_Metrics"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Job Postings/vague_2cols_experience/vague_2cols_experience.sqlite",
      "db_dump": "CREATE TABLE Companies (\n    CompanyID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT\n);\nCREATE TABLE EducationRequirements (\n    RequirementID INTEGER PRIMARY KEY,\n    DegreeLevel TEXT,\n    FieldOfStudy TEXT\n);\nCREATE TABLE Jobs (\n    JobID INTEGER PRIMARY KEY,\n    Minimum_Years INTEGER ,\n    Preferred_Years INTEGER ,\n    JobTitle TEXT,\n    Description TEXT,\n    Salary REAL \n);\nCREATE TABLE RequiredSkills (\n    SkillID INTEGER PRIMARY KEY,\n    SkillName TEXT,\n    ProficiencyLevel TEXT \n);\n\nINSERT INTO \"Companies\" (CompanyID,Name,Location) VALUES (1,'TechCorp','New York'),(2,'SoftwareInc','San Francisco'),(3,'AppDevelopers','Boston'),(4,'CodingWorld','Chicago'),(5,'ProgrammingCo','Los Angeles');\nINSERT INTO \"EducationRequirements\" (RequirementID,DegreeLevel,FieldOfStudy) VALUES (1,'Masters','Computer Science'),(2,'Bachelors','Information Technology'),(3,'PhD','Artificial Intelligence'),(4,'Associates','Web Development'),(5,'Certified','Project Management');\nINSERT INTO \"Jobs\" (JobID,Minimum_Years,Preferred_Years,JobTitle,Description,Salary) VALUES (1,2,4,'Software Developer','We are looking for a Software Developer with at least 2 years of experience.',70000.0),(2,3,6,'Data Analyst','Experienced Data Analyst required to join our team.',80000.0),(3,1,3,'Graphic Designer','We need an entry-level Graphic Designer to work on various projects.',50000.0),(4,4,8,'Product Manager','An experienced Product Manager is needed to manage and lead product development.',90000.0),(5,5,10,'System Administrator','A System Administrator with extensive experience is required to maintain and improve system performance.',60000.0);\nINSERT INTO \"RequiredSkills\" (SkillID,SkillName,ProficiencyLevel) VALUES (1,'Python Programming','Advanced'),(2,'JavaScript','Intermediate'),(3,'SQL','Expert'),(4,'HTML/CSS','Beginner'),(5,'Agile Methodology','Proficient');\n",
      "question": "What are the minimum and preferred years of experience for the open position with the greatest salary?",
      "gold_queries": [
        "SELECT Minimum_Years, Preferred_Years\r\nFROM Jobs\r\nORDER BY Salary DESC\r\nLIMIT 1;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Return the Minimum_Years and Preferred_Years  for the job with the highest Salary.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Minimum_Years, Preferred_Years \nFROM Jobs \nORDER BY Salary DESC \nLIMIT 1"
          ]
        },
        {
          "interpretation": "Find the JobID with the maximum Salary and retrieve the corresponding Minimum_Years and Preferred_Years.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT JobID, Minimum_Years, Preferred_Years FROM Jobs WHERE Salary = (SELECT MAX(Salary) FROM Jobs)"
          ]
        },
        {
          "interpretation": "Determine the Job title with the highest Salary and return its Minimum_Years and Preferred_Years.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT JobTitle, Minimum_Years, Preferred_Years\nFROM Jobs\nWHERE Salary = (SELECT MAX(Salary) FROM Jobs)"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Job Postings/vague_2cols_experience/vague_2cols_experience.sqlite",
      "db_dump": "CREATE TABLE Companies (\n    CompanyID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT\n);\nCREATE TABLE EducationRequirements (\n    RequirementID INTEGER PRIMARY KEY,\n    DegreeLevel TEXT,\n    FieldOfStudy TEXT\n);\nCREATE TABLE Jobs (\n    JobID INTEGER PRIMARY KEY,\n    Minimum_Years INTEGER ,\n    Preferred_Years INTEGER ,\n    JobTitle TEXT,\n    Description TEXT,\n    Salary REAL \n);\nCREATE TABLE RequiredSkills (\n    SkillID INTEGER PRIMARY KEY,\n    SkillName TEXT,\n    ProficiencyLevel TEXT \n);\n\nINSERT INTO \"Companies\" (CompanyID,Name,Location) VALUES (1,'TechCorp','New York'),(2,'SoftwareInc','San Francisco'),(3,'AppDevelopers','Boston'),(4,'CodingWorld','Chicago'),(5,'ProgrammingCo','Los Angeles');\nINSERT INTO \"EducationRequirements\" (RequirementID,DegreeLevel,FieldOfStudy) VALUES (1,'Masters','Computer Science'),(2,'Bachelors','Information Technology'),(3,'PhD','Artificial Intelligence'),(4,'Associates','Web Development'),(5,'Certified','Project Management');\nINSERT INTO \"Jobs\" (JobID,Minimum_Years,Preferred_Years,JobTitle,Description,Salary) VALUES (1,2,4,'Software Developer','We are looking for a Software Developer with at least 2 years of experience.',70000.0),(2,3,6,'Data Analyst','Experienced Data Analyst required to join our team.',80000.0),(3,1,3,'Graphic Designer','We need an entry-level Graphic Designer to work on various projects.',50000.0),(4,4,8,'Product Manager','An experienced Product Manager is needed to manage and lead product development.',90000.0),(5,5,10,'System Administrator','A System Administrator with extensive experience is required to maintain and improve system performance.',60000.0);\nINSERT INTO \"RequiredSkills\" (SkillID,SkillName,ProficiencyLevel) VALUES (1,'Python Programming','Advanced'),(2,'JavaScript','Intermediate'),(3,'SQL','Expert'),(4,'HTML/CSS','Beginner'),(5,'Agile Methodology','Proficient');\n",
      "question": "What are the preferred years of experience for the open position with the greatest salary?",
      "gold_queries": [
        "SELECT Preferred_Years\r\nFROM Jobs\r\nORDER BY Salary DESC\r\nLIMIT 1;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What is the maximum value of Preferred_Years for a Job where Salary is the highest?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Preferred_Years FROM Jobs WHERE Salary = (SELECT MAX(Salary) FROM Jobs) LIMIT 1"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Job Postings/vague_2cols_experience/vague_2cols_experience.sqlite",
      "db_dump": "CREATE TABLE Companies (\n    CompanyID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT\n);\nCREATE TABLE EducationRequirements (\n    RequirementID INTEGER PRIMARY KEY,\n    DegreeLevel TEXT,\n    FieldOfStudy TEXT\n);\nCREATE TABLE Jobs (\n    JobID INTEGER PRIMARY KEY,\n    Minimum_Years INTEGER ,\n    Preferred_Years INTEGER ,\n    JobTitle TEXT,\n    Description TEXT,\n    Salary REAL \n);\nCREATE TABLE RequiredSkills (\n    SkillID INTEGER PRIMARY KEY,\n    SkillName TEXT,\n    ProficiencyLevel TEXT \n);\n\nINSERT INTO \"Companies\" (CompanyID,Name,Location) VALUES (1,'TechCorp','New York'),(2,'SoftwareInc','San Francisco'),(3,'AppDevelopers','Boston'),(4,'CodingWorld','Chicago'),(5,'ProgrammingCo','Los Angeles');\nINSERT INTO \"EducationRequirements\" (RequirementID,DegreeLevel,FieldOfStudy) VALUES (1,'Masters','Computer Science'),(2,'Bachelors','Information Technology'),(3,'PhD','Artificial Intelligence'),(4,'Associates','Web Development'),(5,'Certified','Project Management');\nINSERT INTO \"Jobs\" (JobID,Minimum_Years,Preferred_Years,JobTitle,Description,Salary) VALUES (1,2,4,'Software Developer','We are looking for a Software Developer with at least 2 years of experience.',70000.0),(2,3,6,'Data Analyst','Experienced Data Analyst required to join our team.',80000.0),(3,1,3,'Graphic Designer','We need an entry-level Graphic Designer to work on various projects.',50000.0),(4,4,8,'Product Manager','An experienced Product Manager is needed to manage and lead product development.',90000.0),(5,5,10,'System Administrator','A System Administrator with extensive experience is required to maintain and improve system performance.',60000.0);\nINSERT INTO \"RequiredSkills\" (SkillID,SkillName,ProficiencyLevel) VALUES (1,'Python Programming','Advanced'),(2,'JavaScript','Intermediate'),(3,'SQL','Expert'),(4,'HTML/CSS','Beginner'),(5,'Agile Methodology','Proficient');\n",
      "question": "What experience do I need for the open position with the greatest salary?",
      "gold_queries": [
        "SELECT Minimum_Years\r\nFROM Jobs\r\nORDER BY Salary DESC\r\nLIMIT 1;",
        "SELECT Preferred_Years\r\nFROM Jobs\r\nORDER BY Salary DESC\r\nLIMIT 1;",
        "SELECT Minimum_Years, Preferred_Years\r\nFROM Jobs\r\nORDER BY Salary DESC\r\nLIMIT 1;"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Which job with the highest salary has the most experience required?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT JobTitle, Salary \nFROM Jobs \nORDER BY Salary DESC, Minimum_Years DESC \nLIMIT 1"
          ]
        },
        {
          "interpretation": "What are the minimum and preferred years of experience for the job with the highest salary?",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Minimum_Years, Preferred_Years FROM Jobs ORDER BY Salary DESC LIMIT 1"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.3333333333333333,
        "precision": 0.5,
        "f1_score": 0.4,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Housing Market/vague_2cols_location/vague_2cols_location.sqlite",
      "db_dump": "CREATE TABLE ClientProperties(\n    client_id INTEGER,\n    property_id INTEGER,\n    InterestedDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (client_id) REFERENCES Clients(client_id),\n    FOREIGN KEY (property_id) REFERENCES Properties(property_id));\nCREATE TABLE Clients(\n    client_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Email TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE Properties(\n    property_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Street_Address TEXT,\n    City TEXT,\n    Real_Estate_Offices INTEGER,\n    Price REAL,\n    Property_Type TEXT,\n    Square_Feet INTEGER);\nCREATE TABLE RealEstateOffices(\n    real_estate_office_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE Transactions(\n    transaction_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    TransactionDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    client_id INTEGER,\n    property_id INTEGER,\n    TypeOfTransaction TEXT,\n    FOREIGN KEY (client_id) REFERENCES Clients(client_id),\n    FOREIGN KEY (property_id) REFERENCES Properties(property_id));\n\nINSERT INTO \"ClientProperties\" (client_id,property_id,InterestedDate) VALUES (1,1,'2023-01-01 10:00:00'),(2,2,'2023-02-01 10:00:00'),(3,3,'2023-03-01 10:00:00'),(4,4,'2023-04-01 10:00:00'),(5,5,'2023-05-01 10:00:00');\nINSERT INTO \"Clients\" (client_id,Name,Email,PhoneNumber) VALUES (1,'John Doe','john@example.com','555-111-2222'),(2,'Jane Smith','janemsmith@email.com','555-333-4444'),(3,'Alice Johnson','alice.johnson@yahoo.com','555-555-6666'),(4,'Bob Brown','bobbrown@gmail.com','555-777-8888'),(5,'Carol White','carolwhite@hotmail.com','555-999-0000');\nINSERT INTO \"Properties\" (property_id,Street_Address,City,Real_Estate_Offices,Price,Property_Type,Square_Feet) VALUES (1,'123 Main St','Anytown',2,300000.0,'Single Family Home',2000),(2,'456 Elm St','Othertown',1,400000.0,'Condo',1200),(3,'789 Oak St','Anytown',3,500000.0,'Townhouse',2500),(4,'999 Pine St','Downtown',1,600000.0,'Loft',2000),(5,'222 Maple Ave','Suburbia',2,450000.0,'Single Family Home',3000);\nINSERT INTO \"RealEstateOffices\" (real_estate_office_id,Name,Address,PhoneNumber) VALUES (1,'ABC Realty','123 Office Rd','555-123-4567'),(2,'XYZ Real Estate','456 Agency Blvd','555-234-5678'),(3,'Mega Brokers','789 Listing Ln','555-345-6789'),(4,'Local Agents','999 Open House Dr','555-456-7890'),(5,'First Choice Homes','222 Sell Now St','555-567-8901');\nINSERT INTO \"Transactions\" (transaction_id,TransactionDate,client_id,property_id,TypeOfTransaction) VALUES (1,'2023-01-10 10:00:00',1,1,'Purchase'),(2,'2023-02-10 10:00:00',2,2,'Rent'),(3,'2023-03-10 10:00:00',3,3,'Lease'),(4,'2023-04-10 10:00:00',4,4,'Purchase'),(5,'2023-05-10 10:00:00',5,5,'Rent');\n",
      "question": "What are the street addresses and cities of the rental properties in the database?",
      "gold_queries": [
        "SELECT P.Street_Address, City from Transactions AS T LEFT JOIN Properties AS P ON T.property_id = P.property_id WHERE T.TypeOfTransaction LIKE 'Rent'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Street addresses and cities of all properties listed as \"Rent\" in the Transactions table",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Street_Address, City FROM Properties WHERE property_id IN (SELECT property_id FROM Transactions WHERE TypeOfTransaction = 'Rent')"
          ]
        },
        {
          "interpretation": "Street addresses and cities where rental properties are listed in the Properties table",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Street_Address, City FROM Properties WHERE Property_Type = 'Condo' OR Property_Type = 'Townhouse' OR Property_Type = 'Loft'"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Job Postings/vague_2cols_experience/vague_2cols_experience.sqlite",
      "db_dump": "CREATE TABLE Companies (\n    CompanyID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT\n);\nCREATE TABLE EducationRequirements (\n    RequirementID INTEGER PRIMARY KEY,\n    DegreeLevel TEXT,\n    FieldOfStudy TEXT\n);\nCREATE TABLE Jobs (\n    JobID INTEGER PRIMARY KEY,\n    Minimum_Years INTEGER ,\n    Preferred_Years INTEGER ,\n    JobTitle TEXT,\n    Description TEXT,\n    Salary REAL \n);\nCREATE TABLE RequiredSkills (\n    SkillID INTEGER PRIMARY KEY,\n    SkillName TEXT,\n    ProficiencyLevel TEXT \n);\n\nINSERT INTO \"Companies\" (CompanyID,Name,Location) VALUES (1,'TechCorp','New York'),(2,'SoftwareInc','San Francisco'),(3,'AppDevelopers','Boston'),(4,'CodingWorld','Chicago'),(5,'ProgrammingCo','Los Angeles');\nINSERT INTO \"EducationRequirements\" (RequirementID,DegreeLevel,FieldOfStudy) VALUES (1,'Masters','Computer Science'),(2,'Bachelors','Information Technology'),(3,'PhD','Artificial Intelligence'),(4,'Associates','Web Development'),(5,'Certified','Project Management');\nINSERT INTO \"Jobs\" (JobID,Minimum_Years,Preferred_Years,JobTitle,Description,Salary) VALUES (1,2,4,'Software Developer','We are looking for a Software Developer with at least 2 years of experience.',70000.0),(2,3,6,'Data Analyst','Experienced Data Analyst required to join our team.',80000.0),(3,1,3,'Graphic Designer','We need an entry-level Graphic Designer to work on various projects.',50000.0),(4,4,8,'Product Manager','An experienced Product Manager is needed to manage and lead product development.',90000.0),(5,5,10,'System Administrator','A System Administrator with extensive experience is required to maintain and improve system performance.',60000.0);\nINSERT INTO \"RequiredSkills\" (SkillID,SkillName,ProficiencyLevel) VALUES (1,'Python Programming','Advanced'),(2,'JavaScript','Intermediate'),(3,'SQL','Expert'),(4,'HTML/CSS','Beginner'),(5,'Agile Methodology','Proficient');\n",
      "question": "What are the minimum years of experience that I need for the open position with the greatest salary?",
      "gold_queries": [
        "SELECT Minimum_Years\r\nFROM Jobs\r\nORDER BY Salary DESC\r\nLIMIT 1;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What are the \tminimum years of experience required for the job with the top salary",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Minimum_Years FROM Jobs ORDER BY Salary DESC LIMIT 1"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Housing Market/vague_2cols_location/vague_2cols_location.sqlite",
      "db_dump": "CREATE TABLE ClientProperties(\n    client_id INTEGER,\n    property_id INTEGER,\n    InterestedDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (client_id) REFERENCES Clients(client_id),\n    FOREIGN KEY (property_id) REFERENCES Properties(property_id));\nCREATE TABLE Clients(\n    client_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Email TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE Properties(\n    property_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Street_Address TEXT,\n    City TEXT,\n    Real_Estate_Offices INTEGER,\n    Price REAL,\n    Property_Type TEXT,\n    Square_Feet INTEGER);\nCREATE TABLE RealEstateOffices(\n    real_estate_office_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE Transactions(\n    transaction_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    TransactionDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    client_id INTEGER,\n    property_id INTEGER,\n    TypeOfTransaction TEXT,\n    FOREIGN KEY (client_id) REFERENCES Clients(client_id),\n    FOREIGN KEY (property_id) REFERENCES Properties(property_id));\n\nINSERT INTO \"ClientProperties\" (client_id,property_id,InterestedDate) VALUES (1,1,'2023-01-01 10:00:00'),(2,2,'2023-02-01 10:00:00'),(3,3,'2023-03-01 10:00:00'),(4,4,'2023-04-01 10:00:00'),(5,5,'2023-05-01 10:00:00');\nINSERT INTO \"Clients\" (client_id,Name,Email,PhoneNumber) VALUES (1,'John Doe','john@example.com','555-111-2222'),(2,'Jane Smith','janemsmith@email.com','555-333-4444'),(3,'Alice Johnson','alice.johnson@yahoo.com','555-555-6666'),(4,'Bob Brown','bobbrown@gmail.com','555-777-8888'),(5,'Carol White','carolwhite@hotmail.com','555-999-0000');\nINSERT INTO \"Properties\" (property_id,Street_Address,City,Real_Estate_Offices,Price,Property_Type,Square_Feet) VALUES (1,'123 Main St','Anytown',2,300000.0,'Single Family Home',2000),(2,'456 Elm St','Othertown',1,400000.0,'Condo',1200),(3,'789 Oak St','Anytown',3,500000.0,'Townhouse',2500),(4,'999 Pine St','Downtown',1,600000.0,'Loft',2000),(5,'222 Maple Ave','Suburbia',2,450000.0,'Single Family Home',3000);\nINSERT INTO \"RealEstateOffices\" (real_estate_office_id,Name,Address,PhoneNumber) VALUES (1,'ABC Realty','123 Office Rd','555-123-4567'),(2,'XYZ Real Estate','456 Agency Blvd','555-234-5678'),(3,'Mega Brokers','789 Listing Ln','555-345-6789'),(4,'Local Agents','999 Open House Dr','555-456-7890'),(5,'First Choice Homes','222 Sell Now St','555-567-8901');\nINSERT INTO \"Transactions\" (transaction_id,TransactionDate,client_id,property_id,TypeOfTransaction) VALUES (1,'2023-01-10 10:00:00',1,1,'Purchase'),(2,'2023-02-10 10:00:00',2,2,'Rent'),(3,'2023-03-10 10:00:00',3,3,'Lease'),(4,'2023-04-10 10:00:00',4,4,'Purchase'),(5,'2023-05-10 10:00:00',5,5,'Rent');\n",
      "question": "In what city is the property of the customer with phone number 555-333-4444 located?",
      "gold_queries": [
        "SELECT P.City from ClientProperties LEFT JOIN Clients as C ON ClientProperties.client_id = C.client_id LEFT JOIN Properties AS P ON ClientProperties.property_id = P.property_id WHERE C.PhoneNumber LIKE '555-333-4444'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Find the city of the property owned by the client with phone number 555-333-4444.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT City \nFROM Transactions AS T \nJOIN Properties AS P ON T.property_id = P.property_id \nJOIN Clients AS C ON T.client_id = C.client_id \nWHERE C.PhoneNumber = '555-333-4444'"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Housing Market/vague_2cols_location/vague_2cols_location.sqlite",
      "db_dump": "CREATE TABLE ClientProperties(\n    client_id INTEGER,\n    property_id INTEGER,\n    InterestedDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (client_id) REFERENCES Clients(client_id),\n    FOREIGN KEY (property_id) REFERENCES Properties(property_id));\nCREATE TABLE Clients(\n    client_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Email TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE Properties(\n    property_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Street_Address TEXT,\n    City TEXT,\n    Real_Estate_Offices INTEGER,\n    Price REAL,\n    Property_Type TEXT,\n    Square_Feet INTEGER);\nCREATE TABLE RealEstateOffices(\n    real_estate_office_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE Transactions(\n    transaction_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    TransactionDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    client_id INTEGER,\n    property_id INTEGER,\n    TypeOfTransaction TEXT,\n    FOREIGN KEY (client_id) REFERENCES Clients(client_id),\n    FOREIGN KEY (property_id) REFERENCES Properties(property_id));\n\nINSERT INTO \"ClientProperties\" (client_id,property_id,InterestedDate) VALUES (1,1,'2023-01-01 10:00:00'),(2,2,'2023-02-01 10:00:00'),(3,3,'2023-03-01 10:00:00'),(4,4,'2023-04-01 10:00:00'),(5,5,'2023-05-01 10:00:00');\nINSERT INTO \"Clients\" (client_id,Name,Email,PhoneNumber) VALUES (1,'John Doe','john@example.com','555-111-2222'),(2,'Jane Smith','janemsmith@email.com','555-333-4444'),(3,'Alice Johnson','alice.johnson@yahoo.com','555-555-6666'),(4,'Bob Brown','bobbrown@gmail.com','555-777-8888'),(5,'Carol White','carolwhite@hotmail.com','555-999-0000');\nINSERT INTO \"Properties\" (property_id,Street_Address,City,Real_Estate_Offices,Price,Property_Type,Square_Feet) VALUES (1,'123 Main St','Anytown',2,300000.0,'Single Family Home',2000),(2,'456 Elm St','Othertown',1,400000.0,'Condo',1200),(3,'789 Oak St','Anytown',3,500000.0,'Townhouse',2500),(4,'999 Pine St','Downtown',1,600000.0,'Loft',2000),(5,'222 Maple Ave','Suburbia',2,450000.0,'Single Family Home',3000);\nINSERT INTO \"RealEstateOffices\" (real_estate_office_id,Name,Address,PhoneNumber) VALUES (1,'ABC Realty','123 Office Rd','555-123-4567'),(2,'XYZ Real Estate','456 Agency Blvd','555-234-5678'),(3,'Mega Brokers','789 Listing Ln','555-345-6789'),(4,'Local Agents','999 Open House Dr','555-456-7890'),(5,'First Choice Homes','222 Sell Now St','555-567-8901');\nINSERT INTO \"Transactions\" (transaction_id,TransactionDate,client_id,property_id,TypeOfTransaction) VALUES (1,'2023-01-10 10:00:00',1,1,'Purchase'),(2,'2023-02-10 10:00:00',2,2,'Rent'),(3,'2023-03-10 10:00:00',3,3,'Lease'),(4,'2023-04-10 10:00:00',4,4,'Purchase'),(5,'2023-05-10 10:00:00',5,5,'Rent');\n",
      "question": "What is the customer with phone number 555-333-4444's street address?",
      "gold_queries": [
        "SELECT P.Street_Address from ClientProperties LEFT JOIN Clients as C ON ClientProperties.client_id = C.client_id LEFT JOIN Properties AS P ON ClientProperties.property_id = P.property_id WHERE C.PhoneNumber LIKE '555-333-4444'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Find all transactions involving the client with phone number 555-333-4444 and retrieve the street address of the corresponding properties.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Properties.Street_Address \nFROM Transactions \nJOIN Clients ON Transactions.client_id = Clients.client_id \nJOIN Properties ON Transactions.property_id = Properties.property_id \nWHERE Clients.PhoneNumber = '555-333-4444'"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Housing Market/vague_2cols_location/vague_2cols_location.sqlite",
      "db_dump": "CREATE TABLE ClientProperties(\n    client_id INTEGER,\n    property_id INTEGER,\n    InterestedDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (client_id) REFERENCES Clients(client_id),\n    FOREIGN KEY (property_id) REFERENCES Properties(property_id));\nCREATE TABLE Clients(\n    client_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Email TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE Properties(\n    property_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Street_Address TEXT,\n    City TEXT,\n    Real_Estate_Offices INTEGER,\n    Price REAL,\n    Property_Type TEXT,\n    Square_Feet INTEGER);\nCREATE TABLE RealEstateOffices(\n    real_estate_office_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE Transactions(\n    transaction_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    TransactionDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    client_id INTEGER,\n    property_id INTEGER,\n    TypeOfTransaction TEXT,\n    FOREIGN KEY (client_id) REFERENCES Clients(client_id),\n    FOREIGN KEY (property_id) REFERENCES Properties(property_id));\n\nINSERT INTO \"ClientProperties\" (client_id,property_id,InterestedDate) VALUES (1,1,'2023-01-01 10:00:00'),(2,2,'2023-02-01 10:00:00'),(3,3,'2023-03-01 10:00:00'),(4,4,'2023-04-01 10:00:00'),(5,5,'2023-05-01 10:00:00');\nINSERT INTO \"Clients\" (client_id,Name,Email,PhoneNumber) VALUES (1,'John Doe','john@example.com','555-111-2222'),(2,'Jane Smith','janemsmith@email.com','555-333-4444'),(3,'Alice Johnson','alice.johnson@yahoo.com','555-555-6666'),(4,'Bob Brown','bobbrown@gmail.com','555-777-8888'),(5,'Carol White','carolwhite@hotmail.com','555-999-0000');\nINSERT INTO \"Properties\" (property_id,Street_Address,City,Real_Estate_Offices,Price,Property_Type,Square_Feet) VALUES (1,'123 Main St','Anytown',2,300000.0,'Single Family Home',2000),(2,'456 Elm St','Othertown',1,400000.0,'Condo',1200),(3,'789 Oak St','Anytown',3,500000.0,'Townhouse',2500),(4,'999 Pine St','Downtown',1,600000.0,'Loft',2000),(5,'222 Maple Ave','Suburbia',2,450000.0,'Single Family Home',3000);\nINSERT INTO \"RealEstateOffices\" (real_estate_office_id,Name,Address,PhoneNumber) VALUES (1,'ABC Realty','123 Office Rd','555-123-4567'),(2,'XYZ Real Estate','456 Agency Blvd','555-234-5678'),(3,'Mega Brokers','789 Listing Ln','555-345-6789'),(4,'Local Agents','999 Open House Dr','555-456-7890'),(5,'First Choice Homes','222 Sell Now St','555-567-8901');\nINSERT INTO \"Transactions\" (transaction_id,TransactionDate,client_id,property_id,TypeOfTransaction) VALUES (1,'2023-01-10 10:00:00',1,1,'Purchase'),(2,'2023-02-10 10:00:00',2,2,'Rent'),(3,'2023-03-10 10:00:00',3,3,'Lease'),(4,'2023-04-10 10:00:00',4,4,'Purchase'),(5,'2023-05-10 10:00:00',5,5,'Rent');\n",
      "question": "What is the city and street address of the property for the customer with phone number 555-333-4444?",
      "gold_queries": [
        "SELECT P.Street_Address, City from ClientProperties LEFT JOIN Clients as C ON ClientProperties.client_id = C.client_id LEFT JOIN Properties AS P ON ClientProperties.property_id = P.property_id WHERE C.PhoneNumber LIKE '555-333-4444'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Retrieve the property_id associated with client_id corresponding to phone number 555-333-4444.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.property_id \nFROM ClientProperties AS T1 \nJOIN Clients AS T2 \nON T1.client_id = T2.client_id \nWHERE T2.PhoneNumber = '555-333-4444'"
          ]
        },
        {
          "interpretation": "Fetch the property's city and street address linked to the client with the specified phone number.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.City, T1.Street_Address\nFROM Properties AS T1\nJOIN ClientProperties AS T2 ON T1.property_id = T2.property_id\nJOIN Clients AS T3 ON T2.client_id = T3.client_id\nWHERE T3.PhoneNumber = '555-111-2222'"
          ]
        },
        {
          "interpretation": "Identify the client with the phone number 555-333-4444 and their associated property.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Clients.Name, Properties.Street_Address\nFROM Clients\nJOIN ClientProperties ON Clients.client_id = ClientProperties.client_id\nJOIN Properties ON ClientProperties.property_id = Properties.property_id\nWHERE Clients.PhoneNumber = '555-333-4444'"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Housing Market/vague_2cols_location/vague_2cols_location.sqlite",
      "db_dump": "CREATE TABLE ClientProperties(\n    client_id INTEGER,\n    property_id INTEGER,\n    InterestedDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (client_id) REFERENCES Clients(client_id),\n    FOREIGN KEY (property_id) REFERENCES Properties(property_id));\nCREATE TABLE Clients(\n    client_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Email TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE Properties(\n    property_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Street_Address TEXT,\n    City TEXT,\n    Real_Estate_Offices INTEGER,\n    Price REAL,\n    Property_Type TEXT,\n    Square_Feet INTEGER);\nCREATE TABLE RealEstateOffices(\n    real_estate_office_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE Transactions(\n    transaction_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    TransactionDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    client_id INTEGER,\n    property_id INTEGER,\n    TypeOfTransaction TEXT,\n    FOREIGN KEY (client_id) REFERENCES Clients(client_id),\n    FOREIGN KEY (property_id) REFERENCES Properties(property_id));\n\nINSERT INTO \"ClientProperties\" (client_id,property_id,InterestedDate) VALUES (1,1,'2023-01-01 10:00:00'),(2,2,'2023-02-01 10:00:00'),(3,3,'2023-03-01 10:00:00'),(4,4,'2023-04-01 10:00:00'),(5,5,'2023-05-01 10:00:00');\nINSERT INTO \"Clients\" (client_id,Name,Email,PhoneNumber) VALUES (1,'John Doe','john@example.com','555-111-2222'),(2,'Jane Smith','janemsmith@email.com','555-333-4444'),(3,'Alice Johnson','alice.johnson@yahoo.com','555-555-6666'),(4,'Bob Brown','bobbrown@gmail.com','555-777-8888'),(5,'Carol White','carolwhite@hotmail.com','555-999-0000');\nINSERT INTO \"Properties\" (property_id,Street_Address,City,Real_Estate_Offices,Price,Property_Type,Square_Feet) VALUES (1,'123 Main St','Anytown',2,300000.0,'Single Family Home',2000),(2,'456 Elm St','Othertown',1,400000.0,'Condo',1200),(3,'789 Oak St','Anytown',3,500000.0,'Townhouse',2500),(4,'999 Pine St','Downtown',1,600000.0,'Loft',2000),(5,'222 Maple Ave','Suburbia',2,450000.0,'Single Family Home',3000);\nINSERT INTO \"RealEstateOffices\" (real_estate_office_id,Name,Address,PhoneNumber) VALUES (1,'ABC Realty','123 Office Rd','555-123-4567'),(2,'XYZ Real Estate','456 Agency Blvd','555-234-5678'),(3,'Mega Brokers','789 Listing Ln','555-345-6789'),(4,'Local Agents','999 Open House Dr','555-456-7890'),(5,'First Choice Homes','222 Sell Now St','555-567-8901');\nINSERT INTO \"Transactions\" (transaction_id,TransactionDate,client_id,property_id,TypeOfTransaction) VALUES (1,'2023-01-10 10:00:00',1,1,'Purchase'),(2,'2023-02-10 10:00:00',2,2,'Rent'),(3,'2023-03-10 10:00:00',3,3,'Lease'),(4,'2023-04-10 10:00:00',4,4,'Purchase'),(5,'2023-05-10 10:00:00',5,5,'Rent');\n",
      "question": "What are the street addresses of the rental properties in the database?",
      "gold_queries": [
        "SELECT P.Street_Address from Transactions AS T LEFT JOIN Properties AS P ON T.property_id = P.property_id WHERE T.TypeOfTransaction LIKE 'Rent'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [],
      "num_unique_execution_results": 0,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0,
        "f1_score": 0,
        "num_queries": 0,
        "num_unique_queries": 0,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Housing Market/vague_2cols_location/vague_2cols_location.sqlite",
      "db_dump": "CREATE TABLE ClientProperties(\n    client_id INTEGER,\n    property_id INTEGER,\n    InterestedDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (client_id) REFERENCES Clients(client_id),\n    FOREIGN KEY (property_id) REFERENCES Properties(property_id));\nCREATE TABLE Clients(\n    client_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Email TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE Properties(\n    property_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Street_Address TEXT,\n    City TEXT,\n    Real_Estate_Offices INTEGER,\n    Price REAL,\n    Property_Type TEXT,\n    Square_Feet INTEGER);\nCREATE TABLE RealEstateOffices(\n    real_estate_office_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE Transactions(\n    transaction_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    TransactionDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    client_id INTEGER,\n    property_id INTEGER,\n    TypeOfTransaction TEXT,\n    FOREIGN KEY (client_id) REFERENCES Clients(client_id),\n    FOREIGN KEY (property_id) REFERENCES Properties(property_id));\n\nINSERT INTO \"ClientProperties\" (client_id,property_id,InterestedDate) VALUES (1,1,'2023-01-01 10:00:00'),(2,2,'2023-02-01 10:00:00'),(3,3,'2023-03-01 10:00:00'),(4,4,'2023-04-01 10:00:00'),(5,5,'2023-05-01 10:00:00');\nINSERT INTO \"Clients\" (client_id,Name,Email,PhoneNumber) VALUES (1,'John Doe','john@example.com','555-111-2222'),(2,'Jane Smith','janemsmith@email.com','555-333-4444'),(3,'Alice Johnson','alice.johnson@yahoo.com','555-555-6666'),(4,'Bob Brown','bobbrown@gmail.com','555-777-8888'),(5,'Carol White','carolwhite@hotmail.com','555-999-0000');\nINSERT INTO \"Properties\" (property_id,Street_Address,City,Real_Estate_Offices,Price,Property_Type,Square_Feet) VALUES (1,'123 Main St','Anytown',2,300000.0,'Single Family Home',2000),(2,'456 Elm St','Othertown',1,400000.0,'Condo',1200),(3,'789 Oak St','Anytown',3,500000.0,'Townhouse',2500),(4,'999 Pine St','Downtown',1,600000.0,'Loft',2000),(5,'222 Maple Ave','Suburbia',2,450000.0,'Single Family Home',3000);\nINSERT INTO \"RealEstateOffices\" (real_estate_office_id,Name,Address,PhoneNumber) VALUES (1,'ABC Realty','123 Office Rd','555-123-4567'),(2,'XYZ Real Estate','456 Agency Blvd','555-234-5678'),(3,'Mega Brokers','789 Listing Ln','555-345-6789'),(4,'Local Agents','999 Open House Dr','555-456-7890'),(5,'First Choice Homes','222 Sell Now St','555-567-8901');\nINSERT INTO \"Transactions\" (transaction_id,TransactionDate,client_id,property_id,TypeOfTransaction) VALUES (1,'2023-01-10 10:00:00',1,1,'Purchase'),(2,'2023-02-10 10:00:00',2,2,'Rent'),(3,'2023-03-10 10:00:00',3,3,'Lease'),(4,'2023-04-10 10:00:00',4,4,'Purchase'),(5,'2023-05-10 10:00:00',5,5,'Rent');\n",
      "question": "In what city are the rental properties in the database?",
      "gold_queries": [
        "SELECT P.City from Transactions AS T LEFT JOIN Properties AS P ON T.property_id = P.property_id WHERE T.TypeOfTransaction LIKE 'Rent'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List the cities associated with rental transactions in the database.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT DISTINCT P.City\nFROM Transactions T\nJOIN Properties P ON T.property_id = P.property_id\nWHERE T.TypeOfTransaction = 'Rent'"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Housing Market/vague_2cols_location/vague_2cols_location.sqlite",
      "db_dump": "CREATE TABLE ClientProperties(\n    client_id INTEGER,\n    property_id INTEGER,\n    InterestedDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (client_id) REFERENCES Clients(client_id),\n    FOREIGN KEY (property_id) REFERENCES Properties(property_id));\nCREATE TABLE Clients(\n    client_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Email TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE Properties(\n    property_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Street_Address TEXT,\n    City TEXT,\n    Real_Estate_Offices INTEGER,\n    Price REAL,\n    Property_Type TEXT,\n    Square_Feet INTEGER);\nCREATE TABLE RealEstateOffices(\n    real_estate_office_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE Transactions(\n    transaction_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    TransactionDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    client_id INTEGER,\n    property_id INTEGER,\n    TypeOfTransaction TEXT,\n    FOREIGN KEY (client_id) REFERENCES Clients(client_id),\n    FOREIGN KEY (property_id) REFERENCES Properties(property_id));\n\nINSERT INTO \"ClientProperties\" (client_id,property_id,InterestedDate) VALUES (1,1,'2023-01-01 10:00:00'),(2,2,'2023-02-01 10:00:00'),(3,3,'2023-03-01 10:00:00'),(4,4,'2023-04-01 10:00:00'),(5,5,'2023-05-01 10:00:00');\nINSERT INTO \"Clients\" (client_id,Name,Email,PhoneNumber) VALUES (1,'John Doe','john@example.com','555-111-2222'),(2,'Jane Smith','janemsmith@email.com','555-333-4444'),(3,'Alice Johnson','alice.johnson@yahoo.com','555-555-6666'),(4,'Bob Brown','bobbrown@gmail.com','555-777-8888'),(5,'Carol White','carolwhite@hotmail.com','555-999-0000');\nINSERT INTO \"Properties\" (property_id,Street_Address,City,Real_Estate_Offices,Price,Property_Type,Square_Feet) VALUES (1,'123 Main St','Anytown',2,300000.0,'Single Family Home',2000),(2,'456 Elm St','Othertown',1,400000.0,'Condo',1200),(3,'789 Oak St','Anytown',3,500000.0,'Townhouse',2500),(4,'999 Pine St','Downtown',1,600000.0,'Loft',2000),(5,'222 Maple Ave','Suburbia',2,450000.0,'Single Family Home',3000);\nINSERT INTO \"RealEstateOffices\" (real_estate_office_id,Name,Address,PhoneNumber) VALUES (1,'ABC Realty','123 Office Rd','555-123-4567'),(2,'XYZ Real Estate','456 Agency Blvd','555-234-5678'),(3,'Mega Brokers','789 Listing Ln','555-345-6789'),(4,'Local Agents','999 Open House Dr','555-456-7890'),(5,'First Choice Homes','222 Sell Now St','555-567-8901');\nINSERT INTO \"Transactions\" (transaction_id,TransactionDate,client_id,property_id,TypeOfTransaction) VALUES (1,'2023-01-10 10:00:00',1,1,'Purchase'),(2,'2023-02-10 10:00:00',2,2,'Rent'),(3,'2023-03-10 10:00:00',3,3,'Lease'),(4,'2023-04-10 10:00:00',4,4,'Purchase'),(5,'2023-05-10 10:00:00',5,5,'Rent');\n",
      "question": "What are the locations of rental properties in the database?",
      "gold_queries": [
        "SELECT P.Street_Address from Transactions AS T LEFT JOIN Properties AS P ON T.property_id = P.property_id WHERE T.TypeOfTransaction LIKE 'Rent'",
        "SELECT P.City from Transactions AS T LEFT JOIN Properties AS P ON T.property_id = P.property_id WHERE T.TypeOfTransaction LIKE 'Rent'",
        "SELECT P.Street_Address, City from Transactions AS T LEFT JOIN Properties AS P ON T.property_id = P.property_id WHERE T.TypeOfTransaction LIKE 'Rent'"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Locations of all properties where TypeOfTransaction is 'Rent' in the Transactions table",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.Street_Address, T2.City FROM Transactions AS T1 JOIN Properties AS T2 ON T1.property_id = T2.property_id WHERE T1.TypeOfTransaction = 'Rent'"
          ]
        },
        {
          "interpretation": "Street addresses of properties with TransactionType='Rent' from the Transactions table",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Street_Address FROM Properties WHERE property_id IN (SELECT property_id FROM Transactions WHERE TypeOfTransaction = 'Rent')"
          ]
        },
        {
          "interpretation": "Cities where properties listed as 'Rent' in Transactions are located",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT P.City\nFROM Properties P\nJOIN Transactions T ON P.property_id = T.property_id\nWHERE T.TypeOfTransaction = 'Rent'"
          ]
        },
        {
          "interpretation": "A list of all Property_IDs where TransactionDate and TypeOfTransaction indicate a rental event",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT property_id FROM Transactions WHERE TypeOfTransaction = 'Rent'"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.75,
        "f1_score": 0.8571428571428571,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/vague/Housing Market/vague_2cols_location/vague_2cols_location.sqlite",
      "db_dump": "CREATE TABLE ClientProperties(\n    client_id INTEGER,\n    property_id INTEGER,\n    InterestedDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (client_id) REFERENCES Clients(client_id),\n    FOREIGN KEY (property_id) REFERENCES Properties(property_id));\nCREATE TABLE Clients(\n    client_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Email TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE Properties(\n    property_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Street_Address TEXT,\n    City TEXT,\n    Real_Estate_Offices INTEGER,\n    Price REAL,\n    Property_Type TEXT,\n    Square_Feet INTEGER);\nCREATE TABLE RealEstateOffices(\n    real_estate_office_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE Transactions(\n    transaction_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    TransactionDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    client_id INTEGER,\n    property_id INTEGER,\n    TypeOfTransaction TEXT,\n    FOREIGN KEY (client_id) REFERENCES Clients(client_id),\n    FOREIGN KEY (property_id) REFERENCES Properties(property_id));\n\nINSERT INTO \"ClientProperties\" (client_id,property_id,InterestedDate) VALUES (1,1,'2023-01-01 10:00:00'),(2,2,'2023-02-01 10:00:00'),(3,3,'2023-03-01 10:00:00'),(4,4,'2023-04-01 10:00:00'),(5,5,'2023-05-01 10:00:00');\nINSERT INTO \"Clients\" (client_id,Name,Email,PhoneNumber) VALUES (1,'John Doe','john@example.com','555-111-2222'),(2,'Jane Smith','janemsmith@email.com','555-333-4444'),(3,'Alice Johnson','alice.johnson@yahoo.com','555-555-6666'),(4,'Bob Brown','bobbrown@gmail.com','555-777-8888'),(5,'Carol White','carolwhite@hotmail.com','555-999-0000');\nINSERT INTO \"Properties\" (property_id,Street_Address,City,Real_Estate_Offices,Price,Property_Type,Square_Feet) VALUES (1,'123 Main St','Anytown',2,300000.0,'Single Family Home',2000),(2,'456 Elm St','Othertown',1,400000.0,'Condo',1200),(3,'789 Oak St','Anytown',3,500000.0,'Townhouse',2500),(4,'999 Pine St','Downtown',1,600000.0,'Loft',2000),(5,'222 Maple Ave','Suburbia',2,450000.0,'Single Family Home',3000);\nINSERT INTO \"RealEstateOffices\" (real_estate_office_id,Name,Address,PhoneNumber) VALUES (1,'ABC Realty','123 Office Rd','555-123-4567'),(2,'XYZ Real Estate','456 Agency Blvd','555-234-5678'),(3,'Mega Brokers','789 Listing Ln','555-345-6789'),(4,'Local Agents','999 Open House Dr','555-456-7890'),(5,'First Choice Homes','222 Sell Now St','555-567-8901');\nINSERT INTO \"Transactions\" (transaction_id,TransactionDate,client_id,property_id,TypeOfTransaction) VALUES (1,'2023-01-10 10:00:00',1,1,'Purchase'),(2,'2023-02-10 10:00:00',2,2,'Rent'),(3,'2023-03-10 10:00:00',3,3,'Lease'),(4,'2023-04-10 10:00:00',4,4,'Purchase'),(5,'2023-05-10 10:00:00',5,5,'Rent');\n",
      "question": "What is the location of the property for the customer with phone number 555-333-4444?",
      "gold_queries": [
        "SELECT P.Street_Address from ClientProperties LEFT JOIN Clients as C ON ClientProperties.client_id = C.client_id LEFT JOIN Properties AS P ON ClientProperties.property_id = P.property_id WHERE C.PhoneNumber LIKE '555-333-4444'",
        "SELECT P.City from ClientProperties LEFT JOIN Clients as C ON ClientProperties.client_id = C.client_id LEFT JOIN Properties AS P ON ClientProperties.property_id = P.property_id WHERE C.PhoneNumber LIKE '555-333-4444'",
        "SELECT P.Street_Address, City from ClientProperties LEFT JOIN Clients as C ON ClientProperties.client_id = C.client_id LEFT JOIN Properties AS P ON ClientProperties.property_id = P.property_id WHERE C.PhoneNumber LIKE '555-333-4444'"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Identify the Real Estate Office location managing the property associated with the client using phone number 555-333-4444",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T3.Address \nFROM Clients AS T1 \nJOIN ClientProperties AS T2 ON T1.client_id = T2.client_id \nJOIN Properties AS T4 ON T2.property_id = T4.property_id \nJOIN RealEstateOffices AS T3 ON T4.Real_Estate_Offices = T3.real_estate_office_id \nWHERE T1.PhoneNumber = '555-333-4444'"
          ]
        },
        {
          "interpretation": "Find the street address of the property associated with client having phone number 555-333-4444",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.Street_Address\nFROM Properties P\nJOIN ClientProperties CP ON P.property_id = CP.property_id\nJOIN Clients C ON CP.client_id = C.client_id\nWHERE C.PhoneNumber = '555-333-4444'"
          ]
        },
        {
          "interpretation": "List all properties viewed by the customer with phone number 555-333-4444 and their respective locations",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.Street_Address, P.City \nFROM Properties P \nJOIN ClientProperties CP ON P.property_id = CP.property_id \nJOIN Clients C ON CP.client_id = C.client_id \nWHERE C.PhoneNumber = '555-333-4444'"
          ]
        },
        {
          "interpretation": "Retrieve the city of the property viewed by the customer with phone number 555-333-4444",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.City FROM Properties P JOIN ClientProperties CP ON P.property_id = CP.property_id JOIN Clients C ON CP.client_id = C.client_id WHERE C.PhoneNumber = '555-333-4444'"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.75,
        "f1_score": 0.8571428571428571,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_2tab_ref_leisure_features/attachment_2tab_ref_leisure_features.sqlite",
      "db_dump": "CREATE TABLE Amenities(\n    ID INTEGER PRIMARY KEY,\n    Description TEXT);\nCREATE TABLE City(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT UNIQUE);\nCREATE TABLE HotTub(\n    ID INTEGER PRIMARY KEY,\n    Capacity INTEGER ,\n    HeatingMethod TEXT,\n    FOREIGN KEY(ID) REFERENCES Hotel(ID));\nCREATE TABLE Hotel(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT,\n    PriceRange REAL ,\n    FOREIGN KEY(ID) REFERENCES City(ID));\nCREATE TABLE HotelAmenities(\n    HotelID INTEGER,\n    AmenityID INTEGER,\n    Available BOOLEAN DEFAULT FALSE,\n    FOREIGN KEY(HotelID) REFERENCES Hotel(ID),\n    FOREIGN KEY(AmenityID) REFERENCES Amenities(ID));\nCREATE TABLE SwimmingPool(\n    ID INTEGER PRIMARY KEY,\n    PoolType TEXT,\n    Size TEXT,\n    MaintenanceFrequency TEXT,\n    FOREIGN KEY(ID) REFERENCES Hotel(ID));\n\nINSERT INTO \"Amenities\" (ID,Description) VALUES (1,'Free WiFi'),(2,'Gym');\nINSERT INTO \"City\" (ID,Name) VALUES (1,'Miami'),(2,'Los Angeles');\nINSERT INTO \"HotTub\" (ID,Capacity,HeatingMethod) VALUES (1,5,'Electric'),(2,8,'Gas');\nINSERT INTO \"Hotel\" (ID,Name,Address,PhoneNumber,PriceRange) VALUES (1,'Palm Beach','200 Palm St.','+1234567890',150.0),(2,'Sunrise Inn','300 Sun Rise Ave.','+1345678901',100.0);\nINSERT INTO \"HotelAmenities\" (HotelID,AmenityID,Available) VALUES (1,1,1),(2,2,0);\nINSERT INTO \"SwimmingPool\" (ID,PoolType,Size,MaintenanceFrequency) VALUES (1,'Outdoor','Medium','Daily'),(2,'Indoor','Small','Weekly');\n",
      "question": "What size are the swimming pools in Miami and what size are the hot tubs there? Show them in one table.",
      "gold_queries": [
        "SELECT SwimmingPool.Size\r\nFROM City JOIN Hotel ON City.ID = Hotel.ID JOIN SwimmingPool ON Hotel.ID = SwimmingPool.ID\r\nWHERE City.Name = 'Miami'\r\nUNION\r\nSELECT HotTub.Capacity\r\nFROM City JOIN Hotel ON City.ID = Hotel.ID JOIN HotTub ON Hotel.ID = HotTub.ID\r\nWHERE City.Name = 'Miami'"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Create a table displaying the sizes of Miami swimming pools and the corresponding capacities of their hot tubs, if available.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT P.Size, H.Capacity\nFROM City C\nJOIN Hotel HOT ON C.ID = HOT.ID\nJOIN SwimmingPool P ON HOT.ID = P.ID\nLEFT JOIN HotTub H ON HOT.ID = H.ID\nWHERE C.Name = 'Miami'"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_2tab_ref_leisure_features/attachment_2tab_ref_leisure_features.sqlite",
      "db_dump": "CREATE TABLE Amenities(\n    ID INTEGER PRIMARY KEY,\n    Description TEXT);\nCREATE TABLE City(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT UNIQUE);\nCREATE TABLE HotTub(\n    ID INTEGER PRIMARY KEY,\n    Capacity INTEGER ,\n    HeatingMethod TEXT,\n    FOREIGN KEY(ID) REFERENCES Hotel(ID));\nCREATE TABLE Hotel(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT,\n    PriceRange REAL ,\n    FOREIGN KEY(ID) REFERENCES City(ID));\nCREATE TABLE HotelAmenities(\n    HotelID INTEGER,\n    AmenityID INTEGER,\n    Available BOOLEAN DEFAULT FALSE,\n    FOREIGN KEY(HotelID) REFERENCES Hotel(ID),\n    FOREIGN KEY(AmenityID) REFERENCES Amenities(ID));\nCREATE TABLE SwimmingPool(\n    ID INTEGER PRIMARY KEY,\n    PoolType TEXT,\n    Size TEXT,\n    MaintenanceFrequency TEXT,\n    FOREIGN KEY(ID) REFERENCES Hotel(ID));\n\nINSERT INTO \"Amenities\" (ID,Description) VALUES (1,'Free WiFi'),(2,'Gym');\nINSERT INTO \"City\" (ID,Name) VALUES (1,'Miami'),(2,'Los Angeles');\nINSERT INTO \"HotTub\" (ID,Capacity,HeatingMethod) VALUES (1,5,'Electric'),(2,8,'Gas');\nINSERT INTO \"Hotel\" (ID,Name,Address,PhoneNumber,PriceRange) VALUES (1,'Palm Beach','200 Palm St.','+1234567890',150.0),(2,'Sunrise Inn','300 Sun Rise Ave.','+1345678901',100.0);\nINSERT INTO \"HotelAmenities\" (HotelID,AmenityID,Available) VALUES (1,1,1),(2,2,0);\nINSERT INTO \"SwimmingPool\" (ID,PoolType,Size,MaintenanceFrequency) VALUES (1,'Outdoor','Medium','Daily'),(2,'Indoor','Small','Weekly');\n",
      "question": "Can you show me the sizes of all hot tubs in Miami along with the sizes of all swimming pools in any given location? Show them in one table.",
      "gold_queries": [
        "SELECT SwimmingPool.Size\r\nFROM City JOIN Hotel ON City.ID = Hotel.ID JOIN SwimmingPool ON Hotel.ID = SwimmingPool.ID\r\nUNION\r\nSELECT HotTub.Capacity\r\nFROM City JOIN Hotel ON City.ID = Hotel.ID JOIN HotTub ON Hotel.ID = HotTub.ID\r\nWHERE City.Name = 'Miami'"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Display a table containing the capacities of every hot tub in Miami alongside a column listing the sizes of all swimming pools regardless of location.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT H1.Capacity, S1.Size \nFROM HotTub H1, SwimmingPool S1"
          ]
        },
        {
          "interpretation": "Retrieve the capacity of all hot tubs in Miami and the size of all swimming pools in every location, combining the results into a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT HotTub.Capacity AS HotTubCapacity, NULL AS SwimmingPoolSize\nFROM HotTub\nJOIN Hotel ON HotTub.ID = Hotel.ID\nJOIN City ON Hotel.ID = City.ID\nWHERE City.Name = 'Miami'\nUNION\nSELECT NULL AS HotTubCapacity, SwimmingPool.Size AS SwimmingPoolSize\nFROM SwimmingPool"
          ]
        },
        {
          "interpretation": "Output a single table listing the capacity of each hot tub in Miami, alongside the size of all swimming pools associated with each hotel.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT htb.Capacity, sp.Size\nFROM HotTub htb\nJOIN Hotel h ON htb.ID = h.ID\nJOIN City c ON h.ID = c.ID\nLEFT JOIN SwimmingPool sp ON h.ID = sp.ID\nWHERE c.Name = 'Miami'"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_2tab_ref_leisure_features/attachment_2tab_ref_leisure_features.sqlite",
      "db_dump": "CREATE TABLE Amenities(\n    ID INTEGER PRIMARY KEY,\n    Description TEXT);\nCREATE TABLE City(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT UNIQUE);\nCREATE TABLE HotTub(\n    ID INTEGER PRIMARY KEY,\n    Capacity INTEGER ,\n    HeatingMethod TEXT,\n    FOREIGN KEY(ID) REFERENCES Hotel(ID));\nCREATE TABLE Hotel(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT,\n    PriceRange REAL ,\n    FOREIGN KEY(ID) REFERENCES City(ID));\nCREATE TABLE HotelAmenities(\n    HotelID INTEGER,\n    AmenityID INTEGER,\n    Available BOOLEAN DEFAULT FALSE,\n    FOREIGN KEY(HotelID) REFERENCES Hotel(ID),\n    FOREIGN KEY(AmenityID) REFERENCES Amenities(ID));\nCREATE TABLE SwimmingPool(\n    ID INTEGER PRIMARY KEY,\n    PoolType TEXT,\n    Size TEXT,\n    MaintenanceFrequency TEXT,\n    FOREIGN KEY(ID) REFERENCES Hotel(ID));\n\nINSERT INTO \"Amenities\" (ID,Description) VALUES (1,'Free WiFi'),(2,'Gym');\nINSERT INTO \"City\" (ID,Name) VALUES (1,'Miami'),(2,'Los Angeles');\nINSERT INTO \"HotTub\" (ID,Capacity,HeatingMethod) VALUES (1,5,'Electric'),(2,8,'Gas');\nINSERT INTO \"Hotel\" (ID,Name,Address,PhoneNumber,PriceRange) VALUES (1,'Palm Beach','200 Palm St.','+1234567890',150.0),(2,'Sunrise Inn','300 Sun Rise Ave.','+1345678901',100.0);\nINSERT INTO \"HotelAmenities\" (HotelID,AmenityID,Available) VALUES (1,1,1),(2,2,0);\nINSERT INTO \"SwimmingPool\" (ID,PoolType,Size,MaintenanceFrequency) VALUES (1,'Outdoor','Medium','Daily'),(2,'Indoor','Small','Weekly');\n",
      "question": "What size are all swimming pools and hot tubs in Miami? Show them in one table.",
      "gold_queries": [
        "SELECT SwimmingPool.Size\r\nFROM City JOIN Hotel ON City.ID = Hotel.ID JOIN SwimmingPool ON Hotel.ID = SwimmingPool.ID\r\nWHERE City.Name = 'Miami'\r\nUNION\r\nSELECT HotTub.Capacity\r\nFROM City JOIN Hotel ON City.ID = Hotel.ID JOIN HotTub ON Hotel.ID = HotTub.ID\r\nWHERE City.Name = 'Miami'",
        "SELECT SwimmingPool.Size\r\nFROM City JOIN Hotel ON City.ID = Hotel.ID JOIN SwimmingPool ON Hotel.ID = SwimmingPool.ID\r\nUNION\r\nSELECT HotTub.Capacity\r\nFROM City JOIN Hotel ON City.ID = Hotel.ID JOIN HotTub ON Hotel.ID = HotTub.ID\r\nWHERE City.Name = 'Miami'"
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Retrieve the Size of all SwimmingPools and HotTubs in Miami.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT SwimmingPool.Size, HotTub.Capacity \nFROM SwimmingPool \nJOIN Hotel ON SwimmingPool.ID = Hotel.ID \nJOIN HotTub ON HotTub.ID = Hotel.ID \nJOIN City ON City.ID = Hotel.ID \nWHERE City.Name = 'Miami'"
          ]
        },
        {
          "interpretation": "Group and aggregate the Size attribute of SwimmingPools and HotTubs belonging to hotels situated in Miami.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT 'HotTub' AS Type, CASE \n        WHEN Capacity <= 5 THEN 'Small'\n        WHEN Capacity > 5 AND Capacity <= 10 THEN 'Medium'\n        ELSE 'Large'\n    END AS Size, COUNT(*) AS Count\nFROM HotTub\nJOIN Hotel ON HotTub.ID = Hotel.ID\nJOIN City ON Hotel.ID = City.ID\nWHERE City.Name = 'Miami'\nGROUP BY Size",
            "SELECT 'SwimmingPool' AS Type, Size, COUNT(*) AS Count\nFROM SwimmingPool\nJOIN Hotel ON SwimmingPool.ID = Hotel.ID\nJOIN City ON Hotel.ID = City.ID\nWHERE City.Name = 'Miami'\nGROUP BY Size"
          ]
        },
        {
          "interpretation": "Group and aggregate the Size attribute of SwimmingPools and HotTubs belonging to hotels situated in Miami.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT 'HotTub' AS Type, CASE \n        WHEN Capacity <= 5 THEN 'Small'\n        WHEN Capacity > 5 AND Capacity <= 10 THEN 'Medium'\n        ELSE 'Large'\n    END AS Size, COUNT(*) AS Count\nFROM HotTub\nJOIN Hotel ON HotTub.ID = Hotel.ID\nJOIN City ON Hotel.ID = City.ID\nWHERE City.Name = 'Miami'\nGROUP BY Size",
            "SELECT 'SwimmingPool' AS Type, Size, COUNT(*) AS Count\nFROM SwimmingPool\nJOIN Hotel ON SwimmingPool.ID = Hotel.ID\nJOIN City ON Hotel.ID = City.ID\nWHERE City.Name = 'Miami'\nGROUP BY Size"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.3333333333333333,
        "f1_score": 0.4,
        "num_queries": 5,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Filmmaking/attachment_1tab_ref_genre3/attachment_1tab_ref_genre3.sqlite",
      "db_dump": "CREATE TABLE Directors(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    birth_year INTEGER,\n    nationality TEXT\n);\nCREATE TABLE Film_Director(\n    film_id INTEGER,\n    director_id INTEGER,\n    FOREIGN KEY(film_id) REFERENCES Films(id),\n    FOREIGN KEY(director_id) REFERENCES Directors(id),\n    PRIMARY KEY(film_id, director_id)\n);\nCREATE TABLE Film_Genre(\n    film_id INTEGER,\n    genre_id INTEGER,\n    FOREIGN KEY(film_id) REFERENCES Films(id),\n    FOREIGN KEY(genre_id) REFERENCES Genres(id),\n    PRIMARY KEY(film_id, genre_id)\n);\nCREATE TABLE Films(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    release_date DATE,\n    director TEXT,\n    budget REAL\n);\nCREATE TABLE Genres(\n    id INTEGER PRIMARY KEY,\n    genre TEXT\n);\n\nINSERT INTO \"Directors\" (id,name,birth_year,nationality) VALUES (1,'Stanley Kubrick',1928,'American'),(2,'David Robert Mitchell',1974,'American'),(3,'Christopher Nolan',1970,'English'),(4,'David Fincher',1962,'American');\nINSERT INTO \"Film_Director\" (film_id,director_id) VALUES (1,1),(2,2),(3,3),(4,4);\nINSERT INTO \"Film_Genre\" (film_id,genre_id) VALUES (1,1),(2,1),(3,2),(4,2);\nINSERT INTO \"Films\" (id,title,release_date,director,budget) VALUES (1,'The Shining','1980-06-22','Stanley Kubrick',20000000.0),(2,'It Follows','2014-03-14','David Robert Mitchell',5000000.0),(3,'Inception','2010-07-16','Christopher Nolan',20000000.0),(4,'Gone Girl','2014-10-03','David Fincher',65000000.0);\nINSERT INTO \"Genres\" (id,genre) VALUES (1,'Horror'),(2,'Thriller');\n",
      "question": "What horror films had a budget of 20 million and what thriller films had the same budget? Show them in one table.",
      "gold_queries": [
        "SELECT Films.title \r\nFROM Genres JOIN Film_Genre ON Genres.id = Film_Genre.genre_id JOIN Films ON Film_Genre.film_id = Films.id\r\nWHERE (Genres.genre = \"Horror\" OR Genres.genre = \"Thriller\") AND Films.budget = 20000000.0"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Identify and display in one table horror movies with a 20 million dollar budget alongside thriller movies sharing that budget.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT f.title, f.release_date, f.budget, g.genre\nFROM Films f\nJOIN Film_Genre fg ON f.id = fg.film_id\nJOIN Genres g ON fg.genre_id = g.id\nWHERE (g.genre = 'Horror' OR g.genre = 'Thriller') AND f.budget = 20000000.0"
          ]
        },
        {
          "interpretation": "List all horror films with a budget of 20 million and all thriller films with the same budget in a unified table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT f.title, f.budget, g.genre\nFROM Films f\nJOIN Film_Genre fg ON f.id = fg.film_id\nJOIN Genres g ON fg.genre_id = g.id\nWHERE (g.genre = 'Horror' OR g.genre = 'Thriller') AND f.budget = 20000000.0"
          ]
        },
        {
          "interpretation": "Find horror films with a budget of 20 million and pinpoint thriller films having the same budget, presenting them in a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title, budget \nFROM Films \nWHERE id IN (\n    SELECT film_id \n    FROM Film_Genre \n    WHERE genre_id = (SELECT id FROM Genres WHERE genre = 'Horror')\n) AND budget = 20000000.0\nUNION\nSELECT title, budget \nFROM Films \nWHERE id IN (\n    SELECT film_id \n    FROM Film_Genre \n    WHERE genre_id = (SELECT id FROM Genres WHERE genre = 'Thriller')\n) AND budget = 20000000.0"
          ]
        },
        {
          "interpretation": "Retrieve horror films with a budget of 20,000,000.0 and thriller films with the same budget",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT T1.title \nFROM Films AS T1 \nJOIN Film_Genre AS T2 ON T1.id = T2.film_id \nJOIN Genres AS T3 ON T2.genre_id = T3.id \nWHERE (T3.genre = 'Horror' OR T3.genre = 'Thriller') AND T1.budget = 20000000.0"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Filmmaking/attachment_1tab_ref_genre3/attachment_1tab_ref_genre3.sqlite",
      "db_dump": "CREATE TABLE Directors(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    birth_year INTEGER,\n    nationality TEXT\n);\nCREATE TABLE Film_Director(\n    film_id INTEGER,\n    director_id INTEGER,\n    FOREIGN KEY(film_id) REFERENCES Films(id),\n    FOREIGN KEY(director_id) REFERENCES Directors(id),\n    PRIMARY KEY(film_id, director_id)\n);\nCREATE TABLE Film_Genre(\n    film_id INTEGER,\n    genre_id INTEGER,\n    FOREIGN KEY(film_id) REFERENCES Films(id),\n    FOREIGN KEY(genre_id) REFERENCES Genres(id),\n    PRIMARY KEY(film_id, genre_id)\n);\nCREATE TABLE Films(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    release_date DATE,\n    director TEXT,\n    budget REAL\n);\nCREATE TABLE Genres(\n    id INTEGER PRIMARY KEY,\n    genre TEXT\n);\n\nINSERT INTO \"Directors\" (id,name,birth_year,nationality) VALUES (1,'Stanley Kubrick',1928,'American'),(2,'David Robert Mitchell',1974,'American'),(3,'Christopher Nolan',1970,'English'),(4,'David Fincher',1962,'American');\nINSERT INTO \"Film_Director\" (film_id,director_id) VALUES (1,1),(2,2),(3,3),(4,4);\nINSERT INTO \"Film_Genre\" (film_id,genre_id) VALUES (1,1),(2,1),(3,2),(4,2);\nINSERT INTO \"Films\" (id,title,release_date,director,budget) VALUES (1,'The Shining','1980-06-22','Stanley Kubrick',20000000.0),(2,'It Follows','2014-03-14','David Robert Mitchell',5000000.0),(3,'Inception','2010-07-16','Christopher Nolan',20000000.0),(4,'Gone Girl','2014-10-03','David Fincher',65000000.0);\nINSERT INTO \"Genres\" (id,genre) VALUES (1,'Horror'),(2,'Thriller');\n",
      "question": "Show horror films and thriller films with a budget of 20 million. Show them in one table.",
      "gold_queries": [
        "SELECT Films.title \r\nFROM Genres JOIN Film_Genre ON Genres.id = Film_Genre.genre_id JOIN Films ON Film_Genre.film_id = Films.id\r\nWHERE (Genres.genre = \"Horror\" OR Genres.genre = \"Thriller\") AND Films.budget = 20000000.0",
        "SELECT Films.title \r\nFROM Genres JOIN Film_Genre ON Genres.id = Film_Genre.genre_id JOIN Films ON Film_Genre.film_id = Films.id\r\nWHERE Genres.genre = \"Horror\" OR Genres.genre = \"Thriller\" AND Films.budget = 20000000.0"
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Show films categorized as \"Horror\" or \"Thriller\" with a budget of 20 million dollars, aggregated in a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Films.title, Films.budget, Genres.genre\nFROM Films\nJOIN Film_Genre ON Films.id = Film_Genre.film_id\nJOIN Genres ON Film_Genre.genre_id = Genres.id\nWHERE (Genres.genre = 'Horror' OR Genres.genre = 'Thriller') AND Films.budget = 20000000.0"
          ]
        },
        {
          "interpretation": "Display a single table containing a list of all \"Horror\" films and \"Thriller\" films with a budget of 20 million.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Films.title, Films.release_date, Films.director, Films.budget\nFROM Films\nJOIN Film_Genre ON Films.id = Film_Genre.film_id\nJOIN Genres ON Film_Genre.genre_id = Genres.id\nWHERE Genres.genre IN ('Horror', 'Thriller') AND Films.budget >= 20000000.0"
          ]
        },
        {
          "interpretation": "Return a single table presenting all films with a budget of 20 million that fall into the \"Horror\" or \"Thriller\" genres.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT F.title\nFROM Films F\nJOIN Film_Genre FG ON F.id = FG.film_id\nJOIN Genres G ON FG.genre_id = G.id\nWHERE F.budget = 20000000 AND G.genre IN ('Horror', 'Thriller')"
          ]
        },
        {
          "interpretation": "List all films belonging to the \"Horror\" and \"Thriller\" genres that have a budget equal to 20 million in a consolidated table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT f.title, f.release_date, f.director, f.budget, g.genre\nFROM Films f\nJOIN Film_Genre fg ON f.id = fg.film_id\nJOIN Genres g ON fg.genre_id = g.id\nWHERE (g.genre = 'Horror' OR g.genre = 'Thriller') AND f.budget = 20000000.0"
          ]
        },
        {
          "interpretation": "Retrieve all films classified as both \"Horror\" and \"Thriller\" genres that have a budget of 20 million.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT f.title \nFROM Films f \nJOIN Film_Genre fg1 ON f.id = fg1.film_id \nJOIN Genres g1 ON fg1.genre_id = g1.id \nJOIN Film_Genre fg2 ON f.id = fg2.film_id \nJOIN Genres g2 ON fg2.genre_id = g2.id \nWHERE g1.genre = 'Horror' AND g2.genre = 'Thriller' AND f.budget = 20000000.0"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.2,
        "f1_score": 0.28571428571428575,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Filmmaking/attachment_1tab_ref_genre3/attachment_1tab_ref_genre3.sqlite",
      "db_dump": "CREATE TABLE Directors(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    birth_year INTEGER,\n    nationality TEXT\n);\nCREATE TABLE Film_Director(\n    film_id INTEGER,\n    director_id INTEGER,\n    FOREIGN KEY(film_id) REFERENCES Films(id),\n    FOREIGN KEY(director_id) REFERENCES Directors(id),\n    PRIMARY KEY(film_id, director_id)\n);\nCREATE TABLE Film_Genre(\n    film_id INTEGER,\n    genre_id INTEGER,\n    FOREIGN KEY(film_id) REFERENCES Films(id),\n    FOREIGN KEY(genre_id) REFERENCES Genres(id),\n    PRIMARY KEY(film_id, genre_id)\n);\nCREATE TABLE Films(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    release_date DATE,\n    director TEXT,\n    budget REAL\n);\nCREATE TABLE Genres(\n    id INTEGER PRIMARY KEY,\n    genre TEXT\n);\n\nINSERT INTO \"Directors\" (id,name,birth_year,nationality) VALUES (1,'Stanley Kubrick',1928,'American'),(2,'David Robert Mitchell',1974,'American'),(3,'Christopher Nolan',1970,'English'),(4,'David Fincher',1962,'American');\nINSERT INTO \"Film_Director\" (film_id,director_id) VALUES (1,1),(2,2),(3,3),(4,4);\nINSERT INTO \"Film_Genre\" (film_id,genre_id) VALUES (1,1),(2,1),(3,2),(4,2);\nINSERT INTO \"Films\" (id,title,release_date,director,budget) VALUES (1,'The Shining','1980-06-22','Stanley Kubrick',20000000.0),(2,'It Follows','2014-03-14','David Robert Mitchell',5000000.0),(3,'Inception','2010-07-16','Christopher Nolan',20000000.0),(4,'Gone Girl','2014-10-03','David Fincher',65000000.0);\nINSERT INTO \"Genres\" (id,genre) VALUES (1,'Horror'),(2,'Thriller');\n",
      "question": "Provide a list of all horror films and also list thriller films with a budget of 20 million. Show them in one table.",
      "gold_queries": [
        "SELECT Films.title \r\nFROM Genres JOIN Film_Genre ON Genres.id = Film_Genre.genre_id JOIN Films ON Film_Genre.film_id = Films.id\r\nWHERE Genres.genre = \"Horror\" OR Genres.genre = \"Thriller\" AND Films.budget = 20000000.0"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Display a consolidated table showing all horror films and a separate section for thriller films with a budget of 20 million.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title, budget, genre\nFROM Films\nJOIN Film_Genre ON Films.id = Film_Genre.film_id\nJOIN Genres ON Film_Genre.genre_id = Genres.id\nWHERE genre = 'Horror'",
            "SELECT title, budget, genre\nFROM Films\nJOIN Film_Genre ON Films.id = Film_Genre.film_id\nJOIN Genres ON Film_Genre.genre_id = Genres.id\nWHERE genre = 'Thriller' AND budget = 20000000"
          ]
        },
        {
          "interpretation": "Display a consolidated table showing all horror films and a separate section for thriller films with a budget of 20 million.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title, budget, genre\nFROM Films\nJOIN Film_Genre ON Films.id = Film_Genre.film_id\nJOIN Genres ON Film_Genre.genre_id = Genres.id\nWHERE genre = 'Horror'",
            "SELECT title, budget, genre\nFROM Films\nJOIN Film_Genre ON Films.id = Film_Genre.film_id\nJOIN Genres ON Film_Genre.genre_id = Genres.id\nWHERE genre = 'Thriller' AND budget = 20000000"
          ]
        },
        {
          "interpretation": "Return all films classified as \"Horror\" along with all films classified as \"Thriller\" that have a budget of 20 million in a single table.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT T1.title \nFROM Films AS T1 \nJOIN Film_Genre AS T2 ON T1.id = T2.film_id \nJOIN Genres AS T3 ON T2.genre_id = T3.id \nWHERE T3.genre = 'Horror' \nUNION \nSELECT title \nFROM Films \nWHERE budget = 20000000.0 AND id IN (\n    SELECT film_id \n    FROM Film_Genre \n    WHERE genre_id = (\n        SELECT id \n        FROM Genres \n        WHERE genre = 'Thriller'\n    )\n)"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 5,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Filmmaking/attachment_1tab_ref_soundtrack/attachment_1tab_ref_soundtrack.sqlite",
      "db_dump": "CREATE TABLE \"Composer\"( `id` INTEGER PRIMARY KEY ,\n    creator TEXT,\n    birth_year INTEGER,\n    death_year INTEGER\n);\nCREATE TABLE Director(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT\n);\nCREATE TABLE Film(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE,\n    director_id INTEGER,\n    FOREIGN KEY (director_id) REFERENCES Director(id)\n);\nCREATE TABLE \"Movie_Elements\"(\n    element_type TEXT ,\n    movie_title TEXT,\n    \"composer_id\" INTEGER,\n    duration INTEGER,\n    FOREIGN KEY (\"composer_id\") REFERENCES Composer(id)\n);\n\nINSERT INTO \"Composer\" (id,creator,birth_year,death_year) VALUES (1,'John Williams',1932,NULL),(2,'Hans Zimmer',1957,NULL),(3,'Danny Elfman',1953,NULL),(4,'Howard Shore',1946,NULL),(5,'Thomas Newman',1955,NULL),(6,'Zack Hemsey',1983,NULL),(7,'Javier Navarrete',1956,NULL);\nINSERT INTO \"Director\" (id,name) VALUES (1,'Christopher Nolan'),(2,'Quentin Tarantino'),(3,'Steven Spielberg'),(4,'Guillermo del Toro'),(5,'Martin Scorsese'),(6,'Ava DuVernay');\nINSERT INTO \"Film\" (id,title,release_date,director_id) VALUES (1,'Inception','2010-07-16',1),(2,'Pulp Fiction','1994-10-14',2),(3,'Schindler\u2019s List','1993-12-15',3),(4,'Pan\u2019s Labyrinth','2006-03-17',4),(5,'The Departed','2006-08-04',5);\nINSERT INTO \"Movie_Elements\" (element_type,movie_title,composer_id,duration) VALUES ('Sound Design','Inception',6,140),('Sound Design','Inception',1,150),('Music Score','Schindler\u2019s List',1,150),('Music Score','Pan\u2019s Labyrinth',7,120),('Music Score','The Departed',4,130);\n",
      "question": "Provide films listed with sound design and also show films where John Williams composed the music score. Show them in one table.",
      "gold_queries": [
        "SELECT Movie_Elements.movie_title \r\nFROM Movie_Elements JOIN Composer ON Movie_Elements.composer_id = Composer.id\r\nWHERE Movie_Elements.element_type = \"Sound Design\" OR Movie_Elements.element_type = \"Music Score\" AND Composer.creator = \"John Williams\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Return a list of films with both 'Sound Design' and 'Music Score' by John Williams",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.title FROM Film AS T1 JOIN Movie_Elements AS T2 ON T1.title = T2.movie_title JOIN Composer AS T3 ON T2.composer_id = T3.id WHERE T3.creator = 'John Williams' AND T2.element_type = 'Sound Design' INTERSECT SELECT T1.title FROM Film AS T1 JOIN Movie_Elements AS T2 ON T1.title = T2.movie_title JOIN Composer AS T3 ON T2.composer_id = T3.id WHERE T3.creator = 'John Williams' AND T2.element_type = 'Music Score'"
          ]
        },
        {
          "interpretation": "List all films that have 'Sound Design' or 'Music Score' by John Williams",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Movie_Elements.movie_title \nFROM Movie_Elements \nJOIN Composer ON Movie_Elements.composer_id = Composer.id \nWHERE (Movie_Elements.element_type = 'Sound Design' OR Movie_Elements.element_type = 'Music Score') \nAND Composer.creator = 'John Williams'"
          ]
        },
        {
          "interpretation": "List all films where the 'element_type' is 'Sound Design' and 'composer_id' is 1",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT movie_title FROM Movie_Elements WHERE element_type = 'Sound Design' AND composer_id = 1"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Filmmaking/attachment_1tab_ref_soundtrack/attachment_1tab_ref_soundtrack.sqlite",
      "db_dump": "CREATE TABLE \"Composer\"( `id` INTEGER PRIMARY KEY ,\n    creator TEXT,\n    birth_year INTEGER,\n    death_year INTEGER\n);\nCREATE TABLE Director(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT\n);\nCREATE TABLE Film(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE,\n    director_id INTEGER,\n    FOREIGN KEY (director_id) REFERENCES Director(id)\n);\nCREATE TABLE \"Movie_Elements\"(\n    element_type TEXT ,\n    movie_title TEXT,\n    \"composer_id\" INTEGER,\n    duration INTEGER,\n    FOREIGN KEY (\"composer_id\") REFERENCES Composer(id)\n);\n\nINSERT INTO \"Composer\" (id,creator,birth_year,death_year) VALUES (1,'John Williams',1932,NULL),(2,'Hans Zimmer',1957,NULL),(3,'Danny Elfman',1953,NULL),(4,'Howard Shore',1946,NULL),(5,'Thomas Newman',1955,NULL),(6,'Zack Hemsey',1983,NULL),(7,'Javier Navarrete',1956,NULL);\nINSERT INTO \"Director\" (id,name) VALUES (1,'Christopher Nolan'),(2,'Quentin Tarantino'),(3,'Steven Spielberg'),(4,'Guillermo del Toro'),(5,'Martin Scorsese'),(6,'Ava DuVernay');\nINSERT INTO \"Film\" (id,title,release_date,director_id) VALUES (1,'Inception','2010-07-16',1),(2,'Pulp Fiction','1994-10-14',2),(3,'Schindler\u2019s List','1993-12-15',3),(4,'Pan\u2019s Labyrinth','2006-03-17',4),(5,'The Departed','2006-08-04',5);\nINSERT INTO \"Movie_Elements\" (element_type,movie_title,composer_id,duration) VALUES ('Sound Design','Inception',6,140),('Sound Design','Inception',1,150),('Music Score','Schindler\u2019s List',1,150),('Music Score','Pan\u2019s Labyrinth',7,120),('Music Score','The Departed',4,130);\n",
      "question": "Which films are listed with sound design and music score composed by John Williams? Show them in one table.",
      "gold_queries": [
        "SELECT Movie_Elements.movie_title \r\nFROM Movie_Elements JOIN Composer ON Movie_Elements.composer_id = Composer.id\r\nWHERE (Movie_Elements.element_type = \"Sound Design\" OR Movie_Elements.element_type = \"Music Score\") AND Composer.creator = \"John Williams\"",
        "SELECT Movie_Elements.movie_title \r\nFROM Movie_Elements JOIN Composer ON Movie_Elements.composer_id = Composer.id\r\nWHERE Movie_Elements.element_type = \"Sound Design\" OR Movie_Elements.element_type = \"Music Score\" AND Composer.creator = \"John Williams\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Find all films with entries in the \"Movie_Elements\" table for both \"Sound Design\" and \"Music Score\" where the composer_id is associated with John Williams.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT f.title\nFROM Film f\nJOIN Movie_Elements me ON f.title = me.movie_title\nWHERE me.composer_id = (SELECT id FROM Composer WHERE creator = 'John Williams')\nAND f.title IN (\n    SELECT movie_title FROM Movie_Elements WHERE element_type = 'Sound Design'\n    INTERSECT\n    SELECT movie_title FROM Movie_Elements WHERE element_type = 'Music Score'\n)"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Filmmaking/attachment_1tab_ref_soundtrack/attachment_1tab_ref_soundtrack.sqlite",
      "db_dump": "CREATE TABLE \"Composer\"( `id` INTEGER PRIMARY KEY ,\n    creator TEXT,\n    birth_year INTEGER,\n    death_year INTEGER\n);\nCREATE TABLE Director(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT\n);\nCREATE TABLE Film(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE,\n    director_id INTEGER,\n    FOREIGN KEY (director_id) REFERENCES Director(id)\n);\nCREATE TABLE \"Movie_Elements\"(\n    element_type TEXT ,\n    movie_title TEXT,\n    \"composer_id\" INTEGER,\n    duration INTEGER,\n    FOREIGN KEY (\"composer_id\") REFERENCES Composer(id)\n);\n\nINSERT INTO \"Composer\" (id,creator,birth_year,death_year) VALUES (1,'John Williams',1932,NULL),(2,'Hans Zimmer',1957,NULL),(3,'Danny Elfman',1953,NULL),(4,'Howard Shore',1946,NULL),(5,'Thomas Newman',1955,NULL),(6,'Zack Hemsey',1983,NULL),(7,'Javier Navarrete',1956,NULL);\nINSERT INTO \"Director\" (id,name) VALUES (1,'Christopher Nolan'),(2,'Quentin Tarantino'),(3,'Steven Spielberg'),(4,'Guillermo del Toro'),(5,'Martin Scorsese'),(6,'Ava DuVernay');\nINSERT INTO \"Film\" (id,title,release_date,director_id) VALUES (1,'Inception','2010-07-16',1),(2,'Pulp Fiction','1994-10-14',2),(3,'Schindler\u2019s List','1993-12-15',3),(4,'Pan\u2019s Labyrinth','2006-03-17',4),(5,'The Departed','2006-08-04',5);\nINSERT INTO \"Movie_Elements\" (element_type,movie_title,composer_id,duration) VALUES ('Sound Design','Inception',6,140),('Sound Design','Inception',1,150),('Music Score','Schindler\u2019s List',1,150),('Music Score','Pan\u2019s Labyrinth',7,120),('Music Score','The Departed',4,130);\n",
      "question": "Display the films where John Williams composed the sound design or music score. Show them in one table.",
      "gold_queries": [
        "SELECT Movie_Elements.movie_title \r\nFROM Movie_Elements JOIN Composer ON Movie_Elements.composer_id = Composer.id\r\nWHERE (Movie_Elements.element_type = \"Sound Design\" OR Movie_Elements.element_type = \"Music Score\") AND Composer.creator = \"John Williams\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Provide a single table of films with John Williams listed as composer for either sound design or music score.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT T1.title \nFROM Film AS T1 \nJOIN Movie_Elements AS T2 ON T1.title = T2.movie_title \nJOIN Composer AS T3 ON T2.composer_id = T3.id \nWHERE T3.creator = 'John Williams'"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_1tab_ref_accommodation2/attachment_1tab_ref_accommodation2.sqlite",
      "db_dump": "CREATE TABLE Accomodations(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    type TEXT \n);\nCREATE TABLE Guests(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    emailAddress TEXT UNIQUE\n);\nCREATE TABLE Prices(\n    accommodationId INTEGER,\n    price_per_night REAL,\n    FOREIGN KEY(accommodationId) REFERENCES Accomodations(id)\n);\nCREATE TABLE Reservations(\n    reservationId INTEGER PRIMARY KEY AUTOINCREMENT,\n    guestId INTEGER,\n    accommodationId INTEGER,\n    checkInDate DATE,\n    checkOutDate DATE,\n    totalCost REAL,\n    FOREIGN KEY(guestId) REFERENCES Guests(id),\n    FOREIGN KEY(accommodationId) REFERENCES Accomodations(id)\n);\n\nINSERT INTO \"Accomodations\" (id,name,type) VALUES (1,'Mountain Chalet','Chalet'),(2,'Lakeside Cabin','Cabin'),(3,'River View Lodge','Chalet'),(4,'Forest Hut','Cabin'),(5,'Beach Bungalow','Chalet');\nINSERT INTO \"Guests\" (id,firstName,lastName,emailAddress) VALUES (1,'John','Doe','john.doe@example.com'),(2,'Jane','Smith','jane.smith@example.com'),(3,'Michael','Brown','michael.brown@example.com'),(4,'Emily','White','emily.white@example.com'),(5,'David','Black','david.black@example.com');\nINSERT INTO \"Prices\" (accommodationId,price_per_night) VALUES (1,200.0),(1,300.0),(2,200.0),(2,300.0),(3,200.0);\nINSERT INTO \"Reservations\" (reservationId,guestId,accommodationId,checkInDate,checkOutDate,totalCost) VALUES (1,1,1,'2022-10-01','2022-10-07',1200.0),(2,2,1,'2022-10-14','2022-10-21',1800.0),(3,3,2,'2022-10-01','2022-10-07',1600.0),(4,4,2,'2022-10-14','2022-10-21',2000.0),(5,5,3,'2022-10-01','2022-10-07',900.0);\n",
      "question": "Which chalets are 300.0 per night and which cabins are the same price per night? Show them in one table.",
      "gold_queries": [
        "SELECT Accomodations.name \r\nFROM Accomodations JOIN Prices ON Accomodations.id = Prices.accommodationId\r\nWHERE Accomodations.type = \"Chalet\" AND Prices.price_per_night = 300.0\nUNION\nSELECT Accomodations.name \r\nFROM Accomodations JOIN Prices ON Accomodations.id = Prices.accommodationId\r\nWHERE Accomodations.type = \"Cabin\" AND Prices.price_per_night = 300.0"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Generate a combined table showing chalets and cabins priced at 300.0 per night.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.name, T1.type \nFROM Accomodations AS T1 \nJOIN Prices AS T2 \nON T1.id = T2.accommodationId \nWHERE T2.price_per_night = 300.0"
          ]
        },
        {
          "interpretation": "List distinct chalets with a price of 300.0 per night and a list of distinct cabins with the same price.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT a.name \nFROM Accomodations a \nJOIN Prices p ON a.id = p.accommodationId \nWHERE a.type = 'Chalet' AND p.price_per_night = 300.0",
            "SELECT DISTINCT a.name \nFROM Accomodations a \nJOIN Prices p ON a.id = p.accommodationId \nWHERE a.type = 'Cabin' AND p.price_per_night = 300.0"
          ]
        },
        {
          "interpretation": "List distinct chalets with a price of 300.0 per night and a list of distinct cabins with the same price.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT a.name \nFROM Accomodations a \nJOIN Prices p ON a.id = p.accommodationId \nWHERE a.type = 'Chalet' AND p.price_per_night = 300.0",
            "SELECT DISTINCT a.name \nFROM Accomodations a \nJOIN Prices p ON a.id = p.accommodationId \nWHERE a.type = 'Cabin' AND p.price_per_night = 300.0"
          ]
        },
        {
          "interpretation": "Present a unified table of chalets and cabins with a nightly price of 300.0.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.name, A.type, P.price_per_night \nFROM Accomodations A \nJOIN Prices P ON A.id = P.accommodationId \nWHERE P.price_per_night = 300.0"
          ]
        },
        {
          "interpretation": "Return a table containing two columns: one for chalets with a price of 300.0 per night and another for cabins with the same price.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT \n    (SELECT a.name FROM Accomodations a JOIN Prices p ON a.id = p.accommodationId WHERE a.type = 'Chalet' AND p.price_per_night = 300.0) AS Chalets,\n    (SELECT a.name FROM Accomodations a JOIN Prices p ON a.id = p.accommodationId WHERE a.type = 'Cabin' AND p.price_per_night = 300.0) AS Cabins"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "f1_score": 0.33333333333333337,
        "num_queries": 7,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_1tab_ref_accommodation2/attachment_1tab_ref_accommodation2.sqlite",
      "db_dump": "CREATE TABLE Accomodations(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    type TEXT \n);\nCREATE TABLE Guests(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    emailAddress TEXT UNIQUE\n);\nCREATE TABLE Prices(\n    accommodationId INTEGER,\n    price_per_night REAL,\n    FOREIGN KEY(accommodationId) REFERENCES Accomodations(id)\n);\nCREATE TABLE Reservations(\n    reservationId INTEGER PRIMARY KEY AUTOINCREMENT,\n    guestId INTEGER,\n    accommodationId INTEGER,\n    checkInDate DATE,\n    checkOutDate DATE,\n    totalCost REAL,\n    FOREIGN KEY(guestId) REFERENCES Guests(id),\n    FOREIGN KEY(accommodationId) REFERENCES Accomodations(id)\n);\n\nINSERT INTO \"Accomodations\" (id,name,type) VALUES (1,'Mountain Chalet','Chalet'),(2,'Lakeside Cabin','Cabin'),(3,'River View Lodge','Chalet'),(4,'Forest Hut','Cabin'),(5,'Beach Bungalow','Chalet');\nINSERT INTO \"Guests\" (id,firstName,lastName,emailAddress) VALUES (1,'John','Doe','john.doe@example.com'),(2,'Jane','Smith','jane.smith@example.com'),(3,'Michael','Brown','michael.brown@example.com'),(4,'Emily','White','emily.white@example.com'),(5,'David','Black','david.black@example.com');\nINSERT INTO \"Prices\" (accommodationId,price_per_night) VALUES (1,200.0),(1,300.0),(2,200.0),(2,300.0),(3,200.0);\nINSERT INTO \"Reservations\" (reservationId,guestId,accommodationId,checkInDate,checkOutDate,totalCost) VALUES (1,1,1,'2022-10-01','2022-10-07',1200.0),(2,2,1,'2022-10-14','2022-10-21',1800.0),(3,3,2,'2022-10-01','2022-10-07',1600.0),(4,4,2,'2022-10-14','2022-10-21',2000.0),(5,5,3,'2022-10-01','2022-10-07',900.0);\n",
      "question": "Show chalets and cabins that are 300.0 per night. Show them in one table.",
      "gold_queries": [
        "SELECT Accomodations.name \r\nFROM Accomodations JOIN Prices ON Accomodations.id = Prices.accommodationId\r\nWHERE Accomodations.type = \"Chalet\" AND Prices.price_per_night = 300.0\nUNION\nSELECT Accomodations.name \r\nFROM Accomodations JOIN Prices ON Accomodations.id = Prices.accommodationId\r\nWHERE Accomodations.type = \"Cabin\" AND Prices.price_per_night = 300.0",
        "SELECT Accomodations.name \r\nFROM Accomodations WHERE Accomodations.type = \"Chalet\"\nUNION\nSELECT Accomodations.name \r\nFROM Accomodations JOIN Prices ON Accomodations.id = Prices.accommodationId\r\nWHERE Accomodations.type = \"Cabin\" AND Prices.price_per_night = 300.0"
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [],
      "num_unique_execution_results": 0,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0,
        "f1_score": 0,
        "num_queries": 0,
        "num_unique_queries": 0,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_1tab_ref_accommodation2/attachment_1tab_ref_accommodation2.sqlite",
      "db_dump": "CREATE TABLE Accomodations(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    type TEXT \n);\nCREATE TABLE Guests(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    emailAddress TEXT UNIQUE\n);\nCREATE TABLE Prices(\n    accommodationId INTEGER,\n    price_per_night REAL,\n    FOREIGN KEY(accommodationId) REFERENCES Accomodations(id)\n);\nCREATE TABLE Reservations(\n    reservationId INTEGER PRIMARY KEY AUTOINCREMENT,\n    guestId INTEGER,\n    accommodationId INTEGER,\n    checkInDate DATE,\n    checkOutDate DATE,\n    totalCost REAL,\n    FOREIGN KEY(guestId) REFERENCES Guests(id),\n    FOREIGN KEY(accommodationId) REFERENCES Accomodations(id)\n);\n\nINSERT INTO \"Accomodations\" (id,name,type) VALUES (1,'Mountain Chalet','Chalet'),(2,'Lakeside Cabin','Cabin'),(3,'River View Lodge','Chalet'),(4,'Forest Hut','Cabin'),(5,'Beach Bungalow','Chalet');\nINSERT INTO \"Guests\" (id,firstName,lastName,emailAddress) VALUES (1,'John','Doe','john.doe@example.com'),(2,'Jane','Smith','jane.smith@example.com'),(3,'Michael','Brown','michael.brown@example.com'),(4,'Emily','White','emily.white@example.com'),(5,'David','Black','david.black@example.com');\nINSERT INTO \"Prices\" (accommodationId,price_per_night) VALUES (1,200.0),(1,300.0),(2,200.0),(2,300.0),(3,200.0);\nINSERT INTO \"Reservations\" (reservationId,guestId,accommodationId,checkInDate,checkOutDate,totalCost) VALUES (1,1,1,'2022-10-01','2022-10-07',1200.0),(2,2,1,'2022-10-14','2022-10-21',1800.0),(3,3,2,'2022-10-01','2022-10-07',1600.0),(4,4,2,'2022-10-14','2022-10-21',2000.0),(5,5,3,'2022-10-01','2022-10-07',900.0);\n",
      "question": "Provide a list of all chalets and also provide a list of cabins that are 300.0 per night. Show them in one table.",
      "gold_queries": [
        "SELECT Accomodations.name \r\nFROM Accomodations WHERE Accomodations.type = \"Chalet\"\nUNION\nSELECT Accomodations.name \r\nFROM Accomodations JOIN Prices ON Accomodations.id = Prices.accommodationId\r\nWHERE Accomodations.type = \"Cabin\" AND Prices.price_per_night = 300.0"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Display all chalets and filter cabins from the Prices table whose price_per_night is 300.0. Output the combined data in a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT a.name, a.type, p.price_per_night\nFROM Accomodations a\nJOIN Prices p ON a.id = p.accommodationId\nWHERE a.type = 'Chalet'\nUNION\nSELECT a.name, a.type, p.price_per_night\nFROM Accomodations a\nJOIN Prices p ON a.id = p.accommodationId\nWHERE a.type = 'Cabin' AND p.price_per_night = 300.0"
          ]
        },
        {
          "interpretation": "Retrieve all chalets from the Accomodations table and all cabins with a price_per_night of 300.0 from the Prices table. Combine the results into a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, type FROM Accomodations WHERE type = 'Chalet' UNION SELECT a.name, a.type FROM Accomodations a JOIN Prices p ON a.id = p.accommodationId WHERE a.type = 'Cabin' AND p.price_per_night = 300.0"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Filmmaking/attachment_2tab_ref_genre/attachment_2tab_ref_genre.sqlite",
      "db_dump": "CREATE TABLE \"Action_Films\" (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    releaseYear INTEGER,\n    genre TEXT,\n    runtime INTEGER,\n    language TEXT,\n    film_festival_id INTEGER,\n    FOREIGN KEY(film_festival_id) REFERENCES Festivals(id)\n);\nCREATE TABLE Actors (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    dateOfBirth DATE,\n    gender CHAR(1),\n    ethnicity TEXT\n);\nCREATE TABLE Blockbusters (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    releaseYear INTEGER,\n    director TEXT,\n    budget REAL,\n    boxOffice REAL,\n    film_festival_id INTEGER,\n    FOREIGN KEY(film_festival_id) REFERENCES Festivals(id)\n);\nCREATE TABLE Directors (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    birthDate DATE,\n    nationality TEXT\n);\nCREATE TABLE Festivals (\n    id INTEGER PRIMARY KEY,\n    name TEXT UNIQUE\n);\nCREATE TABLE Indies (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    releaseYear INTEGER,\n    director TEXT,\n    budget REAL,\n    gross REAL,\n    film_festival_id INTEGER,\n    FOREIGN KEY(film_festival_id) REFERENCES Festivals(id)\n);\nCREATE TABLE Roles (\n    actor_id INTEGER,\n    film_id INTEGER,\n    characterName TEXT,\n    FOREIGN KEY(actor_id) REFERENCES Actors(id),\n    FOREIGN KEY(film_id) REFERENCES \"Action_Films\"(id)\n);\n\nINSERT INTO \"Action_Films\" (id,title,releaseYear,genre,runtime,language,film_festival_id) VALUES (1,'Inception',2010,'Action/Science Fiction',148,'English',1),(2,'The Dark Knight',2008,'Action/Crime',152,'English',2);\nINSERT INTO \"Actors\" (id,name,dateOfBirth,gender,ethnicity) VALUES (1,'Leonardo DiCaprio','1974-11-11','Male','Italian/German/Irish'),(2,'Jennifer Lawrence','1990-08-15','Female','England');\nINSERT INTO \"Blockbusters\" (id,title,releaseYear,director,budget,boxOffice,film_festival_id) VALUES (1,'Avatar',2009,'James Cameron',237.0,2747.0,1),(2,'Titanic',1997,'James Cameron',200.0,2202.0,2);\nINSERT INTO \"Directors\" (id,name,birthDate,nationality) VALUES (1,'Quentin Tarantino','1963-03-27','American'),(2,'Christopher Nolan','1970-07-30','English');\nINSERT INTO \"Festivals\" (id,name) VALUES (1,'Sundance Film Festival'),(2,'Cannes Film Festival');\nINSERT INTO \"Indies\" (id,title,releaseYear,director,budget,gross,film_festival_id) VALUES (1,'Little Miss Sunshine',2006,'Jonathan Dayton',8.0,60.0,1),(2,'Juno',2007,'Jason Reitman',6.0,231.0,2);\nINSERT INTO \"Roles\" (actor_id,film_id,characterName) VALUES (1,1,'Dom Cobb'),(2,1,'Rachel McDougall'),(1,2,'Howard St John'),(2,2,'Harvey Dent');\n",
      "question": "Show all the blockbuster films and only those indie films which played at Sundance film festival. Show them in one table.",
      "gold_queries": [
        "SELECT Blockbusters.title\r\nFROM Festivals JOIN Blockbusters ON Festivals.id = Blockbusters.film_festival_id\r\nUNION\r\nSELECT Indies.title\r\nFROM Festivals JOIN Indies ON Festivals.id = Indies.film_festival_id\r\nWHERE Festivals.name = \"Sundance Film Festival\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Show all films in the Blockbusters table and all films in the Indies table, filtering Indies by film_festival_id.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title, releaseYear, director, budget, boxOffice FROM Blockbusters\nUNION\nSELECT title, releaseYear, director, budget, gross FROM Indies WHERE film_festival_id = 1"
          ]
        },
        {
          "interpretation": "Get a combined list of all Blockbusters films and Indies films from the Sundance Film Festival.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title FROM Blockbusters WHERE film_festival_id = 1 UNION SELECT title FROM Indies WHERE film_festival_id = 1"
          ]
        },
        {
          "interpretation": "Concatenate the results of the two queries into a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title FROM Action_Films UNION SELECT title FROM Blockbusters"
          ]
        },
        {
          "interpretation": "Retrieve all rows from the Indies table where film_festival_id is 1.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Indies WHERE film_festival_id = 1"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Filmmaking/attachment_2tab_ref_genre/attachment_2tab_ref_genre.sqlite",
      "db_dump": "CREATE TABLE \"Action_Films\" (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    releaseYear INTEGER,\n    genre TEXT,\n    runtime INTEGER,\n    language TEXT,\n    film_festival_id INTEGER,\n    FOREIGN KEY(film_festival_id) REFERENCES Festivals(id)\n);\nCREATE TABLE Actors (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    dateOfBirth DATE,\n    gender CHAR(1),\n    ethnicity TEXT\n);\nCREATE TABLE Blockbusters (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    releaseYear INTEGER,\n    director TEXT,\n    budget REAL,\n    boxOffice REAL,\n    film_festival_id INTEGER,\n    FOREIGN KEY(film_festival_id) REFERENCES Festivals(id)\n);\nCREATE TABLE Directors (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    birthDate DATE,\n    nationality TEXT\n);\nCREATE TABLE Festivals (\n    id INTEGER PRIMARY KEY,\n    name TEXT UNIQUE\n);\nCREATE TABLE Indies (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    releaseYear INTEGER,\n    director TEXT,\n    budget REAL,\n    gross REAL,\n    film_festival_id INTEGER,\n    FOREIGN KEY(film_festival_id) REFERENCES Festivals(id)\n);\nCREATE TABLE Roles (\n    actor_id INTEGER,\n    film_id INTEGER,\n    characterName TEXT,\n    FOREIGN KEY(actor_id) REFERENCES Actors(id),\n    FOREIGN KEY(film_id) REFERENCES \"Action_Films\"(id)\n);\n\nINSERT INTO \"Action_Films\" (id,title,releaseYear,genre,runtime,language,film_festival_id) VALUES (1,'Inception',2010,'Action/Science Fiction',148,'English',1),(2,'The Dark Knight',2008,'Action/Crime',152,'English',2);\nINSERT INTO \"Actors\" (id,name,dateOfBirth,gender,ethnicity) VALUES (1,'Leonardo DiCaprio','1974-11-11','Male','Italian/German/Irish'),(2,'Jennifer Lawrence','1990-08-15','Female','England');\nINSERT INTO \"Blockbusters\" (id,title,releaseYear,director,budget,boxOffice,film_festival_id) VALUES (1,'Avatar',2009,'James Cameron',237.0,2747.0,1),(2,'Titanic',1997,'James Cameron',200.0,2202.0,2);\nINSERT INTO \"Directors\" (id,name,birthDate,nationality) VALUES (1,'Quentin Tarantino','1963-03-27','American'),(2,'Christopher Nolan','1970-07-30','English');\nINSERT INTO \"Festivals\" (id,name) VALUES (1,'Sundance Film Festival'),(2,'Cannes Film Festival');\nINSERT INTO \"Indies\" (id,title,releaseYear,director,budget,gross,film_festival_id) VALUES (1,'Little Miss Sunshine',2006,'Jonathan Dayton',8.0,60.0,1),(2,'Juno',2007,'Jason Reitman',6.0,231.0,2);\nINSERT INTO \"Roles\" (actor_id,film_id,characterName) VALUES (1,1,'Dom Cobb'),(2,1,'Rachel McDougall'),(1,2,'Howard St John'),(2,2,'Harvey Dent');\n",
      "question": "Show blockbusters and indie films where either played at Sundance film festival. Show them in one table.",
      "gold_queries": [
        "SELECT Blockbusters.title\r\nFROM Festivals JOIN Blockbusters ON Festivals.id = Blockbusters.film_festival_id\r\nWHERE Festivals.name = \"Sundance Film Festival\"\r\nUNION\r\nSELECT Indies.title\r\nFROM Festivals JOIN Indies ON Festivals.id = Indies.film_festival_id\r\nWHERE Festivals.name = \"Sundance Film Festival\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Retrieve all films from the \"Blockbusters\" table that have a \"film_festival_id\" of 1.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title, releaseYear, director, budget, boxOffice FROM Blockbusters WHERE film_festival_id = 1"
          ]
        },
        {
          "interpretation": "Retrieve all films from the \"Blockbusters\" and \"Indies\" tables whose \"film_festival_id\" is 1.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT title FROM Blockbusters WHERE film_festival_id = 1 UNION SELECT title FROM Indies WHERE film_festival_id = 1"
          ]
        },
        {
          "interpretation": "Combine the results from the previous queries into a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title, releaseYear, director, budget, boxOffice FROM Blockbusters UNION SELECT title, releaseYear, director, budget, gross AS boxOffice FROM Indies"
          ]
        },
        {
          "interpretation": "Retrieve all films from the \"Indies\" table that have a \"film_festival_id\" of 1.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title FROM Indies WHERE film_festival_id = 1"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Filmmaking/attachment_2tab_val_film_production_role/attachment_2tab_val_film_production_role.sqlite",
      "db_dump": "CREATE TABLE Actors(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Age INT,\n    Country TEXT,\n    Number_Of_Roles INT);\nCREATE TABLE Cinematographers(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Age INT,\n    Country TEXT,\n    Number_Of_Films_Cinematographed INT);\nCREATE TABLE Directors(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Age INT,\n    Country TEXT,\n    Number_Of_Movies_Directed INT);\nCREATE TABLE Editors(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Age INT,\n    Country TEXT,\n    Number_Of_Projects_Completed INT);\nCREATE TABLE Producers(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Age INT,\n    Country TEXT,\n    Number_Of_Productions INT);\nCREATE TABLE Screenwriters(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Age INT,\n    Country TEXT,\n    Number_Of_Projects_Completed INT);\n\nINSERT INTO \"Actors\" (ID,Name,Age,Country,Number_Of_Roles) VALUES (1,'Leonardo DiCaprio',45,'USA',15),(2,'Keanu Reeves',55,'Canada',20),(3,'Denzel Washington',65,'USA',10),(4,'Will Smith',50,'USA',7),(5,'Tom Cruise',55,'USA',15),(6,'Mark Wahlberg',48,'USA',25),(7,'Scarlett Johansson',35,'USA',18),(8,'Natalie Portman',40,'Israel',12),(9,'Idris Elba',48,'UK',15),(10,'Viola Davis',55,'USA',20);\nINSERT INTO \"Cinematographers\" (ID,Name,Age,Country,Number_Of_Films_Cinematographed) VALUES (1,'Roger Deakins',75,'USA',15),(2,'Janusz Kaminski',65,'Poland',20),(3,'Wally Pfister',60,'USA',10),(4,'Eric Alan Edwards',55,'USA',7),(5,'Phedon Papamichael',50,'Greece',15),(6,'Mihai Malaimare Jr.',45,'Romania',25),(7,'Roberto Schaefer',55,'Switzerland',18),(8,'Rodrigo Prieto',50,'Mexico',12),(9,'Simon Duggan',48,'Australia',15),(10,'Stuart Dryburgh',60,'New Zealand',20);\nINSERT INTO \"Directors\" (ID,Name,Age,Country,Number_Of_Movies_Directed) VALUES (1,'Tom Hanks',65,'USA',15),(2,'Steven Spielberg',75,'USA',20),(3,'Christopher Nolan',50,'UK',10),(4,'Quentin Tarantino',60,'USA',7),(5,'Martin Scorsese',80,'USA',15),(6,'Clint Eastwood',90,'USA',25),(7,'Ang Lee',65,'Taiwan',18),(8,'Ava DuVernay',50,'USA',12),(9,'Guillermo del Toro',55,'Mexico',15),(10,'Kathryn Bigelow',70,'USA',20);\nINSERT INTO \"Editors\" (ID,Name,Age,Country,Number_Of_Projects_Completed) VALUES (1,'Thelma Schoonmaker',75,'USA',15),(2,'Lee Smith',65,'England',20),(3,'Paul Hirsch',68,'USA',10),(4,'Anne V. Coates',90,'England',7),(5,'James Cameron',65,'Canada',15),(6,'Conrad Buff IV',55,'USA',25),(7,'Stephen Mirrione',50,'USA',18),(8,'Tim Squyres',48,'USA',12),(9,'Jeffrey Ford AICE',55,'USA',15),(10,'Tom Cross',40,'USA',20);\nINSERT INTO \"Producers\" (ID,Name,Age,Country,Number_Of_Productions) VALUES (1,'Harvey Weinstein',65,'USA',15),(2,'Jack Nicholson',75,'USA',20),(3,'Barbra Streisand',75,'USA',10),(4,'George Clooney',55,'USA',7),(5,'Steve Martin',75,'USA',15),(6,'Oprah Winfrey',65,'USA',25),(7,'Robert De Niro',75,'USA',18),(8,'Julia Roberts',50,'USA',12),(9,'Morgan Freeman',65,'USA',15),(10,'Drew Barrymore',45,'USA',20);\nINSERT INTO \"Screenwriters\" (ID,Name,Age,Country,Number_Of_Projects_Completed) VALUES (1,'John Doe',30,'USA',15),(2,'Jane Smith',28,'UK',20),(3,'Alice Johnson',35,'Canada',10),(4,'Bob Brown',40,'Australia',7),(5,'Charlie Green',32,'Germany',15),(6,'David White',29,'France',25),(7,'Emma Black',31,'Italy',18),(8,'Fred Grey',37,'Spain',12),(9,'Grace Blue',27,'Japan',15),(10,'Hannah Red',33,'India',20);\n",
      "question": "Show all screenwriters and editors with 15 completed projects. Show them in one table.",
      "gold_queries": [
        "SELECT Screenwriters.name\r\nFROM Screenwriters\r\nWHERE Screenwriters.Number_Of_Projects_Completed = 15\r\nUNION\r\nSELECT Editors.name\r\nFROM Editors\r\nWHERE Editors.Number_Of_Projects_Completed = 15",
        "SELECT Screenwriters.name\r\nFROM Screenwriters\r\nUNION\r\nSELECT Editors.name\r\nFROM Editors\r\nWHERE Editors.Number_Of_Projects_Completed = 15"
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Output the names and details of screenwriters and editors with a count of 15 completed projects as a unified table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Age, Country, Number_Of_Projects_Completed FROM Screenwriters WHERE Number_Of_Projects_Completed = 15\nUNION\nSELECT Name, Age, Country, Number_Of_Projects_Completed FROM Editors WHERE Number_Of_Projects_Completed = 15"
          ]
        },
        {
          "interpretation": "Display a table containing all screenwriters and editors with a 'Number_Of_Projects_Completed' of 15.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name FROM Screenwriters WHERE Number_Of_Projects_Completed = 15 UNION SELECT Name FROM Editors WHERE Number_Of_Projects_Completed = 15"
          ]
        },
        {
          "interpretation": "List screenwriters and editors whose number of completed projects equals 15, consolidating them into a single result table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Number_Of_Projects_Completed FROM Screenwriters WHERE Number_Of_Projects_Completed = 15\nUNION\nSELECT Name, Number_Of_Projects_Completed FROM Editors WHERE Number_Of_Projects_Completed = 15"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.3333333333333333,
        "f1_score": 0.4,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Filmmaking/attachment_2tab_val_film_production_role/attachment_2tab_val_film_production_role.sqlite",
      "db_dump": "CREATE TABLE Actors(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Age INT,\n    Country TEXT,\n    Number_Of_Roles INT);\nCREATE TABLE Cinematographers(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Age INT,\n    Country TEXT,\n    Number_Of_Films_Cinematographed INT);\nCREATE TABLE Directors(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Age INT,\n    Country TEXT,\n    Number_Of_Movies_Directed INT);\nCREATE TABLE Editors(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Age INT,\n    Country TEXT,\n    Number_Of_Projects_Completed INT);\nCREATE TABLE Producers(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Age INT,\n    Country TEXT,\n    Number_Of_Productions INT);\nCREATE TABLE Screenwriters(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Age INT,\n    Country TEXT,\n    Number_Of_Projects_Completed INT);\n\nINSERT INTO \"Actors\" (ID,Name,Age,Country,Number_Of_Roles) VALUES (1,'Leonardo DiCaprio',45,'USA',15),(2,'Keanu Reeves',55,'Canada',20),(3,'Denzel Washington',65,'USA',10),(4,'Will Smith',50,'USA',7),(5,'Tom Cruise',55,'USA',15),(6,'Mark Wahlberg',48,'USA',25),(7,'Scarlett Johansson',35,'USA',18),(8,'Natalie Portman',40,'Israel',12),(9,'Idris Elba',48,'UK',15),(10,'Viola Davis',55,'USA',20);\nINSERT INTO \"Cinematographers\" (ID,Name,Age,Country,Number_Of_Films_Cinematographed) VALUES (1,'Roger Deakins',75,'USA',15),(2,'Janusz Kaminski',65,'Poland',20),(3,'Wally Pfister',60,'USA',10),(4,'Eric Alan Edwards',55,'USA',7),(5,'Phedon Papamichael',50,'Greece',15),(6,'Mihai Malaimare Jr.',45,'Romania',25),(7,'Roberto Schaefer',55,'Switzerland',18),(8,'Rodrigo Prieto',50,'Mexico',12),(9,'Simon Duggan',48,'Australia',15),(10,'Stuart Dryburgh',60,'New Zealand',20);\nINSERT INTO \"Directors\" (ID,Name,Age,Country,Number_Of_Movies_Directed) VALUES (1,'Tom Hanks',65,'USA',15),(2,'Steven Spielberg',75,'USA',20),(3,'Christopher Nolan',50,'UK',10),(4,'Quentin Tarantino',60,'USA',7),(5,'Martin Scorsese',80,'USA',15),(6,'Clint Eastwood',90,'USA',25),(7,'Ang Lee',65,'Taiwan',18),(8,'Ava DuVernay',50,'USA',12),(9,'Guillermo del Toro',55,'Mexico',15),(10,'Kathryn Bigelow',70,'USA',20);\nINSERT INTO \"Editors\" (ID,Name,Age,Country,Number_Of_Projects_Completed) VALUES (1,'Thelma Schoonmaker',75,'USA',15),(2,'Lee Smith',65,'England',20),(3,'Paul Hirsch',68,'USA',10),(4,'Anne V. Coates',90,'England',7),(5,'James Cameron',65,'Canada',15),(6,'Conrad Buff IV',55,'USA',25),(7,'Stephen Mirrione',50,'USA',18),(8,'Tim Squyres',48,'USA',12),(9,'Jeffrey Ford AICE',55,'USA',15),(10,'Tom Cross',40,'USA',20);\nINSERT INTO \"Producers\" (ID,Name,Age,Country,Number_Of_Productions) VALUES (1,'Harvey Weinstein',65,'USA',15),(2,'Jack Nicholson',75,'USA',20),(3,'Barbra Streisand',75,'USA',10),(4,'George Clooney',55,'USA',7),(5,'Steve Martin',75,'USA',15),(6,'Oprah Winfrey',65,'USA',25),(7,'Robert De Niro',75,'USA',18),(8,'Julia Roberts',50,'USA',12),(9,'Morgan Freeman',65,'USA',15),(10,'Drew Barrymore',45,'USA',20);\nINSERT INTO \"Screenwriters\" (ID,Name,Age,Country,Number_Of_Projects_Completed) VALUES (1,'John Doe',30,'USA',15),(2,'Jane Smith',28,'UK',20),(3,'Alice Johnson',35,'Canada',10),(4,'Bob Brown',40,'Australia',7),(5,'Charlie Green',32,'Germany',15),(6,'David White',29,'France',25),(7,'Emma Black',31,'Italy',18),(8,'Fred Grey',37,'Spain',12),(9,'Grace Blue',27,'Japan',15),(10,'Hannah Red',33,'India',20);\n",
      "question": "Provide a list of all screenwriters combined with a list of editors with 15 completed projects. Show them in one table.",
      "gold_queries": [
        "SELECT Screenwriters.name\r\nFROM Screenwriters\r\nUNION\r\nSELECT Editors.name\r\nFROM Editors\r\nWHERE Editors.Number_Of_Projects_Completed = 15"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Create a table showing all screenwriters in one column and a separate column for all editors who have completed 15 projects.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Screenwriters.Name AS Screenwriter, Editors.Name AS Editor\nFROM Screenwriters\nCROSS JOIN Editors\nWHERE Editors.Number_Of_Projects_Completed = 15"
          ]
        },
        {
          "interpretation": "Return two separate tables, one containing all screenwriters and one containing all editors who have completed 15 projects.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Age, Country, Number_Of_Projects_Completed FROM Screenwriters WHERE Number_Of_Projects_Completed = 15",
            "SELECT Name, Age, Country, Number_Of_Projects_Completed FROM Editors WHERE Number_Of_Projects_Completed = 15"
          ]
        },
        {
          "interpretation": "Return two separate tables, one containing all screenwriters and one containing all editors who have completed 15 projects.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Age, Country, Number_Of_Projects_Completed FROM Screenwriters WHERE Number_Of_Projects_Completed = 15",
            "SELECT Name, Age, Country, Number_Of_Projects_Completed FROM Editors WHERE Number_Of_Projects_Completed = 15"
          ]
        },
        {
          "interpretation": "List all screenwriters and editors who have completed 15 projects, combining both lists into a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name FROM Screenwriters WHERE Number_Of_Projects_Completed = 15\nUNION\nSELECT Name FROM Editors WHERE Number_Of_Projects_Completed = 15"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 6,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Filmmaking/attachment_2tab_val_film_production_role/attachment_2tab_val_film_production_role.sqlite",
      "db_dump": "CREATE TABLE Actors(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Age INT,\n    Country TEXT,\n    Number_Of_Roles INT);\nCREATE TABLE Cinematographers(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Age INT,\n    Country TEXT,\n    Number_Of_Films_Cinematographed INT);\nCREATE TABLE Directors(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Age INT,\n    Country TEXT,\n    Number_Of_Movies_Directed INT);\nCREATE TABLE Editors(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Age INT,\n    Country TEXT,\n    Number_Of_Projects_Completed INT);\nCREATE TABLE Producers(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Age INT,\n    Country TEXT,\n    Number_Of_Productions INT);\nCREATE TABLE Screenwriters(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Age INT,\n    Country TEXT,\n    Number_Of_Projects_Completed INT);\n\nINSERT INTO \"Actors\" (ID,Name,Age,Country,Number_Of_Roles) VALUES (1,'Leonardo DiCaprio',45,'USA',15),(2,'Keanu Reeves',55,'Canada',20),(3,'Denzel Washington',65,'USA',10),(4,'Will Smith',50,'USA',7),(5,'Tom Cruise',55,'USA',15),(6,'Mark Wahlberg',48,'USA',25),(7,'Scarlett Johansson',35,'USA',18),(8,'Natalie Portman',40,'Israel',12),(9,'Idris Elba',48,'UK',15),(10,'Viola Davis',55,'USA',20);\nINSERT INTO \"Cinematographers\" (ID,Name,Age,Country,Number_Of_Films_Cinematographed) VALUES (1,'Roger Deakins',75,'USA',15),(2,'Janusz Kaminski',65,'Poland',20),(3,'Wally Pfister',60,'USA',10),(4,'Eric Alan Edwards',55,'USA',7),(5,'Phedon Papamichael',50,'Greece',15),(6,'Mihai Malaimare Jr.',45,'Romania',25),(7,'Roberto Schaefer',55,'Switzerland',18),(8,'Rodrigo Prieto',50,'Mexico',12),(9,'Simon Duggan',48,'Australia',15),(10,'Stuart Dryburgh',60,'New Zealand',20);\nINSERT INTO \"Directors\" (ID,Name,Age,Country,Number_Of_Movies_Directed) VALUES (1,'Tom Hanks',65,'USA',15),(2,'Steven Spielberg',75,'USA',20),(3,'Christopher Nolan',50,'UK',10),(4,'Quentin Tarantino',60,'USA',7),(5,'Martin Scorsese',80,'USA',15),(6,'Clint Eastwood',90,'USA',25),(7,'Ang Lee',65,'Taiwan',18),(8,'Ava DuVernay',50,'USA',12),(9,'Guillermo del Toro',55,'Mexico',15),(10,'Kathryn Bigelow',70,'USA',20);\nINSERT INTO \"Editors\" (ID,Name,Age,Country,Number_Of_Projects_Completed) VALUES (1,'Thelma Schoonmaker',75,'USA',15),(2,'Lee Smith',65,'England',20),(3,'Paul Hirsch',68,'USA',10),(4,'Anne V. Coates',90,'England',7),(5,'James Cameron',65,'Canada',15),(6,'Conrad Buff IV',55,'USA',25),(7,'Stephen Mirrione',50,'USA',18),(8,'Tim Squyres',48,'USA',12),(9,'Jeffrey Ford AICE',55,'USA',15),(10,'Tom Cross',40,'USA',20);\nINSERT INTO \"Producers\" (ID,Name,Age,Country,Number_Of_Productions) VALUES (1,'Harvey Weinstein',65,'USA',15),(2,'Jack Nicholson',75,'USA',20),(3,'Barbra Streisand',75,'USA',10),(4,'George Clooney',55,'USA',7),(5,'Steve Martin',75,'USA',15),(6,'Oprah Winfrey',65,'USA',25),(7,'Robert De Niro',75,'USA',18),(8,'Julia Roberts',50,'USA',12),(9,'Morgan Freeman',65,'USA',15),(10,'Drew Barrymore',45,'USA',20);\nINSERT INTO \"Screenwriters\" (ID,Name,Age,Country,Number_Of_Projects_Completed) VALUES (1,'John Doe',30,'USA',15),(2,'Jane Smith',28,'UK',20),(3,'Alice Johnson',35,'Canada',10),(4,'Bob Brown',40,'Australia',7),(5,'Charlie Green',32,'Germany',15),(6,'David White',29,'France',25),(7,'Emma Black',31,'Italy',18),(8,'Fred Grey',37,'Spain',12),(9,'Grace Blue',27,'Japan',15),(10,'Hannah Red',33,'India',20);\n",
      "question": "Which screenwriters have 15 completed projects and which editors have the same number of completed projects? Show them in one table.",
      "gold_queries": [
        "SELECT Screenwriters.name\r\nFROM Screenwriters\r\nWHERE Screenwriters.Number_Of_Projects_Completed = 15\r\nUNION\r\nSELECT Editors.name\r\nFROM Editors\r\nWHERE Editors.Number_Of_Projects_Completed = 15"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "For screenwriters and editors, find those with 15 completed projects and list them in a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Age, Country, Number_Of_Projects_Completed FROM Screenwriters WHERE Number_Of_Projects_Completed = 15\nUNION\nSELECT Name, Age, Country, Number_Of_Projects_Completed FROM Editors WHERE Number_Of_Projects_Completed = 15"
          ]
        },
        {
          "interpretation": "Retrieve a list of screenwriters with 15 completed projects, and separately, a list of editors with 15 completed projects, then consolidate them into one table.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Name FROM Screenwriters WHERE Number_Of_Projects_Completed = 15\nUNION\nSELECT Name FROM Editors WHERE Number_Of_Projects_Completed = 15"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Filmmaking/attachment_2tab_ref_genre/attachment_2tab_ref_genre.sqlite",
      "db_dump": "CREATE TABLE \"Action_Films\" (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    releaseYear INTEGER,\n    genre TEXT,\n    runtime INTEGER,\n    language TEXT,\n    film_festival_id INTEGER,\n    FOREIGN KEY(film_festival_id) REFERENCES Festivals(id)\n);\nCREATE TABLE Actors (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    dateOfBirth DATE,\n    gender CHAR(1),\n    ethnicity TEXT\n);\nCREATE TABLE Blockbusters (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    releaseYear INTEGER,\n    director TEXT,\n    budget REAL,\n    boxOffice REAL,\n    film_festival_id INTEGER,\n    FOREIGN KEY(film_festival_id) REFERENCES Festivals(id)\n);\nCREATE TABLE Directors (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    birthDate DATE,\n    nationality TEXT\n);\nCREATE TABLE Festivals (\n    id INTEGER PRIMARY KEY,\n    name TEXT UNIQUE\n);\nCREATE TABLE Indies (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    releaseYear INTEGER,\n    director TEXT,\n    budget REAL,\n    gross REAL,\n    film_festival_id INTEGER,\n    FOREIGN KEY(film_festival_id) REFERENCES Festivals(id)\n);\nCREATE TABLE Roles (\n    actor_id INTEGER,\n    film_id INTEGER,\n    characterName TEXT,\n    FOREIGN KEY(actor_id) REFERENCES Actors(id),\n    FOREIGN KEY(film_id) REFERENCES \"Action_Films\"(id)\n);\n\nINSERT INTO \"Action_Films\" (id,title,releaseYear,genre,runtime,language,film_festival_id) VALUES (1,'Inception',2010,'Action/Science Fiction',148,'English',1),(2,'The Dark Knight',2008,'Action/Crime',152,'English',2);\nINSERT INTO \"Actors\" (id,name,dateOfBirth,gender,ethnicity) VALUES (1,'Leonardo DiCaprio','1974-11-11','Male','Italian/German/Irish'),(2,'Jennifer Lawrence','1990-08-15','Female','England');\nINSERT INTO \"Blockbusters\" (id,title,releaseYear,director,budget,boxOffice,film_festival_id) VALUES (1,'Avatar',2009,'James Cameron',237.0,2747.0,1),(2,'Titanic',1997,'James Cameron',200.0,2202.0,2);\nINSERT INTO \"Directors\" (id,name,birthDate,nationality) VALUES (1,'Quentin Tarantino','1963-03-27','American'),(2,'Christopher Nolan','1970-07-30','English');\nINSERT INTO \"Festivals\" (id,name) VALUES (1,'Sundance Film Festival'),(2,'Cannes Film Festival');\nINSERT INTO \"Indies\" (id,title,releaseYear,director,budget,gross,film_festival_id) VALUES (1,'Little Miss Sunshine',2006,'Jonathan Dayton',8.0,60.0,1),(2,'Juno',2007,'Jason Reitman',6.0,231.0,2);\nINSERT INTO \"Roles\" (actor_id,film_id,characterName) VALUES (1,1,'Dom Cobb'),(2,1,'Rachel McDougall'),(1,2,'Howard St John'),(2,2,'Harvey Dent');\n",
      "question": "List blockbusters and indie films which played at Sundance film festival. Show them in one table.",
      "gold_queries": [
        "SELECT Blockbusters.title\r\nFROM Festivals JOIN Blockbusters ON Festivals.id = Blockbusters.film_festival_id\r\nWHERE Festivals.name = \"Sundance Film Festival\"\r\nUNION\r\nSELECT Indies.title\r\nFROM Festivals JOIN Indies ON Festivals.id = Indies.film_festival_id\r\nWHERE Festivals.name = \"Sundance Film Festival\"",
        "SELECT Blockbusters.title\r\nFROM Festivals JOIN Blockbusters ON Festivals.id = Blockbusters.film_festival_id\r\nUNION\r\nSELECT Indies.title\r\nFROM Festivals JOIN Indies ON Festivals.id = Indies.film_festival_id\r\nWHERE Festivals.name = \"Sundance Film Festival\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [],
      "num_unique_execution_results": 0,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0,
        "f1_score": 0,
        "num_queries": 0,
        "num_unique_queries": 0,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_2tab_val_trades_jobs/attachment_2tab_val_trades_jobs.sqlite",
      "db_dump": "CREATE TABLE Accountants(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    company_name TEXT,\n    education TEXT,\n    experience_years INT);\nCREATE TABLE Construction_Workers(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    company_owner TEXT,\n    work_experience INT,\n    salary REAL);\nCREATE TABLE Electricians(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    company_owner TEXT,\n    certifications TEXT,\n    hourly_rate REAL);\nCREATE TABLE HR_Specialists(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    company_name TEXT,\n    industry TEXT,\n    years_in_industry INT);\nCREATE TABLE Marketing_Managers(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    company_name TEXT,\n    marketing_strategy TEXT,\n    campaign_successes TEXT);\nCREATE TABLE Software_Engineers(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    company_name TEXT,\n    programming_language TEXT,\n    years_of_experience INT);\n\nINSERT INTO \"Accountants\" (id,name,company_name,education,experience_years) VALUES (1,'Jennifer Lawrence','FinanceGroup','BBA',6),(2,'Scarlett Johansson','AccountingFirm','MAcc',7);\nINSERT INTO \"Construction_Workers\" (id,name,company_owner,work_experience,salary) VALUES (1,'John Doe','Derek Brown',7,30000.0),(2,'Jane Smith','Michael Johnson',5,28000.0),(3,'Robert White','Emily Davis',6,29000.0);\nINSERT INTO \"Electricians\" (id,name,company_owner,certifications,hourly_rate) VALUES (1,'Tom Anderson','Derek Brown','A, B, C',25.0),(2,'Erica Thompson','Samantha Taylor','X, Y, Z',27.0);\nINSERT INTO \"HR_Specialists\" (id,name,company_name,industry,years_in_industry) VALUES (1,'Chris Hemsworth','HumanResources','HR',8),(2,'Mark Ruffalo','RecruitmentAgencies','IT',10);\nINSERT INTO \"Marketing_Managers\" (id,name,company_name,marketing_strategy,campaign_successes) VALUES (1,'Ryan Reynolds','AdvertisingAgency','Content Marketing','Product Launch A'),(2,'Ben Affleck','BrandConsultancy','SEO','Website Traffic Increase');\nINSERT INTO \"Software_Engineers\" (id,name,company_name,programming_language,years_of_experience) VALUES (1,'Chris Evans','TechCorp','Python',4),(2,'Olivia Wilde','SoftwareInc','JavaScript',3),(3,'Gal Gadot','CodingCo','C++',5);\n",
      "question": "Show all employees of Derek Brown from the construction workers and electricians. Show them in one table.",
      "gold_queries": [
        "SELECT Construction_Workers.name\r\nFROM Construction_Workers\r\nWHERE Construction_Workers.company_owner = \"Derek Brown\"\r\nUNION\r\nSELECT Electricians.name\r\nFROM Electricians\r\nWHERE Electricians.company_owner = \"Derek Brown\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Query the Construction_Workers and Electricians tables simultaneously to pull only the employees of 'Derek Brown', displaying all relevant columns in a combined result.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Construction_Workers WHERE company_owner = 'Derek Brown'\nUNION ALL\nSELECT * FROM Electricians WHERE company_owner = 'Derek Brown'"
          ]
        },
        {
          "interpretation": "Find all \"employees\" listed in the Construction_Workers and Electricians tables associated with the company_owner 'Derek Brown' and present them in a single, unified table.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT name FROM Construction_Workers WHERE company_owner = 'Derek Brown'\nUNION\nSELECT name FROM Electricians WHERE company_owner = 'Derek Brown'"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_2tab_val_trades_jobs/attachment_2tab_val_trades_jobs.sqlite",
      "db_dump": "CREATE TABLE Accountants(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    company_name TEXT,\n    education TEXT,\n    experience_years INT);\nCREATE TABLE Construction_Workers(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    company_owner TEXT,\n    work_experience INT,\n    salary REAL);\nCREATE TABLE Electricians(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    company_owner TEXT,\n    certifications TEXT,\n    hourly_rate REAL);\nCREATE TABLE HR_Specialists(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    company_name TEXT,\n    industry TEXT,\n    years_in_industry INT);\nCREATE TABLE Marketing_Managers(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    company_name TEXT,\n    marketing_strategy TEXT,\n    campaign_successes TEXT);\nCREATE TABLE Software_Engineers(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    company_name TEXT,\n    programming_language TEXT,\n    years_of_experience INT);\n\nINSERT INTO \"Accountants\" (id,name,company_name,education,experience_years) VALUES (1,'Jennifer Lawrence','FinanceGroup','BBA',6),(2,'Scarlett Johansson','AccountingFirm','MAcc',7);\nINSERT INTO \"Construction_Workers\" (id,name,company_owner,work_experience,salary) VALUES (1,'John Doe','Derek Brown',7,30000.0),(2,'Jane Smith','Michael Johnson',5,28000.0),(3,'Robert White','Emily Davis',6,29000.0);\nINSERT INTO \"Electricians\" (id,name,company_owner,certifications,hourly_rate) VALUES (1,'Tom Anderson','Derek Brown','A, B, C',25.0),(2,'Erica Thompson','Samantha Taylor','X, Y, Z',27.0);\nINSERT INTO \"HR_Specialists\" (id,name,company_name,industry,years_in_industry) VALUES (1,'Chris Hemsworth','HumanResources','HR',8),(2,'Mark Ruffalo','RecruitmentAgencies','IT',10);\nINSERT INTO \"Marketing_Managers\" (id,name,company_name,marketing_strategy,campaign_successes) VALUES (1,'Ryan Reynolds','AdvertisingAgency','Content Marketing','Product Launch A'),(2,'Ben Affleck','BrandConsultancy','SEO','Website Traffic Increase');\nINSERT INTO \"Software_Engineers\" (id,name,company_name,programming_language,years_of_experience) VALUES (1,'Chris Evans','TechCorp','Python',4),(2,'Olivia Wilde','SoftwareInc','JavaScript',3),(3,'Gal Gadot','CodingCo','C++',5);\n",
      "question": "Show me all the construction workers listed and also just those electricians who work for Derek Brown. Show them in one table.",
      "gold_queries": [
        "SELECT Construction_Workers.name\r\nFROM Construction_Workers\r\nUNION\r\nSELECT Electricians.name\r\nFROM Electricians\r\nWHERE Electricians.company_owner = \"Derek Brown\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Retrieve all rows from Construction_Workers table and all rows from Electricians table where company_owner is 'Derek Brown', and combine them into a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, company_owner, work_experience, salary FROM Construction_Workers\nUNION ALL\nSELECT name, company_owner, certifications AS work_experience, hourly_rate AS salary FROM Electricians WHERE company_owner = 'Derek Brown'"
          ]
        },
        {
          "interpretation": "Present a table containing all information from both Construction_Workers and Electricians tables, filtered to include only Electricians employed by 'Derek Brown'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Construction_Workers\nUNION\nSELECT * FROM Electricians WHERE company_owner = 'Derek Brown'"
          ]
        },
        {
          "interpretation": "List all Construction_Workers and, separately, all Electricians who work for 'Derek Brown' in a single query result.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name FROM Construction_Workers WHERE company_owner = 'Derek Brown'\nUNION\nSELECT name FROM Electricians WHERE company_owner = 'Derek Brown'"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_2tab_val_trades_jobs/attachment_2tab_val_trades_jobs.sqlite",
      "db_dump": "CREATE TABLE Accountants(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    company_name TEXT,\n    education TEXT,\n    experience_years INT);\nCREATE TABLE Construction_Workers(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    company_owner TEXT,\n    work_experience INT,\n    salary REAL);\nCREATE TABLE Electricians(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    company_owner TEXT,\n    certifications TEXT,\n    hourly_rate REAL);\nCREATE TABLE HR_Specialists(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    company_name TEXT,\n    industry TEXT,\n    years_in_industry INT);\nCREATE TABLE Marketing_Managers(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    company_name TEXT,\n    marketing_strategy TEXT,\n    campaign_successes TEXT);\nCREATE TABLE Software_Engineers(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    company_name TEXT,\n    programming_language TEXT,\n    years_of_experience INT);\n\nINSERT INTO \"Accountants\" (id,name,company_name,education,experience_years) VALUES (1,'Jennifer Lawrence','FinanceGroup','BBA',6),(2,'Scarlett Johansson','AccountingFirm','MAcc',7);\nINSERT INTO \"Construction_Workers\" (id,name,company_owner,work_experience,salary) VALUES (1,'John Doe','Derek Brown',7,30000.0),(2,'Jane Smith','Michael Johnson',5,28000.0),(3,'Robert White','Emily Davis',6,29000.0);\nINSERT INTO \"Electricians\" (id,name,company_owner,certifications,hourly_rate) VALUES (1,'Tom Anderson','Derek Brown','A, B, C',25.0),(2,'Erica Thompson','Samantha Taylor','X, Y, Z',27.0);\nINSERT INTO \"HR_Specialists\" (id,name,company_name,industry,years_in_industry) VALUES (1,'Chris Hemsworth','HumanResources','HR',8),(2,'Mark Ruffalo','RecruitmentAgencies','IT',10);\nINSERT INTO \"Marketing_Managers\" (id,name,company_name,marketing_strategy,campaign_successes) VALUES (1,'Ryan Reynolds','AdvertisingAgency','Content Marketing','Product Launch A'),(2,'Ben Affleck','BrandConsultancy','SEO','Website Traffic Increase');\nINSERT INTO \"Software_Engineers\" (id,name,company_name,programming_language,years_of_experience) VALUES (1,'Chris Evans','TechCorp','Python',4),(2,'Olivia Wilde','SoftwareInc','JavaScript',3),(3,'Gal Gadot','CodingCo','C++',5);\n",
      "question": "Provide all construction workers and electricians who work for Derek Brown. Show them in one table.",
      "gold_queries": [
        "SELECT Construction_Workers.name\r\nFROM Construction_Workers\r\nWHERE Construction_Workers.company_owner = \"Derek Brown\"\r\nUNION\r\nSELECT Electricians.name\r\nFROM Electricians\r\nWHERE Electricians.company_owner = \"Derek Brown\"",
        "SELECT Construction_Workers.name\r\nFROM Construction_Workers\r\nUNION\r\nSELECT Electricians.name\r\nFROM Electricians\r\nWHERE Electricians.company_owner = \"Derek Brown\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Select all rows from Construction_Workers and Electricians where \"company_owner\" equals 'Derek Brown' and present the results in a single, unified table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Construction_Workers WHERE company_owner = 'Derek Brown'\nUNION\nSELECT * FROM Electricians WHERE company_owner = 'Derek Brown'"
          ]
        },
        {
          "interpretation": "Retrieve all Construction_Workers and Electricians whose \"company_owner\" is 'Derek Brown', displaying the results in a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, company_owner, work_experience AS experience, salary, NULL AS certifications, NULL AS hourly_rate FROM Construction_Workers WHERE company_owner = 'Derek Brown'\nUNION\nSELECT name, company_owner, NULL AS work_experience, NULL AS salary, certifications, hourly_rate FROM Electricians WHERE company_owner = 'Derek Brown'"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Journalism/attachment_1tab_ref_events/attachment_1tab_ref_events.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    ArticleID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Content TEXT,\n    AuthorID INTEGER,\n    FOREIGN KEY(AuthorID) REFERENCES Persons(PersonID));\nCREATE TABLE \"Events\"(\n    EventID INTEGER PRIMARY KEY AUTOINCREMENT, \"EventName\" TEXT,\n    EventType TEXT,\n    Date DATE,\n    Location TEXT,\n    PersonID INTEGER,\n    FOREIGN KEY(PersonID) REFERENCES Persons(PersonID));\nCREATE TABLE MediaScrums(\n    MediaScrumID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Description TEXT,\n    StartTime TIME,\n    EndTime TIME,\n    PersonID INTEGER,\n    FOREIGN KEY(PersonID) REFERENCES Persons(PersonID));\nCREATE TABLE Persons(\n    PersonID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FullName TEXT UNIQUE);\n\nINSERT INTO \"Articles\" (ArticleID,Title,Content,AuthorID) VALUES (1,'Article 1','Content of article 1...',1),(2,'Article 2','Content of article 2...',2),(3,'Article 3','Content of article 3...',3),(4,'Article 4','Content of article 4...',4),(5,'Article 5','Content of article 5...',5);\nINSERT INTO \"Events\" (EventID,EventName,EventType,Date,Location,PersonID) VALUES (1,'New Year Press','Press Conference','2022-01-01','New York',1),(2,'LA Launch','Press Conference','2022-02-01','Los Angeles',2),(3,'Spring Scrum','Media Scrum','2022-03-01','Chicago',1),(4,'Dallas Debate','Media Scrum','2022-04-01','Dallas',3),(5,'Capitol Interview','Interview','2022-05-01','Washington',4);\nINSERT INTO \"MediaScrums\" (MediaScrumID,Description,StartTime,EndTime,PersonID) VALUES (1,'Desc 1','10:00','11:00',1),(2,'Desc 2','12:00','13:00',3),(3,'Desc 3','14:00','15:00',5),(4,'Desc 4','16:00','17:00',2),(5,'Desc 5','18:00','19:00',4);\nINSERT INTO \"Persons\" (PersonID,FullName) VALUES (1,'John Doe'),(2,'Jane Smith'),(3,'Emily Johnson'),(4,'Michael Brown'),(5,'Cathy Williams');\n",
      "question": "Show press conferences and media scrums attended by John Doe. Show them in one table.",
      "gold_queries": [
        "SELECT Events.EventName \r\nFROM Events JOIN Persons ON Events.PersonID = Persons.PersonID\r\nWHERE (Events.EventType = \"Press Conference\" OR Events.EventType = \"Media Scrum\") AND Persons.FullName = \"John Doe\"",
        "SELECT Events.EventName \r\nFROM Events JOIN Persons ON Events.PersonID = Persons.PersonID\r\nWHERE Events.EventType = \"Press Conference\" OR Events.EventType = \"Media Scrum\" AND Persons.FullName = \"John Doe\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List all Press Conference events and Media Scrums where John Doe participated, merged into a single result set.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.EventName, E.EventType, E.Date, E.Location\nFROM Events E\nJOIN Persons P ON E.PersonID = P.PersonID\nWHERE P.FullName = 'John Doe' AND E.EventType = 'Press Conference'\nUNION\nSELECT MS.Description, 'Media Scrum' AS EventType, '' AS Date, '' AS Location\nFROM MediaScrums MS\nJOIN Persons P ON MS.PersonID = P.PersonID\nWHERE P.FullName = 'John Doe'"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Journalism/attachment_1tab_ref_events/attachment_1tab_ref_events.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    ArticleID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Content TEXT,\n    AuthorID INTEGER,\n    FOREIGN KEY(AuthorID) REFERENCES Persons(PersonID));\nCREATE TABLE \"Events\"(\n    EventID INTEGER PRIMARY KEY AUTOINCREMENT, \"EventName\" TEXT,\n    EventType TEXT,\n    Date DATE,\n    Location TEXT,\n    PersonID INTEGER,\n    FOREIGN KEY(PersonID) REFERENCES Persons(PersonID));\nCREATE TABLE MediaScrums(\n    MediaScrumID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Description TEXT,\n    StartTime TIME,\n    EndTime TIME,\n    PersonID INTEGER,\n    FOREIGN KEY(PersonID) REFERENCES Persons(PersonID));\nCREATE TABLE Persons(\n    PersonID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FullName TEXT UNIQUE);\n\nINSERT INTO \"Articles\" (ArticleID,Title,Content,AuthorID) VALUES (1,'Article 1','Content of article 1...',1),(2,'Article 2','Content of article 2...',2),(3,'Article 3','Content of article 3...',3),(4,'Article 4','Content of article 4...',4),(5,'Article 5','Content of article 5...',5);\nINSERT INTO \"Events\" (EventID,EventName,EventType,Date,Location,PersonID) VALUES (1,'New Year Press','Press Conference','2022-01-01','New York',1),(2,'LA Launch','Press Conference','2022-02-01','Los Angeles',2),(3,'Spring Scrum','Media Scrum','2022-03-01','Chicago',1),(4,'Dallas Debate','Media Scrum','2022-04-01','Dallas',3),(5,'Capitol Interview','Interview','2022-05-01','Washington',4);\nINSERT INTO \"MediaScrums\" (MediaScrumID,Description,StartTime,EndTime,PersonID) VALUES (1,'Desc 1','10:00','11:00',1),(2,'Desc 2','12:00','13:00',3),(3,'Desc 3','14:00','15:00',5),(4,'Desc 4','16:00','17:00',2),(5,'Desc 5','18:00','19:00',4);\nINSERT INTO \"Persons\" (PersonID,FullName) VALUES (1,'John Doe'),(2,'Jane Smith'),(3,'Emily Johnson'),(4,'Michael Brown'),(5,'Cathy Williams');\n",
      "question": "List all press conferences and also list media scrums that John Doe attended. Show them in one table.",
      "gold_queries": [
        "SELECT Events.EventName \r\nFROM Events JOIN Persons ON Events.PersonID = Persons.PersonID\r\nWHERE Events.EventType = \"Press Conference\" OR Events.EventType = \"Media Scrum\" AND Persons.FullName = \"John Doe\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Generate a combined table displaying press conferences and media scrums where John Doe was involved.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.EventName, E.EventType, E.Date, E.Location, M.Description, M.StartTime, M.EndTime\nFROM Events E\nJOIN Persons P ON E.PersonID = P.PersonID\nLEFT JOIN MediaScrums M ON P.PersonID = M.PersonID\nWHERE P.FullName = 'John Doe' AND E.EventType = 'Press Conference'\nUNION\nSELECT E.EventName, E.EventType, E.Date, E.Location, M.Description, M.StartTime, M.EndTime\nFROM MediaScrums M\nJOIN Persons P ON M.PersonID = P.PersonID\nLEFT JOIN Events E ON P.PersonID = E.PersonID\nWHERE P.FullName = 'John Doe' AND E.EventType IS NULL"
          ]
        },
        {
          "interpretation": "Identify press conferences and media scrums participated in by John Doe, presenting the data in a unified table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT EventName, EventType, Date, Location\nFROM Events\nWHERE PersonID = (SELECT PersonID FROM Persons WHERE FullName = 'John Doe' AND EventType IN ('Press Conference', 'Media Scrum'))\nUNION\nSELECT Description AS EventName, 'Media Scrum' AS EventType, null AS Date, null AS Location\nFROM MediaScrums\nWHERE PersonID = (SELECT PersonID FROM Persons WHERE FullName = 'John Doe')"
          ]
        },
        {
          "interpretation": "Retrieve all press conferences and John Doe's media scrum attendance, combining the results into a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT e.EventName, e.EventType, e.Date, e.Location, p.FullName\nFROM Events e\nJOIN Persons p ON e.PersonID = p.PersonID\nWHERE e.EventType = 'Press Conference' OR (p.FullName = 'John Doe' AND e.EventID IS NULL)\nUNION\nSELECT ms.Description, 'Media Scrum' AS EventType, '' AS Date, '' AS Location, p.FullName\nFROM MediaScrums ms\nJOIN Persons p ON ms.PersonID = p.PersonID\nWHERE p.FullName = 'John Doe'"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Journalism/attachment_1tab_ref_events/attachment_1tab_ref_events.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    ArticleID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Content TEXT,\n    AuthorID INTEGER,\n    FOREIGN KEY(AuthorID) REFERENCES Persons(PersonID));\nCREATE TABLE \"Events\"(\n    EventID INTEGER PRIMARY KEY AUTOINCREMENT, \"EventName\" TEXT,\n    EventType TEXT,\n    Date DATE,\n    Location TEXT,\n    PersonID INTEGER,\n    FOREIGN KEY(PersonID) REFERENCES Persons(PersonID));\nCREATE TABLE MediaScrums(\n    MediaScrumID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Description TEXT,\n    StartTime TIME,\n    EndTime TIME,\n    PersonID INTEGER,\n    FOREIGN KEY(PersonID) REFERENCES Persons(PersonID));\nCREATE TABLE Persons(\n    PersonID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FullName TEXT UNIQUE);\n\nINSERT INTO \"Articles\" (ArticleID,Title,Content,AuthorID) VALUES (1,'Article 1','Content of article 1...',1),(2,'Article 2','Content of article 2...',2),(3,'Article 3','Content of article 3...',3),(4,'Article 4','Content of article 4...',4),(5,'Article 5','Content of article 5...',5);\nINSERT INTO \"Events\" (EventID,EventName,EventType,Date,Location,PersonID) VALUES (1,'New Year Press','Press Conference','2022-01-01','New York',1),(2,'LA Launch','Press Conference','2022-02-01','Los Angeles',2),(3,'Spring Scrum','Media Scrum','2022-03-01','Chicago',1),(4,'Dallas Debate','Media Scrum','2022-04-01','Dallas',3),(5,'Capitol Interview','Interview','2022-05-01','Washington',4);\nINSERT INTO \"MediaScrums\" (MediaScrumID,Description,StartTime,EndTime,PersonID) VALUES (1,'Desc 1','10:00','11:00',1),(2,'Desc 2','12:00','13:00',3),(3,'Desc 3','14:00','15:00',5),(4,'Desc 4','16:00','17:00',2),(5,'Desc 5','18:00','19:00',4);\nINSERT INTO \"Persons\" (PersonID,FullName) VALUES (1,'John Doe'),(2,'Jane Smith'),(3,'Emily Johnson'),(4,'Michael Brown'),(5,'Cathy Williams');\n",
      "question": "What press conferences did John Doe attend and what media scrums did he also attend? Show them in one table.",
      "gold_queries": [
        "SELECT Events.EventName \r\nFROM Events JOIN Persons ON Events.PersonID = Persons.PersonID\r\nWHERE (Events.EventType = \"Press Conference\" OR Events.EventType = \"Media Scrum\") AND Persons.FullName = \"John Doe\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List all press conferences and media scrums involving John Doe, combined in a single table, and present them in a unified format.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.EventName AS EventName, E.EventType AS EventType, E.Date AS Date, E.Location AS Location\nFROM Events E\nJOIN Persons P ON E.PersonID = P.PersonID\nWHERE P.FullName = 'John Doe' AND E.EventType IN ('Press Conference', 'Media Scrum')\nUNION\nSELECT M.Description AS EventName, 'Media Scrum' AS EventType, NULL AS Date, NULL AS Location\nFROM MediaScrums M\nJOIN Persons P ON M.PersonID = P.PersonID\nWHERE P.FullName = 'John Doe'"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Journalism/attachment_2tab_val_news_industry_economics/attachment_2tab_val_news_industry_economics.sqlite",
      "db_dump": "CREATE TABLE \"Advertising\"(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT, Magazine TEXT,\n    Advertising_Revenue REAL ,\n    Subscribers INT,\n    Country TEXT, `Type` TEXT);\nCREATE TABLE Articles(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Content TEXT,\n    AuthorID INTEGER,\n    PublishDate Date,\n    FOREIGN KEY(AuthorID) REFERENCES Authors(ID));\nCREATE TABLE Authors(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Email TEXT,\n    Birthdate Date,\n    Nationality Text);\nCREATE TABLE Issues(\n    IssueNumber INT PRIMARY KEY,\n    MagazineID INTEGER,\n    ReleaseDate Date,\n    FOREIGN KEY(MagazineID) REFERENCES Magazines(ID));\nCREATE TABLE Magazines(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Category TEXT,\n    EditorInChief TEXT,\n    PublishingHouse TEXT);\nCREATE TABLE \"Subscriptions\"(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT, Magazine TEXT,\n    Subscription_Fees REAL ,\n    NumberOfSubscribers INT,\n    \"Type\" TEXT);\n\nINSERT INTO \"Advertising\" (ID,Magazine,Advertising_Revenue,Subscribers,Country,Type) VALUES (1,'Good Housekeeping',1000000.0,30000,'USA','Social Media Ads'),(2,'Time',800000.0,25000,'UK','Flyers');\nINSERT INTO \"Articles\" (ID,Title,Content,AuthorID,PublishDate) VALUES (1,'The Rise of AI','...',1,'2021-01-01'),(2,'Climate Change Effects','...',2,'2021-02-02');\nINSERT INTO \"Authors\" (ID,Name,Email,Birthdate,Nationality) VALUES (1,'John Doe','john@example.com','1990-01-01','USA'),(2,'Jane Smith','jane@example.com','1985-02-02','Canada');\nINSERT INTO \"Issues\" (IssueNumber,MagazineID,ReleaseDate) VALUES (1,1,'2021-01-01'),(2,1,'2021-02-01');\nINSERT INTO \"Magazines\" (ID,Name,Category,EditorInChief,PublishingHouse) VALUES (1,'Good Housekeeping','Lifestyle','Alice Johnson','Hearst Communications'),(2,'Time','News & Current Affairs','Bob Williams','Time Inc.');\nINSERT INTO \"Subscriptions\" (ID,Magazine,Subscription_Fees,NumberOfSubscribers,Type) VALUES (1,'Good Housekeeping',9.99,27000,'Monthly'),(2,'National Geographic',6.99,20000,'Bi-monthly');\n",
      "question": "Show the advertising and subscription types where either are listed for Good Housekeeping magazine. Show them in one table.",
      "gold_queries": [
        "SELECT Advertising.Type\r\nFROM Advertising\r\nWHERE Advertising.Magazine = \"Good Housekeeping\"\r\nUNION\r\nSELECT Subscriptions.Type\r\nFROM Subscriptions\r\nWHERE Subscriptions.Magazine = \"Good Housekeeping\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Retrieve advertising types and subscription types associated with 'Good Housekeeping' magazine, combining them into a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Type AS Advertising_Type, NULL AS Subscription_Type FROM Advertising WHERE Magazine = 'Good Housekeeping'\nUNION\nSELECT NULL AS Advertising_Type, Type AS Subscription_Type FROM Subscriptions WHERE Magazine = 'Good Housekeeping'"
          ]
        },
        {
          "interpretation": "List unique advertising types and subscription types belonging to the 'Good Housekeeping' magazine.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT DISTINCT Type FROM Advertising WHERE Magazine = 'Good Housekeeping'\nUNION\nSELECT DISTINCT Type FROM Subscriptions WHERE Magazine = 'Good Housekeeping'"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Journalism/attachment_2tab_val_news_industry_economics/attachment_2tab_val_news_industry_economics.sqlite",
      "db_dump": "CREATE TABLE \"Advertising\"(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT, Magazine TEXT,\n    Advertising_Revenue REAL ,\n    Subscribers INT,\n    Country TEXT, `Type` TEXT);\nCREATE TABLE Articles(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Content TEXT,\n    AuthorID INTEGER,\n    PublishDate Date,\n    FOREIGN KEY(AuthorID) REFERENCES Authors(ID));\nCREATE TABLE Authors(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Email TEXT,\n    Birthdate Date,\n    Nationality Text);\nCREATE TABLE Issues(\n    IssueNumber INT PRIMARY KEY,\n    MagazineID INTEGER,\n    ReleaseDate Date,\n    FOREIGN KEY(MagazineID) REFERENCES Magazines(ID));\nCREATE TABLE Magazines(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Category TEXT,\n    EditorInChief TEXT,\n    PublishingHouse TEXT);\nCREATE TABLE \"Subscriptions\"(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT, Magazine TEXT,\n    Subscription_Fees REAL ,\n    NumberOfSubscribers INT,\n    \"Type\" TEXT);\n\nINSERT INTO \"Advertising\" (ID,Magazine,Advertising_Revenue,Subscribers,Country,Type) VALUES (1,'Good Housekeeping',1000000.0,30000,'USA','Social Media Ads'),(2,'Time',800000.0,25000,'UK','Flyers');\nINSERT INTO \"Articles\" (ID,Title,Content,AuthorID,PublishDate) VALUES (1,'The Rise of AI','...',1,'2021-01-01'),(2,'Climate Change Effects','...',2,'2021-02-02');\nINSERT INTO \"Authors\" (ID,Name,Email,Birthdate,Nationality) VALUES (1,'John Doe','john@example.com','1990-01-01','USA'),(2,'Jane Smith','jane@example.com','1985-02-02','Canada');\nINSERT INTO \"Issues\" (IssueNumber,MagazineID,ReleaseDate) VALUES (1,1,'2021-01-01'),(2,1,'2021-02-01');\nINSERT INTO \"Magazines\" (ID,Name,Category,EditorInChief,PublishingHouse) VALUES (1,'Good Housekeeping','Lifestyle','Alice Johnson','Hearst Communications'),(2,'Time','News & Current Affairs','Bob Williams','Time Inc.');\nINSERT INTO \"Subscriptions\" (ID,Magazine,Subscription_Fees,NumberOfSubscribers,Type) VALUES (1,'Good Housekeeping',9.99,27000,'Monthly'),(2,'National Geographic',6.99,20000,'Bi-monthly');\n",
      "question": "Show all the advertising types and also show the subscriptions types but just for Good Housekeeping magazine. Show them in one table.",
      "gold_queries": [
        "SELECT Advertising.Type\r\nFROM Advertising\r\nUNION\r\nSELECT Subscriptions.Type\r\nFROM Subscriptions\r\nWHERE Subscriptions.Magazine = \"Good Housekeeping\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [],
      "num_unique_execution_results": 0,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0,
        "f1_score": 0,
        "num_queries": 0,
        "num_unique_queries": 0,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Journalism/attachment_2tab_val_news_industry_economics/attachment_2tab_val_news_industry_economics.sqlite",
      "db_dump": "CREATE TABLE \"Advertising\"(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT, Magazine TEXT,\n    Advertising_Revenue REAL ,\n    Subscribers INT,\n    Country TEXT, `Type` TEXT);\nCREATE TABLE Articles(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Content TEXT,\n    AuthorID INTEGER,\n    PublishDate Date,\n    FOREIGN KEY(AuthorID) REFERENCES Authors(ID));\nCREATE TABLE Authors(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Email TEXT,\n    Birthdate Date,\n    Nationality Text);\nCREATE TABLE Issues(\n    IssueNumber INT PRIMARY KEY,\n    MagazineID INTEGER,\n    ReleaseDate Date,\n    FOREIGN KEY(MagazineID) REFERENCES Magazines(ID));\nCREATE TABLE Magazines(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Category TEXT,\n    EditorInChief TEXT,\n    PublishingHouse TEXT);\nCREATE TABLE \"Subscriptions\"(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT, Magazine TEXT,\n    Subscription_Fees REAL ,\n    NumberOfSubscribers INT,\n    \"Type\" TEXT);\n\nINSERT INTO \"Advertising\" (ID,Magazine,Advertising_Revenue,Subscribers,Country,Type) VALUES (1,'Good Housekeeping',1000000.0,30000,'USA','Social Media Ads'),(2,'Time',800000.0,25000,'UK','Flyers');\nINSERT INTO \"Articles\" (ID,Title,Content,AuthorID,PublishDate) VALUES (1,'The Rise of AI','...',1,'2021-01-01'),(2,'Climate Change Effects','...',2,'2021-02-02');\nINSERT INTO \"Authors\" (ID,Name,Email,Birthdate,Nationality) VALUES (1,'John Doe','john@example.com','1990-01-01','USA'),(2,'Jane Smith','jane@example.com','1985-02-02','Canada');\nINSERT INTO \"Issues\" (IssueNumber,MagazineID,ReleaseDate) VALUES (1,1,'2021-01-01'),(2,1,'2021-02-01');\nINSERT INTO \"Magazines\" (ID,Name,Category,EditorInChief,PublishingHouse) VALUES (1,'Good Housekeeping','Lifestyle','Alice Johnson','Hearst Communications'),(2,'Time','News & Current Affairs','Bob Williams','Time Inc.');\nINSERT INTO \"Subscriptions\" (ID,Magazine,Subscription_Fees,NumberOfSubscribers,Type) VALUES (1,'Good Housekeeping',9.99,27000,'Monthly'),(2,'National Geographic',6.99,20000,'Bi-monthly');\n",
      "question": "Show all types of advertising and subscriptions for Good Housekeeping magazine. Show them in one table.",
      "gold_queries": [
        "SELECT Advertising.Type\r\nFROM Advertising\r\nWHERE Advertising.Magazine = \"Good Housekeeping\"\r\nUNION\r\nSELECT Subscriptions.Type\r\nFROM Subscriptions\r\nWHERE Subscriptions.Magazine = \"Good Housekeeping\"",
        "SELECT Advertising.Type\r\nFROM Advertising\r\nUNION\r\nSELECT Subscriptions.Type\r\nFROM Subscriptions\r\nWHERE Subscriptions.Magazine = \"Good Housekeeping\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Display a single table containing advertisement types and subscription types for the \"Good Housekeeping\" magazine, without merging data from different columns.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Type FROM Advertising WHERE Magazine = 'Good Housekeeping' UNION SELECT Type FROM Subscriptions WHERE Magazine = 'Good Housekeeping'"
          ]
        },
        {
          "interpretation": "Present a table listing all advertising revenue types and subscription fee types for \"Good Housekeeping\", counting unique entries.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(DISTINCT Type) AS Advertising_Types, (SELECT COUNT(DISTINCT Type) FROM Subscriptions WHERE Magazine = 'Good Housekeeping') AS Subscription_Types\nFROM Advertising\nWHERE Magazine = 'Good Housekeeping'"
          ]
        },
        {
          "interpretation": "Combine data from the \"Advertising\" and \"Subscriptions\" tables based on the shared \"Magazine\" column, filtering for records where the \"Magazine\" is \"Good Housekeeping\".",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Advertising.Magazine, Advertising.Advertising_Revenue, Advertising.Subscribers, Advertising.Country, Advertising.Type, Subscriptions.Subscription_Fees, Subscriptions.NumberOfSubscribers, Subscriptions.Type\nFROM Advertising\nJOIN Subscriptions ON Advertising.Magazine = Subscriptions.Magazine\nWHERE Advertising.Magazine = 'Good Housekeeping'"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.3333333333333333,
        "f1_score": 0.4,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_1tab_val_lab_positions/attachment_1tab_val_lab_positions.sqlite",
      "db_dump": "CREATE TABLE Company(\n    id INTEGER PRIMARY KEY,\n    name TEXT);\nCREATE TABLE Department(\n    id INTEGER PRIMARY KEY,\n    companyId INTEGER,\n    departmentName TEXT,\n    FOREIGN KEY (companyId) REFERENCES Company(id));\nCREATE TABLE Employee(\n    id INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    dateOfBirth DATE,\n    email TEXT,\n    phoneNumber VARCHAR(15),\n    hireDate DATE,\n    jobTitle TEXT,\n    departmentId INTEGER,\n    gender TEXT,\n    FOREIGN KEY (departmentId) REFERENCES Department(id));\nCREATE TABLE LabPosition(\n    id INTEGER PRIMARY KEY,\n    positionTypeId INTEGER,\n    labPosition TEXT,\n    gender TEXT,\n    minimumEducation TEXT,\n    experienceInYears INTEGER,\n    salaryRange TEXT,\n    FOREIGN KEY (positionTypeId) REFERENCES PositionType(id));\nCREATE TABLE PositionType(\n    id INTEGER PRIMARY KEY,\n    typeName TEXT);\n\nINSERT INTO \"Company\" (id,name) VALUES (1,'TechCorp'),(2,'HealthPlus'),(3,'GreenTech'),(4,'SoftWare'),(5,'MedicalPioneers');\nINSERT INTO \"Department\" (id,companyId,departmentName) VALUES (1,1,'Biotechnology'),(2,2,'Chemistry'),(3,3,'Physics'),(4,4,'Computer Science'),(5,5,'Mathematics');\nINSERT INTO \"Employee\" (id,firstName,lastName,dateOfBirth,email,phoneNumber,hireDate,jobTitle,departmentId,gender) VALUES (1,'John','Smith','1990-01-15','johnsmith@email.com','+1 (234) 567-8910','2021-06-01','Research Scientist',1,'Male'),(2,'Jane','Doe','1988-03-20','janedoe@email.com','+1 (123) 456-7890','2021-07-01','Laboratory Technician',2,'Female'),(3,'Tom','Hanks','1985-09-05','thomhanks@email.com','+1 (345) 678-9012','2021-08-01','Engineer',3,'Male'),(4,'Alice','Williams','1992-11-10','alicewilliams@email.com','+1 (456) 789-0123','2021-09-01','Analyst',4,'Female'),(5,'Chris','Evans','1989-06-25','chrisevans@email.com','+1 (567) 890-1234','2021-10-01','Manager',5,'Male');\nINSERT INTO \"LabPosition\" (id,positionTypeId,labPosition,gender,minimumEducation,experienceInYears,salaryRange) VALUES (1,1,'Research Scientist','Female','PhD',5,'60k - 90k'),(2,1,'Research Scientist','Male','PhD',7,'80k - 110k'),(3,2,'Laboratory Technician','Female','BSc',3,'40k - 60k'),(4,2,'Laboratory Technician','Male','BSc',4,'50k - 70k'),(5,3,'Data Analyst','Non-binary','MS',2,'60k - 80k');\nINSERT INTO \"PositionType\" (id,typeName) VALUES (1,'Full Time'),(2,'Part Time'),(3,'Contractual'),(4,'Internship'),(5,'Volunteering');\n",
      "question": "What is the salary range of female research scientists and laboratory technicians of the same gender? Show them in one table.",
      "gold_queries": [
        "SELECT LabPosition.salaryRange \r\nFROM LabPosition\r\nWHERE (LabPosition.labPosition = \"Research Scientist\" OR LabPosition.labPosition = \"Laboratory Technician\") AND LabPosition.gender = \"Female\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "What is the salary range of female research scientists compared to female laboratory technicians?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT salaryRange \nFROM LabPosition \nWHERE gender = 'Female' AND labPosition = 'Research Scientist' \nUNION \nSELECT salaryRange \nFROM LabPosition \nWHERE gender = 'Female' AND labPosition = 'Laboratory Technician'"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_1tab_val_lab_positions/attachment_1tab_val_lab_positions.sqlite",
      "db_dump": "CREATE TABLE Company(\n    id INTEGER PRIMARY KEY,\n    name TEXT);\nCREATE TABLE Department(\n    id INTEGER PRIMARY KEY,\n    companyId INTEGER,\n    departmentName TEXT,\n    FOREIGN KEY (companyId) REFERENCES Company(id));\nCREATE TABLE Employee(\n    id INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    dateOfBirth DATE,\n    email TEXT,\n    phoneNumber VARCHAR(15),\n    hireDate DATE,\n    jobTitle TEXT,\n    departmentId INTEGER,\n    gender TEXT,\n    FOREIGN KEY (departmentId) REFERENCES Department(id));\nCREATE TABLE LabPosition(\n    id INTEGER PRIMARY KEY,\n    positionTypeId INTEGER,\n    labPosition TEXT,\n    gender TEXT,\n    minimumEducation TEXT,\n    experienceInYears INTEGER,\n    salaryRange TEXT,\n    FOREIGN KEY (positionTypeId) REFERENCES PositionType(id));\nCREATE TABLE PositionType(\n    id INTEGER PRIMARY KEY,\n    typeName TEXT);\n\nINSERT INTO \"Company\" (id,name) VALUES (1,'TechCorp'),(2,'HealthPlus'),(3,'GreenTech'),(4,'SoftWare'),(5,'MedicalPioneers');\nINSERT INTO \"Department\" (id,companyId,departmentName) VALUES (1,1,'Biotechnology'),(2,2,'Chemistry'),(3,3,'Physics'),(4,4,'Computer Science'),(5,5,'Mathematics');\nINSERT INTO \"Employee\" (id,firstName,lastName,dateOfBirth,email,phoneNumber,hireDate,jobTitle,departmentId,gender) VALUES (1,'John','Smith','1990-01-15','johnsmith@email.com','+1 (234) 567-8910','2021-06-01','Research Scientist',1,'Male'),(2,'Jane','Doe','1988-03-20','janedoe@email.com','+1 (123) 456-7890','2021-07-01','Laboratory Technician',2,'Female'),(3,'Tom','Hanks','1985-09-05','thomhanks@email.com','+1 (345) 678-9012','2021-08-01','Engineer',3,'Male'),(4,'Alice','Williams','1992-11-10','alicewilliams@email.com','+1 (456) 789-0123','2021-09-01','Analyst',4,'Female'),(5,'Chris','Evans','1989-06-25','chrisevans@email.com','+1 (567) 890-1234','2021-10-01','Manager',5,'Male');\nINSERT INTO \"LabPosition\" (id,positionTypeId,labPosition,gender,minimumEducation,experienceInYears,salaryRange) VALUES (1,1,'Research Scientist','Female','PhD',5,'60k - 90k'),(2,1,'Research Scientist','Male','PhD',7,'80k - 110k'),(3,2,'Laboratory Technician','Female','BSc',3,'40k - 60k'),(4,2,'Laboratory Technician','Male','BSc',4,'50k - 70k'),(5,3,'Data Analyst','Non-binary','MS',2,'60k - 80k');\nINSERT INTO \"PositionType\" (id,typeName) VALUES (1,'Full Time'),(2,'Part Time'),(3,'Contractual'),(4,'Internship'),(5,'Volunteering');\n",
      "question": "What is the salary range for female laboratory technicians and research scientists? Show them in one table.",
      "gold_queries": [
        "SELECT LabPosition.salaryRange \r\nFROM LabPosition\r\nWHERE (LabPosition.labPosition = \"Research Scientist\" OR LabPosition.labPosition = \"Laboratory Technician\") AND LabPosition.gender = \"Female\"",
        "SELECT LabPosition.salaryRange \r\nFROM LabPosition\r\nWHERE LabPosition.labPosition = \"Research Scientist\" OR LabPosition.labPosition = \"Laboratory Technician\" AND LabPosition.gender = \"Female\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Calculate the salary ranges associated with female laboratory technicians and female research scientists and display the results in a single table.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT salaryRange \nFROM LabPosition \nWHERE (labPosition = 'Laboratory Technician' AND gender = 'Female') \n   OR (labPosition = 'Research Scientist' AND gender = 'Female')"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 1.0,
        "f1_score": 0.6666666666666666,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_1tab_val_lab_positions/attachment_1tab_val_lab_positions.sqlite",
      "db_dump": "CREATE TABLE Company(\n    id INTEGER PRIMARY KEY,\n    name TEXT);\nCREATE TABLE Department(\n    id INTEGER PRIMARY KEY,\n    companyId INTEGER,\n    departmentName TEXT,\n    FOREIGN KEY (companyId) REFERENCES Company(id));\nCREATE TABLE Employee(\n    id INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    dateOfBirth DATE,\n    email TEXT,\n    phoneNumber VARCHAR(15),\n    hireDate DATE,\n    jobTitle TEXT,\n    departmentId INTEGER,\n    gender TEXT,\n    FOREIGN KEY (departmentId) REFERENCES Department(id));\nCREATE TABLE LabPosition(\n    id INTEGER PRIMARY KEY,\n    positionTypeId INTEGER,\n    labPosition TEXT,\n    gender TEXT,\n    minimumEducation TEXT,\n    experienceInYears INTEGER,\n    salaryRange TEXT,\n    FOREIGN KEY (positionTypeId) REFERENCES PositionType(id));\nCREATE TABLE PositionType(\n    id INTEGER PRIMARY KEY,\n    typeName TEXT);\n\nINSERT INTO \"Company\" (id,name) VALUES (1,'TechCorp'),(2,'HealthPlus'),(3,'GreenTech'),(4,'SoftWare'),(5,'MedicalPioneers');\nINSERT INTO \"Department\" (id,companyId,departmentName) VALUES (1,1,'Biotechnology'),(2,2,'Chemistry'),(3,3,'Physics'),(4,4,'Computer Science'),(5,5,'Mathematics');\nINSERT INTO \"Employee\" (id,firstName,lastName,dateOfBirth,email,phoneNumber,hireDate,jobTitle,departmentId,gender) VALUES (1,'John','Smith','1990-01-15','johnsmith@email.com','+1 (234) 567-8910','2021-06-01','Research Scientist',1,'Male'),(2,'Jane','Doe','1988-03-20','janedoe@email.com','+1 (123) 456-7890','2021-07-01','Laboratory Technician',2,'Female'),(3,'Tom','Hanks','1985-09-05','thomhanks@email.com','+1 (345) 678-9012','2021-08-01','Engineer',3,'Male'),(4,'Alice','Williams','1992-11-10','alicewilliams@email.com','+1 (456) 789-0123','2021-09-01','Analyst',4,'Female'),(5,'Chris','Evans','1989-06-25','chrisevans@email.com','+1 (567) 890-1234','2021-10-01','Manager',5,'Male');\nINSERT INTO \"LabPosition\" (id,positionTypeId,labPosition,gender,minimumEducation,experienceInYears,salaryRange) VALUES (1,1,'Research Scientist','Female','PhD',5,'60k - 90k'),(2,1,'Research Scientist','Male','PhD',7,'80k - 110k'),(3,2,'Laboratory Technician','Female','BSc',3,'40k - 60k'),(4,2,'Laboratory Technician','Male','BSc',4,'50k - 70k'),(5,3,'Data Analyst','Non-binary','MS',2,'60k - 80k');\nINSERT INTO \"PositionType\" (id,typeName) VALUES (1,'Full Time'),(2,'Part Time'),(3,'Contractual'),(4,'Internship'),(5,'Volunteering');\n",
      "question": "List the salary range of all research scientists as well as the salary range of female laboratory technicians. Show them in one table.",
      "gold_queries": [
        "SELECT LabPosition.salaryRange \r\nFROM LabPosition\r\nWHERE LabPosition.labPosition = \"Research Scientist\" OR LabPosition.labPosition = \"Laboratory Technician\" AND LabPosition.gender = \"Female\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Generate a table containing two distinct columns: one listing salary ranges for all Research Scientist roles and another displaying salary ranges specifically for female Laboratory Technicians.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT salaryRange AS ResearchScientistSalaryRange FROM LabPosition WHERE labPosition = 'Research Scientist'\nUNION ALL\nSELECT salaryRange AS FemaleLabTechSalaryRange FROM LabPosition WHERE labPosition = 'Laboratory Technician' AND gender = 'Female'"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_1tab_ref_roles/attachment_1tab_ref_roles.sqlite",
      "db_dump": "CREATE TABLE Applicants(\n    ApplicantID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Email TEXT UNIQUE);\nCREATE TABLE ApplicationJobs(\n    ApplicationID INTEGER PRIMARY KEY,\n    ApplicantID INTEGER,\n    JobID INTEGER,\n    SubmissionDate DATE,\n    Status TEXT DEFAULT 'Pending',\n    FOREIGN KEY (ApplicantID) REFERENCES Applicants(ApplicantID),\n    FOREIGN KEY (JobID) REFERENCES Jobs(JobID));\nCREATE TABLE Companies(\n    CompanyID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT);\nCREATE TABLE DataTypes(\n    DataTypeID INTEGER PRIMARY KEY,\n    DataTypeName TEXT);\nCREATE TABLE Jobs(\n    JobID INTEGER PRIMARY KEY,\n    Title TEXT,\n    Description TEXT,\n    PostedDate DATE,\n    CompanyID INTEGER,\n    ROLEID INTEGER,\n    DATAID INTEGER,\n    FOREIGN KEY (CompanyID) REFERENCES Companies(CompanyID),\n    FOREIGN KEY (ROLEID) REFERENCES Roles(RoleID),\n    FOREIGN KEY (DATAID) REFERENCES DataTypes(DataTypeID));\nCREATE TABLE Roles(\n    RoleID INTEGER PRIMARY KEY,\n    RoleName TEXT);\n\nINSERT INTO \"Applicants\" (ApplicantID,FirstName,LastName,Email) VALUES (1,'John','Doe','john.doe@example.com'),(2,'Jane','Smith','jane.smith@example.com');\nINSERT INTO \"ApplicationJobs\" (ApplicationID,ApplicantID,JobID,SubmissionDate,Status) VALUES (1,1,1,'2023-01-01','Pending'),(2,2,2,'2023-01-02','Pending');\nINSERT INTO \"Companies\" (CompanyID,Name,Location) VALUES (1,'ABC Corp.','New York'),(2,'XYZ Inc.','San Francisco');\nINSERT INTO \"DataTypes\" (DataTypeID,DataTypeName) VALUES (1,'Demographics'),(2,'Financial Analysis');\nINSERT INTO \"Jobs\" (JobID,Title,Description,PostedDate,CompanyID,ROLEID,DATAID) VALUES (1,'Economic Analyst','Analyze economic data...','2023-01-01',1,1,1),(2,'Senior Economic Analyst','Analyze economic data...','2023-01-02',2,1,2),(3,'Statistical Analyst','Analyze statistical data...','2023-01-01',1,2,1),(4,'Senior Statistical Analyst','Analyze statistical data...','2023-01-02',2,2,2);\nINSERT INTO \"Roles\" (RoleID,RoleName) VALUES (1,'Economist'),(2,'Statistician');\n",
      "question": "Show both economist positions  that require financial analysis and statistician positions that require the same. Show them in one table.",
      "gold_queries": [
        "SELECT Jobs.title \r\nFROM Roles JOIN Jobs ON Roles.RoleID = Jobs.ROLEID JOIN DataTypes ON Jobs.DATAID = DataTypes.DataTypeID\r\nWHERE (Roles.RoleName = \"Economist\" OR Roles.RoleName = \"Statistician\") AND DataTypes.DataTypeName = \"Financial Analysis\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List economist and statistician positions using financial analysis DataID.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT J.Title\nFROM Jobs J\nJOIN Roles R ON J.ROLEID = R.RoleID\nWHERE R.RoleName IN ('Economist', 'Statistician')\nAND J.DATAID = 2"
          ]
        },
        {
          "interpretation": "Display a combined table of economist and statistician jobs involving financial analysis",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT J.JobID, J.Title, J.Description, J.PostedDate, C.Name AS CompanyName, R.RoleName, DT.DataTypeName\nFROM Jobs J\nJOIN Companies C ON J.CompanyID = C.CompanyID\nJOIN Roles R ON J.ROLEID = R.RoleID\nJOIN DataTypes DT ON J.DATAID = DT.DataTypeID\nWHERE R.RoleName IN ('Economist', 'Statistician') AND DT.DataTypeName = 'Financial Analysis'"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_1tab_ref_roles/attachment_1tab_ref_roles.sqlite",
      "db_dump": "CREATE TABLE Applicants(\n    ApplicantID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Email TEXT UNIQUE);\nCREATE TABLE ApplicationJobs(\n    ApplicationID INTEGER PRIMARY KEY,\n    ApplicantID INTEGER,\n    JobID INTEGER,\n    SubmissionDate DATE,\n    Status TEXT DEFAULT 'Pending',\n    FOREIGN KEY (ApplicantID) REFERENCES Applicants(ApplicantID),\n    FOREIGN KEY (JobID) REFERENCES Jobs(JobID));\nCREATE TABLE Companies(\n    CompanyID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT);\nCREATE TABLE DataTypes(\n    DataTypeID INTEGER PRIMARY KEY,\n    DataTypeName TEXT);\nCREATE TABLE Jobs(\n    JobID INTEGER PRIMARY KEY,\n    Title TEXT,\n    Description TEXT,\n    PostedDate DATE,\n    CompanyID INTEGER,\n    ROLEID INTEGER,\n    DATAID INTEGER,\n    FOREIGN KEY (CompanyID) REFERENCES Companies(CompanyID),\n    FOREIGN KEY (ROLEID) REFERENCES Roles(RoleID),\n    FOREIGN KEY (DATAID) REFERENCES DataTypes(DataTypeID));\nCREATE TABLE Roles(\n    RoleID INTEGER PRIMARY KEY,\n    RoleName TEXT);\n\nINSERT INTO \"Applicants\" (ApplicantID,FirstName,LastName,Email) VALUES (1,'John','Doe','john.doe@example.com'),(2,'Jane','Smith','jane.smith@example.com');\nINSERT INTO \"ApplicationJobs\" (ApplicationID,ApplicantID,JobID,SubmissionDate,Status) VALUES (1,1,1,'2023-01-01','Pending'),(2,2,2,'2023-01-02','Pending');\nINSERT INTO \"Companies\" (CompanyID,Name,Location) VALUES (1,'ABC Corp.','New York'),(2,'XYZ Inc.','San Francisco');\nINSERT INTO \"DataTypes\" (DataTypeID,DataTypeName) VALUES (1,'Demographics'),(2,'Financial Analysis');\nINSERT INTO \"Jobs\" (JobID,Title,Description,PostedDate,CompanyID,ROLEID,DATAID) VALUES (1,'Economic Analyst','Analyze economic data...','2023-01-01',1,1,1),(2,'Senior Economic Analyst','Analyze economic data...','2023-01-02',2,1,2),(3,'Statistical Analyst','Analyze statistical data...','2023-01-01',1,2,1),(4,'Senior Statistical Analyst','Analyze statistical data...','2023-01-02',2,2,2);\nINSERT INTO \"Roles\" (RoleID,RoleName) VALUES (1,'Economist'),(2,'Statistician');\n",
      "question": "List economist positions and statistician positions that require financial analysis. Show them in one table.",
      "gold_queries": [
        "SELECT Jobs.title \r\nFROM Roles JOIN Jobs ON Roles.RoleID = Jobs.ROLEID JOIN DataTypes ON Jobs.DATAID = DataTypes.DataTypeID\r\nWHERE (Roles.RoleName = \"Economist\" OR Roles.RoleName = \"Statistician\") AND DataTypes.DataTypeName = \"Financial Analysis\"",
        "SELECT Jobs.title \r\nFROM Roles JOIN Jobs ON Roles.RoleID = Jobs.ROLEID JOIN DataTypes ON Jobs.DATAID = DataTypes.DataTypeID\r\nWHERE Roles.RoleName = \"Economist\" OR Roles.RoleName = \"Statistician\" AND DataTypes.DataTypeName = \"Financial Analysis\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Provide a single table listing the \"Title\" of jobs requiring \"Financial analysis\" and held by \"Economists\"  or \"Statisticians\".",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT J.Title \nFROM Jobs J \nJOIN DataTypes D ON J.DATAID = D.DataTypeID \nJOIN Roles R ON J.ROLEID = R.RoleID \nWHERE D.DataTypeName = 'Financial Analysis' \nAND R.RoleName IN ('Economist', 'Statistician')"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 1.0,
        "f1_score": 0.6666666666666666,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_1tab_ref_roles/attachment_1tab_ref_roles.sqlite",
      "db_dump": "CREATE TABLE Applicants(\n    ApplicantID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Email TEXT UNIQUE);\nCREATE TABLE ApplicationJobs(\n    ApplicationID INTEGER PRIMARY KEY,\n    ApplicantID INTEGER,\n    JobID INTEGER,\n    SubmissionDate DATE,\n    Status TEXT DEFAULT 'Pending',\n    FOREIGN KEY (ApplicantID) REFERENCES Applicants(ApplicantID),\n    FOREIGN KEY (JobID) REFERENCES Jobs(JobID));\nCREATE TABLE Companies(\n    CompanyID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT);\nCREATE TABLE DataTypes(\n    DataTypeID INTEGER PRIMARY KEY,\n    DataTypeName TEXT);\nCREATE TABLE Jobs(\n    JobID INTEGER PRIMARY KEY,\n    Title TEXT,\n    Description TEXT,\n    PostedDate DATE,\n    CompanyID INTEGER,\n    ROLEID INTEGER,\n    DATAID INTEGER,\n    FOREIGN KEY (CompanyID) REFERENCES Companies(CompanyID),\n    FOREIGN KEY (ROLEID) REFERENCES Roles(RoleID),\n    FOREIGN KEY (DATAID) REFERENCES DataTypes(DataTypeID));\nCREATE TABLE Roles(\n    RoleID INTEGER PRIMARY KEY,\n    RoleName TEXT);\n\nINSERT INTO \"Applicants\" (ApplicantID,FirstName,LastName,Email) VALUES (1,'John','Doe','john.doe@example.com'),(2,'Jane','Smith','jane.smith@example.com');\nINSERT INTO \"ApplicationJobs\" (ApplicationID,ApplicantID,JobID,SubmissionDate,Status) VALUES (1,1,1,'2023-01-01','Pending'),(2,2,2,'2023-01-02','Pending');\nINSERT INTO \"Companies\" (CompanyID,Name,Location) VALUES (1,'ABC Corp.','New York'),(2,'XYZ Inc.','San Francisco');\nINSERT INTO \"DataTypes\" (DataTypeID,DataTypeName) VALUES (1,'Demographics'),(2,'Financial Analysis');\nINSERT INTO \"Jobs\" (JobID,Title,Description,PostedDate,CompanyID,ROLEID,DATAID) VALUES (1,'Economic Analyst','Analyze economic data...','2023-01-01',1,1,1),(2,'Senior Economic Analyst','Analyze economic data...','2023-01-02',2,1,2),(3,'Statistical Analyst','Analyze statistical data...','2023-01-01',1,2,1),(4,'Senior Statistical Analyst','Analyze statistical data...','2023-01-02',2,2,2);\nINSERT INTO \"Roles\" (RoleID,RoleName) VALUES (1,'Economist'),(2,'Statistician');\n",
      "question": "Show all economist positions and also show statistician positions that require financial analysis. Show them in one table.",
      "gold_queries": [
        "SELECT Jobs.title \r\nFROM Roles JOIN Jobs ON Roles.RoleID = Jobs.ROLEID JOIN DataTypes ON Jobs.DATAID = DataTypes.DataTypeID\r\nWHERE Roles.RoleName = \"Economist\" OR Roles.RoleName = \"Statistician\" AND DataTypes.DataTypeName = \"Financial Analysis\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [],
      "num_unique_execution_results": 0,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0,
        "f1_score": 0,
        "num_queries": 0,
        "num_unique_queries": 0,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_1tab_val_earth_science_careers/attachment_1tab_val_earth_science_careers.sqlite",
      "db_dump": "CREATE TABLE Companies (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    address TEXT);\nCREATE TABLE Departments (\n    id INTEGER PRIMARY KEY,\n    name TEXT);\nCREATE TABLE EarthSciencesJobs (\n    id INTEGER PRIMARY KEY,\n    jobTitle TEXT,\n    departmentId INTEGER,\n    companyId INTEGER,\n    FOREIGN KEY(departmentId) REFERENCES Departments(id),\n    FOREIGN KEY(companyId) REFERENCES Companies(id));\nCREATE TABLE Education (\n    employeeId INTEGER,\n    degree TEXT,\n    major TEXT,\n    institution TEXT,\n    yearGraduated INTEGER,\n    FOREIGN KEY(employeeId) REFERENCES Employees(id));\nCREATE TABLE Employees (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    startDate DATE,\n    endDate DATE,\n    university TEXT, FullName TEXT);\n\nINSERT INTO \"Companies\" (id,name,address) VALUES (1,'Company A','123 Main St'),(2,'Company B','456 Elm St'),(3,'Company C','789 Oak St'),(4,'Company D','098 Maple Ave'),(5,'Company E','543 Pine St');\nINSERT INTO \"Departments\" (id,name) VALUES (1,'Department of Geosciences'),(2,'Department of Chemistry'),(3,'Department of Biology'),(4,'Department of Physics'),(5,'Department of Mathematics');\nINSERT INTO \"EarthSciencesJobs\" (id,jobTitle,departmentId,companyId) VALUES (1,'Research Scientist',1,1),(2,'Laboratory Technician',1,2),(3,'Field Geologist',2,3),(4,'Teaching Assistant',3,4),(5,'Data Analyst',4,5);\nINSERT INTO \"Education\" (employeeId,degree,major,institution,yearGraduated) VALUES (NULL,'PhD','Chemistry','Harvard',2008),(NULL,'MS','Physics','Yale',2010),(NULL,'BS','Biology','Princeton',2012),(NULL,'BA','Mathematics','Columbia',2014),(NULL,'MA','Computational Science','Berkeley',2016);\nINSERT INTO \"Employees\" (id,title,startDate,endDate,university,FullName) VALUES (1,'Chemist','2010-01-01',NULL,'MIT','John Doe'),(2,'Chemist','2015-01-01',NULL,'UCLA','Jane Smith'),(3,'Geoscientist','2010-01-01',NULL,'MIT','Michael Brown'),(4,'Geoscientist','2015-01-01',NULL,'Stanford','Emily White'),(5,'Engineer','2010-01-01',NULL,'Caltech','David Black');\n",
      "question": "Show all chemists from MIT, also show all the geoscientists from the same university. Show them in one table.",
      "gold_queries": [
        "SELECT Employees.FullName\r\nFROM Employees\r\nWHERE (Employees.title = \"Chemist\" OR Employees.title = \"Geoscientist\") AND Employees.university = \"MIT\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List all employees with \"Geoscientist\" as their title and \"MIT\" as their university.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName FROM Employees WHERE title = 'Geoscientist' AND university = 'MIT'"
          ]
        },
        {
          "interpretation": "List all employees with \"Chemist\" as their title and whose university is in the same row as employees with \"Geoscientist\" as their title.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName FROM Employees WHERE title = 'Chemist' AND university = (SELECT university FROM Employees WHERE title = 'Geoscientist')"
          ]
        },
        {
          "interpretation": "Combine all employees with \"Chemist\" as their title and all employees with \"Geoscientist\" as their title into a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Employees WHERE title = 'Chemist' UNION SELECT * FROM Employees WHERE title = 'Geoscientist'"
          ]
        },
        {
          "interpretation": "List all employees with \"Chemist\" as their title, regardless of university, and all employees with \"Geoscientist\" as their title, regardless of university, in a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName, title FROM Employees WHERE title = 'Chemist' OR title = 'Geoscientist'"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_1tab_val_earth_science_careers/attachment_1tab_val_earth_science_careers.sqlite",
      "db_dump": "CREATE TABLE Companies (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    address TEXT);\nCREATE TABLE Departments (\n    id INTEGER PRIMARY KEY,\n    name TEXT);\nCREATE TABLE EarthSciencesJobs (\n    id INTEGER PRIMARY KEY,\n    jobTitle TEXT,\n    departmentId INTEGER,\n    companyId INTEGER,\n    FOREIGN KEY(departmentId) REFERENCES Departments(id),\n    FOREIGN KEY(companyId) REFERENCES Companies(id));\nCREATE TABLE Education (\n    employeeId INTEGER,\n    degree TEXT,\n    major TEXT,\n    institution TEXT,\n    yearGraduated INTEGER,\n    FOREIGN KEY(employeeId) REFERENCES Employees(id));\nCREATE TABLE Employees (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    startDate DATE,\n    endDate DATE,\n    university TEXT, FullName TEXT);\n\nINSERT INTO \"Companies\" (id,name,address) VALUES (1,'Company A','123 Main St'),(2,'Company B','456 Elm St'),(3,'Company C','789 Oak St'),(4,'Company D','098 Maple Ave'),(5,'Company E','543 Pine St');\nINSERT INTO \"Departments\" (id,name) VALUES (1,'Department of Geosciences'),(2,'Department of Chemistry'),(3,'Department of Biology'),(4,'Department of Physics'),(5,'Department of Mathematics');\nINSERT INTO \"EarthSciencesJobs\" (id,jobTitle,departmentId,companyId) VALUES (1,'Research Scientist',1,1),(2,'Laboratory Technician',1,2),(3,'Field Geologist',2,3),(4,'Teaching Assistant',3,4),(5,'Data Analyst',4,5);\nINSERT INTO \"Education\" (employeeId,degree,major,institution,yearGraduated) VALUES (NULL,'PhD','Chemistry','Harvard',2008),(NULL,'MS','Physics','Yale',2010),(NULL,'BS','Biology','Princeton',2012),(NULL,'BA','Mathematics','Columbia',2014),(NULL,'MA','Computational Science','Berkeley',2016);\nINSERT INTO \"Employees\" (id,title,startDate,endDate,university,FullName) VALUES (1,'Chemist','2010-01-01',NULL,'MIT','John Doe'),(2,'Chemist','2015-01-01',NULL,'UCLA','Jane Smith'),(3,'Geoscientist','2010-01-01',NULL,'MIT','Michael Brown'),(4,'Geoscientist','2015-01-01',NULL,'Stanford','Emily White'),(5,'Engineer','2010-01-01',NULL,'Caltech','David Black');\n",
      "question": "List all chemists and geoscientists from MIT. Show them in one table.",
      "gold_queries": [
        "SELECT Employees.FullName\r\nFROM Employees\r\nWHERE (Employees.title = \"Chemist\" OR Employees.title = \"Geoscientist\") AND Employees.university = \"MIT\"",
        "SELECT Employees.FullName\r\nFROM Employees\r\nWHERE Employees.title = \"Chemist\" OR Employees.title = \"Geoscientist\" AND Employees.university = \"MIT\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Query the database to produce a single table displaying information about individuals identified as either Chemists or Geoscientists who studied at MIT.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName, university, title \nFROM Employees \nWHERE (title = 'Chemist' OR title = 'Geoscientist') AND university = 'MIT'"
          ]
        },
        {
          "interpretation": "Give me a table containing employees with titles of Chemist or Geoscientist that attended MIT.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName FROM Employees WHERE title IN ('Chemist', 'Geoscientist') AND university = 'MIT'"
          ]
        },
        {
          "interpretation": "Show me a unified table of all employees labeled as either Chemist or Geoscientist who graduated from MIT.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.id, E.title, E.startDate, E.endDate, E.university, E.FullName\nFROM Employees E\nWHERE E.title IN ('Chemist', 'Geoscientist') AND E.university = 'MIT'"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.3333333333333333,
        "f1_score": 0.4,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_1tab_val_earth_science_careers/attachment_1tab_val_earth_science_careers.sqlite",
      "db_dump": "CREATE TABLE Companies (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    address TEXT);\nCREATE TABLE Departments (\n    id INTEGER PRIMARY KEY,\n    name TEXT);\nCREATE TABLE EarthSciencesJobs (\n    id INTEGER PRIMARY KEY,\n    jobTitle TEXT,\n    departmentId INTEGER,\n    companyId INTEGER,\n    FOREIGN KEY(departmentId) REFERENCES Departments(id),\n    FOREIGN KEY(companyId) REFERENCES Companies(id));\nCREATE TABLE Education (\n    employeeId INTEGER,\n    degree TEXT,\n    major TEXT,\n    institution TEXT,\n    yearGraduated INTEGER,\n    FOREIGN KEY(employeeId) REFERENCES Employees(id));\nCREATE TABLE Employees (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    startDate DATE,\n    endDate DATE,\n    university TEXT, FullName TEXT);\n\nINSERT INTO \"Companies\" (id,name,address) VALUES (1,'Company A','123 Main St'),(2,'Company B','456 Elm St'),(3,'Company C','789 Oak St'),(4,'Company D','098 Maple Ave'),(5,'Company E','543 Pine St');\nINSERT INTO \"Departments\" (id,name) VALUES (1,'Department of Geosciences'),(2,'Department of Chemistry'),(3,'Department of Biology'),(4,'Department of Physics'),(5,'Department of Mathematics');\nINSERT INTO \"EarthSciencesJobs\" (id,jobTitle,departmentId,companyId) VALUES (1,'Research Scientist',1,1),(2,'Laboratory Technician',1,2),(3,'Field Geologist',2,3),(4,'Teaching Assistant',3,4),(5,'Data Analyst',4,5);\nINSERT INTO \"Education\" (employeeId,degree,major,institution,yearGraduated) VALUES (NULL,'PhD','Chemistry','Harvard',2008),(NULL,'MS','Physics','Yale',2010),(NULL,'BS','Biology','Princeton',2012),(NULL,'BA','Mathematics','Columbia',2014),(NULL,'MA','Computational Science','Berkeley',2016);\nINSERT INTO \"Employees\" (id,title,startDate,endDate,university,FullName) VALUES (1,'Chemist','2010-01-01',NULL,'MIT','John Doe'),(2,'Chemist','2015-01-01',NULL,'UCLA','Jane Smith'),(3,'Geoscientist','2010-01-01',NULL,'MIT','Michael Brown'),(4,'Geoscientist','2015-01-01',NULL,'Stanford','Emily White'),(5,'Engineer','2010-01-01',NULL,'Caltech','David Black');\n",
      "question": "List all of the chemists, in addition show just the geoscientists from MIT. Show them in one table.",
      "gold_queries": [
        "SELECT Employees.FullName\r\nFROM Employees\r\nWHERE Employees.title = \"Chemist\" OR Employees.title = \"Geoscientist\" AND Employees.university = \"MIT\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List all employees with the title \"Chemist\" and then list employees with the title \"Geoscientist\" who attended MIT.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT FullName FROM Employees WHERE title = 'Chemist' UNION SELECT FullName FROM Employees WHERE title = 'Geoscientist' AND university = 'MIT'"
          ]
        },
        {
          "interpretation": "Create a single table containing all chemists and a subset of geoscientists from MIT.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Employees WHERE title = 'Chemist' OR (title = 'Geoscientist' AND university = 'MIT')"
          ]
        },
        {
          "interpretation": "Display all chemists and a separate subset of geoscientists who graduated from MIT within a consolidated table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName, title, university FROM Employees WHERE title = 'Chemist' AND university = 'MIT'\nUNION\nSELECT FullName, title, university FROM Employees WHERE title = 'Geoscientist' AND university = 'MIT'"
          ]
        },
        {
          "interpretation": "Present a combined list of all chemists and a filtered list of geoscientists from MIT, each group clearly distinguished.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT 'All Chemists' AS GroupCategory, FullName FROM Employees WHERE title = 'Chemist' \nUNION ALL \nSELECT 'Geoscientists from MIT' AS GroupCategory, FullName FROM Employees WHERE title = 'Geoscientist' AND university = 'MIT'"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_2tab_val_lab_positions/attachment_2tab_val_lab_positions.sqlite",
      "db_dump": "CREATE TABLE Accountants(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    qualification TEXT,\n    years_in_industry INTEGER,\n    gender TEXT \n);\nCREATE TABLE Data_Analysts(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    specialization TEXT,\n    education TEXT,\n    gender TEXT \n);\nCREATE TABLE HR_Specialists(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    department TEXT,\n    employment_duration INTEGER,\n    gender TEXT \n);\nCREATE TABLE Laboratory_Technicians(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    age INTEGER,\n    experience INTEGER,\n    Gender TEXT \n);\nCREATE TABLE Research_Scientists(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    age INTEGER,\n    salary REAL,\n    Gender TEXT \n);\nCREATE TABLE Software_Engineers(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    skills TEXT,\n    years_experience INTEGER,\n    gender TEXT \n);\n\nINSERT INTO \"Accountants\" (id,name,qualification,years_in_industry,gender) VALUES (1,'Anna Johnson','CPA',6,'Female'),(2,'William Anderson','CA',8,'Male');\nINSERT INTO \"Data_Analysts\" (id,name,specialization,education,gender) VALUES (1,'Eva Red','Data Science','Master of Computer Applications','Female'),(2,'Steve Black','Business Analytics','MBA','Male');\nINSERT INTO \"HR_Specialists\" (id,name,department,employment_duration,gender) VALUES (1,'Carol White','HR',7,'Female'),(2,'Robert Green','HR',10,'Male');\nINSERT INTO \"Laboratory_Technicians\" (id,name,age,experience,Gender) VALUES (1,'Emma Brown',27,3,'Female'),(2,'Tom Green',32,6,'Male');\nINSERT INTO \"Research_Scientists\" (id,name,age,salary,Gender) VALUES (1,'Jane Doe',30,85000.0,'Female'),(2,'John Smith',35,90000.0,'Male');\nINSERT INTO \"Software_Engineers\" (id,name,skills,years_experience,gender) VALUES (1,'Alice Blue','Python, Java',4,'Female'),(2,'Bob White','C++, Python',5,'Male');\n",
      "question": "List all research scientists and also display female laboratory technicians. Show them in one table.",
      "gold_queries": [
        "SELECT Research_Scientists.name\r\nFROM Research_Scientists\r\nUNION\r\nSELECT Laboratory_Technicians.name\r\nFROM Laboratory_Technicians\r\nWHERE Laboratory_Technicians.Gender = \"Female\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List the columns from Research_Scientists, then the columns from Laboratory_Technicians where the gender is 'Female'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, age, salary, Gender FROM Research_Scientists",
            "SELECT name, age, experience, Gender FROM Laboratory_Technicians WHERE Gender = 'Female'"
          ]
        },
        {
          "interpretation": "List the columns from Research_Scientists, then the columns from Laboratory_Technicians where the gender is 'Female'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, age, salary, Gender FROM Research_Scientists",
            "SELECT name, age, experience, Gender FROM Laboratory_Technicians WHERE Gender = 'Female'"
          ]
        },
        {
          "interpretation": "Create two joined tables, one for Research_Scientists and one for female Laboratory_Technicians.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Laboratory_Technicians WHERE Gender = 'Female'",
            "SELECT * FROM Research_Scientists"
          ]
        },
        {
          "interpretation": "Create two joined tables, one for Research_Scientists and one for female Laboratory_Technicians.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Laboratory_Technicians WHERE Gender = 'Female'",
            "SELECT * FROM Research_Scientists"
          ]
        },
        {
          "interpretation": "Combine the data of Research_Scientists and Laboratory_Technicians where gender is 'Female'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, age FROM Research_Scientists WHERE Gender = 'Female' UNION SELECT name, age FROM Laboratory_Technicians WHERE Gender = 'Female'"
          ]
        },
        {
          "interpretation": "Display the content of both Research_Scientists and Laboratory_Technicians, filtered for female technicians.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Research_Scientists UNION SELECT * FROM Laboratory_Technicians WHERE Gender = 'Female'"
          ]
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 10,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_2tab_val_lab_positions/attachment_2tab_val_lab_positions.sqlite",
      "db_dump": "CREATE TABLE Accountants(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    qualification TEXT,\n    years_in_industry INTEGER,\n    gender TEXT \n);\nCREATE TABLE Data_Analysts(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    specialization TEXT,\n    education TEXT,\n    gender TEXT \n);\nCREATE TABLE HR_Specialists(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    department TEXT,\n    employment_duration INTEGER,\n    gender TEXT \n);\nCREATE TABLE Laboratory_Technicians(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    age INTEGER,\n    experience INTEGER,\n    Gender TEXT \n);\nCREATE TABLE Research_Scientists(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    age INTEGER,\n    salary REAL,\n    Gender TEXT \n);\nCREATE TABLE Software_Engineers(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    skills TEXT,\n    years_experience INTEGER,\n    gender TEXT \n);\n\nINSERT INTO \"Accountants\" (id,name,qualification,years_in_industry,gender) VALUES (1,'Anna Johnson','CPA',6,'Female'),(2,'William Anderson','CA',8,'Male');\nINSERT INTO \"Data_Analysts\" (id,name,specialization,education,gender) VALUES (1,'Eva Red','Data Science','Master of Computer Applications','Female'),(2,'Steve Black','Business Analytics','MBA','Male');\nINSERT INTO \"HR_Specialists\" (id,name,department,employment_duration,gender) VALUES (1,'Carol White','HR',7,'Female'),(2,'Robert Green','HR',10,'Male');\nINSERT INTO \"Laboratory_Technicians\" (id,name,age,experience,Gender) VALUES (1,'Emma Brown',27,3,'Female'),(2,'Tom Green',32,6,'Male');\nINSERT INTO \"Research_Scientists\" (id,name,age,salary,Gender) VALUES (1,'Jane Doe',30,85000.0,'Female'),(2,'John Smith',35,90000.0,'Male');\nINSERT INTO \"Software_Engineers\" (id,name,skills,years_experience,gender) VALUES (1,'Alice Blue','Python, Java',4,'Female'),(2,'Bob White','C++, Python',5,'Male');\n",
      "question": "Can you show female research scientists and female laboratory technicians? Show them in one table.",
      "gold_queries": [
        "SELECT Research_Scientists.name\r\nFROM Research_Scientists\r\nWHERE Research_Scientists.Gender = \"Female\"\r\nUNION\r\nSELECT Laboratory_Technicians.name\r\nFROM Laboratory_Technicians\r\nWHERE Laboratory_Technicians.Gender = \"Female\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Display a report summarizing the number of female Research Scientists and female Laboratory Technicians.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    'Research Scientists' AS profession, \n    COUNT(*) AS female_count \nFROM \n    Research_Scientists \nWHERE \n    Gender = 'Female'\nUNION ALL\nSELECT \n    'Laboratory Technicians' AS profession, \n    COUNT(*) AS female_count \nFROM \n    Laboratory_Technicians \nWHERE \n    Gender = 'Female'"
          ]
        },
        {
          "interpretation": "List the names of all female Research Scientists and female Laboratory Technicians.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT name FROM Research_Scientists WHERE Gender = 'Female' UNION SELECT name FROM Laboratory_Technicians WHERE Gender = 'Female'"
          ]
        },
        {
          "interpretation": "Find the average age of female Research Scientists and female Laboratory Technicians.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AVG(age) AS average_age\nFROM (\n    SELECT age FROM Research_Scientists WHERE Gender = 'Female'\n    UNION ALL\n    SELECT age FROM Laboratory_Technicians WHERE Gender = 'Female'\n) AS combined_ages"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_2tab_val_lab_positions/attachment_2tab_val_lab_positions.sqlite",
      "db_dump": "CREATE TABLE Accountants(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    qualification TEXT,\n    years_in_industry INTEGER,\n    gender TEXT \n);\nCREATE TABLE Data_Analysts(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    specialization TEXT,\n    education TEXT,\n    gender TEXT \n);\nCREATE TABLE HR_Specialists(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    department TEXT,\n    employment_duration INTEGER,\n    gender TEXT \n);\nCREATE TABLE Laboratory_Technicians(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    age INTEGER,\n    experience INTEGER,\n    Gender TEXT \n);\nCREATE TABLE Research_Scientists(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    age INTEGER,\n    salary REAL,\n    Gender TEXT \n);\nCREATE TABLE Software_Engineers(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    skills TEXT,\n    years_experience INTEGER,\n    gender TEXT \n);\n\nINSERT INTO \"Accountants\" (id,name,qualification,years_in_industry,gender) VALUES (1,'Anna Johnson','CPA',6,'Female'),(2,'William Anderson','CA',8,'Male');\nINSERT INTO \"Data_Analysts\" (id,name,specialization,education,gender) VALUES (1,'Eva Red','Data Science','Master of Computer Applications','Female'),(2,'Steve Black','Business Analytics','MBA','Male');\nINSERT INTO \"HR_Specialists\" (id,name,department,employment_duration,gender) VALUES (1,'Carol White','HR',7,'Female'),(2,'Robert Green','HR',10,'Male');\nINSERT INTO \"Laboratory_Technicians\" (id,name,age,experience,Gender) VALUES (1,'Emma Brown',27,3,'Female'),(2,'Tom Green',32,6,'Male');\nINSERT INTO \"Research_Scientists\" (id,name,age,salary,Gender) VALUES (1,'Jane Doe',30,85000.0,'Female'),(2,'John Smith',35,90000.0,'Male');\nINSERT INTO \"Software_Engineers\" (id,name,skills,years_experience,gender) VALUES (1,'Alice Blue','Python, Java',4,'Female'),(2,'Bob White','C++, Python',5,'Male');\n",
      "question": "Display female laboratory technicians and research scientists. Show them in one table.",
      "gold_queries": [
        "SELECT Research_Scientists.name\r\nFROM Research_Scientists\r\nWHERE Research_Scientists.Gender = \"Female\"\r\nUNION\r\nSELECT Laboratory_Technicians.name\r\nFROM Laboratory_Technicians\r\nWHERE Laboratory_Technicians.Gender = \"Female\"",
        "SELECT Research_Scientists.name\r\nFROM Research_Scientists\r\nUNION\r\nSELECT Laboratory_Technicians.name\r\nFROM Laboratory_Technicians\r\nWHERE Laboratory_Technicians.Gender = \"Female\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Write a query that selects all female laboratory technicians and research scientists and displays them in a union.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name FROM Laboratory_Technicians WHERE Gender = 'Female' UNION SELECT name FROM Research_Scientists WHERE Gender = 'Female'"
          ]
        },
        {
          "interpretation": "Find all rows from the \"Laboratory_Technicians\" table where \"Gender\" is 'Female' and all rows from the \"Research_Scientists\" table where \"Gender\" is 'Female', and present the results in a single combined table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, age, experience, Gender FROM Laboratory_Technicians WHERE Gender = 'Female' UNION SELECT name, age, salary, Gender FROM Research_Scientists WHERE Gender = 'Female'"
          ]
        },
        {
          "interpretation": "Join the \"Laboratory_Technicians\" and \"Research_Scientists\" tables on a common column (if one exists) and filter the results to include only females.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT LT.name AS LT_name, LT.age AS LT_age, LT.experience AS LT_experience, RS.name AS RS_name, RS.age AS RS_age, RS.salary AS RS_salary\nFROM Laboratory_Technicians LT\nJOIN Research_Scientists RS ON LT.Gender = RS.Gender\nWHERE LT.Gender = 'Female' AND RS.Gender = 'Female'"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.3333333333333333,
        "f1_score": 0.4,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_2tab_val_media_careers/attachment_2tab_val_media_careers.sqlite",
      "db_dump": "CREATE TABLE ArticleAuthors(\n    articleId INTEGER REFERENCES Articles(id),\n    journalistId INTEGER REFERENCES Journalists(id),\n    PRIMARY KEY (articleId, journalistId)\n);\nCREATE TABLE Articles(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    content TEXT,\n    publishDate DATE,\n    editorId INTEGER REFERENCES Editors(id),\n    FOREIGN KEY (editorId) REFERENCES Editors(id)\n);\nCREATE TABLE Editors(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    languages TEXT \n);\nCREATE TABLE Journalists(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    languages TEXT \n);\nCREATE TABLE Publications(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    publicationDate DATE\n);\nCREATE TABLE Subscriptions(\n    id INTEGER PRIMARY KEY,\n    subscriberEmail TEXT,\n    subscriptionType TEXT \n);\n\nINSERT INTO \"ArticleAuthors\" (articleId,journalistId) VALUES (1,1),(2,2);\nINSERT INTO \"Articles\" (id,title,content,publishDate,editorId) VALUES (1,'Article 1','Content of Article 1','2021-01-01',1),(2,'Article 2','Content of Article 2','2021-01-15',2);\nINSERT INTO \"Editors\" (id,name,email,phoneNumber,languages) VALUES (1,'Michael Johnson','michael@example.com','+0987654321','English and Spanish'),(2,'Emily Davis','emily@example.com','+1234567890','Italian and Portuguese');\nINSERT INTO \"Journalists\" (id,name,email,phoneNumber,languages) VALUES (1,'John Doe','john@example.com','+1234567890','English and Spanish'),(2,'Jane Smith','jane@example.com','+9876543210','German and French');\nINSERT INTO \"Publications\" (id,title,publicationDate) VALUES (1,'The Daily News','2021-01-01'),(2,'Weekly Times','2021-01-15');\nINSERT INTO \"Subscriptions\" (id,subscriberEmail,subscriptionType) VALUES (1,'subscription1@example.com','Premium'),(2,'subscription2@example.com','Standard');\n",
      "question": "Show journalists and editors who speak English and Spanish. Show them in one table.",
      "gold_queries": [
        "SELECT Journalists.name\r\nFROM Journalists\r\nWHERE Journalists.languages = \"English and Spanish\"\r\nUNION\r\nSELECT Editors.name\r\nFROM Editors\r\nWHERE Editors.languages = \"English and Spanish\"",
        "SELECT Journalists.name\r\nFROM Journalists\r\nUNION\r\nSELECT Editors.name\r\nFROM Editors\r\nWHERE Editors.languages = \"English and Spanish\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Generate a unified table displaying journalist and editor information, distinguished by their roles. The table should filter for entries where the \"languages\" field contains both \"English\" and \"Spanish\".",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT 'Journalist' AS Role, name, email, phoneNumber, languages FROM Journalists WHERE languages LIKE '%English%' AND languages LIKE '%Spanish%'\nUNION\nSELECT 'Editor' AS Role, name, email, phoneNumber, languages FROM Editors WHERE languages LIKE '%English%' AND languages LIKE '%Spanish%'"
          ]
        },
        {
          "interpretation": "Retrieve the names and relevant details of all journalists and editors whose languages list includes both \"English\" and \"Spanish\". Combine the results into a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, email, phoneNumber, languages\nFROM Journalists\nWHERE languages LIKE '%English%' AND languages LIKE '%Spanish%'\nUNION\nSELECT name, email, phoneNumber, languages\nFROM Editors\nWHERE languages LIKE '%English%' AND languages LIKE '%Spanish%'"
          ]
        },
        {
          "interpretation": "Display a single table with two columns: \"Person\" and \"Languages\". Populate the \"Person\" column with either \"Journalist\" or \"Editor\" and the corresponding names from each respective table. Filter the results to include only those who speak \"English\" and \"Spanish\".",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT 'Journalist' AS Person, name, languages FROM Journalists WHERE languages = 'English and Spanish'\nUNION\nSELECT 'Editor' AS Person, name, languages FROM Editors WHERE languages = 'English and Spanish'"
          ]
        },
        {
          "interpretation": "Create a single table containing columns for \"Journalist\" and \"Editor\" along with their names and email addresses. Filter the data to include only entries where both languages are \"English\" and \"Spanish\".",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT J.name AS Journalist, J.email AS JournalistEmail, E.name AS Editor, E.email AS EditorEmail\nFROM Journalists J\nJOIN Editors E\nWHERE (J.languages = 'English and Spanish' AND E.languages = 'English and Spanish')"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_2tab_val_media_careers/attachment_2tab_val_media_careers.sqlite",
      "db_dump": "CREATE TABLE ArticleAuthors(\n    articleId INTEGER REFERENCES Articles(id),\n    journalistId INTEGER REFERENCES Journalists(id),\n    PRIMARY KEY (articleId, journalistId)\n);\nCREATE TABLE Articles(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    content TEXT,\n    publishDate DATE,\n    editorId INTEGER REFERENCES Editors(id),\n    FOREIGN KEY (editorId) REFERENCES Editors(id)\n);\nCREATE TABLE Editors(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    languages TEXT \n);\nCREATE TABLE Journalists(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    languages TEXT \n);\nCREATE TABLE Publications(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    publicationDate DATE\n);\nCREATE TABLE Subscriptions(\n    id INTEGER PRIMARY KEY,\n    subscriberEmail TEXT,\n    subscriptionType TEXT \n);\n\nINSERT INTO \"ArticleAuthors\" (articleId,journalistId) VALUES (1,1),(2,2);\nINSERT INTO \"Articles\" (id,title,content,publishDate,editorId) VALUES (1,'Article 1','Content of Article 1','2021-01-01',1),(2,'Article 2','Content of Article 2','2021-01-15',2);\nINSERT INTO \"Editors\" (id,name,email,phoneNumber,languages) VALUES (1,'Michael Johnson','michael@example.com','+0987654321','English and Spanish'),(2,'Emily Davis','emily@example.com','+1234567890','Italian and Portuguese');\nINSERT INTO \"Journalists\" (id,name,email,phoneNumber,languages) VALUES (1,'John Doe','john@example.com','+1234567890','English and Spanish'),(2,'Jane Smith','jane@example.com','+9876543210','German and French');\nINSERT INTO \"Publications\" (id,title,publicationDate) VALUES (1,'The Daily News','2021-01-01'),(2,'Weekly Times','2021-01-15');\nINSERT INTO \"Subscriptions\" (id,subscriberEmail,subscriptionType) VALUES (1,'subscription1@example.com','Premium'),(2,'subscription2@example.com','Standard');\n",
      "question": "Provide a list of all journalists and also provide a list of editors that speak English and Spanish. Show them in one table.",
      "gold_queries": [
        "SELECT Journalists.name\r\nFROM Journalists\r\nUNION\r\nSELECT Editors.name\r\nFROM Editors\r\nWHERE Editors.languages = \"English and Spanish\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Deliver a table containing two columns: one with all journalist names and the other with editors proficient in both English and Spanish.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT J.name AS JournalistName, E.name AS EditorName\nFROM Journalists J, Editors E\nWHERE J.languages = 'English and Spanish'\n   OR (E.languages = 'English and Spanish' AND E.id IS NOT NULL)"
          ]
        },
        {
          "interpretation": "Create a table with all journalists and a subset of editors from those who speak English and Spanish.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT id, name, email, phoneNumber, languages\nFROM Journalists\nUNION\nSELECT id, name, email, phoneNumber, languages\nFROM Editors\nWHERE languages = 'English and Spanish'"
          ]
        },
        {
          "interpretation": "Enumerate all journalists and show a separate list of all editors fluent in English and Spanish.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT name FROM Journalists\nUNION ALL\nSELECT name FROM Editors WHERE languages = 'English and Spanish'"
          ]
        },
        {
          "interpretation": "List all journalists and editors who speak English and Spanish, unitized in a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, email, phoneNumber FROM Journalists WHERE languages = 'English and Spanish' UNION SELECT name, email, phoneNumber FROM Editors WHERE languages = 'English and Spanish'"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_2tab_val_media_careers/attachment_2tab_val_media_careers.sqlite",
      "db_dump": "CREATE TABLE ArticleAuthors(\n    articleId INTEGER REFERENCES Articles(id),\n    journalistId INTEGER REFERENCES Journalists(id),\n    PRIMARY KEY (articleId, journalistId)\n);\nCREATE TABLE Articles(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    content TEXT,\n    publishDate DATE,\n    editorId INTEGER REFERENCES Editors(id),\n    FOREIGN KEY (editorId) REFERENCES Editors(id)\n);\nCREATE TABLE Editors(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    languages TEXT \n);\nCREATE TABLE Journalists(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    languages TEXT \n);\nCREATE TABLE Publications(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    publicationDate DATE\n);\nCREATE TABLE Subscriptions(\n    id INTEGER PRIMARY KEY,\n    subscriberEmail TEXT,\n    subscriptionType TEXT \n);\n\nINSERT INTO \"ArticleAuthors\" (articleId,journalistId) VALUES (1,1),(2,2);\nINSERT INTO \"Articles\" (id,title,content,publishDate,editorId) VALUES (1,'Article 1','Content of Article 1','2021-01-01',1),(2,'Article 2','Content of Article 2','2021-01-15',2);\nINSERT INTO \"Editors\" (id,name,email,phoneNumber,languages) VALUES (1,'Michael Johnson','michael@example.com','+0987654321','English and Spanish'),(2,'Emily Davis','emily@example.com','+1234567890','Italian and Portuguese');\nINSERT INTO \"Journalists\" (id,name,email,phoneNumber,languages) VALUES (1,'John Doe','john@example.com','+1234567890','English and Spanish'),(2,'Jane Smith','jane@example.com','+9876543210','German and French');\nINSERT INTO \"Publications\" (id,title,publicationDate) VALUES (1,'The Daily News','2021-01-01'),(2,'Weekly Times','2021-01-15');\nINSERT INTO \"Subscriptions\" (id,subscriberEmail,subscriptionType) VALUES (1,'subscription1@example.com','Premium'),(2,'subscription2@example.com','Standard');\n",
      "question": "What journalists speak English and Spanish and what editors also speak those languages? Show them in one table.",
      "gold_queries": [
        "SELECT Journalists.name\r\nFROM Journalists\r\nWHERE Journalists.languages = \"English and Spanish\"\r\nUNION\r\nSELECT Editors.name\r\nFROM Editors\r\nWHERE Editors.languages = \"English and Spanish\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Show the names of all journalists who speak English and Spanish and a separate list of all editors who speak English and Spanish.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name FROM Journalists WHERE languages = 'English and Spanish'",
            "SELECT name FROM Editors WHERE languages = 'English and Spanish'"
          ]
        },
        {
          "interpretation": "Show the names of all journalists who speak English and Spanish and a separate list of all editors who speak English and Spanish.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name FROM Journalists WHERE languages = 'English and Spanish'",
            "SELECT name FROM Editors WHERE languages = 'English and Spanish'"
          ]
        },
        {
          "interpretation": "Return a single table listing journalists who speak English and Spanish, a column indicating if they are also editors and the corresponding editor's name if applicable.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT J.name, CASE WHEN E.id IS NOT NULL THEN 'Yes' ELSE 'No' END AS isEditor, E.name AS editorsName\nFROM Journalists J\nLEFT JOIN ArticleAuthors AA ON J.id = AA.journalistId\nLEFT JOIN Articles A ON AA.articleId = A.id\nLEFT JOIN Editors E ON J.id = E.id\nWHERE J.languages = 'English and Spanish'"
          ]
        },
        {
          "interpretation": "Create a combined table with columns for \"Journalist Name\",\"Editor Name,\" and \"Languages Spoken\", where each row represents a pair of a journalist and their corresponding editor who both speak English and Spanish.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT J.name AS \"Journalist Name\", E.name AS \"Editor Name\", J.languages AS \"Languages Spoken\"\nFROM Journalists J\nJOIN ArticleAuthors AA ON J.id = AA.journalistId\nJOIN Articles A ON AA.articleId = A.id\nJOIN Editors E ON A.editorId = E.id\nWHERE J.languages = 'English and Spanish' AND E.languages = 'English and Spanish'"
          ]
        },
        {
          "interpretation": "List the names of all journalists who speak English and Spanish, and for each journalist, list the editors who speak English and Spanish.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT J1.name AS journalistName, E1.name AS editorName\nFROM Journalists J1\nJOIN ArticleAuthors AA ON J1.id = AA.journalistId\nJOIN Articles A ON AA.articleId = A.id\nJOIN Editors E1 ON A.editorId = E1.id\nWHERE J1.languages = 'English and Spanish' AND E1.languages = 'English and Spanish'"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "f1_score": 0.33333333333333337,
        "num_queries": 7,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Banking/attachment_1tab_val_organization/attachment_1tab_val_organization.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountNumber INTEGER PRIMARY KEY,\n    CustomerID INTEGER,\n    Balance REAL DEFAULT 0,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Currencies(\n    CurrencyID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Symbol TEXT\n);\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY,\n    Organization TEXT,\n    Year_of_establishment INT\n, FullName TEXT);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY,\n    AccountNumber INTEGER,\n    Amount REAL,\n    CurrencyID INTEGER,\n    Date DATETIME,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber),\n    FOREIGN KEY (CurrencyID) REFERENCES Currencies(CurrencyID)\n);\n\nINSERT INTO \"Currencies\" (CurrencyID,Name,Symbol) VALUES (1,'USD','$'),(2,'EUR','\u20ac'),(3,'GBP','\u00a3'),(4,'AUD','$');\nINSERT INTO \"Customers\" (CustomerID,Organization,Year_of_establishment,FullName) VALUES (1,'Currency Exchange Service',2000,'John Doe'),(2,'Currency Exchange Service',1998,'Jane Smith'),(3,'Commodity Trading Firm',2000,'Michael Brown'),(4,'Commodity Trading Firm',1996,'Emma White');\n",
      "question": "Show all customers of either the currency exchange services founded in 2000 or the commodity trading firms that were founded at the same time. Show them in one table.",
      "gold_queries": [
        "SELECT Customers.FullName\r\nFROM Customers\r\nWHERE (Customers.Organization = \"Currency Exchange Service\" OR Customers.Organization = \"Commodity Trading Firm\") AND Customers.Year_of_establishment = 2000"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Select distinct CustomerID values from the Customers table, where Organization is either 'Currency Exchange Service' and Year_of_establishment is 2000, or Organization is 'Commodity Trading Firm' and Year_of_establishment is 2000",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT CustomerID FROM Customers WHERE (Organization = 'Currency Exchange Service' AND Year_of_establishment = 2000) OR (Organization = 'Commodity Trading Firm' AND Year_of_establishment = 2000)"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Banking/attachment_1tab_val_organization/attachment_1tab_val_organization.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountNumber INTEGER PRIMARY KEY,\n    CustomerID INTEGER,\n    Balance REAL DEFAULT 0,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Currencies(\n    CurrencyID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Symbol TEXT\n);\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY,\n    Organization TEXT,\n    Year_of_establishment INT\n, FullName TEXT);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY,\n    AccountNumber INTEGER,\n    Amount REAL,\n    CurrencyID INTEGER,\n    Date DATETIME,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber),\n    FOREIGN KEY (CurrencyID) REFERENCES Currencies(CurrencyID)\n);\n\nINSERT INTO \"Currencies\" (CurrencyID,Name,Symbol) VALUES (1,'USD','$'),(2,'EUR','\u20ac'),(3,'GBP','\u00a3'),(4,'AUD','$');\nINSERT INTO \"Customers\" (CustomerID,Organization,Year_of_establishment,FullName) VALUES (1,'Currency Exchange Service',2000,'John Doe'),(2,'Currency Exchange Service',1998,'Jane Smith'),(3,'Commodity Trading Firm',2000,'Michael Brown'),(4,'Commodity Trading Firm',1996,'Emma White');\n",
      "question": "Show the commodity trading firm customers from firms formed in 2000 and also show all the currency exchange service customers. Show them in one table.",
      "gold_queries": [
        "SELECT Customers.FullName\r\nFROM Customers\r\nWHERE Customers.Organization = \"Currency Exchange Service\" OR Customers.Organization = \"Commodity Trading Firm\" AND Customers.Year_of_establishment = 2000"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Generate a table listing distinct customers from \"Commodity Trading Firm\" created in 2000, merged with a list of all \"Currency Exchange Service\" customers.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT DISTINCT FullName \nFROM Customers \nWHERE Organization = 'Commodity Trading Firm' AND Year_of_establishment = 2000\nUNION\nSELECT DISTINCT FullName \nFROM Customers \nWHERE Organization = 'Currency Exchange Service'"
          ]
        },
        {
          "interpretation": "Return a single table with two distinct groupings: one for customers associated with \"Commodity Trading Firm\" founded in 2000, and another for all customers affiliated with \"Currency Exchange Service\".",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Organization, FullName\nFROM Customers\nWHERE (Organization = 'Commodity Trading Firm' AND Year_of_establishment = 2000)\n   OR Organization = 'Currency Exchange Service'"
          ]
        },
        {
          "interpretation": "Show a table containing all customers belonging to \"Commodity Trading Firm\" established in 2000, and all customers belonging to \"Currency Exchange Service\".",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName, Organization, Year_of_establishment \nFROM Customers \nWHERE (Organization = 'Commodity Trading Firm' AND Year_of_establishment = 2000) \nOR Organization = 'Currency Exchange Service'"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Banking/attachment_1tab_val_organization/attachment_1tab_val_organization.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountNumber INTEGER PRIMARY KEY,\n    CustomerID INTEGER,\n    Balance REAL DEFAULT 0,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Currencies(\n    CurrencyID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Symbol TEXT\n);\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY,\n    Organization TEXT,\n    Year_of_establishment INT\n, FullName TEXT);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY,\n    AccountNumber INTEGER,\n    Amount REAL,\n    CurrencyID INTEGER,\n    Date DATETIME,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber),\n    FOREIGN KEY (CurrencyID) REFERENCES Currencies(CurrencyID)\n);\n\nINSERT INTO \"Currencies\" (CurrencyID,Name,Symbol) VALUES (1,'USD','$'),(2,'EUR','\u20ac'),(3,'GBP','\u00a3'),(4,'AUD','$');\nINSERT INTO \"Customers\" (CustomerID,Organization,Year_of_establishment,FullName) VALUES (1,'Currency Exchange Service',2000,'John Doe'),(2,'Currency Exchange Service',1998,'Jane Smith'),(3,'Commodity Trading Firm',2000,'Michael Brown'),(4,'Commodity Trading Firm',1996,'Emma White');\n",
      "question": "Show all currency exchange service customers and commodity trading firm customers where the organisation was formed in 2000. Show them in one table.",
      "gold_queries": [
        "SELECT Customers.FullName\r\nFROM Customers\r\nWHERE (Customers.Organization = \"Currency Exchange Service\" OR Customers.Organization = \"Commodity Trading Firm\") AND Customers.Year_of_establishment = 2000",
        "SELECT Customers.FullName\r\nFROM Customers\r\nWHERE Customers.Organization = \"Currency Exchange Service\" OR Customers.Organization = \"Commodity Trading Firm\" AND Customers.Year_of_establishment = 2000"
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Display a table combining all customers from Currency Exchange Service and Commodity Trading Firm, both established in 2000.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName FROM Customers WHERE Organization IN ('Currency Exchange Service', 'Commodity Trading Firm') AND Year_of_establishment = 2000"
          ]
        },
        {
          "interpretation": "Generate a unified table containing customer information for entities identified as both \"Currency Exchange Service\" and \"Commodity Trading Firm\", restricted to those founded in 2000.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Customers WHERE Organization IN ('Currency Exchange Service', 'Commodity Trading Firm') AND Year_of_establishment = 2000"
          ]
        },
        {
          "interpretation": "List all customers associated with \"Currency Exchange Service\" and \"Commodity Trading Firm\" organizations, filtering by a \"Year_of_establishment\" value of 2000, segregated into a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName, Organization, Year_of_establishment\nFROM Customers\nWHERE Organization IN ('Currency Exchange Service', 'Commodity Trading Firm')\nAND Year_of_establishment = 2000"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.3333333333333333,
        "f1_score": 0.4,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Banking/attachment_2tab_ref_revenue_streams/attachment_2tab_ref_revenue_streams.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Product TEXT,\n    Balance REAL ,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE\n);\nCREATE TABLE Fees(\n    FeeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountID INTEGER,\n    CardFee REAL ,\n    FOREIGN KEY (AccountID) REFERENCES Accounts(AccountID)\n);\nCREATE TABLE InterestRates(\n    RateID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountID INTEGER,\n    MonthlyInterestRate REAL ,\n    FOREIGN KEY (AccountID) REFERENCES Accounts(AccountID)\n);\nCREATE TABLE Products(\n    ProductID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Description TEXT,\n    MonthlyInterestRate REAL ,\n    CardFee REAL \n);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountID INTEGER,\n    Amount REAL ,\n    Type TEXT, -- e.g., 'Deposit', 'Withdrawal'\n    TransactionDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (AccountID) REFERENCES Accounts(AccountID)\n);\n\nINSERT INTO \"Accounts\" (AccountID,CustomerID,Product,Balance) VALUES (1,1,'Checking',1000.0),(2,2,'Savings',500.0),(3,3,'Money Market',2500.0),(4,4,'Premium Checking',5000.0),(5,5,'Certificates of Deposit',10000.0);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,DateOfBirth) VALUES (1,'John','Doe','2000-01-01'),(2,'Jane','Smith','1985-06-30'),(3,'Michael','Johnson','1992-07-15'),(4,'Emma','Williams','1997-08-20'),(5,'David','Martin','1990-09-25');\nINSERT INTO \"Fees\" (FeeID,AccountID,CardFee) VALUES (1,1,5.0),(2,2,3.0),(3,3,10.0),(4,4,20.0),(5,5,15.0);\nINSERT INTO \"InterestRates\" (RateID,AccountID,MonthlyInterestRate) VALUES (1,1,0.01),(2,2,0.02),(3,3,0.03),(4,4,0.04),(5,5,0.05);\nINSERT INTO \"Products\" (ProductID,Name,Description,MonthlyInterestRate,CardFee) VALUES (1,'Premium Credit Card','A high interest credit card.',0.02,5.0),(2,'Regular Credit Card','A standard credit card.',0.01,3.0),(3,'Business Loan','For business use only.',0.03,10.0),(4,'Personal Loan','Low interest personal loan.',0.04,20.0),(5,'Student Loan','For students only.',0.05,15.0);\nINSERT INTO \"Transactions\" (TransactionID,AccountID,Amount,Type,TransactionDate) VALUES (1,1,500.0,'Deposit','2024-03-13 20:52:19'),(2,2,-100.0,'Withdrawal','2024-03-13 20:52:19'),(3,3,200.0,'Deposit','2024-03-13 20:52:19'),(4,4,-300.0,'Withdrawal','2024-03-13 20:52:19'),(5,5,2500.0,'Deposit','2024-03-13 20:52:19');\n",
      "question": "What is the fee of accounts where the product is called checking and what is the interest rate of the accounts with the same product name. Show them in one table.",
      "gold_queries": [
        "SELECT Fees.cardfee AS AMOUNT\r\nFROM Accounts JOIN Fees ON Accounts.AccountID = Fees.AccountID\r\nWHERE Accounts.Product = \"Checking\"\r\nUNION\r\nSELECT InterestRates.monthlyinterestrate\r\nFROM Accounts JOIN InterestRates ON Accounts.AccountID = InterestRates.AccountID\r\nWHERE Accounts.Product = \"Checking\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List the CardFee and MonthlyInterestRate for each Account having a Product named 'Checking' in a single output table.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT F.CardFee, I.MonthlyInterestRate\nFROM Accounts A\nJOIN Fees F ON A.AccountID = F.AccountID\nJOIN InterestRates I ON A.AccountID = I.AccountID\nWHERE A.Product = 'Checking'"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Banking/attachment_2tab_ref_revenue_streams/attachment_2tab_ref_revenue_streams.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Product TEXT,\n    Balance REAL ,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE\n);\nCREATE TABLE Fees(\n    FeeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountID INTEGER,\n    CardFee REAL ,\n    FOREIGN KEY (AccountID) REFERENCES Accounts(AccountID)\n);\nCREATE TABLE InterestRates(\n    RateID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountID INTEGER,\n    MonthlyInterestRate REAL ,\n    FOREIGN KEY (AccountID) REFERENCES Accounts(AccountID)\n);\nCREATE TABLE Products(\n    ProductID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Description TEXT,\n    MonthlyInterestRate REAL ,\n    CardFee REAL \n);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountID INTEGER,\n    Amount REAL ,\n    Type TEXT, -- e.g., 'Deposit', 'Withdrawal'\n    TransactionDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (AccountID) REFERENCES Accounts(AccountID)\n);\n\nINSERT INTO \"Accounts\" (AccountID,CustomerID,Product,Balance) VALUES (1,1,'Checking',1000.0),(2,2,'Savings',500.0),(3,3,'Money Market',2500.0),(4,4,'Premium Checking',5000.0),(5,5,'Certificates of Deposit',10000.0);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,DateOfBirth) VALUES (1,'John','Doe','2000-01-01'),(2,'Jane','Smith','1985-06-30'),(3,'Michael','Johnson','1992-07-15'),(4,'Emma','Williams','1997-08-20'),(5,'David','Martin','1990-09-25');\nINSERT INTO \"Fees\" (FeeID,AccountID,CardFee) VALUES (1,1,5.0),(2,2,3.0),(3,3,10.0),(4,4,20.0),(5,5,15.0);\nINSERT INTO \"InterestRates\" (RateID,AccountID,MonthlyInterestRate) VALUES (1,1,0.01),(2,2,0.02),(3,3,0.03),(4,4,0.04),(5,5,0.05);\nINSERT INTO \"Products\" (ProductID,Name,Description,MonthlyInterestRate,CardFee) VALUES (1,'Premium Credit Card','A high interest credit card.',0.02,5.0),(2,'Regular Credit Card','A standard credit card.',0.01,3.0),(3,'Business Loan','For business use only.',0.03,10.0),(4,'Personal Loan','Low interest personal loan.',0.04,20.0),(5,'Student Loan','For students only.',0.05,15.0);\nINSERT INTO \"Transactions\" (TransactionID,AccountID,Amount,Type,TransactionDate) VALUES (1,1,500.0,'Deposit','2024-03-13 20:52:19'),(2,2,-100.0,'Withdrawal','2024-03-13 20:52:19'),(3,3,200.0,'Deposit','2024-03-13 20:52:19'),(4,4,-300.0,'Withdrawal','2024-03-13 20:52:19'),(5,5,2500.0,'Deposit','2024-03-13 20:52:19');\n",
      "question": "Give me all fees and interest rates for the account's product called checking. Show them in one table.",
      "gold_queries": [
        "SELECT Fees.cardfee AS AMOUNT\r\nFROM Accounts JOIN Fees ON Accounts.AccountID = Fees.AccountID\r\nWHERE Accounts.Product = \"Checking\"\r\nUNION\r\nSELECT InterestRates.monthlyinterestrate\r\nFROM Accounts JOIN InterestRates ON Accounts.AccountID = InterestRates.AccountID\r\nWHERE Accounts.Product = \"Checking\"",
        "SELECT Fees.cardfee AS AMOUNT\r\nFROM Accounts JOIN Fees ON Accounts.AccountID = Fees.AccountID\r\nUNION\r\nSELECT InterestRates.monthlyinterestrate AS AMOUNT\r\nFROM Accounts JOIN InterestRates ON Accounts.AccountID = InterestRates.AccountID\r\nWHERE Accounts.Product = \"Checking\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Combine fee and interest rate information for accounts holding 'Checking' products into a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Accounts.AccountID, Fees.CardFee, InterestRates.MonthlyInterestRate\nFROM Accounts\nJOIN Fees ON Accounts.AccountID = Fees.AccountID\nJOIN InterestRates ON Accounts.AccountID = InterestRates.AccountID\nWHERE Accounts.Product = 'Checking'"
          ]
        },
        {
          "interpretation": "Retrieve all fees and interest rates associated with accounts having the product 'Checking'.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT F.CardFee, IR.MonthlyInterestRate\nFROM Fees F\nJOIN InterestRates IR ON F.AccountID = IR.AccountID\nJOIN Accounts A ON F.AccountID = A.AccountID\nWHERE A.Product = 'Checking'"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.5,
        "f1_score": 0.5,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Banking/attachment_2tab_ref_revenue_streams/attachment_2tab_ref_revenue_streams.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Product TEXT,\n    Balance REAL ,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE\n);\nCREATE TABLE Fees(\n    FeeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountID INTEGER,\n    CardFee REAL ,\n    FOREIGN KEY (AccountID) REFERENCES Accounts(AccountID)\n);\nCREATE TABLE InterestRates(\n    RateID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountID INTEGER,\n    MonthlyInterestRate REAL ,\n    FOREIGN KEY (AccountID) REFERENCES Accounts(AccountID)\n);\nCREATE TABLE Products(\n    ProductID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Description TEXT,\n    MonthlyInterestRate REAL ,\n    CardFee REAL \n);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountID INTEGER,\n    Amount REAL ,\n    Type TEXT, -- e.g., 'Deposit', 'Withdrawal'\n    TransactionDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (AccountID) REFERENCES Accounts(AccountID)\n);\n\nINSERT INTO \"Accounts\" (AccountID,CustomerID,Product,Balance) VALUES (1,1,'Checking',1000.0),(2,2,'Savings',500.0),(3,3,'Money Market',2500.0),(4,4,'Premium Checking',5000.0),(5,5,'Certificates of Deposit',10000.0);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,DateOfBirth) VALUES (1,'John','Doe','2000-01-01'),(2,'Jane','Smith','1985-06-30'),(3,'Michael','Johnson','1992-07-15'),(4,'Emma','Williams','1997-08-20'),(5,'David','Martin','1990-09-25');\nINSERT INTO \"Fees\" (FeeID,AccountID,CardFee) VALUES (1,1,5.0),(2,2,3.0),(3,3,10.0),(4,4,20.0),(5,5,15.0);\nINSERT INTO \"InterestRates\" (RateID,AccountID,MonthlyInterestRate) VALUES (1,1,0.01),(2,2,0.02),(3,3,0.03),(4,4,0.04),(5,5,0.05);\nINSERT INTO \"Products\" (ProductID,Name,Description,MonthlyInterestRate,CardFee) VALUES (1,'Premium Credit Card','A high interest credit card.',0.02,5.0),(2,'Regular Credit Card','A standard credit card.',0.01,3.0),(3,'Business Loan','For business use only.',0.03,10.0),(4,'Personal Loan','Low interest personal loan.',0.04,20.0),(5,'Student Loan','For students only.',0.05,15.0);\nINSERT INTO \"Transactions\" (TransactionID,AccountID,Amount,Type,TransactionDate) VALUES (1,1,500.0,'Deposit','2024-03-13 20:52:19'),(2,2,-100.0,'Withdrawal','2024-03-13 20:52:19'),(3,3,200.0,'Deposit','2024-03-13 20:52:19'),(4,4,-300.0,'Withdrawal','2024-03-13 20:52:19'),(5,5,2500.0,'Deposit','2024-03-13 20:52:19');\n",
      "question": "Provide a list of all account fees and also provide a list of all account interest rates where the product is called checking. Show them in one table.",
      "gold_queries": [
        "SELECT Fees.cardfee AS AMOUNT\r\nFROM Accounts JOIN Fees ON Accounts.AccountID = Fees.AccountID\r\nUNION\r\nSELECT InterestRates.monthlyinterestrate AS AMOUNT\r\nFROM Accounts JOIN InterestRates ON Accounts.AccountID = InterestRates.AccountID\r\nWHERE Accounts.Product = \"Checking\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Display separate lists of fees and interest rates for \"Checking\" accounts, grouped within a single response.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT 'Fees' AS Type, Fees.CardFee AS Amount\nFROM Fees\nJOIN Accounts ON Fees.AccountID = Accounts.AccountID\nWHERE Accounts.Product = 'Checking'\nUNION ALL\nSELECT 'Interest Rates' AS Type, InterestRates.MonthlyInterestRate AS Amount\nFROM InterestRates\nJOIN Accounts ON InterestRates.AccountID = Accounts.AccountID\nWHERE Accounts.Product = 'Checking'"
          ]
        },
        {
          "interpretation": "List all fees and interest rates for all accounts, but highlight those relevant to \"Checking\" accounts.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT F.AccountID, F.CardFee, I.MonthlyInterestRate, \n       CASE WHEN A.Product = 'Checking' THEN 'Highlight' ELSE 'Normal' END as Highlight\nFROM Fees F\nJOIN InterestRates I ON F.AccountID = I.AccountID\nJOIN Accounts A ON F.AccountID = A.AccountID"
          ]
        },
        {
          "interpretation": "List all account fees, then list all account interest rates,  with the latter specifically for \"Checking\" products.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT RateID, AccountID, MonthlyInterestRate FROM InterestRates WHERE AccountID IN (SELECT AccountID FROM Accounts WHERE Product = 'Checking')",
            "SELECT FeeID, AccountID, CardFee FROM Fees"
          ]
        },
        {
          "interpretation": "List all account fees, then list all account interest rates,  with the latter specifically for \"Checking\" products.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT RateID, AccountID, MonthlyInterestRate FROM InterestRates WHERE AccountID IN (SELECT AccountID FROM Accounts WHERE Product = 'Checking')",
            "SELECT FeeID, AccountID, CardFee FROM Fees"
          ]
        },
        {
          "interpretation": "Combine fees and interest rates for accounts with \"Checking\" product into a single, merged table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT F.AccountID, F.CardFee, IR.MonthlyInterestRate\nFROM Fees F\nJOIN InterestRates IR ON F.AccountID = IR.AccountID\nJOIN Accounts A ON F.AccountID = A.AccountID\nWHERE A.Product = 'Checking'"
          ]
        },
        {
          "interpretation": "List all fees and interest rates associated with accounts having the product \"Checking\".",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Fees.CardFee, InterestRates.MonthlyInterestRate\nFROM Fees\nJOIN InterestRates ON Fees.AccountID = InterestRates.AccountID\nJOIN Accounts ON Fees.AccountID = Accounts.AccountID\nWHERE Accounts.Product = 'Checking'"
          ]
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 8,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Banking/attachment_1tab_val_loan_types/attachment_1tab_val_loan_types.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    accountID INTEGER PRIMARY KEY AUTOINCREMENT,\n    customerID INTEGER,\n    balance REAL ,\n    FOREIGN KEY(customerID) REFERENCES Customers(customerID));\nCREATE TABLE Customers(\n    customerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    dateOfBirth DATE,\n    address TEXT);\nCREATE TABLE Mortgages(\n    mortgageID INTEGER PRIMARY KEY AUTOINCREMENT,\n    accountID INTEGER,\n    loanType TEXT ,\n    principalAmount REAL ,\n    annualInterestRate DECIMAL(5,2) ,\n    repaymentPeriod TEXT,\n    FOREIGN KEY(accountID) REFERENCES Accounts(accountID));\nCREATE TABLE SavingsAccounts(\n    savingsID INTEGER PRIMARY KEY AUTOINCREMENT,\n    accountID INTEGER,\n    interestRate DECIMAL(5,2) ,\n    FOREIGN KEY(accountID) REFERENCES Accounts(accountID));\n\nINSERT INTO \"Accounts\" (accountID,customerID,balance) VALUES (1,1,1000.0),(2,2,-500.0),(3,3,2000.0),(4,4,-300.0),(5,5,500.0);\nINSERT INTO \"Customers\" (customerID,firstName,lastName,dateOfBirth,address) VALUES (1,'John','Doe','1987-06-12','New York'),(2,'Jane','Smith','1990-05-15','Los Angeles'),(3,'Tom','Nelson','1975-08-18','Chicago'),(4,'Alice','Williams','1985-09-20','Houston'),(5,'Bob','Jackson','1992-11-22','Seattle');\nINSERT INTO \"Mortgages\" (mortgageID,accountID,loanType,principalAmount,annualInterestRate,repaymentPeriod) VALUES (1,1,'Mortgage',100000.0,0.05,'30'),(2,2,'Mortgage',200000.0,0.06,'25'),(3,3,'Home Equity Loan',50000.0,0.04,'20'),(4,4,'Home Equity Loan',30000.0,0.05,'30'),(5,5,'Mortgage',150000.0,0.07,'15');\nINSERT INTO \"SavingsAccounts\" (savingsID,accountID,interestRate) VALUES (1,1,0.03),(2,2,0.04),(3,3,0.02),(4,4,0.05),(5,5,0.03);\n",
      "question": "Give me the mortgage amounts and home equity loan amounts with 30 years of repayment. Show them in one table.",
      "gold_queries": [
        "SELECT Mortgages.principalAmount \r\nFROM Mortgages\r\nWHERE (Mortgages.loanType = \"Mortgage\" OR Mortgages.loanType = \"Home Equity Loan\") AND Mortgages.repaymentPeriod = \"30\"",
        "SELECT Mortgages.principalAmount \r\nFROM Mortgages\r\nWHERE Mortgages.loanType = \"Mortgage\" OR Mortgages.loanType = \"Home Equity Loan\" AND Mortgages.repaymentPeriod = \"30\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Combine the data for mortgages and home equity loans with a repayment period of 30 years into a single table, including both principal amounts and loan types.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT loanType, principalAmount \nFROM Mortgages \nWHERE repaymentPeriod = '30' \nUNION \nSELECT loanType, principalAmount \nFROM Mortgages \nWHERE loanType = 'Home Equity Loan' AND repaymentPeriod = '30'"
          ]
        },
        {
          "interpretation": "Retrieve all mortgage and home equity loan records with a repayment period of '30'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Mortgages WHERE repaymentPeriod = '30'"
          ]
        },
        {
          "interpretation": "Return a single table containing the principal amounts of all mortgages and home equity loans with a repayment period of 30 years.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT principalAmount FROM Mortgages WHERE repaymentPeriod = 30"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.3333333333333333,
        "f1_score": 0.4,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Banking/attachment_1tab_val_insurance_type/attachment_1tab_val_insurance_type.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Balance REAL DEFAULT 0,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE,\n    Email TEXT UNIQUE\n);\nCREATE TABLE Insurance(\n    InsuranceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    InsuranceType TEXT,\n    PaymentFrequency TEXT ,\n    PremiumAmount REAL,\n    StartDate DATE,\n    EndDate DATE,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Loans(\n    LoanID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Amount BIGINT,\n    InterestRate DECIMAL(5,2) ,\n    TermYears INTEGER ,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Payments(\n    PaymentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    PaymentDate DATE,\n    PaymentAmount REAL,\n    CheckNumber INTEGER,\n    FOREIGN KEY(AccountNumber) REFERENCES Accounts(AccountNumber)\n);\n\nINSERT INTO \"Accounts\" (AccountNumber,CustomerID,Balance) VALUES (1,1,500.0),(2,2,1000.0);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,DateOfBirth,Email) VALUES (1,'John','Doe','1980-06-17','john.doe@gmail.com'),(2,'Jane','Smith','1985-03-19','jane.smith@yahoo.com');\nINSERT INTO \"Insurance\" (InsuranceID,CustomerID,InsuranceType,PaymentFrequency,PremiumAmount,StartDate,EndDate) VALUES (1,1,'Pet Insurance','Monthly',15.0,'2021-01-01','2021-12-31'),(2,1,'Pet Insurance','Quarterly',45.0,'2021-01-01','2021-12-31'),(3,2,'Disability Insurance','Monthly',20.0,'2021-01-01','2021-12-31'),(4,2,'Disability Insurance','Annually',200.0,'2021-01-01','2022-12-31');\nINSERT INTO \"Loans\" (LoanID,CustomerID,Amount,InterestRate,TermYears) VALUES (1,1,20000,0.05,5),(2,2,15000,0.04,3);\nINSERT INTO \"Payments\" (PaymentID,AccountNumber,PaymentDate,PaymentAmount,CheckNumber) VALUES (1,1,'2021-01-15',1000.0,12345),(2,1,'2021-02-15',1500.0,67890),(3,2,'2021-01-15',500.0,123456),(4,2,'2021-02-15',500.0,67890);\n",
      "question": "Show all the premium amount, for both pet and disability insurance plans, with monthly payments. Show them in one table.",
      "gold_queries": [
        "SELECT Insurance.PremiumAmount \r\nFROM Insurance\r\nWHERE (Insurance.InsuranceType = \"Pet Insurance\" OR Insurance.InsuranceType = \"Disability Insurance\") AND Insurance.PaymentFrequency = \"Monthly\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Combine retrieved premium amounts for pet and disability insurance with monthly payment frequency into a single table.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT PremiumAmount FROM Insurance WHERE InsuranceType = 'Pet Insurance' AND PaymentFrequency = 'Monthly'\nUNION ALL\nSELECT PremiumAmount FROM Insurance WHERE InsuranceType = 'Disability Insurance' AND PaymentFrequency = 'Monthly'"
          ]
        },
        {
          "interpretation": "Retrieve all premium amounts for pet insurance plans with monthly payment frequency.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT PremiumAmount FROM Insurance WHERE InsuranceType = 'Pet Insurance' AND PaymentFrequency = 'Monthly'"
          ]
        },
        {
          "interpretation": "Retrieve all premium amounts for disability insurance plans with monthly payment frequency.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT PremiumAmount FROM Insurance WHERE InsuranceType = 'Disability Insurance' AND PaymentFrequency = 'Monthly'"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Banking/attachment_1tab_val_insurance_type/attachment_1tab_val_insurance_type.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Balance REAL DEFAULT 0,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE,\n    Email TEXT UNIQUE\n);\nCREATE TABLE Insurance(\n    InsuranceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    InsuranceType TEXT,\n    PaymentFrequency TEXT ,\n    PremiumAmount REAL,\n    StartDate DATE,\n    EndDate DATE,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Loans(\n    LoanID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Amount BIGINT,\n    InterestRate DECIMAL(5,2) ,\n    TermYears INTEGER ,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Payments(\n    PaymentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    PaymentDate DATE,\n    PaymentAmount REAL,\n    CheckNumber INTEGER,\n    FOREIGN KEY(AccountNumber) REFERENCES Accounts(AccountNumber)\n);\n\nINSERT INTO \"Accounts\" (AccountNumber,CustomerID,Balance) VALUES (1,1,500.0),(2,2,1000.0);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,DateOfBirth,Email) VALUES (1,'John','Doe','1980-06-17','john.doe@gmail.com'),(2,'Jane','Smith','1985-03-19','jane.smith@yahoo.com');\nINSERT INTO \"Insurance\" (InsuranceID,CustomerID,InsuranceType,PaymentFrequency,PremiumAmount,StartDate,EndDate) VALUES (1,1,'Pet Insurance','Monthly',15.0,'2021-01-01','2021-12-31'),(2,1,'Pet Insurance','Quarterly',45.0,'2021-01-01','2021-12-31'),(3,2,'Disability Insurance','Monthly',20.0,'2021-01-01','2021-12-31'),(4,2,'Disability Insurance','Annually',200.0,'2021-01-01','2022-12-31');\nINSERT INTO \"Loans\" (LoanID,CustomerID,Amount,InterestRate,TermYears) VALUES (1,1,20000,0.05,5),(2,2,15000,0.04,3);\nINSERT INTO \"Payments\" (PaymentID,AccountNumber,PaymentDate,PaymentAmount,CheckNumber) VALUES (1,1,'2021-01-15',1000.0,12345),(2,1,'2021-02-15',1500.0,67890),(3,2,'2021-01-15',500.0,123456),(4,2,'2021-02-15',500.0,67890);\n",
      "question": "What is the amount of all the pet insurance and disability insurance which are charged monthly? Show them in one table.",
      "gold_queries": [
        "SELECT Insurance.PremiumAmount \r\nFROM Insurance\r\nWHERE (Insurance.InsuranceType = \"Pet Insurance\" OR Insurance.InsuranceType = \"Disability Insurance\") AND Insurance.PaymentFrequency = \"Monthly\"",
        "SELECT Insurance.PremiumAmount \r\nFROM Insurance\r\nWHERE Insurance.InsuranceType = \"Pet Insurance\" OR Insurance.InsuranceType = \"Disability Insurance\" AND Insurance.PaymentFrequency = \"Monthly\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List all monthly pet insurance and disability insurance premiums in a single table.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT PremiumAmount FROM Insurance WHERE InsuranceType = 'Pet Insurance' AND PaymentFrequency = 'Monthly' UNION SELECT PremiumAmount FROM Insurance WHERE InsuranceType = 'Disability Insurance' AND PaymentFrequency = 'Monthly'"
          ]
        },
        {
          "interpretation": "Show the total monthly premium for each type of monthly insurance (pet and disability) in a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT InsuranceType, SUM(PremiumAmount) AS TotalMonthlyPremium\nFROM Insurance\nWHERE PaymentFrequency = 'Monthly'\nGROUP BY InsuranceType"
          ]
        },
        {
          "interpretation": "Group monthly pet insurance and disability insurance premiums by insurance type.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT InsuranceType, SUM(PremiumAmount) AS TotalPremium\nFROM Insurance\nWHERE InsuranceType IN ('Pet Insurance', 'Disability Insurance')\nGROUP BY InsuranceType"
          ]
        },
        {
          "interpretation": "Retrieve the total monthly premium amounts for all pet insurance policies.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT SUM(PremiumAmount) AS TotalMonthlyPremium FROM Insurance WHERE InsuranceType = 'Pet Insurance' AND PaymentFrequency = 'Monthly'"
          ]
        },
        {
          "interpretation": "Retrieve the total monthly premium amounts for all disability insurance policies.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT SUM(PremiumAmount) AS TotalMonthlyPremium\nFROM Insurance\nWHERE InsuranceType = 'Disability Insurance' AND PaymentFrequency = 'Monthly'"
          ]
        },
        {
          "interpretation": "Calculate the combined total monthly premium amounts for pet insurance and disability insurance.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT SUM(PremiumAmount) \nFROM Insurance \nWHERE InsuranceType IN ('Pet Insurance', 'Disability Insurance')"
          ]
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.16666666666666666,
        "f1_score": 0.25,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Banking/attachment_1tab_val_insurance_type/attachment_1tab_val_insurance_type.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Balance REAL DEFAULT 0,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE,\n    Email TEXT UNIQUE\n);\nCREATE TABLE Insurance(\n    InsuranceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    InsuranceType TEXT,\n    PaymentFrequency TEXT ,\n    PremiumAmount REAL,\n    StartDate DATE,\n    EndDate DATE,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Loans(\n    LoanID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Amount BIGINT,\n    InterestRate DECIMAL(5,2) ,\n    TermYears INTEGER ,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Payments(\n    PaymentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    PaymentDate DATE,\n    PaymentAmount REAL,\n    CheckNumber INTEGER,\n    FOREIGN KEY(AccountNumber) REFERENCES Accounts(AccountNumber)\n);\n\nINSERT INTO \"Accounts\" (AccountNumber,CustomerID,Balance) VALUES (1,1,500.0),(2,2,1000.0);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,DateOfBirth,Email) VALUES (1,'John','Doe','1980-06-17','john.doe@gmail.com'),(2,'Jane','Smith','1985-03-19','jane.smith@yahoo.com');\nINSERT INTO \"Insurance\" (InsuranceID,CustomerID,InsuranceType,PaymentFrequency,PremiumAmount,StartDate,EndDate) VALUES (1,1,'Pet Insurance','Monthly',15.0,'2021-01-01','2021-12-31'),(2,1,'Pet Insurance','Quarterly',45.0,'2021-01-01','2021-12-31'),(3,2,'Disability Insurance','Monthly',20.0,'2021-01-01','2021-12-31'),(4,2,'Disability Insurance','Annually',200.0,'2021-01-01','2022-12-31');\nINSERT INTO \"Loans\" (LoanID,CustomerID,Amount,InterestRate,TermYears) VALUES (1,1,20000,0.05,5),(2,2,15000,0.04,3);\nINSERT INTO \"Payments\" (PaymentID,AccountNumber,PaymentDate,PaymentAmount,CheckNumber) VALUES (1,1,'2021-01-15',1000.0,12345),(2,1,'2021-02-15',1500.0,67890),(3,2,'2021-01-15',500.0,123456),(4,2,'2021-02-15',500.0,67890);\n",
      "question": "Show all the pet insurance premium amounts, also show the monthly disability insurance amounts. Show them in one table.",
      "gold_queries": [
        "SELECT Insurance.PremiumAmount \r\nFROM Insurance\r\nWHERE Insurance.InsuranceType = \"Pet Insurance\" OR Insurance.InsuranceType = \"Disability Insurance\" AND Insurance.PaymentFrequency = \"Monthly\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [],
      "num_unique_execution_results": 0,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0,
        "f1_score": 0,
        "num_queries": 0,
        "num_unique_queries": 0,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Banking/attachment_1tab_val_loan_types/attachment_1tab_val_loan_types.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    accountID INTEGER PRIMARY KEY AUTOINCREMENT,\n    customerID INTEGER,\n    balance REAL ,\n    FOREIGN KEY(customerID) REFERENCES Customers(customerID));\nCREATE TABLE Customers(\n    customerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    dateOfBirth DATE,\n    address TEXT);\nCREATE TABLE Mortgages(\n    mortgageID INTEGER PRIMARY KEY AUTOINCREMENT,\n    accountID INTEGER,\n    loanType TEXT ,\n    principalAmount REAL ,\n    annualInterestRate DECIMAL(5,2) ,\n    repaymentPeriod TEXT,\n    FOREIGN KEY(accountID) REFERENCES Accounts(accountID));\nCREATE TABLE SavingsAccounts(\n    savingsID INTEGER PRIMARY KEY AUTOINCREMENT,\n    accountID INTEGER,\n    interestRate DECIMAL(5,2) ,\n    FOREIGN KEY(accountID) REFERENCES Accounts(accountID));\n\nINSERT INTO \"Accounts\" (accountID,customerID,balance) VALUES (1,1,1000.0),(2,2,-500.0),(3,3,2000.0),(4,4,-300.0),(5,5,500.0);\nINSERT INTO \"Customers\" (customerID,firstName,lastName,dateOfBirth,address) VALUES (1,'John','Doe','1987-06-12','New York'),(2,'Jane','Smith','1990-05-15','Los Angeles'),(3,'Tom','Nelson','1975-08-18','Chicago'),(4,'Alice','Williams','1985-09-20','Houston'),(5,'Bob','Jackson','1992-11-22','Seattle');\nINSERT INTO \"Mortgages\" (mortgageID,accountID,loanType,principalAmount,annualInterestRate,repaymentPeriod) VALUES (1,1,'Mortgage',100000.0,0.05,'30'),(2,2,'Mortgage',200000.0,0.06,'25'),(3,3,'Home Equity Loan',50000.0,0.04,'20'),(4,4,'Home Equity Loan',30000.0,0.05,'30'),(5,5,'Mortgage',150000.0,0.07,'15');\nINSERT INTO \"SavingsAccounts\" (savingsID,accountID,interestRate) VALUES (1,1,0.03),(2,2,0.04),(3,3,0.02),(4,4,0.05),(5,5,0.03);\n",
      "question": "Provide a list of all mortgage principal amounts combined with a list of principal amounts of home equity loans with 30 years of repayment. Show them in one table.",
      "gold_queries": [
        "SELECT Mortgages.principalAmount \r\nFROM Mortgages\r\nWHERE Mortgages.loanType = \"Mortgage\" OR Mortgages.loanType = \"Home Equity Loan\" AND Mortgages.repaymentPeriod = \"30\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Show, in a single table, a combined list of mortgage principal amounts and principal amounts of home equity loans with a repayment period of 30 years.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT principalAmount FROM Mortgages WHERE loanType = 'Mortgage' OR (loanType = 'Home Equity Loan' AND repaymentPeriod = '30')"
          ]
        },
        {
          "interpretation": "Create a table that presents both mortgage principal amounts and principal amounts of home equity loans with 30-year repayment periods, merging these lists.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT principalAmount FROM Mortgages WHERE loanType = 'Mortgage' AND repaymentPeriod = '30'\nUNION\nSELECT principalAmount FROM Mortgages WHERE loanType = 'Home Equity Loan' AND repaymentPeriod = '30'"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Banking/attachment_1tab_val_loan_types/attachment_1tab_val_loan_types.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    accountID INTEGER PRIMARY KEY AUTOINCREMENT,\n    customerID INTEGER,\n    balance REAL ,\n    FOREIGN KEY(customerID) REFERENCES Customers(customerID));\nCREATE TABLE Customers(\n    customerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    dateOfBirth DATE,\n    address TEXT);\nCREATE TABLE Mortgages(\n    mortgageID INTEGER PRIMARY KEY AUTOINCREMENT,\n    accountID INTEGER,\n    loanType TEXT ,\n    principalAmount REAL ,\n    annualInterestRate DECIMAL(5,2) ,\n    repaymentPeriod TEXT,\n    FOREIGN KEY(accountID) REFERENCES Accounts(accountID));\nCREATE TABLE SavingsAccounts(\n    savingsID INTEGER PRIMARY KEY AUTOINCREMENT,\n    accountID INTEGER,\n    interestRate DECIMAL(5,2) ,\n    FOREIGN KEY(accountID) REFERENCES Accounts(accountID));\n\nINSERT INTO \"Accounts\" (accountID,customerID,balance) VALUES (1,1,1000.0),(2,2,-500.0),(3,3,2000.0),(4,4,-300.0),(5,5,500.0);\nINSERT INTO \"Customers\" (customerID,firstName,lastName,dateOfBirth,address) VALUES (1,'John','Doe','1987-06-12','New York'),(2,'Jane','Smith','1990-05-15','Los Angeles'),(3,'Tom','Nelson','1975-08-18','Chicago'),(4,'Alice','Williams','1985-09-20','Houston'),(5,'Bob','Jackson','1992-11-22','Seattle');\nINSERT INTO \"Mortgages\" (mortgageID,accountID,loanType,principalAmount,annualInterestRate,repaymentPeriod) VALUES (1,1,'Mortgage',100000.0,0.05,'30'),(2,2,'Mortgage',200000.0,0.06,'25'),(3,3,'Home Equity Loan',50000.0,0.04,'20'),(4,4,'Home Equity Loan',30000.0,0.05,'30'),(5,5,'Mortgage',150000.0,0.07,'15');\nINSERT INTO \"SavingsAccounts\" (savingsID,accountID,interestRate) VALUES (1,1,0.03),(2,2,0.04),(3,3,0.02),(4,4,0.05),(5,5,0.03);\n",
      "question": "What is the principal amount of a mortgage with 30 years of repayment and what is the principal amount of a home equity loan with the same repayment period? Show them in one table.",
      "gold_queries": [
        "SELECT Mortgages.principalAmount \r\nFROM Mortgages\r\nWHERE (Mortgages.loanType = \"Mortgage\" OR Mortgages.loanType = \"Home Equity Loan\") AND Mortgages.repaymentPeriod = \"30\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Find the mortgage with the highest principal amount and the home equity loan with the highest principal amount, both having a 30-year repayment period.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT loanType, principalAmount \nFROM Mortgages \nWHERE (loanType = 'Mortgage' AND principalAmount = (SELECT MAX(principalAmount) FROM Mortgages WHERE loanType = 'Mortgage' AND repaymentPeriod = '30')) \n   OR (loanType = 'Home Equity Loan' AND principalAmount = (SELECT MAX(principalAmount) FROM Mortgages WHERE loanType = 'Home Equity Loan' AND repaymentPeriod = '30')) \nAND repaymentPeriod = '30'"
          ]
        },
        {
          "interpretation": "Calculate the average principal amount of mortgages and home equity loans with a 30-year repayment period.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AVG(principalAmount) FROM Mortgages WHERE repaymentPeriod = '30'"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Banking/attachment_2tab_val_product/attachment_2tab_val_product.sqlite",
      "db_dump": "CREATE TABLE \"Checking_Accounts\"(\n    AccountID INTEGER PRIMARY KEY, `AccountNumber` INTEGER,\n    CustomerName TEXT,\n    OpenDate DATE,\n    Balance REAL DEFAULT 0.0,\n    OverdraftLimit REAL DEFAULT -500.0,\n    Interest_Rate TEXT);\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE,\n    Email TEXT UNIQUE);\nCREATE TABLE Loans(\n    LoanID INTEGER PRIMARY KEY,\n    CustomerID INTEGER,\n    Amount BIGINT,\n    StartDate DATE,\n    EndDate DATE,\n    Rate DECIMAL(8,2),\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE \"Savings_Accounts\"(\n    AccountID INTEGER PRIMARY KEY, \"AccountNumber\" INTEGER,\n    CustomerName TEXT,\n    OpenDate DATE,\n    Balance REAL DEFAULT 0.0,\n    Interest_Rate TEXT);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY,\n    AccountID INTEGER,\n    Type TEXT ,\n    Amount REAL,\n    DateAndTime TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY(AccountID) REFERENCES Savings_Accounts(AccountID),\n    FOREIGN KEY(AccountID) REFERENCES Checking_Accounts(AccountID));\n\nINSERT INTO \"Checking_Accounts\" (AccountID,AccountNumber,CustomerName,OpenDate,Balance,OverdraftLimit,Interest_Rate) VALUES (1,123,'John Doe','2023-01-01',500.0,250.0,'1%'),(2,345,'Jane Smith','2023-01-01',750.0,350.0,'2%');\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,DateOfBirth,Email) VALUES (1,'John','Doe','1990-01-01','john.doe@example.com'),(2,'Jane','Smith','1992-01-01','jane.smith@example.com');\nINSERT INTO \"Loans\" (LoanID,CustomerID,Amount,StartDate,EndDate,Rate) VALUES (1,1,5000,'2023-01-01','2026-01-01',4.5),(2,2,10000,'2023-01-01','2028-01-01',4.75);\nINSERT INTO \"Savings_Accounts\" (AccountID,AccountNumber,CustomerName,OpenDate,Balance,Interest_Rate) VALUES (1,567,'John Doe','2023-01-01',1000.0,'1%'),(2,789,'Jane Smith','2023-01-01',2000.0,'2%');\nINSERT INTO \"Transactions\" (TransactionID,AccountID,Type,Amount,DateAndTime) VALUES (1,1,'Deposit',500.0,'2023-01-01 12:00:00'),(2,2,'Withdrawal',250.0,'2023-01-01 13:00:00');\n",
      "question": "Provide a list of all saving accounts combined with a list of checking accounts with an interest rate of 1%. Show them in one table.",
      "gold_queries": [
        "SELECT Savings_Accounts.AccountNumber\r\nFROM Savings_Accounts\r\nUNION\r\nSELECT Checking_Accounts.AccountNumber\r\nFROM Checking_Accounts\r\nWHERE Checking_Accounts.Interest_Rate = \"1%\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Display a combined table containing all savings accounts and checking accounts having an interest rate of 1%.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AccountID, AccountNumber, CustomerName, OpenDate, Balance, Interest_Rate FROM Savings_Accounts WHERE Interest_Rate = '1%' UNION SELECT AccountID, AccountNumber, CustomerName, OpenDate, Balance, Interest_Rate FROM Checking_Accounts WHERE Interest_Rate = '1%'"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Banking/attachment_2tab_val_product/attachment_2tab_val_product.sqlite",
      "db_dump": "CREATE TABLE \"Checking_Accounts\"(\n    AccountID INTEGER PRIMARY KEY, `AccountNumber` INTEGER,\n    CustomerName TEXT,\n    OpenDate DATE,\n    Balance REAL DEFAULT 0.0,\n    OverdraftLimit REAL DEFAULT -500.0,\n    Interest_Rate TEXT);\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE,\n    Email TEXT UNIQUE);\nCREATE TABLE Loans(\n    LoanID INTEGER PRIMARY KEY,\n    CustomerID INTEGER,\n    Amount BIGINT,\n    StartDate DATE,\n    EndDate DATE,\n    Rate DECIMAL(8,2),\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE \"Savings_Accounts\"(\n    AccountID INTEGER PRIMARY KEY, \"AccountNumber\" INTEGER,\n    CustomerName TEXT,\n    OpenDate DATE,\n    Balance REAL DEFAULT 0.0,\n    Interest_Rate TEXT);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY,\n    AccountID INTEGER,\n    Type TEXT ,\n    Amount REAL,\n    DateAndTime TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY(AccountID) REFERENCES Savings_Accounts(AccountID),\n    FOREIGN KEY(AccountID) REFERENCES Checking_Accounts(AccountID));\n\nINSERT INTO \"Checking_Accounts\" (AccountID,AccountNumber,CustomerName,OpenDate,Balance,OverdraftLimit,Interest_Rate) VALUES (1,123,'John Doe','2023-01-01',500.0,250.0,'1%'),(2,345,'Jane Smith','2023-01-01',750.0,350.0,'2%');\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,DateOfBirth,Email) VALUES (1,'John','Doe','1990-01-01','john.doe@example.com'),(2,'Jane','Smith','1992-01-01','jane.smith@example.com');\nINSERT INTO \"Loans\" (LoanID,CustomerID,Amount,StartDate,EndDate,Rate) VALUES (1,1,5000,'2023-01-01','2026-01-01',4.5),(2,2,10000,'2023-01-01','2028-01-01',4.75);\nINSERT INTO \"Savings_Accounts\" (AccountID,AccountNumber,CustomerName,OpenDate,Balance,Interest_Rate) VALUES (1,567,'John Doe','2023-01-01',1000.0,'1%'),(2,789,'Jane Smith','2023-01-01',2000.0,'2%');\nINSERT INTO \"Transactions\" (TransactionID,AccountID,Type,Amount,DateAndTime) VALUES (1,1,'Deposit',500.0,'2023-01-01 12:00:00'),(2,2,'Withdrawal',250.0,'2023-01-01 13:00:00');\n",
      "question": "Which saving accounts have an interest rate of 1% and which checking accounts have the same interest rate? Show them in one table.",
      "gold_queries": [
        "SELECT Savings_Accounts.AccountNumber\r\nFROM Savings_Accounts\r\nWHERE Savings_Accounts.Interest_Rate = \"1%\"\r\nUNION\r\nSELECT Checking_Accounts.AccountNumber\r\nFROM Checking_Accounts\r\nWHERE Checking_Accounts.Interest_Rate = \"1%\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Find all accounts (savings and checking) with a 1% interest rate, displaying them in a merged table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AccountID, AccountNumber, CustomerName, OpenDate, Balance, Interest_Rate FROM Savings_Accounts WHERE Interest_Rate = '1%' UNION SELECT AccountID, AccountNumber, CustomerName, OpenDate, Balance, Interest_Rate FROM Checking_Accounts WHERE Interest_Rate = '1%'"
          ]
        },
        {
          "interpretation": "List savings accounts and checking accounts with a 1% interest rate, combining the results into one unified table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AccountNumber, CustomerName, OpenDate, Balance, Interest_Rate \nFROM Savings_Accounts \nWHERE Interest_Rate = '1%' \nUNION \nSELECT AccountNumber, CustomerName, OpenDate, Balance, Interest_Rate \nFROM Checking_Accounts \nWHERE Interest_Rate = '1%'"
          ]
        },
        {
          "interpretation": "Retrieve savings and checking accounts with a 1% interest rate and present them side-by-side in a table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT s.AccountNumber AS Savings_AccountNumber, s.Balance AS Savings_Balance, c.AccountNumber AS Checking_AccountNumber, c.Balance AS Checking_Balance\nFROM Savings_Accounts s\nFULL OUTER JOIN Checking_Accounts c\nON s.CustomerName = c.CustomerName\nWHERE s.Interest_Rate = '1%' AND c.Interest_Rate = '1%'"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Banking/attachment_2tab_val_product/attachment_2tab_val_product.sqlite",
      "db_dump": "CREATE TABLE \"Checking_Accounts\"(\n    AccountID INTEGER PRIMARY KEY, `AccountNumber` INTEGER,\n    CustomerName TEXT,\n    OpenDate DATE,\n    Balance REAL DEFAULT 0.0,\n    OverdraftLimit REAL DEFAULT -500.0,\n    Interest_Rate TEXT);\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE,\n    Email TEXT UNIQUE);\nCREATE TABLE Loans(\n    LoanID INTEGER PRIMARY KEY,\n    CustomerID INTEGER,\n    Amount BIGINT,\n    StartDate DATE,\n    EndDate DATE,\n    Rate DECIMAL(8,2),\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE \"Savings_Accounts\"(\n    AccountID INTEGER PRIMARY KEY, \"AccountNumber\" INTEGER,\n    CustomerName TEXT,\n    OpenDate DATE,\n    Balance REAL DEFAULT 0.0,\n    Interest_Rate TEXT);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY,\n    AccountID INTEGER,\n    Type TEXT ,\n    Amount REAL,\n    DateAndTime TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY(AccountID) REFERENCES Savings_Accounts(AccountID),\n    FOREIGN KEY(AccountID) REFERENCES Checking_Accounts(AccountID));\n\nINSERT INTO \"Checking_Accounts\" (AccountID,AccountNumber,CustomerName,OpenDate,Balance,OverdraftLimit,Interest_Rate) VALUES (1,123,'John Doe','2023-01-01',500.0,250.0,'1%'),(2,345,'Jane Smith','2023-01-01',750.0,350.0,'2%');\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,DateOfBirth,Email) VALUES (1,'John','Doe','1990-01-01','john.doe@example.com'),(2,'Jane','Smith','1992-01-01','jane.smith@example.com');\nINSERT INTO \"Loans\" (LoanID,CustomerID,Amount,StartDate,EndDate,Rate) VALUES (1,1,5000,'2023-01-01','2026-01-01',4.5),(2,2,10000,'2023-01-01','2028-01-01',4.75);\nINSERT INTO \"Savings_Accounts\" (AccountID,AccountNumber,CustomerName,OpenDate,Balance,Interest_Rate) VALUES (1,567,'John Doe','2023-01-01',1000.0,'1%'),(2,789,'Jane Smith','2023-01-01',2000.0,'2%');\nINSERT INTO \"Transactions\" (TransactionID,AccountID,Type,Amount,DateAndTime) VALUES (1,1,'Deposit',500.0,'2023-01-01 12:00:00'),(2,2,'Withdrawal',250.0,'2023-01-01 13:00:00');\n",
      "question": "List saving accounts and checking accounts with an interest rate of 1%. Show them in one table.",
      "gold_queries": [
        "SELECT Savings_Accounts.AccountNumber\r\nFROM Savings_Accounts\r\nWHERE Savings_Accounts.Interest_Rate = \"1%\"\r\nUNION\r\nSELECT Checking_Accounts.AccountNumber\r\nFROM Checking_Accounts\r\nWHERE Checking_Accounts.Interest_Rate = \"1%\"",
        "SELECT Savings_Accounts.AccountNumber\r\nFROM Savings_Accounts\r\nUNION\r\nSELECT Checking_Accounts.AccountNumber\r\nFROM Checking_Accounts\r\nWHERE Checking_Accounts.Interest_Rate = \"1%\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Combine data from \"Checking_Accounts\" and \"Savings_Accounts\" tables, filtering for accounts with an interest rate of 1%.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT CustomerName, OpenDate, Balance, Interest_Rate \nFROM Checking_Accounts \nWHERE Interest_Rate = '1%' \nUNION \nSELECT CustomerName, OpenDate, Balance, Interest_Rate \nFROM Savings_Accounts \nWHERE Interest_Rate = '1%'"
          ]
        },
        {
          "interpretation": "Query both \"Checking_Accounts\" and \"Savings_Accounts\" for rows with Interest_Rate equal to '1%', presenting the results in a single, unified table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AccountID, AccountNumber, CustomerName, OpenDate, Balance, Interest_Rate FROM Checking_Accounts WHERE Interest_Rate = '1%' UNION SELECT AccountID, AccountNumber, CustomerName, OpenDate, Balance, Interest_Rate FROM Savings_Accounts WHERE Interest_Rate = '1%'"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Airport/attachment_1tab_ref_airline_types/attachment_1tab_ref_airline_types.sqlite",
      "db_dump": "CREATE TABLE Airlines(\n    id INTEGER PRIMARY KEY,\n    airline_name TEXT,\n    type_of_alliance TEXT ,\n    home_airport_id INTEGER,\n    FOREIGN KEY(home_airport_id) REFERENCES Airports(id));\nCREATE TABLE Airports(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    city TEXT,\n    country TEXT,\n    latitude REAL,\n    longitude REAL);\nCREATE TABLE Assignments(\n    assignment_id INTEGER PRIMARY KEY,\n    flight_number INTEGER,\n    pilot_license_number INTEGER,\n    FOREIGN KEY(flight_number) REFERENCES Flights(flight_number),\n    FOREIGN KEY(pilot_license_number) REFERENCES Pilots(pilot_license_number) );\nCREATE TABLE Flights(\n    flight_number INTEGER PRIMARY KEY,\n    departure_time DATETIME,\n    arrival_time DATETIME,\n    airline_id INTEGER,\n    aircraft_model TEXT,\n    source_airport_id INTEGER,\n    destination_airport_id INTEGER,\n    FOREIGN KEY(airline_id) REFERENCES Airlines(id),\n    FOREIGN KEY(source_airport_id) REFERENCES Airports(id),\n    FOREIGN KEY(destination_airport_id) REFERENCES Airports(id));\nCREATE TABLE Pilots(\n    pilot_license_number INTEGER PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    date_of_birth DATE,\n    rating_level TEXT  );\n\nINSERT INTO \"Airlines\" (id,airline_name,type_of_alliance,home_airport_id) VALUES (1,'Alliance Airways','Airline Alliance',1),(2,'Budget Airlines','Airline Alliance',2),(3,'Fly High Independent','Independent Carrier',3),(4,'Global Travellers','Independent Carrier',4),(5,'Oceanic Flyers','No Alliance',5);\nINSERT INTO \"Airports\" (id,name,city,country,latitude,longitude) VALUES (1,'John F Kennedy International','New York City','USA',40.641987,-73.778604),(2,'Los Angeles International','Los Angeles','USA',33.944826,-118.405889),(3,'Heathrow Airport','London','UK',51.477025,-0.461866),(4,'Dubai International','Dubai','UAE',25.259648,55.285619),(5,'Tokyo Haneda','Tokyo','Japan',35.601194,139.737522);\nINSERT INTO \"Assignments\" (assignment_id,flight_number,pilot_license_number) VALUES (1,1,1),(2,1,2),(3,2,3),(4,2,4),(5,3,1);\nINSERT INTO \"Flights\" (flight_number,departure_time,arrival_time,airline_id,aircraft_model,source_airport_id,destination_airport_id) VALUES (1,'2022-01-01 10:00:00','2022-01-01 14:00:00',1,'Airbus A320',1,2),(2,'2022-01-01 12:00:00','2022-01-01 17:00:00',2,'Boeing B737',3,4),(3,'2022-01-02 08:00:00','2022-01-02 12:00:00',3,'Airbus A320',4,5),(4,'2022-01-02 10:00:00','2022-01-02 15:00:00',4,'Boeing B787',5,1),(5,'2022-01-03 11:00:00','2022-01-03 16:00:00',5,'Airbus A320',2,3);\nINSERT INTO \"Pilots\" (pilot_license_number,first_name,last_name,date_of_birth,rating_level) VALUES (1,'John','Smith','1990-01-01','A'),(2,'Jane','Doe','1985-05-05','A'),(3,'Alice','Wright','1989-02-12','B'),(4,'Bob','Johnson','1992-03-13','C');\n",
      "question": "Show all the alliance airlines and also show the independent carriers but only with flights using the Airbus A320. Show them in one table.",
      "gold_queries": [
        "SELECT Airlines.airline_name \r\nFROM Airlines JOIN Flights ON Airlines.id = Flights.airline_id\r\nWHERE Airlines.type_of_alliance = \"Airline Alliance\" OR Airlines.type_of_alliance = \"Independent Carrier\" AND Flights.aircraft_model = \"Airbus A320\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Select a.airline_name,a.type_of_alliance,f.flight_number,f.departure_time,f.arrival_time,f.source_airport_id,f.destination_airport_id",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT a.airline_name, a.type_of_alliance, f.flight_number, f.departure_time, f.arrival_time, f.source_airport_id, f.destination_airport_id\nFROM Airlines a\nJOIN Flights f ON a.id = f.airline_id"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Airport/attachment_1tab_ref_airline_types/attachment_1tab_ref_airline_types.sqlite",
      "db_dump": "CREATE TABLE Airlines(\n    id INTEGER PRIMARY KEY,\n    airline_name TEXT,\n    type_of_alliance TEXT ,\n    home_airport_id INTEGER,\n    FOREIGN KEY(home_airport_id) REFERENCES Airports(id));\nCREATE TABLE Airports(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    city TEXT,\n    country TEXT,\n    latitude REAL,\n    longitude REAL);\nCREATE TABLE Assignments(\n    assignment_id INTEGER PRIMARY KEY,\n    flight_number INTEGER,\n    pilot_license_number INTEGER,\n    FOREIGN KEY(flight_number) REFERENCES Flights(flight_number),\n    FOREIGN KEY(pilot_license_number) REFERENCES Pilots(pilot_license_number) );\nCREATE TABLE Flights(\n    flight_number INTEGER PRIMARY KEY,\n    departure_time DATETIME,\n    arrival_time DATETIME,\n    airline_id INTEGER,\n    aircraft_model TEXT,\n    source_airport_id INTEGER,\n    destination_airport_id INTEGER,\n    FOREIGN KEY(airline_id) REFERENCES Airlines(id),\n    FOREIGN KEY(source_airport_id) REFERENCES Airports(id),\n    FOREIGN KEY(destination_airport_id) REFERENCES Airports(id));\nCREATE TABLE Pilots(\n    pilot_license_number INTEGER PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    date_of_birth DATE,\n    rating_level TEXT  );\n\nINSERT INTO \"Airlines\" (id,airline_name,type_of_alliance,home_airport_id) VALUES (1,'Alliance Airways','Airline Alliance',1),(2,'Budget Airlines','Airline Alliance',2),(3,'Fly High Independent','Independent Carrier',3),(4,'Global Travellers','Independent Carrier',4),(5,'Oceanic Flyers','No Alliance',5);\nINSERT INTO \"Airports\" (id,name,city,country,latitude,longitude) VALUES (1,'John F Kennedy International','New York City','USA',40.641987,-73.778604),(2,'Los Angeles International','Los Angeles','USA',33.944826,-118.405889),(3,'Heathrow Airport','London','UK',51.477025,-0.461866),(4,'Dubai International','Dubai','UAE',25.259648,55.285619),(5,'Tokyo Haneda','Tokyo','Japan',35.601194,139.737522);\nINSERT INTO \"Assignments\" (assignment_id,flight_number,pilot_license_number) VALUES (1,1,1),(2,1,2),(3,2,3),(4,2,4),(5,3,1);\nINSERT INTO \"Flights\" (flight_number,departure_time,arrival_time,airline_id,aircraft_model,source_airport_id,destination_airport_id) VALUES (1,'2022-01-01 10:00:00','2022-01-01 14:00:00',1,'Airbus A320',1,2),(2,'2022-01-01 12:00:00','2022-01-01 17:00:00',2,'Boeing B737',3,4),(3,'2022-01-02 08:00:00','2022-01-02 12:00:00',3,'Airbus A320',4,5),(4,'2022-01-02 10:00:00','2022-01-02 15:00:00',4,'Boeing B787',5,1),(5,'2022-01-03 11:00:00','2022-01-03 16:00:00',5,'Airbus A320',2,3);\nINSERT INTO \"Pilots\" (pilot_license_number,first_name,last_name,date_of_birth,rating_level) VALUES (1,'John','Smith','1990-01-01','A'),(2,'Jane','Doe','1985-05-05','A'),(3,'Alice','Wright','1989-02-12','B'),(4,'Bob','Johnson','1992-03-13','C');\n",
      "question": "Show all the flights using an Airbus A320 for airlines that are either with the alliance airlines or are independent carriers. Show them in one table.",
      "gold_queries": [
        "SELECT Airlines.airline_name \r\nFROM Airlines JOIN Flights ON Airlines.id = Flights.airline_id\r\nWHERE (Airlines.type_of_alliance = \"Airline Alliance\" OR Airlines.type_of_alliance = \"Independent Carrier\") AND Flights.aircraft_model = \"Airbus A320\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Query the database for flights operated by Airbus A320s, filtering by airlines that are part of 'Airline Alliance' or classified as 'Independent Carrier'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Flights.flight_number, Flights.departure_time, Flights.arrival_time, Flights.airline_id, Flights.aircraft_model, Flights.source_airport_id, Flights.destination_airport_id\nFROM Flights\nJOIN Airlines ON Flights.airline_id = Airlines.id\nWHERE Flights.aircraft_model = 'Airbus A320'\n  AND (Airlines.type_of_alliance = 'Airline Alliance' OR Airlines.type_of_alliance = 'Independent Carrier')"
          ]
        },
        {
          "interpretation": "Retrieve flights with 'Airbus A320' aircraft model where the airline belongs to either 'Airline Alliance' or 'Independent Carrier' type.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Flights.flight_number, Flights.departure_time, Flights.arrival_time, Flights.airline_id, Flights.source_airport_id, Flights.destination_airport_id\nFROM Flights\nJOIN Airlines ON Flights.airline_id = Airlines.id\nWHERE Flights.aircraft_model = 'Airbus A320' AND Airlines.type_of_alliance IN ('Airline Alliance', 'Independent Carrier')"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Airport/attachment_1tab_ref_airline_types/attachment_1tab_ref_airline_types.sqlite",
      "db_dump": "CREATE TABLE Airlines(\n    id INTEGER PRIMARY KEY,\n    airline_name TEXT,\n    type_of_alliance TEXT ,\n    home_airport_id INTEGER,\n    FOREIGN KEY(home_airport_id) REFERENCES Airports(id));\nCREATE TABLE Airports(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    city TEXT,\n    country TEXT,\n    latitude REAL,\n    longitude REAL);\nCREATE TABLE Assignments(\n    assignment_id INTEGER PRIMARY KEY,\n    flight_number INTEGER,\n    pilot_license_number INTEGER,\n    FOREIGN KEY(flight_number) REFERENCES Flights(flight_number),\n    FOREIGN KEY(pilot_license_number) REFERENCES Pilots(pilot_license_number) );\nCREATE TABLE Flights(\n    flight_number INTEGER PRIMARY KEY,\n    departure_time DATETIME,\n    arrival_time DATETIME,\n    airline_id INTEGER,\n    aircraft_model TEXT,\n    source_airport_id INTEGER,\n    destination_airport_id INTEGER,\n    FOREIGN KEY(airline_id) REFERENCES Airlines(id),\n    FOREIGN KEY(source_airport_id) REFERENCES Airports(id),\n    FOREIGN KEY(destination_airport_id) REFERENCES Airports(id));\nCREATE TABLE Pilots(\n    pilot_license_number INTEGER PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    date_of_birth DATE,\n    rating_level TEXT  );\n\nINSERT INTO \"Airlines\" (id,airline_name,type_of_alliance,home_airport_id) VALUES (1,'Alliance Airways','Airline Alliance',1),(2,'Budget Airlines','Airline Alliance',2),(3,'Fly High Independent','Independent Carrier',3),(4,'Global Travellers','Independent Carrier',4),(5,'Oceanic Flyers','No Alliance',5);\nINSERT INTO \"Airports\" (id,name,city,country,latitude,longitude) VALUES (1,'John F Kennedy International','New York City','USA',40.641987,-73.778604),(2,'Los Angeles International','Los Angeles','USA',33.944826,-118.405889),(3,'Heathrow Airport','London','UK',51.477025,-0.461866),(4,'Dubai International','Dubai','UAE',25.259648,55.285619),(5,'Tokyo Haneda','Tokyo','Japan',35.601194,139.737522);\nINSERT INTO \"Assignments\" (assignment_id,flight_number,pilot_license_number) VALUES (1,1,1),(2,1,2),(3,2,3),(4,2,4),(5,3,1);\nINSERT INTO \"Flights\" (flight_number,departure_time,arrival_time,airline_id,aircraft_model,source_airport_id,destination_airport_id) VALUES (1,'2022-01-01 10:00:00','2022-01-01 14:00:00',1,'Airbus A320',1,2),(2,'2022-01-01 12:00:00','2022-01-01 17:00:00',2,'Boeing B737',3,4),(3,'2022-01-02 08:00:00','2022-01-02 12:00:00',3,'Airbus A320',4,5),(4,'2022-01-02 10:00:00','2022-01-02 15:00:00',4,'Boeing B787',5,1),(5,'2022-01-03 11:00:00','2022-01-03 16:00:00',5,'Airbus A320',2,3);\nINSERT INTO \"Pilots\" (pilot_license_number,first_name,last_name,date_of_birth,rating_level) VALUES (1,'John','Smith','1990-01-01','A'),(2,'Jane','Doe','1985-05-05','A'),(3,'Alice','Wright','1989-02-12','B'),(4,'Bob','Johnson','1992-03-13','C');\n",
      "question": "Show me all alliance airlines and independent carriers with flights using the Airbus A320. Show them in one table.",
      "gold_queries": [
        "SELECT Airlines.airline_name \r\nFROM Airlines JOIN Flights ON Airlines.id = Flights.airline_id\r\nWHERE (Airlines.type_of_alliance = \"Airline Alliance\" OR Airlines.type_of_alliance = \"Independent Carrier\") AND Flights.aircraft_model = \"Airbus A320\"",
        "SELECT Airlines.airline_name \r\nFROM Airlines JOIN Flights ON Airlines.id = Flights.airline_id\r\nWHERE Airlines.type_of_alliance = \"Airline Alliance\" OR Airlines.type_of_alliance = \"Independent Carrier\" AND Flights.aircraft_model = \"Airbus A320\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [],
      "num_unique_execution_results": 0,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0,
        "f1_score": 0,
        "num_queries": 0,
        "num_unique_queries": 0,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Airport/attachment_1tab_val_airport_accommodations/attachment_1tab_val_airport_accommodations.sqlite",
      "db_dump": "CREATE TABLE Airlines (\n    AirlineID INTEGER PRIMARY KEY,\n    Name VARCHAR(50),\n    Headquarters VARCHAR(50)\n);\nCREATE TABLE AssignPilotToFlight (\n    FlightID INTEGER,\n    PilotID INTEGER,\n    FOREIGN KEY (FlightID) REFERENCES Flights(FlightID),\n    FOREIGN KEY (PilotID) REFERENCES Pilots(PilotID),\n    PRIMARY KEY (FlightID, PilotID)\n);\nCREATE TABLE Flights (\n    FlightID INTEGER PRIMARY KEY,\n    DepartureTime DATETIME,\n    ArrivalTime DATETIME,\n    Origin VARCHAR(2),\n    Destination VARCHAR(2),\n    AircraftType VARCHAR(10),\n    SeatsAvailable INT\n);\nCREATE TABLE Hotels (\n    HotelID INTEGER PRIMARY KEY,\n    Name VARCHAR(50),\n    Location VARCHAR(50),\n    Price DECIMAL(8, 2),\n    AccomodationType VARCHAR(20) \n);\nCREATE TABLE Pilots (\n    PilotID INTEGER PRIMARY KEY,\n    FirstName VARCHAR(20),\n    LastName VARCHAR(20),\n    LicenseNumber VARCHAR(15),\n    DateOfBirth DATE\n);\n\nINSERT INTO \"Airlines\" (AirlineID,Name,Headquarters) VALUES (1,'United Airlines','Chicago'),(2,'Delta Airlines','Atlanta'),(3,'Southwest Airlines','Dallas');\nINSERT INTO \"AssignPilotToFlight\" (FlightID,PilotID) VALUES (1,1),(2,2),(3,3);\nINSERT INTO \"Flights\" (FlightID,DepartureTime,ArrivalTime,Origin,Destination,AircraftType,SeatsAvailable) VALUES (1,'2023-07-01 10:00','2023-07-01 14:00','LA','SF','Boeing 737',100),(2,'2023-07-01 11:00','2023-07-01 15:00','SF','LA','Airbus A320',90),(3,'2023-07-02 08:00','2023-07-02 12:00','NY','MI','Embraer E175',100);\nINSERT INTO \"Hotels\" (HotelID,Name,Location,Price,AccomodationType) VALUES (1,'Airport Hotel','Inside the airport premises',150,'Hotel'),(2,'Sleep Pod','Outside the airport near terminal',150,'Pod'),(3,'Another Airport Hotel','Inside the airport premises',200,'Hotel'),(4,'Another Sleep Pod','Outside the airport near terminal',200,'Pod'),(5,'Grand Plaza','Close to the city center',250,'Resort'),(6,'Economy Inn','Far from the city center',50,'Motel');\nINSERT INTO \"Pilots\" (PilotID,FirstName,LastName,LicenseNumber,DateOfBirth) VALUES (1,'John','Doe','ABCD1234','1980-06-01'),(2,'Jane','Smith','EFGH5678','1990-05-01'),(3,'Alice','Wonderland','XYZL9876','1985-08-01');\n",
      "question": "Provide a list of all hotels and also provide a list of pods that cost 150. Show them in one table.",
      "gold_queries": [
        "SELECT Hotels.Name \r\nFROM Hotels\r\nWHERE Hotels.AccomodationType = \"Hotel\" OR Hotels.AccomodationType = \"Pod\" AND Hotels.Price = 150"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List all hotels and pods with a price of 150, combined in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Location, Price, AccomodationType FROM Hotels WHERE Price = 150 AND AccomodationType IN ('Hotel', 'Pod')"
          ]
        },
        {
          "interpretation": "Display all hotels and pods, including their pricing, with a separate section for each type.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AccomodationType, Name, Price FROM Hotels WHERE AccomodationType IN ('Hotel', 'Pod') ORDER BY AccomodationType, Name"
          ]
        },
        {
          "interpretation": "Show a table with two columns: one for hotels and one for pods, both with a price of 150.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    CASE WHEN AccomodationType = 'Hotel' THEN Name END AS Hotels,\n    CASE WHEN AccomodationType = 'Pod' THEN Name END AS Pods\nFROM Hotels\nWHERE Price = 150"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Airport/attachment_1tab_val_airport_accommodations/attachment_1tab_val_airport_accommodations.sqlite",
      "db_dump": "CREATE TABLE Airlines (\n    AirlineID INTEGER PRIMARY KEY,\n    Name VARCHAR(50),\n    Headquarters VARCHAR(50)\n);\nCREATE TABLE AssignPilotToFlight (\n    FlightID INTEGER,\n    PilotID INTEGER,\n    FOREIGN KEY (FlightID) REFERENCES Flights(FlightID),\n    FOREIGN KEY (PilotID) REFERENCES Pilots(PilotID),\n    PRIMARY KEY (FlightID, PilotID)\n);\nCREATE TABLE Flights (\n    FlightID INTEGER PRIMARY KEY,\n    DepartureTime DATETIME,\n    ArrivalTime DATETIME,\n    Origin VARCHAR(2),\n    Destination VARCHAR(2),\n    AircraftType VARCHAR(10),\n    SeatsAvailable INT\n);\nCREATE TABLE Hotels (\n    HotelID INTEGER PRIMARY KEY,\n    Name VARCHAR(50),\n    Location VARCHAR(50),\n    Price DECIMAL(8, 2),\n    AccomodationType VARCHAR(20) \n);\nCREATE TABLE Pilots (\n    PilotID INTEGER PRIMARY KEY,\n    FirstName VARCHAR(20),\n    LastName VARCHAR(20),\n    LicenseNumber VARCHAR(15),\n    DateOfBirth DATE\n);\n\nINSERT INTO \"Airlines\" (AirlineID,Name,Headquarters) VALUES (1,'United Airlines','Chicago'),(2,'Delta Airlines','Atlanta'),(3,'Southwest Airlines','Dallas');\nINSERT INTO \"AssignPilotToFlight\" (FlightID,PilotID) VALUES (1,1),(2,2),(3,3);\nINSERT INTO \"Flights\" (FlightID,DepartureTime,ArrivalTime,Origin,Destination,AircraftType,SeatsAvailable) VALUES (1,'2023-07-01 10:00','2023-07-01 14:00','LA','SF','Boeing 737',100),(2,'2023-07-01 11:00','2023-07-01 15:00','SF','LA','Airbus A320',90),(3,'2023-07-02 08:00','2023-07-02 12:00','NY','MI','Embraer E175',100);\nINSERT INTO \"Hotels\" (HotelID,Name,Location,Price,AccomodationType) VALUES (1,'Airport Hotel','Inside the airport premises',150,'Hotel'),(2,'Sleep Pod','Outside the airport near terminal',150,'Pod'),(3,'Another Airport Hotel','Inside the airport premises',200,'Hotel'),(4,'Another Sleep Pod','Outside the airport near terminal',200,'Pod'),(5,'Grand Plaza','Close to the city center',250,'Resort'),(6,'Economy Inn','Far from the city center',50,'Motel');\nINSERT INTO \"Pilots\" (PilotID,FirstName,LastName,LicenseNumber,DateOfBirth) VALUES (1,'John','Doe','ABCD1234','1980-06-01'),(2,'Jane','Smith','EFGH5678','1990-05-01'),(3,'Alice','Wonderland','XYZL9876','1985-08-01');\n",
      "question": "List all hotels and pods that cost 150. Show them in one table.",
      "gold_queries": [
        "SELECT Hotels.Name \r\nFROM Hotels\r\nWHERE (Hotels.AccomodationType = \"Hotel\" OR Hotels.AccomodationType = \"Pod\") AND Hotels.Price = 150",
        "SELECT Hotels.Name \r\nFROM Hotels\r\nWHERE Hotels.AccomodationType = \"Hotel\" OR Hotels.AccomodationType = \"Pod\" AND Hotels.Price = 150"
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List hotels and pods with a price of 150.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Location FROM Hotels WHERE Price = 150 AND AccomodationType IN ('Hotel', 'Pod')"
          ]
        },
        {
          "interpretation": "Retrieve and present a combined table of hotels and pods priced at 150.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Location, Price, AccomodationType\nFROM Hotels\nWHERE Price = 150 AND AccomodationType IN ('Hotel', 'Pod')"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Airport/attachment_1tab_val_airport_accommodations/attachment_1tab_val_airport_accommodations.sqlite",
      "db_dump": "CREATE TABLE Airlines (\n    AirlineID INTEGER PRIMARY KEY,\n    Name VARCHAR(50),\n    Headquarters VARCHAR(50)\n);\nCREATE TABLE AssignPilotToFlight (\n    FlightID INTEGER,\n    PilotID INTEGER,\n    FOREIGN KEY (FlightID) REFERENCES Flights(FlightID),\n    FOREIGN KEY (PilotID) REFERENCES Pilots(PilotID),\n    PRIMARY KEY (FlightID, PilotID)\n);\nCREATE TABLE Flights (\n    FlightID INTEGER PRIMARY KEY,\n    DepartureTime DATETIME,\n    ArrivalTime DATETIME,\n    Origin VARCHAR(2),\n    Destination VARCHAR(2),\n    AircraftType VARCHAR(10),\n    SeatsAvailable INT\n);\nCREATE TABLE Hotels (\n    HotelID INTEGER PRIMARY KEY,\n    Name VARCHAR(50),\n    Location VARCHAR(50),\n    Price DECIMAL(8, 2),\n    AccomodationType VARCHAR(20) \n);\nCREATE TABLE Pilots (\n    PilotID INTEGER PRIMARY KEY,\n    FirstName VARCHAR(20),\n    LastName VARCHAR(20),\n    LicenseNumber VARCHAR(15),\n    DateOfBirth DATE\n);\n\nINSERT INTO \"Airlines\" (AirlineID,Name,Headquarters) VALUES (1,'United Airlines','Chicago'),(2,'Delta Airlines','Atlanta'),(3,'Southwest Airlines','Dallas');\nINSERT INTO \"AssignPilotToFlight\" (FlightID,PilotID) VALUES (1,1),(2,2),(3,3);\nINSERT INTO \"Flights\" (FlightID,DepartureTime,ArrivalTime,Origin,Destination,AircraftType,SeatsAvailable) VALUES (1,'2023-07-01 10:00','2023-07-01 14:00','LA','SF','Boeing 737',100),(2,'2023-07-01 11:00','2023-07-01 15:00','SF','LA','Airbus A320',90),(3,'2023-07-02 08:00','2023-07-02 12:00','NY','MI','Embraer E175',100);\nINSERT INTO \"Hotels\" (HotelID,Name,Location,Price,AccomodationType) VALUES (1,'Airport Hotel','Inside the airport premises',150,'Hotel'),(2,'Sleep Pod','Outside the airport near terminal',150,'Pod'),(3,'Another Airport Hotel','Inside the airport premises',200,'Hotel'),(4,'Another Sleep Pod','Outside the airport near terminal',200,'Pod'),(5,'Grand Plaza','Close to the city center',250,'Resort'),(6,'Economy Inn','Far from the city center',50,'Motel');\nINSERT INTO \"Pilots\" (PilotID,FirstName,LastName,LicenseNumber,DateOfBirth) VALUES (1,'John','Doe','ABCD1234','1980-06-01'),(2,'Jane','Smith','EFGH5678','1990-05-01'),(3,'Alice','Wonderland','XYZL9876','1985-08-01');\n",
      "question": "Which hotels that cost 150 and which pods have the same price? Show them in one table.",
      "gold_queries": [
        "SELECT Hotels.Name \r\nFROM Hotels\r\nWHERE (Hotels.AccomodationType = \"Hotel\" OR Hotels.AccomodationType = \"Pod\") AND Hotels.Price = 150"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List hotels priced at 150 and pods priced at the same value, consolidating the results into a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Location, Price, AccomodationType \nFROM Hotels \nWHERE (Price = 150 AND AccomodationType = 'Hotel') \n   OR (Price = 150 AND AccomodationType = 'Pod')"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Entertainment/attachment_1tab_val_audio_format/attachment_1tab_val_audio_format.sqlite",
      "db_dump": "CREATE TABLE EpisodeGuests(\n    id INTEGER PRIMARY KEY,\n    episode_id INTEGER,\n    guest_id INTEGER,\n    role TEXT,\n    appearance_duration INTEGER,\n    FOREIGN KEY(episode_id) REFERENCES Episodes(id),\n    FOREIGN KEY(guest_id) REFERENCES Guests(id)\n);\nCREATE TABLE Episodes(\n    id INTEGER PRIMARY KEY,\n    show_id INTEGER,\n    episode_number INTEGER,\n    release_date DATE,\n    duration INTEGER,\n    description TEXT,\n    FOREIGN KEY(show_id) REFERENCES Shows(id)\n);\nCREATE TABLE Guests(\n    id INTEGER PRIMARY KEY,\n    full_name TEXT,\n    occupation TEXT,\n    guest_on INTEGER,\n    appearance_episode_number INTEGER,\n    FOREIGN KEY(guest_on) REFERENCES Shows(title)\n);\nCREATE TABLE Podcasters(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    location TEXT,\n    years_experience INTEGER\n);\nCREATE TABLE Reviews(\n    id INTEGER PRIMARY KEY,\n    reviewer_name TEXT,\n    rating INTEGER ,\n    comments TEXT,\n    show_id INTEGER,\n    review_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY(show_id) REFERENCES Shows(id)\n);\nCREATE TABLE Shows(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    genre TEXT,\n    network TEXT,\n    audio_format TEXT ,\n    host TEXT,\n    FOREIGN KEY(host) REFERENCES Podcasters(name)\n);\n\nINSERT INTO \"EpisodeGuests\" (id,episode_id,guest_id,role,appearance_duration) VALUES (1,1,1,'Interviewee',25),(2,1,2,'Panelist',25);\nINSERT INTO \"Episodes\" (id,show_id,episode_number,release_date,duration,description) VALUES (1,1,1,'2023-01-01',60,'Episode about comedy.'),(2,2,1,'2023-01-08',60,'Episode about coffee.');\nINSERT INTO \"Guests\" (id,full_name,occupation,guest_on,appearance_episode_number) VALUES (1,'John Smith','Actor','The Alex Johnson Show',1),(2,'Emily Davis','Author','Laughing Matters',1);\nINSERT INTO \"Podcasters\" (id,name,location,years_experience) VALUES (1,'Alex Johnson','New York',10),(2,'Jane Doe','Los Angeles',8);\nINSERT INTO \"Reviews\" (id,reviewer_name,rating,comments,show_id,review_date) VALUES (1,'Alice Brown',5,'Great podcast!',1,'2024-03-07 21:13:47'),(2,'Bob White',4,'Funny episodes.',2,'2024-03-07 21:13:47');\nINSERT INTO \"Shows\" (id,title,genre,network,audio_format,host) VALUES (1,'The Alex Johnson Show','Comedy','ABC','Podcast','Alex Johnson'),(2,'Laughing Matters','Comedy','NBC','Podcast','Jane Doe'),(3,'The Morning Rush','Talk Show','CBS Radio','Radio Show','Alex Johnson'),(4,'Morning Coffee','Talk Show','Fox Radio','Radio Show','Jane Doe');\n",
      "question": "Display podcasts and radio shows with hosts with 10 years of experience. Show them in one table.",
      "gold_queries": [
        "SELECT Shows.title \r\nFROM Shows JOIN Podcasters ON Shows.host = Podcasters.name\r\nWHERE (Shows.audio_format = 'Podcast' OR Shows.audio_format = 'Radio Show') AND Podcasters.years_experience = 10",
        "SELECT Shows.title \r\nFROM Shows JOIN Podcasters ON Shows.host = Podcasters.name\r\nWHERE Shows.audio_format = 'Podcast' OR Shows.audio_format = 'Radio Show' AND Podcasters.years_experience = 10"
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List all podcasts and radio shows that have hosts who have worked for 10 years, grouped into one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.title, S.genre, S.network, S.audio_format, S.host\nFROM Shows S\nJOIN Podcasters P ON S.host = P.name\nWHERE P.years_experience >= 10"
          ]
        },
        {
          "interpretation": "Retrieve a list of podcasts and radio shows with hosts who have worked for 10 years.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.title, S.host \nFROM Shows S \nJOIN Podcasters P ON S.host = P.name \nWHERE P.years_experience = 10"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Entertainment/attachment_1tab_val_audio_format/attachment_1tab_val_audio_format.sqlite",
      "db_dump": "CREATE TABLE EpisodeGuests(\n    id INTEGER PRIMARY KEY,\n    episode_id INTEGER,\n    guest_id INTEGER,\n    role TEXT,\n    appearance_duration INTEGER,\n    FOREIGN KEY(episode_id) REFERENCES Episodes(id),\n    FOREIGN KEY(guest_id) REFERENCES Guests(id)\n);\nCREATE TABLE Episodes(\n    id INTEGER PRIMARY KEY,\n    show_id INTEGER,\n    episode_number INTEGER,\n    release_date DATE,\n    duration INTEGER,\n    description TEXT,\n    FOREIGN KEY(show_id) REFERENCES Shows(id)\n);\nCREATE TABLE Guests(\n    id INTEGER PRIMARY KEY,\n    full_name TEXT,\n    occupation TEXT,\n    guest_on INTEGER,\n    appearance_episode_number INTEGER,\n    FOREIGN KEY(guest_on) REFERENCES Shows(title)\n);\nCREATE TABLE Podcasters(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    location TEXT,\n    years_experience INTEGER\n);\nCREATE TABLE Reviews(\n    id INTEGER PRIMARY KEY,\n    reviewer_name TEXT,\n    rating INTEGER ,\n    comments TEXT,\n    show_id INTEGER,\n    review_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY(show_id) REFERENCES Shows(id)\n);\nCREATE TABLE Shows(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    genre TEXT,\n    network TEXT,\n    audio_format TEXT ,\n    host TEXT,\n    FOREIGN KEY(host) REFERENCES Podcasters(name)\n);\n\nINSERT INTO \"EpisodeGuests\" (id,episode_id,guest_id,role,appearance_duration) VALUES (1,1,1,'Interviewee',25),(2,1,2,'Panelist',25);\nINSERT INTO \"Episodes\" (id,show_id,episode_number,release_date,duration,description) VALUES (1,1,1,'2023-01-01',60,'Episode about comedy.'),(2,2,1,'2023-01-08',60,'Episode about coffee.');\nINSERT INTO \"Guests\" (id,full_name,occupation,guest_on,appearance_episode_number) VALUES (1,'John Smith','Actor','The Alex Johnson Show',1),(2,'Emily Davis','Author','Laughing Matters',1);\nINSERT INTO \"Podcasters\" (id,name,location,years_experience) VALUES (1,'Alex Johnson','New York',10),(2,'Jane Doe','Los Angeles',8);\nINSERT INTO \"Reviews\" (id,reviewer_name,rating,comments,show_id,review_date) VALUES (1,'Alice Brown',5,'Great podcast!',1,'2024-03-07 21:13:47'),(2,'Bob White',4,'Funny episodes.',2,'2024-03-07 21:13:47');\nINSERT INTO \"Shows\" (id,title,genre,network,audio_format,host) VALUES (1,'The Alex Johnson Show','Comedy','ABC','Podcast','Alex Johnson'),(2,'Laughing Matters','Comedy','NBC','Podcast','Jane Doe'),(3,'The Morning Rush','Talk Show','CBS Radio','Radio Show','Alex Johnson'),(4,'Morning Coffee','Talk Show','Fox Radio','Radio Show','Jane Doe');\n",
      "question": "Show a list of all podcasts and also provide a list of radio shows with hosts with 10 years of experience. Show them in one table.",
      "gold_queries": [
        "SELECT Shows.title \r\nFROM Shows JOIN Podcasters ON Shows.host = Podcasters.name\r\nWHERE Shows.audio_format = 'Podcast' OR Shows.audio_format = 'Radio Show' AND Podcasters.years_experience = 10"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Display all podcasts and radio shows in a single table, with a column indicating whether each entry is a podcast or a radio show and a column showing the host's experience.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT s.title, s.genre, s.network, s.audio_format, CASE WHEN s.audio_format = 'Podcast' THEN 'Podcast' ELSE 'Radio Show' END AS type, p.years_experience\nFROM Shows s\nJOIN Podcasters p ON s.host = p.name"
          ]
        },
        {
          "interpretation": "Create a single table containing two separate lists: one listing all podcasts and another listing all radio shows hosted by individuals with 10 years of experience.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT 'Podcast' AS type, title \nFROM Shows \nWHERE audio_format = 'Podcast' AND host IN (\n    SELECT name \n    FROM Podcasters \n    WHERE years_experience = 10\n)\nUNION ALL\nSELECT 'Radio Show' AS type, title \nFROM Shows \nWHERE audio_format = 'Radio Show' AND host IN (\n    SELECT name \n    FROM Podcasters \n    WHERE years_experience = 10\n)"
          ]
        },
        {
          "interpretation": "Show all podcasts and radio shows, along with their hosts, filtering the radio shows by having a host with 10 years of experience.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT s.title, s.host \nFROM Shows s \nJOIN Podcasters p ON s.host = p.name \nWHERE s.audio_format = 'Podcast' \nUNION \nSELECT s.title, s.host \nFROM Shows s \nJOIN Podcasters p ON s.host = p.name \nWHERE s.audio_format = 'Radio Show' AND p.years_experience = 10"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Entertainment/attachment_1tab_val_audio_format/attachment_1tab_val_audio_format.sqlite",
      "db_dump": "CREATE TABLE EpisodeGuests(\n    id INTEGER PRIMARY KEY,\n    episode_id INTEGER,\n    guest_id INTEGER,\n    role TEXT,\n    appearance_duration INTEGER,\n    FOREIGN KEY(episode_id) REFERENCES Episodes(id),\n    FOREIGN KEY(guest_id) REFERENCES Guests(id)\n);\nCREATE TABLE Episodes(\n    id INTEGER PRIMARY KEY,\n    show_id INTEGER,\n    episode_number INTEGER,\n    release_date DATE,\n    duration INTEGER,\n    description TEXT,\n    FOREIGN KEY(show_id) REFERENCES Shows(id)\n);\nCREATE TABLE Guests(\n    id INTEGER PRIMARY KEY,\n    full_name TEXT,\n    occupation TEXT,\n    guest_on INTEGER,\n    appearance_episode_number INTEGER,\n    FOREIGN KEY(guest_on) REFERENCES Shows(title)\n);\nCREATE TABLE Podcasters(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    location TEXT,\n    years_experience INTEGER\n);\nCREATE TABLE Reviews(\n    id INTEGER PRIMARY KEY,\n    reviewer_name TEXT,\n    rating INTEGER ,\n    comments TEXT,\n    show_id INTEGER,\n    review_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY(show_id) REFERENCES Shows(id)\n);\nCREATE TABLE Shows(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    genre TEXT,\n    network TEXT,\n    audio_format TEXT ,\n    host TEXT,\n    FOREIGN KEY(host) REFERENCES Podcasters(name)\n);\n\nINSERT INTO \"EpisodeGuests\" (id,episode_id,guest_id,role,appearance_duration) VALUES (1,1,1,'Interviewee',25),(2,1,2,'Panelist',25);\nINSERT INTO \"Episodes\" (id,show_id,episode_number,release_date,duration,description) VALUES (1,1,1,'2023-01-01',60,'Episode about comedy.'),(2,2,1,'2023-01-08',60,'Episode about coffee.');\nINSERT INTO \"Guests\" (id,full_name,occupation,guest_on,appearance_episode_number) VALUES (1,'John Smith','Actor','The Alex Johnson Show',1),(2,'Emily Davis','Author','Laughing Matters',1);\nINSERT INTO \"Podcasters\" (id,name,location,years_experience) VALUES (1,'Alex Johnson','New York',10),(2,'Jane Doe','Los Angeles',8);\nINSERT INTO \"Reviews\" (id,reviewer_name,rating,comments,show_id,review_date) VALUES (1,'Alice Brown',5,'Great podcast!',1,'2024-03-07 21:13:47'),(2,'Bob White',4,'Funny episodes.',2,'2024-03-07 21:13:47');\nINSERT INTO \"Shows\" (id,title,genre,network,audio_format,host) VALUES (1,'The Alex Johnson Show','Comedy','ABC','Podcast','Alex Johnson'),(2,'Laughing Matters','Comedy','NBC','Podcast','Jane Doe'),(3,'The Morning Rush','Talk Show','CBS Radio','Radio Show','Alex Johnson'),(4,'Morning Coffee','Talk Show','Fox Radio','Radio Show','Jane Doe');\n",
      "question": "Which podcasts are by podcasters with 10 years of experience and which radio shows are by hosts with the same years of experience? Show them in one table.",
      "gold_queries": [
        "SELECT Shows.title \r\nFROM Shows JOIN Podcasters ON Shows.host = Podcasters.name\r\nWHERE (Shows.audio_format = 'Podcast' OR Shows.audio_format = 'Radio Show') AND Podcasters.years_experience = 10"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Which podcasts have hosts with 10 years of experience and which radio shows have hosts with 10 years of experience?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT s.title \nFROM Shows s \nJOIN Podcasters p ON s.host = p.name \nWHERE p.years_experience = 10"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Education/attachment_1tab_val_higher_education_institutions/attachment_1tab_val_higher_education_institutions.sqlite",
      "db_dump": "CREATE TABLE Courses (\n    CourseID INTEGER PRIMARY KEY,\n    Title TEXT,\n    Description TEXT,\n    Department TEXT,\n    Credit Hours INTEGER );\nCREATE TABLE Enrollments (\n    EnrollmentID INTEGER PRIMARY KEY,\n    StudentID INTEGER,\n    CourseID INTEGER,\n    Grade TEXT,\n    FOREIGN KEY(StudentID) REFERENCES Students(StudentID),\n    FOREIGN KEY(CourseID) REFERENCES Courses(CourseID));\nCREATE TABLE Professors (\n    ProfessorID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Department TEXT,\n    OfficeNumber TEXT);\nCREATE TABLE Students (\n    StudentID INTEGER PRIMARY KEY,\n    DateOfBirth DATE,\n    HigherEducationInstitution TEXT,\n    AcademicProgram TEXT, FullName TEXT);\n\nINSERT INTO \"Courses\" (CourseID,Title,Description,Department,Credit) VALUES (1,'Calculus I','Introduction to calculus with an emphasis on limits, derivatives, and integrals.','Math',4),(2,'General Physics','This course covers classical mechanics, electricity and magnetism, optics, thermodynamics, and modern physics.','Physics',4),(3,'American Literature','An examination of American literature through various time periods and genres.','English',3),(4,'Human Biology','Exploration of human biology including cell structure and function, genetics, and physiological systems.','Biology',3),(5,'World History II','Continuation of World History I, covering events from the fall of Rome until today.','History',3);\nINSERT INTO \"Professors\" (ProfessorID,FirstName,LastName,Department,OfficeNumber) VALUES (1,'Dr.','White','Math','A101'),(2,'Dr.','Black','Physics','B101'),(3,'Dr.','Green','English','C101'),(4,'Dr.','Blue','Biology','D101'),(5,'Dr.','Red','History','E101');\nINSERT INTO \"Students\" (StudentID,DateOfBirth,HigherEducationInstitution,AcademicProgram,FullName) VALUES (1,'2000-09-15','University','Business Administration','John Doe'),(2,'1998-10-23','University','Computer Science','Jane Smith'),(3,'1996-11-27','College','Business Administration','Michael Johnson'),(4,'1995-12-11','College','Mathematics','Emily Williams'),(5,'1994-02-02','High School','Physics','David Brown');\n",
      "question": "Provide a list of all university students and also provide a list of college students studying Business Administration. Show them in one table.",
      "gold_queries": [
        "SELECT Students.FullName\r\nFROM Students\r\nWHERE Students.HigherEducationInstitution = \"University\" OR Students.HigherEducationInstitution = \"College\" AND Students.AcademicProgram = \"Business Administration\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Present the data in a single table, with rows representing individual students and columns indicating university/college affiliation and major.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT HigherEducationInstitution AS University_College, AcademicProgram AS Major FROM Students"
          ]
        },
        {
          "interpretation": "List all students from universities and combine it with a list of students from colleges majoring in Business Administration, resulting in one unified table.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT FullName FROM Students WHERE HigherEducationInstitution = 'University'\nUNION\nSELECT FullName FROM Students WHERE HigherEducationInstitution = 'College' AND AcademicProgram = 'Business Administration'"
          ]
        },
        {
          "interpretation": "Create a table grouping students by institution (university/college), and within each group, further categorize them by their major (Business Administration or other majors).",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT HigherEducationInstitution, \n       CASE WHEN AcademicProgram = 'Business Administration' THEN 'Business Administration' ELSE 'Other Majors' END AS MajorCategory,\n       COUNT(*) AS NumberOfStudents\nFROM Students\nGROUP BY HigherEducationInstitution, MajorCategory"
          ]
        },
        {
          "interpretation": "Generate two separate tables: one containing all university students, and another containing all college students majoring in Business Administration.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName, DateOfBirth, HigherEducationInstitution, AcademicProgram \nFROM Students \nWHERE HigherEducationInstitution = 'College' AND AcademicProgram = 'Business Administration'",
            "SELECT FullName, DateOfBirth, HigherEducationInstitution, AcademicProgram \nFROM Students \nWHERE HigherEducationInstitution = 'University'"
          ]
        },
        {
          "interpretation": "Generate two separate tables: one containing all university students, and another containing all college students majoring in Business Administration.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName, DateOfBirth, HigherEducationInstitution, AcademicProgram \nFROM Students \nWHERE HigherEducationInstitution = 'College' AND AcademicProgram = 'Business Administration'",
            "SELECT FullName, DateOfBirth, HigherEducationInstitution, AcademicProgram \nFROM Students \nWHERE HigherEducationInstitution = 'University'"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "f1_score": 0.33333333333333337,
        "num_queries": 7,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Education/attachment_1tab_val_higher_education_institutions/attachment_1tab_val_higher_education_institutions.sqlite",
      "db_dump": "CREATE TABLE Courses (\n    CourseID INTEGER PRIMARY KEY,\n    Title TEXT,\n    Description TEXT,\n    Department TEXT,\n    Credit Hours INTEGER );\nCREATE TABLE Enrollments (\n    EnrollmentID INTEGER PRIMARY KEY,\n    StudentID INTEGER,\n    CourseID INTEGER,\n    Grade TEXT,\n    FOREIGN KEY(StudentID) REFERENCES Students(StudentID),\n    FOREIGN KEY(CourseID) REFERENCES Courses(CourseID));\nCREATE TABLE Professors (\n    ProfessorID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Department TEXT,\n    OfficeNumber TEXT);\nCREATE TABLE Students (\n    StudentID INTEGER PRIMARY KEY,\n    DateOfBirth DATE,\n    HigherEducationInstitution TEXT,\n    AcademicProgram TEXT, FullName TEXT);\n\nINSERT INTO \"Courses\" (CourseID,Title,Description,Department,Credit) VALUES (1,'Calculus I','Introduction to calculus with an emphasis on limits, derivatives, and integrals.','Math',4),(2,'General Physics','This course covers classical mechanics, electricity and magnetism, optics, thermodynamics, and modern physics.','Physics',4),(3,'American Literature','An examination of American literature through various time periods and genres.','English',3),(4,'Human Biology','Exploration of human biology including cell structure and function, genetics, and physiological systems.','Biology',3),(5,'World History II','Continuation of World History I, covering events from the fall of Rome until today.','History',3);\nINSERT INTO \"Professors\" (ProfessorID,FirstName,LastName,Department,OfficeNumber) VALUES (1,'Dr.','White','Math','A101'),(2,'Dr.','Black','Physics','B101'),(3,'Dr.','Green','English','C101'),(4,'Dr.','Blue','Biology','D101'),(5,'Dr.','Red','History','E101');\nINSERT INTO \"Students\" (StudentID,DateOfBirth,HigherEducationInstitution,AcademicProgram,FullName) VALUES (1,'2000-09-15','University','Business Administration','John Doe'),(2,'1998-10-23','University','Computer Science','Jane Smith'),(3,'1996-11-27','College','Business Administration','Michael Johnson'),(4,'1995-12-11','College','Mathematics','Emily Williams'),(5,'1994-02-02','High School','Physics','David Brown');\n",
      "question": "List all university students and college students studying Business Administration. Show them in one table.",
      "gold_queries": [
        "SELECT Students.FullName\r\nFROM Students\r\nWHERE (Students.HigherEducationInstitution = \"University\" OR Students.HigherEducationInstitution = \"College\") AND Students.AcademicProgram = \"Business Administration\"",
        "SELECT Students.FullName\r\nFROM Students\r\nWHERE Students.HigherEducationInstitution = \"University\" OR Students.HigherEducationInstitution = \"College\" AND Students.AcademicProgram = \"Business Administration\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Retrieve all students from the Students table whose HigherEducationInstitution is 'University' and whose AcademicProgram is 'Business Administration', along with students from Students table whose HigherEducationInstitution is 'College' and whose AcademicProgram is 'Business Administration', and present the results in a single table.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName FROM Students WHERE HigherEducationInstitution = 'University' AND AcademicProgram = 'Business Administration'\nUNION\nSELECT FullName FROM Students WHERE HigherEducationInstitution = 'College' AND AcademicProgram = 'Business Administration'"
          ]
        },
        {
          "interpretation": "Display all records from the Students table where HigherEducationInstitution is either 'University' or 'College' and AcademicProgram is 'Business Administration'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Students WHERE HigherEducationInstitution IN ('University', 'College') AND AcademicProgram = 'Business Administration'"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.5,
        "f1_score": 0.5,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Education/attachment_1tab_val_higher_education_institutions/attachment_1tab_val_higher_education_institutions.sqlite",
      "db_dump": "CREATE TABLE Courses (\n    CourseID INTEGER PRIMARY KEY,\n    Title TEXT,\n    Description TEXT,\n    Department TEXT,\n    Credit Hours INTEGER );\nCREATE TABLE Enrollments (\n    EnrollmentID INTEGER PRIMARY KEY,\n    StudentID INTEGER,\n    CourseID INTEGER,\n    Grade TEXT,\n    FOREIGN KEY(StudentID) REFERENCES Students(StudentID),\n    FOREIGN KEY(CourseID) REFERENCES Courses(CourseID));\nCREATE TABLE Professors (\n    ProfessorID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Department TEXT,\n    OfficeNumber TEXT);\nCREATE TABLE Students (\n    StudentID INTEGER PRIMARY KEY,\n    DateOfBirth DATE,\n    HigherEducationInstitution TEXT,\n    AcademicProgram TEXT, FullName TEXT);\n\nINSERT INTO \"Courses\" (CourseID,Title,Description,Department,Credit) VALUES (1,'Calculus I','Introduction to calculus with an emphasis on limits, derivatives, and integrals.','Math',4),(2,'General Physics','This course covers classical mechanics, electricity and magnetism, optics, thermodynamics, and modern physics.','Physics',4),(3,'American Literature','An examination of American literature through various time periods and genres.','English',3),(4,'Human Biology','Exploration of human biology including cell structure and function, genetics, and physiological systems.','Biology',3),(5,'World History II','Continuation of World History I, covering events from the fall of Rome until today.','History',3);\nINSERT INTO \"Professors\" (ProfessorID,FirstName,LastName,Department,OfficeNumber) VALUES (1,'Dr.','White','Math','A101'),(2,'Dr.','Black','Physics','B101'),(3,'Dr.','Green','English','C101'),(4,'Dr.','Blue','Biology','D101'),(5,'Dr.','Red','History','E101');\nINSERT INTO \"Students\" (StudentID,DateOfBirth,HigherEducationInstitution,AcademicProgram,FullName) VALUES (1,'2000-09-15','University','Business Administration','John Doe'),(2,'1998-10-23','University','Computer Science','Jane Smith'),(3,'1996-11-27','College','Business Administration','Michael Johnson'),(4,'1995-12-11','College','Mathematics','Emily Williams'),(5,'1994-02-02','High School','Physics','David Brown');\n",
      "question": "Which university students study Business Administration and which college students have the same academic program? Show them in one table.",
      "gold_queries": [
        "SELECT Students.FullName\r\nFROM Students\r\nWHERE (Students.HigherEducationInstitution = \"University\" OR Students.HigherEducationInstitution = \"College\") AND Students.AcademicProgram = \"Business Administration\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Find all students who are enrolled in Business Administration at the University and all students enrolled in the same program at College in a combined table.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT FullName FROM Students WHERE HigherEducationInstitution = 'University' AND AcademicProgram = 'Business Administration'\nUNION\nSELECT FullName FROM Students WHERE HigherEducationInstitution = 'College' AND AcademicProgram = 'Business Administration'"
          ]
        },
        {
          "interpretation": "Identify the overlapping set of students pursuing \"Business Administration\" degrees at \"University\" and \"College\" and display them within a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName FROM Students WHERE HigherEducationInstitution = 'University' AND AcademicProgram = 'Business Administration' INTERSECT SELECT FullName FROM Students WHERE HigherEducationInstitution = 'College' AND AcademicProgram = 'Business Administration'"
          ]
        },
        {
          "interpretation": "Produce a table that includes all students from \"University\" enrolled in \"Business Administration\" and all students from \"College\" enrolled in \"Business Administration\", with distinct IDs.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT StudentID\nFROM Students\nWHERE HigherEducationInstitution IN ('University', 'College')\nAND AcademicProgram = 'Business Administration'"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Education/attachment_1tab_val_learning_activities/attachment_1tab_val_learning_activities.sqlite",
      "db_dump": "CREATE TABLE Classes (\n    ClassID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    GradeLevel INT,\n    TeacherID INTEGER,\n    FOREIGN KEY(TeacherID) REFERENCES Teachers(TeacherID)\n);\nCREATE TABLE LearningActivities (\n    ActivityID INTEGER PRIMARY KEY AUTOINCREMENT,\n    ActivityType TEXT ,\n    Purpose TEXT,\n    Date DATE,\n    ClassID INTEGER,\n    FOREIGN KEY(ClassID) REFERENCES Classes(ClassID)\n);\nCREATE TABLE Students (\n    StudentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE\n);\nCREATE TABLE Teachers (\n    TeacherID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    SubjectTaught TEXT\n);\n\nINSERT INTO \"Classes\" (ClassID,Name,GradeLevel,TeacherID) VALUES (1,'Algebra I',9,1),(2,'World History',10,2),(3,'American Literature',11,3),(4,'Physics',10,4),(5,'Advanced Art',12,5);\nINSERT INTO \"LearningActivities\" (ActivityID,ActivityType,Purpose,Date,ClassID) VALUES (1,'Field Trip','Real-world Application','2023-03-15',1),(2,'Field Trip','Team Building','2023-03-22',2),(3,'Study Group','Real-world Application','2023-03-18',3),(4,'Study Group','Preparation for Test','2023-03-25',4),(5,'Online Lecture','Review Material','2023-03-20',5);\nINSERT INTO \"Students\" (StudentID,FirstName,LastName,DateOfBirth) VALUES (1,'John','Doe','2003-10-07'),(2,'Jane','Smith','2002-08-21'),(3,'Michael','Johnson','2005-06-29'),(4,'Emily','Williams','2004-09-15'),(5,'David','Brown','2006-07-23');\nINSERT INTO \"Teachers\" (TeacherID,FirstName,LastName,SubjectTaught) VALUES (1,'Mr.','Davis','Math'),(2,'Ms.','Martin','History'),(3,'Mrs.','Wilson','English'),(4,'Mr.','Hall','Science'),(5,'Mrs.','Jackson','Art');\n",
      "question": "List all field trip and study group classes where either is for a real-world application. Show them in one table.",
      "gold_queries": [
        "SELECT Classes.Name \r\nFROM LearningActivities JOIN Classes ON Classes.ClassID = LearningActivities.ClassID\r\nWHERE (LearningActivities.ActivityType = \"Field Trip\" OR LearningActivities.ActivityType = \"Study Group\") AND LearningActivities.Purpose = \"Real-world Application\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List all Classes associated with LearningActivities where either the ActivityType is 'Field Trip' and the Purpose is 'Real-world Application' or the ActivityType is 'Study Group' and the Purpose is 'Real-world Application'.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT DISTINCT C.Name \nFROM Classes C \nJOIN LearningActivities LA ON C.ClassID = LA.ClassID \nWHERE (LA.ActivityType = 'Field Trip' AND LA.Purpose = 'Real-world Application') \nOR (LA.ActivityType = 'Study Group' AND LA.Purpose = 'Real-world Application')"
          ]
        },
        {
          "interpretation": "List all LearningActivities that are either Field Trips or Study Groups with the Purpose \"Real-world Application\", and then show the corresponding Class for each Activity.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT LearningActivities.ActivityType, LearningActivities.Purpose, Classes.Name\nFROM LearningActivities\nJOIN Classes ON LearningActivities.ClassID = Classes.ClassID\nWHERE (LearningActivities.ActivityType = 'Field Trip' OR LearningActivities.ActivityType = 'Study Group') AND LearningActivities.Purpose = 'Real-world Application'"
          ]
        },
        {
          "interpretation": "List all Classes where the associated LearningActivity is a field trip and the Purpose is 'Real-world Application'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Classes.Name \nFROM Classes \nJOIN LearningActivities ON Classes.ClassID = LearningActivities.ClassID \nWHERE LearningActivities.ActivityType = 'Field Trip' AND LearningActivities.Purpose = 'Real-world Application'"
          ]
        },
        {
          "interpretation": "List all Classes where the associated LearningActivity is a study group and the Purpose is 'Real-world Application'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.Name FROM Classes C JOIN LearningActivities LA ON C.ClassID = LA.ClassID WHERE LA.ActivityType = 'Study Group' AND LA.Purpose = 'Real-world Application'"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Education/attachment_1tab_val_learning_activities/attachment_1tab_val_learning_activities.sqlite",
      "db_dump": "CREATE TABLE Classes (\n    ClassID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    GradeLevel INT,\n    TeacherID INTEGER,\n    FOREIGN KEY(TeacherID) REFERENCES Teachers(TeacherID)\n);\nCREATE TABLE LearningActivities (\n    ActivityID INTEGER PRIMARY KEY AUTOINCREMENT,\n    ActivityType TEXT ,\n    Purpose TEXT,\n    Date DATE,\n    ClassID INTEGER,\n    FOREIGN KEY(ClassID) REFERENCES Classes(ClassID)\n);\nCREATE TABLE Students (\n    StudentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE\n);\nCREATE TABLE Teachers (\n    TeacherID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    SubjectTaught TEXT\n);\n\nINSERT INTO \"Classes\" (ClassID,Name,GradeLevel,TeacherID) VALUES (1,'Algebra I',9,1),(2,'World History',10,2),(3,'American Literature',11,3),(4,'Physics',10,4),(5,'Advanced Art',12,5);\nINSERT INTO \"LearningActivities\" (ActivityID,ActivityType,Purpose,Date,ClassID) VALUES (1,'Field Trip','Real-world Application','2023-03-15',1),(2,'Field Trip','Team Building','2023-03-22',2),(3,'Study Group','Real-world Application','2023-03-18',3),(4,'Study Group','Preparation for Test','2023-03-25',4),(5,'Online Lecture','Review Material','2023-03-20',5);\nINSERT INTO \"Students\" (StudentID,FirstName,LastName,DateOfBirth) VALUES (1,'John','Doe','2003-10-07'),(2,'Jane','Smith','2002-08-21'),(3,'Michael','Johnson','2005-06-29'),(4,'Emily','Williams','2004-09-15'),(5,'David','Brown','2006-07-23');\nINSERT INTO \"Teachers\" (TeacherID,FirstName,LastName,SubjectTaught) VALUES (1,'Mr.','Davis','Math'),(2,'Ms.','Martin','History'),(3,'Mrs.','Wilson','English'),(4,'Mr.','Hall','Science'),(5,'Mrs.','Jackson','Art');\n",
      "question": "List all field trip classes and study group classes that are for real-world applications. Show them in one table.",
      "gold_queries": [
        "SELECT Classes.Name \r\nFROM LearningActivities JOIN Classes ON Classes.ClassID = LearningActivities.ClassID\r\nWHERE (LearningActivities.ActivityType = \"Field Trip\" OR LearningActivities.ActivityType = \"Study Group\") AND LearningActivities.Purpose = \"Real-world Application\"",
        "SELECT Classes.Name \r\nFROM LearningActivities JOIN Classes ON Classes.ClassID = LearningActivities.ClassID\r\nWHERE LearningActivities.ActivityType = \"Field Trip\" OR LearningActivities.ActivityType = \"Study Group\" AND LearningActivities.Purpose = \"Real-world Application\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List all distinct classes involved in activities with \"Real-world Application\" as purpose, regardless of activity type (Field Trip or Study Group).",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT Name FROM Classes WHERE ClassID IN (SELECT ClassID FROM LearningActivities WHERE Purpose = 'Real-world Application')"
          ]
        },
        {
          "interpretation": "Present a combined view of \"Field Trip\" and \"Study Group\" activities with \"Real-world Application\" purpose, grouping by ClassID.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ClassID\nFROM LearningActivities\nWHERE (ActivityType = 'Field Trip' OR ActivityType = 'Study Group') AND Purpose = 'Real-world Application'\nGROUP BY ClassID"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.5,
        "f1_score": 0.5,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Education/attachment_1tab_val_learning_activities/attachment_1tab_val_learning_activities.sqlite",
      "db_dump": "CREATE TABLE Classes (\n    ClassID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    GradeLevel INT,\n    TeacherID INTEGER,\n    FOREIGN KEY(TeacherID) REFERENCES Teachers(TeacherID)\n);\nCREATE TABLE LearningActivities (\n    ActivityID INTEGER PRIMARY KEY AUTOINCREMENT,\n    ActivityType TEXT ,\n    Purpose TEXT,\n    Date DATE,\n    ClassID INTEGER,\n    FOREIGN KEY(ClassID) REFERENCES Classes(ClassID)\n);\nCREATE TABLE Students (\n    StudentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE\n);\nCREATE TABLE Teachers (\n    TeacherID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    SubjectTaught TEXT\n);\n\nINSERT INTO \"Classes\" (ClassID,Name,GradeLevel,TeacherID) VALUES (1,'Algebra I',9,1),(2,'World History',10,2),(3,'American Literature',11,3),(4,'Physics',10,4),(5,'Advanced Art',12,5);\nINSERT INTO \"LearningActivities\" (ActivityID,ActivityType,Purpose,Date,ClassID) VALUES (1,'Field Trip','Real-world Application','2023-03-15',1),(2,'Field Trip','Team Building','2023-03-22',2),(3,'Study Group','Real-world Application','2023-03-18',3),(4,'Study Group','Preparation for Test','2023-03-25',4),(5,'Online Lecture','Review Material','2023-03-20',5);\nINSERT INTO \"Students\" (StudentID,FirstName,LastName,DateOfBirth) VALUES (1,'John','Doe','2003-10-07'),(2,'Jane','Smith','2002-08-21'),(3,'Michael','Johnson','2005-06-29'),(4,'Emily','Williams','2004-09-15'),(5,'David','Brown','2006-07-23');\nINSERT INTO \"Teachers\" (TeacherID,FirstName,LastName,SubjectTaught) VALUES (1,'Mr.','Davis','Math'),(2,'Ms.','Martin','History'),(3,'Mrs.','Wilson','English'),(4,'Mr.','Hall','Science'),(5,'Mrs.','Jackson','Art');\n",
      "question": "Show all the field trips available, also show just those study group classes categorised as being for a real-world application. Show them in one table.",
      "gold_queries": [
        "SELECT Classes.Name \r\nFROM LearningActivities JOIN Classes ON Classes.ClassID = LearningActivities.ClassID\r\nWHERE LearningActivities.ActivityType = \"Field Trip\" OR LearningActivities.ActivityType = \"Study Group\" AND LearningActivities.Purpose = \"Real-world Application\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Show all field trip activities and all study group activities with \"Real-world Application\" as their purpose, combined in a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM LearningActivities WHERE ActivityType = 'Field Trip' UNION SELECT * FROM LearningActivities WHERE ActivityType = 'Study Group' AND Purpose = 'Real-world Application'"
          ]
        },
        {
          "interpretation": "List all field trips as well as study groups with a \"Real-world Application\" purpose, avoiding duplication of entries.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT ActivityType, Purpose, Date \nFROM LearningActivities \nWHERE (ActivityType = 'Field Trip' OR ActivityType = 'Study Group') \n  AND Purpose = 'Real-world Application'"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Entertainment/attachment_1tab_ref_music/attachment_1tab_ref_music.sqlite",
      "db_dump": "CREATE TABLE \"Album\" (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE\n);\nCREATE TABLE Instrument (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT UNIQUE\n);\nCREATE TABLE \"Music\" (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    length TIME,\n    MUSIC_TYPE TEXT ,\n    INSTRUMENT_id INTEGER,\n    ALBUM_id INTEGER,\n    SINGER_id INTEGER,\n    FOREIGN KEY (ALBUM_id) REFERENCES Album (id),\n    FOREIGN KEY (SINGER_id) REFERENCES Singer (id),\n    FOREIGN KEY (INSTRUMENT_id) REFERENCES Instrument (id)\n);\nCREATE TABLE Singer (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    birth_date DATE,\n    death_date DATE\n);\n\nINSERT INTO \"Album\" (id,title,release_date) VALUES (1,NULL,'2000-01-01'),(2,NULL,'2001-06-01'),(3,NULL,'2002-11-01'),(4,NULL,'2003-05-01'),(5,NULL,'2004-10-01');\nINSERT INTO \"Instrument\" (id,type) VALUES (1,'Guitar'),(2,'Piano'),(3,'Drums'),(4,'Violin');\nINSERT INTO \"Music\" (id,title,length,MUSIC_TYPE,INSTRUMENT_id,ALBUM_id,SINGER_id) VALUES (1,'Blues Song','03:00','Single',1,1,1),(2,'Blues Song','03:00','Single',2,2,2),(3,'Folk Song','03:00','Single',3,3,1),(4,'Folk Song','03:00','Single',4,4,3),(5,'Country','03:00','Single',5,5,4);\nINSERT INTO \"Singer\" (id,first_name,last_name,birth_date,death_date) VALUES (1,'John','Hurt','1923-06-08','2007-01-27'),(2,'Bob','Smith','1960-07-01',NULL),(3,'Alice','Johnson','1975-01-10',NULL),(4,'Tom','White','1980-02-05',NULL),(5,'Emily','Green','1992-03-15',NULL);\n",
      "question": "Give me the blues songs and folk songs where the singer's first name is John. Show them in one table.",
      "gold_queries": [
        "SELECT Music.title \r\nFROM Music JOIN Singer ON Music.SINGER_id = Singer.id\r\nWHERE (Music.title = \"Blues Song\" OR Music.title = \"Folk Song\") AND Singer.first_name = \"John\"",
        "SELECT Music.title \r\nFROM Music JOIN Singer ON Music.SINGER_id = Singer.id\r\nWHERE Music.title = \"Blues Song\" OR Music.title = \"Folk Song\" AND Singer.first_name = \"John\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Produce a consolidated table containing only blues songs and folk songs performed by a singer named John.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Music.title, Music.length, Music.MUSIC_TYPE\nFROM Music\nJOIN Singer ON Music.SINGER_id = Singer.id\nWHERE Singer.first_name = 'John' AND Music.MUSIC_TYPE IN ('Blues Song', 'Folk Song')"
          ]
        },
        {
          "interpretation": "Retrieve all music pieces with genre as 'Blues Song' or 'Folk Song' and where the singer's first name is 'John'.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Music.title \nFROM Music \nJOIN Singer ON Music.SINGER_id = Singer.id \nWHERE Music.title IN ('Blues Song', 'Folk Song') AND Singer.first_name = 'John'"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.5,
        "f1_score": 0.5,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Entertainment/attachment_1tab_ref_music/attachment_1tab_ref_music.sqlite",
      "db_dump": "CREATE TABLE \"Album\" (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE\n);\nCREATE TABLE Instrument (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT UNIQUE\n);\nCREATE TABLE \"Music\" (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    length TIME,\n    MUSIC_TYPE TEXT ,\n    INSTRUMENT_id INTEGER,\n    ALBUM_id INTEGER,\n    SINGER_id INTEGER,\n    FOREIGN KEY (ALBUM_id) REFERENCES Album (id),\n    FOREIGN KEY (SINGER_id) REFERENCES Singer (id),\n    FOREIGN KEY (INSTRUMENT_id) REFERENCES Instrument (id)\n);\nCREATE TABLE Singer (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    birth_date DATE,\n    death_date DATE\n);\n\nINSERT INTO \"Album\" (id,title,release_date) VALUES (1,NULL,'2000-01-01'),(2,NULL,'2001-06-01'),(3,NULL,'2002-11-01'),(4,NULL,'2003-05-01'),(5,NULL,'2004-10-01');\nINSERT INTO \"Instrument\" (id,type) VALUES (1,'Guitar'),(2,'Piano'),(3,'Drums'),(4,'Violin');\nINSERT INTO \"Music\" (id,title,length,MUSIC_TYPE,INSTRUMENT_id,ALBUM_id,SINGER_id) VALUES (1,'Blues Song','03:00','Single',1,1,1),(2,'Blues Song','03:00','Single',2,2,2),(3,'Folk Song','03:00','Single',3,3,1),(4,'Folk Song','03:00','Single',4,4,3),(5,'Country','03:00','Single',5,5,4);\nINSERT INTO \"Singer\" (id,first_name,last_name,birth_date,death_date) VALUES (1,'John','Hurt','1923-06-08','2007-01-27'),(2,'Bob','Smith','1960-07-01',NULL),(3,'Alice','Johnson','1975-01-10',NULL),(4,'Tom','White','1980-02-05',NULL),(5,'Emily','Green','1992-03-15',NULL);\n",
      "question": "Show all of the blues songs, also show the folk songs, but just those by singers named John. Show them in one table.",
      "gold_queries": [
        "SELECT Music.title \r\nFROM Music JOIN Singer ON Music.SINGER_id = Singer.id\r\nWHERE Music.title = \"Blues Song\" OR Music.title = \"Folk Song\" AND Singer.first_name = \"John\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [],
      "num_unique_execution_results": 0,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0,
        "f1_score": 0,
        "num_queries": 0,
        "num_unique_queries": 0,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Entertainment/attachment_1tab_ref_music/attachment_1tab_ref_music.sqlite",
      "db_dump": "CREATE TABLE \"Album\" (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE\n);\nCREATE TABLE Instrument (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT UNIQUE\n);\nCREATE TABLE \"Music\" (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    length TIME,\n    MUSIC_TYPE TEXT ,\n    INSTRUMENT_id INTEGER,\n    ALBUM_id INTEGER,\n    SINGER_id INTEGER,\n    FOREIGN KEY (ALBUM_id) REFERENCES Album (id),\n    FOREIGN KEY (SINGER_id) REFERENCES Singer (id),\n    FOREIGN KEY (INSTRUMENT_id) REFERENCES Instrument (id)\n);\nCREATE TABLE Singer (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    birth_date DATE,\n    death_date DATE\n);\n\nINSERT INTO \"Album\" (id,title,release_date) VALUES (1,NULL,'2000-01-01'),(2,NULL,'2001-06-01'),(3,NULL,'2002-11-01'),(4,NULL,'2003-05-01'),(5,NULL,'2004-10-01');\nINSERT INTO \"Instrument\" (id,type) VALUES (1,'Guitar'),(2,'Piano'),(3,'Drums'),(4,'Violin');\nINSERT INTO \"Music\" (id,title,length,MUSIC_TYPE,INSTRUMENT_id,ALBUM_id,SINGER_id) VALUES (1,'Blues Song','03:00','Single',1,1,1),(2,'Blues Song','03:00','Single',2,2,2),(3,'Folk Song','03:00','Single',3,3,1),(4,'Folk Song','03:00','Single',4,4,3),(5,'Country','03:00','Single',5,5,4);\nINSERT INTO \"Singer\" (id,first_name,last_name,birth_date,death_date) VALUES (1,'John','Hurt','1923-06-08','2007-01-27'),(2,'Bob','Smith','1960-07-01',NULL),(3,'Alice','Johnson','1975-01-10',NULL),(4,'Tom','White','1980-02-05',NULL),(5,'Emily','Green','1992-03-15',NULL);\n",
      "question": "Show me both blues and folks songs by singers called John. Show them in one table.",
      "gold_queries": [
        "SELECT Music.title \r\nFROM Music JOIN Singer ON Music.SINGER_id = Singer.id\r\nWHERE (Music.title = \"Blues Song\" OR Music.title = \"Folk Song\") AND Singer.first_name = \"John\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "SHOW me two separate tables, one with all blues songs by John, and one with all folk songs by John.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Music.id, Music.title, Music.length, Music.MUSIC_TYPE, Music.INSTRUMENT_id, Music.ALBUM_id, Music.SINGER_id\nFROM Music\nJOIN Singer ON Music.SINGER_id = Singer.id\nWHERE Music.MUSIC_TYPE = 'Single' AND Music.title = 'Blues Song' AND Singer.first_name = 'John' AND Singer.last_name = 'Hurt'",
            "SELECT Music.id, Music.title, Music.length, Music.MUSIC_TYPE, Music.INSTRUMENT_id, Music.ALBUM_id, Music.SINGER_id\nFROM Music\nJOIN Singer ON Music.SINGER_id = Singer.id\nWHERE Music.MUSIC_TYPE = 'Single' AND Music.title = 'Folk Song' AND Singer.first_name = 'John' AND Singer.last_name = 'Hurt'"
          ]
        },
        {
          "interpretation": "SHOW me two separate tables, one with all blues songs by John, and one with all folk songs by John.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Music.id, Music.title, Music.length, Music.MUSIC_TYPE, Music.INSTRUMENT_id, Music.ALBUM_id, Music.SINGER_id\nFROM Music\nJOIN Singer ON Music.SINGER_id = Singer.id\nWHERE Music.MUSIC_TYPE = 'Single' AND Music.title = 'Blues Song' AND Singer.first_name = 'John' AND Singer.last_name = 'Hurt'",
            "SELECT Music.id, Music.title, Music.length, Music.MUSIC_TYPE, Music.INSTRUMENT_id, Music.ALBUM_id, Music.SINGER_id\nFROM Music\nJOIN Singer ON Music.SINGER_id = Singer.id\nWHERE Music.MUSIC_TYPE = 'Single' AND Music.title = 'Folk Song' AND Singer.first_name = 'John' AND Singer.last_name = 'Hurt'"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Entertainment/attachment_1tab_ref_music_genre/attachment_1tab_ref_music_genre.sqlite",
      "db_dump": "CREATE TABLE Albums(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    release_date DATE,\n    artist_id INTEGER,\n    FOREIGN KEY (artist_id) REFERENCES Artists(id)\n);\nCREATE TABLE Artists(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT UNIQUE\n);\nCREATE TABLE Concerts(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    venue TEXT,\n    date TIMESTAMP\n);\nCREATE TABLE Music_Genres(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT UNIQUE \n);\nCREATE TABLE Songs(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    artist_id INTEGER,\n    album_id INTEGER,\n    concert_id INTEGER,\n    music_genre_id INTEGER,\n    FOREIGN KEY (artist_id) REFERENCES Performers(id),\n    FOREIGN KEY (album_id) REFERENCES Albums(id),\n    FOREIGN KEY (concert_id) REFERENCES Concerts(id),\n    FOREIGN KEY (music_genre_id) REFERENCES Music_Genres(id)\n);\n\nINSERT INTO \"Albums\" (id,release_date,artist_id) VALUES (1,'2021-01-01',1),(2,'2021-02-01',2),(3,'2021-03-01',3),(4,'2021-04-01',4),(5,'2021-05-01',5);\nINSERT INTO \"Artists\" (id,name) VALUES (1,'Artist1'),(2,'Artist2'),(3,'Artist3'),(4,'Artist4'),(5,'Artist5');\nINSERT INTO \"Concerts\" (id,venue,date) VALUES (1,'Madison Square Garden','2021-06-01 18:00:00'),(2,'Carnegie Hall','2021-07-01 19:00:00'),(3,'The Hollywood Bowl','2021-08-01 20:00:00'),(4,'Wembley Stadium','2021-09-01 21:00:00'),(5,'Stadium Australia','2021-10-01 22:00:00');\nINSERT INTO \"Music_Genres\" (id,name) VALUES (1,'Pop Song'),(2,'Hip Hop Song');\nINSERT INTO \"Songs\" (id,title,artist_id,album_id,concert_id,music_genre_id) VALUES (1,'Tune1',1,1,1,1),(2,'Tune2',2,2,3,1),(3,'Rap1',3,3,1,2),(4,'Rap2',4,4,5,2);\n",
      "question": "Show all pop songs and only those hip hop songs which were performed at Madison Square Garden. Show them in one table.",
      "gold_queries": [
        "SELECT Songs.title \r\nFROM Music_Genres JOIN Songs ON Music_Genres.id = Songs.music_genre_id JOIN Concerts ON Songs.concert_id = Concerts.id\r\nWHERE Music_Genres.name = \"Pop Song\" OR Music_Genres.name = \"Hip Hop Song\" AND Concerts.venue = \"Madison Square Garden\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Combine the results from the two previous queries into a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.title, T1.artist_id, T1.album_id, T1.concert_id, T1.music_genre_id\nFROM Songs T1\n"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Entertainment/attachment_1tab_ref_music_genre/attachment_1tab_ref_music_genre.sqlite",
      "db_dump": "CREATE TABLE Albums(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    release_date DATE,\n    artist_id INTEGER,\n    FOREIGN KEY (artist_id) REFERENCES Artists(id)\n);\nCREATE TABLE Artists(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT UNIQUE\n);\nCREATE TABLE Concerts(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    venue TEXT,\n    date TIMESTAMP\n);\nCREATE TABLE Music_Genres(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT UNIQUE \n);\nCREATE TABLE Songs(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    artist_id INTEGER,\n    album_id INTEGER,\n    concert_id INTEGER,\n    music_genre_id INTEGER,\n    FOREIGN KEY (artist_id) REFERENCES Performers(id),\n    FOREIGN KEY (album_id) REFERENCES Albums(id),\n    FOREIGN KEY (concert_id) REFERENCES Concerts(id),\n    FOREIGN KEY (music_genre_id) REFERENCES Music_Genres(id)\n);\n\nINSERT INTO \"Albums\" (id,release_date,artist_id) VALUES (1,'2021-01-01',1),(2,'2021-02-01',2),(3,'2021-03-01',3),(4,'2021-04-01',4),(5,'2021-05-01',5);\nINSERT INTO \"Artists\" (id,name) VALUES (1,'Artist1'),(2,'Artist2'),(3,'Artist3'),(4,'Artist4'),(5,'Artist5');\nINSERT INTO \"Concerts\" (id,venue,date) VALUES (1,'Madison Square Garden','2021-06-01 18:00:00'),(2,'Carnegie Hall','2021-07-01 19:00:00'),(3,'The Hollywood Bowl','2021-08-01 20:00:00'),(4,'Wembley Stadium','2021-09-01 21:00:00'),(5,'Stadium Australia','2021-10-01 22:00:00');\nINSERT INTO \"Music_Genres\" (id,name) VALUES (1,'Pop Song'),(2,'Hip Hop Song');\nINSERT INTO \"Songs\" (id,title,artist_id,album_id,concert_id,music_genre_id) VALUES (1,'Tune1',1,1,1,1),(2,'Tune2',2,2,3,1),(3,'Rap1',3,3,1,2),(4,'Rap2',4,4,5,2);\n",
      "question": "Show pop songs and hip hop songs performed at Madison Square Garden. Show them in one table.",
      "gold_queries": [
        "SELECT Songs.title \r\nFROM Music_Genres JOIN Songs ON Music_Genres.id = Songs.music_genre_id JOIN Concerts ON Songs.concert_id = Concerts.id\r\nWHERE (Music_Genres.name = \"Pop Song\" OR Music_Genres.name = \"Hip Hop Song\") AND Concerts.venue = \"Madison Square Garden\"",
        "SELECT Songs.title \r\nFROM Music_Genres JOIN Songs ON Music_Genres.id = Songs.music_genre_id JOIN Concerts ON Songs.concert_id = Concerts.id\r\nWHERE Music_Genres.name = \"Pop Song\" OR Music_Genres.name = \"Hip Hop Song\" AND Concerts.venue = \"Madison Square Garden\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Find all songs of the genres 'Pop Song' and 'Hip Hop Song' that were part of a concert held at 'Madison Square Garden', presenting the results in a single table.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT s.title \nFROM Songs s \nJOIN Music_Genres mg ON s.music_genre_id = mg.id \nJOIN Concerts c ON s.concert_id = c.id \nWHERE mg.name IN ('Pop Song', 'Hip Hop Song') \nAND c.venue = 'Madison Square Garden'"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 1.0,
        "f1_score": 0.6666666666666666,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Entertainment/attachment_1tab_ref_music_genre/attachment_1tab_ref_music_genre.sqlite",
      "db_dump": "CREATE TABLE Albums(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    release_date DATE,\n    artist_id INTEGER,\n    FOREIGN KEY (artist_id) REFERENCES Artists(id)\n);\nCREATE TABLE Artists(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT UNIQUE\n);\nCREATE TABLE Concerts(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    venue TEXT,\n    date TIMESTAMP\n);\nCREATE TABLE Music_Genres(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT UNIQUE \n);\nCREATE TABLE Songs(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    artist_id INTEGER,\n    album_id INTEGER,\n    concert_id INTEGER,\n    music_genre_id INTEGER,\n    FOREIGN KEY (artist_id) REFERENCES Performers(id),\n    FOREIGN KEY (album_id) REFERENCES Albums(id),\n    FOREIGN KEY (concert_id) REFERENCES Concerts(id),\n    FOREIGN KEY (music_genre_id) REFERENCES Music_Genres(id)\n);\n\nINSERT INTO \"Albums\" (id,release_date,artist_id) VALUES (1,'2021-01-01',1),(2,'2021-02-01',2),(3,'2021-03-01',3),(4,'2021-04-01',4),(5,'2021-05-01',5);\nINSERT INTO \"Artists\" (id,name) VALUES (1,'Artist1'),(2,'Artist2'),(3,'Artist3'),(4,'Artist4'),(5,'Artist5');\nINSERT INTO \"Concerts\" (id,venue,date) VALUES (1,'Madison Square Garden','2021-06-01 18:00:00'),(2,'Carnegie Hall','2021-07-01 19:00:00'),(3,'The Hollywood Bowl','2021-08-01 20:00:00'),(4,'Wembley Stadium','2021-09-01 21:00:00'),(5,'Stadium Australia','2021-10-01 22:00:00');\nINSERT INTO \"Music_Genres\" (id,name) VALUES (1,'Pop Song'),(2,'Hip Hop Song');\nINSERT INTO \"Songs\" (id,title,artist_id,album_id,concert_id,music_genre_id) VALUES (1,'Tune1',1,1,1,1),(2,'Tune2',2,2,3,1),(3,'Rap1',3,3,1,2),(4,'Rap2',4,4,5,2);\n",
      "question": "List both pop songs and hip hop songs where either were performed at Madison Square Garden. Show them in one table.",
      "gold_queries": [
        "SELECT Songs.title \r\nFROM Music_Genres JOIN Songs ON Music_Genres.id = Songs.music_genre_id JOIN Concerts ON Songs.concert_id = Concerts.id\r\nWHERE (Music_Genres.name = \"Pop Song\" OR Music_Genres.name = \"Hip Hop Song\") AND Concerts.venue = \"Madison Square Garden\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Output a single table containing all songs classified as 'Pop Song' and 'Hip Hop Song' that were part of concerts occurring at 'Madison Square Garden'.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Songs.title\nFROM Songs\nJOIN Music_Genres ON Songs.music_genre_id = Music_Genres.id\nJOIN Concerts ON Songs.concert_id = Concerts.id\nWHERE Music_Genres.name IN ('Pop Song', 'Hip Hop Song')\nAND Concerts.venue = 'Madison Square Garden'"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Entertainment/attachment_1tab_ref_sequential_art/attachment_1tab_ref_sequential_art.sqlite",
      "db_dump": "CREATE TABLE ArtWork(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    publishDate DATE ,\n    publisherId INTEGER,\n    sequentialArtTypeId INTEGER,\n    FOREIGN KEY(publisherId) REFERENCES Publisher(id),\n    FOREIGN KEY(sequentialArtTypeId) REFERENCES SequentialArtType(id)\n);\nCREATE TABLE Artist(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    artWorkId INTEGER,\n    FOREIGN KEY(artWorkId) REFERENCES ArtWork(id)\n);\nCREATE TABLE Publisher(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT UNIQUE\n);\nCREATE TABLE SequentialArtType(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT UNIQUE\n);\n\nINSERT INTO \"ArtWork\" (id,title,publishDate,publisherId,sequentialArtTypeId) VALUES (1,'X-Men #1','2023-01-01',1,1),(2,'Batman #1','2023-01-15',2,1),(3,'Spider-Man #1','2023-02-01',3,1),(4,'The Walking Dead #1','2023-02-15',4,1),(5,'Saga #1','2023-03-01',1,2);\nINSERT INTO \"Artist\" (id,firstName,lastName,artWorkId) VALUES (1,'John','Doe',1),(2,'Jane','Smith',2),(3,'Alice','Johnson',3),(4,'Bob','Williams',4),(5,'Charlie','Brown',5);\nINSERT INTO \"Publisher\" (id,name) VALUES (1,'BOOM Studios'),(2,'Marvel Comics'),(3,'DC Comics'),(4,'IDW Publishing'),(5,'Image Comics');\nINSERT INTO \"SequentialArtType\" (id,type) VALUES (1,'Comic Book'),(2,'Graphic Novel'),(3,'Manga'),(4,'Webcomic'),(5,'Digital Comic');\n",
      "question": "Show all comic books and graphic novels published by BOOM Studios. Show them in one table.",
      "gold_queries": [
        "SELECT ArtWork.Title \r\nFROM SequentialArtType JOIN ArtWork ON SequentialArtType.id = ArtWork.sequentialArtTypeId JOIN Publisher ON ArtWork.publisherId = Publisher.id\r\nWHERE (SequentialArtType.type = \"Comic Book\" OR SequentialArtType.type = \"Graphic Novel\") AND Publisher.name = \"BOOM Studios\"",
        "SELECT ArtWork.Title \r\nFROM SequentialArtType JOIN ArtWork ON SequentialArtType.id = ArtWork.sequentialArtTypeId JOIN Publisher ON ArtWork.publisherId = Publisher.id\r\nWHERE SequentialArtType.type = \"\" OR SequentialArtType.type = \"Graphic Novel\" AND Publisher.name = \"BOOM Studios\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Create a table with columns for title, publishDate and publisherName, containing data from corresponding entries in artwork, publisher tables with publisherId 1 and sequentialArtTypeId either 1 or 2.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ArtWork.title, ArtWork.publishDate, Publisher.name AS publisherName\nFROM ArtWork\nJOIN Publisher ON ArtWork.publisherId = Publisher.id\nWHERE ArtWork.publisherId = 1 AND (ArtWork.sequentialArtTypeId = 1 OR ArtWork.sequentialArtTypeId = 2)"
          ]
        },
        {
          "interpretation": "Display all art work entries from the Artwork table where sequentialArtTypeId is either 1 or 2 and publisherId is 1.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title, publishDate, publisherId, sequentialArtTypeId FROM ArtWork WHERE sequentialArtTypeId IN (1, 2) AND publisherId = 1"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Entertainment/attachment_1tab_ref_sequential_art/attachment_1tab_ref_sequential_art.sqlite",
      "db_dump": "CREATE TABLE ArtWork(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    publishDate DATE ,\n    publisherId INTEGER,\n    sequentialArtTypeId INTEGER,\n    FOREIGN KEY(publisherId) REFERENCES Publisher(id),\n    FOREIGN KEY(sequentialArtTypeId) REFERENCES SequentialArtType(id)\n);\nCREATE TABLE Artist(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    artWorkId INTEGER,\n    FOREIGN KEY(artWorkId) REFERENCES ArtWork(id)\n);\nCREATE TABLE Publisher(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT UNIQUE\n);\nCREATE TABLE SequentialArtType(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT UNIQUE\n);\n\nINSERT INTO \"ArtWork\" (id,title,publishDate,publisherId,sequentialArtTypeId) VALUES (1,'X-Men #1','2023-01-01',1,1),(2,'Batman #1','2023-01-15',2,1),(3,'Spider-Man #1','2023-02-01',3,1),(4,'The Walking Dead #1','2023-02-15',4,1),(5,'Saga #1','2023-03-01',1,2);\nINSERT INTO \"Artist\" (id,firstName,lastName,artWorkId) VALUES (1,'John','Doe',1),(2,'Jane','Smith',2),(3,'Alice','Johnson',3),(4,'Bob','Williams',4),(5,'Charlie','Brown',5);\nINSERT INTO \"Publisher\" (id,name) VALUES (1,'BOOM Studios'),(2,'Marvel Comics'),(3,'DC Comics'),(4,'IDW Publishing'),(5,'Image Comics');\nINSERT INTO \"SequentialArtType\" (id,type) VALUES (1,'Comic Book'),(2,'Graphic Novel'),(3,'Manga'),(4,'Webcomic'),(5,'Digital Comic');\n",
      "question": "Show publications by BOOM Studios that are either comic books or graphic novels. Show them in one table.",
      "gold_queries": [
        "SELECT ArtWork.Title \r\nFROM SequentialArtType JOIN ArtWork ON SequentialArtType.id = ArtWork.sequentialArtTypeId JOIN Publisher ON ArtWork.publisherId = Publisher.id\r\nWHERE (SequentialArtType.type = \"Comic Book\" OR SequentialArtType.type = \"Graphic Novel\") AND Publisher.name = \"BOOM Studios\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Display all ArtWork records with publisherId equal to 1, joined with SequentialArtType records based on sequentialArtTypeId, and filter results where SequentialArtType.type is 'Comic Book' or 'Graphic Novel'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ArtWork.id, ArtWork.title, ArtWork.publishDate, ArtWork.publisherId, ArtWork.sequentialArtTypeId, SequentialArtType.type\nFROM ArtWork\nJOIN SequentialArtType ON ArtWork.sequentialArtTypeId = SequentialArtType.id\nWHERE ArtWork.publisherId = 1 AND SequentialArtType.type IN ('Comic Book', 'Graphic Novel')"
          ]
        },
        {
          "interpretation": "Retrieve all Artwork entries associated with publisherId 1 where sequentialArtTypeId is either 1 or 2.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM ArtWork WHERE publisherId = 1 AND sequentialArtTypeId IN (1, 2)"
          ]
        },
        {
          "interpretation": "Generate a unified table containing Artwork information for publications by BOOM Studios (publisherId 1) that fall under the 'Comic Book' or 'Graphic Novel' categories (sequentialArtTypeId 1 or 2).",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.title, A.publishDate, P.name AS publisherName, SAT.type AS artType\nFROM ArtWork A\nJOIN Publisher P ON A.publisherId = P.id\nJOIN SequentialArtType SAT ON A.sequentialArtTypeId = SAT.id\nWHERE P.id = 1 AND SAT.id IN (1, 2)"
          ]
        },
        {
          "interpretation": "Select Artwork entries where publisherId is 1 and sequentialArtTypeId is either 1 or 2, presenting the results in a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title, publishDate, publisherId, sequentialArtTypeId FROM ArtWork WHERE publisherId = 1 AND sequentialArtTypeId IN (1, 2)"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Entertainment/attachment_1tab_ref_sequential_art/attachment_1tab_ref_sequential_art.sqlite",
      "db_dump": "CREATE TABLE ArtWork(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    publishDate DATE ,\n    publisherId INTEGER,\n    sequentialArtTypeId INTEGER,\n    FOREIGN KEY(publisherId) REFERENCES Publisher(id),\n    FOREIGN KEY(sequentialArtTypeId) REFERENCES SequentialArtType(id)\n);\nCREATE TABLE Artist(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    artWorkId INTEGER,\n    FOREIGN KEY(artWorkId) REFERENCES ArtWork(id)\n);\nCREATE TABLE Publisher(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT UNIQUE\n);\nCREATE TABLE SequentialArtType(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT UNIQUE\n);\n\nINSERT INTO \"ArtWork\" (id,title,publishDate,publisherId,sequentialArtTypeId) VALUES (1,'X-Men #1','2023-01-01',1,1),(2,'Batman #1','2023-01-15',2,1),(3,'Spider-Man #1','2023-02-01',3,1),(4,'The Walking Dead #1','2023-02-15',4,1),(5,'Saga #1','2023-03-01',1,2);\nINSERT INTO \"Artist\" (id,firstName,lastName,artWorkId) VALUES (1,'John','Doe',1),(2,'Jane','Smith',2),(3,'Alice','Johnson',3),(4,'Bob','Williams',4),(5,'Charlie','Brown',5);\nINSERT INTO \"Publisher\" (id,name) VALUES (1,'BOOM Studios'),(2,'Marvel Comics'),(3,'DC Comics'),(4,'IDW Publishing'),(5,'Image Comics');\nINSERT INTO \"SequentialArtType\" (id,type) VALUES (1,'Comic Book'),(2,'Graphic Novel'),(3,'Manga'),(4,'Webcomic'),(5,'Digital Comic');\n",
      "question": "Show all comic books and in addition show graphic novels published by BOOM Studios. Show them in one table.",
      "gold_queries": [
        "SELECT ArtWork.Title \r\nFROM SequentialArtType JOIN ArtWork ON SequentialArtType.id = ArtWork.sequentialArtTypeId JOIN Publisher ON ArtWork.publisherId = Publisher.id\r\nWHERE SequentialArtType.type = \"\" OR SequentialArtType.type = \"Graphic Novel\" AND Publisher.name = \"BOOM Studios\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [],
      "num_unique_execution_results": 0,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0,
        "f1_score": 0,
        "num_queries": 0,
        "num_unique_queries": 0,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Entertainment/attachment_1tab_ref_book_genre/attachment_1tab_ref_book_genre.sqlite",
      "db_dump": "CREATE TABLE Authors(\n    AuthorID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Country TEXT\n);\nCREATE TABLE BookPublishingHistory(\n    PublishingID INTEGER PRIMARY KEY AUTOINCREMENT,\n    ISBN VARCHAR(13),\n    PublisherID INTEGER,\n    YearOfPublication INT,\n    FOREIGN KEY(ISBN) REFERENCES Books(ISBN),\n    FOREIGN KEY(PublisherID) REFERENCES Publishers(PublisherID)\n);\nCREATE TABLE Books(\n    ISBN VARCHAR(13) UNIQUE PRIMARY KEY,\n    Title TEXT,\n    YearOfPublication INT ,\n    Genre TEXT,\n    AuthorID INTEGER,\n    FOREIGN KEY(AuthorID) REFERENCES Authors(AuthorID)\n);\nCREATE TABLE Publishers(\n    PublisherID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Location TEXT\n);\nCREATE TABLE Reviews(\n    ReviewID INTEGER PRIMARY KEY AUTOINCREMENT,\n    ISBN VARCHAR(13),\n    Rating INT ,\n    Comment TEXT,\n    DatePosted DATE,\n    FOREIGN KEY(ISBN) REFERENCES Books(ISBN)\n);\nCREATE TABLE SalesData(\n    SaleID INTEGER PRIMARY KEY AUTOINCREMENT,\n    ISBN VARCHAR(13),\n    QuantitySold INT,\n    Revenue DECIMAL(10,2),\n    DateOfSale DATE,\n    FOREIGN KEY(ISBN) REFERENCES Books(ISBN)\n);\n\nINSERT INTO \"Authors\" (AuthorID,Name,Country) VALUES (1,'John Doe','USA'),(2,'Jane Smith','UK'),(3,'Alice Johnson','Canada'),(4,'Bob Brown','Australia'),(5,'Charlie White','Germany');\nINSERT INTO \"BookPublishingHistory\" (PublishingID,ISBN,PublisherID,YearOfPublication) VALUES (1,'1234567890123',1,2018),(2,'9876543210987',2,2020),(3,'1122334455667',3,2018),(4,'665544332211',4,2019),(5,'778899110000',5,2017);\nINSERT INTO \"Books\" (ISBN,Title,YearOfPublication,Genre,AuthorID) VALUES ('1234567890123','Science Fiction Book',2018,'Science Fiction',1),('9876543210987','Another Science Fiction Book',2020,'Science Fiction',1),('1122334455667','Romance Book',2018,'Romance',2),('665544332211','Yet Another Romance Book',2019,'Romance',2),('778899110000','Mystery Book',2017,'Mystery',3);\nINSERT INTO \"Publishers\" (PublisherID,Name,Location) VALUES (1,'Publisher A','New York'),(2,'Publisher B','London'),(3,'Publisher C','Toronto'),(4,'Publisher D','Sydney'),(5,'Publisher E','Berlin');\nINSERT INTO \"Reviews\" (ReviewID,ISBN,Rating,Comment,DatePosted) VALUES (1,'1234567890123',5,'Excellent book!','2021-08-01'),(2,'9876543210987',4,'Good read.','2021-08-02'),(3,'1122334455667',3,'Average story.','2021-08-03'),(4,'665544332211',2,'Not my cup of tea.','2021-08-04'),(5,'778899110000',1,'Did not like it at all.','2021-08-05');\nINSERT INTO \"SalesData\" (SaleID,ISBN,QuantitySold,Revenue,DateOfSale) VALUES (1,'1234567890123',500,10000,'2021-08-01'),(2,'9876543210987',600,12000,'2021-08-02'),(3,'1122334455667',400,8000,'2021-08-03'),(4,'665544332211',300,6000,'2021-08-04'),(5,'778899110000',200,4000,'2021-08-05');\n",
      "question": "List science fiction books and romance books published in 2018. Show them in one table.",
      "gold_queries": [
        "SELECT Books.Title \r\nFROM Books JOIN BookPublishingHistory ON Books.ISBN = BookPublishingHistory.ISBN\r\nWHERE (Books.Genre = 'Science Fiction' OR Books.Genre = 'Romance') AND BookPublishingHistory.YearOfPublication = 2018",
        "SELECT Books.Title \r\nFROM Books JOIN BookPublishingHistory ON Books.ISBN = BookPublishingHistory.ISBN\r\nWHERE Books.Genre = 'Science Fiction' OR Books.Genre = 'Romance' AND BookPublishingHistory.YearOfPublication = 2018"
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Generate a combined table containing only books categorized as 'Science Fiction' and 'Romance', and those published in 2018.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Title, Genre, YearOfPublication FROM Books WHERE (Genre = 'Science Fiction' OR Genre = 'Romance') AND YearOfPublication = 2018"
          ]
        },
        {
          "interpretation": "List all books with a genre of 'Science Fiction' or 'Romance', published in the year 2018.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Title\nFROM Books\nWHERE Genre IN ('Science Fiction', 'Romance') AND YearOfPublication = 2018"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.5,
        "f1_score": 0.5,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Entertainment/attachment_1tab_ref_book_genre/attachment_1tab_ref_book_genre.sqlite",
      "db_dump": "CREATE TABLE Authors(\n    AuthorID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Country TEXT\n);\nCREATE TABLE BookPublishingHistory(\n    PublishingID INTEGER PRIMARY KEY AUTOINCREMENT,\n    ISBN VARCHAR(13),\n    PublisherID INTEGER,\n    YearOfPublication INT,\n    FOREIGN KEY(ISBN) REFERENCES Books(ISBN),\n    FOREIGN KEY(PublisherID) REFERENCES Publishers(PublisherID)\n);\nCREATE TABLE Books(\n    ISBN VARCHAR(13) UNIQUE PRIMARY KEY,\n    Title TEXT,\n    YearOfPublication INT ,\n    Genre TEXT,\n    AuthorID INTEGER,\n    FOREIGN KEY(AuthorID) REFERENCES Authors(AuthorID)\n);\nCREATE TABLE Publishers(\n    PublisherID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Location TEXT\n);\nCREATE TABLE Reviews(\n    ReviewID INTEGER PRIMARY KEY AUTOINCREMENT,\n    ISBN VARCHAR(13),\n    Rating INT ,\n    Comment TEXT,\n    DatePosted DATE,\n    FOREIGN KEY(ISBN) REFERENCES Books(ISBN)\n);\nCREATE TABLE SalesData(\n    SaleID INTEGER PRIMARY KEY AUTOINCREMENT,\n    ISBN VARCHAR(13),\n    QuantitySold INT,\n    Revenue DECIMAL(10,2),\n    DateOfSale DATE,\n    FOREIGN KEY(ISBN) REFERENCES Books(ISBN)\n);\n\nINSERT INTO \"Authors\" (AuthorID,Name,Country) VALUES (1,'John Doe','USA'),(2,'Jane Smith','UK'),(3,'Alice Johnson','Canada'),(4,'Bob Brown','Australia'),(5,'Charlie White','Germany');\nINSERT INTO \"BookPublishingHistory\" (PublishingID,ISBN,PublisherID,YearOfPublication) VALUES (1,'1234567890123',1,2018),(2,'9876543210987',2,2020),(3,'1122334455667',3,2018),(4,'665544332211',4,2019),(5,'778899110000',5,2017);\nINSERT INTO \"Books\" (ISBN,Title,YearOfPublication,Genre,AuthorID) VALUES ('1234567890123','Science Fiction Book',2018,'Science Fiction',1),('9876543210987','Another Science Fiction Book',2020,'Science Fiction',1),('1122334455667','Romance Book',2018,'Romance',2),('665544332211','Yet Another Romance Book',2019,'Romance',2),('778899110000','Mystery Book',2017,'Mystery',3);\nINSERT INTO \"Publishers\" (PublisherID,Name,Location) VALUES (1,'Publisher A','New York'),(2,'Publisher B','London'),(3,'Publisher C','Toronto'),(4,'Publisher D','Sydney'),(5,'Publisher E','Berlin');\nINSERT INTO \"Reviews\" (ReviewID,ISBN,Rating,Comment,DatePosted) VALUES (1,'1234567890123',5,'Excellent book!','2021-08-01'),(2,'9876543210987',4,'Good read.','2021-08-02'),(3,'1122334455667',3,'Average story.','2021-08-03'),(4,'665544332211',2,'Not my cup of tea.','2021-08-04'),(5,'778899110000',1,'Did not like it at all.','2021-08-05');\nINSERT INTO \"SalesData\" (SaleID,ISBN,QuantitySold,Revenue,DateOfSale) VALUES (1,'1234567890123',500,10000,'2021-08-01'),(2,'9876543210987',600,12000,'2021-08-02'),(3,'1122334455667',400,8000,'2021-08-03'),(4,'665544332211',300,6000,'2021-08-04'),(5,'778899110000',200,4000,'2021-08-05');\n",
      "question": "Which science fiction books were published in 2018 and which romance books were published in the same year? Show them in one table.",
      "gold_queries": [
        "SELECT Books.Title \r\nFROM Books JOIN BookPublishingHistory ON Books.ISBN = BookPublishingHistory.ISBN\r\nWHERE (Books.Genre = 'Science Fiction' OR Books.Genre = 'Romance') AND BookPublishingHistory.YearOfPublication = 2018"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Find a list of science fiction books and romance books released in 2018 and present them together in a merged table.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Title FROM Books WHERE Genre = 'Science Fiction' AND YearOfPublication = 2018\nUNION\nSELECT Title FROM Books WHERE Genre = 'Romance' AND YearOfPublication = 2018"
          ]
        },
        {
          "interpretation": "Retrieve all science fiction books published in 2018 and all romance books published in 2018, combining them into a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Title, Genre, YearOfPublication FROM Books WHERE (Genre = 'Science Fiction' AND YearOfPublication = 2018) OR (Genre = 'Romance' AND YearOfPublication = 2018)"
          ]
        },
        {
          "interpretation": "Create a table showing the ISBNs of all science fiction books published in 2018 and a separate column for the ISBNs of all romance books published in 2018.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    (SELECT ISBN FROM Books WHERE Genre = 'Science Fiction' AND YearOfPublication = 2018) AS ScienceFictionISBN,\n    (SELECT ISBN FROM Books WHERE Genre = 'Romance' AND YearOfPublication = 2018) AS RomanceISBN"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Entertainment/attachment_1tab_ref_book_genre/attachment_1tab_ref_book_genre.sqlite",
      "db_dump": "CREATE TABLE Authors(\n    AuthorID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Country TEXT\n);\nCREATE TABLE BookPublishingHistory(\n    PublishingID INTEGER PRIMARY KEY AUTOINCREMENT,\n    ISBN VARCHAR(13),\n    PublisherID INTEGER,\n    YearOfPublication INT,\n    FOREIGN KEY(ISBN) REFERENCES Books(ISBN),\n    FOREIGN KEY(PublisherID) REFERENCES Publishers(PublisherID)\n);\nCREATE TABLE Books(\n    ISBN VARCHAR(13) UNIQUE PRIMARY KEY,\n    Title TEXT,\n    YearOfPublication INT ,\n    Genre TEXT,\n    AuthorID INTEGER,\n    FOREIGN KEY(AuthorID) REFERENCES Authors(AuthorID)\n);\nCREATE TABLE Publishers(\n    PublisherID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Location TEXT\n);\nCREATE TABLE Reviews(\n    ReviewID INTEGER PRIMARY KEY AUTOINCREMENT,\n    ISBN VARCHAR(13),\n    Rating INT ,\n    Comment TEXT,\n    DatePosted DATE,\n    FOREIGN KEY(ISBN) REFERENCES Books(ISBN)\n);\nCREATE TABLE SalesData(\n    SaleID INTEGER PRIMARY KEY AUTOINCREMENT,\n    ISBN VARCHAR(13),\n    QuantitySold INT,\n    Revenue DECIMAL(10,2),\n    DateOfSale DATE,\n    FOREIGN KEY(ISBN) REFERENCES Books(ISBN)\n);\n\nINSERT INTO \"Authors\" (AuthorID,Name,Country) VALUES (1,'John Doe','USA'),(2,'Jane Smith','UK'),(3,'Alice Johnson','Canada'),(4,'Bob Brown','Australia'),(5,'Charlie White','Germany');\nINSERT INTO \"BookPublishingHistory\" (PublishingID,ISBN,PublisherID,YearOfPublication) VALUES (1,'1234567890123',1,2018),(2,'9876543210987',2,2020),(3,'1122334455667',3,2018),(4,'665544332211',4,2019),(5,'778899110000',5,2017);\nINSERT INTO \"Books\" (ISBN,Title,YearOfPublication,Genre,AuthorID) VALUES ('1234567890123','Science Fiction Book',2018,'Science Fiction',1),('9876543210987','Another Science Fiction Book',2020,'Science Fiction',1),('1122334455667','Romance Book',2018,'Romance',2),('665544332211','Yet Another Romance Book',2019,'Romance',2),('778899110000','Mystery Book',2017,'Mystery',3);\nINSERT INTO \"Publishers\" (PublisherID,Name,Location) VALUES (1,'Publisher A','New York'),(2,'Publisher B','London'),(3,'Publisher C','Toronto'),(4,'Publisher D','Sydney'),(5,'Publisher E','Berlin');\nINSERT INTO \"Reviews\" (ReviewID,ISBN,Rating,Comment,DatePosted) VALUES (1,'1234567890123',5,'Excellent book!','2021-08-01'),(2,'9876543210987',4,'Good read.','2021-08-02'),(3,'1122334455667',3,'Average story.','2021-08-03'),(4,'665544332211',2,'Not my cup of tea.','2021-08-04'),(5,'778899110000',1,'Did not like it at all.','2021-08-05');\nINSERT INTO \"SalesData\" (SaleID,ISBN,QuantitySold,Revenue,DateOfSale) VALUES (1,'1234567890123',500,10000,'2021-08-01'),(2,'9876543210987',600,12000,'2021-08-02'),(3,'1122334455667',400,8000,'2021-08-03'),(4,'665544332211',300,6000,'2021-08-04'),(5,'778899110000',200,4000,'2021-08-05');\n",
      "question": "Provide a list of all science fiction books and also provide a list of romance books published in 2018. Show them in one table.",
      "gold_queries": [
        "SELECT Books.Title \r\nFROM Books JOIN BookPublishingHistory ON Books.ISBN = BookPublishingHistory.ISBN\r\nWHERE Books.Genre = 'Science Fiction' OR Books.Genre = 'Romance' AND BookPublishingHistory.YearOfPublication = 2018"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Return a table containing two columns: one displaying all science fiction books and another displaying all romance books published in 2018.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT B1.Title AS ScienceFictionBooks, B2.Title AS RomanceBooks\nFROM Books B1\nLEFT JOIN Books B2 ON B2.Genre = 'Romance' AND B2.YearOfPublication = 2018\nWHERE B1.Genre = 'Science Fiction' AND B1.YearOfPublication = 2018\nUNION\nSELECT B1.Title AS ScienceFictionBooks, B2.Title AS RomanceBooks\nFROM Books B2\nLEFT JOIN Books B1 ON B1.Genre = 'Science Fiction' AND B1.YearOfPublication = 2018\nWHERE B2.Genre = 'Romance' AND B2.YearOfPublication = 2018"
          ]
        },
        {
          "interpretation": "Create a table with two separate sections, one listing all science fiction books and the other listing all romance books from 2018.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Title FROM Books WHERE Genre = 'Science Fiction'\nUNION ALL\nSELECT Title FROM Books WHERE Genre = 'Romance' AND YearOfPublication = 2018"
          ]
        },
        {
          "interpretation": "Retrieve all science fiction books and filter the result by year of publication being 2018. Additionally, retrieve all romance books and filter the result by year of publication being 2018. Display the combined result in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Title, YearOfPublication, Genre \nFROM Books \nWHERE Genre = 'Science Fiction' AND YearOfPublication = 2018 \nUNION \nSELECT Title, YearOfPublication, Genre \nFROM Books \nWHERE Genre = 'Romance' AND YearOfPublication = 2018"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Job Postings/scope_architects_building_types/scope_architects_building_types.sqlite",
      "db_dump": "CREATE TABLE Architects(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    experience INT\n);\nCREATE TABLE Architects_Building_Types(\n    architect_id INTEGER,\n    building_type_id INTEGER,\n    FOREIGN KEY (architect_id) REFERENCES Architects(id),\n    FOREIGN KEY (building_type_id) REFERENCES Building_Types(id),\n    PRIMARY KEY (architect_id, building_type_id)\n);\nCREATE TABLE Building_Types(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT\n);\nCREATE TABLE Job_Postings(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    description TEXT,\n    required_skills TEXT,\n    salary REAL,\n    post_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nINSERT INTO \"Architects\" (id,name,experience) VALUES (1,'John Doe',10),(2,'Jane Smith',7),(3,'Michael Johnson',5),(4,'Emily Williams',8),(5,'David Brown',6);\nINSERT INTO \"Architects_Building_Types\" (architect_id,building_type_id) VALUES (1,1),(1,2),(2,1),(2,2),(3,1),(3,2),(4,1),(4,2),(5,1),(5,2);\nINSERT INTO \"Building_Types\" (id,type) VALUES (1,'Residential'),(2,'Commercial'),(3,'Industrial'),(4,'Institutional'),(5,'Mixed-Use');\nINSERT INTO \"Job_Postings\" (id,title,description,required_skills,salary,post_date) VALUES (1,'Senior Residential Architect','Design residential buildings.','AutoCAD, Revit, SketchUp, knowledge of local building codes',90000.0,'2024-01-30 19:16:14'),(2,'Junior Commercial Architect','Assist in designing commercial projects.','AutoCAD, Revit, basic understanding of structural systems',60000.0,'2024-01-30 19:16:14'),(3,'Architectural Designer','Support architects on various project types.','SketchUp, InDesign, Adobe Creative Suite',50000.0,'2024-01-30 19:16:14'),(4,'Project Manager','Oversee construction projects from start to finish.','PMP certification, strong communication skills, knowledge of contract law',80000.0,'2024-01-30 19:16:14'),(5,'BIM Coordinator','Create and manage BIM models for projects.','Revit, Navisworks, Dynamo, Rhino',65000.0,'2024-01-30 19:16:14');\n",
      "question": "What type of building types are associated with each architect?",
      "gold_queries": [
        "SELECT Building_Types.type  from Architects_Building_Types join Building_Types on Architects_Building_Types.building_type_id = Building_Types.id join Architects on Architects_Building_Types.architect_id = Architects.id   GROUP BY Architects_Building_Types.building_type_id HAVING COUNT(DISTINCT Architects_Building_Types.architect_id) = (SELECT COUNT(*) FROM  Architects)",
        "select architects.name , building_types.type from Architects_Building_Types join Building_Types on Architects_Building_Types.building_type_id = Building_Types.id join Architects on Architects_Building_Types.architect_id = Architects.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Retrieve the building types for which each architect has experience.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.name, BT.type\nFROM Architects A\nJOIN Architects_Building_Types ABT ON A.id = ABT.architect_id\nJOIN Building_Types BT ON ABT.building_type_id = BT.id"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 1.0,
        "f1_score": 0.6666666666666666,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Job Postings/scope_architects_building_types/scope_architects_building_types.sqlite",
      "db_dump": "CREATE TABLE Architects(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    experience INT\n);\nCREATE TABLE Architects_Building_Types(\n    architect_id INTEGER,\n    building_type_id INTEGER,\n    FOREIGN KEY (architect_id) REFERENCES Architects(id),\n    FOREIGN KEY (building_type_id) REFERENCES Building_Types(id),\n    PRIMARY KEY (architect_id, building_type_id)\n);\nCREATE TABLE Building_Types(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT\n);\nCREATE TABLE Job_Postings(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    description TEXT,\n    required_skills TEXT,\n    salary REAL,\n    post_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nINSERT INTO \"Architects\" (id,name,experience) VALUES (1,'John Doe',10),(2,'Jane Smith',7),(3,'Michael Johnson',5),(4,'Emily Williams',8),(5,'David Brown',6);\nINSERT INTO \"Architects_Building_Types\" (architect_id,building_type_id) VALUES (1,1),(1,2),(2,1),(2,2),(3,1),(3,2),(4,1),(4,2),(5,1),(5,2);\nINSERT INTO \"Building_Types\" (id,type) VALUES (1,'Residential'),(2,'Commercial'),(3,'Industrial'),(4,'Institutional'),(5,'Mixed-Use');\nINSERT INTO \"Job_Postings\" (id,title,description,required_skills,salary,post_date) VALUES (1,'Senior Residential Architect','Design residential buildings.','AutoCAD, Revit, SketchUp, knowledge of local building codes',90000.0,'2024-01-30 19:16:14'),(2,'Junior Commercial Architect','Assist in designing commercial projects.','AutoCAD, Revit, basic understanding of structural systems',60000.0,'2024-01-30 19:16:14'),(3,'Architectural Designer','Support architects on various project types.','SketchUp, InDesign, Adobe Creative Suite',50000.0,'2024-01-30 19:16:14'),(4,'Project Manager','Oversee construction projects from start to finish.','PMP certification, strong communication skills, knowledge of contract law',80000.0,'2024-01-30 19:16:14'),(5,'BIM Coordinator','Create and manage BIM models for projects.','Revit, Navisworks, Dynamo, Rhino',65000.0,'2024-01-30 19:16:14');\n",
      "question": "For each architect, provide the corresponding building type.",
      "gold_queries": [
        "select architects.name , building_types.type from Architects_Building_Types join Building_Types on Architects_Building_Types.building_type_id = Building_Types.id join Architects on Architects_Building_Types.architect_id = Architects.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Generate a table showing each architect and their corresponding building types.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT a.name, bt.type\nFROM Architects a\nJOIN Architects_Building_Types abt ON a.id = abt.architect_id\nJOIN Building_Types bt ON abt.building_type_id = bt.id"
          ]
        },
        {
          "interpretation": "For each architect's ID, return the associated building type ID.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT architect_id, building_type_id FROM Architects_Building_Types"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Job Postings/scope_architects_building_types/scope_architects_building_types.sqlite",
      "db_dump": "CREATE TABLE Architects(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    experience INT\n);\nCREATE TABLE Architects_Building_Types(\n    architect_id INTEGER,\n    building_type_id INTEGER,\n    FOREIGN KEY (architect_id) REFERENCES Architects(id),\n    FOREIGN KEY (building_type_id) REFERENCES Building_Types(id),\n    PRIMARY KEY (architect_id, building_type_id)\n);\nCREATE TABLE Building_Types(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT\n);\nCREATE TABLE Job_Postings(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    description TEXT,\n    required_skills TEXT,\n    salary REAL,\n    post_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nINSERT INTO \"Architects\" (id,name,experience) VALUES (1,'John Doe',10),(2,'Jane Smith',7),(3,'Michael Johnson',5),(4,'Emily Williams',8),(5,'David Brown',6);\nINSERT INTO \"Architects_Building_Types\" (architect_id,building_type_id) VALUES (1,1),(1,2),(2,1),(2,2),(3,1),(3,2),(4,1),(4,2),(5,1),(5,2);\nINSERT INTO \"Building_Types\" (id,type) VALUES (1,'Residential'),(2,'Commercial'),(3,'Industrial'),(4,'Institutional'),(5,'Mixed-Use');\nINSERT INTO \"Job_Postings\" (id,title,description,required_skills,salary,post_date) VALUES (1,'Senior Residential Architect','Design residential buildings.','AutoCAD, Revit, SketchUp, knowledge of local building codes',90000.0,'2024-01-30 19:16:14'),(2,'Junior Commercial Architect','Assist in designing commercial projects.','AutoCAD, Revit, basic understanding of structural systems',60000.0,'2024-01-30 19:16:14'),(3,'Architectural Designer','Support architects on various project types.','SketchUp, InDesign, Adobe Creative Suite',50000.0,'2024-01-30 19:16:14'),(4,'Project Manager','Oversee construction projects from start to finish.','PMP certification, strong communication skills, knowledge of contract law',80000.0,'2024-01-30 19:16:14'),(5,'BIM Coordinator','Create and manage BIM models for projects.','Revit, Navisworks, Dynamo, Rhino',65000.0,'2024-01-30 19:16:14');\n",
      "question": "What type of building is common across all architects?",
      "gold_queries": [
        "SELECT Building_Types.type  from Architects_Building_Types join Building_Types on Architects_Building_Types.building_type_id = Building_Types.id join Architects on Architects_Building_Types.architect_id = Architects.id   GROUP BY Architects_Building_Types.building_type_id HAVING COUNT(DISTINCT Architects_Building_Types.architect_id) = (SELECT COUNT(*) FROM  Architects)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "The building type with the highest frequency associated with architects",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT type\nFROM Building_Types\nWHERE id = (\n    SELECT building_type_id\n    FROM Architects_Building_Types\n    GROUP BY building_type_id\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n)"
          ]
        },
        {
          "interpretation": "All building types represented in the database",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT type FROM Building_Types"
          ]
        },
        {
          "interpretation": "A specific building type with an equal association with all architects.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT T1.type\nFROM Building_Types AS T1\nJOIN Architects_Building_Types AS T2 ON T1.id = T2.building_type_id\nGROUP BY T1.id\nHAVING COUNT(DISTINCT T2.architect_id) = (SELECT COUNT(*) FROM Architects)"
          ]
        },
        {
          "interpretation": "Residential and Commercial buildings combined.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT a.name, a.experience\nFROM Architects a\nJOIN Architects_Building_Types abt ON a.id = abt.architect_id\nJOIN Building_Types bt ON abt.building_type_id = bt.id\nWHERE bt.type IN ('Residential', 'Commercial')\nGROUP BY a.id, a.name, a.experience\nHAVING COUNT(DISTINCT bt.type) = 2"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_services_subtitles/scope_streaming_services_subtitles.sqlite",
      "db_dump": "CREATE TABLE Streaming_Services (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    url TEXT\n);\nCREATE TABLE Streaming_Services_Subtitles (\n    streaming_service_id INTEGER,\n    subtitle_id INTEGER,\n    FOREIGN KEY(streaming_service_id) REFERENCES Streaming_Services(id),\n    FOREIGN KEY(subtitle_id) REFERENCES Subtitles(id)\n);\nCREATE TABLE Subtitles (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    language TEXT,\n    default_subtitle BOOLEAN DEFAULT FALSE\n);\n\nINSERT INTO \"Streaming_Services\" (id,name,url) VALUES (1,'Netflix','https://www.netflix.com'),(2,'Amazon Prime Video','https://www.amazon.com/prime-video'),(3,'Hulu','https://www.hulu.com'),(4,'Disney+','https://www.disneyplus.com'),(5,'HBO Max','https://www.hbomax.com');\nINSERT INTO \"Streaming_Services_Subtitles\" (streaming_service_id,subtitle_id) VALUES (1,1),(2,2),(3,3),(4,4),(5,5),(2,1),(3,1),(4,1),(5,1);\nINSERT INTO \"Subtitles\" (id,language,default_subtitle) VALUES (1,'English',1),(2,'Spanish',0),(3,'French',0),(4,'German',0),(5,'Italian',0);\n",
      "question": "List the status of subtitles available at each streaming service.",
      "gold_queries": [
        "SELECT Subtitles.default_subtitle  from Streaming_Services_Subtitles join Subtitles on Streaming_Services_Subtitles.subtitle_id = Subtitles.id join Streaming_Services on Streaming_Services_Subtitles.streaming_service_id = Streaming_Services.id   GROUP BY Streaming_Services_Subtitles.subtitle_id HAVING COUNT(DISTINCT Streaming_Services_Subtitles.streaming_service_id) = (SELECT COUNT(*) FROM  Streaming_Services)",
        "select streaming_services.name , subtitles.default_subtitle from Streaming_Services_Subtitles join Subtitles on Streaming_Services_Subtitles.subtitle_id = Subtitles.id join Streaming_Services on Streaming_Services_Subtitles.streaming_service_id = Streaming_Services.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List the names of all streaming services and the subtitle languages they offer.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ss.name, s.language \nFROM Streaming_Services ss \nJOIN Streaming_Services_Subtitles sss ON ss.id = sss.streaming_service_id \nJOIN Subtitles s ON sss.subtitle_id = s.id"
          ]
        },
        {
          "interpretation": "Determine which streaming services have subtitles enabled.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT ss.name\nFROM Streaming_Services ss\nJOIN Streaming_Services_Subtitles sss ON ss.id = sss.streaming_service_id"
          ]
        },
        {
          "interpretation": "Identify if each streaming service offers default subtitles and for which languages.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ss.name, s.language, s.default_subtitle \nFROM Streaming_Services ss \nJOIN Streaming_Services_Subtitles sss ON ss.id = sss.streaming_service_id \nJOIN Subtitles s ON sss.subtitle_id = s.id \nWHERE s.default_subtitle = 1"
          ]
        },
        {
          "interpretation": "List the number of subtitles available at each streaming service.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT s.name, COUNT(ss.subtitle_id) AS number_of_subtitles\nFROM Streaming_Services s\nLEFT JOIN Streaming_Services_Subtitles ss ON s.id = ss.streaming_service_id\nGROUP BY s.id"
          ]
        },
        {
          "interpretation": "Determine if each streaming service offers subtitles in multiple languages.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ss.name, CASE WHEN COUNT(DISTINCT s.language) > 1 THEN 'Yes' ELSE 'No' END AS offers_multiple_languages\nFROM Streaming_Services ss\nJOIN Streaming_Services_Subtitles sss ON ss.id = sss.streaming_service_id\nJOIN Subtitles s ON sss.subtitle_id = s.id\nGROUP BY ss.name"
          ]
        },
        {
          "interpretation": "List the default subtitle language for each streaming service.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.name, SUB.language\nFROM Streaming_Services S\nJOIN Streaming_Services_Subtitles SSS ON S.id = SSS.streaming_service_id\nJOIN Subtitles SUB ON SSS.subtitle_id = SUB.id\nWHERE SUB.default_subtitle = 1"
          ]
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_service_video_quality/scope_streaming_service_video_quality.sqlite",
      "db_dump": "CREATE TABLE Streaming_Service (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    price REAL\n);\nCREATE TABLE Streaming_Service_Video_Quality (\n    streaming_service_id INTEGER,\n    video_quality_id INTEGER,\n    FOREIGN KEY (streaming_service_id) REFERENCES Streaming_Service(id),\n    FOREIGN KEY (video_quality_id) REFERENCES Video_Quality(id),\n    PRIMARY KEY (streaming_service_id, video_quality_id)\n);\nCREATE TABLE Video_Quality (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    quality TEXT\n);\n\nINSERT INTO \"Streaming_Service\" (id,name,price) VALUES (1,'Netflix',12.99),(2,'Amazon Prime Video',8.99),(3,'Disney+',6.99),(4,'Hulu',5.99),(5,'YouTube Premium',11.99);\nINSERT INTO \"Streaming_Service_Video_Quality\" (streaming_service_id,video_quality_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\nINSERT INTO \"Video_Quality\" (id,quality) VALUES (1,'HD'),(2,'SD'),(3,'Ultra HD'),(4,'FHD'),(5,'3D');\n",
      "question": "What video quality is common across all streaming services?",
      "gold_queries": [
        "SELECT Video_Quality.quality  from Streaming_Service_Video_Quality join Video_Quality on Streaming_Service_Video_Quality.video_quality_id = Video_Quality.id join Streaming_Service on Streaming_Service_Video_Quality.streaming_service_id = Streaming_Service.id   GROUP BY Streaming_Service_Video_Quality.video_quality_id HAVING COUNT(DISTINCT Streaming_Service_Video_Quality.streaming_service_id) = (SELECT COUNT(*) FROM  Streaming_Service)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Which video quality is offered by the highest number of streaming services?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT quality FROM Video_Quality WHERE id = (SELECT video_quality_id FROM Streaming_Service_Video_Quality GROUP BY video_quality_id ORDER BY COUNT(*) DESC LIMIT 1)"
          ]
        },
        {
          "interpretation": "Which video quality is present in the Video_Quality table with the smallest number of streaming service associations.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT quality \nFROM Video_Quality \nWHERE id = (SELECT video_quality_id \n            FROM Streaming_Service_Video_Quality \n            GROUP BY video_quality_id \n            ORDER BY COUNT(streaming_service_id) \n            LIMIT 1)"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_service_video_quality/scope_streaming_service_video_quality.sqlite",
      "db_dump": "CREATE TABLE Streaming_Service (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    price REAL\n);\nCREATE TABLE Streaming_Service_Video_Quality (\n    streaming_service_id INTEGER,\n    video_quality_id INTEGER,\n    FOREIGN KEY (streaming_service_id) REFERENCES Streaming_Service(id),\n    FOREIGN KEY (video_quality_id) REFERENCES Video_Quality(id),\n    PRIMARY KEY (streaming_service_id, video_quality_id)\n);\nCREATE TABLE Video_Quality (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    quality TEXT\n);\n\nINSERT INTO \"Streaming_Service\" (id,name,price) VALUES (1,'Netflix',12.99),(2,'Amazon Prime Video',8.99),(3,'Disney+',6.99),(4,'Hulu',5.99),(5,'YouTube Premium',11.99);\nINSERT INTO \"Streaming_Service_Video_Quality\" (streaming_service_id,video_quality_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\nINSERT INTO \"Video_Quality\" (id,quality) VALUES (1,'HD'),(2,'SD'),(3,'Ultra HD'),(4,'FHD'),(5,'3D');\n",
      "question": "Show me the video quality that every streaming service offers.",
      "gold_queries": [
        "SELECT Video_Quality.quality  from Streaming_Service_Video_Quality join Video_Quality on Streaming_Service_Video_Quality.video_quality_id = Video_Quality.id join Streaming_Service on Streaming_Service_Video_Quality.streaming_service_id = Streaming_Service.id   GROUP BY Streaming_Service_Video_Quality.video_quality_id HAVING COUNT(DISTINCT Streaming_Service_Video_Quality.streaming_service_id) = (SELECT COUNT(*) FROM  Streaming_Service)",
        "select streaming_service.name , video_quality.quality from Streaming_Service_Video_Quality join Video_Quality on Streaming_Service_Video_Quality.video_quality_id = Video_Quality.id join Streaming_Service on Streaming_Service_Video_Quality.streaming_service_id = Streaming_Service.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Retrieve the distinct video qualities present in the Streaming_Service_Video_Quality table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT video_quality_id FROM Streaming_Service_Video_Quality"
          ]
        },
        {
          "interpretation": "For each streaming service, display the corresponding video quality name.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ss.name, vq.quality \nFROM Streaming_Service ss \nJOIN Streaming_Service_Video_Quality ssvq ON ss.id = ssvq.streaming_service_id \nJOIN Video_Quality vq ON ssvq.video_quality_id = vq.id"
          ]
        },
        {
          "interpretation": "List all video quality IDs associated with each streaming service.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT streaming_service_id, video_quality_id FROM Streaming_Service_Video_Quality"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.3333333333333333,
        "f1_score": 0.4,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_service_video_quality/scope_streaming_service_video_quality.sqlite",
      "db_dump": "CREATE TABLE Streaming_Service (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    price REAL\n);\nCREATE TABLE Streaming_Service_Video_Quality (\n    streaming_service_id INTEGER,\n    video_quality_id INTEGER,\n    FOREIGN KEY (streaming_service_id) REFERENCES Streaming_Service(id),\n    FOREIGN KEY (video_quality_id) REFERENCES Video_Quality(id),\n    PRIMARY KEY (streaming_service_id, video_quality_id)\n);\nCREATE TABLE Video_Quality (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    quality TEXT\n);\n\nINSERT INTO \"Streaming_Service\" (id,name,price) VALUES (1,'Netflix',12.99),(2,'Amazon Prime Video',8.99),(3,'Disney+',6.99),(4,'Hulu',5.99),(5,'YouTube Premium',11.99);\nINSERT INTO \"Streaming_Service_Video_Quality\" (streaming_service_id,video_quality_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\nINSERT INTO \"Video_Quality\" (id,quality) VALUES (1,'HD'),(2,'SD'),(3,'Ultra HD'),(4,'FHD'),(5,'3D');\n",
      "question": "For every streaming service, list the video quality offered.",
      "gold_queries": [
        "select streaming_service.name , video_quality.quality from Streaming_Service_Video_Quality join Video_Quality on Streaming_Service_Video_Quality.video_quality_id = Video_Quality.id join Streaming_Service on Streaming_Service_Video_Quality.streaming_service_id = Streaming_Service.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List the name of each streaming service and the highest video quality offered.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ss.name, vq.quality\nFROM Streaming_Service ss\nJOIN Streaming_Service_Video_Quality svgq ON ss.id = svgq.streaming_service_id\nJOIN Video_Quality vq ON svgq.video_quality_id = vq.id\nWHERE (ss.id, vq.id) IN (\n    SELECT streaming_service_id, MAX(video_quality_id)\n    FROM Streaming_Service_Video_Quality\n    GROUP BY streaming_service_id\n)"
          ]
        },
        {
          "interpretation": "Display a table with columns for streaming service name and all available video qualities, with a flag indicating which qualities are offered by each service.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    ss.name AS Streaming_Service_Name,\n    vq.quality AS Video_Quality,\n    CASE \n        WHEN ss_sq.video_quality_id IS NOT NULL THEN 'Yes'\n        ELSE 'No'\n    END AS Quality_Offered\nFROM \n    Streaming_Service ss\nCROSS JOIN \n    Video_Quality vq\nLEFT JOIN \n    Streaming_Service_Video_Quality ss_sq\nON \n    ss.id = ss_sq.streaming_service_id AND vq.id = ss_sq.video_quality_id\nORDER BY \n    ss.name, vq.quality"
          ]
        },
        {
          "interpretation": "For each streaming service, list all video qualities offered.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT s.name, v.quality\nFROM Streaming_Service s\nJOIN Streaming_Service_Video_Quality ss_vq ON s.id = ss_vq.streaming_service_id\nJOIN Video_Quality v ON ss_vq.video_quality_id = v.id"
          ]
        },
        {
          "interpretation": "Retrieve all unique video qualities available across all streaming services.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT quality FROM Video_Quality"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_service_user_interface/scope_streaming_service_user_interface.sqlite",
      "db_dump": "CREATE TABLE Streaming_Service (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    price REAL\n);\nCREATE TABLE Streaming_Service_User_Interface (\n    streaming_service_id INTEGER,\n    user_interface_id INTEGER,\n    FOREIGN KEY(streaming_service_id) REFERENCES Streaming_Service(id),\n    FOREIGN KEY(user_interface_id) REFERENCES User_Interface(id)\n);\nCREATE TABLE User_Interface (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    interface_type TEXT\n);\n\nINSERT INTO \"Streaming_Service\" (id,name,price) VALUES (1,'Netflix',12.99),(2,'Amazon Prime Video',8.99),(3,'Disney+',6.99),(4,'Hulu',5.99),(5,'HBO Max',14.99);\nINSERT INTO \"Streaming_Service_User_Interface\" (streaming_service_id,user_interface_id) VALUES (1,2),(2,2),(3,2),(4,2),(5,2),(5,4);\nINSERT INTO \"User_Interface\" (id,interface_type) VALUES (1,'Light Mode'),(2,'Dark Mode'),(3,'Classic Mode'),(4,'Minimalist Mode'),(5,'Customizable Mode');\n",
      "question": "What user interface types are there for every streaming service?",
      "gold_queries": [
        "SELECT User_Interface.interface_type  from Streaming_Service_User_Interface join User_Interface on Streaming_Service_User_Interface.user_interface_id = User_Interface.id join Streaming_Service on Streaming_Service_User_Interface.streaming_service_id = Streaming_Service.id   GROUP BY Streaming_Service_User_Interface.user_interface_id HAVING COUNT(DISTINCT Streaming_Service_User_Interface.streaming_service_id) = (SELECT COUNT(*) FROM  Streaming_Service)",
        "select streaming_service.name , user_interface.interface_type from Streaming_Service_User_Interface join User_Interface on Streaming_Service_User_Interface.user_interface_id = User_Interface.id join Streaming_Service on Streaming_Service_User_Interface.streaming_service_id = Streaming_Service.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Distinct types of user interfaces used across all streaming services.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT interface_type FROM User_Interface"
          ]
        },
        {
          "interpretation": "User interface combinations for each streaming service.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ss.name, ui.interface_type\nFROM Streaming_Service ss\nJOIN Streaming_Service_User_Interface ssui ON ss.id = ssui.streaming_service_id\nJOIN User_Interface ui ON ssui.user_interface_id = ui.id"
          ]
        },
        {
          "interpretation": "Number of distinct user interface types per streaming service.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ss.name, COUNT(DISTINCT ui.interface_type) AS distinct_ui_types\nFROM Streaming_Service ss\nJOIN Streaming_Service_User_Interface ssi ON ss.id = ssi.streaming_service_id\nJOIN User_Interface ui ON ssi.user_interface_id = ui.id\nGROUP BY ss.name"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.3333333333333333,
        "f1_score": 0.4,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_service_user_interface/scope_streaming_service_user_interface.sqlite",
      "db_dump": "CREATE TABLE Streaming_Service (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    price REAL\n);\nCREATE TABLE Streaming_Service_User_Interface (\n    streaming_service_id INTEGER,\n    user_interface_id INTEGER,\n    FOREIGN KEY(streaming_service_id) REFERENCES Streaming_Service(id),\n    FOREIGN KEY(user_interface_id) REFERENCES User_Interface(id)\n);\nCREATE TABLE User_Interface (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    interface_type TEXT\n);\n\nINSERT INTO \"Streaming_Service\" (id,name,price) VALUES (1,'Netflix',12.99),(2,'Amazon Prime Video',8.99),(3,'Disney+',6.99),(4,'Hulu',5.99),(5,'HBO Max',14.99);\nINSERT INTO \"Streaming_Service_User_Interface\" (streaming_service_id,user_interface_id) VALUES (1,2),(2,2),(3,2),(4,2),(5,2),(5,4);\nINSERT INTO \"User_Interface\" (id,interface_type) VALUES (1,'Light Mode'),(2,'Dark Mode'),(3,'Classic Mode'),(4,'Minimalist Mode'),(5,'Customizable Mode');\n",
      "question": "What interface types are the same for all streaming services?",
      "gold_queries": [
        "SELECT User_Interface.interface_type  from Streaming_Service_User_Interface join User_Interface on Streaming_Service_User_Interface.user_interface_id = User_Interface.id join Streaming_Service on Streaming_Service_User_Interface.streaming_service_id = Streaming_Service.id   GROUP BY Streaming_Service_User_Interface.user_interface_id HAVING COUNT(DISTINCT Streaming_Service_User_Interface.streaming_service_id) = (SELECT COUNT(*) FROM  Streaming_Service)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What user interface types are shared by all streaming services?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT interface_type \nFROM User_Interface \nWHERE id IN (\n    SELECT user_interface_id \n    FROM Streaming_Service_User_Interface \n    GROUP BY user_interface_id \n    HAVING COUNT(*) = (SELECT COUNT(*) FROM Streaming_Service)\n)"
          ]
        },
        {
          "interpretation": "Which user interfaces are used by every streaming service?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ui.interface_type\nFROM User_Interface ui\nWHERE NOT EXISTS (\n    SELECT ss.id\n    FROM Streaming_Service ss\n    LEFT JOIN Streaming_Service_User_Interface ssi ON ss.id = ssi.streaming_service_id\n    WHERE ssi.user_interface_id IS NULL OR ssi.user_interface_id <> ui.id\n)"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_service_user_interface/scope_streaming_service_user_interface.sqlite",
      "db_dump": "CREATE TABLE Streaming_Service (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    price REAL\n);\nCREATE TABLE Streaming_Service_User_Interface (\n    streaming_service_id INTEGER,\n    user_interface_id INTEGER,\n    FOREIGN KEY(streaming_service_id) REFERENCES Streaming_Service(id),\n    FOREIGN KEY(user_interface_id) REFERENCES User_Interface(id)\n);\nCREATE TABLE User_Interface (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    interface_type TEXT\n);\n\nINSERT INTO \"Streaming_Service\" (id,name,price) VALUES (1,'Netflix',12.99),(2,'Amazon Prime Video',8.99),(3,'Disney+',6.99),(4,'Hulu',5.99),(5,'HBO Max',14.99);\nINSERT INTO \"Streaming_Service_User_Interface\" (streaming_service_id,user_interface_id) VALUES (1,2),(2,2),(3,2),(4,2),(5,2),(5,4);\nINSERT INTO \"User_Interface\" (id,interface_type) VALUES (1,'Light Mode'),(2,'Dark Mode'),(3,'Classic Mode'),(4,'Minimalist Mode'),(5,'Customizable Mode');\n",
      "question": "For all streaming services list the available user interface types.",
      "gold_queries": [
        "select streaming_service.name , user_interface.interface_type from Streaming_Service_User_Interface join User_Interface on Streaming_Service_User_Interface.user_interface_id = User_Interface.id join Streaming_Service on Streaming_Service_User_Interface.streaming_service_id = Streaming_Service.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Retrieve the user interface types available for every streaming service.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT S.name, U.interface_type \nFROM Streaming_Service S\nJOIN Streaming_Service_User_Interface SUI ON S.id = SUI.streaming_service_id\nJOIN User_Interface U ON SUI.user_interface_id = U.id"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_services_subtitles/scope_streaming_services_subtitles.sqlite",
      "db_dump": "CREATE TABLE Streaming_Services (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    url TEXT\n);\nCREATE TABLE Streaming_Services_Subtitles (\n    streaming_service_id INTEGER,\n    subtitle_id INTEGER,\n    FOREIGN KEY(streaming_service_id) REFERENCES Streaming_Services(id),\n    FOREIGN KEY(subtitle_id) REFERENCES Subtitles(id)\n);\nCREATE TABLE Subtitles (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    language TEXT,\n    default_subtitle BOOLEAN DEFAULT FALSE\n);\n\nINSERT INTO \"Streaming_Services\" (id,name,url) VALUES (1,'Netflix','https://www.netflix.com'),(2,'Amazon Prime Video','https://www.amazon.com/prime-video'),(3,'Hulu','https://www.hulu.com'),(4,'Disney+','https://www.disneyplus.com'),(5,'HBO Max','https://www.hbomax.com');\nINSERT INTO \"Streaming_Services_Subtitles\" (streaming_service_id,subtitle_id) VALUES (1,1),(2,2),(3,3),(4,4),(5,5),(2,1),(3,1),(4,1),(5,1);\nINSERT INTO \"Subtitles\" (id,language,default_subtitle) VALUES (1,'English',1),(2,'Spanish',0),(3,'French',0),(4,'German',0),(5,'Italian',0);\n",
      "question": "For every streaming service, give me the corresponding languages and default subtitles.",
      "gold_queries": [
        "select streaming_services.name , subtitles.language , subtitles.default_subtitle from Streaming_Services_Subtitles join Subtitles on Streaming_Services_Subtitles.subtitle_id = Subtitles.id join Streaming_Services on Streaming_Services_Subtitles.streaming_service_id = Streaming_Services.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Generate a report showing the languages supported by each streaming service with an emphasis on the default language.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT ss.name AS streaming_service, s.language AS subtitle_language, s.default_subtitle\nFROM Streaming_Services ss\nJOIN Streaming_Services_Subtitles sss ON ss.id = sss.streaming_service_id\nJOIN Subtitles s ON sss.subtitle_id = s.id"
          ]
        },
        {
          "interpretation": "List each streaming service and its default subtitle language.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ss.name, s.language \nFROM Streaming_Services ss \nJOIN Streaming_Services_Subtitles sss ON ss.id = sss.streaming_service_id \nJOIN Subtitles s ON sss.subtitle_id = s.id \nWHERE s.default_subtitle = 1"
          ]
        },
        {
          "interpretation": "Provide a list of streaming services, for each service list its corresponding subtitle languages.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ss.name, s.language\nFROM Streaming_Services ss\nJOIN Streaming_Services_Subtitles sss ON ss.id = sss.streaming_service_id\nJOIN Subtitles s ON sss.subtitle_id = s.id"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_services_subtitles/scope_streaming_services_subtitles.sqlite",
      "db_dump": "CREATE TABLE Streaming_Services (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    url TEXT\n);\nCREATE TABLE Streaming_Services_Subtitles (\n    streaming_service_id INTEGER,\n    subtitle_id INTEGER,\n    FOREIGN KEY(streaming_service_id) REFERENCES Streaming_Services(id),\n    FOREIGN KEY(subtitle_id) REFERENCES Subtitles(id)\n);\nCREATE TABLE Subtitles (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    language TEXT,\n    default_subtitle BOOLEAN DEFAULT FALSE\n);\n\nINSERT INTO \"Streaming_Services\" (id,name,url) VALUES (1,'Netflix','https://www.netflix.com'),(2,'Amazon Prime Video','https://www.amazon.com/prime-video'),(3,'Hulu','https://www.hulu.com'),(4,'Disney+','https://www.disneyplus.com'),(5,'HBO Max','https://www.hbomax.com');\nINSERT INTO \"Streaming_Services_Subtitles\" (streaming_service_id,subtitle_id) VALUES (1,1),(2,2),(3,3),(4,4),(5,5),(2,1),(3,1),(4,1),(5,1);\nINSERT INTO \"Subtitles\" (id,language,default_subtitle) VALUES (1,'English',1),(2,'Spanish',0),(3,'French',0),(4,'German',0),(5,'Italian',0);\n",
      "question": "List the status of subtitles for every streaming service.",
      "gold_queries": [
        "select streaming_services.name , subtitles.default_subtitle from Streaming_Services_Subtitles join Subtitles on Streaming_Services_Subtitles.subtitle_id = Subtitles.id join Streaming_Services on Streaming_Services_Subtitles.streaming_service_id = Streaming_Services.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List the names of all subtitles offered by each streaming service.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ss.name, s.language\nFROM Streaming_Services ss\nJOIN Streaming_Services_Subtitles sss ON ss.id = sss.streaming_service_id\nJOIN Subtitles s ON sss.subtitle_id = s.id"
          ]
        },
        {
          "interpretation": "List the number of subtitles per streaming service.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ss.name, COUNT(sss.subtitle_id) AS number_of_subtitles\nFROM Streaming_Services ss\nJOIN Streaming_Services_Subtitles sss ON ss.id = sss.streaming_service_id\nGROUP BY ss.name"
          ]
        },
        {
          "interpretation": "Indicate whether each streaming service offers subtitles in at least one language.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT s.name, CASE WHEN ss.subtitle_id IS NOT NULL THEN 'Yes' ELSE 'No' END AS offers_subtitles\nFROM Streaming_Services s\nLEFT JOIN Streaming_Services_Subtitles ss ON s.id = ss.streaming_service_id"
          ]
        },
        {
          "interpretation": "List the default subtitle language for each streaming service.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ss.name, s.language\nFROM Streaming_Services ss\nJOIN Streaming_Services_Subtitles sss ON ss.id = sss.streaming_service_id\nJOIN Subtitles s ON sss.subtitle_id = s.id\nWHERE s.default_subtitle = TRUE"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Traffic/scope_train_stations_platforms/scope_train_stations_platforms.sqlite",
      "db_dump": "CREATE TABLE Platforms(\n    PlatformID INTEGER PRIMARY KEY AUTOINCREMENT,\n    \"Name\" TEXT);\nCREATE TABLE Train_Stations(\n    StationID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Location TEXT);\nCREATE TABLE Train_Stations_Platforms(\n    StationID INTEGER,\n    PlatformID INTEGER,\n    FOREIGN KEY(StationID) REFERENCES Train_Stations(StationID),\n    FOREIGN KEY(PlatformID) REFERENCES Platforms(PlatformID));\n\nINSERT INTO \"Platforms\" (PlatformID,Name) VALUES (1,'Platform_1'),(2,'Platform_2'),(3,'Platform_3'),(4,'Platform_4'),(5,'Platform_5');\nINSERT INTO \"Train_Stations\" (StationID,Name,Location) VALUES (1,'Central','Downtown'),(2,'Parkville','East Side'),(3,'Washington','West Side'),(4,'Lakeview','North Side'),(5,'Riverfront','South Side');\nINSERT INTO \"Train_Stations_Platforms\" (StationID,PlatformID) VALUES (1,1),(1,2),(2,1),(2,2),(3,1),(3,3),(4,4),(4,5),(5,1),(5,3),(4,1);\n",
      "question": "Give me the platform names that are at each train station.",
      "gold_queries": [
        "SELECT Platforms.Name  from Train_Stations_Platforms join Platforms on Train_Stations_Platforms.PlatformID = Platforms.PlatformID join Train_Stations on Train_Stations_Platforms.StationID = Train_Stations.StationID   GROUP BY Train_Stations_Platforms.PlatformID HAVING COUNT(DISTINCT Train_Stations_Platforms.StationID) = (SELECT COUNT(*) FROM  Train_Stations)",
        "select train_stations.name , platforms.name from Train_Stations_Platforms join Platforms on Train_Stations_Platforms.PlatformID = Platforms.PlatformID join Train_Stations on Train_Stations_Platforms.StationID = Train_Stations.StationID"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Return all unique platform names present within the dataset.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT Name FROM Platforms"
          ]
        },
        {
          "interpretation": "List each train station and the corresponding platform names it has.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT TS.Name AS StationName, P.Name AS PlatformName \nFROM Train_Stations AS TS \nJOIN Train_Stations_Platforms AS TSP ON TS.StationID = TSP.StationID \nJOIN Platforms AS P ON TSP.PlatformID = P.PlatformID"
          ]
        },
        {
          "interpretation": "Provide a list of platform names for all stations, sorted alphabetically by station name.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.Name\nFROM Platforms P\nJOIN Train_Stations_Platforms TSP ON P.PlatformID = TSP.PlatformID\nJOIN Train_Stations TS ON TSP.StationID = TS.StationID\nORDER BY TS.Name, P.Name"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.3333333333333333,
        "f1_score": 0.4,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Traffic/scope_train_stations_platforms/scope_train_stations_platforms.sqlite",
      "db_dump": "CREATE TABLE Platforms(\n    PlatformID INTEGER PRIMARY KEY AUTOINCREMENT,\n    \"Name\" TEXT);\nCREATE TABLE Train_Stations(\n    StationID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Location TEXT);\nCREATE TABLE Train_Stations_Platforms(\n    StationID INTEGER,\n    PlatformID INTEGER,\n    FOREIGN KEY(StationID) REFERENCES Train_Stations(StationID),\n    FOREIGN KEY(PlatformID) REFERENCES Platforms(PlatformID));\n\nINSERT INTO \"Platforms\" (PlatformID,Name) VALUES (1,'Platform_1'),(2,'Platform_2'),(3,'Platform_3'),(4,'Platform_4'),(5,'Platform_5');\nINSERT INTO \"Train_Stations\" (StationID,Name,Location) VALUES (1,'Central','Downtown'),(2,'Parkville','East Side'),(3,'Washington','West Side'),(4,'Lakeview','North Side'),(5,'Riverfront','South Side');\nINSERT INTO \"Train_Stations_Platforms\" (StationID,PlatformID) VALUES (1,1),(1,2),(2,1),(2,2),(3,1),(3,3),(4,4),(4,5),(5,1),(5,3),(4,1);\n",
      "question": "What platform names are in common for all train stations?",
      "gold_queries": [
        "SELECT Platforms.Name  from Train_Stations_Platforms join Platforms on Train_Stations_Platforms.PlatformID = Platforms.PlatformID join Train_Stations on Train_Stations_Platforms.StationID = Train_Stations.StationID   GROUP BY Train_Stations_Platforms.PlatformID HAVING COUNT(DISTINCT Train_Stations_Platforms.StationID) = (SELECT COUNT(*) FROM  Train_Stations)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Which platform names appear in the `Platforms` table?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name FROM Platforms"
          ]
        },
        {
          "interpretation": "What is the intersection of platform names used by all stations?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Name FROM Platforms WHERE PlatformID IN (SELECT PlatformID FROM Train_Stations_Platforms GROUP BY PlatformID HAVING COUNT(DISTINCT StationID) = (SELECT COUNT(*) FROM Train_Stations))"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Traffic/scope_train_stations_platforms/scope_train_stations_platforms.sqlite",
      "db_dump": "CREATE TABLE Platforms(\n    PlatformID INTEGER PRIMARY KEY AUTOINCREMENT,\n    \"Name\" TEXT);\nCREATE TABLE Train_Stations(\n    StationID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Location TEXT);\nCREATE TABLE Train_Stations_Platforms(\n    StationID INTEGER,\n    PlatformID INTEGER,\n    FOREIGN KEY(StationID) REFERENCES Train_Stations(StationID),\n    FOREIGN KEY(PlatformID) REFERENCES Platforms(PlatformID));\n\nINSERT INTO \"Platforms\" (PlatformID,Name) VALUES (1,'Platform_1'),(2,'Platform_2'),(3,'Platform_3'),(4,'Platform_4'),(5,'Platform_5');\nINSERT INTO \"Train_Stations\" (StationID,Name,Location) VALUES (1,'Central','Downtown'),(2,'Parkville','East Side'),(3,'Washington','West Side'),(4,'Lakeview','North Side'),(5,'Riverfront','South Side');\nINSERT INTO \"Train_Stations_Platforms\" (StationID,PlatformID) VALUES (1,1),(1,2),(2,1),(2,2),(3,1),(3,3),(4,4),(4,5),(5,1),(5,3),(4,1);\n",
      "question": "For every train station, what platform names are there?",
      "gold_queries": [
        "select train_stations.name , platforms.name from Train_Stations_Platforms join Platforms on Train_Stations_Platforms.PlatformID = Platforms.PlatformID join Train_Stations on Train_Stations_Platforms.StationID = Train_Stations.StationID"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For each station, retrieve the names of the platforms associated with it.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT TS.Name AS StationName, P.Name AS PlatformName\nFROM Train_Stations TS\nJOIN Train_Stations_Platforms TSP ON TS.StationID = TSP.StationID\nJOIN Platforms P ON TSP.PlatformID = P.PlatformID"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_services_subtitles/scope_streaming_services_subtitles.sqlite",
      "db_dump": "CREATE TABLE Streaming_Services (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    url TEXT\n);\nCREATE TABLE Streaming_Services_Subtitles (\n    streaming_service_id INTEGER,\n    subtitle_id INTEGER,\n    FOREIGN KEY(streaming_service_id) REFERENCES Streaming_Services(id),\n    FOREIGN KEY(subtitle_id) REFERENCES Subtitles(id)\n);\nCREATE TABLE Subtitles (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    language TEXT,\n    default_subtitle BOOLEAN DEFAULT FALSE\n);\n\nINSERT INTO \"Streaming_Services\" (id,name,url) VALUES (1,'Netflix','https://www.netflix.com'),(2,'Amazon Prime Video','https://www.amazon.com/prime-video'),(3,'Hulu','https://www.hulu.com'),(4,'Disney+','https://www.disneyplus.com'),(5,'HBO Max','https://www.hbomax.com');\nINSERT INTO \"Streaming_Services_Subtitles\" (streaming_service_id,subtitle_id) VALUES (1,1),(2,2),(3,3),(4,4),(5,5),(2,1),(3,1),(4,1),(5,1);\nINSERT INTO \"Subtitles\" (id,language,default_subtitle) VALUES (1,'English',1),(2,'Spanish',0),(3,'French',0),(4,'German',0),(5,'Italian',0);\n",
      "question": "What languages are available for subtitles on each streaming service?",
      "gold_queries": [
        "SELECT Subtitles.language  from Streaming_Services_Subtitles join Subtitles on Streaming_Services_Subtitles.subtitle_id = Subtitles.id join Streaming_Services on Streaming_Services_Subtitles.streaming_service_id = Streaming_Services.id   GROUP BY Streaming_Services_Subtitles.subtitle_id HAVING COUNT(DISTINCT Streaming_Services_Subtitles.streaming_service_id) = (SELECT COUNT(*) FROM  Streaming_Services)",
        "select streaming_services.name , subtitles.language from Streaming_Services_Subtitles join Subtitles on Streaming_Services_Subtitles.subtitle_id = Subtitles.id join Streaming_Services on Streaming_Services_Subtitles.streaming_service_id = Streaming_Services.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Identify and display the subtitle languages offered by each streaming service in the database.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ss.name, s.language\nFROM Streaming_Services_Subtitles sss\nJOIN Streaming_Services ss ON sss.streaming_service_id = ss.id\nJOIN Subtitles s ON sss.subtitle_id = s.id"
          ]
        },
        {
          "interpretation": "Retrieve a table listing each streaming service and a corresponding set of languages their subtitles support.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ss.name, GROUP_CONCAT(s.language) AS supported_languages\nFROM Streaming_Services ss\nJOIN Streaming_Services_Subtitles sss ON ss.id = sss.streaming_service_id\nJOIN Subtitles s ON sss.subtitle_id = s.id\nGROUP BY ss.name"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.5,
        "f1_score": 0.5,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_services_subtitles/scope_streaming_services_subtitles.sqlite",
      "db_dump": "CREATE TABLE Streaming_Services (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    url TEXT\n);\nCREATE TABLE Streaming_Services_Subtitles (\n    streaming_service_id INTEGER,\n    subtitle_id INTEGER,\n    FOREIGN KEY(streaming_service_id) REFERENCES Streaming_Services(id),\n    FOREIGN KEY(subtitle_id) REFERENCES Subtitles(id)\n);\nCREATE TABLE Subtitles (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    language TEXT,\n    default_subtitle BOOLEAN DEFAULT FALSE\n);\n\nINSERT INTO \"Streaming_Services\" (id,name,url) VALUES (1,'Netflix','https://www.netflix.com'),(2,'Amazon Prime Video','https://www.amazon.com/prime-video'),(3,'Hulu','https://www.hulu.com'),(4,'Disney+','https://www.disneyplus.com'),(5,'HBO Max','https://www.hbomax.com');\nINSERT INTO \"Streaming_Services_Subtitles\" (streaming_service_id,subtitle_id) VALUES (1,1),(2,2),(3,3),(4,4),(5,5),(2,1),(3,1),(4,1),(5,1);\nINSERT INTO \"Subtitles\" (id,language,default_subtitle) VALUES (1,'English',1),(2,'Spanish',0),(3,'French',0),(4,'German',0),(5,'Italian',0);\n",
      "question": "List the status of subtitles that are common to all streaming services.",
      "gold_queries": [
        "SELECT Subtitles.default_subtitle  from Streaming_Services_Subtitles join Subtitles on Streaming_Services_Subtitles.subtitle_id = Subtitles.id join Streaming_Services on Streaming_Services_Subtitles.streaming_service_id = Streaming_Services.id   GROUP BY Streaming_Services_Subtitles.subtitle_id HAVING COUNT(DISTINCT Streaming_Services_Subtitles.streaming_service_id) = (SELECT COUNT(*) FROM  Streaming_Services)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Subtitles with the status \"available\" only on streaming services featuring them",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.language, SS.name\nFROM Subtitles S\nJOIN Streaming_Services_Subtitles SSS ON S.id = SSS.subtitle_id\nJOIN Streaming_Services SS ON SSS.streaming_service_id = SS.id\nWHERE NOT EXISTS (\n    SELECT 1\n    FROM Streaming_Services_Subtitles SSS2\n    WHERE SSS2.subtitle_id = S.id\n    AND SSS2.streaming_service_id != SSS.streaming_service_id\n)"
          ]
        },
        {
          "interpretation": "Subtitles with a \"default_subtitle\" flag of TRUE that are utilized by all streaming services",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT language \nFROM Subtitles \nWHERE id IN (\n    SELECT subtitle_id \n    FROM Streaming_Services_Subtitles \n    GROUP BY subtitle_id \n    HAVING COUNT(DISTINCT streaming_service_id) = (SELECT COUNT(*) FROM Streaming_Services)\n) \nAND default_subtitle = TRUE"
          ]
        },
        {
          "interpretation": "Subtitles shared by all streaming services, based on their ids",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT subtitle_id \nFROM Streaming_Services_Subtitles \nGROUP BY subtitle_id \nHAVING COUNT(DISTINCT streaming_service_id) = (SELECT COUNT(*) FROM Streaming_Services)"
          ]
        },
        {
          "interpretation": "The number of streaming services that offer a particular subtitle",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(DISTINCT streaming_service_id) \nFROM Streaming_Services_Subtitles \nWHERE subtitle_id = (SELECT id FROM Subtitles WHERE language = 'English')"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_services_subtitles/scope_streaming_services_subtitles.sqlite",
      "db_dump": "CREATE TABLE Streaming_Services (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    url TEXT\n);\nCREATE TABLE Streaming_Services_Subtitles (\n    streaming_service_id INTEGER,\n    subtitle_id INTEGER,\n    FOREIGN KEY(streaming_service_id) REFERENCES Streaming_Services(id),\n    FOREIGN KEY(subtitle_id) REFERENCES Subtitles(id)\n);\nCREATE TABLE Subtitles (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    language TEXT,\n    default_subtitle BOOLEAN DEFAULT FALSE\n);\n\nINSERT INTO \"Streaming_Services\" (id,name,url) VALUES (1,'Netflix','https://www.netflix.com'),(2,'Amazon Prime Video','https://www.amazon.com/prime-video'),(3,'Hulu','https://www.hulu.com'),(4,'Disney+','https://www.disneyplus.com'),(5,'HBO Max','https://www.hbomax.com');\nINSERT INTO \"Streaming_Services_Subtitles\" (streaming_service_id,subtitle_id) VALUES (1,1),(2,2),(3,3),(4,4),(5,5),(2,1),(3,1),(4,1),(5,1);\nINSERT INTO \"Subtitles\" (id,language,default_subtitle) VALUES (1,'English',1),(2,'Spanish',0),(3,'French',0),(4,'German',0),(5,'Italian',0);\n",
      "question": "For each streaming service. provide the corresponding subtitle language options.",
      "gold_queries": [
        "select streaming_services.name , subtitles.language from Streaming_Services_Subtitles join Subtitles on Streaming_Services_Subtitles.subtitle_id = Subtitles.id join Streaming_Services on Streaming_Services_Subtitles.streaming_service_id = Streaming_Services.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Retrieve for each streaming service the languages of all subtitles associated with it.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT ss.name, s.language \nFROM Streaming_Services ss \nJOIN Streaming_Services_Subtitles sss ON ss.id = sss.streaming_service_id \nJOIN Subtitles s ON sss.subtitle_id = s.id"
          ]
        },
        {
          "interpretation": "Display a table where each row represents a streaming service and the corresponding column represents available subtitle languages.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ss.name, GROUP_CONCAT(s.language) AS available_subtitles\nFROM Streaming_Services ss\nJOIN Streaming_Services_Subtitles sss ON ss.id = sss.streaming_service_id\nJOIN Subtitles s ON sss.subtitle_id = s.id\nGROUP BY ss.name"
          ]
        },
        {
          "interpretation": "List each streaming service's name and a comma-separated list of its available subtitle languages.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ss.name, GROUP_CONCAT(sub.language, ', ') AS subtitles\nFROM Streaming_Services ss\nJOIN Streaming_Services_Subtitles sss ON ss.id = sss.streaming_service_id\nJOIN Subtitles sub ON sss.subtitle_id = sub.id\nGROUP BY ss.name"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_services_subtitles/scope_streaming_services_subtitles.sqlite",
      "db_dump": "CREATE TABLE Streaming_Services (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    url TEXT\n);\nCREATE TABLE Streaming_Services_Subtitles (\n    streaming_service_id INTEGER,\n    subtitle_id INTEGER,\n    FOREIGN KEY(streaming_service_id) REFERENCES Streaming_Services(id),\n    FOREIGN KEY(subtitle_id) REFERENCES Subtitles(id)\n);\nCREATE TABLE Subtitles (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    language TEXT,\n    default_subtitle BOOLEAN DEFAULT FALSE\n);\n\nINSERT INTO \"Streaming_Services\" (id,name,url) VALUES (1,'Netflix','https://www.netflix.com'),(2,'Amazon Prime Video','https://www.amazon.com/prime-video'),(3,'Hulu','https://www.hulu.com'),(4,'Disney+','https://www.disneyplus.com'),(5,'HBO Max','https://www.hbomax.com');\nINSERT INTO \"Streaming_Services_Subtitles\" (streaming_service_id,subtitle_id) VALUES (1,1),(2,2),(3,3),(4,4),(5,5),(2,1),(3,1),(4,1),(5,1);\nINSERT INTO \"Subtitles\" (id,language,default_subtitle) VALUES (1,'English',1),(2,'Spanish',0),(3,'French',0),(4,'German',0),(5,'Italian',0);\n",
      "question": "what language and default subtitle is common for all streaming services?",
      "gold_queries": [
        "SELECT Subtitles.language, Subtitles.default_subtitle  from Streaming_Services_Subtitles join Subtitles on Streaming_Services_Subtitles.subtitle_id = Subtitles.id join Streaming_Services on Streaming_Services_Subtitles.streaming_service_id = Streaming_Services.id   GROUP BY Streaming_Services_Subtitles.subtitle_id HAVING COUNT(DISTINCT Streaming_Services_Subtitles.streaming_service_id) = (SELECT COUNT(*) FROM  Streaming_Services)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Are there any common language and default subtitle combinations across all streaming services?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT S.language, S.default_subtitle\nFROM Subtitles S\nWHERE S.id IN (\n    SELECT SS.subtitle_id\n    FROM Streaming_Services_Subtitles SS\n    GROUP BY SS.subtitle_id\n    HAVING COUNT(DISTINCT SS.streaming_service_id) = (SELECT COUNT(*) FROM Streaming_Services)\n)"
          ]
        },
        {
          "interpretation": "For every streaming service, what language and default subtitle are the most frequent?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ss.name, s.language, s.default_subtitle \nFROM Streaming_Services ss \nJOIN (\n    SELECT streaming_service_id, subtitle_id \n    FROM Streaming_Services_Subtitles \n    GROUP BY streaming_service_id, subtitle_id \n    ORDER BY COUNT(*) DESC \n) AS mfs ON ss.id = mfs.streaming_service_id \nJOIN Subtitles s ON mfs.subtitle_id = s.id"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_services_subtitles/scope_streaming_services_subtitles.sqlite",
      "db_dump": "CREATE TABLE Streaming_Services (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    url TEXT\n);\nCREATE TABLE Streaming_Services_Subtitles (\n    streaming_service_id INTEGER,\n    subtitle_id INTEGER,\n    FOREIGN KEY(streaming_service_id) REFERENCES Streaming_Services(id),\n    FOREIGN KEY(subtitle_id) REFERENCES Subtitles(id)\n);\nCREATE TABLE Subtitles (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    language TEXT,\n    default_subtitle BOOLEAN DEFAULT FALSE\n);\n\nINSERT INTO \"Streaming_Services\" (id,name,url) VALUES (1,'Netflix','https://www.netflix.com'),(2,'Amazon Prime Video','https://www.amazon.com/prime-video'),(3,'Hulu','https://www.hulu.com'),(4,'Disney+','https://www.disneyplus.com'),(5,'HBO Max','https://www.hbomax.com');\nINSERT INTO \"Streaming_Services_Subtitles\" (streaming_service_id,subtitle_id) VALUES (1,1),(2,2),(3,3),(4,4),(5,5),(2,1),(3,1),(4,1),(5,1);\nINSERT INTO \"Subtitles\" (id,language,default_subtitle) VALUES (1,'English',1),(2,'Spanish',0),(3,'French',0),(4,'German',0),(5,'Italian',0);\n",
      "question": "Which subtitle language is common across all streaming services?",
      "gold_queries": [
        "SELECT Subtitles.language  from Streaming_Services_Subtitles join Subtitles on Streaming_Services_Subtitles.subtitle_id = Subtitles.id join Streaming_Services on Streaming_Services_Subtitles.streaming_service_id = Streaming_Services.id   GROUP BY Streaming_Services_Subtitles.subtitle_id HAVING COUNT(DISTINCT Streaming_Services_Subtitles.streaming_service_id) = (SELECT COUNT(*) FROM  Streaming_Services)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Which subtitle language is listed as \"default\" on the majority of streaming services?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT language FROM Subtitles WHERE id = (SELECT subtitle_id FROM Streaming_Services_Subtitles GROUP BY subtitle_id ORDER BY COUNT(*) DESC LIMIT 1) AND default_subtitle = 1"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_services_subtitles/scope_streaming_services_subtitles.sqlite",
      "db_dump": "CREATE TABLE Streaming_Services (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    url TEXT\n);\nCREATE TABLE Streaming_Services_Subtitles (\n    streaming_service_id INTEGER,\n    subtitle_id INTEGER,\n    FOREIGN KEY(streaming_service_id) REFERENCES Streaming_Services(id),\n    FOREIGN KEY(subtitle_id) REFERENCES Subtitles(id)\n);\nCREATE TABLE Subtitles (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    language TEXT,\n    default_subtitle BOOLEAN DEFAULT FALSE\n);\n\nINSERT INTO \"Streaming_Services\" (id,name,url) VALUES (1,'Netflix','https://www.netflix.com'),(2,'Amazon Prime Video','https://www.amazon.com/prime-video'),(3,'Hulu','https://www.hulu.com'),(4,'Disney+','https://www.disneyplus.com'),(5,'HBO Max','https://www.hbomax.com');\nINSERT INTO \"Streaming_Services_Subtitles\" (streaming_service_id,subtitle_id) VALUES (1,1),(2,2),(3,3),(4,4),(5,5),(2,1),(3,1),(4,1),(5,1);\nINSERT INTO \"Subtitles\" (id,language,default_subtitle) VALUES (1,'English',1),(2,'Spanish',0),(3,'French',0),(4,'German',0),(5,'Italian',0);\n",
      "question": "Which languages and default subtitles are associated with every streaming service?",
      "gold_queries": [
        "SELECT Subtitles.language, Subtitles.default_subtitle  from Streaming_Services_Subtitles join Subtitles on Streaming_Services_Subtitles.subtitle_id = Subtitles.id join Streaming_Services on Streaming_Services_Subtitles.streaming_service_id = Streaming_Services.id   GROUP BY Streaming_Services_Subtitles.subtitle_id HAVING COUNT(DISTINCT Streaming_Services_Subtitles.streaming_service_id) = (SELECT COUNT(*) FROM  Streaming_Services)",
        "select streaming_services.name , subtitles.language , subtitles.default_subtitle from Streaming_Services_Subtitles join Subtitles on Streaming_Services_Subtitles.subtitle_id = Subtitles.id join Streaming_Services on Streaming_Services_Subtitles.streaming_service_id = Streaming_Services.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List all streaming services and the languages of their default subtitles.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ss.name, s.language\nFROM Streaming_Services ss\nJOIN Streaming_Services_Subtitles sss ON ss.id = sss.streaming_service_id\nJOIN Subtitles s ON sss.subtitle_id = s.id\nWHERE s.default_subtitle = TRUE"
          ]
        },
        {
          "interpretation": "Identify all languages available as subtitles for every streaming service, regardless of their default status.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ss.name, s.language\nFROM Streaming_Services ss\nJOIN Streaming_Services_Subtitles sss ON ss.id = sss.streaming_service_id\nJOIN Subtitles s ON sss.subtitle_id = s.id"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Journalism/scope_editorial_teams_roles/scope_editorial_teams_roles.sqlite",
      "db_dump": "CREATE TABLE Editorial_Teams(\n    TeamID INTEGER PRIMARY KEY AUTOINCREMENT,\n    TeamName TEXT,\n    TeamDescription TEXT\n);\nCREATE TABLE Editorial_Teams_Roles(\n    TeamID INTEGER,\n    RoleID INTEGER,\n    FOREIGN KEY(TeamID) REFERENCES Editorial_Teams(TeamID),\n    FOREIGN KEY(RoleID) REFERENCES Roles(RoleID),\n    PRIMARY KEY(TeamID, RoleID)\n);\nCREATE TABLE Roles(\n    RoleID INTEGER PRIMARY KEY AUTOINCREMENT,\n    RoleName TEXT\n);\n\nINSERT INTO \"Editorial_Teams\" (TeamID,TeamName,TeamDescription) VALUES (1,'Team1','A team focused on sports journalism.'),(2,'Team2','Specializes in political news coverage.'),(3,'Team3','Focuses on technology and innovation articles.'),(4,'Team4','Covering arts, culture, and entertainment stories.'),(5,'Team5','Dedicated to investigative reporting.');\nINSERT INTO \"Editorial_Teams_Roles\" (TeamID,RoleID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,5);\nINSERT INTO \"Roles\" (RoleID,RoleName) VALUES (1,'Copy_Editor'),(2,'Reporter'),(3,'Photographer'),(4,'Designer'),(5,'Web Developer');\n",
      "question": "Show me the role that is in common for all editorial teams.",
      "gold_queries": [
        "SELECT Roles.RoleName  from Editorial_Teams_Roles join Roles on Editorial_Teams_Roles.RoleID = Roles.RoleID join Editorial_Teams on Editorial_Teams_Roles.TeamID = Editorial_Teams.TeamID   GROUP BY Editorial_Teams_Roles.RoleID HAVING COUNT(DISTINCT Editorial_Teams_Roles.TeamID) = (SELECT COUNT(*) FROM  Editorial_Teams)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Determine the Role shared by all Editorial Teams.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT RoleName \nFROM Roles \nWHERE RoleID = (\n    SELECT RoleID \n    FROM Editorial_Teams_Roles \n    GROUP BY RoleID \n    HAVING COUNT(DISTINCT TeamID) = (SELECT COUNT(*) FROM Editorial_Teams)\n)"
          ]
        },
        {
          "interpretation": "Find the Role present in every distinct TeamID within Editorial_Teams.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT RoleID FROM Editorial_Teams_Roles GROUP BY RoleID HAVING COUNT(DISTINCT TeamID) = (SELECT COUNT(*) FROM Editorial_Teams)"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Journalism/scope_editorial_teams_roles/scope_editorial_teams_roles.sqlite",
      "db_dump": "CREATE TABLE Editorial_Teams(\n    TeamID INTEGER PRIMARY KEY AUTOINCREMENT,\n    TeamName TEXT,\n    TeamDescription TEXT\n);\nCREATE TABLE Editorial_Teams_Roles(\n    TeamID INTEGER,\n    RoleID INTEGER,\n    FOREIGN KEY(TeamID) REFERENCES Editorial_Teams(TeamID),\n    FOREIGN KEY(RoleID) REFERENCES Roles(RoleID),\n    PRIMARY KEY(TeamID, RoleID)\n);\nCREATE TABLE Roles(\n    RoleID INTEGER PRIMARY KEY AUTOINCREMENT,\n    RoleName TEXT\n);\n\nINSERT INTO \"Editorial_Teams\" (TeamID,TeamName,TeamDescription) VALUES (1,'Team1','A team focused on sports journalism.'),(2,'Team2','Specializes in political news coverage.'),(3,'Team3','Focuses on technology and innovation articles.'),(4,'Team4','Covering arts, culture, and entertainment stories.'),(5,'Team5','Dedicated to investigative reporting.');\nINSERT INTO \"Editorial_Teams_Roles\" (TeamID,RoleID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,5);\nINSERT INTO \"Roles\" (RoleID,RoleName) VALUES (1,'Copy_Editor'),(2,'Reporter'),(3,'Photographer'),(4,'Designer'),(5,'Web Developer');\n",
      "question": "Give me the role associated with each editorial team.",
      "gold_queries": [
        "SELECT Roles.RoleName  from Editorial_Teams_Roles join Roles on Editorial_Teams_Roles.RoleID = Roles.RoleID join Editorial_Teams on Editorial_Teams_Roles.TeamID = Editorial_Teams.TeamID   GROUP BY Editorial_Teams_Roles.RoleID HAVING COUNT(DISTINCT Editorial_Teams_Roles.TeamID) = (SELECT COUNT(*) FROM  Editorial_Teams)",
        "select editorial_teams.teamname , roles.rolename from Editorial_Teams_Roles join Roles on Editorial_Teams_Roles.RoleID = Roles.RoleID join Editorial_Teams on Editorial_Teams_Roles.TeamID = Editorial_Teams.TeamID"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Determine the unique roles present within each editorial team by joining the Editorial_Teams and Roles tables.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ET.TeamName, R.RoleName\nFROM Editorial_Teams AS ET\nJOIN Editorial_Teams_Roles AS ETR ON ET.TeamID = ETR.TeamID\nJOIN Roles AS R ON ETR.RoleID = R.RoleID\nGROUP BY ET.TeamID, R.RoleID"
          ]
        },
        {
          "interpretation": "Retrieve the RoleName from the Roles table for each TeamID in the Editorial_Teams table, joining the tables through the Editorial_Teams_Roles table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T3.RoleName \nFROM Editorial_Teams AS T1 \nJOIN Editorial_Teams_Roles AS T2 ON T1.TeamID = T2.TeamID \nJOIN Roles AS T3 ON T2.RoleID = T3.RoleID"
          ]
        },
        {
          "interpretation": "Identify the primary role assigned to each editorial team based on the Editorial_Teams_Roles table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT TeamID, MIN(RoleID) AS RoleID\nFROM Editorial_Teams_Roles\nGROUP BY TeamID"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.3333333333333333,
        "f1_score": 0.4,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Job Postings/scope_urban_planners_elements/scope_urban_planners_elements.sqlite",
      "db_dump": "CREATE TABLE Elements (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    element_name TEXT\n);\nCREATE TABLE Urban_Planners (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    experience INTEGER\n);\nCREATE TABLE Urban_Planners_Elements (\n    urban_planner_id INTEGER,\n    element_id INTEGER,\n    FOREIGN KEY(urban_planner_id) REFERENCES Urban_Planners(id),\n    FOREIGN KEY(element_id) REFERENCES Elements(id),\n    PRIMARY KEY(urban_planner_id, element_id)\n);\n\nINSERT INTO \"Elements\" (id,element_name) VALUES (1,'Green_Space'),(2,'Transportation_Infrastructure'),(3,'Landscape_Architecture'),(4,'Water_Management'),(5,'Public_Spaces');\nINSERT INTO \"Urban_Planners\" (id,name,experience) VALUES (1,'John Doe',3),(2,'Jane Smith',2),(3,'Michael Johnson',5),(4,'Emily Williams',10),(5,'David Brown',8);\nINSERT INTO \"Urban_Planners_Elements\" (urban_planner_id,element_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\n",
      "question": "Tell me the elements each planner uses.",
      "gold_queries": [
        "SELECT Elements.element_name  from Urban_Planners_Elements join Elements on Urban_Planners_Elements.element_id = Elements.id join Urban_Planners on Urban_Planners_Elements.urban_planner_id = Urban_Planners.id   GROUP BY Urban_Planners_Elements.element_id HAVING COUNT(DISTINCT Urban_Planners_Elements.urban_planner_id) = (SELECT COUNT(*) FROM  Urban_Planners)",
        "select urban_planners.name , elements.element_name from Urban_Planners_Elements join Elements on Urban_Planners_Elements.element_id = Elements.id join Urban_Planners on Urban_Planners_Elements.urban_planner_id = Urban_Planners.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Display a count of elements used by each urban planner.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Urban_Planners.name, COUNT(Urban_Planners_Elements.element_id) AS element_count\nFROM Urban_Planners\nJOIN Urban_Planners_Elements ON Urban_Planners.id = Urban_Planners_Elements.urban_planner_id\nGROUP BY Urban_Planners.id"
          ]
        },
        {
          "interpretation": "Identify the unique elements used by all urban planners.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT element_name\nFROM Elements\nWHERE id IN (\n    SELECT element_id\n    FROM Urban_Planners_Elements\n    GROUP BY element_id\n    HAVING COUNT(DISTINCT urban_planner_id) = (SELECT COUNT(*) FROM Urban_Planners)\n)"
          ]
        },
        {
          "interpretation": "Retrieve a list of elements where each planner has assigned it.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT element_name FROM Elements"
          ]
        },
        {
          "interpretation": "List each urban planner and the elements they are assigned to.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT UP.name, E.element_name\nFROM Urban_Planners_Elements UPE\nJOIN Urban_Planners UP ON UPE.urban_planner_id = UP.id\nJOIN Elements E ON UPE.element_id = E.id"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/scope/Job Postings/scope_urban_planners_elements/scope_urban_planners_elements.sqlite",
      "db_dump": "CREATE TABLE Elements (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    element_name TEXT\n);\nCREATE TABLE Urban_Planners (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    experience INTEGER\n);\nCREATE TABLE Urban_Planners_Elements (\n    urban_planner_id INTEGER,\n    element_id INTEGER,\n    FOREIGN KEY(urban_planner_id) REFERENCES Urban_Planners(id),\n    FOREIGN KEY(element_id) REFERENCES Elements(id),\n    PRIMARY KEY(urban_planner_id, element_id)\n);\n\nINSERT INTO \"Elements\" (id,element_name) VALUES (1,'Green_Space'),(2,'Transportation_Infrastructure'),(3,'Landscape_Architecture'),(4,'Water_Management'),(5,'Public_Spaces');\nINSERT INTO \"Urban_Planners\" (id,name,experience) VALUES (1,'John Doe',3),(2,'Jane Smith',2),(3,'Michael Johnson',5),(4,'Emily Williams',10),(5,'David Brown',8);\nINSERT INTO \"Urban_Planners_Elements\" (urban_planner_id,element_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\n",
      "question": "What elements do all planners use equally?",
      "gold_queries": [
        "SELECT Elements.element_name  from Urban_Planners_Elements join Elements on Urban_Planners_Elements.element_id = Elements.id join Urban_Planners on Urban_Planners_Elements.urban_planner_id = Urban_Planners.id   GROUP BY Urban_Planners_Elements.element_id HAVING COUNT(DISTINCT Urban_Planners_Elements.urban_planner_id) = (SELECT COUNT(*) FROM  Urban_Planners)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Are there elements that every planner has worked on equally, measured by the number of projects assigned?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT E.element_name\nFROM Elements E\nWHERE NOT EXISTS (\n    SELECT U.id\n    FROM Urban_Planners U\n    WHERE NOT EXISTS (\n        SELECT UPE.element_id\n        FROM Urban_Planners_Elements UPE\n        WHERE UPE.urban_planner_id = U.id AND UPE.element_id = E.id\n    )\n)"
          ]
        },
        {
          "interpretation": "For each element, count the number of planners associated with it, and identify the element with the maximum count.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT element_name, COUNT(urban_planner_id) AS planner_count FROM Urban_Planners_Elements JOIN Elements ON Urban_Planners_Elements.element_id = Elements.id GROUP BY element_name HAVING planner_count = (SELECT MAX(planner_count) FROM (SELECT COUNT(urban_planner_id) AS planner_count FROM Urban_Planners_Elements GROUP BY element_id))"
          ]
        },
        {
          "interpretation": "What is the distribution of elements among all planners, and are there any elements appearing equally in all planners' assignments?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.element_name, COUNT(DISTINCT UPE.urban_planner_id) AS planners_count, \n       CASE WHEN COUNT(DISTINCT UPE.urban_planner_id) = (SELECT COUNT(*) FROM Urban_Planners) THEN 'Yes' ELSE 'No' END AS all_planners\nFROM Elements E\nJOIN Urban_Planners_Elements UPE ON E.id = UPE.element_id\nGROUP BY E.element_name"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Job Postings/scope_urban_planners_elements/scope_urban_planners_elements.sqlite",
      "db_dump": "CREATE TABLE Elements (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    element_name TEXT\n);\nCREATE TABLE Urban_Planners (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    experience INTEGER\n);\nCREATE TABLE Urban_Planners_Elements (\n    urban_planner_id INTEGER,\n    element_id INTEGER,\n    FOREIGN KEY(urban_planner_id) REFERENCES Urban_Planners(id),\n    FOREIGN KEY(element_id) REFERENCES Elements(id),\n    PRIMARY KEY(urban_planner_id, element_id)\n);\n\nINSERT INTO \"Elements\" (id,element_name) VALUES (1,'Green_Space'),(2,'Transportation_Infrastructure'),(3,'Landscape_Architecture'),(4,'Water_Management'),(5,'Public_Spaces');\nINSERT INTO \"Urban_Planners\" (id,name,experience) VALUES (1,'John Doe',3),(2,'Jane Smith',2),(3,'Michael Johnson',5),(4,'Emily Williams',10),(5,'David Brown',8);\nINSERT INTO \"Urban_Planners_Elements\" (urban_planner_id,element_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\n",
      "question": "For every planner, list the elements used.",
      "gold_queries": [
        "select urban_planners.name , elements.element_name from Urban_Planners_Elements join Elements on Urban_Planners_Elements.element_id = Elements.id join Urban_Planners on Urban_Planners_Elements.urban_planner_id = Urban_Planners.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Generate a list where each entry is a planner name followed by a comma-separated list of elements they have worked with.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT UP.name, GROUP_CONCAT(E.element_name, ',') AS elements\nFROM Urban_Planners UP\nJOIN Urban_Planners_Elements UPE ON UP.id = UPE.urban_planner_id\nJOIN Elements E ON UPE.element_id = E.id\nGROUP BY UP.id"
          ]
        },
        {
          "interpretation": "For each urban planner, enumerate all elements present in the Urban_Planners_Elements table where the urban_planner_id matches.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT UP.name, E.element_name\nFROM Urban_Planners UP\nJOIN Urban_Planners_Elements UPE ON UP.id = UPE.urban_planner_id\nJOIN Elements E ON UPE.element_id = E.id"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Journalism/scope_editorial_teams_roles/scope_editorial_teams_roles.sqlite",
      "db_dump": "CREATE TABLE Editorial_Teams(\n    TeamID INTEGER PRIMARY KEY AUTOINCREMENT,\n    TeamName TEXT,\n    TeamDescription TEXT\n);\nCREATE TABLE Editorial_Teams_Roles(\n    TeamID INTEGER,\n    RoleID INTEGER,\n    FOREIGN KEY(TeamID) REFERENCES Editorial_Teams(TeamID),\n    FOREIGN KEY(RoleID) REFERENCES Roles(RoleID),\n    PRIMARY KEY(TeamID, RoleID)\n);\nCREATE TABLE Roles(\n    RoleID INTEGER PRIMARY KEY AUTOINCREMENT,\n    RoleName TEXT\n);\n\nINSERT INTO \"Editorial_Teams\" (TeamID,TeamName,TeamDescription) VALUES (1,'Team1','A team focused on sports journalism.'),(2,'Team2','Specializes in political news coverage.'),(3,'Team3','Focuses on technology and innovation articles.'),(4,'Team4','Covering arts, culture, and entertainment stories.'),(5,'Team5','Dedicated to investigative reporting.');\nINSERT INTO \"Editorial_Teams_Roles\" (TeamID,RoleID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,5);\nINSERT INTO \"Roles\" (RoleID,RoleName) VALUES (1,'Copy_Editor'),(2,'Reporter'),(3,'Photographer'),(4,'Designer'),(5,'Web Developer');\n",
      "question": "For each editorial team, what is the corresponding role?",
      "gold_queries": [
        "select editorial_teams.teamname , roles.rolename from Editorial_Teams_Roles join Roles on Editorial_Teams_Roles.RoleID = Roles.RoleID join Editorial_Teams on Editorial_Teams_Roles.TeamID = Editorial_Teams.TeamID"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For each team in Editorial_Teams, which RoleID appears in the Editorial_Teams_Roles table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT TeamID, RoleID FROM Editorial_Teams_Roles"
          ]
        },
        {
          "interpretation": "Which RoleName is assigned to each TeamName in the Editorial_Teams table, based on the Editorial_Teams_Roles table.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT ET.TeamName, R.RoleName\nFROM Editorial_Teams_Roles ETR\nJOIN Editorial_Teams ET ON ETR.TeamID = ET.TeamID\nJOIN Roles R ON ETR.RoleID = R.RoleID"
          ]
        },
        {
          "interpretation": "For each team in the Editorial_Teams table, what is the RoleID associated with the first RoleID in the Editorial_Teams_Roles table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ET.TeamID, ET.TeamName, ETR.RoleID \nFROM Editorial_Teams ET \nINNER JOIN (\n    SELECT TeamID, MIN(RoleID) AS RoleID \n    FROM Editorial_Teams_Roles \n    GROUP BY TeamID\n) ETR ON ET.TeamID = ETR.TeamID"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Journalism/scope_real_estate_reporters_markets/scope_real_estate_reporters_markets.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    article_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    published_date DATE\n);\nCREATE TABLE Markets(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    market_name TEXT,\n    description TEXT\n);\nCREATE TABLE Real_Estate_Reporters(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT\n);\nCREATE TABLE Real_Estate_Reporters_Markets(\n    reporter_id INTEGER,\n    market_id INTEGER,\n    FOREIGN KEY(reporter_id) REFERENCES Real_Estate_Reporters(id),\n    FOREIGN KEY(market_id) REFERENCES Markets(id)\n);\nCREATE TABLE Reporter_Articles(\n    reporter_id INTEGER,\n    article_id INTEGER,\n    FOREIGN KEY(reporter_id) REFERENCES Real_Estate_Reporters(id),\n    FOREIGN KEY(article_id) REFERENCES Articles(article_id)\n);\n\nINSERT INTO \"Articles\" (article_id,title,content,published_date) VALUES (1,'New Luxury Home Development','Details about a new luxury home development...','2021-09-01'),(2,'First Time Buyers Guide','Tips for first time home buyers...','2021-08-15'),(3,'Office Space Trends','The latest trends in office space...','2021-07-30'),(4,'Farmland vs Investment Property','Comparing farmland and investment property...','2021-06-20'),(5,'Retail Space Revival','How retail spaces are making a comeback...','2021-05-15');\nINSERT INTO \"Markets\" (id,market_name,description) VALUES (1,'Luxury Homes','High-end residential properties.'),(2,'Affordable Housing','Moderately priced homes for first-time buyers.'),(3,'Commercial Properties','Offices, retail spaces, industrial buildings.'),(4,'Rural Land','Agriculture land and rural estates.'),(5,'Investment Properties','Properties purchased for investment purposes.');\nINSERT INTO \"Real_Estate_Reporters\" (id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com'),(3,'Michael Johnson','michael@example.com'),(4,'Emily Davis','emily@example.com'),(5,'David Brown','david@example.com');\nINSERT INTO \"Real_Estate_Reporters_Markets\" (reporter_id,market_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "what markets and descriptions are covered by each real estate reporter?",
      "gold_queries": [
        "SELECT Markets.market_name, Markets.description  from Real_Estate_Reporters_Markets join Markets on Real_Estate_Reporters_Markets.market_id = Markets.id join Real_Estate_Reporters on Real_Estate_Reporters_Markets.reporter_id = Real_Estate_Reporters.id   GROUP BY Real_Estate_Reporters_Markets.market_id HAVING COUNT(DISTINCT Real_Estate_Reporters_Markets.reporter_id) = (SELECT COUNT(*) FROM  Real_Estate_Reporters)",
        "select real_estate_reporters.name , markets.market_name , markets.description from Real_Estate_Reporters_Markets join Markets on Real_Estate_Reporters_Markets.market_id = Markets.id join Real_Estate_Reporters on Real_Estate_Reporters_Markets.reporter_id = Real_Estate_Reporters.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Display a table listing reporters, their assigned markets, and the descriptions of those markets.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT R.name, M.market_name, M.description\nFROM Real_Estate_Reporters R\nJOIN Real_Estate_Reporters_Markets REM ON R.id = REM.reporter_id\nJOIN Markets M ON REM.market_id = M.id"
          ]
        },
        {
          "interpretation": "Identify the specific markets covered by each reporter.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT r.name, m.market_name\nFROM Real_Estate_Reporters r\nJOIN Real_Estate_Reporters_Markets rem ON r.id = rem.reporter_id\nJOIN Markets m ON rem.market_id = m.id"
          ]
        },
        {
          "interpretation": "Retrieve the market descriptions associated with each reporter's assigned markets.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT M.description\nFROM Real_Estate_Reporters_Markets REM\nJOIN Markets M ON REM.market_id = M.id"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.3333333333333333,
        "f1_score": 0.4,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Journalism/scope_real_estate_reporters_markets/scope_real_estate_reporters_markets.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    article_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    published_date DATE\n);\nCREATE TABLE Markets(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    market_name TEXT,\n    description TEXT\n);\nCREATE TABLE Real_Estate_Reporters(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT\n);\nCREATE TABLE Real_Estate_Reporters_Markets(\n    reporter_id INTEGER,\n    market_id INTEGER,\n    FOREIGN KEY(reporter_id) REFERENCES Real_Estate_Reporters(id),\n    FOREIGN KEY(market_id) REFERENCES Markets(id)\n);\nCREATE TABLE Reporter_Articles(\n    reporter_id INTEGER,\n    article_id INTEGER,\n    FOREIGN KEY(reporter_id) REFERENCES Real_Estate_Reporters(id),\n    FOREIGN KEY(article_id) REFERENCES Articles(article_id)\n);\n\nINSERT INTO \"Articles\" (article_id,title,content,published_date) VALUES (1,'New Luxury Home Development','Details about a new luxury home development...','2021-09-01'),(2,'First Time Buyers Guide','Tips for first time home buyers...','2021-08-15'),(3,'Office Space Trends','The latest trends in office space...','2021-07-30'),(4,'Farmland vs Investment Property','Comparing farmland and investment property...','2021-06-20'),(5,'Retail Space Revival','How retail spaces are making a comeback...','2021-05-15');\nINSERT INTO \"Markets\" (id,market_name,description) VALUES (1,'Luxury Homes','High-end residential properties.'),(2,'Affordable Housing','Moderately priced homes for first-time buyers.'),(3,'Commercial Properties','Offices, retail spaces, industrial buildings.'),(4,'Rural Land','Agriculture land and rural estates.'),(5,'Investment Properties','Properties purchased for investment purposes.');\nINSERT INTO \"Real_Estate_Reporters\" (id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com'),(3,'Michael Johnson','michael@example.com'),(4,'Emily Davis','emily@example.com'),(5,'David Brown','david@example.com');\nINSERT INTO \"Real_Estate_Reporters_Markets\" (reporter_id,market_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "provide the market name and description that are common to all real estate reporters.",
      "gold_queries": [
        "SELECT Markets.market_name, Markets.description  from Real_Estate_Reporters_Markets join Markets on Real_Estate_Reporters_Markets.market_id = Markets.id join Real_Estate_Reporters on Real_Estate_Reporters_Markets.reporter_id = Real_Estate_Reporters.id   GROUP BY Real_Estate_Reporters_Markets.market_id HAVING COUNT(DISTINCT Real_Estate_Reporters_Markets.reporter_id) = (SELECT COUNT(*) FROM  Real_Estate_Reporters)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Find the market covered by every real estate reporter.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT market_name FROM Markets WHERE id IN (SELECT market_id FROM Real_Estate_Reporters_Markets GROUP BY market_id HAVING COUNT(DISTINCT reporter_id) = (SELECT COUNT(*) FROM Real_Estate_Reporters))"
          ]
        },
        {
          "interpretation": "Determine the market and its description universally assigned to real estate reporters.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Markets.market_name, Markets.description\nFROM Markets\nJOIN Real_Estate_Reporters_Markets ON Markets.id = Real_Estate_Reporters_Markets.market_id\nGROUP BY Markets.id\nHAVING COUNT(DISTINCT Real_Estate_Reporters_Markets.reporter_id) = (SELECT COUNT(*) FROM Real_Estate_Reporters)"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Journalism/scope_real_estate_reporters_markets/scope_real_estate_reporters_markets.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    article_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    published_date DATE\n);\nCREATE TABLE Markets(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    market_name TEXT,\n    description TEXT\n);\nCREATE TABLE Real_Estate_Reporters(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT\n);\nCREATE TABLE Real_Estate_Reporters_Markets(\n    reporter_id INTEGER,\n    market_id INTEGER,\n    FOREIGN KEY(reporter_id) REFERENCES Real_Estate_Reporters(id),\n    FOREIGN KEY(market_id) REFERENCES Markets(id)\n);\nCREATE TABLE Reporter_Articles(\n    reporter_id INTEGER,\n    article_id INTEGER,\n    FOREIGN KEY(reporter_id) REFERENCES Real_Estate_Reporters(id),\n    FOREIGN KEY(article_id) REFERENCES Articles(article_id)\n);\n\nINSERT INTO \"Articles\" (article_id,title,content,published_date) VALUES (1,'New Luxury Home Development','Details about a new luxury home development...','2021-09-01'),(2,'First Time Buyers Guide','Tips for first time home buyers...','2021-08-15'),(3,'Office Space Trends','The latest trends in office space...','2021-07-30'),(4,'Farmland vs Investment Property','Comparing farmland and investment property...','2021-06-20'),(5,'Retail Space Revival','How retail spaces are making a comeback...','2021-05-15');\nINSERT INTO \"Markets\" (id,market_name,description) VALUES (1,'Luxury Homes','High-end residential properties.'),(2,'Affordable Housing','Moderately priced homes for first-time buyers.'),(3,'Commercial Properties','Offices, retail spaces, industrial buildings.'),(4,'Rural Land','Agriculture land and rural estates.'),(5,'Investment Properties','Properties purchased for investment purposes.');\nINSERT INTO \"Real_Estate_Reporters\" (id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com'),(3,'Michael Johnson','michael@example.com'),(4,'Emily Davis','emily@example.com'),(5,'David Brown','david@example.com');\nINSERT INTO \"Real_Estate_Reporters_Markets\" (reporter_id,market_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "Which market is common across all real estate reporters?",
      "gold_queries": [
        "SELECT Markets.market_name  from Real_Estate_Reporters_Markets join Markets on Real_Estate_Reporters_Markets.market_id = Markets.id join Real_Estate_Reporters on Real_Estate_Reporters_Markets.reporter_id = Real_Estate_Reporters.id   GROUP BY Real_Estate_Reporters_Markets.market_id HAVING COUNT(DISTINCT Real_Estate_Reporters_Markets.reporter_id) = (SELECT COUNT(*) FROM  Real_Estate_Reporters)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "The market that is present in every row of the `Real_Estate_Reporters_Markets` table.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT market_name\nFROM Markets\nWHERE id IN (\n    SELECT market_id\n    FROM Real_Estate_Reporters_Markets\n    GROUP BY market_id\n    HAVING COUNT(DISTINCT reporter_id) = (SELECT COUNT(*) FROM Real_Estate_Reporters)\n)"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Journalism/scope_real_estate_reporters_markets/scope_real_estate_reporters_markets.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    article_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    published_date DATE\n);\nCREATE TABLE Markets(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    market_name TEXT,\n    description TEXT\n);\nCREATE TABLE Real_Estate_Reporters(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT\n);\nCREATE TABLE Real_Estate_Reporters_Markets(\n    reporter_id INTEGER,\n    market_id INTEGER,\n    FOREIGN KEY(reporter_id) REFERENCES Real_Estate_Reporters(id),\n    FOREIGN KEY(market_id) REFERENCES Markets(id)\n);\nCREATE TABLE Reporter_Articles(\n    reporter_id INTEGER,\n    article_id INTEGER,\n    FOREIGN KEY(reporter_id) REFERENCES Real_Estate_Reporters(id),\n    FOREIGN KEY(article_id) REFERENCES Articles(article_id)\n);\n\nINSERT INTO \"Articles\" (article_id,title,content,published_date) VALUES (1,'New Luxury Home Development','Details about a new luxury home development...','2021-09-01'),(2,'First Time Buyers Guide','Tips for first time home buyers...','2021-08-15'),(3,'Office Space Trends','The latest trends in office space...','2021-07-30'),(4,'Farmland vs Investment Property','Comparing farmland and investment property...','2021-06-20'),(5,'Retail Space Revival','How retail spaces are making a comeback...','2021-05-15');\nINSERT INTO \"Markets\" (id,market_name,description) VALUES (1,'Luxury Homes','High-end residential properties.'),(2,'Affordable Housing','Moderately priced homes for first-time buyers.'),(3,'Commercial Properties','Offices, retail spaces, industrial buildings.'),(4,'Rural Land','Agriculture land and rural estates.'),(5,'Investment Properties','Properties purchased for investment purposes.');\nINSERT INTO \"Real_Estate_Reporters\" (id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com'),(3,'Michael Johnson','michael@example.com'),(4,'Emily Davis','emily@example.com'),(5,'David Brown','david@example.com');\nINSERT INTO \"Real_Estate_Reporters_Markets\" (reporter_id,market_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "For each real estate reporters, what are the corresponding market names and descriptions?",
      "gold_queries": [
        "select real_estate_reporters.name , markets.market_name , markets.description from Real_Estate_Reporters_Markets join Markets on Real_Estate_Reporters_Markets.market_id = Markets.id join Real_Estate_Reporters on Real_Estate_Reporters_Markets.reporter_id = Real_Estate_Reporters.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List each reporter, along with the market names and descriptions they are affiliated with.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT R.name, M.market_name, M.description\nFROM Real_Estate_Reporters R\nJOIN Real_Estate_Reporters_Markets REM ON R.id = REM.reporter_id\nJOIN Markets M ON REM.market_id = M.id"
          ]
        },
        {
          "interpretation": "Retrieve the name and email of each real estate reporter and their associated market names.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT R.name, R.email, M.market_name\nFROM Real_Estate_Reporters R\nJOIN Real_Estate_Reporters_Markets REM ON R.id = REM.reporter_id\nJOIN Markets M ON REM.market_id = M.id"
          ]
        },
        {
          "interpretation": "Find all markets covered by each real estate reporter.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Real_Estate_Reporters.name, Markets.market_name\nFROM Real_Estate_Reporters\nJOIN Real_Estate_Reporters_Markets ON Real_Estate_Reporters.id = Real_Estate_Reporters_Markets.reporter_id\nJOIN Markets ON Real_Estate_Reporters_Markets.market_id = Markets.id"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Journalism/scope_real_estate_reporters_markets/scope_real_estate_reporters_markets.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    article_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    published_date DATE\n);\nCREATE TABLE Markets(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    market_name TEXT,\n    description TEXT\n);\nCREATE TABLE Real_Estate_Reporters(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT\n);\nCREATE TABLE Real_Estate_Reporters_Markets(\n    reporter_id INTEGER,\n    market_id INTEGER,\n    FOREIGN KEY(reporter_id) REFERENCES Real_Estate_Reporters(id),\n    FOREIGN KEY(market_id) REFERENCES Markets(id)\n);\nCREATE TABLE Reporter_Articles(\n    reporter_id INTEGER,\n    article_id INTEGER,\n    FOREIGN KEY(reporter_id) REFERENCES Real_Estate_Reporters(id),\n    FOREIGN KEY(article_id) REFERENCES Articles(article_id)\n);\n\nINSERT INTO \"Articles\" (article_id,title,content,published_date) VALUES (1,'New Luxury Home Development','Details about a new luxury home development...','2021-09-01'),(2,'First Time Buyers Guide','Tips for first time home buyers...','2021-08-15'),(3,'Office Space Trends','The latest trends in office space...','2021-07-30'),(4,'Farmland vs Investment Property','Comparing farmland and investment property...','2021-06-20'),(5,'Retail Space Revival','How retail spaces are making a comeback...','2021-05-15');\nINSERT INTO \"Markets\" (id,market_name,description) VALUES (1,'Luxury Homes','High-end residential properties.'),(2,'Affordable Housing','Moderately priced homes for first-time buyers.'),(3,'Commercial Properties','Offices, retail spaces, industrial buildings.'),(4,'Rural Land','Agriculture land and rural estates.'),(5,'Investment Properties','Properties purchased for investment purposes.');\nINSERT INTO \"Real_Estate_Reporters\" (id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com'),(3,'Michael Johnson','michael@example.com'),(4,'Emily Davis','emily@example.com'),(5,'David Brown','david@example.com');\nINSERT INTO \"Real_Estate_Reporters_Markets\" (reporter_id,market_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "What markets are associated with each real estate reporter?",
      "gold_queries": [
        "SELECT Markets.market_name  from Real_Estate_Reporters_Markets join Markets on Real_Estate_Reporters_Markets.market_id = Markets.id join Real_Estate_Reporters on Real_Estate_Reporters_Markets.reporter_id = Real_Estate_Reporters.id   GROUP BY Real_Estate_Reporters_Markets.market_id HAVING COUNT(DISTINCT Real_Estate_Reporters_Markets.reporter_id) = (SELECT COUNT(*) FROM  Real_Estate_Reporters)",
        "select real_estate_reporters.name , markets.market_name from Real_Estate_Reporters_Markets join Markets on Real_Estate_Reporters_Markets.market_id = Markets.id join Real_Estate_Reporters on Real_Estate_Reporters_Markets.reporter_id = Real_Estate_Reporters.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For each reporter, list the corresponding markets they are linked to.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT RER.name, M.market_name\nFROM Real_Estate_Reporters RER\nJOIN Real_Estate_Reporters_Markets REM ON RER.id = REM.reporter_id\nJOIN Markets M ON REM.market_id = M.id"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 1.0,
        "f1_score": 0.6666666666666666,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Journalism/scope_television_channels_shows/scope_television_channels_shows.sqlite",
      "db_dump": "CREATE TABLE Shows (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    show_title TEXT,\n    genre TEXT\n);\nCREATE TABLE Television_Channels (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    channel_name TEXT,\n    country TEXT\n);\nCREATE TABLE Television_Channels_Shows (\n    television_channels_id INTEGER,\n    shows_id INTEGER,\n    FOREIGN KEY(television_channels_id) REFERENCES Television_Channels(id),\n    FOREIGN KEY(shows_id) REFERENCES Shows(id)\n);\n\nINSERT INTO \"Shows\" (id,show_title,genre) VALUES (1,'Friends','Sitcom'),(2,'The Office','Comedy'),(3,'Breaking Bad','Crime Drama'),(4,'Game Of Thrones','Fantasy'),(5,'Stranger Things','Science Fiction');\nINSERT INTO \"Television_Channels\" (id,channel_name,country) VALUES (1,'Channel One','USA'),(2,'Channel Two','UK'),(3,'Channel Three','Canada'),(4,'Channel Four','Australia'),(5,'Channel Five','Germany');\nINSERT INTO \"Television_Channels_Shows\" (television_channels_id,shows_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "Show me the genre of shows each channel runs.",
      "gold_queries": [
        "SELECT Shows.genre  from Television_Channels_Shows join Shows on Television_Channels_Shows.shows_id = Shows.id join Television_Channels on Television_Channels_Shows.television_channels_id = Television_Channels.id   GROUP BY Television_Channels_Shows.shows_id HAVING COUNT(DISTINCT Television_Channels_Shows.television_channels_id) = (SELECT COUNT(*) FROM  Television_Channels)",
        "select television_channels.channel_name , shows.genre from Television_Channels_Shows join Shows on Television_Channels_Shows.shows_id = Shows.id join Television_Channels on Television_Channels_Shows.television_channels_id = Television_Channels.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Return a table showing the channel name and a list of genres represented by shows on that channel.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.channel_name, GROUP_CONCAT(DISTINCT T3.genre) AS genres\nFROM Television_Channels AS T1\nJOIN Television_Channels_Shows AS T2 ON T1.id = T2.television_channels_id\nJOIN Shows AS T3 ON T2.shows_id = T3.id\nGROUP BY T1.channel_name"
          ]
        },
        {
          "interpretation": "For each channel, display the genre of all shows it broadcasts.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.channel_name, T3.genre \nFROM Television_Channels_Shows AS T1 \nJOIN Television_Channels AS T2 ON T1.television_channels_id = T2.id \nJOIN Shows AS T3 ON T1.shows_id = T3.id"
          ]
        },
        {
          "interpretation": "Provide a summary of all genres present across all channels and their respective show counts.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT genre, COUNT(*) AS show_count\nFROM Shows\nGROUP BY genre"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.3333333333333333,
        "f1_score": 0.4,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Journalism/scope_television_channels_shows/scope_television_channels_shows.sqlite",
      "db_dump": "CREATE TABLE Shows (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    show_title TEXT,\n    genre TEXT\n);\nCREATE TABLE Television_Channels (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    channel_name TEXT,\n    country TEXT\n);\nCREATE TABLE Television_Channels_Shows (\n    television_channels_id INTEGER,\n    shows_id INTEGER,\n    FOREIGN KEY(television_channels_id) REFERENCES Television_Channels(id),\n    FOREIGN KEY(shows_id) REFERENCES Shows(id)\n);\n\nINSERT INTO \"Shows\" (id,show_title,genre) VALUES (1,'Friends','Sitcom'),(2,'The Office','Comedy'),(3,'Breaking Bad','Crime Drama'),(4,'Game Of Thrones','Fantasy'),(5,'Stranger Things','Science Fiction');\nINSERT INTO \"Television_Channels\" (id,channel_name,country) VALUES (1,'Channel One','USA'),(2,'Channel Two','UK'),(3,'Channel Three','Canada'),(4,'Channel Four','Australia'),(5,'Channel Five','Germany');\nINSERT INTO \"Television_Channels_Shows\" (television_channels_id,shows_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "For each television channel, what is the corresponding show title and genre of shows?",
      "gold_queries": [
        "select television_channels.channel_name , shows.show_title , shows.genre from Television_Channels_Shows join Shows on Television_Channels_Shows.shows_id = Shows.id join Television_Channels on Television_Channels_Shows.television_channels_id = Television_Channels.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For each television channel, present a separate table containing the titles and genres of all shows aired on that channel.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 5,
            "num_unique_queries": 5,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.channel_name, T1.show_title, T1.genre \nFROM Shows AS T1 \nJOIN Television_Channels_Shows AS T2_CS ON T1.id = T2_CS.shows_id \nJOIN Television_Channels AS T2 ON T2_CS.television_channels_id = T2.id \nWHERE T2.channel_name = 'Channel Two'",
            "SELECT T2.channel_name, T1.show_title, T1.genre \nFROM Shows AS T1 \nJOIN Television_Channels_Shows AS T2_CS ON T1.id = T2_CS.shows_id \nJOIN Television_Channels AS T2 ON T2_CS.television_channels_id = T2.id \nWHERE T2.channel_name = 'Channel Five'",
            "SELECT T2.channel_name, T1.show_title, T1.genre \nFROM Shows AS T1 \nJOIN Television_Channels_Shows AS T2_CS ON T1.id = T2_CS.shows_id \nJOIN Television_Channels AS T2 ON T2_CS.television_channels_id = T2.id \nWHERE T2.channel_name = 'Channel Three'",
            "SELECT T2.channel_name, T1.show_title, T1.genre \nFROM Shows AS T1 \nJOIN Television_Channels_Shows AS T2_CS ON T1.id = T2_CS.shows_id \nJOIN Television_Channels AS T2 ON T2_CS.television_channels_id = T2.id \nWHERE T2.channel_name = 'Channel One'",
            "SELECT T2.channel_name, T1.show_title, T1.genre \nFROM Shows AS T1 \nJOIN Television_Channels_Shows AS T2_CS ON T1.id = T2_CS.shows_id \nJOIN Television_Channels AS T2 ON T2_CS.television_channels_id = T2.id \nWHERE T2.channel_name = 'Channel Four'"
          ]
        },
        {
          "interpretation": "For each television channel, present a separate table containing the titles and genres of all shows aired on that channel.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 5,
            "num_unique_queries": 5,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.channel_name, T1.show_title, T1.genre \nFROM Shows AS T1 \nJOIN Television_Channels_Shows AS T2_CS ON T1.id = T2_CS.shows_id \nJOIN Television_Channels AS T2 ON T2_CS.television_channels_id = T2.id \nWHERE T2.channel_name = 'Channel Two'",
            "SELECT T2.channel_name, T1.show_title, T1.genre \nFROM Shows AS T1 \nJOIN Television_Channels_Shows AS T2_CS ON T1.id = T2_CS.shows_id \nJOIN Television_Channels AS T2 ON T2_CS.television_channels_id = T2.id \nWHERE T2.channel_name = 'Channel Five'",
            "SELECT T2.channel_name, T1.show_title, T1.genre \nFROM Shows AS T1 \nJOIN Television_Channels_Shows AS T2_CS ON T1.id = T2_CS.shows_id \nJOIN Television_Channels AS T2 ON T2_CS.television_channels_id = T2.id \nWHERE T2.channel_name = 'Channel Three'",
            "SELECT T2.channel_name, T1.show_title, T1.genre \nFROM Shows AS T1 \nJOIN Television_Channels_Shows AS T2_CS ON T1.id = T2_CS.shows_id \nJOIN Television_Channels AS T2 ON T2_CS.television_channels_id = T2.id \nWHERE T2.channel_name = 'Channel One'",
            "SELECT T2.channel_name, T1.show_title, T1.genre \nFROM Shows AS T1 \nJOIN Television_Channels_Shows AS T2_CS ON T1.id = T2_CS.shows_id \nJOIN Television_Channels AS T2 ON T2_CS.television_channels_id = T2.id \nWHERE T2.channel_name = 'Channel Four'"
          ]
        },
        {
          "interpretation": "For each television channel, present a separate table containing the titles and genres of all shows aired on that channel.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 5,
            "num_unique_queries": 5,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.channel_name, T1.show_title, T1.genre \nFROM Shows AS T1 \nJOIN Television_Channels_Shows AS T2_CS ON T1.id = T2_CS.shows_id \nJOIN Television_Channels AS T2 ON T2_CS.television_channels_id = T2.id \nWHERE T2.channel_name = 'Channel Two'",
            "SELECT T2.channel_name, T1.show_title, T1.genre \nFROM Shows AS T1 \nJOIN Television_Channels_Shows AS T2_CS ON T1.id = T2_CS.shows_id \nJOIN Television_Channels AS T2 ON T2_CS.television_channels_id = T2.id \nWHERE T2.channel_name = 'Channel Five'",
            "SELECT T2.channel_name, T1.show_title, T1.genre \nFROM Shows AS T1 \nJOIN Television_Channels_Shows AS T2_CS ON T1.id = T2_CS.shows_id \nJOIN Television_Channels AS T2 ON T2_CS.television_channels_id = T2.id \nWHERE T2.channel_name = 'Channel Three'",
            "SELECT T2.channel_name, T1.show_title, T1.genre \nFROM Shows AS T1 \nJOIN Television_Channels_Shows AS T2_CS ON T1.id = T2_CS.shows_id \nJOIN Television_Channels AS T2 ON T2_CS.television_channels_id = T2.id \nWHERE T2.channel_name = 'Channel One'",
            "SELECT T2.channel_name, T1.show_title, T1.genre \nFROM Shows AS T1 \nJOIN Television_Channels_Shows AS T2_CS ON T1.id = T2_CS.shows_id \nJOIN Television_Channels AS T2 ON T2_CS.television_channels_id = T2.id \nWHERE T2.channel_name = 'Channel Four'"
          ]
        },
        {
          "interpretation": "For each television channel, present a separate table containing the titles and genres of all shows aired on that channel.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 5,
            "num_unique_queries": 5,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.channel_name, T1.show_title, T1.genre \nFROM Shows AS T1 \nJOIN Television_Channels_Shows AS T2_CS ON T1.id = T2_CS.shows_id \nJOIN Television_Channels AS T2 ON T2_CS.television_channels_id = T2.id \nWHERE T2.channel_name = 'Channel Two'",
            "SELECT T2.channel_name, T1.show_title, T1.genre \nFROM Shows AS T1 \nJOIN Television_Channels_Shows AS T2_CS ON T1.id = T2_CS.shows_id \nJOIN Television_Channels AS T2 ON T2_CS.television_channels_id = T2.id \nWHERE T2.channel_name = 'Channel Five'",
            "SELECT T2.channel_name, T1.show_title, T1.genre \nFROM Shows AS T1 \nJOIN Television_Channels_Shows AS T2_CS ON T1.id = T2_CS.shows_id \nJOIN Television_Channels AS T2 ON T2_CS.television_channels_id = T2.id \nWHERE T2.channel_name = 'Channel Three'",
            "SELECT T2.channel_name, T1.show_title, T1.genre \nFROM Shows AS T1 \nJOIN Television_Channels_Shows AS T2_CS ON T1.id = T2_CS.shows_id \nJOIN Television_Channels AS T2 ON T2_CS.television_channels_id = T2.id \nWHERE T2.channel_name = 'Channel One'",
            "SELECT T2.channel_name, T1.show_title, T1.genre \nFROM Shows AS T1 \nJOIN Television_Channels_Shows AS T2_CS ON T1.id = T2_CS.shows_id \nJOIN Television_Channels AS T2 ON T2_CS.television_channels_id = T2.id \nWHERE T2.channel_name = 'Channel Four'"
          ]
        },
        {
          "interpretation": "For each television channel, present a separate table containing the titles and genres of all shows aired on that channel.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 5,
            "num_unique_queries": 5,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.channel_name, T1.show_title, T1.genre \nFROM Shows AS T1 \nJOIN Television_Channels_Shows AS T2_CS ON T1.id = T2_CS.shows_id \nJOIN Television_Channels AS T2 ON T2_CS.television_channels_id = T2.id \nWHERE T2.channel_name = 'Channel Two'",
            "SELECT T2.channel_name, T1.show_title, T1.genre \nFROM Shows AS T1 \nJOIN Television_Channels_Shows AS T2_CS ON T1.id = T2_CS.shows_id \nJOIN Television_Channels AS T2 ON T2_CS.television_channels_id = T2.id \nWHERE T2.channel_name = 'Channel Five'",
            "SELECT T2.channel_name, T1.show_title, T1.genre \nFROM Shows AS T1 \nJOIN Television_Channels_Shows AS T2_CS ON T1.id = T2_CS.shows_id \nJOIN Television_Channels AS T2 ON T2_CS.television_channels_id = T2.id \nWHERE T2.channel_name = 'Channel Three'",
            "SELECT T2.channel_name, T1.show_title, T1.genre \nFROM Shows AS T1 \nJOIN Television_Channels_Shows AS T2_CS ON T1.id = T2_CS.shows_id \nJOIN Television_Channels AS T2 ON T2_CS.television_channels_id = T2.id \nWHERE T2.channel_name = 'Channel One'",
            "SELECT T2.channel_name, T1.show_title, T1.genre \nFROM Shows AS T1 \nJOIN Television_Channels_Shows AS T2_CS ON T1.id = T2_CS.shows_id \nJOIN Television_Channels AS T2 ON T2_CS.television_channels_id = T2.id \nWHERE T2.channel_name = 'Channel Four'"
          ]
        },
        {
          "interpretation": "Generate a report summarizing the relationship between each television channel and the shows aired on that channel, including title and genre.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT TV.channel_name, TV.country, S.show_title, S.genre\nFROM Television_Channels AS TV\nJOIN Television_Channels_Shows AS TCS ON TV.id = TCS.television_channels_id\nJOIN Shows AS S ON TCS.shows_id = S.id"
          ]
        },
        {
          "interpretation": "List all unique television channels and for each, list the titles and genres of all shows they broadcast.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT T2.channel_name, T1.show_title, T1.genre\nFROM Shows AS T1\nJOIN Television_Channels_Shows AS T3 ON T1.id = T3.shows_id\nJOIN Television_Channels AS T2 ON T3.television_channels_id = T2.id"
          ]
        }
      ],
      "num_unique_execution_results": 7,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.14285714285714285,
        "f1_score": 0.25,
        "num_queries": 27,
        "num_unique_queries": 7,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Journalism/scope_television_channels_shows/scope_television_channels_shows.sqlite",
      "db_dump": "CREATE TABLE Shows (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    show_title TEXT,\n    genre TEXT\n);\nCREATE TABLE Television_Channels (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    channel_name TEXT,\n    country TEXT\n);\nCREATE TABLE Television_Channels_Shows (\n    television_channels_id INTEGER,\n    shows_id INTEGER,\n    FOREIGN KEY(television_channels_id) REFERENCES Television_Channels(id),\n    FOREIGN KEY(shows_id) REFERENCES Shows(id)\n);\n\nINSERT INTO \"Shows\" (id,show_title,genre) VALUES (1,'Friends','Sitcom'),(2,'The Office','Comedy'),(3,'Breaking Bad','Crime Drama'),(4,'Game Of Thrones','Fantasy'),(5,'Stranger Things','Science Fiction');\nINSERT INTO \"Television_Channels\" (id,channel_name,country) VALUES (1,'Channel One','USA'),(2,'Channel Two','UK'),(3,'Channel Three','Canada'),(4,'Channel Four','Australia'),(5,'Channel Five','Germany');\nINSERT INTO \"Television_Channels_Shows\" (television_channels_id,shows_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "What is the genre of shows that are common to all channels?",
      "gold_queries": [
        "SELECT Shows.genre  from Television_Channels_Shows join Shows on Television_Channels_Shows.shows_id = Shows.id join Television_Channels on Television_Channels_Shows.television_channels_id = Television_Channels.id   GROUP BY Television_Channels_Shows.shows_id HAVING COUNT(DISTINCT Television_Channels_Shows.television_channels_id) = (SELECT COUNT(*) FROM  Television_Channels)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List the genre(s) that have shows present on every listed television channel.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT genre\nFROM Shows\nWHERE id IN (\n    SELECT shows_id\n    FROM Television_Channels_Shows\n    GROUP BY shows_id\n    HAVING COUNT(DISTINCT television_channels_id) = (SELECT COUNT(*) FROM Television_Channels)\n)"
          ]
        },
        {
          "interpretation": "Identify the genre(s) shared by all shows across all television channels.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT genre\nFROM Shows\nGROUP BY genre\nHAVING COUNT(DISTINCT id) = (SELECT COUNT(DISTINCT id) FROM Shows)"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Journalism/scope_television_channels_shows/scope_television_channels_shows.sqlite",
      "db_dump": "CREATE TABLE Shows (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    show_title TEXT,\n    genre TEXT\n);\nCREATE TABLE Television_Channels (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    channel_name TEXT,\n    country TEXT\n);\nCREATE TABLE Television_Channels_Shows (\n    television_channels_id INTEGER,\n    shows_id INTEGER,\n    FOREIGN KEY(television_channels_id) REFERENCES Television_Channels(id),\n    FOREIGN KEY(shows_id) REFERENCES Shows(id)\n);\n\nINSERT INTO \"Shows\" (id,show_title,genre) VALUES (1,'Friends','Sitcom'),(2,'The Office','Comedy'),(3,'Breaking Bad','Crime Drama'),(4,'Game Of Thrones','Fantasy'),(5,'Stranger Things','Science Fiction');\nINSERT INTO \"Television_Channels\" (id,channel_name,country) VALUES (1,'Channel One','USA'),(2,'Channel Two','UK'),(3,'Channel Three','Canada'),(4,'Channel Four','Australia'),(5,'Channel Five','Germany');\nINSERT INTO \"Television_Channels_Shows\" (television_channels_id,shows_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "What are the show titles and genres common to all television channels?",
      "gold_queries": [
        "SELECT Shows.show_title, Shows.genre  from Television_Channels_Shows join Shows on Television_Channels_Shows.shows_id = Shows.id join Television_Channels on Television_Channels_Shows.television_channels_id = Television_Channels.id   GROUP BY Television_Channels_Shows.shows_id HAVING COUNT(DISTINCT Television_Channels_Shows.television_channels_id) = (SELECT COUNT(*) FROM  Television_Channels)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List the unique show titles and their corresponding genres that are present across all television channels.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT T2.show_title, T2.genre FROM Television_Channels_Shows AS T1 JOIN Shows AS T2 ON T1.shows_id = T2.id"
          ]
        },
        {
          "interpretation": "What shows are broadcast on every television channel?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT show_title FROM Shows WHERE id IN (SELECT shows_id FROM Television_Channels_Shows GROUP BY shows_id HAVING COUNT(DISTINCT television_channels_id) = (SELECT COUNT(*) FROM Television_Channels))"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Journalism/scope_television_channels_shows/scope_television_channels_shows.sqlite",
      "db_dump": "CREATE TABLE Shows (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    show_title TEXT,\n    genre TEXT\n);\nCREATE TABLE Television_Channels (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    channel_name TEXT,\n    country TEXT\n);\nCREATE TABLE Television_Channels_Shows (\n    television_channels_id INTEGER,\n    shows_id INTEGER,\n    FOREIGN KEY(television_channels_id) REFERENCES Television_Channels(id),\n    FOREIGN KEY(shows_id) REFERENCES Shows(id)\n);\n\nINSERT INTO \"Shows\" (id,show_title,genre) VALUES (1,'Friends','Sitcom'),(2,'The Office','Comedy'),(3,'Breaking Bad','Crime Drama'),(4,'Game Of Thrones','Fantasy'),(5,'Stranger Things','Science Fiction');\nINSERT INTO \"Television_Channels\" (id,channel_name,country) VALUES (1,'Channel One','USA'),(2,'Channel Two','UK'),(3,'Channel Three','Canada'),(4,'Channel Four','Australia'),(5,'Channel Five','Germany');\nINSERT INTO \"Television_Channels_Shows\" (television_channels_id,shows_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "What shows are associated with each television channel?",
      "gold_queries": [
        "SELECT Shows.show_title  from Television_Channels_Shows join Shows on Television_Channels_Shows.shows_id = Shows.id join Television_Channels on Television_Channels_Shows.television_channels_id = Television_Channels.id   GROUP BY Television_Channels_Shows.shows_id HAVING COUNT(DISTINCT Television_Channels_Shows.television_channels_id) = (SELECT COUNT(*) FROM  Television_Channels)",
        "select television_channels.channel_name , shows.show_title from Television_Channels_Shows join Shows on Television_Channels_Shows.shows_id = Shows.id join Television_Channels on Television_Channels_Shows.television_channels_id = Television_Channels.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Retrieve a list of shows, grouped by television channel, showing each television channel and its associated shows.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.channel_name, T3.show_title \nFROM Television_Channels_Shows AS T1 \nJOIN Television_Channels AS T2 ON T1.television_channels_id = T2.id \nJOIN Shows AS T3 ON T1.shows_id = T3.id \nORDER BY T2.channel_name, T3.show_title"
          ]
        },
        {
          "interpretation": "Present a table where rows represent television channels and columns represent show titles, showing which shows are broadcast on each channel.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    tcs.television_channels_id AS Channel_ID,\n    tc.channel_name AS Channel_Name,\n    s.id AS Show_ID,\n    s.show_title AS Show_Title\nFROM \n    Television_Channels_Shows tcs\nJOIN \n    Television_Channels tc ON tcs.television_channels_id = tc.id\nJOIN \n    Shows s ON tcs.shows_id = s.id"
          ]
        },
        {
          "interpretation": "Output a matrix where rows represent shows and columns represent television channels, indicating if a show is associated with a specific channel.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    S.show_title AS Show,\n    TC.channel_name AS Channel,\n    CASE \n        WHEN TCS.shows_id IS NOT NULL THEN 'Yes'\n        ELSE 'No'\n    END AS Associated\nFROM \n    Shows S\nCROSS JOIN \n    Television_Channels TC\nLEFT JOIN \n    Television_Channels_Shows TCS\nON \n    S.id = TCS.shows_id AND TC.id = TCS.television_channels_id\nORDER BY \n    S.show_title, TC.channel_name"
          ]
        },
        {
          "interpretation": "List each television channel and the IDs of all shows associated with it.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT channel_name, shows_id FROM Television_Channels_Shows JOIN Television_Channels ON Television_Channels_Shows.television_channels_id = Television_Channels.id"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.25,
        "f1_score": 0.3333333333333333,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Journalism/scope_television_channels_shows/scope_television_channels_shows.sqlite",
      "db_dump": "CREATE TABLE Shows (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    show_title TEXT,\n    genre TEXT\n);\nCREATE TABLE Television_Channels (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    channel_name TEXT,\n    country TEXT\n);\nCREATE TABLE Television_Channels_Shows (\n    television_channels_id INTEGER,\n    shows_id INTEGER,\n    FOREIGN KEY(television_channels_id) REFERENCES Television_Channels(id),\n    FOREIGN KEY(shows_id) REFERENCES Shows(id)\n);\n\nINSERT INTO \"Shows\" (id,show_title,genre) VALUES (1,'Friends','Sitcom'),(2,'The Office','Comedy'),(3,'Breaking Bad','Crime Drama'),(4,'Game Of Thrones','Fantasy'),(5,'Stranger Things','Science Fiction');\nINSERT INTO \"Television_Channels\" (id,channel_name,country) VALUES (1,'Channel One','USA'),(2,'Channel Two','UK'),(3,'Channel Three','Canada'),(4,'Channel Four','Australia'),(5,'Channel Five','Germany');\nINSERT INTO \"Television_Channels_Shows\" (television_channels_id,shows_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "For every channel, list the genre of shows they run.",
      "gold_queries": [
        "select television_channels.channel_name , shows.genre from Television_Channels_Shows join Shows on Television_Channels_Shows.shows_id = Shows.id join Television_Channels on Television_Channels_Shows.television_channels_id = Television_Channels.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For every channel, list all genres of shows, regardless of whether they air on that channel.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT T2.genre, T1.channel_name FROM Television_Channels AS T1 CROSS JOIN Shows AS T2"
          ]
        },
        {
          "interpretation": "For each unique television channel, list every distinct genre of show aired on that channel.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT DISTINCT T2.channel_name, T3.genre\nFROM Television_Channels_Shows AS T1\nJOIN Television_Channels AS T2 ON T1.television_channels_id = T2.id\nJOIN Shows AS T3 ON T1.shows_id = T3.id"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Journalism/scope_television_channels_shows/scope_television_channels_shows.sqlite",
      "db_dump": "CREATE TABLE Shows (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    show_title TEXT,\n    genre TEXT\n);\nCREATE TABLE Television_Channels (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    channel_name TEXT,\n    country TEXT\n);\nCREATE TABLE Television_Channels_Shows (\n    television_channels_id INTEGER,\n    shows_id INTEGER,\n    FOREIGN KEY(television_channels_id) REFERENCES Television_Channels(id),\n    FOREIGN KEY(shows_id) REFERENCES Shows(id)\n);\n\nINSERT INTO \"Shows\" (id,show_title,genre) VALUES (1,'Friends','Sitcom'),(2,'The Office','Comedy'),(3,'Breaking Bad','Crime Drama'),(4,'Game Of Thrones','Fantasy'),(5,'Stranger Things','Science Fiction');\nINSERT INTO \"Television_Channels\" (id,channel_name,country) VALUES (1,'Channel One','USA'),(2,'Channel Two','UK'),(3,'Channel Three','Canada'),(4,'Channel Four','Australia'),(5,'Channel Five','Germany');\nINSERT INTO \"Television_Channels_Shows\" (television_channels_id,shows_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "What show is common across all television channels?",
      "gold_queries": [
        "SELECT Shows.show_title  from Television_Channels_Shows join Shows on Television_Channels_Shows.shows_id = Shows.id join Television_Channels on Television_Channels_Shows.television_channels_id = Television_Channels.id   GROUP BY Television_Channels_Shows.shows_id HAVING COUNT(DISTINCT Television_Channels_Shows.television_channels_id) = (SELECT COUNT(*) FROM  Television_Channels)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Identify the show having the maximum number of channel associations",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT s.show_title\nFROM Shows s\nJOIN Television_Channels_Shows tcs ON s.id = tcs.shows_id\nGROUP BY s.id\nORDER BY COUNT(tcs.television_channels_id) DESC\nLIMIT 1"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Journalism/scope_television_channels_shows/scope_television_channels_shows.sqlite",
      "db_dump": "CREATE TABLE Shows (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    show_title TEXT,\n    genre TEXT\n);\nCREATE TABLE Television_Channels (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    channel_name TEXT,\n    country TEXT\n);\nCREATE TABLE Television_Channels_Shows (\n    television_channels_id INTEGER,\n    shows_id INTEGER,\n    FOREIGN KEY(television_channels_id) REFERENCES Television_Channels(id),\n    FOREIGN KEY(shows_id) REFERENCES Shows(id)\n);\n\nINSERT INTO \"Shows\" (id,show_title,genre) VALUES (1,'Friends','Sitcom'),(2,'The Office','Comedy'),(3,'Breaking Bad','Crime Drama'),(4,'Game Of Thrones','Fantasy'),(5,'Stranger Things','Science Fiction');\nINSERT INTO \"Television_Channels\" (id,channel_name,country) VALUES (1,'Channel One','USA'),(2,'Channel Two','UK'),(3,'Channel Three','Canada'),(4,'Channel Four','Australia'),(5,'Channel Five','Germany');\nINSERT INTO \"Television_Channels_Shows\" (television_channels_id,shows_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "For each television channel, provide the corresponding show.",
      "gold_queries": [
        "select television_channels.channel_name , shows.show_title from Television_Channels_Shows join Shows on Television_Channels_Shows.shows_id = Shows.id join Television_Channels on Television_Channels_Shows.television_channels_id = Television_Channels.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List each television channel and the id of the show it airs.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.channel_name, T3.shows_id FROM Television_Channels AS T1 JOIN Television_Channels_Shows AS T3 ON T1.id = T3.television_channels_id"
          ]
        },
        {
          "interpretation": "For every channel, list the title of at least one show it broadcasts.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT TCS.television_channels_id, S.show_title\nFROM Television_Channels_Shows TCS\nJOIN Shows S ON TCS.shows_id = S.id\nGROUP BY TCS.television_channels_id"
          ]
        },
        {
          "interpretation": "Retrieve a table showing each channel and the corresponding shows it hosts, including show titles and genres.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.channel_name, T1.show_title, T1.genre \nFROM Shows AS T1 \nJOIN Television_Channels_Shows AS T3 ON T1.id = T3.shows_id \nJOIN Television_Channels AS T2 ON T3.television_channels_id = T2.id"
          ]
        },
        {
          "interpretation": "Show me a list of channel names paired with their show genres.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.channel_name, T1.genre\nFROM Shows AS T1\nJOIN Television_Channels_Shows AS T3 ON T1.id = T3.shows_id\nJOIN Television_Channels AS T2 ON T3.television_channels_id = T2.id"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Journalism/scope_real_estate_reporters_markets/scope_real_estate_reporters_markets.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    article_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    published_date DATE\n);\nCREATE TABLE Markets(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    market_name TEXT,\n    description TEXT\n);\nCREATE TABLE Real_Estate_Reporters(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT\n);\nCREATE TABLE Real_Estate_Reporters_Markets(\n    reporter_id INTEGER,\n    market_id INTEGER,\n    FOREIGN KEY(reporter_id) REFERENCES Real_Estate_Reporters(id),\n    FOREIGN KEY(market_id) REFERENCES Markets(id)\n);\nCREATE TABLE Reporter_Articles(\n    reporter_id INTEGER,\n    article_id INTEGER,\n    FOREIGN KEY(reporter_id) REFERENCES Real_Estate_Reporters(id),\n    FOREIGN KEY(article_id) REFERENCES Articles(article_id)\n);\n\nINSERT INTO \"Articles\" (article_id,title,content,published_date) VALUES (1,'New Luxury Home Development','Details about a new luxury home development...','2021-09-01'),(2,'First Time Buyers Guide','Tips for first time home buyers...','2021-08-15'),(3,'Office Space Trends','The latest trends in office space...','2021-07-30'),(4,'Farmland vs Investment Property','Comparing farmland and investment property...','2021-06-20'),(5,'Retail Space Revival','How retail spaces are making a comeback...','2021-05-15');\nINSERT INTO \"Markets\" (id,market_name,description) VALUES (1,'Luxury Homes','High-end residential properties.'),(2,'Affordable Housing','Moderately priced homes for first-time buyers.'),(3,'Commercial Properties','Offices, retail spaces, industrial buildings.'),(4,'Rural Land','Agriculture land and rural estates.'),(5,'Investment Properties','Properties purchased for investment purposes.');\nINSERT INTO \"Real_Estate_Reporters\" (id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com'),(3,'Michael Johnson','michael@example.com'),(4,'Emily Davis','emily@example.com'),(5,'David Brown','david@example.com');\nINSERT INTO \"Real_Estate_Reporters_Markets\" (reporter_id,market_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "What are descriptions of markets all real estate reporters equally cover?",
      "gold_queries": [
        "SELECT Markets.description  from Real_Estate_Reporters_Markets join Markets on Real_Estate_Reporters_Markets.market_id = Markets.id join Real_Estate_Reporters on Real_Estate_Reporters_Markets.reporter_id = Real_Estate_Reporters.id   GROUP BY Real_Estate_Reporters_Markets.market_id HAVING COUNT(DISTINCT Real_Estate_Reporters_Markets.reporter_id) = (SELECT COUNT(*) FROM  Real_Estate_Reporters)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Description of all markets where at least one reporter has an assignment.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT description \nFROM Markets \nWHERE id IN (SELECT market_id FROM Real_Estate_Reporters_Markets)"
          ]
        },
        {
          "interpretation": "Market descriptions covered by all reporters.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT DISTINCT M.description\nFROM Markets M\nJOIN Real_Estate_Reporters_Markets REM ON M.id = REM.market_id\nWHERE REM.reporter_id IN (\n    SELECT R.id\n    FROM Real_Estate_Reporters R\n)\nGROUP BY M.description\nHAVING COUNT(DISTINCT REM.reporter_id) = (SELECT COUNT(*) FROM Real_Estate_Reporters)"
          ]
        },
        {
          "interpretation": "A list of markets shared by the reporters with no exclusions based on specific reporters.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT market_name FROM Markets"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Journalism/scope_real_estate_reporters_markets/scope_real_estate_reporters_markets.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    article_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    published_date DATE\n);\nCREATE TABLE Markets(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    market_name TEXT,\n    description TEXT\n);\nCREATE TABLE Real_Estate_Reporters(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT\n);\nCREATE TABLE Real_Estate_Reporters_Markets(\n    reporter_id INTEGER,\n    market_id INTEGER,\n    FOREIGN KEY(reporter_id) REFERENCES Real_Estate_Reporters(id),\n    FOREIGN KEY(market_id) REFERENCES Markets(id)\n);\nCREATE TABLE Reporter_Articles(\n    reporter_id INTEGER,\n    article_id INTEGER,\n    FOREIGN KEY(reporter_id) REFERENCES Real_Estate_Reporters(id),\n    FOREIGN KEY(article_id) REFERENCES Articles(article_id)\n);\n\nINSERT INTO \"Articles\" (article_id,title,content,published_date) VALUES (1,'New Luxury Home Development','Details about a new luxury home development...','2021-09-01'),(2,'First Time Buyers Guide','Tips for first time home buyers...','2021-08-15'),(3,'Office Space Trends','The latest trends in office space...','2021-07-30'),(4,'Farmland vs Investment Property','Comparing farmland and investment property...','2021-06-20'),(5,'Retail Space Revival','How retail spaces are making a comeback...','2021-05-15');\nINSERT INTO \"Markets\" (id,market_name,description) VALUES (1,'Luxury Homes','High-end residential properties.'),(2,'Affordable Housing','Moderately priced homes for first-time buyers.'),(3,'Commercial Properties','Offices, retail spaces, industrial buildings.'),(4,'Rural Land','Agriculture land and rural estates.'),(5,'Investment Properties','Properties purchased for investment purposes.');\nINSERT INTO \"Real_Estate_Reporters\" (id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com'),(3,'Michael Johnson','michael@example.com'),(4,'Emily Davis','emily@example.com'),(5,'David Brown','david@example.com');\nINSERT INTO \"Real_Estate_Reporters_Markets\" (reporter_id,market_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "Give me descriptions of markets every real estate reporter covers.",
      "gold_queries": [
        "SELECT Markets.description  from Real_Estate_Reporters_Markets join Markets on Real_Estate_Reporters_Markets.market_id = Markets.id join Real_Estate_Reporters on Real_Estate_Reporters_Markets.reporter_id = Real_Estate_Reporters.id   GROUP BY Real_Estate_Reporters_Markets.market_id HAVING COUNT(DISTINCT Real_Estate_Reporters_Markets.reporter_id) = (SELECT COUNT(*) FROM  Real_Estate_Reporters)",
        "select real_estate_reporters.name , markets.description from Real_Estate_Reporters_Markets join Markets on Real_Estate_Reporters_Markets.market_id = Markets.id join Real_Estate_Reporters on Real_Estate_Reporters_Markets.reporter_id = Real_Estate_Reporters.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Retrieve the `description` of every `market` covered by each `reporter`.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT r.name, m.market_name, m.description\nFROM Real_Estate_Reporters r\nJOIN Real_Estate_Reporters_Markets rem ON r.id = rem.reporter_id\nJOIN Markets m ON rem.market_id = m.id"
          ]
        },
        {
          "interpretation": "Output a list of all unique `market` descriptions, regardless of reporter coverage.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT description FROM Markets"
          ]
        },
        {
          "interpretation": "Return the names of all `markets` that have at least one `reporter` assigned to them.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT M.market_name\nFROM Markets M\nJOIN Real_Estate_Reporters_Markets REM ON M.id = REM.market_id"
          ]
        },
        {
          "interpretation": "Display the unique `market_name` and `description` pairs for reporters with active assignments in the `Real_Estate_Reporters_Markets` table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT M.market_name, M.description\nFROM Markets M\nJOIN Real_Estate_Reporters_Markets REM ON M.id = REM.market_id"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Journalism/scope_real_estate_reporters_markets/scope_real_estate_reporters_markets.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    article_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    published_date DATE\n);\nCREATE TABLE Markets(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    market_name TEXT,\n    description TEXT\n);\nCREATE TABLE Real_Estate_Reporters(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT\n);\nCREATE TABLE Real_Estate_Reporters_Markets(\n    reporter_id INTEGER,\n    market_id INTEGER,\n    FOREIGN KEY(reporter_id) REFERENCES Real_Estate_Reporters(id),\n    FOREIGN KEY(market_id) REFERENCES Markets(id)\n);\nCREATE TABLE Reporter_Articles(\n    reporter_id INTEGER,\n    article_id INTEGER,\n    FOREIGN KEY(reporter_id) REFERENCES Real_Estate_Reporters(id),\n    FOREIGN KEY(article_id) REFERENCES Articles(article_id)\n);\n\nINSERT INTO \"Articles\" (article_id,title,content,published_date) VALUES (1,'New Luxury Home Development','Details about a new luxury home development...','2021-09-01'),(2,'First Time Buyers Guide','Tips for first time home buyers...','2021-08-15'),(3,'Office Space Trends','The latest trends in office space...','2021-07-30'),(4,'Farmland vs Investment Property','Comparing farmland and investment property...','2021-06-20'),(5,'Retail Space Revival','How retail spaces are making a comeback...','2021-05-15');\nINSERT INTO \"Markets\" (id,market_name,description) VALUES (1,'Luxury Homes','High-end residential properties.'),(2,'Affordable Housing','Moderately priced homes for first-time buyers.'),(3,'Commercial Properties','Offices, retail spaces, industrial buildings.'),(4,'Rural Land','Agriculture land and rural estates.'),(5,'Investment Properties','Properties purchased for investment purposes.');\nINSERT INTO \"Real_Estate_Reporters\" (id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com'),(3,'Michael Johnson','michael@example.com'),(4,'Emily Davis','emily@example.com'),(5,'David Brown','david@example.com');\nINSERT INTO \"Real_Estate_Reporters_Markets\" (reporter_id,market_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "For each real estate reporter, list descriptions of markets they cover.",
      "gold_queries": [
        "select real_estate_reporters.name , markets.description from Real_Estate_Reporters_Markets join Markets on Real_Estate_Reporters_Markets.market_id = Markets.id join Real_Estate_Reporters on Real_Estate_Reporters_Markets.reporter_id = Real_Estate_Reporters.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Which markets are covered by each reporter? List each reporter's markets with their respective descriptions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT r.name, m.market_name, m.description\nFROM Real_Estate_Reporters r\nJOIN Real_Estate_Reporters_Markets rem ON r.id = rem.reporter_id\nJOIN Markets m ON rem.market_id = m.id"
          ]
        },
        {
          "interpretation": "Display a table with reporter name and a list of corresponding market descriptions.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT R.name, M.description\nFROM Real_Estate_Reporters R\nJOIN Real_Estate_Reporters_Markets REM ON R.id = REM.reporter_id\nJOIN Markets M ON REM.market_id = M.id"
          ]
        },
        {
          "interpretation": "List the market descriptions associated with each reporter.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T3.description \nFROM Real_Estate_Reporters AS T1 \nJOIN Real_Estate_Reporters_Markets AS T2 ON T1.id = T2.reporter_id \nJOIN Markets AS T3 ON T2.market_id = T3.id"
          ]
        },
        {
          "interpretation": "Show each real estate reporter along with a comma-separated list of their covered market descriptions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT r.name, GROUP_CONCAT(m.description, ', ') AS markets\nFROM Real_Estate_Reporters r\nJOIN Real_Estate_Reporters_Markets rem ON r.id = rem.reporter_id\nJOIN Markets m ON rem.market_id = m.id\nGROUP BY r.id"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Journalism/scope_real_estate_reporters_markets/scope_real_estate_reporters_markets.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    article_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    published_date DATE\n);\nCREATE TABLE Markets(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    market_name TEXT,\n    description TEXT\n);\nCREATE TABLE Real_Estate_Reporters(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT\n);\nCREATE TABLE Real_Estate_Reporters_Markets(\n    reporter_id INTEGER,\n    market_id INTEGER,\n    FOREIGN KEY(reporter_id) REFERENCES Real_Estate_Reporters(id),\n    FOREIGN KEY(market_id) REFERENCES Markets(id)\n);\nCREATE TABLE Reporter_Articles(\n    reporter_id INTEGER,\n    article_id INTEGER,\n    FOREIGN KEY(reporter_id) REFERENCES Real_Estate_Reporters(id),\n    FOREIGN KEY(article_id) REFERENCES Articles(article_id)\n);\n\nINSERT INTO \"Articles\" (article_id,title,content,published_date) VALUES (1,'New Luxury Home Development','Details about a new luxury home development...','2021-09-01'),(2,'First Time Buyers Guide','Tips for first time home buyers...','2021-08-15'),(3,'Office Space Trends','The latest trends in office space...','2021-07-30'),(4,'Farmland vs Investment Property','Comparing farmland and investment property...','2021-06-20'),(5,'Retail Space Revival','How retail spaces are making a comeback...','2021-05-15');\nINSERT INTO \"Markets\" (id,market_name,description) VALUES (1,'Luxury Homes','High-end residential properties.'),(2,'Affordable Housing','Moderately priced homes for first-time buyers.'),(3,'Commercial Properties','Offices, retail spaces, industrial buildings.'),(4,'Rural Land','Agriculture land and rural estates.'),(5,'Investment Properties','Properties purchased for investment purposes.');\nINSERT INTO \"Real_Estate_Reporters\" (id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com'),(3,'Michael Johnson','michael@example.com'),(4,'Emily Davis','emily@example.com'),(5,'David Brown','david@example.com');\nINSERT INTO \"Real_Estate_Reporters_Markets\" (reporter_id,market_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "For each real estate reporter, provide the corresponding markets?",
      "gold_queries": [
        "select real_estate_reporters.name , markets.market_name from Real_Estate_Reporters_Markets join Markets on Real_Estate_Reporters_Markets.market_id = Markets.id join Real_Estate_Reporters on Real_Estate_Reporters_Markets.reporter_id = Real_Estate_Reporters.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List all real estate reporters and the market(s) they are assigned to.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Real_Estate_Reporters.name, Markets.market_name\nFROM Real_Estate_Reporters\nJOIN Real_Estate_Reporters_Markets ON Real_Estate_Reporters.id = Real_Estate_Reporters_Markets.reporter_id\nJOIN Markets ON Real_Estate_Reporters_Markets.market_id = Markets.id"
          ]
        },
        {
          "interpretation": "Output a mapping where the key is the reporter's name and the value is an array of market names.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT R.name, GROUP_CONCAT(M.market_name, ', ') AS markets\nFROM Real_Estate_Reporters R\nJOIN Real_Estate_Reporters_Markets REM ON R.id = REM.reporter_id\nJOIN Markets M ON REM.market_id = M.id\nGROUP BY R.name"
          ]
        },
        {
          "interpretation": "Generate a list of reporter names paired with their corresponding market descriptions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT REAL_Estate_Reporters.name, Markets.description\nFROM REAL_Estate_Reporters\nJOIN Real_Estate_Reporters_Markets ON REAL_Estate_Reporters.id = Real_Estate_Reporters_Markets.reporter_id\nJOIN Markets ON Real_Estate_Reporters_Markets.market_id = Markets.id"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Journalism/scope_television_channels_shows/scope_television_channels_shows.sqlite",
      "db_dump": "CREATE TABLE Shows (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    show_title TEXT,\n    genre TEXT\n);\nCREATE TABLE Television_Channels (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    channel_name TEXT,\n    country TEXT\n);\nCREATE TABLE Television_Channels_Shows (\n    television_channels_id INTEGER,\n    shows_id INTEGER,\n    FOREIGN KEY(television_channels_id) REFERENCES Television_Channels(id),\n    FOREIGN KEY(shows_id) REFERENCES Shows(id)\n);\n\nINSERT INTO \"Shows\" (id,show_title,genre) VALUES (1,'Friends','Sitcom'),(2,'The Office','Comedy'),(3,'Breaking Bad','Crime Drama'),(4,'Game Of Thrones','Fantasy'),(5,'Stranger Things','Science Fiction');\nINSERT INTO \"Television_Channels\" (id,channel_name,country) VALUES (1,'Channel One','USA'),(2,'Channel Two','UK'),(3,'Channel Three','Canada'),(4,'Channel Four','Australia'),(5,'Channel Five','Germany');\nINSERT INTO \"Television_Channels_Shows\" (television_channels_id,shows_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "What show title and genre of shows are available for each television channel?",
      "gold_queries": [
        "SELECT Shows.show_title, Shows.genre  from Television_Channels_Shows join Shows on Television_Channels_Shows.shows_id = Shows.id join Television_Channels on Television_Channels_Shows.television_channels_id = Television_Channels.id   GROUP BY Television_Channels_Shows.shows_id HAVING COUNT(DISTINCT Television_Channels_Shows.television_channels_id) = (SELECT COUNT(*) FROM  Television_Channels)",
        "select television_channels.channel_name , shows.show_title , shows.genre from Television_Channels_Shows join Shows on Television_Channels_Shows.shows_id = Shows.id join Television_Channels on Television_Channels_Shows.television_channels_id = Television_Channels.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List each television channel and all the show titles and genres associated with it",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT TV.channel_name, S.show_title, S.genre \nFROM Television_Channels AS TV \nJOIN Television_Channels_Shows AS TCS ON TV.id = TCS.television_channels_id \nJOIN Shows AS S ON TCS.shows_id = S.id"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 1.0,
        "f1_score": 0.6666666666666666,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Education/scope_field_trips_stops/scope_field_trips_stops.sqlite",
      "db_dump": "CREATE TABLE Field_Trips(\n    tripID INTEGER PRIMARY KEY,\n    fieldTripName TEXT,\n    date DATE);\nCREATE TABLE Field_Trips_Stops(\n    tripID INTEGER REFERENCES Field_Trips(tripID),\n    stopID INTEGER REFERENCES Stops(stopID));\nCREATE TABLE Field_Trips_Students(\n    tripID INTEGER REFERENCES Field_Trips(tripID),\n    studentID INTEGER REFERENCES Students(studentID));\nCREATE TABLE Field_Trips_Teachers(\n    tripID INTEGER REFERENCES Field_Trips(tripID),\n    teacherID INTEGER REFERENCES Teachers(teacherID));\nCREATE TABLE Stops(\n    stopID INTEGER PRIMARY KEY,\n    stopLocation TEXT);\nCREATE TABLE Students(\n    studentID INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT);\nCREATE TABLE Teachers(\n    teacherID INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT);\n\nINSERT INTO \"Field_Trips\" (tripID,fieldTripName,date) VALUES (1,'Educational Trip','2021-09-01'),(2,'Scientific Excursion','2021-08-30'),(3,'Nature Adventure','2021-07-25'),(4,'Historical Tour','2021-06-10'),(5,'Art Exhibition','2021-05-01');\nINSERT INTO \"Field_Trips_Stops\" (tripID,stopID) VALUES (1,1),(1,2),(5,5),(3,3),(4,4),(2,2),(3,2),(4,2),(5,2);\nINSERT INTO \"Field_Trips_Students\" (tripID,studentID) VALUES (1,1),(1,2),(2,3),(2,4),(3,5);\nINSERT INTO \"Field_Trips_Teachers\" (tripID,teacherID) VALUES (1,1),(2,2),(3,3),(4,4),(5,5);\nINSERT INTO \"Stops\" (stopID,stopLocation) VALUES (1,'Zoo'),(2,'Museum'),(3,'Botanical Garden'),(4,'Planetarium'),(5,'National Park');\nINSERT INTO \"Students\" (studentID,firstName,lastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Alice','Brown'),(4,'Tom','Johnson'),(5,'Emma','Wilson');\nINSERT INTO \"Teachers\" (teacherID,firstName,lastName) VALUES (1,'Mr.','White'),(2,'Ms.','Black'),(3,'Dr.','Green'),(4,'Professor','Blue'),(5,'Assistant','Red');\n",
      "question": "What stops were visited during each field trip?",
      "gold_queries": [
        "SELECT Stops.stopLocation  from Field_Trips_Stops join Stops on Field_Trips_Stops.stopID = Stops.stopID join Field_Trips on Field_Trips_Stops.tripID = Field_Trips.tripID   GROUP BY Field_Trips_Stops.stopID HAVING COUNT(DISTINCT Field_Trips_Stops.tripID) = (SELECT COUNT(*) FROM  Field_Trips)",
        "select field_trips.fieldtripname , stops.stoplocation from Field_Trips_Stops join Stops on Field_Trips_Stops.stopID = Stops.stopID join Field_Trips on Field_Trips_Stops.tripID = Field_Trips.tripID"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List all stop locations associated with each tripID in the Field_Trips_Stops table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FT.tripID, S.stopLocation\nFROM Field_Trips_Stops FT\nJOIN Stops S ON FT.stopID = S.stopID"
          ]
        },
        {
          "interpretation": "Retrieve the names of all Stops visited for each FieldTrip using the corresponding tripID in both Field_Trips and Field_Trips_Stops tables.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Field_Trips.fieldTripName, Stops.stopLocation\nFROM Field_Trips\nJOIN Field_Trips_Stops ON Field_Trips.tripID = Field_Trips_Stops.tripID\nJOIN Stops ON Field_Trips_Stops.stopID = Stops.stopID"
          ]
        },
        {
          "interpretation": "Determine the stopLocation for every stopID linked to each field trip via the tripID.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FT.fieldTripName, S.stopID, S.stopLocation\nFROM Field_Trips FT\nJOIN Field_Trips_Stops FTS ON FT.tripID = FTS.tripID\nJOIN Stops S ON FTS.stopID = S.stopID"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.3333333333333333,
        "f1_score": 0.4,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Education/scope_field_trips_stops/scope_field_trips_stops.sqlite",
      "db_dump": "CREATE TABLE Field_Trips(\n    tripID INTEGER PRIMARY KEY,\n    fieldTripName TEXT,\n    date DATE);\nCREATE TABLE Field_Trips_Stops(\n    tripID INTEGER REFERENCES Field_Trips(tripID),\n    stopID INTEGER REFERENCES Stops(stopID));\nCREATE TABLE Field_Trips_Students(\n    tripID INTEGER REFERENCES Field_Trips(tripID),\n    studentID INTEGER REFERENCES Students(studentID));\nCREATE TABLE Field_Trips_Teachers(\n    tripID INTEGER REFERENCES Field_Trips(tripID),\n    teacherID INTEGER REFERENCES Teachers(teacherID));\nCREATE TABLE Stops(\n    stopID INTEGER PRIMARY KEY,\n    stopLocation TEXT);\nCREATE TABLE Students(\n    studentID INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT);\nCREATE TABLE Teachers(\n    teacherID INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT);\n\nINSERT INTO \"Field_Trips\" (tripID,fieldTripName,date) VALUES (1,'Educational Trip','2021-09-01'),(2,'Scientific Excursion','2021-08-30'),(3,'Nature Adventure','2021-07-25'),(4,'Historical Tour','2021-06-10'),(5,'Art Exhibition','2021-05-01');\nINSERT INTO \"Field_Trips_Stops\" (tripID,stopID) VALUES (1,1),(1,2),(5,5),(3,3),(4,4),(2,2),(3,2),(4,2),(5,2);\nINSERT INTO \"Field_Trips_Students\" (tripID,studentID) VALUES (1,1),(1,2),(2,3),(2,4),(3,5);\nINSERT INTO \"Field_Trips_Teachers\" (tripID,teacherID) VALUES (1,1),(2,2),(3,3),(4,4),(5,5);\nINSERT INTO \"Stops\" (stopID,stopLocation) VALUES (1,'Zoo'),(2,'Museum'),(3,'Botanical Garden'),(4,'Planetarium'),(5,'National Park');\nINSERT INTO \"Students\" (studentID,firstName,lastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Alice','Brown'),(4,'Tom','Johnson'),(5,'Emma','Wilson');\nINSERT INTO \"Teachers\" (teacherID,firstName,lastName) VALUES (1,'Mr.','White'),(2,'Ms.','Black'),(3,'Dr.','Green'),(4,'Professor','Blue'),(5,'Assistant','Red');\n",
      "question": "For every field trip, provide the corresponding stop locations.",
      "gold_queries": [
        "select field_trips.fieldtripname , stops.stoplocation from Field_Trips_Stops join Stops on Field_Trips_Stops.stopID = Stops.stopID join Field_Trips on Field_Trips_Stops.tripID = Field_Trips.tripID"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Generate a report mapping each field trip to its associated stop locations.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT T1.fieldTripName, T3.stopLocation\nFROM Field_Trips AS T1\nJOIN Field_Trips_Stops AS T2 ON T1.tripID = T2.tripID\nJOIN Stops AS T3 ON T2.stopID = T3.stopID"
          ]
        },
        {
          "interpretation": "List all field trip IDs and the locations of all stops associated with each trip.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FT.tripID, S.stopLocation\nFROM Field_Trips_Stops FTS\nJOIN Stops S ON FTS.stopID = S.stopID\nJOIN Field_Trips FT ON FTS.tripID = FT.tripID"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Education/scope_field_trips_stops/scope_field_trips_stops.sqlite",
      "db_dump": "CREATE TABLE Field_Trips(\n    tripID INTEGER PRIMARY KEY,\n    fieldTripName TEXT,\n    date DATE);\nCREATE TABLE Field_Trips_Stops(\n    tripID INTEGER REFERENCES Field_Trips(tripID),\n    stopID INTEGER REFERENCES Stops(stopID));\nCREATE TABLE Field_Trips_Students(\n    tripID INTEGER REFERENCES Field_Trips(tripID),\n    studentID INTEGER REFERENCES Students(studentID));\nCREATE TABLE Field_Trips_Teachers(\n    tripID INTEGER REFERENCES Field_Trips(tripID),\n    teacherID INTEGER REFERENCES Teachers(teacherID));\nCREATE TABLE Stops(\n    stopID INTEGER PRIMARY KEY,\n    stopLocation TEXT);\nCREATE TABLE Students(\n    studentID INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT);\nCREATE TABLE Teachers(\n    teacherID INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT);\n\nINSERT INTO \"Field_Trips\" (tripID,fieldTripName,date) VALUES (1,'Educational Trip','2021-09-01'),(2,'Scientific Excursion','2021-08-30'),(3,'Nature Adventure','2021-07-25'),(4,'Historical Tour','2021-06-10'),(5,'Art Exhibition','2021-05-01');\nINSERT INTO \"Field_Trips_Stops\" (tripID,stopID) VALUES (1,1),(1,2),(5,5),(3,3),(4,4),(2,2),(3,2),(4,2),(5,2);\nINSERT INTO \"Field_Trips_Students\" (tripID,studentID) VALUES (1,1),(1,2),(2,3),(2,4),(3,5);\nINSERT INTO \"Field_Trips_Teachers\" (tripID,teacherID) VALUES (1,1),(2,2),(3,3),(4,4),(5,5);\nINSERT INTO \"Stops\" (stopID,stopLocation) VALUES (1,'Zoo'),(2,'Museum'),(3,'Botanical Garden'),(4,'Planetarium'),(5,'National Park');\nINSERT INTO \"Students\" (studentID,firstName,lastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Alice','Brown'),(4,'Tom','Johnson'),(5,'Emma','Wilson');\nINSERT INTO \"Teachers\" (teacherID,firstName,lastName) VALUES (1,'Mr.','White'),(2,'Ms.','Black'),(3,'Dr.','Green'),(4,'Professor','Blue'),(5,'Assistant','Red');\n",
      "question": "Show me the stop location that is common for all field trips.",
      "gold_queries": [
        "SELECT Stops.stopLocation  from Field_Trips_Stops join Stops on Field_Trips_Stops.stopID = Stops.stopID join Field_Trips on Field_Trips_Stops.tripID = Field_Trips.tripID   GROUP BY Field_Trips_Stops.stopID HAVING COUNT(DISTINCT Field_Trips_Stops.tripID) = (SELECT COUNT(*) FROM  Field_Trips)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Identify the stop location visited by the majority of students across all field trips.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT S.stopLocation \nFROM Stops S \nJOIN Field_Trips_Stops FTS ON S.stopID = FTS.stopID \nJOIN Field_Trips_Students FTS2 ON FTS.tripID = FTS2.tripID \nGROUP BY S.stopLocation \nORDER BY COUNT(*) DESC \nLIMIT 1"
          ]
        },
        {
          "interpretation": "Determine the stop location visited by at least one teacher during each field trip.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ft.fieldTripName, s.stopLocation\nFROM Field_Trips ft\nJOIN Field_Trips_Stops fts ON ft.tripID = fts.tripID\nJOIN Stops s ON fts.stopID = s.stopID\nWHERE fts.stopID IN (\n    SELECT fts.stopID\n    FROM Field_Trips_Stops fts\n    JOIN Field_Trips_Teachers ftt ON fts.tripID = ftt.tripID\n)"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Education/scope_college_campuses_buildings/scope_college_campuses_buildings.sqlite",
      "db_dump": "CREATE TABLE Buildings(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT,\n    description TEXT);\nCREATE TABLE College_Campuses(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT);\nCREATE TABLE College_Campuses_Buildings(\n    PRIMARY KEY (campusId, buildingId));\n\nINSERT INTO \"Buildings\" (id,type,description) VALUES (1,'Library','A place where books and resources are stored.'),(2,'Administration Building','The main office building on campus.'),(3,'Lecture Hall','Large rooms used for lectures and presentations.'),(4,'Dormitory','Residential living space for students.'),(5,'Gymnasium','Facility for sports activities.');\nINSERT INTO \"College_Campuses\" (id,name,location) VALUES (1,'Harvard University','Cambridge, MA'),(2,'Stanford University','Stanford, CA'),(3,'University of California Berkeley','Berkeley, CA'),(4,'Massachusetts Institute of Technology','Cambridge, MA'),(5,'California Institute of Technology','Pasadena, CA');\nINSERT INTO \"College_Campuses_Buildings\" (campusId,buildingId) VALUES (1,1),(1,2),(2,1),(2,3),(3,1),(4,1),(5,1);\n",
      "question": "For every college campus list all of the associated building descriptions.",
      "gold_queries": [
        "select college_campuses.name , buildings.description from College_Campuses_Buildings join Buildings on College_Campuses_Buildings.buildingId = Buildings.id join College_Campuses on College_Campuses_Buildings.campusId = College_Campuses.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List every building description for every campus, separated by some delimiter.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT CC.name, GROUP_CONCAT(B.description, '|') AS building_descriptions\nFROM College_Campuses CC\nJOIN College_Campuses_Buildings CCB ON CC.id = CCB.campusId\nJOIN Buildings B ON CCB.buildingId = B.id\nGROUP BY CC.name"
          ]
        },
        {
          "interpretation": "Output a single sentence for each campus, containing the campus name and a comma-separated list of building descriptions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT CC.name, GROUP_CONCAT(B.description, ', ') AS buildings\nFROM College_Campuses CC\nJOIN College_Campuses_Buildings CCB ON CC.id = CCB.campusId\nJOIN Buildings B ON CCB.buildingId = B.id\nGROUP BY CC.id"
          ]
        },
        {
          "interpretation": "Display a table with columns for \"campus name\" and \"building descriptions\", listing all campuses and their associated building descriptions.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT College_Campuses.name, Buildings.description \nFROM College_Campuses \nJOIN College_Campuses_Buildings ON College_Campuses.id = College_Campuses_Buildings.campusId \nJOIN Buildings ON College_Campuses_Buildings.buildingId = Buildings.id"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Education/scope_college_campuses_buildings/scope_college_campuses_buildings.sqlite",
      "db_dump": "CREATE TABLE Buildings(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT,\n    description TEXT);\nCREATE TABLE College_Campuses(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT);\nCREATE TABLE College_Campuses_Buildings(\n    PRIMARY KEY (campusId, buildingId));\n\nINSERT INTO \"Buildings\" (id,type,description) VALUES (1,'Library','A place where books and resources are stored.'),(2,'Administration Building','The main office building on campus.'),(3,'Lecture Hall','Large rooms used for lectures and presentations.'),(4,'Dormitory','Residential living space for students.'),(5,'Gymnasium','Facility for sports activities.');\nINSERT INTO \"College_Campuses\" (id,name,location) VALUES (1,'Harvard University','Cambridge, MA'),(2,'Stanford University','Stanford, CA'),(3,'University of California Berkeley','Berkeley, CA'),(4,'Massachusetts Institute of Technology','Cambridge, MA'),(5,'California Institute of Technology','Pasadena, CA');\nINSERT INTO \"College_Campuses_Buildings\" (campusId,buildingId) VALUES (1,1),(1,2),(2,1),(2,3),(3,1),(4,1),(5,1);\n",
      "question": "Give me the types of building that every college campus has and their descriptions.",
      "gold_queries": [
        "SELECT Buildings.type, Buildings.description  from College_Campuses_Buildings join Buildings on College_Campuses_Buildings.buildingId = Buildings.id join College_Campuses on College_Campuses_Buildings.campusId = College_Campuses.id   GROUP BY College_Campuses_Buildings.buildingId HAVING COUNT(DISTINCT College_Campuses_Buildings.campusId) = (SELECT COUNT(*) FROM  College_Campuses)",
        "select college_campuses.name , buildings.type , buildings.description from College_Campuses_Buildings join Buildings on College_Campuses_Buildings.buildingId = Buildings.id join College_Campuses on College_Campuses_Buildings.campusId = College_Campuses.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Retrieve all building types regardless of campus and associate them with descriptions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT type, description FROM Buildings"
          ]
        },
        {
          "interpretation": "For each campus, determine the types of buildings present and access their descriptions.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT CC.name, B.type, B.description\nFROM College_Campuses_Buildings AS CCB\nJOIN College_Campuses AS CC ON CCB.campusId = CC.id\nJOIN Buildings AS B ON CCB.buildingId = B.id"
          ]
        },
        {
          "interpretation": "Find the minimal set of building types that are present on every campus and display their descriptions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT B.description\nFROM Buildings B\nWHERE B.type IN (\n    SELECT CB.buildingId\n    FROM College_Campuses_Buildings CB\n    GROUP BY CB.buildingId\n    HAVING COUNT(DISTINCT CB.campusId) = (SELECT COUNT(*) FROM College_Campuses)\n)"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.3333333333333333,
        "f1_score": 0.4,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Education/scope_college_campuses_buildings/scope_college_campuses_buildings.sqlite",
      "db_dump": "CREATE TABLE Buildings(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT,\n    description TEXT);\nCREATE TABLE College_Campuses(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT);\nCREATE TABLE College_Campuses_Buildings(\n    PRIMARY KEY (campusId, buildingId));\n\nINSERT INTO \"Buildings\" (id,type,description) VALUES (1,'Library','A place where books and resources are stored.'),(2,'Administration Building','The main office building on campus.'),(3,'Lecture Hall','Large rooms used for lectures and presentations.'),(4,'Dormitory','Residential living space for students.'),(5,'Gymnasium','Facility for sports activities.');\nINSERT INTO \"College_Campuses\" (id,name,location) VALUES (1,'Harvard University','Cambridge, MA'),(2,'Stanford University','Stanford, CA'),(3,'University of California Berkeley','Berkeley, CA'),(4,'Massachusetts Institute of Technology','Cambridge, MA'),(5,'California Institute of Technology','Pasadena, CA');\nINSERT INTO \"College_Campuses_Buildings\" (campusId,buildingId) VALUES (1,1),(1,2),(2,1),(2,3),(3,1),(4,1),(5,1);\n",
      "question": "List the building description for every college campus.",
      "gold_queries": [
        "SELECT Buildings.description  from College_Campuses_Buildings join Buildings on College_Campuses_Buildings.buildingId = Buildings.id join College_Campuses on College_Campuses_Buildings.campusId = College_Campuses.id   GROUP BY College_Campuses_Buildings.buildingId HAVING COUNT(DISTINCT College_Campuses_Buildings.campusId) = (SELECT COUNT(*) FROM  College_Campuses)",
        "select college_campuses.name , buildings.description from College_Campuses_Buildings join Buildings on College_Campuses_Buildings.buildingId = Buildings.id join College_Campuses on College_Campuses_Buildings.campusId = College_Campuses.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For each college campus, show the description of its buildings.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.name, T3.description FROM College_Campuses_Buildings AS T1 JOIN College_Campuses AS T2 ON T1.campusId = T2.id JOIN Buildings AS T3 ON T1.buildingId = T3.id"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 1.0,
        "f1_score": 0.6666666666666666,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Education/scope_college_campuses_buildings/scope_college_campuses_buildings.sqlite",
      "db_dump": "CREATE TABLE Buildings(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT,\n    description TEXT);\nCREATE TABLE College_Campuses(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT);\nCREATE TABLE College_Campuses_Buildings(\n    PRIMARY KEY (campusId, buildingId));\n\nINSERT INTO \"Buildings\" (id,type,description) VALUES (1,'Library','A place where books and resources are stored.'),(2,'Administration Building','The main office building on campus.'),(3,'Lecture Hall','Large rooms used for lectures and presentations.'),(4,'Dormitory','Residential living space for students.'),(5,'Gymnasium','Facility for sports activities.');\nINSERT INTO \"College_Campuses\" (id,name,location) VALUES (1,'Harvard University','Cambridge, MA'),(2,'Stanford University','Stanford, CA'),(3,'University of California Berkeley','Berkeley, CA'),(4,'Massachusetts Institute of Technology','Cambridge, MA'),(5,'California Institute of Technology','Pasadena, CA');\nINSERT INTO \"College_Campuses_Buildings\" (campusId,buildingId) VALUES (1,1),(1,2),(2,1),(2,3),(3,1),(4,1),(5,1);\n",
      "question": "List the building descriptions that appear against every unique college campus at least once.",
      "gold_queries": [
        "SELECT Buildings.description  from College_Campuses_Buildings join Buildings on College_Campuses_Buildings.buildingId = Buildings.id join College_Campuses on College_Campuses_Buildings.campusId = College_Campuses.id   GROUP BY College_Campuses_Buildings.buildingId HAVING COUNT(DISTINCT College_Campuses_Buildings.campusId) = (SELECT COUNT(*) FROM  College_Campuses)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Retrieve all unique buildings that are associated with every distinct college campus, including their descriptions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT B.type, B.description\nFROM Buildings B\nJOIN College_Campuses_Buildings CCB ON B.id = CCB.buildingId"
          ]
        },
        {
          "interpretation": "Identify building descriptions found in the dataset that are linked to each different college campus.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT CC.name, B.description \nFROM College_Campuses_Buildings AS CCB \nJOIN College_Campuses AS CC ON CCB.campusId = CC.id \nJOIN Buildings AS B ON CCB.buildingId = B.id"
          ]
        },
        {
          "interpretation": "Find the building descriptions present for all campuses.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT B.description \nFROM Buildings B \nWHERE NOT EXISTS (\n    SELECT 1 \n    FROM College_Campuses C \n    WHERE NOT EXISTS (\n        SELECT 1 \n        FROM College_Campuses_Buildings CCB \n        WHERE CCB.campusId = C.id AND CCB.buildingId = B.id\n    )\n)"
          ]
        },
        {
          "interpretation": "List building descriptions present in every unique college campus.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT B.description\nFROM Buildings B\nWHERE NOT EXISTS (\n    SELECT 1\n    FROM College_Campuses C\n    LEFT JOIN College_Campuses_Buildings CCB ON C.id = CCB.campusId\n    WHERE CCB.buildingId IS NULL OR CCB.buildingId != B.id\n)"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Education/scope_college_campuses_buildings/scope_college_campuses_buildings.sqlite",
      "db_dump": "CREATE TABLE Buildings(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT,\n    description TEXT);\nCREATE TABLE College_Campuses(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT);\nCREATE TABLE College_Campuses_Buildings(\n    PRIMARY KEY (campusId, buildingId));\n\nINSERT INTO \"Buildings\" (id,type,description) VALUES (1,'Library','A place where books and resources are stored.'),(2,'Administration Building','The main office building on campus.'),(3,'Lecture Hall','Large rooms used for lectures and presentations.'),(4,'Dormitory','Residential living space for students.'),(5,'Gymnasium','Facility for sports activities.');\nINSERT INTO \"College_Campuses\" (id,name,location) VALUES (1,'Harvard University','Cambridge, MA'),(2,'Stanford University','Stanford, CA'),(3,'University of California Berkeley','Berkeley, CA'),(4,'Massachusetts Institute of Technology','Cambridge, MA'),(5,'California Institute of Technology','Pasadena, CA');\nINSERT INTO \"College_Campuses_Buildings\" (campusId,buildingId) VALUES (1,1),(1,2),(2,1),(2,3),(3,1),(4,1),(5,1);\n",
      "question": "For every college campus, show the types of building they have and their descriptions.",
      "gold_queries": [
        "select college_campuses.name , buildings.type , buildings.description from College_Campuses_Buildings join Buildings on College_Campuses_Buildings.buildingId = Buildings.id join College_Campuses on College_Campuses_Buildings.campusId = College_Campuses.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For each campus, display a list of building types found on that campus and their respective descriptions.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT C.name, B.type, B.description\nFROM College_Campuses C\nJOIN College_Campuses_Buildings CCB ON C.id = CCB.campusId\nJOIN Buildings B ON CCB.buildingId = B.id"
          ]
        },
        {
          "interpretation": "List the unique building types present across all campuses, along with their corresponding descriptions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT type, description FROM Buildings"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Education/scope_college_campuses_buildings/scope_college_campuses_buildings.sqlite",
      "db_dump": "CREATE TABLE Buildings(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT,\n    description TEXT);\nCREATE TABLE College_Campuses(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT);\nCREATE TABLE College_Campuses_Buildings(\n    PRIMARY KEY (campusId, buildingId));\n\nINSERT INTO \"Buildings\" (id,type,description) VALUES (1,'Library','A place where books and resources are stored.'),(2,'Administration Building','The main office building on campus.'),(3,'Lecture Hall','Large rooms used for lectures and presentations.'),(4,'Dormitory','Residential living space for students.'),(5,'Gymnasium','Facility for sports activities.');\nINSERT INTO \"College_Campuses\" (id,name,location) VALUES (1,'Harvard University','Cambridge, MA'),(2,'Stanford University','Stanford, CA'),(3,'University of California Berkeley','Berkeley, CA'),(4,'Massachusetts Institute of Technology','Cambridge, MA'),(5,'California Institute of Technology','Pasadena, CA');\nINSERT INTO \"College_Campuses_Buildings\" (campusId,buildingId) VALUES (1,1),(1,2),(2,1),(2,3),(3,1),(4,1),(5,1);\n",
      "question": "Which types of building do all college campuses have in common and what are their descriptions?",
      "gold_queries": [
        "SELECT Buildings.type, Buildings.description  from College_Campuses_Buildings join Buildings on College_Campuses_Buildings.buildingId = Buildings.id join College_Campuses on College_Campuses_Buildings.campusId = College_Campuses.id   GROUP BY College_Campuses_Buildings.buildingId HAVING COUNT(DISTINCT College_Campuses_Buildings.campusId) = (SELECT COUNT(*) FROM  College_Campuses)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What are the building types shared by all college campuses in the database and their descriptions?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT B.type, B.description\nFROM Buildings B\nWHERE NOT EXISTS (\n    SELECT C.id\n    FROM College_Campuses C\n    WHERE NOT EXISTS (\n        SELECT *\n        FROM College_Campuses_Buildings CCB\n        WHERE CCB.campusId = C.id AND CCB.buildingId = B.id\n    )\n)"
          ]
        },
        {
          "interpretation": "For each building type found in all college campuses, what is its description?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT type, description FROM Buildings"
          ]
        },
        {
          "interpretation": "It is possible to get numerical information or textual cooccurences related to a building type across all campuses that may be interpreted as \"shared.\"",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT b.type, COUNT(campusId) AS shared_count\nFROM Buildings b\nJOIN College_Campuses_Buildings ccb ON b.id = ccb.buildingId\nGROUP BY b.type\nHAVING shared_count > 1"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Education/scope_college_campuses_buildings/scope_college_campuses_buildings.sqlite",
      "db_dump": "CREATE TABLE Buildings(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT,\n    description TEXT);\nCREATE TABLE College_Campuses(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT);\nCREATE TABLE College_Campuses_Buildings(\n    PRIMARY KEY (campusId, buildingId));\n\nINSERT INTO \"Buildings\" (id,type,description) VALUES (1,'Library','A place where books and resources are stored.'),(2,'Administration Building','The main office building on campus.'),(3,'Lecture Hall','Large rooms used for lectures and presentations.'),(4,'Dormitory','Residential living space for students.'),(5,'Gymnasium','Facility for sports activities.');\nINSERT INTO \"College_Campuses\" (id,name,location) VALUES (1,'Harvard University','Cambridge, MA'),(2,'Stanford University','Stanford, CA'),(3,'University of California Berkeley','Berkeley, CA'),(4,'Massachusetts Institute of Technology','Cambridge, MA'),(5,'California Institute of Technology','Pasadena, CA');\nINSERT INTO \"College_Campuses_Buildings\" (campusId,buildingId) VALUES (1,1),(1,2),(2,1),(2,3),(3,1),(4,1),(5,1);\n",
      "question": "Show me a list of buildings that are available at each specific campus",
      "gold_queries": [
        "select college_campuses.name , buildings.type from College_Campuses_Buildings join Buildings on College_Campuses_Buildings.buildingId = Buildings.id join College_Campuses on College_Campuses_Buildings.campusId = College_Campuses.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Display a table showing the name of each campus and a list of building descriptions found on that campus.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT c.name, b.description \nFROM College_Campuses c \nJOIN College_Campuses_Buildings cb ON c.id = cb.campusId \nJOIN Buildings b ON cb.buildingId = b.id"
          ]
        },
        {
          "interpretation": "For each campus, list the building IDs that are associated with it.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT campusId, buildingId FROM College_Campuses_Buildings"
          ]
        },
        {
          "interpretation": "Provide a list of building types found at each college campus.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT T2.name, T1.type\nFROM Buildings AS T1\nJOIN College_Campuses_Buildings AS T3 ON T1.id = T3.buildingId\nJOIN College_Campuses AS T2 ON T3.campusId = T2.id"
          ]
        },
        {
          "interpretation": "List all buildings present in the College_Campuses_Buildings table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT buildingId FROM College_Campuses_Buildings"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Education/scope_college_campuses_buildings/scope_college_campuses_buildings.sqlite",
      "db_dump": "CREATE TABLE Buildings(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT,\n    description TEXT);\nCREATE TABLE College_Campuses(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT);\nCREATE TABLE College_Campuses_Buildings(\n    PRIMARY KEY (campusId, buildingId));\n\nINSERT INTO \"Buildings\" (id,type,description) VALUES (1,'Library','A place where books and resources are stored.'),(2,'Administration Building','The main office building on campus.'),(3,'Lecture Hall','Large rooms used for lectures and presentations.'),(4,'Dormitory','Residential living space for students.'),(5,'Gymnasium','Facility for sports activities.');\nINSERT INTO \"College_Campuses\" (id,name,location) VALUES (1,'Harvard University','Cambridge, MA'),(2,'Stanford University','Stanford, CA'),(3,'University of California Berkeley','Berkeley, CA'),(4,'Massachusetts Institute of Technology','Cambridge, MA'),(5,'California Institute of Technology','Pasadena, CA');\nINSERT INTO \"College_Campuses_Buildings\" (campusId,buildingId) VALUES (1,1),(1,2),(2,1),(2,3),(3,1),(4,1),(5,1);\n",
      "question": "Show me a list of buildings that are used at multiple of our campuses",
      "gold_queries": [
        "SELECT Buildings.type  from College_Campuses_Buildings join Buildings on College_Campuses_Buildings.buildingId = Buildings.id join College_Campuses on College_Campuses_Buildings.campusId = College_Campuses.id   GROUP BY College_Campuses_Buildings.buildingId HAVING COUNT(DISTINCT College_Campuses_Buildings.campusId) = (SELECT COUNT(*) FROM  College_Campuses)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Show me buildings used at multiple campuses.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT b.id, b.type, b.description\nFROM Buildings b\nJOIN College_Campuses_Buildings ccb ON b.id = ccb.buildingId\nGROUP BY b.id\nHAVING COUNT(ccb.campusId) > 1"
          ]
        },
        {
          "interpretation": "Return a list of buildings located at multiple campuses.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT B.type\nFROM Buildings B\nJOIN College_Campuses_Buildings CCB ON B.id = CCB.buildingId\nGROUP BY B.id\nHAVING COUNT(DISTINCT CCB.campusId) > 1"
          ]
        },
        {
          "interpretation": "Retrieve buildings spanning various campuses.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT B.id, B.type, B.description\nFROM Buildings B\nJOIN College_Campuses_Buildings CCB ON B.id = CCB.buildingId"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Education/scope_college_campuses_buildings/scope_college_campuses_buildings.sqlite",
      "db_dump": "CREATE TABLE Buildings(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT,\n    description TEXT);\nCREATE TABLE College_Campuses(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT);\nCREATE TABLE College_Campuses_Buildings(\n    PRIMARY KEY (campusId, buildingId));\n\nINSERT INTO \"Buildings\" (id,type,description) VALUES (1,'Library','A place where books and resources are stored.'),(2,'Administration Building','The main office building on campus.'),(3,'Lecture Hall','Large rooms used for lectures and presentations.'),(4,'Dormitory','Residential living space for students.'),(5,'Gymnasium','Facility for sports activities.');\nINSERT INTO \"College_Campuses\" (id,name,location) VALUES (1,'Harvard University','Cambridge, MA'),(2,'Stanford University','Stanford, CA'),(3,'University of California Berkeley','Berkeley, CA'),(4,'Massachusetts Institute of Technology','Cambridge, MA'),(5,'California Institute of Technology','Pasadena, CA');\nINSERT INTO \"College_Campuses_Buildings\" (campusId,buildingId) VALUES (1,1),(1,2),(2,1),(2,3),(3,1),(4,1),(5,1);\n",
      "question": "Give a list of buildings at our campuses",
      "gold_queries": [
        "SELECT Buildings.type  from College_Campuses_Buildings join Buildings on College_Campuses_Buildings.buildingId = Buildings.id join College_Campuses on College_Campuses_Buildings.campusId = College_Campuses.id   GROUP BY College_Campuses_Buildings.buildingId HAVING COUNT(DISTINCT College_Campuses_Buildings.campusId) = (SELECT COUNT(*) FROM  College_Campuses)",
        "select college_campuses.name , buildings.type from College_Campuses_Buildings join Buildings on College_Campuses_Buildings.buildingId = Buildings.id join College_Campuses on College_Campuses_Buildings.campusId = College_Campuses.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List the descriptions of all buildings present in the Buildings table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT description FROM Buildings"
          ]
        },
        {
          "interpretation": "List all buildings in the Buildings table that have a corresponding entry in the College_Campuses_Buildings table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT b.id, b.type, b.description \nFROM Buildings b \nJOIN College_Campuses_Buildings ccb ON b.id = ccb.buildingId"
          ]
        },
        {
          "interpretation": "Identify all distinct building types present in the Buildings table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT type FROM Buildings"
          ]
        },
        {
          "interpretation": "List all buildings in the College_Campuses_Buildings table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT buildingId FROM College_Campuses_Buildings"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Entertainment/scope_festivals_events/scope_festivals_events.sqlite",
      "db_dump": "CREATE TABLE Events(\n    EventTypeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    EventName TEXT,\n    Description TEXT);\nCREATE TABLE Festivals(\n    FestivalID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Location TEXT);\nCREATE TABLE Festivals_Events(\n    FestivalID INTEGER,\n    EventTypeID INTEGER,\n    FOREIGN KEY (FestivalID) REFERENCES Festivals(FestivalID),\n    FOREIGN KEY (EventTypeID) REFERENCES Events(EventTypeID));\n\nINSERT INTO \"Events\" (EventTypeID,EventName,Description) VALUES (1,'Parade','A colorful procession featuring floats, music and dancers.'),(2,'Fireworks Show','An impressive display of fireworks celebrating the festival.'),(4,'Street Performances','Actors, musicians, acrobats and magicians entertain crowds on the streets.'),(5,'Art Exhibitions','Exhibits showcasing traditional and contemporary art from various cultures.');\nINSERT INTO \"Festivals\" (FestivalID,Name,Location) VALUES (1,'Carnival','Rio de Janeiro'),(2,'Mardi Gras','New Orleans'),(3,'Oktoberfest','Munich'),(4,'Diwali','Varanasi'),(5,'Tomatina','Buenoaia y Foca');\nINSERT INTO \"Festivals_Events\" (FestivalID,EventTypeID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\n",
      "question": "What description of events is associated with each festival?",
      "gold_queries": [
        "SELECT Events.Description  from Festivals_Events join Events on Festivals_Events.EventTypeID = Events.EventTypeID join Festivals on Festivals_Events.FestivalID = Festivals.FestivalID   GROUP BY Festivals_Events.EventTypeID HAVING COUNT(DISTINCT Festivals_Events.FestivalID) = (SELECT COUNT(*) FROM  Festivals)",
        "select festivals.name , events.description from Festivals_Events join Events on Festivals_Events.EventTypeID = Events.EventTypeID join Festivals on Festivals_Events.FestivalID = Festivals.FestivalID"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Which Events records are related to each Festival record?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Festivals.Name, Events.EventName\nFROM Festivals\nJOIN Festivals_Events ON Festivals.FestivalID = Festivals_Events.FestivalID\nJOIN Events ON Festivals_Events.EventTypeID = Events.EventTypeID"
          ]
        },
        {
          "interpretation": "Output a list of festivals and their corresponding event descriptions.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Festivals.Name, Events.Description \nFROM Festivals \nJOIN Festivals_Events ON Festivals.FestivalID = Festivals_Events.FestivalID \nJOIN Events ON Festivals_Events.EventTypeID = Events.EventTypeID"
          ]
        },
        {
          "interpretation": "What text description is provided for each event type present at each festival?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Festivals.Name AS FestivalName, Events.EventName, Events.Description\nFROM Festivals\nJOIN Festivals_Events ON Festivals.FestivalID = Festivals_Events.FestivalID\nJOIN Events ON Festivals_Events.EventTypeID = Events.EventTypeID"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.3333333333333333,
        "f1_score": 0.4,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Entertainment/scope_festivals_events/scope_festivals_events.sqlite",
      "db_dump": "CREATE TABLE Events(\n    EventTypeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    EventName TEXT,\n    Description TEXT);\nCREATE TABLE Festivals(\n    FestivalID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Location TEXT);\nCREATE TABLE Festivals_Events(\n    FestivalID INTEGER,\n    EventTypeID INTEGER,\n    FOREIGN KEY (FestivalID) REFERENCES Festivals(FestivalID),\n    FOREIGN KEY (EventTypeID) REFERENCES Events(EventTypeID));\n\nINSERT INTO \"Events\" (EventTypeID,EventName,Description) VALUES (1,'Parade','A colorful procession featuring floats, music and dancers.'),(2,'Fireworks Show','An impressive display of fireworks celebrating the festival.'),(4,'Street Performances','Actors, musicians, acrobats and magicians entertain crowds on the streets.'),(5,'Art Exhibitions','Exhibits showcasing traditional and contemporary art from various cultures.');\nINSERT INTO \"Festivals\" (FestivalID,Name,Location) VALUES (1,'Carnival','Rio de Janeiro'),(2,'Mardi Gras','New Orleans'),(3,'Oktoberfest','Munich'),(4,'Diwali','Varanasi'),(5,'Tomatina','Buenoaia y Foca');\nINSERT INTO \"Festivals_Events\" (FestivalID,EventTypeID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\n",
      "question": "Show me the name and description of the events that every festival has",
      "gold_queries": [
        "SELECT Events.EventName, Events.Description  from Festivals_Events join Events on Festivals_Events.EventTypeID = Events.EventTypeID join Festivals on Festivals_Events.FestivalID = Festivals.FestivalID   GROUP BY Festivals_Events.EventTypeID HAVING COUNT(DISTINCT Festivals_Events.FestivalID) = (SELECT COUNT(*) FROM  Festivals)",
        "select festivals.name , events.eventname , events.description from Festivals_Events join Events on Festivals_Events.EventTypeID = Events.EventTypeID join Festivals on Festivals_Events.FestivalID = Festivals.FestivalID"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For each festival, retrieve the names and descriptions of all events connected to it through the Festivals_Events table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT F.Name, E.Description\nFROM Festivals F\nJOIN Festivals_Events FE ON F.FestivalID = FE.FestivalID\nJOIN Events E ON FE.EventTypeID = E.EventTypeID"
          ]
        },
        {
          "interpretation": "Return a table showing the name of each festival and a list of the corresponding event names and descriptions.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT F.Name, E.EventName, E.Description\nFROM Festivals F\nJOIN Festivals_Events FE ON F.FestivalID = FE.FestivalID\nJOIN Events E ON FE.EventTypeID = E.EventTypeID"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.5,
        "f1_score": 0.5,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Entertainment/scope_festivals_events/scope_festivals_events.sqlite",
      "db_dump": "CREATE TABLE Events(\n    EventTypeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    EventName TEXT,\n    Description TEXT);\nCREATE TABLE Festivals(\n    FestivalID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Location TEXT);\nCREATE TABLE Festivals_Events(\n    FestivalID INTEGER,\n    EventTypeID INTEGER,\n    FOREIGN KEY (FestivalID) REFERENCES Festivals(FestivalID),\n    FOREIGN KEY (EventTypeID) REFERENCES Events(EventTypeID));\n\nINSERT INTO \"Events\" (EventTypeID,EventName,Description) VALUES (1,'Parade','A colorful procession featuring floats, music and dancers.'),(2,'Fireworks Show','An impressive display of fireworks celebrating the festival.'),(4,'Street Performances','Actors, musicians, acrobats and magicians entertain crowds on the streets.'),(5,'Art Exhibitions','Exhibits showcasing traditional and contemporary art from various cultures.');\nINSERT INTO \"Festivals\" (FestivalID,Name,Location) VALUES (1,'Carnival','Rio de Janeiro'),(2,'Mardi Gras','New Orleans'),(3,'Oktoberfest','Munich'),(4,'Diwali','Varanasi'),(5,'Tomatina','Buenoaia y Foca');\nINSERT INTO \"Festivals_Events\" (FestivalID,EventTypeID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\n",
      "question": "What events can I see at each festival?",
      "gold_queries": [
        "SELECT Events.EventName  from Festivals_Events join Events on Festivals_Events.EventTypeID = Events.EventTypeID join Festivals on Festivals_Events.FestivalID = Festivals.FestivalID   GROUP BY Festivals_Events.EventTypeID HAVING COUNT(DISTINCT Festivals_Events.FestivalID) = (SELECT COUNT(*) FROM  Festivals)",
        "select festivals.name , events.eventname from Festivals_Events join Events on Festivals_Events.EventTypeID = Events.EventTypeID join Festivals on Festivals_Events.FestivalID = Festivals.FestivalID"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Provide a list of events for every festival mentioned in the database.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Festivals.Name, Events.EventName\nFROM Festivals\nJOIN Festivals_Events ON Festivals.FestivalID = Festivals_Events.FestivalID\nJOIN Events ON Festivals_Events.EventTypeID = Events.EventTypeID"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 1.0,
        "f1_score": 0.6666666666666666,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Entertainment/scope_festivals_events/scope_festivals_events.sqlite",
      "db_dump": "CREATE TABLE Events(\n    EventTypeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    EventName TEXT,\n    Description TEXT);\nCREATE TABLE Festivals(\n    FestivalID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Location TEXT);\nCREATE TABLE Festivals_Events(\n    FestivalID INTEGER,\n    EventTypeID INTEGER,\n    FOREIGN KEY (FestivalID) REFERENCES Festivals(FestivalID),\n    FOREIGN KEY (EventTypeID) REFERENCES Events(EventTypeID));\n\nINSERT INTO \"Events\" (EventTypeID,EventName,Description) VALUES (1,'Parade','A colorful procession featuring floats, music and dancers.'),(2,'Fireworks Show','An impressive display of fireworks celebrating the festival.'),(4,'Street Performances','Actors, musicians, acrobats and magicians entertain crowds on the streets.'),(5,'Art Exhibitions','Exhibits showcasing traditional and contemporary art from various cultures.');\nINSERT INTO \"Festivals\" (FestivalID,Name,Location) VALUES (1,'Carnival','Rio de Janeiro'),(2,'Mardi Gras','New Orleans'),(3,'Oktoberfest','Munich'),(4,'Diwali','Varanasi'),(5,'Tomatina','Buenoaia y Foca');\nINSERT INTO \"Festivals_Events\" (FestivalID,EventTypeID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\n",
      "question": "Please show me the events that all festivals have in common.",
      "gold_queries": [
        "SELECT Events.EventName  from Festivals_Events join Events on Festivals_Events.EventTypeID = Events.EventTypeID join Festivals on Festivals_Events.FestivalID = Festivals.FestivalID   GROUP BY Festivals_Events.EventTypeID HAVING COUNT(DISTINCT Festivals_Events.FestivalID) = (SELECT COUNT(*) FROM  Festivals)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List all EventTypes present in every festival's Festivals_Events table entry.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT EventName FROM Events WHERE EventTypeID IN (SELECT EventTypeID FROM Festivals_Events GROUP BY EventTypeID HAVING COUNT(DISTINCT FestivalID) = (SELECT COUNT(*) FROM Festivals))"
          ]
        },
        {
          "interpretation": "Find the intersection of EventTypes present in different Festivals_Events tables.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT EventTypeID FROM Festivals_Events WHERE FestivalID = 1 INTERSECT SELECT EventTypeID FROM Festivals_Events WHERE FestivalID = 2 INTERSECT SELECT EventTypeID FROM Festivals_Events WHERE FestivalID = 3 INTERSECT SELECT EventTypeID FROM Festivals_Events WHERE FestivalID = 4 INTERSECT SELECT EventTypeID FROM Festivals_Events WHERE FestivalID = 5"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Entertainment/scope_festivals_events/scope_festivals_events.sqlite",
      "db_dump": "CREATE TABLE Events(\n    EventTypeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    EventName TEXT,\n    Description TEXT);\nCREATE TABLE Festivals(\n    FestivalID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Location TEXT);\nCREATE TABLE Festivals_Events(\n    FestivalID INTEGER,\n    EventTypeID INTEGER,\n    FOREIGN KEY (FestivalID) REFERENCES Festivals(FestivalID),\n    FOREIGN KEY (EventTypeID) REFERENCES Events(EventTypeID));\n\nINSERT INTO \"Events\" (EventTypeID,EventName,Description) VALUES (1,'Parade','A colorful procession featuring floats, music and dancers.'),(2,'Fireworks Show','An impressive display of fireworks celebrating the festival.'),(4,'Street Performances','Actors, musicians, acrobats and magicians entertain crowds on the streets.'),(5,'Art Exhibitions','Exhibits showcasing traditional and contemporary art from various cultures.');\nINSERT INTO \"Festivals\" (FestivalID,Name,Location) VALUES (1,'Carnival','Rio de Janeiro'),(2,'Mardi Gras','New Orleans'),(3,'Oktoberfest','Munich'),(4,'Diwali','Varanasi'),(5,'Tomatina','Buenoaia y Foca');\nINSERT INTO \"Festivals_Events\" (FestivalID,EventTypeID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\n",
      "question": "What description of events is common across all festivals?",
      "gold_queries": [
        "SELECT Events.Description  from Festivals_Events join Events on Festivals_Events.EventTypeID = Events.EventTypeID join Festivals on Festivals_Events.FestivalID = Festivals.FestivalID   GROUP BY Festivals_Events.EventTypeID HAVING COUNT(DISTINCT Festivals_Events.FestivalID) = (SELECT COUNT(*) FROM  Festivals)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Is there a shared theme or element present in the descriptions of all festivals?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Description FROM Events WHERE EventTypeID IN (SELECT EventTypeID FROM Festivals_Events) GROUP BY Description HAVING COUNT(*) = (SELECT COUNT(DISTINCT FestivalID) FROM Festivals_Events)"
          ]
        },
        {
          "interpretation": "What event description appears in the description field for all festivals?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Description FROM Events WHERE EventTypeID IN (SELECT EventTypeID FROM Festivals_Events GROUP BY EventTypeID HAVING COUNT(DISTINCT FestivalID) = (SELECT COUNT(*) FROM Festivals))"
          ]
        },
        {
          "interpretation": "What type of event is listed for every festival?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT E.EventName \nFROM Festivals_Events FE \nJOIN Events E ON FE.EventTypeID = E.EventTypeID"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Entertainment/scope_festivals_events/scope_festivals_events.sqlite",
      "db_dump": "CREATE TABLE Events(\n    EventTypeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    EventName TEXT,\n    Description TEXT);\nCREATE TABLE Festivals(\n    FestivalID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Location TEXT);\nCREATE TABLE Festivals_Events(\n    FestivalID INTEGER,\n    EventTypeID INTEGER,\n    FOREIGN KEY (FestivalID) REFERENCES Festivals(FestivalID),\n    FOREIGN KEY (EventTypeID) REFERENCES Events(EventTypeID));\n\nINSERT INTO \"Events\" (EventTypeID,EventName,Description) VALUES (1,'Parade','A colorful procession featuring floats, music and dancers.'),(2,'Fireworks Show','An impressive display of fireworks celebrating the festival.'),(4,'Street Performances','Actors, musicians, acrobats and magicians entertain crowds on the streets.'),(5,'Art Exhibitions','Exhibits showcasing traditional and contemporary art from various cultures.');\nINSERT INTO \"Festivals\" (FestivalID,Name,Location) VALUES (1,'Carnival','Rio de Janeiro'),(2,'Mardi Gras','New Orleans'),(3,'Oktoberfest','Munich'),(4,'Diwali','Varanasi'),(5,'Tomatina','Buenoaia y Foca');\nINSERT INTO \"Festivals_Events\" (FestivalID,EventTypeID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\n",
      "question": "Show me the festivals and the corresponding events.",
      "gold_queries": [
        "select festivals.name , events.eventname from Festivals_Events join Events on Festivals_Events.EventTypeID = Events.EventTypeID join Festivals on Festivals_Events.FestivalID = Festivals.FestivalID"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Select Festivals.Name,Events.EventName",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Festivals.Name, Events.EventName\nFROM Festivals\nJOIN Festivals_Events ON Festivals.FestivalID = Festivals_Events.FestivalID\nJOIN Events ON Festivals_Events.EventTypeID = Events.EventTypeID"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Entertainment/scope_festivals_events/scope_festivals_events.sqlite",
      "db_dump": "CREATE TABLE Events(\n    EventTypeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    EventName TEXT,\n    Description TEXT);\nCREATE TABLE Festivals(\n    FestivalID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Location TEXT);\nCREATE TABLE Festivals_Events(\n    FestivalID INTEGER,\n    EventTypeID INTEGER,\n    FOREIGN KEY (FestivalID) REFERENCES Festivals(FestivalID),\n    FOREIGN KEY (EventTypeID) REFERENCES Events(EventTypeID));\n\nINSERT INTO \"Events\" (EventTypeID,EventName,Description) VALUES (1,'Parade','A colorful procession featuring floats, music and dancers.'),(2,'Fireworks Show','An impressive display of fireworks celebrating the festival.'),(4,'Street Performances','Actors, musicians, acrobats and magicians entertain crowds on the streets.'),(5,'Art Exhibitions','Exhibits showcasing traditional and contemporary art from various cultures.');\nINSERT INTO \"Festivals\" (FestivalID,Name,Location) VALUES (1,'Carnival','Rio de Janeiro'),(2,'Mardi Gras','New Orleans'),(3,'Oktoberfest','Munich'),(4,'Diwali','Varanasi'),(5,'Tomatina','Buenoaia y Foca');\nINSERT INTO \"Festivals_Events\" (FestivalID,EventTypeID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\n",
      "question": "For all festivals, show me the name and description of the events the festival holds",
      "gold_queries": [
        "select festivals.name , events.eventname , events.description from Festivals_Events join Events on Festivals_Events.EventTypeID = Events.EventTypeID join Festivals on Festivals_Events.FestivalID = Festivals.FestivalID"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Generate a report summarizing the name of each festival and a bulleted list of the events it hosts, including a brief description for each event.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT F.Name, E.EventName, E.Description \nFROM Festivals F \nJOIN Festivals_Events FE ON F.FestivalID = FE.FestivalID \nJOIN Events E ON E.EventTypeID = FE.EventTypeID"
          ]
        },
        {
          "interpretation": "List each `Festival` name and a comma-separated list of all corresponding `Event` names and descriptions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT F.Name, GROUP_CONCAT(E.EventName || ': ' || E.Description, ', ') AS Events\nFROM Festivals F\nJOIN Festivals_Events FE ON F.FestivalID = FE.FestivalID\nJOIN Events E ON FE.EventTypeID = E.EventTypeID\nGROUP BY F.Name"
          ]
        },
        {
          "interpretation": "For every `Festival`, return a concatenated string containing the name of the festival followed by a colon and the descriptions of all events associated with it.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT F.Name || ': ' || GROUP_CONCAT(E.Description) AS FestivalEvents\nFROM Festivals F\nJOIN Festivals_Events FE ON F.FestivalID = FE.FestivalID\nJOIN Events E ON FE.EventTypeID = E.EventTypeID\nGROUP BY F.Name"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Entertainment/scope_festivals_events/scope_festivals_events.sqlite",
      "db_dump": "CREATE TABLE Events(\n    EventTypeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    EventName TEXT,\n    Description TEXT);\nCREATE TABLE Festivals(\n    FestivalID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Location TEXT);\nCREATE TABLE Festivals_Events(\n    FestivalID INTEGER,\n    EventTypeID INTEGER,\n    FOREIGN KEY (FestivalID) REFERENCES Festivals(FestivalID),\n    FOREIGN KEY (EventTypeID) REFERENCES Events(EventTypeID));\n\nINSERT INTO \"Events\" (EventTypeID,EventName,Description) VALUES (1,'Parade','A colorful procession featuring floats, music and dancers.'),(2,'Fireworks Show','An impressive display of fireworks celebrating the festival.'),(4,'Street Performances','Actors, musicians, acrobats and magicians entertain crowds on the streets.'),(5,'Art Exhibitions','Exhibits showcasing traditional and contemporary art from various cultures.');\nINSERT INTO \"Festivals\" (FestivalID,Name,Location) VALUES (1,'Carnival','Rio de Janeiro'),(2,'Mardi Gras','New Orleans'),(3,'Oktoberfest','Munich'),(4,'Diwali','Varanasi'),(5,'Tomatina','Buenoaia y Foca');\nINSERT INTO \"Festivals_Events\" (FestivalID,EventTypeID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\n",
      "question": "Show me the name and description of the events common to every festival",
      "gold_queries": [
        "SELECT Events.EventName, Events.Description  from Festivals_Events join Events on Festivals_Events.EventTypeID = Events.EventTypeID join Festivals on Festivals_Events.FestivalID = Festivals.FestivalID   GROUP BY Festivals_Events.EventTypeID HAVING COUNT(DISTINCT Festivals_Events.FestivalID) = (SELECT COUNT(*) FROM  Festivals)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List all events present in every single festival, including their names and descriptions.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT E.EventName, E.Description\nFROM Events E\nWHERE NOT EXISTS (\n    SELECT F.FestivalID\n    FROM Festivals F\n    WHERE NOT EXISTS (\n        SELECT *\n        FROM Festivals_Events FE\n        WHERE FE.FestivalID = F.FestivalID AND FE.EventTypeID = E.EventTypeID\n    )\n)"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Entertainment/scope_festivals_events/scope_festivals_events.sqlite",
      "db_dump": "CREATE TABLE Events(\n    EventTypeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    EventName TEXT,\n    Description TEXT);\nCREATE TABLE Festivals(\n    FestivalID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Location TEXT);\nCREATE TABLE Festivals_Events(\n    FestivalID INTEGER,\n    EventTypeID INTEGER,\n    FOREIGN KEY (FestivalID) REFERENCES Festivals(FestivalID),\n    FOREIGN KEY (EventTypeID) REFERENCES Events(EventTypeID));\n\nINSERT INTO \"Events\" (EventTypeID,EventName,Description) VALUES (1,'Parade','A colorful procession featuring floats, music and dancers.'),(2,'Fireworks Show','An impressive display of fireworks celebrating the festival.'),(4,'Street Performances','Actors, musicians, acrobats and magicians entertain crowds on the streets.'),(5,'Art Exhibitions','Exhibits showcasing traditional and contemporary art from various cultures.');\nINSERT INTO \"Festivals\" (FestivalID,Name,Location) VALUES (1,'Carnival','Rio de Janeiro'),(2,'Mardi Gras','New Orleans'),(3,'Oktoberfest','Munich'),(4,'Diwali','Varanasi'),(5,'Tomatina','Buenoaia y Foca');\nINSERT INTO \"Festivals_Events\" (FestivalID,EventTypeID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\n",
      "question": "For each festival, provide the corresponding description of events.",
      "gold_queries": [
        "select festivals.name , events.description from Festivals_Events join Events on Festivals_Events.EventTypeID = Events.EventTypeID join Festivals on Festivals_Events.FestivalID = Festivals.FestivalID"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Retrieve the name of each festival and the description of each event associated with that festival.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Festivals.Name, Events.Description \nFROM Festivals \nJOIN Festivals_Events ON Festivals.FestivalID = Festivals_Events.FestivalID \nJOIN Events ON Festivals_Events.EventTypeID = Events.EventTypeID"
          ]
        },
        {
          "interpretation": "Given a festival, return the descriptions of all events tied to it.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.Description \nFROM Events AS T1 \nJOIN Festivals_Events AS T2 \nON T1.EventTypeID = T2.EventTypeID \nJOIN Festivals AS T3 \nON T2.FestivalID = T3.FestivalID \nWHERE T3.Name = 'Given Festival'"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Education/scope_libraries_collections/scope_libraries_collections.sqlite",
      "db_dump": "CREATE TABLE Collections (\n    collection_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    collection_name TEXT\n);\nCREATE TABLE Libraries (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    address TEXT,\n    phone_number TEXT\n);\nCREATE TABLE Libraries_Collections (\n    library_id INTEGER,\n    collection_id INTEGER,\n    FOREIGN KEY(library_id) REFERENCES Libraries(id),\n    FOREIGN KEY(collection_id) REFERENCES Collections(collection_id)\n);\n\nINSERT INTO \"Collections\" (collection_id,collection_name) VALUES (1,'Children''s Books'),(2,'Young Adult'),(3,'Non-Fiction'),(4,'Biography'),(5,'History');\nINSERT INTO \"Libraries\" (id,name,address,phone_number) VALUES (1,'Library A','123 Main St.','555-1234'),(2,'Library B','456 Elm St.','555-5678'),(3,'Library C','789 Oak St.','555-9012'),(4,'Library D','321 Pine St.','555-1357'),(5,'Library E','654 Fir St.','555-1415');\nINSERT INTO \"Libraries_Collections\" (library_id,collection_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,5);\n",
      "question": "Give me the collections corresponding to each library?",
      "gold_queries": [
        "SELECT Collections.collection_name  from Libraries_Collections join Collections on Libraries_Collections.collection_id = Collections.collection_id join Libraries on Libraries_Collections.library_id = Libraries.id   GROUP BY Libraries_Collections.collection_id HAVING COUNT(DISTINCT Libraries_Collections.library_id) = (SELECT COUNT(*) FROM  Libraries)",
        "select libraries.name , collections.collection_name from Libraries_Collections join Collections on Libraries_Collections.collection_id = Collections.collection_id join Libraries on Libraries_Collections.library_id = Libraries.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Retrieve the names of the collections associated with each library.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT L.name AS library_name, C.collection_name \nFROM Libraries L\nJOIN Libraries_Collections LC ON L.id = LC.library_id\nJOIN Collections C ON LC.collection_id = C.collection_id"
          ]
        },
        {
          "interpretation": "Display a table with columns for library name, address, phone number, and collection names.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT L.name, L.address, L.phone_number, C.collection_name\nFROM Libraries L\nJOIN Libraries_Collections LC ON L.id = LC.library_id\nJOIN Collections C ON LC.collection_id = C.collection_id"
          ]
        },
        {
          "interpretation": "Return the collection_id values for each library.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT library_id, collection_id FROM Libraries_Collections"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.3333333333333333,
        "f1_score": 0.4,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Education/scope_libraries_collections/scope_libraries_collections.sqlite",
      "db_dump": "CREATE TABLE Collections (\n    collection_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    collection_name TEXT\n);\nCREATE TABLE Libraries (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    address TEXT,\n    phone_number TEXT\n);\nCREATE TABLE Libraries_Collections (\n    library_id INTEGER,\n    collection_id INTEGER,\n    FOREIGN KEY(library_id) REFERENCES Libraries(id),\n    FOREIGN KEY(collection_id) REFERENCES Collections(collection_id)\n);\n\nINSERT INTO \"Collections\" (collection_id,collection_name) VALUES (1,'Children''s Books'),(2,'Young Adult'),(3,'Non-Fiction'),(4,'Biography'),(5,'History');\nINSERT INTO \"Libraries\" (id,name,address,phone_number) VALUES (1,'Library A','123 Main St.','555-1234'),(2,'Library B','456 Elm St.','555-5678'),(3,'Library C','789 Oak St.','555-9012'),(4,'Library D','321 Pine St.','555-1357'),(5,'Library E','654 Fir St.','555-1415');\nINSERT INTO \"Libraries_Collections\" (library_id,collection_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,5);\n",
      "question": "For each library, please show me the corresponding collections.",
      "gold_queries": [
        "select libraries.name , collections.collection_name from Libraries_Collections join Collections on Libraries_Collections.collection_id = Collections.collection_id join Libraries on Libraries_Collections.library_id = Libraries.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Show all records from the Libraries_Collections table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT library_id, collection_id FROM Libraries_Collections"
          ]
        },
        {
          "interpretation": "Retrieve the collection_name for each library_name from the Libraries_Collections table.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT L.name AS library_name, C.collection_name \nFROM Libraries_Collections LC \nJOIN Libraries L ON LC.library_id = L.id \nJOIN Collections C ON LC.collection_id = C.collection_id"
          ]
        },
        {
          "interpretation": "List each library and all the collection_ids it has associated with it.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Libraries.name, Libraries_Collections.collection_id\nFROM Libraries\nJOIN Libraries_Collections ON Libraries.id = Libraries_Collections.library_id"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Education/scope_libraries_collections/scope_libraries_collections.sqlite",
      "db_dump": "CREATE TABLE Collections (\n    collection_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    collection_name TEXT\n);\nCREATE TABLE Libraries (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    address TEXT,\n    phone_number TEXT\n);\nCREATE TABLE Libraries_Collections (\n    library_id INTEGER,\n    collection_id INTEGER,\n    FOREIGN KEY(library_id) REFERENCES Libraries(id),\n    FOREIGN KEY(collection_id) REFERENCES Collections(collection_id)\n);\n\nINSERT INTO \"Collections\" (collection_id,collection_name) VALUES (1,'Children''s Books'),(2,'Young Adult'),(3,'Non-Fiction'),(4,'Biography'),(5,'History');\nINSERT INTO \"Libraries\" (id,name,address,phone_number) VALUES (1,'Library A','123 Main St.','555-1234'),(2,'Library B','456 Elm St.','555-5678'),(3,'Library C','789 Oak St.','555-9012'),(4,'Library D','321 Pine St.','555-1357'),(5,'Library E','654 Fir St.','555-1415');\nINSERT INTO \"Libraries_Collections\" (library_id,collection_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,5);\n",
      "question": "Show me the collection that is in common for all libraries.",
      "gold_queries": [
        "SELECT Collections.collection_name  from Libraries_Collections join Collections on Libraries_Collections.collection_id = Collections.collection_id join Libraries on Libraries_Collections.library_id = Libraries.id   GROUP BY Libraries_Collections.collection_id HAVING COUNT(DISTINCT Libraries_Collections.library_id) = (SELECT COUNT(*) FROM  Libraries)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Display the collection name shared by all libraries, regardless of multiple entries per library.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT collection_name\nFROM Collections\nWHERE collection_id IN (\n    SELECT collection_id\n    FROM Libraries_Collections\n    GROUP BY collection_id\n    HAVING COUNT(DISTINCT library_id) = (SELECT COUNT(*) FROM Libraries)\n)"
          ]
        },
        {
          "interpretation": "Retrieve the collection ID present in all Libraries_Collections table entries.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT collection_id FROM Libraries_Collections GROUP BY collection_id HAVING COUNT(DISTINCT library_id) = (SELECT COUNT(*) FROM Libraries)"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Agriculture/scope_vineyards_wines/scope_vineyards_wines.sqlite",
      "db_dump": "CREATE TABLE Countries(\n    countryId INTEGER PRIMARY KEY AUTOINCREMENT,\n    countryName TEXT);\nCREATE TABLE Regions(\n    regionId INTEGER PRIMARY KEY AUTOINCREMENT,\n    regionName TEXT,\n    countryId INTEGER,\n    FOREIGN KEY(countryId) REFERENCES Countries(countryId));\nCREATE TABLE VineyardTypes(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    typeName TEXT);\nCREATE TABLE Vineyards(\n    vineyardId INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    areaSize REAL,\n    typeId INTEGER,\n    regionId INTEGER,\n    FOREIGN KEY(typeId) REFERENCES VineyardTypes(id),\n    FOREIGN KEY(regionId) REFERENCES Regions(regionId));\nCREATE TABLE Vineyards_Wines(\n    vineyardId INTEGER,\n    wineId INTEGER,\n    yearProduced INTEGER,\n    FOREIGN KEY(vineyardId) REFERENCES Vineyards(vineyardId),\n    FOREIGN KEY(wineId) REFERENCES Wines(wineId),\n    PRIMARY KEY(vineyardId, wineId, yearProduced));\nCREATE TABLE Wines(\n    wineId INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    variety TEXT);\n\nINSERT INTO \"Countries\" (countryId,countryName) VALUES (1,'France'),(2,'Italy'),(3,'Spain');\nINSERT INTO \"Regions\" (regionId,regionName,countryId) VALUES (1,'Bordeaux',1),(2,'Tuscany',2),(3,'La Rioja',3);\nINSERT INTO \"VineyardTypes\" (id,typeName) VALUES (1,'Red'),(2,'White'),(3,'Ros\u00e9');\nINSERT INTO \"Vineyards\" (vineyardId,name,areaSize,typeId,regionId) VALUES (1,'Ch\u00e2teau Lafite Rothschild',500.0,1,1),(2,'Antinori Toscano',400.0,2,2),(3,'Marqu\u00e9s de Riscal',600.0,1,3),(4,'Domaine Leflaive',100.0,3,NULL),(5,'Felsina',150.0,2,2);\nINSERT INTO \"Vineyards_Wines\" (vineyardId,wineId,yearProduced) VALUES (1,1,2018),(2,2,2020),(2,2,2021),(3,3,2017),(4,3,2016),(2,1,2020),(3,1,2017),(4,1,2016),(5,1,NULL);\nINSERT INTO \"Wines\" (wineId,name,variety) VALUES (1,'Cabernet Sauvignon','Cabernet Sauvignon'),(2,'Merlot','Merlot'),(3,'Pinot Noir','Pinot Noir');\n",
      "question": "List the wines produced across the vineyards.",
      "gold_queries": [
        "select vineyards.name , wines.name from Vineyards_Wines join Wines on Vineyards_Wines.wineId = Wines.wineId join Vineyards on Vineyards_Wines.vineyardId = Vineyards.vineyardId"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List the wines produced, including the vineyard and year produced for each wine instance.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT W.name AS WineName, V.name AS VineyardName, VW.yearProduced\nFROM Wines W\nJOIN Vineyards_Wines VW ON W.wineId = VW.wineId\nJOIN Vineyards V ON VW.vineyardId = V.vineyardId"
          ]
        },
        {
          "interpretation": "List the wine names produced in each region, considering all vineyards in that region.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT R.regionName, W.name\nFROM Regions R\nJOIN Vineyards V ON R.regionId = V.regionId\nJOIN Vineyards_Wines VW ON V.vineyardId = VW.vineyardId\nJOIN Wines W ON VW.wineId = W.wineId"
          ]
        },
        {
          "interpretation": "List all wines produced by each vineyard, sorted alphabetically by wine name.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT V.name AS VineyardName, W.name AS WineName \nFROM Vineyards_Wines VW \nJOIN Vineyards V ON VW.vineyardId = V.vineyardId \nJOIN Wines W ON VW.wineId = W.wineId \nORDER BY W.name"
          ]
        },
        {
          "interpretation": "List all wines with a corresponding record in the Vineyards_Wines table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Wines.name \nFROM Wines \nJOIN Vineyards_Wines ON Wines.wineId = Vineyards_Wines.wineId"
          ]
        },
        {
          "interpretation": "List all wines produced, regardless of vineyard, with at least one vintage year.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT W.name\nFROM Wines AS W\nJOIN Vineyards_Wines AS VW ON W.wineId = VW.wineId\nWHERE VW.yearProduced IS NOT NULL"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Agriculture/scope_vineyards_wines/scope_vineyards_wines.sqlite",
      "db_dump": "CREATE TABLE Countries(\n    countryId INTEGER PRIMARY KEY AUTOINCREMENT,\n    countryName TEXT);\nCREATE TABLE Regions(\n    regionId INTEGER PRIMARY KEY AUTOINCREMENT,\n    regionName TEXT,\n    countryId INTEGER,\n    FOREIGN KEY(countryId) REFERENCES Countries(countryId));\nCREATE TABLE VineyardTypes(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    typeName TEXT);\nCREATE TABLE Vineyards(\n    vineyardId INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    areaSize REAL,\n    typeId INTEGER,\n    regionId INTEGER,\n    FOREIGN KEY(typeId) REFERENCES VineyardTypes(id),\n    FOREIGN KEY(regionId) REFERENCES Regions(regionId));\nCREATE TABLE Vineyards_Wines(\n    vineyardId INTEGER,\n    wineId INTEGER,\n    yearProduced INTEGER,\n    FOREIGN KEY(vineyardId) REFERENCES Vineyards(vineyardId),\n    FOREIGN KEY(wineId) REFERENCES Wines(wineId),\n    PRIMARY KEY(vineyardId, wineId, yearProduced));\nCREATE TABLE Wines(\n    wineId INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    variety TEXT);\n\nINSERT INTO \"Countries\" (countryId,countryName) VALUES (1,'France'),(2,'Italy'),(3,'Spain');\nINSERT INTO \"Regions\" (regionId,regionName,countryId) VALUES (1,'Bordeaux',1),(2,'Tuscany',2),(3,'La Rioja',3);\nINSERT INTO \"VineyardTypes\" (id,typeName) VALUES (1,'Red'),(2,'White'),(3,'Ros\u00e9');\nINSERT INTO \"Vineyards\" (vineyardId,name,areaSize,typeId,regionId) VALUES (1,'Ch\u00e2teau Lafite Rothschild',500.0,1,1),(2,'Antinori Toscano',400.0,2,2),(3,'Marqu\u00e9s de Riscal',600.0,1,3),(4,'Domaine Leflaive',100.0,3,NULL),(5,'Felsina',150.0,2,2);\nINSERT INTO \"Vineyards_Wines\" (vineyardId,wineId,yearProduced) VALUES (1,1,2018),(2,2,2020),(2,2,2021),(3,3,2017),(4,3,2016),(2,1,2020),(3,1,2017),(4,1,2016),(5,1,NULL);\nINSERT INTO \"Wines\" (wineId,name,variety) VALUES (1,'Cabernet Sauvignon','Cabernet Sauvignon'),(2,'Merlot','Merlot'),(3,'Pinot Noir','Pinot Noir');\n",
      "question": "What name and variety of wine do we have at every vineyard?",
      "gold_queries": [
        "SELECT Wines.name, Wines.variety  from Vineyards_Wines join Wines on Vineyards_Wines.wineId = Wines.wineId join Vineyards on Vineyards_Wines.vineyardId = Vineyards.vineyardId   GROUP BY Vineyards_Wines.wineId HAVING COUNT(DISTINCT Vineyards_Wines.vineyardId) = (SELECT COUNT(*) FROM  Vineyards)",
        "select vineyards.name , wines.name , wines.variety from Vineyards_Wines join Wines on Vineyards_Wines.wineId = Wines.wineId join Vineyards on Vineyards_Wines.vineyardId = Vineyards.vineyardId"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What is the name and variety of wine associated with every vineyard?",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT V.name, W.name, W.variety\nFROM Vineyards V\nJOIN Vineyards_Wines VW ON V.vineyardId = VW.vineyardId\nJOIN Wines W ON VW.wineId = W.wineId"
          ]
        },
        {
          "interpretation": "For each vineyard, list the name and variety of all wines.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT v.name, w.variety\nFROM Vineyards v\nJOIN Vineyards_Wines vw ON v.vineyardId = vw.vineyardId\nJOIN Wines w ON vw.wineId = w.wineId"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.5,
        "f1_score": 0.5,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Agriculture/scope_vineyards_wines/scope_vineyards_wines.sqlite",
      "db_dump": "CREATE TABLE Countries(\n    countryId INTEGER PRIMARY KEY AUTOINCREMENT,\n    countryName TEXT);\nCREATE TABLE Regions(\n    regionId INTEGER PRIMARY KEY AUTOINCREMENT,\n    regionName TEXT,\n    countryId INTEGER,\n    FOREIGN KEY(countryId) REFERENCES Countries(countryId));\nCREATE TABLE VineyardTypes(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    typeName TEXT);\nCREATE TABLE Vineyards(\n    vineyardId INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    areaSize REAL,\n    typeId INTEGER,\n    regionId INTEGER,\n    FOREIGN KEY(typeId) REFERENCES VineyardTypes(id),\n    FOREIGN KEY(regionId) REFERENCES Regions(regionId));\nCREATE TABLE Vineyards_Wines(\n    vineyardId INTEGER,\n    wineId INTEGER,\n    yearProduced INTEGER,\n    FOREIGN KEY(vineyardId) REFERENCES Vineyards(vineyardId),\n    FOREIGN KEY(wineId) REFERENCES Wines(wineId),\n    PRIMARY KEY(vineyardId, wineId, yearProduced));\nCREATE TABLE Wines(\n    wineId INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    variety TEXT);\n\nINSERT INTO \"Countries\" (countryId,countryName) VALUES (1,'France'),(2,'Italy'),(3,'Spain');\nINSERT INTO \"Regions\" (regionId,regionName,countryId) VALUES (1,'Bordeaux',1),(2,'Tuscany',2),(3,'La Rioja',3);\nINSERT INTO \"VineyardTypes\" (id,typeName) VALUES (1,'Red'),(2,'White'),(3,'Ros\u00e9');\nINSERT INTO \"Vineyards\" (vineyardId,name,areaSize,typeId,regionId) VALUES (1,'Ch\u00e2teau Lafite Rothschild',500.0,1,1),(2,'Antinori Toscano',400.0,2,2),(3,'Marqu\u00e9s de Riscal',600.0,1,3),(4,'Domaine Leflaive',100.0,3,NULL),(5,'Felsina',150.0,2,2);\nINSERT INTO \"Vineyards_Wines\" (vineyardId,wineId,yearProduced) VALUES (1,1,2018),(2,2,2020),(2,2,2021),(3,3,2017),(4,3,2016),(2,1,2020),(3,1,2017),(4,1,2016),(5,1,NULL);\nINSERT INTO \"Wines\" (wineId,name,variety) VALUES (1,'Cabernet Sauvignon','Cabernet Sauvignon'),(2,'Merlot','Merlot'),(3,'Pinot Noir','Pinot Noir');\n",
      "question": "For each vineyard, show the variety and names of the wines they produce",
      "gold_queries": [
        "select vineyards.name , wines.name , wines.variety from Vineyards_Wines join Wines on Vineyards_Wines.wineId = Wines.wineId join Vineyards on Vineyards_Wines.vineyardId = Vineyards.vineyardId"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Display a table with vineyard names in one column and a list of produced wine names and varieties in a corresponding column for each vineyard.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT v.name AS VineyardName, GROUP_CONCAT(w.name || ' - ' || w.variety, ', ') AS Wines\nFROM Vineyards v\nJOIN Vineyards_Wines vw ON v.vineyardId = vw.vineyardId\nJOIN Wines w ON vw.wineId = w.wineId\nGROUP BY v.vineyardId"
          ]
        },
        {
          "interpretation": "Retrieve the wine varieties and names for every vineyard stored in the database.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT V.name, W.variety\nFROM Vineyards_Wines VW\nJOIN Wines W ON VW.wineId = W.wineId\nJOIN Vineyards V ON VW.vineyardId = V.vineyardId"
          ]
        },
        {
          "interpretation": "Generate a report listing each vineyard and the types of wine they produce, including the wine names and varieties.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT V.name AS vineyardName, Wi.name AS wineName, Wi.variety AS wineVariety\nFROM Vineyards V\nJOIN Vineyards_Wines VW ON V.vineyardId = VW.vineyardId\nJOIN Wines Wi ON VW.wineId = Wi.wineId"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Agriculture/scope_vineyards_wines/scope_vineyards_wines.sqlite",
      "db_dump": "CREATE TABLE Countries(\n    countryId INTEGER PRIMARY KEY AUTOINCREMENT,\n    countryName TEXT);\nCREATE TABLE Regions(\n    regionId INTEGER PRIMARY KEY AUTOINCREMENT,\n    regionName TEXT,\n    countryId INTEGER,\n    FOREIGN KEY(countryId) REFERENCES Countries(countryId));\nCREATE TABLE VineyardTypes(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    typeName TEXT);\nCREATE TABLE Vineyards(\n    vineyardId INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    areaSize REAL,\n    typeId INTEGER,\n    regionId INTEGER,\n    FOREIGN KEY(typeId) REFERENCES VineyardTypes(id),\n    FOREIGN KEY(regionId) REFERENCES Regions(regionId));\nCREATE TABLE Vineyards_Wines(\n    vineyardId INTEGER,\n    wineId INTEGER,\n    yearProduced INTEGER,\n    FOREIGN KEY(vineyardId) REFERENCES Vineyards(vineyardId),\n    FOREIGN KEY(wineId) REFERENCES Wines(wineId),\n    PRIMARY KEY(vineyardId, wineId, yearProduced));\nCREATE TABLE Wines(\n    wineId INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    variety TEXT);\n\nINSERT INTO \"Countries\" (countryId,countryName) VALUES (1,'France'),(2,'Italy'),(3,'Spain');\nINSERT INTO \"Regions\" (regionId,regionName,countryId) VALUES (1,'Bordeaux',1),(2,'Tuscany',2),(3,'La Rioja',3);\nINSERT INTO \"VineyardTypes\" (id,typeName) VALUES (1,'Red'),(2,'White'),(3,'Ros\u00e9');\nINSERT INTO \"Vineyards\" (vineyardId,name,areaSize,typeId,regionId) VALUES (1,'Ch\u00e2teau Lafite Rothschild',500.0,1,1),(2,'Antinori Toscano',400.0,2,2),(3,'Marqu\u00e9s de Riscal',600.0,1,3),(4,'Domaine Leflaive',100.0,3,NULL),(5,'Felsina',150.0,2,2);\nINSERT INTO \"Vineyards_Wines\" (vineyardId,wineId,yearProduced) VALUES (1,1,2018),(2,2,2020),(2,2,2021),(3,3,2017),(4,3,2016),(2,1,2020),(3,1,2017),(4,1,2016),(5,1,NULL);\nINSERT INTO \"Wines\" (wineId,name,variety) VALUES (1,'Cabernet Sauvignon','Cabernet Sauvignon'),(2,'Merlot','Merlot'),(3,'Pinot Noir','Pinot Noir');\n",
      "question": "What types of wines are typical for all vineyards?",
      "gold_queries": [
        "SELECT Wines.variety  from Vineyards_Wines join Wines on Vineyards_Wines.wineId = Wines.wineId join Vineyards on Vineyards_Wines.vineyardId = Vineyards.vineyardId   GROUP BY Vineyards_Wines.wineId HAVING COUNT(DISTINCT Vineyards_Wines.vineyardId) = (SELECT COUNT(*) FROM  Vineyards)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What wine types are listed in the database for every vineyard.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT w.name\nFROM Wines w\nJOIN Vineyards_Wines vw ON w.wineId = vw.wineId"
          ]
        },
        {
          "interpretation": "What wine varieties are grown at every vineyard.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT variety\nFROM Wines\nWHERE wineId IN (\n    SELECT wineId\n    FROM Vineyards_Wines\n    GROUP BY wineId\n    HAVING COUNT(DISTINCT vineyardId) = (SELECT COUNT(*) FROM Vineyards)\n)"
          ]
        },
        {
          "interpretation": "What kinds of wines are most commonly produced by all vineyards.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT W.name, COUNT(*) as production_count\nFROM Wines W\nJOIN Vineyards_Wines VW ON W.wineId = VW.wineId\nGROUP BY W.wineId\nORDER BY production_count DESC\nLIMIT 1"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Agriculture/scope_vineyards_wines/scope_vineyards_wines.sqlite",
      "db_dump": "CREATE TABLE Countries(\n    countryId INTEGER PRIMARY KEY AUTOINCREMENT,\n    countryName TEXT);\nCREATE TABLE Regions(\n    regionId INTEGER PRIMARY KEY AUTOINCREMENT,\n    regionName TEXT,\n    countryId INTEGER,\n    FOREIGN KEY(countryId) REFERENCES Countries(countryId));\nCREATE TABLE VineyardTypes(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    typeName TEXT);\nCREATE TABLE Vineyards(\n    vineyardId INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    areaSize REAL,\n    typeId INTEGER,\n    regionId INTEGER,\n    FOREIGN KEY(typeId) REFERENCES VineyardTypes(id),\n    FOREIGN KEY(regionId) REFERENCES Regions(regionId));\nCREATE TABLE Vineyards_Wines(\n    vineyardId INTEGER,\n    wineId INTEGER,\n    yearProduced INTEGER,\n    FOREIGN KEY(vineyardId) REFERENCES Vineyards(vineyardId),\n    FOREIGN KEY(wineId) REFERENCES Wines(wineId),\n    PRIMARY KEY(vineyardId, wineId, yearProduced));\nCREATE TABLE Wines(\n    wineId INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    variety TEXT);\n\nINSERT INTO \"Countries\" (countryId,countryName) VALUES (1,'France'),(2,'Italy'),(3,'Spain');\nINSERT INTO \"Regions\" (regionId,regionName,countryId) VALUES (1,'Bordeaux',1),(2,'Tuscany',2),(3,'La Rioja',3);\nINSERT INTO \"VineyardTypes\" (id,typeName) VALUES (1,'Red'),(2,'White'),(3,'Ros\u00e9');\nINSERT INTO \"Vineyards\" (vineyardId,name,areaSize,typeId,regionId) VALUES (1,'Ch\u00e2teau Lafite Rothschild',500.0,1,1),(2,'Antinori Toscano',400.0,2,2),(3,'Marqu\u00e9s de Riscal',600.0,1,3),(4,'Domaine Leflaive',100.0,3,NULL),(5,'Felsina',150.0,2,2);\nINSERT INTO \"Vineyards_Wines\" (vineyardId,wineId,yearProduced) VALUES (1,1,2018),(2,2,2020),(2,2,2021),(3,3,2017),(4,3,2016),(2,1,2020),(3,1,2017),(4,1,2016),(5,1,NULL);\nINSERT INTO \"Wines\" (wineId,name,variety) VALUES (1,'Cabernet Sauvignon','Cabernet Sauvignon'),(2,'Merlot','Merlot'),(3,'Pinot Noir','Pinot Noir');\n",
      "question": "For each vineyard, what is the variety of wines there",
      "gold_queries": [
        "select vineyards.name , wines.variety from Vineyards_Wines join Wines on Vineyards_Wines.wineId = Wines.wineId join Vineyards on Vineyards_Wines.vineyardId = Vineyards.vineyardId"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List each vineyard and a comma-separated list of wine varieties produced at that vineyard.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT v.name, GROUP_CONCAT(w.variety, ',') \nFROM Vineyards v \nJOIN Vineyards_Wines vw ON v.vineyardId = vw.vineyardId \nJOIN Wines w ON vw.wineId = w.wineId \nGROUP BY v.name"
          ]
        },
        {
          "interpretation": "What wine varieties are produced across all vineyards?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT variety FROM Wines"
          ]
        },
        {
          "interpretation": "For each unique wine variety, list the vineyard(s) that produce it.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT w.variety, v.name\nFROM Wines w\nJOIN Vineyards_Wines vw ON w.wineId = vw.wineId\nJOIN Vineyards v ON vw.vineyardId = v.vineyardId"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Agriculture/scope_vineyards_wines/scope_vineyards_wines.sqlite",
      "db_dump": "CREATE TABLE Countries(\n    countryId INTEGER PRIMARY KEY AUTOINCREMENT,\n    countryName TEXT);\nCREATE TABLE Regions(\n    regionId INTEGER PRIMARY KEY AUTOINCREMENT,\n    regionName TEXT,\n    countryId INTEGER,\n    FOREIGN KEY(countryId) REFERENCES Countries(countryId));\nCREATE TABLE VineyardTypes(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    typeName TEXT);\nCREATE TABLE Vineyards(\n    vineyardId INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    areaSize REAL,\n    typeId INTEGER,\n    regionId INTEGER,\n    FOREIGN KEY(typeId) REFERENCES VineyardTypes(id),\n    FOREIGN KEY(regionId) REFERENCES Regions(regionId));\nCREATE TABLE Vineyards_Wines(\n    vineyardId INTEGER,\n    wineId INTEGER,\n    yearProduced INTEGER,\n    FOREIGN KEY(vineyardId) REFERENCES Vineyards(vineyardId),\n    FOREIGN KEY(wineId) REFERENCES Wines(wineId),\n    PRIMARY KEY(vineyardId, wineId, yearProduced));\nCREATE TABLE Wines(\n    wineId INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    variety TEXT);\n\nINSERT INTO \"Countries\" (countryId,countryName) VALUES (1,'France'),(2,'Italy'),(3,'Spain');\nINSERT INTO \"Regions\" (regionId,regionName,countryId) VALUES (1,'Bordeaux',1),(2,'Tuscany',2),(3,'La Rioja',3);\nINSERT INTO \"VineyardTypes\" (id,typeName) VALUES (1,'Red'),(2,'White'),(3,'Ros\u00e9');\nINSERT INTO \"Vineyards\" (vineyardId,name,areaSize,typeId,regionId) VALUES (1,'Ch\u00e2teau Lafite Rothschild',500.0,1,1),(2,'Antinori Toscano',400.0,2,2),(3,'Marqu\u00e9s de Riscal',600.0,1,3),(4,'Domaine Leflaive',100.0,3,NULL),(5,'Felsina',150.0,2,2);\nINSERT INTO \"Vineyards_Wines\" (vineyardId,wineId,yearProduced) VALUES (1,1,2018),(2,2,2020),(2,2,2021),(3,3,2017),(4,3,2016),(2,1,2020),(3,1,2017),(4,1,2016),(5,1,NULL);\nINSERT INTO \"Wines\" (wineId,name,variety) VALUES (1,'Cabernet Sauvignon','Cabernet Sauvignon'),(2,'Merlot','Merlot'),(3,'Pinot Noir','Pinot Noir');\n",
      "question": "What types of wines do we have in each vineyard?",
      "gold_queries": [
        "SELECT Wines.variety  from Vineyards_Wines join Wines on Vineyards_Wines.wineId = Wines.wineId join Vineyards on Vineyards_Wines.vineyardId = Vineyards.vineyardId   GROUP BY Vineyards_Wines.wineId HAVING COUNT(DISTINCT Vineyards_Wines.vineyardId) = (SELECT COUNT(*) FROM  Vineyards)",
        "select vineyards.name , wines.variety from Vineyards_Wines join Wines on Vineyards_Wines.wineId = Wines.wineId join Vineyards on Vineyards_Wines.vineyardId = Vineyards.vineyardId"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List the unique wines produced by each vineyard.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT V.name AS vineyardName, W.name AS wineName\nFROM Vineyards V\nJOIN Vineyards_Wines VW ON V.vineyardId = VW.vineyardId\nJOIN Wines W ON VW.wineId = W.wineId\nGROUP BY V.name, W.name"
          ]
        },
        {
          "interpretation": "Identify all wine types (variety) connected to each vineyard.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT V.name AS Vineyard, W.variety AS WineType\nFROM Vineyards_Wines VW\nJOIN Vineyards V ON VW.vineyardId = V.vineyardId\nJOIN Wines W ON VW.wineId = W.wineId"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.5,
        "f1_score": 0.5,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Agriculture/scope_vineyards_wines/scope_vineyards_wines.sqlite",
      "db_dump": "CREATE TABLE Countries(\n    countryId INTEGER PRIMARY KEY AUTOINCREMENT,\n    countryName TEXT);\nCREATE TABLE Regions(\n    regionId INTEGER PRIMARY KEY AUTOINCREMENT,\n    regionName TEXT,\n    countryId INTEGER,\n    FOREIGN KEY(countryId) REFERENCES Countries(countryId));\nCREATE TABLE VineyardTypes(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    typeName TEXT);\nCREATE TABLE Vineyards(\n    vineyardId INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    areaSize REAL,\n    typeId INTEGER,\n    regionId INTEGER,\n    FOREIGN KEY(typeId) REFERENCES VineyardTypes(id),\n    FOREIGN KEY(regionId) REFERENCES Regions(regionId));\nCREATE TABLE Vineyards_Wines(\n    vineyardId INTEGER,\n    wineId INTEGER,\n    yearProduced INTEGER,\n    FOREIGN KEY(vineyardId) REFERENCES Vineyards(vineyardId),\n    FOREIGN KEY(wineId) REFERENCES Wines(wineId),\n    PRIMARY KEY(vineyardId, wineId, yearProduced));\nCREATE TABLE Wines(\n    wineId INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    variety TEXT);\n\nINSERT INTO \"Countries\" (countryId,countryName) VALUES (1,'France'),(2,'Italy'),(3,'Spain');\nINSERT INTO \"Regions\" (regionId,regionName,countryId) VALUES (1,'Bordeaux',1),(2,'Tuscany',2),(3,'La Rioja',3);\nINSERT INTO \"VineyardTypes\" (id,typeName) VALUES (1,'Red'),(2,'White'),(3,'Ros\u00e9');\nINSERT INTO \"Vineyards\" (vineyardId,name,areaSize,typeId,regionId) VALUES (1,'Ch\u00e2teau Lafite Rothschild',500.0,1,1),(2,'Antinori Toscano',400.0,2,2),(3,'Marqu\u00e9s de Riscal',600.0,1,3),(4,'Domaine Leflaive',100.0,3,NULL),(5,'Felsina',150.0,2,2);\nINSERT INTO \"Vineyards_Wines\" (vineyardId,wineId,yearProduced) VALUES (1,1,2018),(2,2,2020),(2,2,2021),(3,3,2017),(4,3,2016),(2,1,2020),(3,1,2017),(4,1,2016),(5,1,NULL);\nINSERT INTO \"Wines\" (wineId,name,variety) VALUES (1,'Cabernet Sauvignon','Cabernet Sauvignon'),(2,'Merlot','Merlot'),(3,'Pinot Noir','Pinot Noir');\n",
      "question": "List the wines produced at each vineyard.",
      "gold_queries": [
        "SELECT Wines.name  from Vineyards_Wines join Wines on Vineyards_Wines.wineId = Wines.wineId join Vineyards on Vineyards_Wines.vineyardId = Vineyards.vineyardId   GROUP BY Vineyards_Wines.wineId HAVING COUNT(DISTINCT Vineyards_Wines.vineyardId) = (SELECT COUNT(*) FROM  Vineyards)",
        "select vineyards.name , wines.name from Vineyards_Wines join Wines on Vineyards_Wines.wineId = Wines.wineId join Vineyards on Vineyards_Wines.vineyardId = Vineyards.vineyardId"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Display a list of wines, grouped by vineyards, along with their year of production.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT v.name AS Vineyard, w.name AS Wine, vw.yearProduced\nFROM Vineyards_Wines vw\nJOIN Vineyards v ON vw.vineyardId = v.vineyardId\nJOIN Wines w ON vw.wineId = w.wineId\nGROUP BY v.name, w.name, vw.yearProduced"
          ]
        },
        {
          "interpretation": "Show all wines associated with each vineyard.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT V.name AS vineyardName, W.name AS wineName\nFROM Vineyards V\nJOIN Vineyards_Wines VW ON V.vineyardId = VW.vineyardId\nJOIN Wines W ON VW.wineId = W.wineId"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.5,
        "f1_score": 0.5,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Agriculture/scope_vineyards_wines/scope_vineyards_wines.sqlite",
      "db_dump": "CREATE TABLE Countries(\n    countryId INTEGER PRIMARY KEY AUTOINCREMENT,\n    countryName TEXT);\nCREATE TABLE Regions(\n    regionId INTEGER PRIMARY KEY AUTOINCREMENT,\n    regionName TEXT,\n    countryId INTEGER,\n    FOREIGN KEY(countryId) REFERENCES Countries(countryId));\nCREATE TABLE VineyardTypes(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    typeName TEXT);\nCREATE TABLE Vineyards(\n    vineyardId INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    areaSize REAL,\n    typeId INTEGER,\n    regionId INTEGER,\n    FOREIGN KEY(typeId) REFERENCES VineyardTypes(id),\n    FOREIGN KEY(regionId) REFERENCES Regions(regionId));\nCREATE TABLE Vineyards_Wines(\n    vineyardId INTEGER,\n    wineId INTEGER,\n    yearProduced INTEGER,\n    FOREIGN KEY(vineyardId) REFERENCES Vineyards(vineyardId),\n    FOREIGN KEY(wineId) REFERENCES Wines(wineId),\n    PRIMARY KEY(vineyardId, wineId, yearProduced));\nCREATE TABLE Wines(\n    wineId INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    variety TEXT);\n\nINSERT INTO \"Countries\" (countryId,countryName) VALUES (1,'France'),(2,'Italy'),(3,'Spain');\nINSERT INTO \"Regions\" (regionId,regionName,countryId) VALUES (1,'Bordeaux',1),(2,'Tuscany',2),(3,'La Rioja',3);\nINSERT INTO \"VineyardTypes\" (id,typeName) VALUES (1,'Red'),(2,'White'),(3,'Ros\u00e9');\nINSERT INTO \"Vineyards\" (vineyardId,name,areaSize,typeId,regionId) VALUES (1,'Ch\u00e2teau Lafite Rothschild',500.0,1,1),(2,'Antinori Toscano',400.0,2,2),(3,'Marqu\u00e9s de Riscal',600.0,1,3),(4,'Domaine Leflaive',100.0,3,NULL),(5,'Felsina',150.0,2,2);\nINSERT INTO \"Vineyards_Wines\" (vineyardId,wineId,yearProduced) VALUES (1,1,2018),(2,2,2020),(2,2,2021),(3,3,2017),(4,3,2016),(2,1,2020),(3,1,2017),(4,1,2016),(5,1,NULL);\nINSERT INTO \"Wines\" (wineId,name,variety) VALUES (1,'Cabernet Sauvignon','Cabernet Sauvignon'),(2,'Merlot','Merlot'),(3,'Pinot Noir','Pinot Noir');\n",
      "question": "Show the name and variety of wines that are common to all vineyards",
      "gold_queries": [
        "SELECT Wines.name, Wines.variety  from Vineyards_Wines join Wines on Vineyards_Wines.wineId = Wines.wineId join Vineyards on Vineyards_Wines.vineyardId = Vineyards.vineyardId   GROUP BY Vineyards_Wines.wineId HAVING COUNT(DISTINCT Vineyards_Wines.vineyardId) = (SELECT COUNT(*) FROM  Vineyards)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Find the common wines (including variety) produced by each vineyard.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT w.name, w.variety\nFROM Wines w\nJOIN Vineyards_Wines vw ON w.wineId = vw.wineId\nGROUP BY w.name, w.variety\nHAVING COUNT(DISTINCT vw.vineyardId) = (SELECT COUNT(*) FROM Vineyards)"
          ]
        },
        {
          "interpretation": "Display the names and varieties of wines produced by all vineyards within the dataset.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Wines.name, Wines.variety FROM Wines INNER JOIN Vineyards_Wines ON Wines.wineId = Vineyards_Wines.wineId"
          ]
        },
        {
          "interpretation": "Identify wines shared by all vineyards in the database.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT w.name\nFROM Wines w\nJOIN Vineyards_Wines vw ON w.wineId = vw.wineId\nGROUP BY w.wineId\nHAVING COUNT(DISTINCT vw.vineyardId) = (SELECT COUNT(vineyardId) FROM Vineyards)"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Agriculture/scope_vineyards_wines/scope_vineyards_wines.sqlite",
      "db_dump": "CREATE TABLE Countries(\n    countryId INTEGER PRIMARY KEY AUTOINCREMENT,\n    countryName TEXT);\nCREATE TABLE Regions(\n    regionId INTEGER PRIMARY KEY AUTOINCREMENT,\n    regionName TEXT,\n    countryId INTEGER,\n    FOREIGN KEY(countryId) REFERENCES Countries(countryId));\nCREATE TABLE VineyardTypes(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    typeName TEXT);\nCREATE TABLE Vineyards(\n    vineyardId INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    areaSize REAL,\n    typeId INTEGER,\n    regionId INTEGER,\n    FOREIGN KEY(typeId) REFERENCES VineyardTypes(id),\n    FOREIGN KEY(regionId) REFERENCES Regions(regionId));\nCREATE TABLE Vineyards_Wines(\n    vineyardId INTEGER,\n    wineId INTEGER,\n    yearProduced INTEGER,\n    FOREIGN KEY(vineyardId) REFERENCES Vineyards(vineyardId),\n    FOREIGN KEY(wineId) REFERENCES Wines(wineId),\n    PRIMARY KEY(vineyardId, wineId, yearProduced));\nCREATE TABLE Wines(\n    wineId INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    variety TEXT);\n\nINSERT INTO \"Countries\" (countryId,countryName) VALUES (1,'France'),(2,'Italy'),(3,'Spain');\nINSERT INTO \"Regions\" (regionId,regionName,countryId) VALUES (1,'Bordeaux',1),(2,'Tuscany',2),(3,'La Rioja',3);\nINSERT INTO \"VineyardTypes\" (id,typeName) VALUES (1,'Red'),(2,'White'),(3,'Ros\u00e9');\nINSERT INTO \"Vineyards\" (vineyardId,name,areaSize,typeId,regionId) VALUES (1,'Ch\u00e2teau Lafite Rothschild',500.0,1,1),(2,'Antinori Toscano',400.0,2,2),(3,'Marqu\u00e9s de Riscal',600.0,1,3),(4,'Domaine Leflaive',100.0,3,NULL),(5,'Felsina',150.0,2,2);\nINSERT INTO \"Vineyards_Wines\" (vineyardId,wineId,yearProduced) VALUES (1,1,2018),(2,2,2020),(2,2,2021),(3,3,2017),(4,3,2016),(2,1,2020),(3,1,2017),(4,1,2016),(5,1,NULL);\nINSERT INTO \"Wines\" (wineId,name,variety) VALUES (1,'Cabernet Sauvignon','Cabernet Sauvignon'),(2,'Merlot','Merlot'),(3,'Pinot Noir','Pinot Noir');\n",
      "question": "Name all the wines that are found at least once in every vineyard.",
      "gold_queries": [
        "SELECT Wines.name  from Vineyards_Wines join Wines on Vineyards_Wines.wineId = Wines.wineId join Vineyards on Vineyards_Wines.vineyardId = Vineyards.vineyardId   GROUP BY Vineyards_Wines.wineId HAVING COUNT(DISTINCT Vineyards_Wines.vineyardId) = (SELECT COUNT(*) FROM  Vineyards)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Determine wines shared across all vineyard instances.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT W.name\nFROM Wines W\nWHERE NOT EXISTS (\n    SELECT V.vineyardId\n    FROM Vineyards V\n    WHERE NOT EXISTS (\n        SELECT VW.wineId\n        FROM Vineyards_Wines VW\n        WHERE VW.wineId = W.wineId AND VW.vineyardId = V.vineyardId\n    )\n)"
          ]
        },
        {
          "interpretation": "Retrieve wines appearing in at least one vineyard.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT name FROM Wines"
          ]
        },
        {
          "interpretation": "List wines with entries in each vineyard-wine-year combination.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT w.name\nFROM Wines w\nJOIN Vineyards_Wines vw ON w.wineId = vw.wineId"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Airport/scope_duty_free_shops_products/scope_duty_free_shops_products.sqlite",
      "db_dump": "CREATE TABLE Duty_Free_Shops (\n    shop_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Duty_Free_Shops_Products (\n    shop_id INTEGER,\n    product_id INTEGER,\n    quantity INTEGER,\n    FOREIGN KEY(shop_id) REFERENCES Duty_Free_Shops(shop_id),\n    FOREIGN KEY(product_id) REFERENCES Products(product_id),\n    PRIMARY KEY(shop_id, product_id)\n);\nCREATE TABLE Products (\n    product_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    category TEXT,\n    price REAL\n);\n\nINSERT INTO \"Duty_Free_Shops\" (shop_id,name,location) VALUES (1,'Shop1','Terminal A'),(2,'Shop2','Terminal B'),(3,'Shop3','Terminal C'),(4,'Shop4','Terminal D'),(5,'Shop5','Terminal E');\nINSERT INTO \"Duty_Free_Shops_Products\" (shop_id,product_id,quantity) VALUES (1,1,10),(1,2,20),(2,3,15),(2,4,30),(3,1,5),(3,2,10),(4,1,15),(4,3,20),(5,2,25),(5,4,30),(2,1,15),(5,1,25);\nINSERT INTO \"Products\" (product_id,category,price) VALUES (1,'Perfume',90.78),(2,'Cosmetics',65.43),(3,'Electronics',250.89),(4,'Fashion Accessories',150.99),(5,'Toys',20.0);\n",
      "question": "For each duty-free shop, list the price of its products.",
      "gold_queries": [
        "select duty_free_shops.name , products.price from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Calculate the average price of all products sold in each duty-free shop.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT dfs.name, AVG(p.price) AS average_price\nFROM Duty_Free_Shops_Products dfsp\nJOIN Duty_Free_Shops dfs ON dfsp.shop_id = dfs.shop_id\nJOIN Products p ON dfsp.product_id = p.product_id\nGROUP BY dfs.name"
          ]
        },
        {
          "interpretation": "Retrieve the price of every product present in each duty-free shop along with its associated shop name and location.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT D.name, D.location, P.product_id, P.price\nFROM Duty_Free_Shops_Products AS DFSP\nJOIN Duty_Free_Shops AS D ON DFSP.shop_id = D.shop_id\nJOIN Products AS P ON DFSP.product_id = P.product_id"
          ]
        },
        {
          "interpretation": "For each duty-free shop, return a single price representing the total value of all products sold.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT dfs.name, SUM(p.price * dfs_products.quantity) AS total_value\nFROM Duty_Free_Shops dfs\nJOIN Duty_Free_Shops_Products dfs_products ON dfs.shop_id = dfs_products.shop_id\nJOIN Products p ON dfs_products.product_id = p.product_id\nGROUP BY dfs.name"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Airport/scope_duty_free_shops_products/scope_duty_free_shops_products.sqlite",
      "db_dump": "CREATE TABLE Duty_Free_Shops (\n    shop_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Duty_Free_Shops_Products (\n    shop_id INTEGER,\n    product_id INTEGER,\n    quantity INTEGER,\n    FOREIGN KEY(shop_id) REFERENCES Duty_Free_Shops(shop_id),\n    FOREIGN KEY(product_id) REFERENCES Products(product_id),\n    PRIMARY KEY(shop_id, product_id)\n);\nCREATE TABLE Products (\n    product_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    category TEXT,\n    price REAL\n);\n\nINSERT INTO \"Duty_Free_Shops\" (shop_id,name,location) VALUES (1,'Shop1','Terminal A'),(2,'Shop2','Terminal B'),(3,'Shop3','Terminal C'),(4,'Shop4','Terminal D'),(5,'Shop5','Terminal E');\nINSERT INTO \"Duty_Free_Shops_Products\" (shop_id,product_id,quantity) VALUES (1,1,10),(1,2,20),(2,3,15),(2,4,30),(3,1,5),(3,2,10),(4,1,15),(4,3,20),(5,2,25),(5,4,30),(2,1,15),(5,1,25);\nINSERT INTO \"Products\" (product_id,category,price) VALUES (1,'Perfume',90.78),(2,'Cosmetics',65.43),(3,'Electronics',250.89),(4,'Fashion Accessories',150.99),(5,'Toys',20.0);\n",
      "question": "Give me the ids and prices of products that are common to all duty free shops.",
      "gold_queries": [
        "SELECT Products.product_id, Products.price  from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id   GROUP BY Duty_Free_Shops_Products.product_id HAVING COUNT(DISTINCT Duty_Free_Shops_Products.shop_id) = (SELECT COUNT(*) FROM  Duty_Free_Shops)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Find product IDs present in every row of Duty_Free_Shops_Products.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT product_id FROM Duty_Free_Shops_Products GROUP BY product_id HAVING COUNT(DISTINCT shop_id) = (SELECT COUNT(*) FROM Duty_Free_Shops)"
          ]
        },
        {
          "interpretation": "Retrieve product IDs and prices from Products where the product_id is present in all rows of Duty_Free_Shops_Products.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT product_id, price FROM Products WHERE product_id IN (SELECT product_id FROM Duty_Free_Shops_Products GROUP BY product_id HAVING COUNT(DISTINCT shop_id) = (SELECT COUNT(*) FROM Duty_Free_Shops))"
          ]
        },
        {
          "interpretation": "List the distinct product IDs available in all duty free shops and retrieve their prices.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT product_id, price FROM Products"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Airport/scope_duty_free_shops_products/scope_duty_free_shops_products.sqlite",
      "db_dump": "CREATE TABLE Duty_Free_Shops (\n    shop_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Duty_Free_Shops_Products (\n    shop_id INTEGER,\n    product_id INTEGER,\n    quantity INTEGER,\n    FOREIGN KEY(shop_id) REFERENCES Duty_Free_Shops(shop_id),\n    FOREIGN KEY(product_id) REFERENCES Products(product_id),\n    PRIMARY KEY(shop_id, product_id)\n);\nCREATE TABLE Products (\n    product_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    category TEXT,\n    price REAL\n);\n\nINSERT INTO \"Duty_Free_Shops\" (shop_id,name,location) VALUES (1,'Shop1','Terminal A'),(2,'Shop2','Terminal B'),(3,'Shop3','Terminal C'),(4,'Shop4','Terminal D'),(5,'Shop5','Terminal E');\nINSERT INTO \"Duty_Free_Shops_Products\" (shop_id,product_id,quantity) VALUES (1,1,10),(1,2,20),(2,3,15),(2,4,30),(3,1,5),(3,2,10),(4,1,15),(4,3,20),(5,2,25),(5,4,30),(2,1,15),(5,1,25);\nINSERT INTO \"Products\" (product_id,category,price) VALUES (1,'Perfume',90.78),(2,'Cosmetics',65.43),(3,'Electronics',250.89),(4,'Fashion Accessories',150.99),(5,'Toys',20.0);\n",
      "question": "Tell me the ids and categories of the products every shop sells.",
      "gold_queries": [
        "SELECT Products.product_id, Products.category  from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id   GROUP BY Duty_Free_Shops_Products.product_id HAVING COUNT(DISTINCT Duty_Free_Shops_Products.shop_id) = (SELECT COUNT(*) FROM  Duty_Free_Shops)",
        "select duty_free_shops.name , products.product_id , products.category from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For each shop, output a list of product IDs and corresponding product categories.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT D.name, P.product_id, P.category\nFROM Duty_Free_Shops AS D\nJOIN Duty_Free_Shops_Products AS DFS_P ON D.shop_id = DFS_P.shop_id\nJOIN Products AS P ON DFS_P.product_id = P.product_id"
          ]
        },
        {
          "interpretation": "List all distinct product categories sold by each shop.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT df.name, p.category\nFROM Duty_Free_Shops df\nJOIN Duty_Free_Shops_Products dfs_p ON df.shop_id = dfs_p.shop_id\nJOIN Products p ON dfs_p.product_id = p.product_id"
          ]
        },
        {
          "interpretation": "Retrieve the product ID and category for each product sold in every shop.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ds.shop_id, dp.product_id, p.category \nFROM Duty_Free_Shops_Products dp \nJOIN Products p ON dp.product_id = p.product_id \nJOIN Duty_Free_Shops ds ON dp.shop_id = ds.shop_id"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.3333333333333333,
        "f1_score": 0.4,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Airport/scope_duty_free_shops_products/scope_duty_free_shops_products.sqlite",
      "db_dump": "CREATE TABLE Duty_Free_Shops (\n    shop_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Duty_Free_Shops_Products (\n    shop_id INTEGER,\n    product_id INTEGER,\n    quantity INTEGER,\n    FOREIGN KEY(shop_id) REFERENCES Duty_Free_Shops(shop_id),\n    FOREIGN KEY(product_id) REFERENCES Products(product_id),\n    PRIMARY KEY(shop_id, product_id)\n);\nCREATE TABLE Products (\n    product_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    category TEXT,\n    price REAL\n);\n\nINSERT INTO \"Duty_Free_Shops\" (shop_id,name,location) VALUES (1,'Shop1','Terminal A'),(2,'Shop2','Terminal B'),(3,'Shop3','Terminal C'),(4,'Shop4','Terminal D'),(5,'Shop5','Terminal E');\nINSERT INTO \"Duty_Free_Shops_Products\" (shop_id,product_id,quantity) VALUES (1,1,10),(1,2,20),(2,3,15),(2,4,30),(3,1,5),(3,2,10),(4,1,15),(4,3,20),(5,2,25),(5,4,30),(2,1,15),(5,1,25);\nINSERT INTO \"Products\" (product_id,category,price) VALUES (1,'Perfume',90.78),(2,'Cosmetics',65.43),(3,'Electronics',250.89),(4,'Fashion Accessories',150.99),(5,'Toys',20.0);\n",
      "question": "For each duty free shop, what are the corresponding product ids and prices?",
      "gold_queries": [
        "select duty_free_shops.name , products.product_id , products.price from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Return a list of duty free shops with their associated product IDs.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT shop_id, product_id FROM Duty_Free_Shops_Products"
          ]
        },
        {
          "interpretation": "Return a table that includes the shop ID, shop name, product ID, and price for each product sold in all duty free shops.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT dfs.shop_id, dfs.name, dfsp.product_id, p.price \nFROM Duty_Free_Shops dfs \nJOIN Duty_Free_Shops_Products dfsp ON dfs.shop_id = dfsp.shop_id \nJOIN Products p ON dfsp.product_id = p.product_id"
          ]
        },
        {
          "interpretation": "For each shop, list the product IDs and their corresponding prices from the Products table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT dfs.shop_id, dfsp.product_id, p.price\nFROM Duty_Free_Shops_Products dfsp\nJOIN Products p ON dfsp.product_id = p.product_id\nJOIN Duty_Free_Shops dfs ON dfsp.shop_id = dfs.shop_id"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Airport/scope_duty_free_shops_products/scope_duty_free_shops_products.sqlite",
      "db_dump": "CREATE TABLE Duty_Free_Shops (\n    shop_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Duty_Free_Shops_Products (\n    shop_id INTEGER,\n    product_id INTEGER,\n    quantity INTEGER,\n    FOREIGN KEY(shop_id) REFERENCES Duty_Free_Shops(shop_id),\n    FOREIGN KEY(product_id) REFERENCES Products(product_id),\n    PRIMARY KEY(shop_id, product_id)\n);\nCREATE TABLE Products (\n    product_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    category TEXT,\n    price REAL\n);\n\nINSERT INTO \"Duty_Free_Shops\" (shop_id,name,location) VALUES (1,'Shop1','Terminal A'),(2,'Shop2','Terminal B'),(3,'Shop3','Terminal C'),(4,'Shop4','Terminal D'),(5,'Shop5','Terminal E');\nINSERT INTO \"Duty_Free_Shops_Products\" (shop_id,product_id,quantity) VALUES (1,1,10),(1,2,20),(2,3,15),(2,4,30),(3,1,5),(3,2,10),(4,1,15),(4,3,20),(5,2,25),(5,4,30),(2,1,15),(5,1,25);\nINSERT INTO \"Products\" (product_id,category,price) VALUES (1,'Perfume',90.78),(2,'Cosmetics',65.43),(3,'Electronics',250.89),(4,'Fashion Accessories',150.99),(5,'Toys',20.0);\n",
      "question": "For each shop, list the ids and categories of the products they sell.",
      "gold_queries": [
        "select duty_free_shops.name , products.product_id , products.category from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Retrieve the `shop_id` and `category` of all products present in `Duty_Free_Shops_Products`.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.shop_id, T1.category FROM Products AS T1 JOIN Duty_Free_Shops_Products AS T2 ON T1.product_id = T2.product_id"
          ]
        },
        {
          "interpretation": "For each distinct `shop_id` in `Duty_Free_Shops`, return a list of corresponding `product_id` and `category`.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT dfsp.shop_id, p.product_id, p.category\nFROM Duty_Free_Shops_Products dfsp\nJOIN Products p ON dfsp.product_id = p.product_id\nGROUP BY dfsp.shop_id, p.product_id, p.category"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Airport/scope_duty_free_shops_products/scope_duty_free_shops_products.sqlite",
      "db_dump": "CREATE TABLE Duty_Free_Shops (\n    shop_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Duty_Free_Shops_Products (\n    shop_id INTEGER,\n    product_id INTEGER,\n    quantity INTEGER,\n    FOREIGN KEY(shop_id) REFERENCES Duty_Free_Shops(shop_id),\n    FOREIGN KEY(product_id) REFERENCES Products(product_id),\n    PRIMARY KEY(shop_id, product_id)\n);\nCREATE TABLE Products (\n    product_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    category TEXT,\n    price REAL\n);\n\nINSERT INTO \"Duty_Free_Shops\" (shop_id,name,location) VALUES (1,'Shop1','Terminal A'),(2,'Shop2','Terminal B'),(3,'Shop3','Terminal C'),(4,'Shop4','Terminal D'),(5,'Shop5','Terminal E');\nINSERT INTO \"Duty_Free_Shops_Products\" (shop_id,product_id,quantity) VALUES (1,1,10),(1,2,20),(2,3,15),(2,4,30),(3,1,5),(3,2,10),(4,1,15),(4,3,20),(5,2,25),(5,4,30),(2,1,15),(5,1,25);\nINSERT INTO \"Products\" (product_id,category,price) VALUES (1,'Perfume',90.78),(2,'Cosmetics',65.43),(3,'Electronics',250.89),(4,'Fashion Accessories',150.99),(5,'Toys',20.0);\n",
      "question": "What are the ids and categories of the products common to all shops?",
      "gold_queries": [
        "SELECT Products.product_id, Products.category  from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id   GROUP BY Duty_Free_Shops_Products.product_id HAVING COUNT(DISTINCT Duty_Free_Shops_Products.shop_id) = (SELECT COUNT(*) FROM  Duty_Free_Shops)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Product IDs and categories listed in every row of Duty_Free_Shops_Products",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.product_id, T2.category FROM Duty_Free_Shops_Products AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id"
          ]
        },
        {
          "interpretation": "IDs and categories of products with a quantity greater than zero in all shops",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT p.product_id, p.category\nFROM Products p\nWHERE NOT EXISTS (\n    SELECT 1\n    FROM Duty_Free_Shops_Products dfsp\n    WHERE dfsp.product_id = p.product_id\n    AND dfsp.quantity = 0\n)"
          ]
        },
        {
          "interpretation": "Id and category of all products present in every shop",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT product_id, category\nFROM Products\nWHERE product_id IN (\n    SELECT product_id\n    FROM Duty_Free_Shops_Products\n    GROUP BY product_id\n    HAVING COUNT(DISTINCT shop_id) = (SELECT COUNT(*) FROM Duty_Free_Shops)\n)"
          ]
        },
        {
          "interpretation": "Product IDs and categories that appear in shops with the same location",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT p.product_id, p.category\nFROM Products p\nJOIN Duty_Free_Shops_Products dfs_p ON p.product_id = dfs_p.product_id\nJOIN Duty_Free_Shops dfs ON dfs_p.shop_id = dfs.shop_id\nWHERE dfs.location IN (\n    SELECT location\n    FROM Duty_Free_Shops\n    GROUP BY location\n    HAVING COUNT(*) > 1\n)"
          ]
        },
        {
          "interpretation": "Product IDs and categories found in more than half the shops",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT product_id, category\nFROM Products\nWHERE product_id IN (\n    SELECT product_id\n    FROM Duty_Free_Shops_Products\n    GROUP BY product_id\n    HAVING COUNT(DISTINCT shop_id) > (SELECT COUNT(*) FROM Duty_Free_Shops) / 2\n)"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Airport/scope_duty_free_shops_products/scope_duty_free_shops_products.sqlite",
      "db_dump": "CREATE TABLE Duty_Free_Shops (\n    shop_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Duty_Free_Shops_Products (\n    shop_id INTEGER,\n    product_id INTEGER,\n    quantity INTEGER,\n    FOREIGN KEY(shop_id) REFERENCES Duty_Free_Shops(shop_id),\n    FOREIGN KEY(product_id) REFERENCES Products(product_id),\n    PRIMARY KEY(shop_id, product_id)\n);\nCREATE TABLE Products (\n    product_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    category TEXT,\n    price REAL\n);\n\nINSERT INTO \"Duty_Free_Shops\" (shop_id,name,location) VALUES (1,'Shop1','Terminal A'),(2,'Shop2','Terminal B'),(3,'Shop3','Terminal C'),(4,'Shop4','Terminal D'),(5,'Shop5','Terminal E');\nINSERT INTO \"Duty_Free_Shops_Products\" (shop_id,product_id,quantity) VALUES (1,1,10),(1,2,20),(2,3,15),(2,4,30),(3,1,5),(3,2,10),(4,1,15),(4,3,20),(5,2,25),(5,4,30),(2,1,15),(5,1,25);\nINSERT INTO \"Products\" (product_id,category,price) VALUES (1,'Perfume',90.78),(2,'Cosmetics',65.43),(3,'Electronics',250.89),(4,'Fashion Accessories',150.99),(5,'Toys',20.0);\n",
      "question": "List the price of products sold in every duty-free shop.",
      "gold_queries": [
        "SELECT Products.price  from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id   GROUP BY Duty_Free_Shops_Products.product_id HAVING COUNT(DISTINCT Duty_Free_Shops_Products.shop_id) = (SELECT COUNT(*) FROM  Duty_Free_Shops)",
        "select duty_free_shops.name , products.price from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Display the prices of products available in each duty-free shop.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DFS.name, P.price\nFROM Duty_Free_Shops DFS\nJOIN Duty_Free_Shops_Products DFSP ON DFS.shop_id = DFSP.shop_id\nJOIN Products P ON DFSP.product_id = P.product_id"
          ]
        },
        {
          "interpretation": "List each product's price from all duty-free shops.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT price FROM Products"
          ]
        },
        {
          "interpretation": "Retrieve the associated price for every product found in a duty-free shop.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT p.product_id, p.price\nFROM Products p\nJOIN Duty_Free_Shops_Products dfs_p ON p.product_id = dfs_p.product_id"
          ]
        },
        {
          "interpretation": "For each duty-free shop, show the price for each product it carries.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DS.name, P.category, P.price\nFROM Duty_Free_Shops DS\nJOIN Duty_Free_Shops_Products DFS_P ON DS.shop_id = DFS_P.shop_id\nJOIN Products P ON DFS_P.product_id = P.product_id"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.25,
        "f1_score": 0.3333333333333333,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Airport/scope_duty_free_shops_products/scope_duty_free_shops_products.sqlite",
      "db_dump": "CREATE TABLE Duty_Free_Shops (\n    shop_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Duty_Free_Shops_Products (\n    shop_id INTEGER,\n    product_id INTEGER,\n    quantity INTEGER,\n    FOREIGN KEY(shop_id) REFERENCES Duty_Free_Shops(shop_id),\n    FOREIGN KEY(product_id) REFERENCES Products(product_id),\n    PRIMARY KEY(shop_id, product_id)\n);\nCREATE TABLE Products (\n    product_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    category TEXT,\n    price REAL\n);\n\nINSERT INTO \"Duty_Free_Shops\" (shop_id,name,location) VALUES (1,'Shop1','Terminal A'),(2,'Shop2','Terminal B'),(3,'Shop3','Terminal C'),(4,'Shop4','Terminal D'),(5,'Shop5','Terminal E');\nINSERT INTO \"Duty_Free_Shops_Products\" (shop_id,product_id,quantity) VALUES (1,1,10),(1,2,20),(2,3,15),(2,4,30),(3,1,5),(3,2,10),(4,1,15),(4,3,20),(5,2,25),(5,4,30),(2,1,15),(5,1,25);\nINSERT INTO \"Products\" (product_id,category,price) VALUES (1,'Perfume',90.78),(2,'Cosmetics',65.43),(3,'Electronics',250.89),(4,'Fashion Accessories',150.99),(5,'Toys',20.0);\n",
      "question": "For each duty free shop, list the ids, categories and prices of the products being sold.",
      "gold_queries": [
        "select duty_free_shops.name , products.product_id , products.category , products.price from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For each duty free shop, list the IDs, categories, and prices of all products sold, including duplicates.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT dfs.shop_id, p.category, p.price\nFROM Duty_Free_Shops_Products dfs_p\nJOIN Duty_Free_Shops dfs ON dfs_p.shop_id = dfs.shop_id\nJOIN Products p ON dfs_p.product_id = p.product_id"
          ]
        },
        {
          "interpretation": "List, for each duty free shop, the IDs of the products sold in that shop.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT shop_id, product_id FROM Duty_Free_Shops_Products"
          ]
        },
        {
          "interpretation": "For each duty free shop, list the categories and prices of all products sold.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT dfs.name, p.category, p.price\nFROM Duty_Free_Shops dfs\nJOIN Duty_Free_Shops_Products dfs_p ON dfs.shop_id = dfs_p.shop_id\nJOIN Products p ON dfs_p.product_id = p.product_id"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Airport/scope_duty_free_shops_products/scope_duty_free_shops_products.sqlite",
      "db_dump": "CREATE TABLE Duty_Free_Shops (\n    shop_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Duty_Free_Shops_Products (\n    shop_id INTEGER,\n    product_id INTEGER,\n    quantity INTEGER,\n    FOREIGN KEY(shop_id) REFERENCES Duty_Free_Shops(shop_id),\n    FOREIGN KEY(product_id) REFERENCES Products(product_id),\n    PRIMARY KEY(shop_id, product_id)\n);\nCREATE TABLE Products (\n    product_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    category TEXT,\n    price REAL\n);\n\nINSERT INTO \"Duty_Free_Shops\" (shop_id,name,location) VALUES (1,'Shop1','Terminal A'),(2,'Shop2','Terminal B'),(3,'Shop3','Terminal C'),(4,'Shop4','Terminal D'),(5,'Shop5','Terminal E');\nINSERT INTO \"Duty_Free_Shops_Products\" (shop_id,product_id,quantity) VALUES (1,1,10),(1,2,20),(2,3,15),(2,4,30),(3,1,5),(3,2,10),(4,1,15),(4,3,20),(5,2,25),(5,4,30),(2,1,15),(5,1,25);\nINSERT INTO \"Products\" (product_id,category,price) VALUES (1,'Perfume',90.78),(2,'Cosmetics',65.43),(3,'Electronics',250.89),(4,'Fashion Accessories',150.99),(5,'Toys',20.0);\n",
      "question": "What are the categories and prices of the products common to all duty free shops?",
      "gold_queries": [
        "SELECT Products.category, Products.price  from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id   GROUP BY Duty_Free_Shops_Products.product_id HAVING COUNT(DISTINCT Duty_Free_Shops_Products.shop_id) = (SELECT COUNT(*) FROM  Duty_Free_Shops)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Determine the common product categories and their prices across all duty-free shops.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT category, price FROM Products"
          ]
        },
        {
          "interpretation": "Find all product categories and their corresponding prices that appear in every duty-free shop.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT P.category, P.price\nFROM Products P\nWHERE NOT EXISTS (\n    SELECT 1\n    FROM Duty_Free_Shops DFS\n    WHERE NOT EXISTS (\n        SELECT 1\n        FROM Duty_Free_Shops_Products DFS_P\n        WHERE DFS_P.shop_id = DFS.shop_id AND DFS_P.product_id = P.product_id\n    )\n)"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Airport/scope_duty_free_shops_products/scope_duty_free_shops_products.sqlite",
      "db_dump": "CREATE TABLE Duty_Free_Shops (\n    shop_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Duty_Free_Shops_Products (\n    shop_id INTEGER,\n    product_id INTEGER,\n    quantity INTEGER,\n    FOREIGN KEY(shop_id) REFERENCES Duty_Free_Shops(shop_id),\n    FOREIGN KEY(product_id) REFERENCES Products(product_id),\n    PRIMARY KEY(shop_id, product_id)\n);\nCREATE TABLE Products (\n    product_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    category TEXT,\n    price REAL\n);\n\nINSERT INTO \"Duty_Free_Shops\" (shop_id,name,location) VALUES (1,'Shop1','Terminal A'),(2,'Shop2','Terminal B'),(3,'Shop3','Terminal C'),(4,'Shop4','Terminal D'),(5,'Shop5','Terminal E');\nINSERT INTO \"Duty_Free_Shops_Products\" (shop_id,product_id,quantity) VALUES (1,1,10),(1,2,20),(2,3,15),(2,4,30),(3,1,5),(3,2,10),(4,1,15),(4,3,20),(5,2,25),(5,4,30),(2,1,15),(5,1,25);\nINSERT INTO \"Products\" (product_id,category,price) VALUES (1,'Perfume',90.78),(2,'Cosmetics',65.43),(3,'Electronics',250.89),(4,'Fashion Accessories',150.99),(5,'Toys',20.0);\n",
      "question": "Give me the ids and prices of products that each duty free shop has.",
      "gold_queries": [
        "SELECT Products.product_id, Products.price  from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id   GROUP BY Duty_Free_Shops_Products.product_id HAVING COUNT(DISTINCT Duty_Free_Shops_Products.shop_id) = (SELECT COUNT(*) FROM  Duty_Free_Shops)",
        "select duty_free_shops.name , products.product_id , products.price from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Retrieve the shop_id and prices of all products from Duty_Free_Shops_Products.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.shop_id, T2.price FROM Duty_Free_Shops_Products AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id"
          ]
        },
        {
          "interpretation": "Provide a list of shops and for each shop, list the product IDs and prices.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT D.name, DS.product_id, P.price \nFROM Duty_Free_Shops D \nJOIN Duty_Free_Shops_Products DS ON D.shop_id = DS.shop_id \nJOIN Products P ON DS.product_id = P.product_id"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.5,
        "f1_score": 0.5,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Airport/scope_duty_free_shops_products/scope_duty_free_shops_products.sqlite",
      "db_dump": "CREATE TABLE Duty_Free_Shops (\n    shop_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Duty_Free_Shops_Products (\n    shop_id INTEGER,\n    product_id INTEGER,\n    quantity INTEGER,\n    FOREIGN KEY(shop_id) REFERENCES Duty_Free_Shops(shop_id),\n    FOREIGN KEY(product_id) REFERENCES Products(product_id),\n    PRIMARY KEY(shop_id, product_id)\n);\nCREATE TABLE Products (\n    product_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    category TEXT,\n    price REAL\n);\n\nINSERT INTO \"Duty_Free_Shops\" (shop_id,name,location) VALUES (1,'Shop1','Terminal A'),(2,'Shop2','Terminal B'),(3,'Shop3','Terminal C'),(4,'Shop4','Terminal D'),(5,'Shop5','Terminal E');\nINSERT INTO \"Duty_Free_Shops_Products\" (shop_id,product_id,quantity) VALUES (1,1,10),(1,2,20),(2,3,15),(2,4,30),(3,1,5),(3,2,10),(4,1,15),(4,3,20),(5,2,25),(5,4,30),(2,1,15),(5,1,25);\nINSERT INTO \"Products\" (product_id,category,price) VALUES (1,'Perfume',90.78),(2,'Cosmetics',65.43),(3,'Electronics',250.89),(4,'Fashion Accessories',150.99),(5,'Toys',20.0);\n",
      "question": "Tell me about the ids, categories and prices of the products every duty free shop sells.",
      "gold_queries": [
        "SELECT Products.product_id, Products.category, Products.price  from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id   GROUP BY Duty_Free_Shops_Products.product_id HAVING COUNT(DISTINCT Duty_Free_Shops_Products.shop_id) = (SELECT COUNT(*) FROM  Duty_Free_Shops)",
        "select duty_free_shops.name , products.product_id , products.category , products.price from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Return a list of each shop's id, along with a list of the product ids, categories, and prices for all products sold in that shop.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT dfs.shop_id, p.product_id, p.category, p.price\nFROM Duty_Free_Shops_Products dfs_products\nJOIN Duty_Free_Shops dfs ON dfs_products.shop_id = dfs.shop_id\nJOIN Products p ON dfs_products.product_id = p.product_id"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Airport/scope_duty_free_shops_products/scope_duty_free_shops_products.sqlite",
      "db_dump": "CREATE TABLE Duty_Free_Shops (\n    shop_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Duty_Free_Shops_Products (\n    shop_id INTEGER,\n    product_id INTEGER,\n    quantity INTEGER,\n    FOREIGN KEY(shop_id) REFERENCES Duty_Free_Shops(shop_id),\n    FOREIGN KEY(product_id) REFERENCES Products(product_id),\n    PRIMARY KEY(shop_id, product_id)\n);\nCREATE TABLE Products (\n    product_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    category TEXT,\n    price REAL\n);\n\nINSERT INTO \"Duty_Free_Shops\" (shop_id,name,location) VALUES (1,'Shop1','Terminal A'),(2,'Shop2','Terminal B'),(3,'Shop3','Terminal C'),(4,'Shop4','Terminal D'),(5,'Shop5','Terminal E');\nINSERT INTO \"Duty_Free_Shops_Products\" (shop_id,product_id,quantity) VALUES (1,1,10),(1,2,20),(2,3,15),(2,4,30),(3,1,5),(3,2,10),(4,1,15),(4,3,20),(5,2,25),(5,4,30),(2,1,15),(5,1,25);\nINSERT INTO \"Products\" (product_id,category,price) VALUES (1,'Perfume',90.78),(2,'Cosmetics',65.43),(3,'Electronics',250.89),(4,'Fashion Accessories',150.99),(5,'Toys',20.0);\n",
      "question": "What are the ids, categories and prices of the products common to all duty free shops?",
      "gold_queries": [
        "SELECT Products.product_id, Products.category, Products.price  from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id   GROUP BY Duty_Free_Shops_Products.product_id HAVING COUNT(DISTINCT Duty_Free_Shops_Products.shop_id) = (SELECT COUNT(*) FROM  Duty_Free_Shops)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Find the product_id that appears in all duty free shops and return the product category and price.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.category, P.price\nFROM Products P\nWHERE NOT EXISTS (\n    SELECT D.shop_id\n    FROM Duty_Free_Shops D\n    WHERE NOT EXISTS (\n        SELECT 1\n        FROM Duty_Free_Shops_Products DF\n        WHERE DF.shop_id = D.shop_id AND DF.product_id = P.product_id\n    )\n)"
          ]
        },
        {
          "interpretation": "Return the product_id, category and price from Products where product_id is present in all rows of Duty_Free_Shops_Products",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT product_id, category, price \nFROM Products \nWHERE product_id IN (\n    SELECT product_id \n    FROM Duty_Free_Shops_Products\n    GROUP BY product_id\n    HAVING COUNT(DISTINCT shop_id) = (SELECT COUNT(*) FROM Duty_Free_Shops)\n)"
          ]
        },
        {
          "interpretation": "List the distinct product_id present in every instance of Duty_Free_Shops_Products and retrieve the category and price from the Products table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT p.category, p.price \nFROM Products p \nJOIN Duty_Free_Shops_Products dfsp ON p.product_id = dfsp.product_id"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Agriculture/scope_agroforestry_systems_species/scope_agroforestry_systems_species.sqlite",
      "db_dump": "CREATE TABLE Agroforestry_Systems(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    system_name TEXT,\n    description TEXT\n);\nCREATE TABLE Farmers(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    email TEXT\n);\nCREATE TABLE Farms(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    farm_name TEXT,\n    location TEXT\n);\nCREATE TABLE Species(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT\n);\nCREATE TABLE System_Farms(\n    agroforestry_system_id INTEGER,\n    farm_id INTEGER,\n    FOREIGN KEY(agroforestry_system_id) REFERENCES Agroforestry_Systems(id),\n    FOREIGN KEY(farm_id) REFERENCES Farms(id),\n    PRIMARY KEY(agroforestry_system_id, farm_id)\n);\nCREATE TABLE System_Species(\n    agroforestry_system_id INTEGER,\n    species_id INTEGER,\n    FOREIGN KEY(agroforestry_system_id) REFERENCES Agroforestry_Systems(id),\n    FOREIGN KEY(species_id) REFERENCES Species(id),\n    PRIMARY KEY(agroforestry_system_id, species_id)\n);\nCREATE TABLE Works_On(\n    farmer_id INTEGER,\n    farm_id INTEGER,\n    FOREIGN KEY(farmer_id) REFERENCES Farmers(id),\n    FOREIGN KEY(farm_id) REFERENCES Farms(id),\n    PRIMARY KEY(farmer_id, farm_id)\n);\n\nINSERT INTO \"Agroforestry_Systems\" (id,system_name,description) VALUES (1,'Silvopasture','A system where trees, livestock, and forages coexist.'),(2,'Alley Cropping','Trees are planted alongside crops to provide shade and reduce erosion.'),(3,'Forest Gardening','A diverse, multi-layered plant community based on woodland ecosystems.'),(4,'Riparian Buffer','Strips of vegetation along waterways to filter runoff.'),(5,'Windbreak','Rows of trees used to block wind.');\nINSERT INTO \"Farmers\" (id,first_name,last_name,email) VALUES (1,'John','Doe','john.doe@email.com'),(2,'Jane','Smith','jane.smith@email.com'),(3,'Bob','Johnson','bob.johnson@email.com'),(4,'Emily','Williams','emily.williams@email.com'),(5,'Tom','Brown','tom.brown@email.com');\nINSERT INTO \"Farms\" (id,farm_name,location) VALUES (1,'Sunny Acres','123 Main St, Ruralville'),(2,'Green Pastures','456 Elm St, Hometown'),(3,'Orchard Haven','789 Oak Lane, Fruitful City'),(4,'Meadow View','101 Pine St, Seedling County'),(5,'Timber Ridge','202 Cedar Ave, Lumbertown');\nINSERT INTO \"Species\" (id,name) VALUES (1,'Oak'),(2,'Apple'),(3,'Cherry'),(4,'Peach'),(5,'Plum');\nINSERT INTO \"System_Species\" (agroforestry_system_id,species_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\n",
      "question": "Which species are the same for all agroforestry systems?",
      "gold_queries": [
        "SELECT Species.name  from System_Species join Species on System_Species.species_id = Species.id join Agroforestry_Systems on System_Species.agroforestry_system_id = Agroforestry_Systems.id   GROUP BY System_Species.species_id HAVING COUNT(DISTINCT System_Species.agroforestry_system_id) = (SELECT COUNT(*) FROM  Agroforestry_Systems)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Find species common to each agroforestry system record.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT system_name, GROUP_CONCAT(name) AS common_species\nFROM Agroforestry_Systems AS agro\nJOIN System_Species AS sys_spec ON agro.id = sys_spec.agroforestry_system_id\nJOIN Species AS spec ON sys_spec.species_id = spec.id\nGROUP BY system_name"
          ]
        },
        {
          "interpretation": "List all species present in every agroforestry system.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT s.name\nFROM Species s\nWHERE NOT EXISTS (\n    SELECT 1\n    FROM Agroforestry_Systems asys\n    WHERE NOT EXISTS (\n        SELECT 1\n        FROM System_Species ss\n        WHERE ss.agroforestry_system_id = asys.id AND ss.species_id = s.id\n    )\n)"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Agriculture/scope_agroforestry_systems_species/scope_agroforestry_systems_species.sqlite",
      "db_dump": "CREATE TABLE Agroforestry_Systems(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    system_name TEXT,\n    description TEXT\n);\nCREATE TABLE Farmers(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    email TEXT\n);\nCREATE TABLE Farms(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    farm_name TEXT,\n    location TEXT\n);\nCREATE TABLE Species(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT\n);\nCREATE TABLE System_Farms(\n    agroforestry_system_id INTEGER,\n    farm_id INTEGER,\n    FOREIGN KEY(agroforestry_system_id) REFERENCES Agroforestry_Systems(id),\n    FOREIGN KEY(farm_id) REFERENCES Farms(id),\n    PRIMARY KEY(agroforestry_system_id, farm_id)\n);\nCREATE TABLE System_Species(\n    agroforestry_system_id INTEGER,\n    species_id INTEGER,\n    FOREIGN KEY(agroforestry_system_id) REFERENCES Agroforestry_Systems(id),\n    FOREIGN KEY(species_id) REFERENCES Species(id),\n    PRIMARY KEY(agroforestry_system_id, species_id)\n);\nCREATE TABLE Works_On(\n    farmer_id INTEGER,\n    farm_id INTEGER,\n    FOREIGN KEY(farmer_id) REFERENCES Farmers(id),\n    FOREIGN KEY(farm_id) REFERENCES Farms(id),\n    PRIMARY KEY(farmer_id, farm_id)\n);\n\nINSERT INTO \"Agroforestry_Systems\" (id,system_name,description) VALUES (1,'Silvopasture','A system where trees, livestock, and forages coexist.'),(2,'Alley Cropping','Trees are planted alongside crops to provide shade and reduce erosion.'),(3,'Forest Gardening','A diverse, multi-layered plant community based on woodland ecosystems.'),(4,'Riparian Buffer','Strips of vegetation along waterways to filter runoff.'),(5,'Windbreak','Rows of trees used to block wind.');\nINSERT INTO \"Farmers\" (id,first_name,last_name,email) VALUES (1,'John','Doe','john.doe@email.com'),(2,'Jane','Smith','jane.smith@email.com'),(3,'Bob','Johnson','bob.johnson@email.com'),(4,'Emily','Williams','emily.williams@email.com'),(5,'Tom','Brown','tom.brown@email.com');\nINSERT INTO \"Farms\" (id,farm_name,location) VALUES (1,'Sunny Acres','123 Main St, Ruralville'),(2,'Green Pastures','456 Elm St, Hometown'),(3,'Orchard Haven','789 Oak Lane, Fruitful City'),(4,'Meadow View','101 Pine St, Seedling County'),(5,'Timber Ridge','202 Cedar Ave, Lumbertown');\nINSERT INTO \"Species\" (id,name) VALUES (1,'Oak'),(2,'Apple'),(3,'Cherry'),(4,'Peach'),(5,'Plum');\nINSERT INTO \"System_Species\" (agroforestry_system_id,species_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\n",
      "question": "For every agroforestry system, show the species that they contain.",
      "gold_queries": [
        "select agroforestry_systems.system_name , species.name from System_Species join Species on System_Species.species_id = Species.id join Agroforestry_Systems on System_Species.agroforestry_system_id = Agroforestry_Systems.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Determine the species composition of all agroforestry systems.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Agroforestry_Systems.system_name, Species.name \nFROM System_Species \nJOIN Agroforestry_Systems ON System_Species.agroforestry_system_id = Agroforestry_Systems.id \nJOIN Species ON System_Species.species_id = Species.id"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Agriculture/scope_agroforestry_systems_species/scope_agroforestry_systems_species.sqlite",
      "db_dump": "CREATE TABLE Agroforestry_Systems(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    system_name TEXT,\n    description TEXT\n);\nCREATE TABLE Farmers(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    email TEXT\n);\nCREATE TABLE Farms(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    farm_name TEXT,\n    location TEXT\n);\nCREATE TABLE Species(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT\n);\nCREATE TABLE System_Farms(\n    agroforestry_system_id INTEGER,\n    farm_id INTEGER,\n    FOREIGN KEY(agroforestry_system_id) REFERENCES Agroforestry_Systems(id),\n    FOREIGN KEY(farm_id) REFERENCES Farms(id),\n    PRIMARY KEY(agroforestry_system_id, farm_id)\n);\nCREATE TABLE System_Species(\n    agroforestry_system_id INTEGER,\n    species_id INTEGER,\n    FOREIGN KEY(agroforestry_system_id) REFERENCES Agroforestry_Systems(id),\n    FOREIGN KEY(species_id) REFERENCES Species(id),\n    PRIMARY KEY(agroforestry_system_id, species_id)\n);\nCREATE TABLE Works_On(\n    farmer_id INTEGER,\n    farm_id INTEGER,\n    FOREIGN KEY(farmer_id) REFERENCES Farmers(id),\n    FOREIGN KEY(farm_id) REFERENCES Farms(id),\n    PRIMARY KEY(farmer_id, farm_id)\n);\n\nINSERT INTO \"Agroforestry_Systems\" (id,system_name,description) VALUES (1,'Silvopasture','A system where trees, livestock, and forages coexist.'),(2,'Alley Cropping','Trees are planted alongside crops to provide shade and reduce erosion.'),(3,'Forest Gardening','A diverse, multi-layered plant community based on woodland ecosystems.'),(4,'Riparian Buffer','Strips of vegetation along waterways to filter runoff.'),(5,'Windbreak','Rows of trees used to block wind.');\nINSERT INTO \"Farmers\" (id,first_name,last_name,email) VALUES (1,'John','Doe','john.doe@email.com'),(2,'Jane','Smith','jane.smith@email.com'),(3,'Bob','Johnson','bob.johnson@email.com'),(4,'Emily','Williams','emily.williams@email.com'),(5,'Tom','Brown','tom.brown@email.com');\nINSERT INTO \"Farms\" (id,farm_name,location) VALUES (1,'Sunny Acres','123 Main St, Ruralville'),(2,'Green Pastures','456 Elm St, Hometown'),(3,'Orchard Haven','789 Oak Lane, Fruitful City'),(4,'Meadow View','101 Pine St, Seedling County'),(5,'Timber Ridge','202 Cedar Ave, Lumbertown');\nINSERT INTO \"Species\" (id,name) VALUES (1,'Oak'),(2,'Apple'),(3,'Cherry'),(4,'Peach'),(5,'Plum');\nINSERT INTO \"System_Species\" (agroforestry_system_id,species_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\n",
      "question": "Give me the species that each agroforestry system contains.",
      "gold_queries": [
        "SELECT Species.name  from System_Species join Species on System_Species.species_id = Species.id join Agroforestry_Systems on System_Species.agroforestry_system_id = Agroforestry_Systems.id   GROUP BY System_Species.species_id HAVING COUNT(DISTINCT System_Species.agroforestry_system_id) = (SELECT COUNT(*) FROM  Agroforestry_Systems)",
        "select agroforestry_systems.system_name , species.name from System_Species join Species on System_Species.species_id = Species.id join Agroforestry_Systems on System_Species.agroforestry_system_id = Agroforestry_Systems.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List the species present in each agroforestry system.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Agroforestry_Systems.system_name, Species.name\nFROM Agroforestry_Systems\nJOIN System_Species ON Agroforestry_Systems.id = System_Species.agroforestry_system_id\nJOIN Species ON System_Species.species_id = Species.id"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 1.0,
        "f1_score": 0.6666666666666666,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Airport/scope_duty_free_shops_products/scope_duty_free_shops_products.sqlite",
      "db_dump": "CREATE TABLE Duty_Free_Shops (\n    shop_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Duty_Free_Shops_Products (\n    shop_id INTEGER,\n    product_id INTEGER,\n    quantity INTEGER,\n    FOREIGN KEY(shop_id) REFERENCES Duty_Free_Shops(shop_id),\n    FOREIGN KEY(product_id) REFERENCES Products(product_id),\n    PRIMARY KEY(shop_id, product_id)\n);\nCREATE TABLE Products (\n    product_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    category TEXT,\n    price REAL\n);\n\nINSERT INTO \"Duty_Free_Shops\" (shop_id,name,location) VALUES (1,'Shop1','Terminal A'),(2,'Shop2','Terminal B'),(3,'Shop3','Terminal C'),(4,'Shop4','Terminal D'),(5,'Shop5','Terminal E');\nINSERT INTO \"Duty_Free_Shops_Products\" (shop_id,product_id,quantity) VALUES (1,1,10),(1,2,20),(2,3,15),(2,4,30),(3,1,5),(3,2,10),(4,1,15),(4,3,20),(5,2,25),(5,4,30),(2,1,15),(5,1,25);\nINSERT INTO \"Products\" (product_id,category,price) VALUES (1,'Perfume',90.78),(2,'Cosmetics',65.43),(3,'Electronics',250.89),(4,'Fashion Accessories',150.99),(5,'Toys',20.0);\n",
      "question": "For every duty free shop, list the categories and prices of the products sold.",
      "gold_queries": [
        "select duty_free_shops.name , products.category , products.price from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Produce a table with columns for each duty free shop, and within each shop, list the product categories and their corresponding prices.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT \n    dfs.name AS Shop,\n    p.category AS Category,\n    p.price AS Price\nFROM \n    Duty_Free_Shops dfs\nJOIN \n    Duty_Free_Shops_Products dfs_products ON dfs.shop_id = dfs_products.shop_id\nJOIN \n    Products p ON dfs_products.product_id = p.product_id\nORDER BY \n    dfs.name, p.category"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Airport/scope_duty_free_shops_products/scope_duty_free_shops_products.sqlite",
      "db_dump": "CREATE TABLE Duty_Free_Shops (\n    shop_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Duty_Free_Shops_Products (\n    shop_id INTEGER,\n    product_id INTEGER,\n    quantity INTEGER,\n    FOREIGN KEY(shop_id) REFERENCES Duty_Free_Shops(shop_id),\n    FOREIGN KEY(product_id) REFERENCES Products(product_id),\n    PRIMARY KEY(shop_id, product_id)\n);\nCREATE TABLE Products (\n    product_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    category TEXT,\n    price REAL\n);\n\nINSERT INTO \"Duty_Free_Shops\" (shop_id,name,location) VALUES (1,'Shop1','Terminal A'),(2,'Shop2','Terminal B'),(3,'Shop3','Terminal C'),(4,'Shop4','Terminal D'),(5,'Shop5','Terminal E');\nINSERT INTO \"Duty_Free_Shops_Products\" (shop_id,product_id,quantity) VALUES (1,1,10),(1,2,20),(2,3,15),(2,4,30),(3,1,5),(3,2,10),(4,1,15),(4,3,20),(5,2,25),(5,4,30),(2,1,15),(5,1,25);\nINSERT INTO \"Products\" (product_id,category,price) VALUES (1,'Perfume',90.78),(2,'Cosmetics',65.43),(3,'Electronics',250.89),(4,'Fashion Accessories',150.99),(5,'Toys',20.0);\n",
      "question": "List the price of products that are common to all duty-free shops.",
      "gold_queries": [
        "SELECT Products.price  from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id   GROUP BY Duty_Free_Shops_Products.product_id HAVING COUNT(DISTINCT Duty_Free_Shops_Products.shop_id) = (SELECT COUNT(*) FROM  Duty_Free_Shops)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "list the price of the products appearing in every entry of Duty_Free_Shops_Products.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT p.price \nFROM Products p \nWHERE p.product_id IN (\n    SELECT d.product_id \n    FROM Duty_Free_Shops_Products d\n    GROUP BY d.product_id \n    HAVING COUNT(d.shop_id) = (SELECT COUNT(*) FROM Duty_Free_Shops)\n)"
          ]
        },
        {
          "interpretation": "Find the price of products sold in every duty-free shop.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.product_id, D.name, P.price \nFROM Products P \nJOIN Duty_Free_Shops_Products DFS_P ON P.product_id = DFS_P.product_id \nJOIN Duty_Free_Shops D ON DFS_P.shop_id = D.shop_id"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Airport/scope_duty_free_shops_products/scope_duty_free_shops_products.sqlite",
      "db_dump": "CREATE TABLE Duty_Free_Shops (\n    shop_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Duty_Free_Shops_Products (\n    shop_id INTEGER,\n    product_id INTEGER,\n    quantity INTEGER,\n    FOREIGN KEY(shop_id) REFERENCES Duty_Free_Shops(shop_id),\n    FOREIGN KEY(product_id) REFERENCES Products(product_id),\n    PRIMARY KEY(shop_id, product_id)\n);\nCREATE TABLE Products (\n    product_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    category TEXT,\n    price REAL\n);\n\nINSERT INTO \"Duty_Free_Shops\" (shop_id,name,location) VALUES (1,'Shop1','Terminal A'),(2,'Shop2','Terminal B'),(3,'Shop3','Terminal C'),(4,'Shop4','Terminal D'),(5,'Shop5','Terminal E');\nINSERT INTO \"Duty_Free_Shops_Products\" (shop_id,product_id,quantity) VALUES (1,1,10),(1,2,20),(2,3,15),(2,4,30),(3,1,5),(3,2,10),(4,1,15),(4,3,20),(5,2,25),(5,4,30),(2,1,15),(5,1,25);\nINSERT INTO \"Products\" (product_id,category,price) VALUES (1,'Perfume',90.78),(2,'Cosmetics',65.43),(3,'Electronics',250.89),(4,'Fashion Accessories',150.99),(5,'Toys',20.0);\n",
      "question": "Show me the categories and prices of the products every duty free shop sells.",
      "gold_queries": [
        "SELECT Products.category, Products.price  from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id   GROUP BY Duty_Free_Shops_Products.product_id HAVING COUNT(DISTINCT Duty_Free_Shops_Products.shop_id) = (SELECT COUNT(*) FROM  Duty_Free_Shops)",
        "select duty_free_shops.name , products.category , products.price from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List the unique product categories and their prices from all duty free shops.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT category, price FROM Products"
          ]
        },
        {
          "interpretation": "For each duty free shop, show the categories and prices of all products they offer.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DFS.name, P.category, P.price\nFROM Duty_Free_Shops DFS\nJOIN Duty_Free_Shops_Products DFSP ON DFS.shop_id = DFSP.shop_id\nJOIN Products P ON DFSP.product_id = P.product_id"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.5,
        "f1_score": 0.5,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Banking/scope_bank_training_topics/scope_bank_training_topics.sqlite",
      "db_dump": "CREATE TABLE Bank_Training (\n    training_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    bank_id INTEGER,\n    employee_id INTEGER,\n    FOREIGN KEY(bank_id) REFERENCES Banks(id),\n    FOREIGN KEY(employee_id) REFERENCES Employees(id)\n);\nCREATE TABLE Bank_Training_Topics (\n    bank_training_id INTEGER,\n    topic_id INTEGER,\n    FOREIGN KEY(bank_training_id) REFERENCES Bank_Training(training_id),\n    FOREIGN KEY(topic_id) REFERENCES Topics(id),\n    PRIMARY KEY(bank_training_id, topic_id)\n);\nCREATE TABLE Banks (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Employees (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    bank_id INTEGER,\n    FOREIGN KEY(bank_id) REFERENCES Banks(id)\n);\nCREATE TABLE Topics (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    value TEXT\n);\nCREATE TABLE TrainingSessions (\n    session_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date DATETIME,\n    trainer_id INTEGER,\n    topic_id INTEGER,\n    FOREIGN KEY(trainer_id) REFERENCES Employees(id),\n    FOREIGN KEY(topic_id) REFERENCES Topics(id)\n);\n\nINSERT INTO \"Bank_Training\" (training_id,bank_id,employee_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Bank_Training_Topics\" (bank_training_id,topic_id) VALUES (1,1),(1,2),(2,1),(2,2),(3,1),(4,1),(5,1);\nINSERT INTO \"Banks\" (id,name,location) VALUES (1,'ABC Bank','New York'),(2,'XYZ Bank','California'),(3,'LMN Bank','Texas'),(4,'PQR Bank','Florida'),(5,'STU Bank','Illinois');\nINSERT INTO \"Employees\" (id,first_name,last_name,bank_id) VALUES (1,'John','Doe',1),(2,'Jane','Smith',2),(3,'Mike','Brown',3),(4,'Emma','White',4),(5,'Tom','Black',5);\nINSERT INTO \"Topics\" (id,value) VALUES (1,'Customer Service Skills'),(2,'Fraud Prevention'),(3,'Interest Rate Management'),(4,'Loan Processing'),(5,'Investment Strategies');\nINSERT INTO \"TrainingSessions\" (session_id,date,trainer_id,topic_id) VALUES (1,'2021-10-01 09:00:00',1,1),(2,'2021-10-08 09:00:00',2,2),(3,'2021-10-15 09:00:00',3,1),(4,'2021-10-22 09:00:00',4,2),(5,'2021-10-29 09:00:00',5,1);\n",
      "question": "For each bank training session, provide the corresponding value of topics.",
      "gold_queries": [
        "select bank_training.training_id , topics.value from Bank_Training_Topics join Topics on Bank_Training_Topics.topic_id = Topics.id join Bank_Training on Bank_Training_Topics.bank_training_id = Bank_Training.training_id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Retrieve the topic value for each bank training session record.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T.value \nFROM TrainingSessions AS TS \nJOIN Topics AS T ON TS.topic_id = T.id"
          ]
        },
        {
          "interpretation": "Find the topic associated with each training session in Bank_Training_Topics.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T.value FROM Bank_Training_Topics AS BT JOIN Topics AS T ON BT.topic_id = T.id"
          ]
        },
        {
          "interpretation": "Show the relationship between bank training sessions and topic values.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.session_id, T2.value \nFROM TrainingSessions AS T1 \nJOIN Topics AS T2 ON T1.topic_id = T2.id"
          ]
        },
        {
          "interpretation": "List the topics associated with each bank training session.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T.value \nFROM TrainingSessions TS \nJOIN Bank_Training_Topics BT_T ON TS.topic_id = BT_T.topic_id \nJOIN Topics T ON BT_T.topic_id = T.id"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Banking/scope_bank_training_topics/scope_bank_training_topics.sqlite",
      "db_dump": "CREATE TABLE Bank_Training (\n    training_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    bank_id INTEGER,\n    employee_id INTEGER,\n    FOREIGN KEY(bank_id) REFERENCES Banks(id),\n    FOREIGN KEY(employee_id) REFERENCES Employees(id)\n);\nCREATE TABLE Bank_Training_Topics (\n    bank_training_id INTEGER,\n    topic_id INTEGER,\n    FOREIGN KEY(bank_training_id) REFERENCES Bank_Training(training_id),\n    FOREIGN KEY(topic_id) REFERENCES Topics(id),\n    PRIMARY KEY(bank_training_id, topic_id)\n);\nCREATE TABLE Banks (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Employees (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    bank_id INTEGER,\n    FOREIGN KEY(bank_id) REFERENCES Banks(id)\n);\nCREATE TABLE Topics (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    value TEXT\n);\nCREATE TABLE TrainingSessions (\n    session_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date DATETIME,\n    trainer_id INTEGER,\n    topic_id INTEGER,\n    FOREIGN KEY(trainer_id) REFERENCES Employees(id),\n    FOREIGN KEY(topic_id) REFERENCES Topics(id)\n);\n\nINSERT INTO \"Bank_Training\" (training_id,bank_id,employee_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Bank_Training_Topics\" (bank_training_id,topic_id) VALUES (1,1),(1,2),(2,1),(2,2),(3,1),(4,1),(5,1);\nINSERT INTO \"Banks\" (id,name,location) VALUES (1,'ABC Bank','New York'),(2,'XYZ Bank','California'),(3,'LMN Bank','Texas'),(4,'PQR Bank','Florida'),(5,'STU Bank','Illinois');\nINSERT INTO \"Employees\" (id,first_name,last_name,bank_id) VALUES (1,'John','Doe',1),(2,'Jane','Smith',2),(3,'Mike','Brown',3),(4,'Emma','White',4),(5,'Tom','Black',5);\nINSERT INTO \"Topics\" (id,value) VALUES (1,'Customer Service Skills'),(2,'Fraud Prevention'),(3,'Interest Rate Management'),(4,'Loan Processing'),(5,'Investment Strategies');\nINSERT INTO \"TrainingSessions\" (session_id,date,trainer_id,topic_id) VALUES (1,'2021-10-01 09:00:00',1,1),(2,'2021-10-08 09:00:00',2,2),(3,'2021-10-15 09:00:00',3,1),(4,'2021-10-22 09:00:00',4,2),(5,'2021-10-29 09:00:00',5,1);\n",
      "question": "What value of topics is common across all bank training sessions?",
      "gold_queries": [
        "SELECT Topics.value  from Bank_Training_Topics join Topics on Bank_Training_Topics.topic_id = Topics.id join Bank_Training on Bank_Training_Topics.bank_training_id = Bank_Training.training_id   GROUP BY Bank_Training_Topics.topic_id HAVING COUNT(DISTINCT Bank_Training_Topics.bank_training_id) = (SELECT COUNT(*) FROM  Bank_Training)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Common themes across all bank training initiatives",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT T.value\nFROM Topics T\nWHERE T.id IN (\n    SELECT BT.topic_id\n    FROM Bank_Training_Topics BT\n    GROUP BY BT.topic_id\n    HAVING COUNT(DISTINCT BT.bank_training_id) = (SELECT COUNT(*) FROM Bank_Training)\n)"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Banking/scope_bank_training_topics/scope_bank_training_topics.sqlite",
      "db_dump": "CREATE TABLE Bank_Training (\n    training_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    bank_id INTEGER,\n    employee_id INTEGER,\n    FOREIGN KEY(bank_id) REFERENCES Banks(id),\n    FOREIGN KEY(employee_id) REFERENCES Employees(id)\n);\nCREATE TABLE Bank_Training_Topics (\n    bank_training_id INTEGER,\n    topic_id INTEGER,\n    FOREIGN KEY(bank_training_id) REFERENCES Bank_Training(training_id),\n    FOREIGN KEY(topic_id) REFERENCES Topics(id),\n    PRIMARY KEY(bank_training_id, topic_id)\n);\nCREATE TABLE Banks (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Employees (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    bank_id INTEGER,\n    FOREIGN KEY(bank_id) REFERENCES Banks(id)\n);\nCREATE TABLE Topics (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    value TEXT\n);\nCREATE TABLE TrainingSessions (\n    session_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date DATETIME,\n    trainer_id INTEGER,\n    topic_id INTEGER,\n    FOREIGN KEY(trainer_id) REFERENCES Employees(id),\n    FOREIGN KEY(topic_id) REFERENCES Topics(id)\n);\n\nINSERT INTO \"Bank_Training\" (training_id,bank_id,employee_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Bank_Training_Topics\" (bank_training_id,topic_id) VALUES (1,1),(1,2),(2,1),(2,2),(3,1),(4,1),(5,1);\nINSERT INTO \"Banks\" (id,name,location) VALUES (1,'ABC Bank','New York'),(2,'XYZ Bank','California'),(3,'LMN Bank','Texas'),(4,'PQR Bank','Florida'),(5,'STU Bank','Illinois');\nINSERT INTO \"Employees\" (id,first_name,last_name,bank_id) VALUES (1,'John','Doe',1),(2,'Jane','Smith',2),(3,'Mike','Brown',3),(4,'Emma','White',4),(5,'Tom','Black',5);\nINSERT INTO \"Topics\" (id,value) VALUES (1,'Customer Service Skills'),(2,'Fraud Prevention'),(3,'Interest Rate Management'),(4,'Loan Processing'),(5,'Investment Strategies');\nINSERT INTO \"TrainingSessions\" (session_id,date,trainer_id,topic_id) VALUES (1,'2021-10-01 09:00:00',1,1),(2,'2021-10-08 09:00:00',2,2),(3,'2021-10-15 09:00:00',3,1),(4,'2021-10-22 09:00:00',4,2),(5,'2021-10-29 09:00:00',5,1);\n",
      "question": "What value of topics is associated with each bank training?",
      "gold_queries": [
        "SELECT Topics.value  from Bank_Training_Topics join Topics on Bank_Training_Topics.topic_id = Topics.id join Bank_Training on Bank_Training_Topics.bank_training_id = Bank_Training.training_id   GROUP BY Bank_Training_Topics.topic_id HAVING COUNT(DISTINCT Bank_Training_Topics.bank_training_id) = (SELECT COUNT(*) FROM  Bank_Training)",
        "select bank_training.training_id , topics.value from Bank_Training_Topics join Topics on Bank_Training_Topics.topic_id = Topics.id join Bank_Training on Bank_Training_Topics.bank_training_id = Bank_Training.training_id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What topics are included in each record of Bank_Training_Topics?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Topics.value \nFROM Bank_Training_Topics \nJOIN Topics ON Bank_Training_Topics.topic_id = Topics.id"
          ]
        },
        {
          "interpretation": "List every topic linked to each bank training entry.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Bank_Training.training_id, Topics.value\nFROM Bank_Training\nJOIN Bank_Training_Topics ON Bank_Training.training_id = Bank_Training_Topics.bank_training_id\nJOIN Topics ON Bank_Training_Topics.topic_id = Topics.id"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.5,
        "f1_score": 0.5,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Banking/scope_bank_statements_transactions/scope_bank_statements_transactions.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Balance REAL,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Bank_Statements(\n    StatementID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    StartDate DATETIME,\n    EndDate DATETIME,\n    TotalAmount REAL,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\nCREATE TABLE Bank_Statements_Transactions(\n    StatementTransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StatementID INTEGER,\n    TransactionID INTEGER,\n    FOREIGN KEY (StatementID) REFERENCES Bank_Statements(StatementID),\n    FOREIGN KEY (TransactionID) REFERENCES Transactions(TransactionID));\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    TransactionType TEXT, -- e.g., Subscription Payments, Transfer, etc.\n    Amount REAL,\n    Date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\n\nINSERT INTO \"Accounts\" (AccountNumber,CustomerID,Balance) VALUES (1,1,1000.0),(2,2,800.0),(3,3,900.0),(4,4,700.0),(5,5,600.0);\nINSERT INTO \"Bank_Statements\" (StatementID,AccountNumber,StartDate,EndDate,TotalAmount) VALUES (1,1,'2021-01-01','2021-01-31',250.0),(2,2,'2021-02-01','2021-02-28',260.0),(3,3,'2021-03-01','2021-03-31',270.0),(4,4,'2021-04-01','2021-04-30',280.0),(5,5,'2021-05-01','2021-05-31',290.0);\nINSERT INTO \"Bank_Statements_Transactions\" (StatementTransactionID,StatementID,TransactionID) VALUES (1,1,1),(2,1,2),(3,2,3),(4,2,4),(5,3,5),(6,3,6),(7,4,7),(8,4,8),(9,5,9),(10,5,10),(11,2,1),(12,3,1),(13,4,1),(14,5,1);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Michael','Brown'),(4,'Emily','White'),(5,'David','Black');\nINSERT INTO \"Transactions\" (TransactionID,AccountNumber,TransactionType,Amount,Date) VALUES (1,1,'Subscription_Payments',150.0,'2024-01-30 18:53:44'),(2,1,'Transfer',200.0,'2024-01-30 18:53:44'),(3,2,'Subscription_Payments',130.0,'2024-01-30 18:53:44'),(4,2,'Transfer',180.0,'2024-01-30 18:53:44'),(5,3,'Subscription_Payments',140.0,'2024-01-30 18:53:44'),(6,3,'Transfer',220.0,'2024-01-30 18:53:44'),(7,4,'Subscription_Payments',120.0,'2024-01-30 18:53:44'),(8,4,'Transfer',190.0,'2024-01-30 18:53:44'),(9,5,'Subscription_Payments',110.0,'2024-01-30 18:53:44'),(10,5,'Transfer',170.0,'2024-01-30 18:53:44');\n",
      "question": "Give me the common transaction types and their dates we have in all bank statements.",
      "gold_queries": [
        "SELECT Transactions.TransactionType, Transactions.Date  from Bank_Statements_Transactions join Transactions on Bank_Statements_Transactions.TransactionID = Transactions.TransactionID join Bank_Statements on Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID   GROUP BY Bank_Statements_Transactions.TransactionID HAVING COUNT(DISTINCT Bank_Statements_Transactions.StatementID) = (SELECT COUNT(*) FROM  Bank_Statements)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Provide a list of distinct transaction types present in all bank statements, excluding any frequency or count information.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT TransactionType FROM Transactions"
          ]
        },
        {
          "interpretation": "For each distinct transaction type present in every bank statement, show the date of the first statement containing that transaction type.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT T.TransactionType, MIN(B.StartDate) AS FirstStatementDate\nFROM Transactions T\nJOIN Bank_Statements_Transactions BST ON T.TransactionID = BST.TransactionID\nJOIN Bank_Statements B ON BST.StatementID = B.StatementID\nGROUP BY T.TransactionType"
          ]
        },
        {
          "interpretation": "List all unique transaction types found across all bank statements and their corresponding date of the first occurrence.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT TransactionType, MIN(Date) AS FirstOccurrenceDate\nFROM Transactions\nGROUP BY TransactionType"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Banking/scope_bank_statements_transactions/scope_bank_statements_transactions.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Balance REAL,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Bank_Statements(\n    StatementID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    StartDate DATETIME,\n    EndDate DATETIME,\n    TotalAmount REAL,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\nCREATE TABLE Bank_Statements_Transactions(\n    StatementTransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StatementID INTEGER,\n    TransactionID INTEGER,\n    FOREIGN KEY (StatementID) REFERENCES Bank_Statements(StatementID),\n    FOREIGN KEY (TransactionID) REFERENCES Transactions(TransactionID));\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    TransactionType TEXT, -- e.g., Subscription Payments, Transfer, etc.\n    Amount REAL,\n    Date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\n\nINSERT INTO \"Accounts\" (AccountNumber,CustomerID,Balance) VALUES (1,1,1000.0),(2,2,800.0),(3,3,900.0),(4,4,700.0),(5,5,600.0);\nINSERT INTO \"Bank_Statements\" (StatementID,AccountNumber,StartDate,EndDate,TotalAmount) VALUES (1,1,'2021-01-01','2021-01-31',250.0),(2,2,'2021-02-01','2021-02-28',260.0),(3,3,'2021-03-01','2021-03-31',270.0),(4,4,'2021-04-01','2021-04-30',280.0),(5,5,'2021-05-01','2021-05-31',290.0);\nINSERT INTO \"Bank_Statements_Transactions\" (StatementTransactionID,StatementID,TransactionID) VALUES (1,1,1),(2,1,2),(3,2,3),(4,2,4),(5,3,5),(6,3,6),(7,4,7),(8,4,8),(9,5,9),(10,5,10),(11,2,1),(12,3,1),(13,4,1),(14,5,1);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Michael','Brown'),(4,'Emily','White'),(5,'David','Black');\nINSERT INTO \"Transactions\" (TransactionID,AccountNumber,TransactionType,Amount,Date) VALUES (1,1,'Subscription_Payments',150.0,'2024-01-30 18:53:44'),(2,1,'Transfer',200.0,'2024-01-30 18:53:44'),(3,2,'Subscription_Payments',130.0,'2024-01-30 18:53:44'),(4,2,'Transfer',180.0,'2024-01-30 18:53:44'),(5,3,'Subscription_Payments',140.0,'2024-01-30 18:53:44'),(6,3,'Transfer',220.0,'2024-01-30 18:53:44'),(7,4,'Subscription_Payments',120.0,'2024-01-30 18:53:44'),(8,4,'Transfer',190.0,'2024-01-30 18:53:44'),(9,5,'Subscription_Payments',110.0,'2024-01-30 18:53:44'),(10,5,'Transfer',170.0,'2024-01-30 18:53:44');\n",
      "question": "For every bank statement, show me the types of transactions along with the dates of them",
      "gold_queries": [
        "select bank_statements.accountnumber , transactions.transactiontype , transactions.date from Bank_Statements_Transactions join Transactions on Bank_Statements_Transactions.TransactionID = Transactions.TransactionID join Bank_Statements on Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Group bank statements by ID and list the distinct transaction types associated with each statement, including their dates.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT BS.StatementID, T.TransactionType, T.Date\nFROM Bank_Statements BS\nJOIN Bank_Statements_Transactions BST ON BS.StatementID = BST.StatementID\nJOIN Transactions T ON BST.TransactionID = T.TransactionID\nGROUP BY BS.StatementID, T.TransactionType, T.Date"
          ]
        },
        {
          "interpretation": "Provide a summary of transaction types for each bank statement, including dates for each transaction type.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT BS.StartDate, BS.EndDate, T.TransactionType, COUNT(*) as TransactionCount\nFROM Bank_Statements BS\nJOIN Bank_Statements_Transactions BST ON BS.StatementID = BST.StatementID\nJOIN Transactions T ON BST.TransactionID = T.TransactionID\nGROUP BY BS.StartDate, BS.EndDate, T.TransactionType"
          ]
        },
        {
          "interpretation": "Retrieve a list of all transactions, filtered by their associated bank statement, along with their types and dates.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T.TransactionType, T.Date\nFROM Transactions T\nJOIN Bank_Statements_Transactions BST ON T.TransactionID = BST.TransactionID"
          ]
        },
        {
          "interpretation": "Return a table with columns for statement ID, transaction type, and transaction date.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT BS.StatementID, T.TransactionType, T.Date \nFROM Bank_Statements_Transactions BST \nJOIN Transactions T ON BST.TransactionID = T.TransactionID \nJOIN Bank_Statements BS ON BST.StatementID = BS.StatementID"
          ]
        },
        {
          "interpretation": "List all unique transaction types for each bank statement.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT BS.StatementID, T.TransactionType \nFROM Bank_Statements AS BS \nJOIN Bank_Statements_Transactions AS BST ON BS.StatementID = BST.StatementID \nJOIN Transactions AS T ON BST.TransactionID = T.TransactionID"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Banking/scope_bank_statements_transactions/scope_bank_statements_transactions.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Balance REAL,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Bank_Statements(\n    StatementID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    StartDate DATETIME,\n    EndDate DATETIME,\n    TotalAmount REAL,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\nCREATE TABLE Bank_Statements_Transactions(\n    StatementTransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StatementID INTEGER,\n    TransactionID INTEGER,\n    FOREIGN KEY (StatementID) REFERENCES Bank_Statements(StatementID),\n    FOREIGN KEY (TransactionID) REFERENCES Transactions(TransactionID));\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    TransactionType TEXT, -- e.g., Subscription Payments, Transfer, etc.\n    Amount REAL,\n    Date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\n\nINSERT INTO \"Accounts\" (AccountNumber,CustomerID,Balance) VALUES (1,1,1000.0),(2,2,800.0),(3,3,900.0),(4,4,700.0),(5,5,600.0);\nINSERT INTO \"Bank_Statements\" (StatementID,AccountNumber,StartDate,EndDate,TotalAmount) VALUES (1,1,'2021-01-01','2021-01-31',250.0),(2,2,'2021-02-01','2021-02-28',260.0),(3,3,'2021-03-01','2021-03-31',270.0),(4,4,'2021-04-01','2021-04-30',280.0),(5,5,'2021-05-01','2021-05-31',290.0);\nINSERT INTO \"Bank_Statements_Transactions\" (StatementTransactionID,StatementID,TransactionID) VALUES (1,1,1),(2,1,2),(3,2,3),(4,2,4),(5,3,5),(6,3,6),(7,4,7),(8,4,8),(9,5,9),(10,5,10),(11,2,1),(12,3,1),(13,4,1),(14,5,1);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Michael','Brown'),(4,'Emily','White'),(5,'David','Black');\nINSERT INTO \"Transactions\" (TransactionID,AccountNumber,TransactionType,Amount,Date) VALUES (1,1,'Subscription_Payments',150.0,'2024-01-30 18:53:44'),(2,1,'Transfer',200.0,'2024-01-30 18:53:44'),(3,2,'Subscription_Payments',130.0,'2024-01-30 18:53:44'),(4,2,'Transfer',180.0,'2024-01-30 18:53:44'),(5,3,'Subscription_Payments',140.0,'2024-01-30 18:53:44'),(6,3,'Transfer',220.0,'2024-01-30 18:53:44'),(7,4,'Subscription_Payments',120.0,'2024-01-30 18:53:44'),(8,4,'Transfer',190.0,'2024-01-30 18:53:44'),(9,5,'Subscription_Payments',110.0,'2024-01-30 18:53:44'),(10,5,'Transfer',170.0,'2024-01-30 18:53:44');\n",
      "question": "What information is there on transactions that are the same in all bank statements?",
      "gold_queries": [
        "SELECT Transactions.TransactionID, Transactions.Amount, Transactions.Date  from Bank_Statements_Transactions join Transactions on Bank_Statements_Transactions.TransactionID = Transactions.TransactionID join Bank_Statements on Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID   GROUP BY Bank_Statements_Transactions.TransactionID HAVING COUNT(DISTINCT Bank_Statements_Transactions.StatementID) = (SELECT COUNT(*) FROM  Bank_Statements)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "All transaction amounts across all bank statements",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.Amount FROM Transactions AS T1 JOIN Bank_Statements_Transactions AS T2 ON T1.TransactionID = T2.TransactionID"
          ]
        },
        {
          "interpretation": "Transactions occurring on the same dates across all bank statements",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT Date FROM Transactions"
          ]
        },
        {
          "interpretation": "All transaction types across all bank statements",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT TransactionType FROM Transactions"
          ]
        },
        {
          "interpretation": "The existence of any common transactions between different bank statements.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT TransactionID FROM Bank_Statements_Transactions GROUP BY TransactionID HAVING COUNT(StatementID) > 1"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Banking/scope_bank_statements_transactions/scope_bank_statements_transactions.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Balance REAL,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Bank_Statements(\n    StatementID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    StartDate DATETIME,\n    EndDate DATETIME,\n    TotalAmount REAL,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\nCREATE TABLE Bank_Statements_Transactions(\n    StatementTransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StatementID INTEGER,\n    TransactionID INTEGER,\n    FOREIGN KEY (StatementID) REFERENCES Bank_Statements(StatementID),\n    FOREIGN KEY (TransactionID) REFERENCES Transactions(TransactionID));\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    TransactionType TEXT, -- e.g., Subscription Payments, Transfer, etc.\n    Amount REAL,\n    Date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\n\nINSERT INTO \"Accounts\" (AccountNumber,CustomerID,Balance) VALUES (1,1,1000.0),(2,2,800.0),(3,3,900.0),(4,4,700.0),(5,5,600.0);\nINSERT INTO \"Bank_Statements\" (StatementID,AccountNumber,StartDate,EndDate,TotalAmount) VALUES (1,1,'2021-01-01','2021-01-31',250.0),(2,2,'2021-02-01','2021-02-28',260.0),(3,3,'2021-03-01','2021-03-31',270.0),(4,4,'2021-04-01','2021-04-30',280.0),(5,5,'2021-05-01','2021-05-31',290.0);\nINSERT INTO \"Bank_Statements_Transactions\" (StatementTransactionID,StatementID,TransactionID) VALUES (1,1,1),(2,1,2),(3,2,3),(4,2,4),(5,3,5),(6,3,6),(7,4,7),(8,4,8),(9,5,9),(10,5,10),(11,2,1),(12,3,1),(13,4,1),(14,5,1);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Michael','Brown'),(4,'Emily','White'),(5,'David','Black');\nINSERT INTO \"Transactions\" (TransactionID,AccountNumber,TransactionType,Amount,Date) VALUES (1,1,'Subscription_Payments',150.0,'2024-01-30 18:53:44'),(2,1,'Transfer',200.0,'2024-01-30 18:53:44'),(3,2,'Subscription_Payments',130.0,'2024-01-30 18:53:44'),(4,2,'Transfer',180.0,'2024-01-30 18:53:44'),(5,3,'Subscription_Payments',140.0,'2024-01-30 18:53:44'),(6,3,'Transfer',220.0,'2024-01-30 18:53:44'),(7,4,'Subscription_Payments',120.0,'2024-01-30 18:53:44'),(8,4,'Transfer',190.0,'2024-01-30 18:53:44'),(9,5,'Subscription_Payments',110.0,'2024-01-30 18:53:44'),(10,5,'Transfer',170.0,'2024-01-30 18:53:44');\n",
      "question": "For all bank statements list every transaction ID.",
      "gold_queries": [
        "select bank_statements.accountnumber , transactions.transactionid from Bank_Statements_Transactions join Transactions on Bank_Statements_Transactions.TransactionID = Transactions.TransactionID join Bank_Statements on Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Retrieve unique TransactionID values associated with every Bank_Statement.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT TransactionID FROM Bank_Statements_Transactions"
          ]
        },
        {
          "interpretation": "Present all TransactionID values connected to any Bank_Statement.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT TransactionID FROM Bank_Statements_Transactions"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Banking/scope_bank_statements_transactions/scope_bank_statements_transactions.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Balance REAL,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Bank_Statements(\n    StatementID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    StartDate DATETIME,\n    EndDate DATETIME,\n    TotalAmount REAL,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\nCREATE TABLE Bank_Statements_Transactions(\n    StatementTransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StatementID INTEGER,\n    TransactionID INTEGER,\n    FOREIGN KEY (StatementID) REFERENCES Bank_Statements(StatementID),\n    FOREIGN KEY (TransactionID) REFERENCES Transactions(TransactionID));\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    TransactionType TEXT, -- e.g., Subscription Payments, Transfer, etc.\n    Amount REAL,\n    Date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\n\nINSERT INTO \"Accounts\" (AccountNumber,CustomerID,Balance) VALUES (1,1,1000.0),(2,2,800.0),(3,3,900.0),(4,4,700.0),(5,5,600.0);\nINSERT INTO \"Bank_Statements\" (StatementID,AccountNumber,StartDate,EndDate,TotalAmount) VALUES (1,1,'2021-01-01','2021-01-31',250.0),(2,2,'2021-02-01','2021-02-28',260.0),(3,3,'2021-03-01','2021-03-31',270.0),(4,4,'2021-04-01','2021-04-30',280.0),(5,5,'2021-05-01','2021-05-31',290.0);\nINSERT INTO \"Bank_Statements_Transactions\" (StatementTransactionID,StatementID,TransactionID) VALUES (1,1,1),(2,1,2),(3,2,3),(4,2,4),(5,3,5),(6,3,6),(7,4,7),(8,4,8),(9,5,9),(10,5,10),(11,2,1),(12,3,1),(13,4,1),(14,5,1);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Michael','Brown'),(4,'Emily','White'),(5,'David','Black');\nINSERT INTO \"Transactions\" (TransactionID,AccountNumber,TransactionType,Amount,Date) VALUES (1,1,'Subscription_Payments',150.0,'2024-01-30 18:53:44'),(2,1,'Transfer',200.0,'2024-01-30 18:53:44'),(3,2,'Subscription_Payments',130.0,'2024-01-30 18:53:44'),(4,2,'Transfer',180.0,'2024-01-30 18:53:44'),(5,3,'Subscription_Payments',140.0,'2024-01-30 18:53:44'),(6,3,'Transfer',220.0,'2024-01-30 18:53:44'),(7,4,'Subscription_Payments',120.0,'2024-01-30 18:53:44'),(8,4,'Transfer',190.0,'2024-01-30 18:53:44'),(9,5,'Subscription_Payments',110.0,'2024-01-30 18:53:44'),(10,5,'Transfer',170.0,'2024-01-30 18:53:44');\n",
      "question": "What is the transaction name, id and account number that is in common for all bank statements?",
      "gold_queries": [
        "SELECT Transactions.TransactionID, Transactions.AccountNumber, Transactions.TransactionType  from Bank_Statements_Transactions join Transactions on Bank_Statements_Transactions.TransactionID = Transactions.TransactionID join Bank_Statements on Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID   GROUP BY Bank_Statements_Transactions.TransactionID HAVING COUNT(DISTINCT Bank_Statements_Transactions.StatementID) = (SELECT COUNT(*) FROM  Bank_Statements)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Find the transaction appearing in each bank statement.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT bs.StatementID, t.TransactionID\nFROM Bank_Statements_Transactions bst\nJOIN Bank_Statements bs ON bst.StatementID = bs.StatementID\nJOIN Transactions t ON bst.TransactionID = t.TransactionID"
          ]
        },
        {
          "interpretation": "Transaction name, ID, and account number common to all Bank Statements.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT T.TransactionType, T.TransactionID, T.AccountNumber\nFROM Transactions T\nJOIN Bank_Statements_Transactions BST ON T.TransactionID = BST.TransactionID\nGROUP BY T.TransactionID\nHAVING COUNT(DISTINCT BST.StatementID) = (SELECT COUNT(*) FROM Bank_Statements)"
          ]
        },
        {
          "interpretation": "The single transaction shared by every Bank Statement.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT t.TransactionID \nFROM Transactions t \nJOIN Bank_Statements_Transactions bst ON t.TransactionID = bst.TransactionID \nGROUP BY t.TransactionID \nHAVING COUNT(DISTINCT bst.StatementID) = (SELECT COUNT(*) FROM Bank_Statements)"
          ]
        },
        {
          "interpretation": "A transaction ID present in every Bank_Statements_Transactions record.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT TransactionID\nFROM Bank_Statements_Transactions\nGROUP BY TransactionID\nHAVING COUNT(*) = (SELECT COUNT(*) FROM Bank_Statements_Transactions)"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Banking/scope_bank_statements_transactions/scope_bank_statements_transactions.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Balance REAL,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Bank_Statements(\n    StatementID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    StartDate DATETIME,\n    EndDate DATETIME,\n    TotalAmount REAL,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\nCREATE TABLE Bank_Statements_Transactions(\n    StatementTransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StatementID INTEGER,\n    TransactionID INTEGER,\n    FOREIGN KEY (StatementID) REFERENCES Bank_Statements(StatementID),\n    FOREIGN KEY (TransactionID) REFERENCES Transactions(TransactionID));\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    TransactionType TEXT, -- e.g., Subscription Payments, Transfer, etc.\n    Amount REAL,\n    Date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\n\nINSERT INTO \"Accounts\" (AccountNumber,CustomerID,Balance) VALUES (1,1,1000.0),(2,2,800.0),(3,3,900.0),(4,4,700.0),(5,5,600.0);\nINSERT INTO \"Bank_Statements\" (StatementID,AccountNumber,StartDate,EndDate,TotalAmount) VALUES (1,1,'2021-01-01','2021-01-31',250.0),(2,2,'2021-02-01','2021-02-28',260.0),(3,3,'2021-03-01','2021-03-31',270.0),(4,4,'2021-04-01','2021-04-30',280.0),(5,5,'2021-05-01','2021-05-31',290.0);\nINSERT INTO \"Bank_Statements_Transactions\" (StatementTransactionID,StatementID,TransactionID) VALUES (1,1,1),(2,1,2),(3,2,3),(4,2,4),(5,3,5),(6,3,6),(7,4,7),(8,4,8),(9,5,9),(10,5,10),(11,2,1),(12,3,1),(13,4,1),(14,5,1);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Michael','Brown'),(4,'Emily','White'),(5,'David','Black');\nINSERT INTO \"Transactions\" (TransactionID,AccountNumber,TransactionType,Amount,Date) VALUES (1,1,'Subscription_Payments',150.0,'2024-01-30 18:53:44'),(2,1,'Transfer',200.0,'2024-01-30 18:53:44'),(3,2,'Subscription_Payments',130.0,'2024-01-30 18:53:44'),(4,2,'Transfer',180.0,'2024-01-30 18:53:44'),(5,3,'Subscription_Payments',140.0,'2024-01-30 18:53:44'),(6,3,'Transfer',220.0,'2024-01-30 18:53:44'),(7,4,'Subscription_Payments',120.0,'2024-01-30 18:53:44'),(8,4,'Transfer',190.0,'2024-01-30 18:53:44'),(9,5,'Subscription_Payments',110.0,'2024-01-30 18:53:44'),(10,5,'Transfer',170.0,'2024-01-30 18:53:44');\n",
      "question": "For each bank statement, list information on transactions shown.",
      "gold_queries": [
        "select bank_statements.accountnumber , transactions.transactionid , transactions.amount , transactions.date from Bank_Statements_Transactions join Transactions on Bank_Statements_Transactions.TransactionID = Transactions.TransactionID join Bank_Statements on Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Provide transaction information for each entry in the Bank_Statements table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT BS.StatementID, BS.AccountNumber, BS.StartDate, BS.EndDate, BS.TotalAmount, T.TransactionID, T.TransactionType, T.Amount, T.Date\nFROM Bank_Statements BS\nJOIN Bank_Statements_Transactions BST ON BS.StatementID = BST.StatementID\nJOIN Transactions T ON BST.TransactionID = T.TransactionID"
          ]
        },
        {
          "interpretation": "Show a list of transactions for every bank statement record.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT BS.StatementID, T.TransactionID, T.TransactionType, T.Amount, T.Date\nFROM Bank_Statements AS BS\nJOIN Bank_Statements_Transactions AS BST ON BS.StatementID = BST.StatementID\nJOIN Transactions AS T ON BST.TransactionID = T.TransactionID"
          ]
        },
        {
          "interpretation": "For each statement in Bank_Statements, retrieve the corresponding transactions from Bank_Statements_Transactions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT BS.StatementID, BST.TransactionID\nFROM Bank_Statements AS BS\nJOIN Bank_Statements_Transactions AS BST ON BS.StatementID = BST.StatementID"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Banking/scope_bank_statements_transactions/scope_bank_statements_transactions.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Balance REAL,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Bank_Statements(\n    StatementID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    StartDate DATETIME,\n    EndDate DATETIME,\n    TotalAmount REAL,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\nCREATE TABLE Bank_Statements_Transactions(\n    StatementTransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StatementID INTEGER,\n    TransactionID INTEGER,\n    FOREIGN KEY (StatementID) REFERENCES Bank_Statements(StatementID),\n    FOREIGN KEY (TransactionID) REFERENCES Transactions(TransactionID));\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    TransactionType TEXT, -- e.g., Subscription Payments, Transfer, etc.\n    Amount REAL,\n    Date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\n\nINSERT INTO \"Accounts\" (AccountNumber,CustomerID,Balance) VALUES (1,1,1000.0),(2,2,800.0),(3,3,900.0),(4,4,700.0),(5,5,600.0);\nINSERT INTO \"Bank_Statements\" (StatementID,AccountNumber,StartDate,EndDate,TotalAmount) VALUES (1,1,'2021-01-01','2021-01-31',250.0),(2,2,'2021-02-01','2021-02-28',260.0),(3,3,'2021-03-01','2021-03-31',270.0),(4,4,'2021-04-01','2021-04-30',280.0),(5,5,'2021-05-01','2021-05-31',290.0);\nINSERT INTO \"Bank_Statements_Transactions\" (StatementTransactionID,StatementID,TransactionID) VALUES (1,1,1),(2,1,2),(3,2,3),(4,2,4),(5,3,5),(6,3,6),(7,4,7),(8,4,8),(9,5,9),(10,5,10),(11,2,1),(12,3,1),(13,4,1),(14,5,1);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Michael','Brown'),(4,'Emily','White'),(5,'David','Black');\nINSERT INTO \"Transactions\" (TransactionID,AccountNumber,TransactionType,Amount,Date) VALUES (1,1,'Subscription_Payments',150.0,'2024-01-30 18:53:44'),(2,1,'Transfer',200.0,'2024-01-30 18:53:44'),(3,2,'Subscription_Payments',130.0,'2024-01-30 18:53:44'),(4,2,'Transfer',180.0,'2024-01-30 18:53:44'),(5,3,'Subscription_Payments',140.0,'2024-01-30 18:53:44'),(6,3,'Transfer',220.0,'2024-01-30 18:53:44'),(7,4,'Subscription_Payments',120.0,'2024-01-30 18:53:44'),(8,4,'Transfer',190.0,'2024-01-30 18:53:44'),(9,5,'Subscription_Payments',110.0,'2024-01-30 18:53:44'),(10,5,'Transfer',170.0,'2024-01-30 18:53:44');\n",
      "question": "Show me the transaction types and dates we have for each bank statement",
      "gold_queries": [
        "SELECT Transactions.TransactionType, Transactions.Date  from Bank_Statements_Transactions join Transactions on Bank_Statements_Transactions.TransactionID = Transactions.TransactionID join Bank_Statements on Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID   GROUP BY Bank_Statements_Transactions.TransactionID HAVING COUNT(DISTINCT Bank_Statements_Transactions.StatementID) = (SELECT COUNT(*) FROM  Bank_Statements)",
        "select bank_statements.accountnumber , transactions.transactiontype , transactions.date from Bank_Statements_Transactions join Transactions on Bank_Statements_Transactions.TransactionID = Transactions.TransactionID join Bank_Statements on Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For each bank statement, retrieve a list of associated transaction dates.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT BS.StatementID, T.Date\nFROM Bank_Statements BS\nJOIN Bank_Statements_Transactions BSTS ON BS.StatementID = BSTS.StatementID\nJOIN Transactions T ON BSTS.TransactionID = T.TransactionID"
          ]
        },
        {
          "interpretation": "List the unique transaction types present in each bank statement.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT BS.StatementID, T.TransactionType\nFROM Bank_Statements BS\nJOIN Bank_Statements_Transactions BST ON BS.StatementID = BST.StatementID\nJOIN Transactions T ON BST.TransactionID = T.TransactionID"
          ]
        },
        {
          "interpretation": "Provide a summary of transaction types and their corresponding dates for every bank statement.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT bs.StatementID, t.TransactionType, t.Date\nFROM Bank_Statements bs\nJOIN Bank_Statements_Transactions bst ON bs.StatementID = bst.StatementID\nJOIN Transactions t ON bst.TransactionID = t.TransactionID"
          ]
        },
        {
          "interpretation": "Display a comprehensive table containing each bank statement's transactions, sorted by date.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Transactions.TransactionID, Transactions.TransactionType, Transactions.Amount, Transactions.Date\nFROM Transactions\nJOIN Bank_Statements_Transactions ON Transactions.TransactionID = Bank_Statements_Transactions.TransactionID\nJOIN Bank_Statements ON Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID\nORDER BY Transactions.Date"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.25,
        "f1_score": 0.3333333333333333,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Banking/scope_bank_statements_transactions/scope_bank_statements_transactions.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Balance REAL,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Bank_Statements(\n    StatementID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    StartDate DATETIME,\n    EndDate DATETIME,\n    TotalAmount REAL,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\nCREATE TABLE Bank_Statements_Transactions(\n    StatementTransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StatementID INTEGER,\n    TransactionID INTEGER,\n    FOREIGN KEY (StatementID) REFERENCES Bank_Statements(StatementID),\n    FOREIGN KEY (TransactionID) REFERENCES Transactions(TransactionID));\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    TransactionType TEXT, -- e.g., Subscription Payments, Transfer, etc.\n    Amount REAL,\n    Date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\n\nINSERT INTO \"Accounts\" (AccountNumber,CustomerID,Balance) VALUES (1,1,1000.0),(2,2,800.0),(3,3,900.0),(4,4,700.0),(5,5,600.0);\nINSERT INTO \"Bank_Statements\" (StatementID,AccountNumber,StartDate,EndDate,TotalAmount) VALUES (1,1,'2021-01-01','2021-01-31',250.0),(2,2,'2021-02-01','2021-02-28',260.0),(3,3,'2021-03-01','2021-03-31',270.0),(4,4,'2021-04-01','2021-04-30',280.0),(5,5,'2021-05-01','2021-05-31',290.0);\nINSERT INTO \"Bank_Statements_Transactions\" (StatementTransactionID,StatementID,TransactionID) VALUES (1,1,1),(2,1,2),(3,2,3),(4,2,4),(5,3,5),(6,3,6),(7,4,7),(8,4,8),(9,5,9),(10,5,10),(11,2,1),(12,3,1),(13,4,1),(14,5,1);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Michael','Brown'),(4,'Emily','White'),(5,'David','Black');\nINSERT INTO \"Transactions\" (TransactionID,AccountNumber,TransactionType,Amount,Date) VALUES (1,1,'Subscription_Payments',150.0,'2024-01-30 18:53:44'),(2,1,'Transfer',200.0,'2024-01-30 18:53:44'),(3,2,'Subscription_Payments',130.0,'2024-01-30 18:53:44'),(4,2,'Transfer',180.0,'2024-01-30 18:53:44'),(5,3,'Subscription_Payments',140.0,'2024-01-30 18:53:44'),(6,3,'Transfer',220.0,'2024-01-30 18:53:44'),(7,4,'Subscription_Payments',120.0,'2024-01-30 18:53:44'),(8,4,'Transfer',190.0,'2024-01-30 18:53:44'),(9,5,'Subscription_Payments',110.0,'2024-01-30 18:53:44'),(10,5,'Transfer',170.0,'2024-01-30 18:53:44');\n",
      "question": "List the transaction IDs in common across all bank statements.",
      "gold_queries": [
        "SELECT Transactions.TransactionID  from Bank_Statements_Transactions join Transactions on Bank_Statements_Transactions.TransactionID = Transactions.TransactionID join Bank_Statements on Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID   GROUP BY Bank_Statements_Transactions.TransactionID HAVING COUNT(DISTINCT Bank_Statements_Transactions.StatementID) = (SELECT COUNT(*) FROM  Bank_Statements)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Identify TransactionID values present in every StatementTransactionID within the Bank_Statements_Transactions table",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT TransactionID FROM Bank_Statements_Transactions GROUP BY TransactionID HAVING COUNT(DISTINCT StatementTransactionID) = (SELECT COUNT(*) FROM Bank_Statements_Transactions)"
          ]
        },
        {
          "interpretation": "Find all TransactionID values appearing in every row of Bank_Statements_Transactions",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT TransactionID\nFROM Bank_Statements_Transactions\nGROUP BY TransactionID\nHAVING COUNT(DISTINCT StatementID) = (SELECT COUNT(*) FROM Bank_Statements)"
          ]
        },
        {
          "interpretation": "List all unique TransactionID values present in Bank_Statements_Transactions table",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT TransactionID FROM Bank_Statements_Transactions"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Banking/scope_bank_statements_transactions/scope_bank_statements_transactions.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Balance REAL,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Bank_Statements(\n    StatementID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    StartDate DATETIME,\n    EndDate DATETIME,\n    TotalAmount REAL,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\nCREATE TABLE Bank_Statements_Transactions(\n    StatementTransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StatementID INTEGER,\n    TransactionID INTEGER,\n    FOREIGN KEY (StatementID) REFERENCES Bank_Statements(StatementID),\n    FOREIGN KEY (TransactionID) REFERENCES Transactions(TransactionID));\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    TransactionType TEXT, -- e.g., Subscription Payments, Transfer, etc.\n    Amount REAL,\n    Date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\n\nINSERT INTO \"Accounts\" (AccountNumber,CustomerID,Balance) VALUES (1,1,1000.0),(2,2,800.0),(3,3,900.0),(4,4,700.0),(5,5,600.0);\nINSERT INTO \"Bank_Statements\" (StatementID,AccountNumber,StartDate,EndDate,TotalAmount) VALUES (1,1,'2021-01-01','2021-01-31',250.0),(2,2,'2021-02-01','2021-02-28',260.0),(3,3,'2021-03-01','2021-03-31',270.0),(4,4,'2021-04-01','2021-04-30',280.0),(5,5,'2021-05-01','2021-05-31',290.0);\nINSERT INTO \"Bank_Statements_Transactions\" (StatementTransactionID,StatementID,TransactionID) VALUES (1,1,1),(2,1,2),(3,2,3),(4,2,4),(5,3,5),(6,3,6),(7,4,7),(8,4,8),(9,5,9),(10,5,10),(11,2,1),(12,3,1),(13,4,1),(14,5,1);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Michael','Brown'),(4,'Emily','White'),(5,'David','Black');\nINSERT INTO \"Transactions\" (TransactionID,AccountNumber,TransactionType,Amount,Date) VALUES (1,1,'Subscription_Payments',150.0,'2024-01-30 18:53:44'),(2,1,'Transfer',200.0,'2024-01-30 18:53:44'),(3,2,'Subscription_Payments',130.0,'2024-01-30 18:53:44'),(4,2,'Transfer',180.0,'2024-01-30 18:53:44'),(5,3,'Subscription_Payments',140.0,'2024-01-30 18:53:44'),(6,3,'Transfer',220.0,'2024-01-30 18:53:44'),(7,4,'Subscription_Payments',120.0,'2024-01-30 18:53:44'),(8,4,'Transfer',190.0,'2024-01-30 18:53:44'),(9,5,'Subscription_Payments',110.0,'2024-01-30 18:53:44'),(10,5,'Transfer',170.0,'2024-01-30 18:53:44');\n",
      "question": "What is the transaction type, id and account number for each bank statement?",
      "gold_queries": [
        "SELECT Transactions.TransactionID, Transactions.AccountNumber, Transactions.TransactionType  from Bank_Statements_Transactions join Transactions on Bank_Statements_Transactions.TransactionID = Transactions.TransactionID join Bank_Statements on Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID   GROUP BY Bank_Statements_Transactions.TransactionID HAVING COUNT(DISTINCT Bank_Statements_Transactions.StatementID) = (SELECT COUNT(*) FROM  Bank_Statements)",
        "select bank_statements.accountnumber , transactions.transactionid , transactions.accountnumber , transactions.transactiontype from Bank_Statements_Transactions join Transactions on Bank_Statements_Transactions.TransactionID = Transactions.TransactionID join Bank_Statements on Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For each bank statement, retrieve the transaction type, ID, and account number associated with that statement.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.TransactionType, T2.TransactionID, T2.AccountNumber \nFROM Bank_Statements_Transactions AS T1 \nJOIN Transactions AS T2 \nON T1.TransactionID = T2.TransactionID"
          ]
        },
        {
          "interpretation": "Provide the transaction type, ID, and account number for all transactions listed in each bank statement.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T.TransactionType, T.TransactionID, T.AccountNumber\nFROM Transactions T\nJOIN Bank_Statements_Transactions BST ON T.TransactionID = BST.TransactionID\nGROUP BY T.TransactionType, T.TransactionID, T.AccountNumber"
          ]
        },
        {
          "interpretation": "Return a table showing each Bank Statement's details, including the transaction type, ID, and account number for each transaction within that statement.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT BS.StatementID, BS.AccountNumber, BS.StartDate, BS.EndDate, BS.TotalAmount, T.TransactionType, T.TransactionID\nFROM Bank_Statements BS\nJOIN Bank_Statements_Transactions BST ON BS.StatementID = BST.StatementID\nJOIN Transactions T ON BST.TransactionID = T.TransactionID"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Banking/scope_bank_statements_transactions/scope_bank_statements_transactions.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Balance REAL,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Bank_Statements(\n    StatementID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    StartDate DATETIME,\n    EndDate DATETIME,\n    TotalAmount REAL,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\nCREATE TABLE Bank_Statements_Transactions(\n    StatementTransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StatementID INTEGER,\n    TransactionID INTEGER,\n    FOREIGN KEY (StatementID) REFERENCES Bank_Statements(StatementID),\n    FOREIGN KEY (TransactionID) REFERENCES Transactions(TransactionID));\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    TransactionType TEXT, -- e.g., Subscription Payments, Transfer, etc.\n    Amount REAL,\n    Date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\n\nINSERT INTO \"Accounts\" (AccountNumber,CustomerID,Balance) VALUES (1,1,1000.0),(2,2,800.0),(3,3,900.0),(4,4,700.0),(5,5,600.0);\nINSERT INTO \"Bank_Statements\" (StatementID,AccountNumber,StartDate,EndDate,TotalAmount) VALUES (1,1,'2021-01-01','2021-01-31',250.0),(2,2,'2021-02-01','2021-02-28',260.0),(3,3,'2021-03-01','2021-03-31',270.0),(4,4,'2021-04-01','2021-04-30',280.0),(5,5,'2021-05-01','2021-05-31',290.0);\nINSERT INTO \"Bank_Statements_Transactions\" (StatementTransactionID,StatementID,TransactionID) VALUES (1,1,1),(2,1,2),(3,2,3),(4,2,4),(5,3,5),(6,3,6),(7,4,7),(8,4,8),(9,5,9),(10,5,10),(11,2,1),(12,3,1),(13,4,1),(14,5,1);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Michael','Brown'),(4,'Emily','White'),(5,'David','Black');\nINSERT INTO \"Transactions\" (TransactionID,AccountNumber,TransactionType,Amount,Date) VALUES (1,1,'Subscription_Payments',150.0,'2024-01-30 18:53:44'),(2,1,'Transfer',200.0,'2024-01-30 18:53:44'),(3,2,'Subscription_Payments',130.0,'2024-01-30 18:53:44'),(4,2,'Transfer',180.0,'2024-01-30 18:53:44'),(5,3,'Subscription_Payments',140.0,'2024-01-30 18:53:44'),(6,3,'Transfer',220.0,'2024-01-30 18:53:44'),(7,4,'Subscription_Payments',120.0,'2024-01-30 18:53:44'),(8,4,'Transfer',190.0,'2024-01-30 18:53:44'),(9,5,'Subscription_Payments',110.0,'2024-01-30 18:53:44'),(10,5,'Transfer',170.0,'2024-01-30 18:53:44');\n",
      "question": "Show me information on transactions every bank statement shows.",
      "gold_queries": [
        "SELECT Transactions.TransactionID, Transactions.Amount, Transactions.Date  from Bank_Statements_Transactions join Transactions on Bank_Statements_Transactions.TransactionID = Transactions.TransactionID join Bank_Statements on Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID   GROUP BY Bank_Statements_Transactions.TransactionID HAVING COUNT(DISTINCT Bank_Statements_Transactions.StatementID) = (SELECT COUNT(*) FROM  Bank_Statements)",
        "select bank_statements.accountnumber , transactions.transactionid , transactions.amount , transactions.date from Bank_Statements_Transactions join Transactions on Bank_Statements_Transactions.TransactionID = Transactions.TransactionID join Bank_Statements on Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For each Bank_Statement, display the Transaction IDs listed in the Bank_Statements_Transactions table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT StatementID, TransactionID FROM Bank_Statements_Transactions"
          ]
        },
        {
          "interpretation": "Fetch the Transaction Amounts for each Statement, summarizing them from the Bank_Statements_Transactions table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT BS.StatementID, SUM(T.Amount) AS TotalTransactionAmount\nFROM Bank_Statements_Transactions BST\nJOIN Transactions T ON BST.TransactionID = T.TransactionID\nJOIN Bank_Statements BS ON BST.StatementID = BS.StatementID\nGROUP BY BS.StatementID"
          ]
        },
        {
          "interpretation": "Retrieve a list of all Transaction IDs present in the Bank_Statements_Transactions table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT TransactionID FROM Bank_Statements_Transactions"
          ]
        },
        {
          "interpretation": "Provide a summary of Transaction Types for each StatementID, aggregating them from the Bank_Statements_Transactions table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT StatementID, TransactionType, COUNT(*) as TransactionCount\nFROM Bank_Statements_Transactions\nJOIN Transactions ON Bank_Statements_Transactions.TransactionID = Transactions.TransactionID\nGROUP BY StatementID, TransactionType"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Banking/scope_bank_statements_transactions/scope_bank_statements_transactions.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Balance REAL,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Bank_Statements(\n    StatementID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    StartDate DATETIME,\n    EndDate DATETIME,\n    TotalAmount REAL,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\nCREATE TABLE Bank_Statements_Transactions(\n    StatementTransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StatementID INTEGER,\n    TransactionID INTEGER,\n    FOREIGN KEY (StatementID) REFERENCES Bank_Statements(StatementID),\n    FOREIGN KEY (TransactionID) REFERENCES Transactions(TransactionID));\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    TransactionType TEXT, -- e.g., Subscription Payments, Transfer, etc.\n    Amount REAL,\n    Date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\n\nINSERT INTO \"Accounts\" (AccountNumber,CustomerID,Balance) VALUES (1,1,1000.0),(2,2,800.0),(3,3,900.0),(4,4,700.0),(5,5,600.0);\nINSERT INTO \"Bank_Statements\" (StatementID,AccountNumber,StartDate,EndDate,TotalAmount) VALUES (1,1,'2021-01-01','2021-01-31',250.0),(2,2,'2021-02-01','2021-02-28',260.0),(3,3,'2021-03-01','2021-03-31',270.0),(4,4,'2021-04-01','2021-04-30',280.0),(5,5,'2021-05-01','2021-05-31',290.0);\nINSERT INTO \"Bank_Statements_Transactions\" (StatementTransactionID,StatementID,TransactionID) VALUES (1,1,1),(2,1,2),(3,2,3),(4,2,4),(5,3,5),(6,3,6),(7,4,7),(8,4,8),(9,5,9),(10,5,10),(11,2,1),(12,3,1),(13,4,1),(14,5,1);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Michael','Brown'),(4,'Emily','White'),(5,'David','Black');\nINSERT INTO \"Transactions\" (TransactionID,AccountNumber,TransactionType,Amount,Date) VALUES (1,1,'Subscription_Payments',150.0,'2024-01-30 18:53:44'),(2,1,'Transfer',200.0,'2024-01-30 18:53:44'),(3,2,'Subscription_Payments',130.0,'2024-01-30 18:53:44'),(4,2,'Transfer',180.0,'2024-01-30 18:53:44'),(5,3,'Subscription_Payments',140.0,'2024-01-30 18:53:44'),(6,3,'Transfer',220.0,'2024-01-30 18:53:44'),(7,4,'Subscription_Payments',120.0,'2024-01-30 18:53:44'),(8,4,'Transfer',190.0,'2024-01-30 18:53:44'),(9,5,'Subscription_Payments',110.0,'2024-01-30 18:53:44'),(10,5,'Transfer',170.0,'2024-01-30 18:53:44');\n",
      "question": "List the transaction IDs for every bank statement.",
      "gold_queries": [
        "SELECT Transactions.TransactionID  from Bank_Statements_Transactions join Transactions on Bank_Statements_Transactions.TransactionID = Transactions.TransactionID join Bank_Statements on Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID   GROUP BY Bank_Statements_Transactions.TransactionID HAVING COUNT(DISTINCT Bank_Statements_Transactions.StatementID) = (SELECT COUNT(*) FROM  Bank_Statements)",
        "select bank_statements.accountnumber , transactions.transactionid from Bank_Statements_Transactions join Transactions on Bank_Statements_Transactions.TransactionID = Transactions.TransactionID join Bank_Statements on Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Return a list containing each StatementTransactionID present in the Bank_Statements_Transactions table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT StatementTransactionID FROM Bank_Statements_Transactions"
          ]
        },
        {
          "interpretation": "For each StatementID in the Bank_Statements table, list the TransactionID values associated with it in the Bank_Statements_Transactions table.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT StatementID, TransactionID FROM Bank_Statements_Transactions"
          ]
        },
        {
          "interpretation": "Retrieve all distinct TranasactionID values referenced by the StatementID values in the Bank_Statements_Transactions table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT TransactionID FROM Bank_Statements_Transactions"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.3333333333333333,
        "f1_score": 0.4,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Airport/scope_maintenance_facilities_equipment/scope_maintenance_facilities_equipment.sqlite",
      "db_dump": "CREATE TABLE Equipment(\n    equipmentId INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT);\nCREATE TABLE Maintenance_Facilities(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT);\nCREATE TABLE Maintenance_Facilities_Equipment(\n    maintenanceId INTEGER,\n    equipmentTypeId INTEGER,\n    FOREIGN KEY (maintenanceId) REFERENCES Maintenance_Facilities(id),\n    FOREIGN KEY (equipmentTypeId) REFERENCES Equipment(equipmentId));\n\nINSERT INTO \"Equipment\" (equipmentId,type) VALUES (1,'Jet_Bridge'),(2,'Luggage_Conveyor'),(3,'Security_Scanner'),(4,'Aircraft_Tow_Vehicle'),(5,'Passenger_Board_bridge');\nINSERT INTO \"Maintenance_Facilities\" (id,name,location) VALUES (1,'Facility1','Location1'),(2,'Facility2','Location2'),(3,'Facility3','Location3'),(4,'Facility4','Location4'),(5,'Facility5','Location5');\nINSERT INTO \"Maintenance_Facilities_Equipment\" (maintenanceId,equipmentTypeId) VALUES (1,1),(1,2),(2,3),(2,4),(3,1),(3,5),(4,2),(4,6),(5,3),(5,7),(2,1),(4,1),(5,1);\n",
      "question": "What type of equipment do we have for each facility",
      "gold_queries": [
        "SELECT Equipment.type  from Maintenance_Facilities_Equipment join Equipment on Maintenance_Facilities_Equipment.equipmentTypeId = Equipment.equipmentId join Maintenance_Facilities on Maintenance_Facilities_Equipment.maintenanceId = Maintenance_Facilities.id   GROUP BY Maintenance_Facilities_Equipment.equipmentTypeId HAVING COUNT(DISTINCT Maintenance_Facilities_Equipment.maintenanceId) = (SELECT COUNT(*) FROM  Maintenance_Facilities)",
        "select maintenance_facilities.name , equipment.type from Maintenance_Facilities_Equipment join Equipment on Maintenance_Facilities_Equipment.equipmentTypeId = Equipment.equipmentId join Maintenance_Facilities on Maintenance_Facilities_Equipment.maintenanceId = Maintenance_Facilities.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Identify the equipment types linked to each facility.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.name, T3.type \nFROM Maintenance_Facilities AS T1 \nJOIN Maintenance_Facilities_Equipment AS T2 ON T1.id = T2.maintenanceId \nJOIN Equipment AS T3 ON T2.equipmentTypeId = T3.equipmentId"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 1.0,
        "f1_score": 0.6666666666666666,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Airport/scope_maintenance_facilities_equipment/scope_maintenance_facilities_equipment.sqlite",
      "db_dump": "CREATE TABLE Equipment(\n    equipmentId INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT);\nCREATE TABLE Maintenance_Facilities(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT);\nCREATE TABLE Maintenance_Facilities_Equipment(\n    maintenanceId INTEGER,\n    equipmentTypeId INTEGER,\n    FOREIGN KEY (maintenanceId) REFERENCES Maintenance_Facilities(id),\n    FOREIGN KEY (equipmentTypeId) REFERENCES Equipment(equipmentId));\n\nINSERT INTO \"Equipment\" (equipmentId,type) VALUES (1,'Jet_Bridge'),(2,'Luggage_Conveyor'),(3,'Security_Scanner'),(4,'Aircraft_Tow_Vehicle'),(5,'Passenger_Board_bridge');\nINSERT INTO \"Maintenance_Facilities\" (id,name,location) VALUES (1,'Facility1','Location1'),(2,'Facility2','Location2'),(3,'Facility3','Location3'),(4,'Facility4','Location4'),(5,'Facility5','Location5');\nINSERT INTO \"Maintenance_Facilities_Equipment\" (maintenanceId,equipmentTypeId) VALUES (1,1),(1,2),(2,3),(2,4),(3,1),(3,5),(4,2),(4,6),(5,3),(5,7),(2,1),(4,1),(5,1);\n",
      "question": "Give me the equipment that is common across all facilities",
      "gold_queries": [
        "SELECT Equipment.type  from Maintenance_Facilities_Equipment join Equipment on Maintenance_Facilities_Equipment.equipmentTypeId = Equipment.equipmentId join Maintenance_Facilities on Maintenance_Facilities_Equipment.maintenanceId = Maintenance_Facilities.id   GROUP BY Maintenance_Facilities_Equipment.equipmentTypeId HAVING COUNT(DISTINCT Maintenance_Facilities_Equipment.maintenanceId) = (SELECT COUNT(*) FROM  Maintenance_Facilities)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Jointly owned equipment utilized by all facilities",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT E.type\nFROM Equipment E\nJOIN Maintenance_Facilities_Equipment MFE ON E.equipmentId = MFE.equipmentTypeId\nGROUP BY E.equipmentId\nHAVING COUNT(DISTINCT MFE.maintenanceId) = (SELECT COUNT(*) FROM Maintenance_Facilities)"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Airport/scope_maintenance_facilities_equipment/scope_maintenance_facilities_equipment.sqlite",
      "db_dump": "CREATE TABLE Equipment(\n    equipmentId INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT);\nCREATE TABLE Maintenance_Facilities(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT);\nCREATE TABLE Maintenance_Facilities_Equipment(\n    maintenanceId INTEGER,\n    equipmentTypeId INTEGER,\n    FOREIGN KEY (maintenanceId) REFERENCES Maintenance_Facilities(id),\n    FOREIGN KEY (equipmentTypeId) REFERENCES Equipment(equipmentId));\n\nINSERT INTO \"Equipment\" (equipmentId,type) VALUES (1,'Jet_Bridge'),(2,'Luggage_Conveyor'),(3,'Security_Scanner'),(4,'Aircraft_Tow_Vehicle'),(5,'Passenger_Board_bridge');\nINSERT INTO \"Maintenance_Facilities\" (id,name,location) VALUES (1,'Facility1','Location1'),(2,'Facility2','Location2'),(3,'Facility3','Location3'),(4,'Facility4','Location4'),(5,'Facility5','Location5');\nINSERT INTO \"Maintenance_Facilities_Equipment\" (maintenanceId,equipmentTypeId) VALUES (1,1),(1,2),(2,3),(2,4),(3,1),(3,5),(4,2),(4,6),(5,3),(5,7),(2,1),(4,1),(5,1);\n",
      "question": "For all facilities, give me the type of equipment available",
      "gold_queries": [
        "select maintenance_facilities.name , equipment.type from Maintenance_Facilities_Equipment join Equipment on Maintenance_Facilities_Equipment.equipmentTypeId = Equipment.equipmentId join Maintenance_Facilities on Maintenance_Facilities_Equipment.maintenanceId = Maintenance_Facilities.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Give me a list of all equipment types, grouped by the facilities where they are used.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT T3.name, T2.type\nFROM Maintenance_Facilities_Equipment AS T1\nJOIN Equipment AS T2 ON T1.equipmentTypeId = T2.equipmentId\nJOIN Maintenance_Facilities AS T3 ON T1.maintenanceId = T3.id\nORDER BY T3.name, T2.type"
          ]
        },
        {
          "interpretation": "Retrieve the equipment types present in all facilities.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.type FROM Equipment AS T1 JOIN Maintenance_Facilities_Equipment AS T2 ON T1.equipmentId = T2.equipmentTypeId GROUP BY T1.type HAVING COUNT(DISTINCT T2.maintenanceId) = (SELECT COUNT(*) FROM Maintenance_Facilities)"
          ]
        },
        {
          "interpretation": "Display equipment types available across all maintenance facilities.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT type FROM Equipment"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Banking/scope_bank_statements_transactions/scope_bank_statements_transactions.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Balance REAL,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Bank_Statements(\n    StatementID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    StartDate DATETIME,\n    EndDate DATETIME,\n    TotalAmount REAL,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\nCREATE TABLE Bank_Statements_Transactions(\n    StatementTransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StatementID INTEGER,\n    TransactionID INTEGER,\n    FOREIGN KEY (StatementID) REFERENCES Bank_Statements(StatementID),\n    FOREIGN KEY (TransactionID) REFERENCES Transactions(TransactionID));\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    TransactionType TEXT, -- e.g., Subscription Payments, Transfer, etc.\n    Amount REAL,\n    Date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\n\nINSERT INTO \"Accounts\" (AccountNumber,CustomerID,Balance) VALUES (1,1,1000.0),(2,2,800.0),(3,3,900.0),(4,4,700.0),(5,5,600.0);\nINSERT INTO \"Bank_Statements\" (StatementID,AccountNumber,StartDate,EndDate,TotalAmount) VALUES (1,1,'2021-01-01','2021-01-31',250.0),(2,2,'2021-02-01','2021-02-28',260.0),(3,3,'2021-03-01','2021-03-31',270.0),(4,4,'2021-04-01','2021-04-30',280.0),(5,5,'2021-05-01','2021-05-31',290.0);\nINSERT INTO \"Bank_Statements_Transactions\" (StatementTransactionID,StatementID,TransactionID) VALUES (1,1,1),(2,1,2),(3,2,3),(4,2,4),(5,3,5),(6,3,6),(7,4,7),(8,4,8),(9,5,9),(10,5,10),(11,2,1),(12,3,1),(13,4,1),(14,5,1);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Michael','Brown'),(4,'Emily','White'),(5,'David','Black');\nINSERT INTO \"Transactions\" (TransactionID,AccountNumber,TransactionType,Amount,Date) VALUES (1,1,'Subscription_Payments',150.0,'2024-01-30 18:53:44'),(2,1,'Transfer',200.0,'2024-01-30 18:53:44'),(3,2,'Subscription_Payments',130.0,'2024-01-30 18:53:44'),(4,2,'Transfer',180.0,'2024-01-30 18:53:44'),(5,3,'Subscription_Payments',140.0,'2024-01-30 18:53:44'),(6,3,'Transfer',220.0,'2024-01-30 18:53:44'),(7,4,'Subscription_Payments',120.0,'2024-01-30 18:53:44'),(8,4,'Transfer',190.0,'2024-01-30 18:53:44'),(9,5,'Subscription_Payments',110.0,'2024-01-30 18:53:44'),(10,5,'Transfer',170.0,'2024-01-30 18:53:44');\n",
      "question": "For each bank statement, give me the transaction name, id and account number.",
      "gold_queries": [
        "select bank_statements.accountnumber , transactions.transactionid , transactions.accountnumber , transactions.transactiontype from Bank_Statements_Transactions join Transactions on Bank_Statements_Transactions.TransactionID = Transactions.TransactionID join Bank_Statements on Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Provide a table with columns 'Bank Statement Id',  'Transaction Name', 'Transaction ID', and 'Account Number', populated with data from all bank statements and their corresponding transactions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    BS.StatementID AS 'Bank Statement Id', \n    T.TransactionType AS 'Transaction Name', \n    BT.TransactionID AS 'Transaction ID', \n    BS.AccountNumber AS 'Account Number'\nFROM \n    Bank_Statements_Transactions BT\nJOIN \n    Transactions T ON BT.TransactionID = T.TransactionID\nJOIN \n    Bank_Statements BS ON BT.StatementID = BS.StatementID"
          ]
        },
        {
          "interpretation": "List each transaction type, transaction ID, and account number for every individual transaction record linked to a bank statement.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT TransactionType, TransactionID, AccountNumber\nFROM Transactions"
          ]
        },
        {
          "interpretation": "Retrieve the transaction type, transaction ID, and account number associated with each bank statement.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T.TransactionType, T.TransactionID, T.AccountNumber FROM Transactions T INNER JOIN Bank_Statements_Transactions BST ON T.TransactionID = BST.TransactionID"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Healthcare/scope_insurance_plan_coverage/scope_insurance_plan_coverage.sqlite",
      "db_dump": "CREATE TABLE Appointment(AppointmentID INTEGER PRIMARY KEY AUTOINCREMENT, Date TIMESTAMP, Reason TEXT, PatientID INTEGER, DoctorID INTEGER, FOREIGN KEY(PatientID) REFERENCES Patient(PatientID), FOREIGN KEY(DoctorID) REFERENCES Doctor(DoctorID));\nCREATE TABLE Coverage(\n    CoverageID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Description TEXT);\nCREATE TABLE Doctor(DoctorID INTEGER PRIMARY KEY AUTOINCREMENT, Name TEXT, Specialty TEXT);\nCREATE TABLE Insurance_Plan(\n    PlanID INTEGER PRIMARY KEY AUTOINCREMENT,\n    PlanName TEXT,\n    MonthlyPremium REAL);\nCREATE TABLE Insurance_Plan_Coverage(\n    PlanID INTEGER,\n    CoverageID INTEGER,\n    FOREIGN KEY(PlanID) REFERENCES Insurance_Plan(PlanID),\n    FOREIGN KEY(CoverageID) REFERENCES Coverage(CoverageID),\n    PRIMARY KEY(PlanID, CoverageID));\nCREATE TABLE Patient(PatientID INTEGER PRIMARY KEY AUTOINCREMENT, Name TEXT, DOB TEXT);\n\nINSERT INTO \"Appointment\" (AppointmentID,Date,Reason,PatientID,DoctorID) VALUES (1,'2022-01-01 10:00:00','Annual checkup',1,1),(2,'2022-02-01 14:00:00','Follow-up visit',2,2),(3,'2022-03-01 09:00:00','Consultation',3,3),(4,'2022-04-01 11:00:00','Wound care',4,4),(5,'2022-05-01 13:00:00','Diabetes management',5,5);\nINSERT INTO \"Coverage\" (CoverageID,Description) VALUES (1,'Prescription Drugs'),(2,'Preventive Care'),(3,'Hospitalization'),(4,'Mental Health Services'),(5,'Laboratory Tests');\nINSERT INTO \"Doctor\" (DoctorID,Name,Specialty) VALUES (1,'Dr. John Wilson','Cardiology'),(2,'Dr. Jane Thompson','Gastroenterology'),(3,'Dr. Tom Harris','Neurology'),(4,'Dr. Emily Martin','Orthopedics'),(5,'Dr. William Lee','Endocrinology');\nINSERT INTO \"Insurance_Plan\" (PlanID,PlanName,MonthlyPremium) VALUES (1,'Basic',30.99),(2,'Standard',61.98),(3,'Deluxe',120.97),(4,'Premier',180.95),(5,'Ultimate',240.92);\nINSERT INTO \"Insurance_Plan_Coverage\" (PlanID,CoverageID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\nINSERT INTO \"Patient\" (PatientID,Name,DOB) VALUES (1,'John Doe','1990-01-01'),(2,'Jane Smith','1992-02-02'),(3,'Tom Johnson','1988-03-03'),(4,'Emily Brown','1994-04-04'),(5,'William Davis','1996-05-05');\n",
      "question": "For each insurance plan, list all of the coverage we offer",
      "gold_queries": [
        "select insurance_plan.planname , coverage.description from Insurance_Plan_Coverage join Coverage on Insurance_Plan_Coverage.CoverageID = Coverage.CoverageID join Insurance_Plan on Insurance_Plan_Coverage.PlanID = Insurance_Plan.PlanID"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List the descriptions of Coverages included in each Insurance Plan.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT IP.PlanName, C.Description\nFROM Insurance_Plan_Coverage IPC\nJOIN Insurance_Plan IP ON IPC.PlanID = IP.PlanID\nJOIN Coverage C ON IPC.CoverageID = C.CoverageID"
          ]
        },
        {
          "interpretation": "Provide a breakdown of Coverage offered for every Insurance_Plan.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT PlanName, Group_CONCAT(Description) AS Coverages\nFROM Insurance_Plan_Coverage\nJOIN Insurance_Plan ON Insurance_Plan_Coverage.PlanID = Insurance_Plan.PlanID\nJOIN Coverage ON Insurance_Plan_Coverage.CoverageID = Coverage.CoverageID\nGROUP BY PlanName"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Healthcare/scope_insurance_plan_coverage/scope_insurance_plan_coverage.sqlite",
      "db_dump": "CREATE TABLE Appointment(AppointmentID INTEGER PRIMARY KEY AUTOINCREMENT, Date TIMESTAMP, Reason TEXT, PatientID INTEGER, DoctorID INTEGER, FOREIGN KEY(PatientID) REFERENCES Patient(PatientID), FOREIGN KEY(DoctorID) REFERENCES Doctor(DoctorID));\nCREATE TABLE Coverage(\n    CoverageID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Description TEXT);\nCREATE TABLE Doctor(DoctorID INTEGER PRIMARY KEY AUTOINCREMENT, Name TEXT, Specialty TEXT);\nCREATE TABLE Insurance_Plan(\n    PlanID INTEGER PRIMARY KEY AUTOINCREMENT,\n    PlanName TEXT,\n    MonthlyPremium REAL);\nCREATE TABLE Insurance_Plan_Coverage(\n    PlanID INTEGER,\n    CoverageID INTEGER,\n    FOREIGN KEY(PlanID) REFERENCES Insurance_Plan(PlanID),\n    FOREIGN KEY(CoverageID) REFERENCES Coverage(CoverageID),\n    PRIMARY KEY(PlanID, CoverageID));\nCREATE TABLE Patient(PatientID INTEGER PRIMARY KEY AUTOINCREMENT, Name TEXT, DOB TEXT);\n\nINSERT INTO \"Appointment\" (AppointmentID,Date,Reason,PatientID,DoctorID) VALUES (1,'2022-01-01 10:00:00','Annual checkup',1,1),(2,'2022-02-01 14:00:00','Follow-up visit',2,2),(3,'2022-03-01 09:00:00','Consultation',3,3),(4,'2022-04-01 11:00:00','Wound care',4,4),(5,'2022-05-01 13:00:00','Diabetes management',5,5);\nINSERT INTO \"Coverage\" (CoverageID,Description) VALUES (1,'Prescription Drugs'),(2,'Preventive Care'),(3,'Hospitalization'),(4,'Mental Health Services'),(5,'Laboratory Tests');\nINSERT INTO \"Doctor\" (DoctorID,Name,Specialty) VALUES (1,'Dr. John Wilson','Cardiology'),(2,'Dr. Jane Thompson','Gastroenterology'),(3,'Dr. Tom Harris','Neurology'),(4,'Dr. Emily Martin','Orthopedics'),(5,'Dr. William Lee','Endocrinology');\nINSERT INTO \"Insurance_Plan\" (PlanID,PlanName,MonthlyPremium) VALUES (1,'Basic',30.99),(2,'Standard',61.98),(3,'Deluxe',120.97),(4,'Premier',180.95),(5,'Ultimate',240.92);\nINSERT INTO \"Insurance_Plan_Coverage\" (PlanID,CoverageID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\nINSERT INTO \"Patient\" (PatientID,Name,DOB) VALUES (1,'John Doe','1990-01-01'),(2,'Jane Smith','1992-02-02'),(3,'Tom Johnson','1988-03-03'),(4,'Emily Brown','1994-04-04'),(5,'William Davis','1996-05-05');\n",
      "question": "Show me the coverage that is common for all insurance plans",
      "gold_queries": [
        "SELECT Coverage.Description  from Insurance_Plan_Coverage join Coverage on Insurance_Plan_Coverage.CoverageID = Coverage.CoverageID join Insurance_Plan on Insurance_Plan_Coverage.PlanID = Insurance_Plan.PlanID   GROUP BY Insurance_Plan_Coverage.CoverageID HAVING COUNT(DISTINCT Insurance_Plan_Coverage.PlanID) = (SELECT COUNT(*) FROM  Insurance_Plan)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Find the CoverageID for coverage included in every Insurance_Plan.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT CoverageID FROM Insurance_Plan_Coverage GROUP BY CoverageID HAVING COUNT(DISTINCT PlanID) = (SELECT COUNT(*) FROM Insurance_Plan)"
          ]
        },
        {
          "interpretation": "List all Coverage entries that have an associated PlanID in every Insurance_Plan.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.Description \nFROM Insurance_Plan AS T1 \nCROSS JOIN Coverage AS T2 \nWHERE T2.CoverageID IN (\n    SELECT T3.CoverageID \n    FROM Insurance_Plan_Coverage AS T3 \n    GROUP BY T3.CoverageID \n    HAVING COUNT(DISTINCT T3.PlanID) = (SELECT COUNT(*) FROM Insurance_Plan)\n)"
          ]
        },
        {
          "interpretation": "Determine the Description of the coverage present in all Insurance_Plan entries.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Description\nFROM Coverage\nWHERE CoverageID IN (\n    SELECT CoverageID\n    FROM Insurance_Plan_Coverage\n    GROUP BY CoverageID\n    HAVING COUNT(DISTINCT PlanID) = (SELECT COUNT(*) FROM Insurance_Plan)\n)"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Healthcare/scope_insurance_plan_coverage/scope_insurance_plan_coverage.sqlite",
      "db_dump": "CREATE TABLE Appointment(AppointmentID INTEGER PRIMARY KEY AUTOINCREMENT, Date TIMESTAMP, Reason TEXT, PatientID INTEGER, DoctorID INTEGER, FOREIGN KEY(PatientID) REFERENCES Patient(PatientID), FOREIGN KEY(DoctorID) REFERENCES Doctor(DoctorID));\nCREATE TABLE Coverage(\n    CoverageID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Description TEXT);\nCREATE TABLE Doctor(DoctorID INTEGER PRIMARY KEY AUTOINCREMENT, Name TEXT, Specialty TEXT);\nCREATE TABLE Insurance_Plan(\n    PlanID INTEGER PRIMARY KEY AUTOINCREMENT,\n    PlanName TEXT,\n    MonthlyPremium REAL);\nCREATE TABLE Insurance_Plan_Coverage(\n    PlanID INTEGER,\n    CoverageID INTEGER,\n    FOREIGN KEY(PlanID) REFERENCES Insurance_Plan(PlanID),\n    FOREIGN KEY(CoverageID) REFERENCES Coverage(CoverageID),\n    PRIMARY KEY(PlanID, CoverageID));\nCREATE TABLE Patient(PatientID INTEGER PRIMARY KEY AUTOINCREMENT, Name TEXT, DOB TEXT);\n\nINSERT INTO \"Appointment\" (AppointmentID,Date,Reason,PatientID,DoctorID) VALUES (1,'2022-01-01 10:00:00','Annual checkup',1,1),(2,'2022-02-01 14:00:00','Follow-up visit',2,2),(3,'2022-03-01 09:00:00','Consultation',3,3),(4,'2022-04-01 11:00:00','Wound care',4,4),(5,'2022-05-01 13:00:00','Diabetes management',5,5);\nINSERT INTO \"Coverage\" (CoverageID,Description) VALUES (1,'Prescription Drugs'),(2,'Preventive Care'),(3,'Hospitalization'),(4,'Mental Health Services'),(5,'Laboratory Tests');\nINSERT INTO \"Doctor\" (DoctorID,Name,Specialty) VALUES (1,'Dr. John Wilson','Cardiology'),(2,'Dr. Jane Thompson','Gastroenterology'),(3,'Dr. Tom Harris','Neurology'),(4,'Dr. Emily Martin','Orthopedics'),(5,'Dr. William Lee','Endocrinology');\nINSERT INTO \"Insurance_Plan\" (PlanID,PlanName,MonthlyPremium) VALUES (1,'Basic',30.99),(2,'Standard',61.98),(3,'Deluxe',120.97),(4,'Premier',180.95),(5,'Ultimate',240.92);\nINSERT INTO \"Insurance_Plan_Coverage\" (PlanID,CoverageID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\nINSERT INTO \"Patient\" (PatientID,Name,DOB) VALUES (1,'John Doe','1990-01-01'),(2,'Jane Smith','1992-02-02'),(3,'Tom Johnson','1988-03-03'),(4,'Emily Brown','1994-04-04'),(5,'William Davis','1996-05-05');\n",
      "question": "What coverage do we have for each insurance plan?",
      "gold_queries": [
        "SELECT Coverage.Description  from Insurance_Plan_Coverage join Coverage on Insurance_Plan_Coverage.CoverageID = Coverage.CoverageID join Insurance_Plan on Insurance_Plan_Coverage.PlanID = Insurance_Plan.PlanID   GROUP BY Insurance_Plan_Coverage.CoverageID HAVING COUNT(DISTINCT Insurance_Plan_Coverage.PlanID) = (SELECT COUNT(*) FROM  Insurance_Plan)",
        "select insurance_plan.planname , coverage.description from Insurance_Plan_Coverage join Coverage on Insurance_Plan_Coverage.CoverageID = Coverage.CoverageID join Insurance_Plan on Insurance_Plan_Coverage.PlanID = Insurance_Plan.PlanID"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Display a table showing each insurance plan and its associated coverage.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT IP.PlanName, C.Description\nFROM Insurance_Plan_Coverage IPC\nJOIN Insurance_Plan IP ON IPC.PlanID = IP.PlanID\nJOIN Coverage C ON IPC.CoverageID = C.CoverageID"
          ]
        },
        {
          "interpretation": "Identify the CoverageID for each plan.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT PlanID, CoverageID FROM Insurance_Plan_Coverage"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.5,
        "f1_score": 0.5,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Hospitality/scope_cultural_centers_performances/scope_cultural_centers_performances.sqlite",
      "db_dump": "CREATE TABLE Cultural_Centers(\n    centerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT);\nCREATE TABLE Cultural_Centers_Performances(\n    culturalCenterID INTEGER,\n    performanceID INTEGER,\n    FOREIGN KEY(culturalCenterID) REFERENCES Cultural_Centers(centerID),\n    FOREIGN KEY(performanceID) REFERENCES Performances(performanceID));\nCREATE TABLE Employees(\n    employeeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT);\nCREATE TABLE Managers(\n    managerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    employeeID INTEGER,\n    FOREIGN KEY(employeeID) REFERENCES Employees(employeeID));\nCREATE TABLE Performances(\n    performanceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT);\n\nINSERT INTO \"Cultural_Centers\" (centerID,name,location) VALUES (1,'Art Center','New York'),(2,'Theater House','Los Angeles'),(3,'Music Hall','Chicago'),(4,'Dance Studio','Miami'),(5,'Concert Venue','Houston');\nINSERT INTO \"Cultural_Centers_Performances\" (culturalCenterID,performanceID) VALUES (1,1),(1,2),(2,3),(3,4),(4,5),(2,1),(3,1),(4,1),(5,1);\nINSERT INTO \"Employees\" (employeeID,firstName,lastName) VALUES (1,'John','Smith'),(2,'Jane','Doe'),(3,'Robert','Brown'),(4,'Alice','Green'),(5,'Tom','White');\nINSERT INTO \"Managers\" (managerID,employeeID) VALUES (1,1),(2,2),(3,3),(4,4),(5,5);\nINSERT INTO \"Performances\" (performanceID,type) VALUES (1,'Dance_Performances'),(2,'Musical_Performances'),(3,'Drama_Performances'),(4,'Comedy_Shows'),(5,'Opera');\n",
      "question": "Give me the performance types for each cultural center.",
      "gold_queries": [
        "SELECT Performances.type  from Cultural_Centers_Performances join Performances on Cultural_Centers_Performances.performanceID = Performances.performanceID join Cultural_Centers on Cultural_Centers_Performances.culturalCenterID = Cultural_Centers.centerID   GROUP BY Cultural_Centers_Performances.performanceID HAVING COUNT(DISTINCT Cultural_Centers_Performances.culturalCenterID) = (SELECT COUNT(*) FROM  Cultural_Centers)",
        "select cultural_centers.name , performances.type from Cultural_Centers_Performances join Performances on Cultural_Centers_Performances.performanceID = Performances.performanceID join Cultural_Centers on Cultural_Centers_Performances.culturalCenterID = Cultural_Centers.centerID"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List all performances, including their type, occurring at each cultural center.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Cultural_Centers.name, Performances.type\nFROM Cultural_Centers\nJOIN Cultural_Centers_Performances ON Cultural_Centers.centerID = Cultural_Centers_Performances.culturalCenterID\nJOIN Performances ON Cultural_Centers_Performances.performanceID = Performances.performanceID"
          ]
        },
        {
          "interpretation": "Display a table showing the name of each cultural center and a list of its corresponding performance types.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.name, GROUP_CONCAT(T3.type) AS performance_types\nFROM Cultural_Centers AS T1\nJOIN Cultural_Centers_Performances AS T2 ON T1.centerID = T2.culturalCenterID\nJOIN Performances AS T3 ON T2.performanceID = T3.performanceID\nGROUP BY T1.name"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.5,
        "f1_score": 0.5,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Hospitality/scope_cultural_centers_performances/scope_cultural_centers_performances.sqlite",
      "db_dump": "CREATE TABLE Cultural_Centers(\n    centerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT);\nCREATE TABLE Cultural_Centers_Performances(\n    culturalCenterID INTEGER,\n    performanceID INTEGER,\n    FOREIGN KEY(culturalCenterID) REFERENCES Cultural_Centers(centerID),\n    FOREIGN KEY(performanceID) REFERENCES Performances(performanceID));\nCREATE TABLE Employees(\n    employeeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT);\nCREATE TABLE Managers(\n    managerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    employeeID INTEGER,\n    FOREIGN KEY(employeeID) REFERENCES Employees(employeeID));\nCREATE TABLE Performances(\n    performanceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT);\n\nINSERT INTO \"Cultural_Centers\" (centerID,name,location) VALUES (1,'Art Center','New York'),(2,'Theater House','Los Angeles'),(3,'Music Hall','Chicago'),(4,'Dance Studio','Miami'),(5,'Concert Venue','Houston');\nINSERT INTO \"Cultural_Centers_Performances\" (culturalCenterID,performanceID) VALUES (1,1),(1,2),(2,3),(3,4),(4,5),(2,1),(3,1),(4,1),(5,1);\nINSERT INTO \"Employees\" (employeeID,firstName,lastName) VALUES (1,'John','Smith'),(2,'Jane','Doe'),(3,'Robert','Brown'),(4,'Alice','Green'),(5,'Tom','White');\nINSERT INTO \"Managers\" (managerID,employeeID) VALUES (1,1),(2,2),(3,3),(4,4),(5,5);\nINSERT INTO \"Performances\" (performanceID,type) VALUES (1,'Dance_Performances'),(2,'Musical_Performances'),(3,'Drama_Performances'),(4,'Comedy_Shows'),(5,'Opera');\n",
      "question": "For every cultural center, show me the corresponding performance type.",
      "gold_queries": [
        "select cultural_centers.name , performances.type from Cultural_Centers_Performances join Performances on Cultural_Centers_Performances.performanceID = Performances.performanceID join Cultural_Centers on Cultural_Centers_Performances.culturalCenterID = Cultural_Centers.centerID"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Retrieve the type of each performance held at each cultural center.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT C.name, P.type\nFROM Cultural_Centers C\nJOIN Cultural_Centers_Performances CCP ON C.centerID = CCP.culturalCenterID\nJOIN Performances P ON CCP.performanceID = P.performanceID"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Hospitality/scope_cultural_centers_performances/scope_cultural_centers_performances.sqlite",
      "db_dump": "CREATE TABLE Cultural_Centers(\n    centerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT);\nCREATE TABLE Cultural_Centers_Performances(\n    culturalCenterID INTEGER,\n    performanceID INTEGER,\n    FOREIGN KEY(culturalCenterID) REFERENCES Cultural_Centers(centerID),\n    FOREIGN KEY(performanceID) REFERENCES Performances(performanceID));\nCREATE TABLE Employees(\n    employeeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT);\nCREATE TABLE Managers(\n    managerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    employeeID INTEGER,\n    FOREIGN KEY(employeeID) REFERENCES Employees(employeeID));\nCREATE TABLE Performances(\n    performanceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT);\n\nINSERT INTO \"Cultural_Centers\" (centerID,name,location) VALUES (1,'Art Center','New York'),(2,'Theater House','Los Angeles'),(3,'Music Hall','Chicago'),(4,'Dance Studio','Miami'),(5,'Concert Venue','Houston');\nINSERT INTO \"Cultural_Centers_Performances\" (culturalCenterID,performanceID) VALUES (1,1),(1,2),(2,3),(3,4),(4,5),(2,1),(3,1),(4,1),(5,1);\nINSERT INTO \"Employees\" (employeeID,firstName,lastName) VALUES (1,'John','Smith'),(2,'Jane','Doe'),(3,'Robert','Brown'),(4,'Alice','Green'),(5,'Tom','White');\nINSERT INTO \"Managers\" (managerID,employeeID) VALUES (1,1),(2,2),(3,3),(4,4),(5,5);\nINSERT INTO \"Performances\" (performanceID,type) VALUES (1,'Dance_Performances'),(2,'Musical_Performances'),(3,'Drama_Performances'),(4,'Comedy_Shows'),(5,'Opera');\n",
      "question": "What performance types are the same for all cultural centers?",
      "gold_queries": [
        "SELECT Performances.type  from Cultural_Centers_Performances join Performances on Cultural_Centers_Performances.performanceID = Performances.performanceID join Cultural_Centers on Cultural_Centers_Performances.culturalCenterID = Cultural_Centers.centerID   GROUP BY Cultural_Centers_Performances.performanceID HAVING COUNT(DISTINCT Cultural_Centers_Performances.culturalCenterID) = (SELECT COUNT(*) FROM  Cultural_Centers)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Performance types present in every cultural center's performances.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT type FROM Performances WHERE performanceID IN (SELECT performanceID FROM Cultural_Centers_Performances GROUP BY performanceID HAVING COUNT(DISTINCT culturalCenterID) = (SELECT COUNT(*) FROM Cultural_Centers))"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Filmmaking/scope_film_festivals_categories/scope_film_festivals_categories.sqlite",
      "db_dump": "CREATE TABLE Categories(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    categoryName TEXT\n);\nCREATE TABLE Film_Festival_Categories(\n    festivalId INTEGER,\n    categoryId INTEGER,\n    FOREIGN KEY (festivalId) REFERENCES Film_Festivals(id),\n    FOREIGN KEY (categoryId) REFERENCES Categories(id)\n);\nCREATE TABLE Film_Festival_Entries(\n    festivalId INTEGER,\n    filmId INTEGER,\n    entryDate DATE,\n    FOREIGN KEY (festivalId) REFERENCES Film_Festivals(id),\n    FOREIGN KEY (filmId) REFERENCES Films(id)\n);\nCREATE TABLE Film_Festival_Winners(\n    festivalId INTEGER,\n    awardType TEXT,\n    winningFilmId INTEGER,\n    winYear INTEGER ,\n    FOREIGN KEY (festivalId) REFERENCES Film_Festivals(id),\n    FOREIGN KEY (winningFilmId) REFERENCES Films(id)\n);\nCREATE TABLE Film_Festivals(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Films(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    director TEXT,\n    yearReleased INTEGER \n);\n\nINSERT INTO \"Categories\" (id,categoryName) VALUES (1,'Short_Film'),(2,'Feature_Film'),(3,'Documentary'),(4,'Animation'),(5,'Experimental');\nINSERT INTO \"Film_Festival_Categories\" (festivalId,categoryId) VALUES (1,1),(1,2),(2,4),(2,3),(3,5),(2,1),(3,1),(4,1),(5,1);\nINSERT INTO \"Film_Festival_Entries\" (festivalId,filmId,entryDate) VALUES (1,1,'2021-07-01'),(1,2,'2021-08-01'),(2,3,'2022-06-01'),(2,4,'2022-07-01'),(3,5,'2023-05-01');\nINSERT INTO \"Film_Festival_Winners\" (festivalId,awardType,winningFilmId,winYear) VALUES (1,'Best Short Film',1,2021),(1,'Best Feature Film',2,2021),(2,'Best Animation',3,2022),(2,'Best Documentary',4,2022),(3,'Best Experimental',5,2023);\nINSERT INTO \"Film_Festivals\" (id,name,location) VALUES (1,'Festival A','Location X'),(2,'Festival B','Location Y'),(3,'Festival C','Location Z'),(4,'Festival D','Location W'),(5,'Festival E','Location V');\nINSERT INTO \"Films\" (id,title,director,yearReleased) VALUES (1,'Movie A','Director X',2020),(2,'Movie B','Director Y',2021),(3,'Movie C','Director Z',2019),(4,'Movie D','Director W',2022),(5,'Movie E','Director V',2023);\n",
      "question": "List all  film festivals and their categories.",
      "gold_queries": [
        "select film_festivals.name , categories.categoryname from Film_Festival_Categories join Categories on Film_Festival_Categories.categoryId = Categories.id join Film_Festivals on Film_Festival_Categories.festivalId = Film_Festivals.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Provide a list of Film Festivals, with each entry displaying a list of corresponding Categories.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT FF.name, C.categoryName\nFROM Film_Festivals FF\nJOIN Film_Festival_Categories FFC ON FF.id = FFC.festivalId\nJOIN Categories C ON FFC.categoryId = C.id"
          ]
        },
        {
          "interpretation": "List the name of each Film Festival and the names of all Categories present in the database.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT f.name, c.categoryName FROM Film_Festivals f, Categories c"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Filmmaking/scope_film_festivals_categories/scope_film_festivals_categories.sqlite",
      "db_dump": "CREATE TABLE Categories(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    categoryName TEXT\n);\nCREATE TABLE Film_Festival_Categories(\n    festivalId INTEGER,\n    categoryId INTEGER,\n    FOREIGN KEY (festivalId) REFERENCES Film_Festivals(id),\n    FOREIGN KEY (categoryId) REFERENCES Categories(id)\n);\nCREATE TABLE Film_Festival_Entries(\n    festivalId INTEGER,\n    filmId INTEGER,\n    entryDate DATE,\n    FOREIGN KEY (festivalId) REFERENCES Film_Festivals(id),\n    FOREIGN KEY (filmId) REFERENCES Films(id)\n);\nCREATE TABLE Film_Festival_Winners(\n    festivalId INTEGER,\n    awardType TEXT,\n    winningFilmId INTEGER,\n    winYear INTEGER ,\n    FOREIGN KEY (festivalId) REFERENCES Film_Festivals(id),\n    FOREIGN KEY (winningFilmId) REFERENCES Films(id)\n);\nCREATE TABLE Film_Festivals(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Films(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    director TEXT,\n    yearReleased INTEGER \n);\n\nINSERT INTO \"Categories\" (id,categoryName) VALUES (1,'Short_Film'),(2,'Feature_Film'),(3,'Documentary'),(4,'Animation'),(5,'Experimental');\nINSERT INTO \"Film_Festival_Categories\" (festivalId,categoryId) VALUES (1,1),(1,2),(2,4),(2,3),(3,5),(2,1),(3,1),(4,1),(5,1);\nINSERT INTO \"Film_Festival_Entries\" (festivalId,filmId,entryDate) VALUES (1,1,'2021-07-01'),(1,2,'2021-08-01'),(2,3,'2022-06-01'),(2,4,'2022-07-01'),(3,5,'2023-05-01');\nINSERT INTO \"Film_Festival_Winners\" (festivalId,awardType,winningFilmId,winYear) VALUES (1,'Best Short Film',1,2021),(1,'Best Feature Film',2,2021),(2,'Best Animation',3,2022),(2,'Best Documentary',4,2022),(3,'Best Experimental',5,2023);\nINSERT INTO \"Film_Festivals\" (id,name,location) VALUES (1,'Festival A','Location X'),(2,'Festival B','Location Y'),(3,'Festival C','Location Z'),(4,'Festival D','Location W'),(5,'Festival E','Location V');\nINSERT INTO \"Films\" (id,title,director,yearReleased) VALUES (1,'Movie A','Director X',2020),(2,'Movie B','Director Y',2021),(3,'Movie C','Director Z',2019),(4,'Movie D','Director W',2022),(5,'Movie E','Director V',2023);\n",
      "question": "What film categories does each film festival offer?",
      "gold_queries": [
        "SELECT Categories.categoryName  from Film_Festival_Categories join Categories on Film_Festival_Categories.categoryId = Categories.id join Film_Festivals on Film_Festival_Categories.festivalId = Film_Festivals.id   GROUP BY Film_Festival_Categories.categoryId HAVING COUNT(DISTINCT Film_Festival_Categories.festivalId) = (SELECT COUNT(*) FROM  Film_Festivals)",
        "select film_festivals.name , categories.categoryname from Film_Festival_Categories join Categories on Film_Festival_Categories.categoryId = Categories.id join Film_Festivals on Film_Festival_Categories.festivalId = Film_Festivals.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For each film festival, what categories of films are accepted for submission?",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT f.name, c.categoryName\nFROM Film_Festivals f\nJOIN Film_Festival_Categories ffc ON f.id = ffc.festivalId\nJOIN Categories c ON ffc.categoryId = c.id"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 1.0,
        "f1_score": 0.6666666666666666,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Filmmaking/scope_film_festivals_categories/scope_film_festivals_categories.sqlite",
      "db_dump": "CREATE TABLE Categories(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    categoryName TEXT\n);\nCREATE TABLE Film_Festival_Categories(\n    festivalId INTEGER,\n    categoryId INTEGER,\n    FOREIGN KEY (festivalId) REFERENCES Film_Festivals(id),\n    FOREIGN KEY (categoryId) REFERENCES Categories(id)\n);\nCREATE TABLE Film_Festival_Entries(\n    festivalId INTEGER,\n    filmId INTEGER,\n    entryDate DATE,\n    FOREIGN KEY (festivalId) REFERENCES Film_Festivals(id),\n    FOREIGN KEY (filmId) REFERENCES Films(id)\n);\nCREATE TABLE Film_Festival_Winners(\n    festivalId INTEGER,\n    awardType TEXT,\n    winningFilmId INTEGER,\n    winYear INTEGER ,\n    FOREIGN KEY (festivalId) REFERENCES Film_Festivals(id),\n    FOREIGN KEY (winningFilmId) REFERENCES Films(id)\n);\nCREATE TABLE Film_Festivals(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Films(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    director TEXT,\n    yearReleased INTEGER \n);\n\nINSERT INTO \"Categories\" (id,categoryName) VALUES (1,'Short_Film'),(2,'Feature_Film'),(3,'Documentary'),(4,'Animation'),(5,'Experimental');\nINSERT INTO \"Film_Festival_Categories\" (festivalId,categoryId) VALUES (1,1),(1,2),(2,4),(2,3),(3,5),(2,1),(3,1),(4,1),(5,1);\nINSERT INTO \"Film_Festival_Entries\" (festivalId,filmId,entryDate) VALUES (1,1,'2021-07-01'),(1,2,'2021-08-01'),(2,3,'2022-06-01'),(2,4,'2022-07-01'),(3,5,'2023-05-01');\nINSERT INTO \"Film_Festival_Winners\" (festivalId,awardType,winningFilmId,winYear) VALUES (1,'Best Short Film',1,2021),(1,'Best Feature Film',2,2021),(2,'Best Animation',3,2022),(2,'Best Documentary',4,2022),(3,'Best Experimental',5,2023);\nINSERT INTO \"Film_Festivals\" (id,name,location) VALUES (1,'Festival A','Location X'),(2,'Festival B','Location Y'),(3,'Festival C','Location Z'),(4,'Festival D','Location W'),(5,'Festival E','Location V');\nINSERT INTO \"Films\" (id,title,director,yearReleased) VALUES (1,'Movie A','Director X',2020),(2,'Movie B','Director Y',2021),(3,'Movie C','Director Z',2019),(4,'Movie D','Director W',2022),(5,'Movie E','Director V',2023);\n",
      "question": "Show me the categories that are the same for all film festivals.",
      "gold_queries": [
        "SELECT Categories.categoryName  from Film_Festival_Categories join Categories on Film_Festival_Categories.categoryId = Categories.id join Film_Festivals on Film_Festival_Categories.festivalId = Film_Festivals.id   GROUP BY Film_Festival_Categories.categoryId HAVING COUNT(DISTINCT Film_Festival_Categories.festivalId) = (SELECT COUNT(*) FROM  Film_Festivals)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Identify categories present in every film festival's assigned categories.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT c.categoryName\nFROM Categories c\nWHERE NOT EXISTS (\n    SELECT 1 \n    FROM Film_Festivals f\n    LEFT JOIN Film_Festival_Categories ffc ON f.id = ffc.festivalId\n    WHERE ffc.categoryId IS NULL OR ffc.categoryId != c.id\n)"
          ]
        },
        {
          "interpretation": "Determine the categories which are common to the set of all film festivals.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT categoryName\nFROM Categories\nWHERE id IN (\n    SELECT categoryId\n    FROM Film_Festival_Categories\n    GROUP BY categoryId\n    HAVING COUNT(DISTINCT festivalId) = (SELECT COUNT(*) FROM Film_Festivals)\n)"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Healthcare/scope_health_apps_functions/scope_health_apps_functions.sqlite",
      "db_dump": "CREATE TABLE Functions(\n    functionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    value TEXT);\nCREATE TABLE Health_Apps(\n    appID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    description TEXT,\n    price REAL );\nCREATE TABLE Health_Apps_Functions(\n    healthAppID INTEGER,\n    functionID INTEGER,\n    FOREIGN KEY(healthAppID) REFERENCES Health_Apps(appID),\n    FOREIGN KEY(functionID) REFERENCES Functions(functionID),\n    PRIMARY KEY(healthAppID, functionID));\nCREATE TABLE Reviews(\n    reviewID INTEGER PRIMARY KEY AUTOINCREMENT,\n    rating INTEGER ,\n    comment TEXT,\n    appID INTEGER,\n    userID INTEGER,\n    FOREIGN KEY(appID) REFERENCES Health_Apps(appID),\n    FOREIGN KEY(userID) REFERENCES Users(userID));\nCREATE TABLE Users(\n    userID INTEGER PRIMARY KEY AUTOINCREMENT,\n    username TEXT,\n    email TEXT,\n    password TEXT);\n\nINSERT INTO \"Functions\" (functionID,value) VALUES (1,'Activity_Tracking'),(2,'Calorie_Counting'),(3,'Meditation'),(4,'Disease_Symptoms'),(5,'Blood_Pressure_Monitoring');\nINSERT INTO \"Health_Apps\" (appID,name,description,price) VALUES (1,'App1','This is App1',0.99),(2,'App2','This is App2',1.99),(3,'App3','This is App3',2.99),(4,'App4','This is App4',3.99),(5,'App5','This is App5',4.99);\nINSERT INTO \"Health_Apps_Functions\" (healthAppID,functionID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\nINSERT INTO \"Reviews\" (reviewID,rating,comment,appID,userID) VALUES (1,5,'Great app!',1,1),(2,4,'Good but could use some improvements.',2,2),(3,3,'Worked well overall.',3,3),(4,2,'Not what I expected.',4,4),(5,1,'Didn''t work as promised.',5,5);\nINSERT INTO \"Users\" (userID,username,email,password) VALUES (1,'User1','user1@example.com','password1'),(2,'User2','user2@example.com','password2'),(3,'User3','user3@example.com','password3'),(4,'User4','user4@example.com','password4'),(5,'User5','user5@example.com','password5');\n",
      "question": "What functions do all health apps have in common?",
      "gold_queries": [
        "SELECT Functions.value  from Health_Apps_Functions join Functions on Health_Apps_Functions.functionID = Functions.functionID join Health_Apps on Health_Apps_Functions.healthAppID = Health_Apps.appID   GROUP BY Health_Apps_Functions.functionID HAVING COUNT(DISTINCT Health_Apps_Functions.healthAppID) = (SELECT COUNT(*) FROM  Health_Apps)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Find the functions that are offered by at least one instance of each health app.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT f.value\nFROM Functions f\nWHERE f.functionID IN (\n    SELECT hf.functionID\n    FROM Health_Apps_Functions hf\n    GROUP BY hf.functionID\n    HAVING COUNT(DISTINCT hf.healthAppID) = (SELECT COUNT(*) FROM Health_Apps)\n)"
          ]
        },
        {
          "interpretation": "Determine the set of `functionID` values present in all rows of the Health_Apps_Functions table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT functionID FROM Health_Apps_Functions GROUP BY functionID HAVING COUNT(DISTINCT healthAppID) = (SELECT COUNT(*) FROM Health_Apps)"
          ]
        },
        {
          "interpretation": "List all functions present in all health apps.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT T1.value FROM Functions AS T1 JOIN Health_Apps_Functions AS T2 ON T1.functionID = T2.functionID"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Healthcare/scope_health_apps_functions/scope_health_apps_functions.sqlite",
      "db_dump": "CREATE TABLE Functions(\n    functionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    value TEXT);\nCREATE TABLE Health_Apps(\n    appID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    description TEXT,\n    price REAL );\nCREATE TABLE Health_Apps_Functions(\n    healthAppID INTEGER,\n    functionID INTEGER,\n    FOREIGN KEY(healthAppID) REFERENCES Health_Apps(appID),\n    FOREIGN KEY(functionID) REFERENCES Functions(functionID),\n    PRIMARY KEY(healthAppID, functionID));\nCREATE TABLE Reviews(\n    reviewID INTEGER PRIMARY KEY AUTOINCREMENT,\n    rating INTEGER ,\n    comment TEXT,\n    appID INTEGER,\n    userID INTEGER,\n    FOREIGN KEY(appID) REFERENCES Health_Apps(appID),\n    FOREIGN KEY(userID) REFERENCES Users(userID));\nCREATE TABLE Users(\n    userID INTEGER PRIMARY KEY AUTOINCREMENT,\n    username TEXT,\n    email TEXT,\n    password TEXT);\n\nINSERT INTO \"Functions\" (functionID,value) VALUES (1,'Activity_Tracking'),(2,'Calorie_Counting'),(3,'Meditation'),(4,'Disease_Symptoms'),(5,'Blood_Pressure_Monitoring');\nINSERT INTO \"Health_Apps\" (appID,name,description,price) VALUES (1,'App1','This is App1',0.99),(2,'App2','This is App2',1.99),(3,'App3','This is App3',2.99),(4,'App4','This is App4',3.99),(5,'App5','This is App5',4.99);\nINSERT INTO \"Health_Apps_Functions\" (healthAppID,functionID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\nINSERT INTO \"Reviews\" (reviewID,rating,comment,appID,userID) VALUES (1,5,'Great app!',1,1),(2,4,'Good but could use some improvements.',2,2),(3,3,'Worked well overall.',3,3),(4,2,'Not what I expected.',4,4),(5,1,'Didn''t work as promised.',5,5);\nINSERT INTO \"Users\" (userID,username,email,password) VALUES (1,'User1','user1@example.com','password1'),(2,'User2','user2@example.com','password2'),(3,'User3','user3@example.com','password3'),(4,'User4','user4@example.com','password4'),(5,'User5','user5@example.com','password5');\n",
      "question": "Show me the functions of each health app.",
      "gold_queries": [
        "SELECT Functions.value  from Health_Apps_Functions join Functions on Health_Apps_Functions.functionID = Functions.functionID join Health_Apps on Health_Apps_Functions.healthAppID = Health_Apps.appID   GROUP BY Health_Apps_Functions.functionID HAVING COUNT(DISTINCT Health_Apps_Functions.healthAppID) = (SELECT COUNT(*) FROM  Health_Apps)",
        "select health_apps.name , functions.value from Health_Apps_Functions join Functions on Health_Apps_Functions.functionID = Functions.functionID join Health_Apps on Health_Apps_Functions.healthAppID = Health_Apps.appID"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Retrieve all functions associated with each health app.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Health_Apps.name, Functions.value\nFROM Health_Apps\nJOIN Health_Apps_Functions ON Health_Apps.appID = Health_Apps_Functions.healthAppID\nJOIN Functions ON Health_Apps_Functions.functionID = Functions.functionID"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 1.0,
        "f1_score": 0.6666666666666666,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Healthcare/scope_health_apps_functions/scope_health_apps_functions.sqlite",
      "db_dump": "CREATE TABLE Functions(\n    functionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    value TEXT);\nCREATE TABLE Health_Apps(\n    appID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    description TEXT,\n    price REAL );\nCREATE TABLE Health_Apps_Functions(\n    healthAppID INTEGER,\n    functionID INTEGER,\n    FOREIGN KEY(healthAppID) REFERENCES Health_Apps(appID),\n    FOREIGN KEY(functionID) REFERENCES Functions(functionID),\n    PRIMARY KEY(healthAppID, functionID));\nCREATE TABLE Reviews(\n    reviewID INTEGER PRIMARY KEY AUTOINCREMENT,\n    rating INTEGER ,\n    comment TEXT,\n    appID INTEGER,\n    userID INTEGER,\n    FOREIGN KEY(appID) REFERENCES Health_Apps(appID),\n    FOREIGN KEY(userID) REFERENCES Users(userID));\nCREATE TABLE Users(\n    userID INTEGER PRIMARY KEY AUTOINCREMENT,\n    username TEXT,\n    email TEXT,\n    password TEXT);\n\nINSERT INTO \"Functions\" (functionID,value) VALUES (1,'Activity_Tracking'),(2,'Calorie_Counting'),(3,'Meditation'),(4,'Disease_Symptoms'),(5,'Blood_Pressure_Monitoring');\nINSERT INTO \"Health_Apps\" (appID,name,description,price) VALUES (1,'App1','This is App1',0.99),(2,'App2','This is App2',1.99),(3,'App3','This is App3',2.99),(4,'App4','This is App4',3.99),(5,'App5','This is App5',4.99);\nINSERT INTO \"Health_Apps_Functions\" (healthAppID,functionID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\nINSERT INTO \"Reviews\" (reviewID,rating,comment,appID,userID) VALUES (1,5,'Great app!',1,1),(2,4,'Good but could use some improvements.',2,2),(3,3,'Worked well overall.',3,3),(4,2,'Not what I expected.',4,4),(5,1,'Didn''t work as promised.',5,5);\nINSERT INTO \"Users\" (userID,username,email,password) VALUES (1,'User1','user1@example.com','password1'),(2,'User2','user2@example.com','password2'),(3,'User3','user3@example.com','password3'),(4,'User4','user4@example.com','password4'),(5,'User5','user5@example.com','password5');\n",
      "question": "For every health app, list the functions they have.",
      "gold_queries": [
        "select health_apps.name , functions.value from Health_Apps_Functions join Functions on Health_Apps_Functions.functionID = Functions.functionID join Health_Apps on Health_Apps_Functions.healthAppID = Health_Apps.appID"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Show for each health app the functions it provides.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT H.name, F.value\nFROM Health_Apps H\nJOIN Health_Apps_Functions HAF ON H.appID = HAF.healthAppID\nJOIN Functions F ON HAF.functionID = F.functionID"
          ]
        },
        {
          "interpretation": "Display the functions present in every health app.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT F.value\nFROM Functions F\nWHERE F.functionID IN (\n    SELECT HF.functionID\n    FROM Health_Apps_Functions HF\n    GROUP BY HF.functionID\n    HAVING COUNT(DISTINCT HF.healthAppID) = (SELECT COUNT(*) FROM Health_Apps)\n)"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Filmmaking/scope_locations_managers_responsibilities/scope_locations_managers_responsibilities.sqlite",
      "db_dump": "CREATE TABLE Directed_Movies (\n    director_id INTEGER,\n    movie_id INTEGER,\n    FOREIGN KEY(director_id) REFERENCES Directors(id),\n    FOREIGN KEY(movie_id) REFERENCES Movie_Projects(id)\n);\nCREATE TABLE Directors (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    director_name TEXT,\n    birth_year INT\n);\nCREATE TABLE Film_Crews (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    crew_name TEXT,\n    role TEXT\n);\nCREATE TABLE Locations_Managers (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    contact_info TEXT\n);\nCREATE TABLE Locations_Managers_Responsibilities (\n    locations_manager_id INTEGER,\n    responsibility_id INTEGER,\n    FOREIGN KEY(locations_manager_id) REFERENCES Locations_Managers(id),\n    FOREIGN KEY(responsibility_id) REFERENCES Responsibilities(id)\n);\nCREATE TABLE Movie_Projects (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE,\n    budget REAL\n);\nCREATE TABLE Movies_Cast (\n    movie_id INTEGER,\n    actor_id INTEGER,\n    character_name TEXT,\n    FOREIGN KEY(movie_id) REFERENCES Movie_Projects(id),\n    FOREIGN KEY(actor_id) REFERENCES Actors(id)\n);\nCREATE TABLE Responsibilities (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    description TEXT\n);\n\nINSERT INTO \"Directed_Movies\" (director_id,movie_id) VALUES (1,1),(2,2),(3,3),(4,4),(5,5);\nINSERT INTO \"Directors\" (id,director_name,birth_year) VALUES (1,'Samuel L Jackson',1948),(2,'Denzel Washington',1954),(3,'Tom Hanks',1956),(4,'Robert De Niro',1943),(5,'Anthony Hopkins',1937);\nINSERT INTO \"Film_Crews\" (id,crew_name,role) VALUES (1,'Camera Team','Director of Photography'),(2,'Sound Team','Boom Operator'),(3,'Production Designers','Art Director'),(4,'Costume Department','Costumer'),(5,'Special Effects','Pyrotechnics Specialist');\nINSERT INTO \"Locations_Managers\" (id,name,contact_info) VALUES (1,'John Doe','+1234567890'),(2,'Jane Smith','+9876543210'),(3,'Alice Johnson','+1112223330'),(4,'Bob Brown','+4445556660'),(5,'Charlie Davis','+7778889990');\nINSERT INTO \"Locations_Managers_Responsibilities\" (locations_manager_id,responsibility_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,5);\nINSERT INTO \"Movie_Projects\" (id,title,release_date,budget) VALUES (1,'The Big Adventure','2022-12-01',10000000.0),(2,'Alien Invasion','2023-06-15',15000000.0),(3,'Love Story','2024-02-14',5000000.0),(4,'Action Thriller','2025-08-20',20000000.0),(5,'Comedy Drama','2026-04-01',7000000.0);\nINSERT INTO \"Movies_Cast\" (movie_id,actor_id,character_name) VALUES (1,1,'Hero'),(1,2,'Villain'),(2,3,'Lead Scientist'),(2,4,'Intergalactic Warrior'),(3,5,'Lonely Heart'),(3,6,'Business Tycoon'),(4,7,'Detective'),(4,8,'Gang Leader'),(5,9,'Small Town Girl'),(5,10,'Wise Old Man');\nINSERT INTO \"Responsibilities\" (id,description) VALUES (1,'Film Permit Acquisition'),(2,'Location Scouting'),(3,'Health & Safety Compliance'),(4,'Contract Negotiation'),(5,'Equipment Coordination');\n",
      "question": "Show me the managers and their responsibilities.",
      "gold_queries": [
        "select locations_managers.name , responsibilities.description from Locations_Managers_Responsibilities join Responsibilities on Locations_Managers_Responsibilities.responsibility_id = Responsibilities.id join Locations_Managers on Locations_Managers_Responsibilities.locations_manager_id = Locations_Managers.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List name and description for each row in Locations_Managers_Responsibilities",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT T1.name, T3.description FROM Locations_Managers AS T1 JOIN Locations_Managers_Responsibilities AS T2 ON T1.id = T2.locations_manager_id JOIN Responsibilities AS T3 ON T2.responsibility_id = T3.id"
          ]
        },
        {
          "interpretation": "from Locations_Managers_Responsibilities",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT locations_manager_id, responsibility_id FROM Locations_Managers_Responsibilities"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Filmmaking/scope_locations_managers_responsibilities/scope_locations_managers_responsibilities.sqlite",
      "db_dump": "CREATE TABLE Directed_Movies (\n    director_id INTEGER,\n    movie_id INTEGER,\n    FOREIGN KEY(director_id) REFERENCES Directors(id),\n    FOREIGN KEY(movie_id) REFERENCES Movie_Projects(id)\n);\nCREATE TABLE Directors (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    director_name TEXT,\n    birth_year INT\n);\nCREATE TABLE Film_Crews (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    crew_name TEXT,\n    role TEXT\n);\nCREATE TABLE Locations_Managers (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    contact_info TEXT\n);\nCREATE TABLE Locations_Managers_Responsibilities (\n    locations_manager_id INTEGER,\n    responsibility_id INTEGER,\n    FOREIGN KEY(locations_manager_id) REFERENCES Locations_Managers(id),\n    FOREIGN KEY(responsibility_id) REFERENCES Responsibilities(id)\n);\nCREATE TABLE Movie_Projects (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE,\n    budget REAL\n);\nCREATE TABLE Movies_Cast (\n    movie_id INTEGER,\n    actor_id INTEGER,\n    character_name TEXT,\n    FOREIGN KEY(movie_id) REFERENCES Movie_Projects(id),\n    FOREIGN KEY(actor_id) REFERENCES Actors(id)\n);\nCREATE TABLE Responsibilities (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    description TEXT\n);\n\nINSERT INTO \"Directed_Movies\" (director_id,movie_id) VALUES (1,1),(2,2),(3,3),(4,4),(5,5);\nINSERT INTO \"Directors\" (id,director_name,birth_year) VALUES (1,'Samuel L Jackson',1948),(2,'Denzel Washington',1954),(3,'Tom Hanks',1956),(4,'Robert De Niro',1943),(5,'Anthony Hopkins',1937);\nINSERT INTO \"Film_Crews\" (id,crew_name,role) VALUES (1,'Camera Team','Director of Photography'),(2,'Sound Team','Boom Operator'),(3,'Production Designers','Art Director'),(4,'Costume Department','Costumer'),(5,'Special Effects','Pyrotechnics Specialist');\nINSERT INTO \"Locations_Managers\" (id,name,contact_info) VALUES (1,'John Doe','+1234567890'),(2,'Jane Smith','+9876543210'),(3,'Alice Johnson','+1112223330'),(4,'Bob Brown','+4445556660'),(5,'Charlie Davis','+7778889990');\nINSERT INTO \"Locations_Managers_Responsibilities\" (locations_manager_id,responsibility_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,5);\nINSERT INTO \"Movie_Projects\" (id,title,release_date,budget) VALUES (1,'The Big Adventure','2022-12-01',10000000.0),(2,'Alien Invasion','2023-06-15',15000000.0),(3,'Love Story','2024-02-14',5000000.0),(4,'Action Thriller','2025-08-20',20000000.0),(5,'Comedy Drama','2026-04-01',7000000.0);\nINSERT INTO \"Movies_Cast\" (movie_id,actor_id,character_name) VALUES (1,1,'Hero'),(1,2,'Villain'),(2,3,'Lead Scientist'),(2,4,'Intergalactic Warrior'),(3,5,'Lonely Heart'),(3,6,'Business Tycoon'),(4,7,'Detective'),(4,8,'Gang Leader'),(5,9,'Small Town Girl'),(5,10,'Wise Old Man');\nINSERT INTO \"Responsibilities\" (id,description) VALUES (1,'Film Permit Acquisition'),(2,'Location Scouting'),(3,'Health & Safety Compliance'),(4,'Contract Negotiation'),(5,'Equipment Coordination');\n",
      "question": "What responsibilities are applicable to all managers at the same time?",
      "gold_queries": [
        "SELECT Responsibilities.description  from Locations_Managers_Responsibilities join Responsibilities on Locations_Managers_Responsibilities.responsibility_id = Responsibilities.id join Locations_Managers on Locations_Managers_Responsibilities.locations_manager_id = Locations_Managers.id   GROUP BY Locations_Managers_Responsibilities.responsibility_id HAVING COUNT(DISTINCT Locations_Managers_Responsibilities.locations_manager_id) = (SELECT COUNT(*) FROM  Locations_Managers)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Are there any responsibilities common to all locations managers regardless of their specific assignments?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT description FROM Responsibilities WHERE id IN (SELECT responsibility_id FROM Locations_Managers_Responsibilities GROUP BY responsibility_id HAVING COUNT(DISTINCT locations_manager_id) = (SELECT COUNT(*) FROM Locations_Managers))"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Filmmaking/scope_hair_stylists_styles/scope_hair_stylists_styles.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    birth_date DATE\n);\nCREATE TABLE Casting (\n    casting_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    actor_id INTEGER,\n    role_id INTEGER,\n    FOREIGN KEY(actor_id) REFERENCES Actors(actor_id),\n    FOREIGN KEY(role_id) REFERENCES Roles(role_id)\n);\nCREATE TABLE Film_Projects (\n    project_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE\n);\nCREATE TABLE Hair_Stylists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    experience INT\n);\nCREATE TABLE Hair_Stylists_Styles (\n    hairdresser_id INTEGER,\n    style_id INTEGER,\n    FOREIGN KEY(hairdresser_id) REFERENCES Hair_Stylists(id),\n    FOREIGN KEY(style_id) REFERENCES Styles(style_id)\n);\nCREATE TABLE Roles (\n    role_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    character_name TEXT,\n    film_project_id INTEGER,\n    FOREIGN KEY(film_project_id) REFERENCES Film_Projects(project_id)\n);\nCREATE TABLE Styles (\n    style_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    style_name TEXT,\n    description TEXT\n);\n\nINSERT INTO \"Actors\" (actor_id,first_name,last_name,birth_date) VALUES (1,'Leonardo','DiCaprio','1974-11-11'),(2,'Ellen','Page','1987-01-21'),(3,'Christian','Bale','1974-01-30'),(4,'Anne','Hathaway','1982-11-12'),(5,'Natalie','Portman','1981-06-09');\nINSERT INTO \"Casting\" (casting_id,actor_id,role_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Film_Projects\" (project_id,title,release_date) VALUES (1,'The Great Gatsby','2022-05-29'),(2,'Inception','2010-07-16'),(3,'Interstellar','2014-11-07'),(4,'La La Land','2016-12-02'),(5,'Black Swan','2010-12-01');\nINSERT INTO \"Hair_Stylists\" (id,name,experience) VALUES (1,'John Doe',10),(2,'Jane Smith',8),(3,'Emily Johnson',6),(4,'Michael Brown',3),(5,'Linda Davis',7);\nINSERT INTO \"Hair_Stylists_Styles\" (hairdresser_id,style_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\nINSERT INTO \"Roles\" (role_id,character_name,film_project_id) VALUES (1,'Gatsby',1),(2,'Cobb',2),(3,'Cooper',3),(4,'Sebastian',4),(5,'Arthur',5);\nINSERT INTO \"Styles\" (style_id,style_name,description) VALUES (1,'Period Hairstyle','A hairstyle from a specific historical period.'),(2,'Updo','A hairstyle where the hair is pulled up off the neck and secured at the top or back of the head.'),(3,'Bob','A short haircut that falls just below the chin.'),(4,'Pixie','A very short haircut with hair cut close to the scalp.'),(5,'Curl','A hairstyle characterized by curls or waves in the hair.');\n",
      "question": "For every hair stylist, give me the styles that they offer",
      "gold_queries": [
        "select hair_stylists.name , styles.style_name from Hair_Stylists_Styles join Styles on Hair_Stylists_Styles.style_id = Styles.style_id join Hair_Stylists on Hair_Stylists_Styles.hairdresser_id = Hair_Stylists.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Populate a table showing each hairdresser and their associated style names.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT h.name AS hairdresser_name, s.style_name\nFROM Hair_Stylists h\nJOIN Hair_Stylists_Styles hss ON h.id = hss.hairdresser_id\nJOIN Styles s ON hss.style_id = s.style_id"
          ]
        },
        {
          "interpretation": "Retrieve the style_id values for each hairdresser_id from the Hair_Stylists_Styles table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT hairdresser_id, style_id FROM Hair_Stylists_Styles"
          ]
        },
        {
          "interpretation": "List all unique styles associated with each hairdresser.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT id, name, style_name \nFROM Hair_Stylists \nJOIN Hair_Stylists_Styles ON Hair_Stylists.id = Hair_Stylists_Styles.hairdresser_id \nJOIN Styles ON Hair_Stylists_Styles.style_id = Styles.style_id \nORDER BY id, style_name"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Filmmaking/scope_hair_stylists_styles/scope_hair_stylists_styles.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    birth_date DATE\n);\nCREATE TABLE Casting (\n    casting_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    actor_id INTEGER,\n    role_id INTEGER,\n    FOREIGN KEY(actor_id) REFERENCES Actors(actor_id),\n    FOREIGN KEY(role_id) REFERENCES Roles(role_id)\n);\nCREATE TABLE Film_Projects (\n    project_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE\n);\nCREATE TABLE Hair_Stylists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    experience INT\n);\nCREATE TABLE Hair_Stylists_Styles (\n    hairdresser_id INTEGER,\n    style_id INTEGER,\n    FOREIGN KEY(hairdresser_id) REFERENCES Hair_Stylists(id),\n    FOREIGN KEY(style_id) REFERENCES Styles(style_id)\n);\nCREATE TABLE Roles (\n    role_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    character_name TEXT,\n    film_project_id INTEGER,\n    FOREIGN KEY(film_project_id) REFERENCES Film_Projects(project_id)\n);\nCREATE TABLE Styles (\n    style_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    style_name TEXT,\n    description TEXT\n);\n\nINSERT INTO \"Actors\" (actor_id,first_name,last_name,birth_date) VALUES (1,'Leonardo','DiCaprio','1974-11-11'),(2,'Ellen','Page','1987-01-21'),(3,'Christian','Bale','1974-01-30'),(4,'Anne','Hathaway','1982-11-12'),(5,'Natalie','Portman','1981-06-09');\nINSERT INTO \"Casting\" (casting_id,actor_id,role_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Film_Projects\" (project_id,title,release_date) VALUES (1,'The Great Gatsby','2022-05-29'),(2,'Inception','2010-07-16'),(3,'Interstellar','2014-11-07'),(4,'La La Land','2016-12-02'),(5,'Black Swan','2010-12-01');\nINSERT INTO \"Hair_Stylists\" (id,name,experience) VALUES (1,'John Doe',10),(2,'Jane Smith',8),(3,'Emily Johnson',6),(4,'Michael Brown',3),(5,'Linda Davis',7);\nINSERT INTO \"Hair_Stylists_Styles\" (hairdresser_id,style_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\nINSERT INTO \"Roles\" (role_id,character_name,film_project_id) VALUES (1,'Gatsby',1),(2,'Cobb',2),(3,'Cooper',3),(4,'Sebastian',4),(5,'Arthur',5);\nINSERT INTO \"Styles\" (style_id,style_name,description) VALUES (1,'Period Hairstyle','A hairstyle from a specific historical period.'),(2,'Updo','A hairstyle where the hair is pulled up off the neck and secured at the top or back of the head.'),(3,'Bob','A short haircut that falls just below the chin.'),(4,'Pixie','A very short haircut with hair cut close to the scalp.'),(5,'Curl','A hairstyle characterized by curls or waves in the hair.');\n",
      "question": "For each hair stylist, list information on the styles offered (including their descriptions).",
      "gold_queries": [
        "select hair_stylists.name , styles.style_name , styles.description from Hair_Stylists_Styles join Styles on Hair_Stylists_Styles.style_id = Styles.style_id join Hair_Stylists on Hair_Stylists_Styles.hairdresser_id = Hair_Stylists.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List the hair stylist's name and the styles they offer.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.name, T3.style_name FROM Hair_Stylists AS T1 JOIN Hair_Stylists_Styles AS T2 ON T1.id = T2.hairdresser_id JOIN Styles AS T3 ON T2.style_id = T3.style_id"
          ]
        },
        {
          "interpretation": "For each unique hair stylist, provide their name and a list of style names and descriptions.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT HS.name, S.style_name, S.description\nFROM Hair_Stylists_Styles HSS\nJOIN Hair_Stylists HS ON HSS.hairdresser_id = HS.id\nJOIN Styles S ON HSS.style_id = S.style_id"
          ]
        },
        {
          "interpretation": "Display a table with columns for \"Hair Stylist Name\" and \"Style Description\" populated by data from the Hair_Stylists and Styles tables.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.name AS \"Hair Stylist Name\", T3.description AS \"Style Description\"\nFROM Hair_Stylists_Styles AS T2\nJOIN Hair_Stylists AS T1 ON T2.hairdresser_id = T1.id\nJOIN Styles AS T3 ON T2.style_id = T3.style_id"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Filmmaking/scope_hair_stylists_styles/scope_hair_stylists_styles.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    birth_date DATE\n);\nCREATE TABLE Casting (\n    casting_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    actor_id INTEGER,\n    role_id INTEGER,\n    FOREIGN KEY(actor_id) REFERENCES Actors(actor_id),\n    FOREIGN KEY(role_id) REFERENCES Roles(role_id)\n);\nCREATE TABLE Film_Projects (\n    project_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE\n);\nCREATE TABLE Hair_Stylists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    experience INT\n);\nCREATE TABLE Hair_Stylists_Styles (\n    hairdresser_id INTEGER,\n    style_id INTEGER,\n    FOREIGN KEY(hairdresser_id) REFERENCES Hair_Stylists(id),\n    FOREIGN KEY(style_id) REFERENCES Styles(style_id)\n);\nCREATE TABLE Roles (\n    role_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    character_name TEXT,\n    film_project_id INTEGER,\n    FOREIGN KEY(film_project_id) REFERENCES Film_Projects(project_id)\n);\nCREATE TABLE Styles (\n    style_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    style_name TEXT,\n    description TEXT\n);\n\nINSERT INTO \"Actors\" (actor_id,first_name,last_name,birth_date) VALUES (1,'Leonardo','DiCaprio','1974-11-11'),(2,'Ellen','Page','1987-01-21'),(3,'Christian','Bale','1974-01-30'),(4,'Anne','Hathaway','1982-11-12'),(5,'Natalie','Portman','1981-06-09');\nINSERT INTO \"Casting\" (casting_id,actor_id,role_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Film_Projects\" (project_id,title,release_date) VALUES (1,'The Great Gatsby','2022-05-29'),(2,'Inception','2010-07-16'),(3,'Interstellar','2014-11-07'),(4,'La La Land','2016-12-02'),(5,'Black Swan','2010-12-01');\nINSERT INTO \"Hair_Stylists\" (id,name,experience) VALUES (1,'John Doe',10),(2,'Jane Smith',8),(3,'Emily Johnson',6),(4,'Michael Brown',3),(5,'Linda Davis',7);\nINSERT INTO \"Hair_Stylists_Styles\" (hairdresser_id,style_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\nINSERT INTO \"Roles\" (role_id,character_name,film_project_id) VALUES (1,'Gatsby',1),(2,'Cobb',2),(3,'Cooper',3),(4,'Sebastian',4),(5,'Arthur',5);\nINSERT INTO \"Styles\" (style_id,style_name,description) VALUES (1,'Period Hairstyle','A hairstyle from a specific historical period.'),(2,'Updo','A hairstyle where the hair is pulled up off the neck and secured at the top or back of the head.'),(3,'Bob','A short haircut that falls just below the chin.'),(4,'Pixie','A very short haircut with hair cut close to the scalp.'),(5,'Curl','A hairstyle characterized by curls or waves in the hair.');\n",
      "question": "What styles are available at every hair stylist?",
      "gold_queries": [
        "SELECT Styles.style_name  from Hair_Stylists_Styles join Styles on Hair_Stylists_Styles.style_id = Styles.style_id join Hair_Stylists on Hair_Stylists_Styles.hairdresser_id = Hair_Stylists.id   GROUP BY Hair_Stylists_Styles.style_id HAVING COUNT(DISTINCT Hair_Stylists_Styles.hairdresser_id) = (SELECT COUNT(*) FROM  Hair_Stylists)",
        "select hair_stylists.name , styles.style_name from Hair_Stylists_Styles join Styles on Hair_Stylists_Styles.style_id = Styles.style_id join Hair_Stylists on Hair_Stylists_Styles.hairdresser_id = Hair_Stylists.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What is the intersection of all hair stylists' lists of styles?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT style_id FROM Hair_Stylists_Styles GROUP BY style_id HAVING COUNT(DISTINCT hairdresser_id) = (SELECT COUNT(*) FROM Hair_Stylists)"
          ]
        },
        {
          "interpretation": "For each hair stylist, what styles are they listed as having experience with?",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT HS.name, S.style_name\nFROM Hair_Stylists HS\nJOIN Hair_Stylists_Styles HSS ON HS.id = HSS.hairdresser_id\nJOIN Styles S ON HSS.style_id = S.style_id"
          ]
        },
        {
          "interpretation": "What styles are offered by all hair stylists?",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT style_name FROM Styles WHERE style_id IN (SELECT style_id FROM Hair_Stylists_Styles GROUP BY style_id HAVING COUNT(DISTINCT hairdresser_id) = (SELECT COUNT(*) FROM Hair_Stylists))"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.6666666666666666,
        "f1_score": 0.8,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/scope/Filmmaking/scope_hair_stylists_styles/scope_hair_stylists_styles.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    birth_date DATE\n);\nCREATE TABLE Casting (\n    casting_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    actor_id INTEGER,\n    role_id INTEGER,\n    FOREIGN KEY(actor_id) REFERENCES Actors(actor_id),\n    FOREIGN KEY(role_id) REFERENCES Roles(role_id)\n);\nCREATE TABLE Film_Projects (\n    project_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE\n);\nCREATE TABLE Hair_Stylists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    experience INT\n);\nCREATE TABLE Hair_Stylists_Styles (\n    hairdresser_id INTEGER,\n    style_id INTEGER,\n    FOREIGN KEY(hairdresser_id) REFERENCES Hair_Stylists(id),\n    FOREIGN KEY(style_id) REFERENCES Styles(style_id)\n);\nCREATE TABLE Roles (\n    role_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    character_name TEXT,\n    film_project_id INTEGER,\n    FOREIGN KEY(film_project_id) REFERENCES Film_Projects(project_id)\n);\nCREATE TABLE Styles (\n    style_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    style_name TEXT,\n    description TEXT\n);\n\nINSERT INTO \"Actors\" (actor_id,first_name,last_name,birth_date) VALUES (1,'Leonardo','DiCaprio','1974-11-11'),(2,'Ellen','Page','1987-01-21'),(3,'Christian','Bale','1974-01-30'),(4,'Anne','Hathaway','1982-11-12'),(5,'Natalie','Portman','1981-06-09');\nINSERT INTO \"Casting\" (casting_id,actor_id,role_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Film_Projects\" (project_id,title,release_date) VALUES (1,'The Great Gatsby','2022-05-29'),(2,'Inception','2010-07-16'),(3,'Interstellar','2014-11-07'),(4,'La La Land','2016-12-02'),(5,'Black Swan','2010-12-01');\nINSERT INTO \"Hair_Stylists\" (id,name,experience) VALUES (1,'John Doe',10),(2,'Jane Smith',8),(3,'Emily Johnson',6),(4,'Michael Brown',3),(5,'Linda Davis',7);\nINSERT INTO \"Hair_Stylists_Styles\" (hairdresser_id,style_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\nINSERT INTO \"Roles\" (role_id,character_name,film_project_id) VALUES (1,'Gatsby',1),(2,'Cobb',2),(3,'Cooper',3),(4,'Sebastian',4),(5,'Arthur',5);\nINSERT INTO \"Styles\" (style_id,style_name,description) VALUES (1,'Period Hairstyle','A hairstyle from a specific historical period.'),(2,'Updo','A hairstyle where the hair is pulled up off the neck and secured at the top or back of the head.'),(3,'Bob','A short haircut that falls just below the chin.'),(4,'Pixie','A very short haircut with hair cut close to the scalp.'),(5,'Curl','A hairstyle characterized by curls or waves in the hair.');\n",
      "question": "What is the style description that is in common for all hair stylists?",
      "gold_queries": [
        "SELECT Styles.description  from Hair_Stylists_Styles join Styles on Hair_Stylists_Styles.style_id = Styles.style_id join Hair_Stylists on Hair_Stylists_Styles.hairdresser_id = Hair_Stylists.id   GROUP BY Hair_Stylists_Styles.style_id HAVING COUNT(DISTINCT Hair_Stylists_Styles.hairdresser_id) = (SELECT COUNT(*) FROM  Hair_Stylists)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Is there a single style description that applies to every hairstyle listed in the tabel Hair_Stylists_Styles?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT description FROM Styles WHERE style_id = (SELECT style_id FROM Hair_Stylists_Styles GROUP BY style_id HAVING COUNT(*) = (SELECT COUNT(DISTINCT style_id) FROM Hair_Stylists_Styles))"
          ]
        },
        {
          "interpretation": "What style description is assigned to all hair stylists in the Hair_Stylists_Styles table?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT T2.description FROM Hair_Stylists_Styles AS T1 JOIN Styles AS T2 ON T1.style_id = T2.style_id"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Filmmaking/scope_hair_stylists_styles/scope_hair_stylists_styles.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    birth_date DATE\n);\nCREATE TABLE Casting (\n    casting_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    actor_id INTEGER,\n    role_id INTEGER,\n    FOREIGN KEY(actor_id) REFERENCES Actors(actor_id),\n    FOREIGN KEY(role_id) REFERENCES Roles(role_id)\n);\nCREATE TABLE Film_Projects (\n    project_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE\n);\nCREATE TABLE Hair_Stylists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    experience INT\n);\nCREATE TABLE Hair_Stylists_Styles (\n    hairdresser_id INTEGER,\n    style_id INTEGER,\n    FOREIGN KEY(hairdresser_id) REFERENCES Hair_Stylists(id),\n    FOREIGN KEY(style_id) REFERENCES Styles(style_id)\n);\nCREATE TABLE Roles (\n    role_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    character_name TEXT,\n    film_project_id INTEGER,\n    FOREIGN KEY(film_project_id) REFERENCES Film_Projects(project_id)\n);\nCREATE TABLE Styles (\n    style_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    style_name TEXT,\n    description TEXT\n);\n\nINSERT INTO \"Actors\" (actor_id,first_name,last_name,birth_date) VALUES (1,'Leonardo','DiCaprio','1974-11-11'),(2,'Ellen','Page','1987-01-21'),(3,'Christian','Bale','1974-01-30'),(4,'Anne','Hathaway','1982-11-12'),(5,'Natalie','Portman','1981-06-09');\nINSERT INTO \"Casting\" (casting_id,actor_id,role_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Film_Projects\" (project_id,title,release_date) VALUES (1,'The Great Gatsby','2022-05-29'),(2,'Inception','2010-07-16'),(3,'Interstellar','2014-11-07'),(4,'La La Land','2016-12-02'),(5,'Black Swan','2010-12-01');\nINSERT INTO \"Hair_Stylists\" (id,name,experience) VALUES (1,'John Doe',10),(2,'Jane Smith',8),(3,'Emily Johnson',6),(4,'Michael Brown',3),(5,'Linda Davis',7);\nINSERT INTO \"Hair_Stylists_Styles\" (hairdresser_id,style_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\nINSERT INTO \"Roles\" (role_id,character_name,film_project_id) VALUES (1,'Gatsby',1),(2,'Cobb',2),(3,'Cooper',3),(4,'Sebastian',4),(5,'Arthur',5);\nINSERT INTO \"Styles\" (style_id,style_name,description) VALUES (1,'Period Hairstyle','A hairstyle from a specific historical period.'),(2,'Updo','A hairstyle where the hair is pulled up off the neck and secured at the top or back of the head.'),(3,'Bob','A short haircut that falls just below the chin.'),(4,'Pixie','A very short haircut with hair cut close to the scalp.'),(5,'Curl','A hairstyle characterized by curls or waves in the hair.');\n",
      "question": "Tell me about the styles every hair stylist offers (with their descriptions).",
      "gold_queries": [
        "SELECT Styles.style_name, Styles.description  from Hair_Stylists_Styles join Styles on Hair_Stylists_Styles.style_id = Styles.style_id join Hair_Stylists on Hair_Stylists_Styles.hairdresser_id = Hair_Stylists.id   GROUP BY Hair_Stylists_Styles.style_id HAVING COUNT(DISTINCT Hair_Stylists_Styles.hairdresser_id) = (SELECT COUNT(*) FROM  Hair_Stylists)",
        "select hair_stylists.name , styles.style_name , styles.description from Hair_Stylists_Styles join Styles on Hair_Stylists_Styles.style_id = Styles.style_id join Hair_Stylists on Hair_Stylists_Styles.hairdresser_id = Hair_Stylists.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List all styles and their descriptions that are associated with any hair stylist.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Styles.style_name, Styles.description FROM Styles INNER JOIN Hair_Stylists_Styles ON Styles.style_id = Hair_Stylists_Styles.style_id"
          ]
        },
        {
          "interpretation": "Retrieve a list of style names and descriptions offered by each hair stylist.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT HS.name, S.style_name, S.description\nFROM Hair_Stylists HS\nJOIN Hair_Stylists_Styles HSS ON HS.id = HSS.hairdresser_id\nJOIN Styles S ON HSS.style_id = S.style_id"
          ]
        },
        {
          "interpretation": "Find all distinct styles offered by hair stylists in the database and retrieve their descriptions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT description FROM Styles"
          ]
        },
        {
          "interpretation": "List all unique styles offered by hairdressers along with their corresponding descriptions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT style_name, description FROM Styles"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.25,
        "f1_score": 0.3333333333333333,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Filmmaking/scope_hair_stylists_styles/scope_hair_stylists_styles.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    birth_date DATE\n);\nCREATE TABLE Casting (\n    casting_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    actor_id INTEGER,\n    role_id INTEGER,\n    FOREIGN KEY(actor_id) REFERENCES Actors(actor_id),\n    FOREIGN KEY(role_id) REFERENCES Roles(role_id)\n);\nCREATE TABLE Film_Projects (\n    project_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE\n);\nCREATE TABLE Hair_Stylists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    experience INT\n);\nCREATE TABLE Hair_Stylists_Styles (\n    hairdresser_id INTEGER,\n    style_id INTEGER,\n    FOREIGN KEY(hairdresser_id) REFERENCES Hair_Stylists(id),\n    FOREIGN KEY(style_id) REFERENCES Styles(style_id)\n);\nCREATE TABLE Roles (\n    role_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    character_name TEXT,\n    film_project_id INTEGER,\n    FOREIGN KEY(film_project_id) REFERENCES Film_Projects(project_id)\n);\nCREATE TABLE Styles (\n    style_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    style_name TEXT,\n    description TEXT\n);\n\nINSERT INTO \"Actors\" (actor_id,first_name,last_name,birth_date) VALUES (1,'Leonardo','DiCaprio','1974-11-11'),(2,'Ellen','Page','1987-01-21'),(3,'Christian','Bale','1974-01-30'),(4,'Anne','Hathaway','1982-11-12'),(5,'Natalie','Portman','1981-06-09');\nINSERT INTO \"Casting\" (casting_id,actor_id,role_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Film_Projects\" (project_id,title,release_date) VALUES (1,'The Great Gatsby','2022-05-29'),(2,'Inception','2010-07-16'),(3,'Interstellar','2014-11-07'),(4,'La La Land','2016-12-02'),(5,'Black Swan','2010-12-01');\nINSERT INTO \"Hair_Stylists\" (id,name,experience) VALUES (1,'John Doe',10),(2,'Jane Smith',8),(3,'Emily Johnson',6),(4,'Michael Brown',3),(5,'Linda Davis',7);\nINSERT INTO \"Hair_Stylists_Styles\" (hairdresser_id,style_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\nINSERT INTO \"Roles\" (role_id,character_name,film_project_id) VALUES (1,'Gatsby',1),(2,'Cobb',2),(3,'Cooper',3),(4,'Sebastian',4),(5,'Arthur',5);\nINSERT INTO \"Styles\" (style_id,style_name,description) VALUES (1,'Period Hairstyle','A hairstyle from a specific historical period.'),(2,'Updo','A hairstyle where the hair is pulled up off the neck and secured at the top or back of the head.'),(3,'Bob','A short haircut that falls just below the chin.'),(4,'Pixie','A very short haircut with hair cut close to the scalp.'),(5,'Curl','A hairstyle characterized by curls or waves in the hair.');\n",
      "question": "What information is there on the styles including their descriptions common to all hair stylists?",
      "gold_queries": [
        "SELECT Styles.style_name, Styles.description  from Hair_Stylists_Styles join Styles on Hair_Stylists_Styles.style_id = Styles.style_id join Hair_Stylists on Hair_Stylists_Styles.hairdresser_id = Hair_Stylists.id   GROUP BY Hair_Stylists_Styles.style_id HAVING COUNT(DISTINCT Hair_Stylists_Styles.hairdresser_id) = (SELECT COUNT(*) FROM  Hair_Stylists)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "A list of all unique styles and their descriptions, regardless of which hair stylists offer them.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT style_name, description FROM Styles"
          ]
        },
        {
          "interpretation": "Styles with descriptions shared by all hair stylists.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT style_name, description \nFROM Styles \nWHERE style_id IN (\n    SELECT style_id \n    FROM Hair_Stylists_Styles \n    GROUP BY style_id \n    HAVING COUNT(DISTINCT hairdresser_id) = (SELECT COUNT(*) FROM Hair_Stylists)\n)"
          ]
        },
        {
          "interpretation": "An inventory of shared style characteristics among all hair stylists.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT style_name FROM Styles WHERE style_id IN (SELECT style_id FROM Hair_Stylists_Styles GROUP BY style_id HAVING COUNT(DISTINCT hairdresser_id) = (SELECT COUNT(*) FROM Hair_Stylists))"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Filmmaking/scope_hair_stylists_styles/scope_hair_stylists_styles.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    birth_date DATE\n);\nCREATE TABLE Casting (\n    casting_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    actor_id INTEGER,\n    role_id INTEGER,\n    FOREIGN KEY(actor_id) REFERENCES Actors(actor_id),\n    FOREIGN KEY(role_id) REFERENCES Roles(role_id)\n);\nCREATE TABLE Film_Projects (\n    project_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE\n);\nCREATE TABLE Hair_Stylists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    experience INT\n);\nCREATE TABLE Hair_Stylists_Styles (\n    hairdresser_id INTEGER,\n    style_id INTEGER,\n    FOREIGN KEY(hairdresser_id) REFERENCES Hair_Stylists(id),\n    FOREIGN KEY(style_id) REFERENCES Styles(style_id)\n);\nCREATE TABLE Roles (\n    role_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    character_name TEXT,\n    film_project_id INTEGER,\n    FOREIGN KEY(film_project_id) REFERENCES Film_Projects(project_id)\n);\nCREATE TABLE Styles (\n    style_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    style_name TEXT,\n    description TEXT\n);\n\nINSERT INTO \"Actors\" (actor_id,first_name,last_name,birth_date) VALUES (1,'Leonardo','DiCaprio','1974-11-11'),(2,'Ellen','Page','1987-01-21'),(3,'Christian','Bale','1974-01-30'),(4,'Anne','Hathaway','1982-11-12'),(5,'Natalie','Portman','1981-06-09');\nINSERT INTO \"Casting\" (casting_id,actor_id,role_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Film_Projects\" (project_id,title,release_date) VALUES (1,'The Great Gatsby','2022-05-29'),(2,'Inception','2010-07-16'),(3,'Interstellar','2014-11-07'),(4,'La La Land','2016-12-02'),(5,'Black Swan','2010-12-01');\nINSERT INTO \"Hair_Stylists\" (id,name,experience) VALUES (1,'John Doe',10),(2,'Jane Smith',8),(3,'Emily Johnson',6),(4,'Michael Brown',3),(5,'Linda Davis',7);\nINSERT INTO \"Hair_Stylists_Styles\" (hairdresser_id,style_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\nINSERT INTO \"Roles\" (role_id,character_name,film_project_id) VALUES (1,'Gatsby',1),(2,'Cobb',2),(3,'Cooper',3),(4,'Sebastian',4),(5,'Arthur',5);\nINSERT INTO \"Styles\" (style_id,style_name,description) VALUES (1,'Period Hairstyle','A hairstyle from a specific historical period.'),(2,'Updo','A hairstyle where the hair is pulled up off the neck and secured at the top or back of the head.'),(3,'Bob','A short haircut that falls just below the chin.'),(4,'Pixie','A very short haircut with hair cut close to the scalp.'),(5,'Curl','A hairstyle characterized by curls or waves in the hair.');\n",
      "question": "Give me the styles that are common to all hair stylists",
      "gold_queries": [
        "SELECT Styles.style_name  from Hair_Stylists_Styles join Styles on Hair_Stylists_Styles.style_id = Styles.style_id join Hair_Stylists on Hair_Stylists_Styles.hairdresser_id = Hair_Stylists.id   GROUP BY Hair_Stylists_Styles.style_id HAVING COUNT(DISTINCT Hair_Stylists_Styles.hairdresser_id) = (SELECT COUNT(*) FROM  Hair_Stylists)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Styles used by every hairdresser",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT style_name \nFROM Styles \nWHERE style_id IN (\n    SELECT style_id \n    FROM Hair_Stylists_Styles \n    GROUP BY style_id \n    HAVING COUNT(DISTINCT hairdresser_id) = (SELECT COUNT(*) FROM Hair_Stylists)\n)"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Filmmaking/scope_hair_stylists_styles/scope_hair_stylists_styles.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    birth_date DATE\n);\nCREATE TABLE Casting (\n    casting_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    actor_id INTEGER,\n    role_id INTEGER,\n    FOREIGN KEY(actor_id) REFERENCES Actors(actor_id),\n    FOREIGN KEY(role_id) REFERENCES Roles(role_id)\n);\nCREATE TABLE Film_Projects (\n    project_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE\n);\nCREATE TABLE Hair_Stylists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    experience INT\n);\nCREATE TABLE Hair_Stylists_Styles (\n    hairdresser_id INTEGER,\n    style_id INTEGER,\n    FOREIGN KEY(hairdresser_id) REFERENCES Hair_Stylists(id),\n    FOREIGN KEY(style_id) REFERENCES Styles(style_id)\n);\nCREATE TABLE Roles (\n    role_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    character_name TEXT,\n    film_project_id INTEGER,\n    FOREIGN KEY(film_project_id) REFERENCES Film_Projects(project_id)\n);\nCREATE TABLE Styles (\n    style_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    style_name TEXT,\n    description TEXT\n);\n\nINSERT INTO \"Actors\" (actor_id,first_name,last_name,birth_date) VALUES (1,'Leonardo','DiCaprio','1974-11-11'),(2,'Ellen','Page','1987-01-21'),(3,'Christian','Bale','1974-01-30'),(4,'Anne','Hathaway','1982-11-12'),(5,'Natalie','Portman','1981-06-09');\nINSERT INTO \"Casting\" (casting_id,actor_id,role_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Film_Projects\" (project_id,title,release_date) VALUES (1,'The Great Gatsby','2022-05-29'),(2,'Inception','2010-07-16'),(3,'Interstellar','2014-11-07'),(4,'La La Land','2016-12-02'),(5,'Black Swan','2010-12-01');\nINSERT INTO \"Hair_Stylists\" (id,name,experience) VALUES (1,'John Doe',10),(2,'Jane Smith',8),(3,'Emily Johnson',6),(4,'Michael Brown',3),(5,'Linda Davis',7);\nINSERT INTO \"Hair_Stylists_Styles\" (hairdresser_id,style_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\nINSERT INTO \"Roles\" (role_id,character_name,film_project_id) VALUES (1,'Gatsby',1),(2,'Cobb',2),(3,'Cooper',3),(4,'Sebastian',4),(5,'Arthur',5);\nINSERT INTO \"Styles\" (style_id,style_name,description) VALUES (1,'Period Hairstyle','A hairstyle from a specific historical period.'),(2,'Updo','A hairstyle where the hair is pulled up off the neck and secured at the top or back of the head.'),(3,'Bob','A short haircut that falls just below the chin.'),(4,'Pixie','A very short haircut with hair cut close to the scalp.'),(5,'Curl','A hairstyle characterized by curls or waves in the hair.');\n",
      "question": "For each hair stylist, give me the style description.",
      "gold_queries": [
        "select hair_stylists.name , styles.description from Hair_Stylists_Styles join Styles on Hair_Stylists_Styles.style_id = Styles.style_id join Hair_Stylists on Hair_Stylists_Styles.hairdresser_id = Hair_Stylists.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List the style names and descriptions for every hair stylist in the database.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT HS.name, S.style_name, S.description \nFROM Hair_Stylists HS \nJOIN Hair_Stylists_Styles HSS ON HS.id = HSS.hairdresser_id \nJOIN Styles S ON HSS.style_id = S.style_id"
          ]
        },
        {
          "interpretation": "Provide a textual representation of every style description, grouped by hair stylist.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT HS.name, S.description\nFROM Hair_Stylists HS\nJOIN Hair_Stylists_Styles HSS ON HS.id = HSS.hairdresser_id\nJOIN Styles S ON HSS.style_id = S.style_id\nGROUP BY HS.name, S.description"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Filmmaking/scope_hair_stylists_styles/scope_hair_stylists_styles.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    birth_date DATE\n);\nCREATE TABLE Casting (\n    casting_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    actor_id INTEGER,\n    role_id INTEGER,\n    FOREIGN KEY(actor_id) REFERENCES Actors(actor_id),\n    FOREIGN KEY(role_id) REFERENCES Roles(role_id)\n);\nCREATE TABLE Film_Projects (\n    project_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE\n);\nCREATE TABLE Hair_Stylists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    experience INT\n);\nCREATE TABLE Hair_Stylists_Styles (\n    hairdresser_id INTEGER,\n    style_id INTEGER,\n    FOREIGN KEY(hairdresser_id) REFERENCES Hair_Stylists(id),\n    FOREIGN KEY(style_id) REFERENCES Styles(style_id)\n);\nCREATE TABLE Roles (\n    role_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    character_name TEXT,\n    film_project_id INTEGER,\n    FOREIGN KEY(film_project_id) REFERENCES Film_Projects(project_id)\n);\nCREATE TABLE Styles (\n    style_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    style_name TEXT,\n    description TEXT\n);\n\nINSERT INTO \"Actors\" (actor_id,first_name,last_name,birth_date) VALUES (1,'Leonardo','DiCaprio','1974-11-11'),(2,'Ellen','Page','1987-01-21'),(3,'Christian','Bale','1974-01-30'),(4,'Anne','Hathaway','1982-11-12'),(5,'Natalie','Portman','1981-06-09');\nINSERT INTO \"Casting\" (casting_id,actor_id,role_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Film_Projects\" (project_id,title,release_date) VALUES (1,'The Great Gatsby','2022-05-29'),(2,'Inception','2010-07-16'),(3,'Interstellar','2014-11-07'),(4,'La La Land','2016-12-02'),(5,'Black Swan','2010-12-01');\nINSERT INTO \"Hair_Stylists\" (id,name,experience) VALUES (1,'John Doe',10),(2,'Jane Smith',8),(3,'Emily Johnson',6),(4,'Michael Brown',3),(5,'Linda Davis',7);\nINSERT INTO \"Hair_Stylists_Styles\" (hairdresser_id,style_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\nINSERT INTO \"Roles\" (role_id,character_name,film_project_id) VALUES (1,'Gatsby',1),(2,'Cobb',2),(3,'Cooper',3),(4,'Sebastian',4),(5,'Arthur',5);\nINSERT INTO \"Styles\" (style_id,style_name,description) VALUES (1,'Period Hairstyle','A hairstyle from a specific historical period.'),(2,'Updo','A hairstyle where the hair is pulled up off the neck and secured at the top or back of the head.'),(3,'Bob','A short haircut that falls just below the chin.'),(4,'Pixie','A very short haircut with hair cut close to the scalp.'),(5,'Curl','A hairstyle characterized by curls or waves in the hair.');\n",
      "question": "Show me the style description for each hair stylist.",
      "gold_queries": [
        "SELECT Styles.description  from Hair_Stylists_Styles join Styles on Hair_Stylists_Styles.style_id = Styles.style_id join Hair_Stylists on Hair_Stylists_Styles.hairdresser_id = Hair_Stylists.id   GROUP BY Hair_Stylists_Styles.style_id HAVING COUNT(DISTINCT Hair_Stylists_Styles.hairdresser_id) = (SELECT COUNT(*) FROM  Hair_Stylists)",
        "select hair_stylists.name , styles.description from Hair_Stylists_Styles join Styles on Hair_Stylists_Styles.style_id = Styles.style_id join Hair_Stylists on Hair_Stylists_Styles.hairdresser_id = Hair_Stylists.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Retrieve the description of the hairstyle associated with each hair stylist.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT HS.name AS hairdresser_name, S.description AS hairstyle_description\nFROM Hair_Stylists AS HS\nJOIN Hair_Stylists_Styles AS HSS ON HS.id = HSS.hairdresser_id\nJOIN Styles AS S ON HSS.style_id = S.style_id"
          ]
        },
        {
          "interpretation": "List the style descriptions for all entries in the Hair_Stylists table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Styles.description\nFROM Hair_Stylists_Styles\nJOIN Styles ON Hair_Stylists_Styles.style_id = Styles.style_id"
          ]
        },
        {
          "interpretation": "Output the description of the styles linked to different hairdressers.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT HS.name, S.style_name, S.description\nFROM Hair_Stylists_Styles HSS\nJOIN Hair_Stylists HS ON HSS.hairdresser_id = HS.id\nJOIN Styles S ON HSS.style_id = S.style_id"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.3333333333333333,
        "f1_score": 0.4,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Filmmaking/scope_locations_managers_responsibilities/scope_locations_managers_responsibilities.sqlite",
      "db_dump": "CREATE TABLE Directed_Movies (\n    director_id INTEGER,\n    movie_id INTEGER,\n    FOREIGN KEY(director_id) REFERENCES Directors(id),\n    FOREIGN KEY(movie_id) REFERENCES Movie_Projects(id)\n);\nCREATE TABLE Directors (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    director_name TEXT,\n    birth_year INT\n);\nCREATE TABLE Film_Crews (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    crew_name TEXT,\n    role TEXT\n);\nCREATE TABLE Locations_Managers (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    contact_info TEXT\n);\nCREATE TABLE Locations_Managers_Responsibilities (\n    locations_manager_id INTEGER,\n    responsibility_id INTEGER,\n    FOREIGN KEY(locations_manager_id) REFERENCES Locations_Managers(id),\n    FOREIGN KEY(responsibility_id) REFERENCES Responsibilities(id)\n);\nCREATE TABLE Movie_Projects (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE,\n    budget REAL\n);\nCREATE TABLE Movies_Cast (\n    movie_id INTEGER,\n    actor_id INTEGER,\n    character_name TEXT,\n    FOREIGN KEY(movie_id) REFERENCES Movie_Projects(id),\n    FOREIGN KEY(actor_id) REFERENCES Actors(id)\n);\nCREATE TABLE Responsibilities (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    description TEXT\n);\n\nINSERT INTO \"Directed_Movies\" (director_id,movie_id) VALUES (1,1),(2,2),(3,3),(4,4),(5,5);\nINSERT INTO \"Directors\" (id,director_name,birth_year) VALUES (1,'Samuel L Jackson',1948),(2,'Denzel Washington',1954),(3,'Tom Hanks',1956),(4,'Robert De Niro',1943),(5,'Anthony Hopkins',1937);\nINSERT INTO \"Film_Crews\" (id,crew_name,role) VALUES (1,'Camera Team','Director of Photography'),(2,'Sound Team','Boom Operator'),(3,'Production Designers','Art Director'),(4,'Costume Department','Costumer'),(5,'Special Effects','Pyrotechnics Specialist');\nINSERT INTO \"Locations_Managers\" (id,name,contact_info) VALUES (1,'John Doe','+1234567890'),(2,'Jane Smith','+9876543210'),(3,'Alice Johnson','+1112223330'),(4,'Bob Brown','+4445556660'),(5,'Charlie Davis','+7778889990');\nINSERT INTO \"Locations_Managers_Responsibilities\" (locations_manager_id,responsibility_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,5);\nINSERT INTO \"Movie_Projects\" (id,title,release_date,budget) VALUES (1,'The Big Adventure','2022-12-01',10000000.0),(2,'Alien Invasion','2023-06-15',15000000.0),(3,'Love Story','2024-02-14',5000000.0),(4,'Action Thriller','2025-08-20',20000000.0),(5,'Comedy Drama','2026-04-01',7000000.0);\nINSERT INTO \"Movies_Cast\" (movie_id,actor_id,character_name) VALUES (1,1,'Hero'),(1,2,'Villain'),(2,3,'Lead Scientist'),(2,4,'Intergalactic Warrior'),(3,5,'Lonely Heart'),(3,6,'Business Tycoon'),(4,7,'Detective'),(4,8,'Gang Leader'),(5,9,'Small Town Girl'),(5,10,'Wise Old Man');\nINSERT INTO \"Responsibilities\" (id,description) VALUES (1,'Film Permit Acquisition'),(2,'Location Scouting'),(3,'Health & Safety Compliance'),(4,'Contract Negotiation'),(5,'Equipment Coordination');\n",
      "question": "Which responsibilities does each location manager have?",
      "gold_queries": [
        "SELECT Responsibilities.description  from Locations_Managers_Responsibilities join Responsibilities on Locations_Managers_Responsibilities.responsibility_id = Responsibilities.id join Locations_Managers on Locations_Managers_Responsibilities.locations_manager_id = Locations_Managers.id   GROUP BY Locations_Managers_Responsibilities.responsibility_id HAVING COUNT(DISTINCT Locations_Managers_Responsibilities.locations_manager_id) = (SELECT COUNT(*) FROM  Locations_Managers)",
        "select locations_managers.name , responsibilities.description from Locations_Managers_Responsibilities join Responsibilities on Locations_Managers_Responsibilities.responsibility_id = Responsibilities.id join Locations_Managers on Locations_Managers_Responsibilities.locations_manager_id = Locations_Managers.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Provide a list of responsibilities for every location manager.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT L.name, R.description\nFROM Locations_Managers L\nJOIN Locations_Managers_Responsibilities LMR ON L.id = LMR.locations_manager_id\nJOIN Responsibilities R ON LMR.responsibility_id = R.id"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 1.0,
        "f1_score": 0.6666666666666666,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Job Postings/vague_2tabs_recruiter/vague_2tabs_recruiter.sqlite",
      "db_dump": "CREATE TABLE Applicant (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    positionId INTEGER,\n    FOREIGN KEY (positionId) REFERENCES Position(id)\n);\nCREATE TABLE Company (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Employee (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    role TEXT,\n    hireDate TEXT\n);\nCREATE TABLE Interview (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date DATETIME,\n    time TEXT,\n    applicantId INTEGER,\n    interviewerId INTEGER,\n    positionId INTEGER,\n    status TEXT ,\n    FOREIGN KEY (applicantId) REFERENCES Applicant(id),\n    FOREIGN KEY (interviewerId) REFERENCES Employee(id),\n    FOREIGN KEY (positionId) REFERENCES Position(id)\n);\nCREATE TABLE Position (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    description TEXT,\n    salary DECIMAL(10,2) ,\n    companyId INTEGER,\n    recruitmentAgencyId INTEGER,\n    FOREIGN KEY (companyId) REFERENCES Company(id),\n    FOREIGN KEY (recruitmentAgencyId) REFERENCES Recruitment_Agency(id)\n);\nCREATE TABLE Recruitment_Agency (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    agencyName TEXT,\n    contactEmail TEXT,\n    contactPhone TEXT\n);\n\nINSERT INTO \"Applicant\" (id,firstName,lastName,email,phoneNumber,positionId) VALUES (1,'John','Smith','johnsmith@example.com','+1-123-456-7890',1),(2,'Jane','Doe','janedoe@example.com','+1-987-654-3210',1);\nINSERT INTO \"Company\" (id,name,location) VALUES (1,'Tech Solutions','San Francisco'),(2,'Software Inc.','New York');\nINSERT INTO \"Employee\" (id,firstName,lastName,email,phoneNumber,role,hireDate) VALUES (1,'Alice','Wonderland','aliceland@example.com','+1-123-456-7890','HR Manager','2022-01-01'),(2,'Bob','Builder','bobbuilder@example.com','+1-987-654-3210','Engineering Director','2021-07-15');\nINSERT INTO \"Interview\" (id,date,time,applicantId,interviewerId,positionId,status) VALUES (1,'2023-01-15','10:00 AM',1,1,1,'Pending'),(2,'2023-01-16','11:00 AM',2,2,1,'Completed');\nINSERT INTO \"Position\" (id,title,description,salary,companyId,recruitmentAgencyId) VALUES (1,'Software Engineer','Develop and maintain software applications.',90000,1,1),(2,'Data Analyst','Analyze data to provide insights and recommendations.',80000,1,2);\nINSERT INTO \"Recruitment_Agency\" (id,agencyName,contactEmail,contactPhone) VALUES (1,'Top Talent Agency','toptalent@example.com','+1-800-123-4567'),(2,'Job Connect','jobconnect@example.com','+1-900-987-6543');\n",
      "question": "Which company has hired a data analyst?",
      "gold_queries": [
        "SELECT r.name\r\nFROM Position p\r\nJOIN Company r ON p.companyId = r.id\r\nWHERE p.title = 'Data Analyst'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Which company has hired someone for the position with an id of 2?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Company.name FROM Company JOIN Position ON Company.id = Position.companyId WHERE Position.id = 2"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Job Postings/vague_2tabs_recruiter/vague_2tabs_recruiter.sqlite",
      "db_dump": "CREATE TABLE Applicant (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    positionId INTEGER,\n    FOREIGN KEY (positionId) REFERENCES Position(id)\n);\nCREATE TABLE Company (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Employee (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    role TEXT,\n    hireDate TEXT\n);\nCREATE TABLE Interview (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date DATETIME,\n    time TEXT,\n    applicantId INTEGER,\n    interviewerId INTEGER,\n    positionId INTEGER,\n    status TEXT ,\n    FOREIGN KEY (applicantId) REFERENCES Applicant(id),\n    FOREIGN KEY (interviewerId) REFERENCES Employee(id),\n    FOREIGN KEY (positionId) REFERENCES Position(id)\n);\nCREATE TABLE Position (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    description TEXT,\n    salary DECIMAL(10,2) ,\n    companyId INTEGER,\n    recruitmentAgencyId INTEGER,\n    FOREIGN KEY (companyId) REFERENCES Company(id),\n    FOREIGN KEY (recruitmentAgencyId) REFERENCES Recruitment_Agency(id)\n);\nCREATE TABLE Recruitment_Agency (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    agencyName TEXT,\n    contactEmail TEXT,\n    contactPhone TEXT\n);\n\nINSERT INTO \"Applicant\" (id,firstName,lastName,email,phoneNumber,positionId) VALUES (1,'John','Smith','johnsmith@example.com','+1-123-456-7890',1),(2,'Jane','Doe','janedoe@example.com','+1-987-654-3210',1);\nINSERT INTO \"Company\" (id,name,location) VALUES (1,'Tech Solutions','San Francisco'),(2,'Software Inc.','New York');\nINSERT INTO \"Employee\" (id,firstName,lastName,email,phoneNumber,role,hireDate) VALUES (1,'Alice','Wonderland','aliceland@example.com','+1-123-456-7890','HR Manager','2022-01-01'),(2,'Bob','Builder','bobbuilder@example.com','+1-987-654-3210','Engineering Director','2021-07-15');\nINSERT INTO \"Interview\" (id,date,time,applicantId,interviewerId,positionId,status) VALUES (1,'2023-01-15','10:00 AM',1,1,1,'Pending'),(2,'2023-01-16','11:00 AM',2,2,1,'Completed');\nINSERT INTO \"Position\" (id,title,description,salary,companyId,recruitmentAgencyId) VALUES (1,'Software Engineer','Develop and maintain software applications.',90000,1,1),(2,'Data Analyst','Analyze data to provide insights and recommendations.',80000,1,2);\nINSERT INTO \"Recruitment_Agency\" (id,agencyName,contactEmail,contactPhone) VALUES (1,'Top Talent Agency','toptalent@example.com','+1-800-123-4567'),(2,'Job Connect','jobconnect@example.com','+1-900-987-6543');\n",
      "question": "What company hired the data analyst and which recruitment agency was used?",
      "gold_queries": [
        "SELECT r.name, ag.agencyName\r\nFROM Position p\r\nJOIN Company r ON p.companyId = r.id\r\nJOIN Recruitment_Agency ag ON p.RecruitmentAgencyId = ag.id WHERE p.title = 'Data Analyst'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What company has the position with the ID 2?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Company.name \nFROM Company \nJOIN Position ON Company.id = Position.companyId \nWHERE Position.id = 2"
          ]
        },
        {
          "interpretation": "What is the company location for the Data Analyst position ID 2?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.location FROM Company AS T1 JOIN Position AS T2 ON T1.id = T2.companyId WHERE T2.id = 2"
          ]
        },
        {
          "interpretation": "List the company name and the recruitment agency for the position title \"Data Analyst\".",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT C.name, RA.agencyName \nFROM Position P \nJOIN Company C ON P.companyId = C.id \nJOIN Recruitment_Agency RA ON P.recruitmentAgencyId = RA.id \nWHERE P.title = 'Data Analyst'"
          ]
        },
        {
          "interpretation": "Which recruitment agency was assigned to the Data Analyst position?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Recruitment_Agency.agencyName \nFROM Recruitment_Agency \nJOIN Position ON Recruitment_Agency.id = Position.recruitmentAgencyId \nWHERE Position.title = 'Data Analyst'"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Job Postings/vague_2tabs_recruiter/vague_2tabs_recruiter.sqlite",
      "db_dump": "CREATE TABLE Applicant (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    positionId INTEGER,\n    FOREIGN KEY (positionId) REFERENCES Position(id)\n);\nCREATE TABLE Company (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Employee (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    role TEXT,\n    hireDate TEXT\n);\nCREATE TABLE Interview (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date DATETIME,\n    time TEXT,\n    applicantId INTEGER,\n    interviewerId INTEGER,\n    positionId INTEGER,\n    status TEXT ,\n    FOREIGN KEY (applicantId) REFERENCES Applicant(id),\n    FOREIGN KEY (interviewerId) REFERENCES Employee(id),\n    FOREIGN KEY (positionId) REFERENCES Position(id)\n);\nCREATE TABLE Position (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    description TEXT,\n    salary DECIMAL(10,2) ,\n    companyId INTEGER,\n    recruitmentAgencyId INTEGER,\n    FOREIGN KEY (companyId) REFERENCES Company(id),\n    FOREIGN KEY (recruitmentAgencyId) REFERENCES Recruitment_Agency(id)\n);\nCREATE TABLE Recruitment_Agency (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    agencyName TEXT,\n    contactEmail TEXT,\n    contactPhone TEXT\n);\n\nINSERT INTO \"Applicant\" (id,firstName,lastName,email,phoneNumber,positionId) VALUES (1,'John','Smith','johnsmith@example.com','+1-123-456-7890',1),(2,'Jane','Doe','janedoe@example.com','+1-987-654-3210',1);\nINSERT INTO \"Company\" (id,name,location) VALUES (1,'Tech Solutions','San Francisco'),(2,'Software Inc.','New York');\nINSERT INTO \"Employee\" (id,firstName,lastName,email,phoneNumber,role,hireDate) VALUES (1,'Alice','Wonderland','aliceland@example.com','+1-123-456-7890','HR Manager','2022-01-01'),(2,'Bob','Builder','bobbuilder@example.com','+1-987-654-3210','Engineering Director','2021-07-15');\nINSERT INTO \"Interview\" (id,date,time,applicantId,interviewerId,positionId,status) VALUES (1,'2023-01-15','10:00 AM',1,1,1,'Pending'),(2,'2023-01-16','11:00 AM',2,2,1,'Completed');\nINSERT INTO \"Position\" (id,title,description,salary,companyId,recruitmentAgencyId) VALUES (1,'Software Engineer','Develop and maintain software applications.',90000,1,1),(2,'Data Analyst','Analyze data to provide insights and recommendations.',80000,1,2);\nINSERT INTO \"Recruitment_Agency\" (id,agencyName,contactEmail,contactPhone) VALUES (1,'Top Talent Agency','toptalent@example.com','+1-800-123-4567'),(2,'Job Connect','jobconnect@example.com','+1-900-987-6543');\n",
      "question": "Who hires a data analyst?",
      "gold_queries": [
        "SELECT r.name\r\nFROM Position p\r\nJOIN Company r ON p.companyId = r.id\r\nWHERE p.title = 'Data Analyst'",
        "SELECT r.agencyName\r\nFROM Position p\r\nJOIN Recruitment_Agency r ON p.RecruitmentAgencyId = r.id\r\nWHERE p.title = 'Data Analyst'",
        "SELECT r.name, ag.agencyName\r\nFROM Position p\r\nJOIN Company r ON p.companyId = r.id\r\nJOIN Recruitment_Agency ag ON p.RecruitmentAgencyId = ag.id WHERE p.title = 'Data Analyst'"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What Company hires Data Analysts?",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.name FROM Company C JOIN Position P ON C.id = P.companyId WHERE P.title = 'Data Analyst'"
          ]
        },
        {
          "interpretation": "Who in the database is responsible for employee hirings related to the role of Data Analyst?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Employee.firstName, Employee.lastName\nFROM Employee\nJOIN Position ON Employee.role = 'HR Manager'\nWHERE Position.title = 'Data Analyst'"
          ]
        },
        {
          "interpretation": "Which Position is directly related to Data Analyst hiring?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title FROM Position WHERE title = 'Data Analyst'"
          ]
        },
        {
          "interpretation": "Which Recruitment Agency is involved in hiring Data Analysts?",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Recruitment_Agency.agencyName \nFROM Recruitment_Agency \nJOIN Position ON Recruitment_Agency.id = Position.recruitmentAgencyId \nWHERE Position.title = 'Data Analyst'"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.6666666666666666,
        "precision": 0.5,
        "f1_score": 0.5714285714285715,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Job Postings/vague_2tabs_recruiter/vague_2tabs_recruiter.sqlite",
      "db_dump": "CREATE TABLE Applicant (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    positionId INTEGER,\n    FOREIGN KEY (positionId) REFERENCES Position(id)\n);\nCREATE TABLE Company (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Employee (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    role TEXT,\n    hireDate TEXT\n);\nCREATE TABLE Interview (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date DATETIME,\n    time TEXT,\n    applicantId INTEGER,\n    interviewerId INTEGER,\n    positionId INTEGER,\n    status TEXT ,\n    FOREIGN KEY (applicantId) REFERENCES Applicant(id),\n    FOREIGN KEY (interviewerId) REFERENCES Employee(id),\n    FOREIGN KEY (positionId) REFERENCES Position(id)\n);\nCREATE TABLE Position (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    description TEXT,\n    salary DECIMAL(10,2) ,\n    companyId INTEGER,\n    recruitmentAgencyId INTEGER,\n    FOREIGN KEY (companyId) REFERENCES Company(id),\n    FOREIGN KEY (recruitmentAgencyId) REFERENCES Recruitment_Agency(id)\n);\nCREATE TABLE Recruitment_Agency (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    agencyName TEXT,\n    contactEmail TEXT,\n    contactPhone TEXT\n);\n\nINSERT INTO \"Applicant\" (id,firstName,lastName,email,phoneNumber,positionId) VALUES (1,'John','Smith','johnsmith@example.com','+1-123-456-7890',1),(2,'Jane','Doe','janedoe@example.com','+1-987-654-3210',1);\nINSERT INTO \"Company\" (id,name,location) VALUES (1,'Tech Solutions','San Francisco'),(2,'Software Inc.','New York');\nINSERT INTO \"Employee\" (id,firstName,lastName,email,phoneNumber,role,hireDate) VALUES (1,'Alice','Wonderland','aliceland@example.com','+1-123-456-7890','HR Manager','2022-01-01'),(2,'Bob','Builder','bobbuilder@example.com','+1-987-654-3210','Engineering Director','2021-07-15');\nINSERT INTO \"Interview\" (id,date,time,applicantId,interviewerId,positionId,status) VALUES (1,'2023-01-15','10:00 AM',1,1,1,'Pending'),(2,'2023-01-16','11:00 AM',2,2,1,'Completed');\nINSERT INTO \"Position\" (id,title,description,salary,companyId,recruitmentAgencyId) VALUES (1,'Software Engineer','Develop and maintain software applications.',90000,1,1),(2,'Data Analyst','Analyze data to provide insights and recommendations.',80000,1,2);\nINSERT INTO \"Recruitment_Agency\" (id,agencyName,contactEmail,contactPhone) VALUES (1,'Top Talent Agency','toptalent@example.com','+1-800-123-4567'),(2,'Job Connect','jobconnect@example.com','+1-900-987-6543');\n",
      "question": "Which recruitment agency was used to hire the data analyst?",
      "gold_queries": [
        "SELECT r.agencyName\r\nFROM Position p\r\nJOIN Recruitment_Agency r ON p.RecruitmentAgencyId = r.id\r\nWHERE p.title = 'Data Analyst'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Which agency handled the recruitment for the Data Analyst role?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Recruitment_Agency.agencyName \nFROM Recruitment_Agency \nJOIN Position ON Recruitment_Agency.id = Position.recruitmentAgencyId \nWHERE Position.title = 'Data Analyst'"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Job Postings/vague_2tabs_recruiter/vague_2tabs_recruiter.sqlite",
      "db_dump": "CREATE TABLE Applicant (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    positionId INTEGER,\n    FOREIGN KEY (positionId) REFERENCES Position(id)\n);\nCREATE TABLE Company (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Employee (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    role TEXT,\n    hireDate TEXT\n);\nCREATE TABLE Interview (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date DATETIME,\n    time TEXT,\n    applicantId INTEGER,\n    interviewerId INTEGER,\n    positionId INTEGER,\n    status TEXT ,\n    FOREIGN KEY (applicantId) REFERENCES Applicant(id),\n    FOREIGN KEY (interviewerId) REFERENCES Employee(id),\n    FOREIGN KEY (positionId) REFERENCES Position(id)\n);\nCREATE TABLE Position (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    description TEXT,\n    salary DECIMAL(10,2) ,\n    companyId INTEGER,\n    recruitmentAgencyId INTEGER,\n    FOREIGN KEY (companyId) REFERENCES Company(id),\n    FOREIGN KEY (recruitmentAgencyId) REFERENCES Recruitment_Agency(id)\n);\nCREATE TABLE Recruitment_Agency (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    agencyName TEXT,\n    contactEmail TEXT,\n    contactPhone TEXT\n);\n\nINSERT INTO \"Applicant\" (id,firstName,lastName,email,phoneNumber,positionId) VALUES (1,'John','Smith','johnsmith@example.com','+1-123-456-7890',1),(2,'Jane','Doe','janedoe@example.com','+1-987-654-3210',1);\nINSERT INTO \"Company\" (id,name,location) VALUES (1,'Tech Solutions','San Francisco'),(2,'Software Inc.','New York');\nINSERT INTO \"Employee\" (id,firstName,lastName,email,phoneNumber,role,hireDate) VALUES (1,'Alice','Wonderland','aliceland@example.com','+1-123-456-7890','HR Manager','2022-01-01'),(2,'Bob','Builder','bobbuilder@example.com','+1-987-654-3210','Engineering Director','2021-07-15');\nINSERT INTO \"Interview\" (id,date,time,applicantId,interviewerId,positionId,status) VALUES (1,'2023-01-15','10:00 AM',1,1,1,'Pending'),(2,'2023-01-16','11:00 AM',2,2,1,'Completed');\nINSERT INTO \"Position\" (id,title,description,salary,companyId,recruitmentAgencyId) VALUES (1,'Software Engineer','Develop and maintain software applications.',90000,1,1),(2,'Data Analyst','Analyze data to provide insights and recommendations.',80000,1,2);\nINSERT INTO \"Recruitment_Agency\" (id,agencyName,contactEmail,contactPhone) VALUES (1,'Top Talent Agency','toptalent@example.com','+1-800-123-4567'),(2,'Job Connect','jobconnect@example.com','+1-900-987-6543');\n",
      "question": "Which tech companies and recruitment agencies have already conducted the interviews?",
      "gold_queries": [
        "SELECT r.name, ag.agencyName\r\nFROM Position p\r\nJOIN Company r ON p.companyId = r.id\r\nLEFT JOIN Applicant a ON p.id = a.positionId\r\nLEFT JOIN Interview i ON a.id = i.applicantId\r\nJOIN Recruitment_Agency ag ON p.RecruitmentAgencyId = ag.id WHERE status = 'Completed'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Find the companies where positions have had interviews conducted.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT C.name \nFROM Company C \nJOIN Position P ON C.id = P.companyId \nJOIN Interview I ON P.id = I.positionId"
          ]
        },
        {
          "interpretation": "Determine the recruitment agencies involved in positions where interviews have taken place.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT RA.agencyName \nFROM Recruitment_Agency RA \nJOIN Position P ON RA.id = P.recruitmentAgencyId \nJOIN Interview I ON P.id = I.positionId"
          ]
        },
        {
          "interpretation": "Identify companies and their associated recruitment agencies that have employees who have interviewed applicants.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT DISTINCT C.name AS Company, RA.agencyName AS RecruitmentAgency\nFROM Interview I\nJOIN Position P ON I.positionId = P.id\nJOIN Company C ON P.companyId = C.id\nJOIN Recruitment_Agency RA ON P.recruitmentAgencyId = RA.id"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Job Postings/vague_2tabs_recruiter/vague_2tabs_recruiter.sqlite",
      "db_dump": "CREATE TABLE Applicant (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    positionId INTEGER,\n    FOREIGN KEY (positionId) REFERENCES Position(id)\n);\nCREATE TABLE Company (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Employee (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    role TEXT,\n    hireDate TEXT\n);\nCREATE TABLE Interview (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date DATETIME,\n    time TEXT,\n    applicantId INTEGER,\n    interviewerId INTEGER,\n    positionId INTEGER,\n    status TEXT ,\n    FOREIGN KEY (applicantId) REFERENCES Applicant(id),\n    FOREIGN KEY (interviewerId) REFERENCES Employee(id),\n    FOREIGN KEY (positionId) REFERENCES Position(id)\n);\nCREATE TABLE Position (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    description TEXT,\n    salary DECIMAL(10,2) ,\n    companyId INTEGER,\n    recruitmentAgencyId INTEGER,\n    FOREIGN KEY (companyId) REFERENCES Company(id),\n    FOREIGN KEY (recruitmentAgencyId) REFERENCES Recruitment_Agency(id)\n);\nCREATE TABLE Recruitment_Agency (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    agencyName TEXT,\n    contactEmail TEXT,\n    contactPhone TEXT\n);\n\nINSERT INTO \"Applicant\" (id,firstName,lastName,email,phoneNumber,positionId) VALUES (1,'John','Smith','johnsmith@example.com','+1-123-456-7890',1),(2,'Jane','Doe','janedoe@example.com','+1-987-654-3210',1);\nINSERT INTO \"Company\" (id,name,location) VALUES (1,'Tech Solutions','San Francisco'),(2,'Software Inc.','New York');\nINSERT INTO \"Employee\" (id,firstName,lastName,email,phoneNumber,role,hireDate) VALUES (1,'Alice','Wonderland','aliceland@example.com','+1-123-456-7890','HR Manager','2022-01-01'),(2,'Bob','Builder','bobbuilder@example.com','+1-987-654-3210','Engineering Director','2021-07-15');\nINSERT INTO \"Interview\" (id,date,time,applicantId,interviewerId,positionId,status) VALUES (1,'2023-01-15','10:00 AM',1,1,1,'Pending'),(2,'2023-01-16','11:00 AM',2,2,1,'Completed');\nINSERT INTO \"Position\" (id,title,description,salary,companyId,recruitmentAgencyId) VALUES (1,'Software Engineer','Develop and maintain software applications.',90000,1,1),(2,'Data Analyst','Analyze data to provide insights and recommendations.',80000,1,2);\nINSERT INTO \"Recruitment_Agency\" (id,agencyName,contactEmail,contactPhone) VALUES (1,'Top Talent Agency','toptalent@example.com','+1-800-123-4567'),(2,'Job Connect','jobconnect@example.com','+1-900-987-6543');\n",
      "question": "Which recruitment agencies have already conducted the interviews?",
      "gold_queries": [
        "SELECT r.agencyName\r\nFROM Position p\r\nJOIN Recruitment_Agency r ON p.RecruitmentAgencyId = r.id\r\nLEFT JOIN Applicant a ON p.id = a.positionId\r\nLEFT JOIN Interview i ON a.id = i.applicantId\r\nWHERE status = 'Completed'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Identify recruitment agencies that have placed interviewers in Interviews table.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT DISTINCT RA.agencyName \nFROM Recruitment_Agency RA \nJOIN Position P ON RA.id = P.recruitmentAgencyId \nJOIN Interview I ON P.id = I.positionId"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Job Postings/vague_2tabs_recruiter/vague_2tabs_recruiter.sqlite",
      "db_dump": "CREATE TABLE Applicant (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    positionId INTEGER,\n    FOREIGN KEY (positionId) REFERENCES Position(id)\n);\nCREATE TABLE Company (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Employee (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    role TEXT,\n    hireDate TEXT\n);\nCREATE TABLE Interview (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date DATETIME,\n    time TEXT,\n    applicantId INTEGER,\n    interviewerId INTEGER,\n    positionId INTEGER,\n    status TEXT ,\n    FOREIGN KEY (applicantId) REFERENCES Applicant(id),\n    FOREIGN KEY (interviewerId) REFERENCES Employee(id),\n    FOREIGN KEY (positionId) REFERENCES Position(id)\n);\nCREATE TABLE Position (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    description TEXT,\n    salary DECIMAL(10,2) ,\n    companyId INTEGER,\n    recruitmentAgencyId INTEGER,\n    FOREIGN KEY (companyId) REFERENCES Company(id),\n    FOREIGN KEY (recruitmentAgencyId) REFERENCES Recruitment_Agency(id)\n);\nCREATE TABLE Recruitment_Agency (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    agencyName TEXT,\n    contactEmail TEXT,\n    contactPhone TEXT\n);\n\nINSERT INTO \"Applicant\" (id,firstName,lastName,email,phoneNumber,positionId) VALUES (1,'John','Smith','johnsmith@example.com','+1-123-456-7890',1),(2,'Jane','Doe','janedoe@example.com','+1-987-654-3210',1);\nINSERT INTO \"Company\" (id,name,location) VALUES (1,'Tech Solutions','San Francisco'),(2,'Software Inc.','New York');\nINSERT INTO \"Employee\" (id,firstName,lastName,email,phoneNumber,role,hireDate) VALUES (1,'Alice','Wonderland','aliceland@example.com','+1-123-456-7890','HR Manager','2022-01-01'),(2,'Bob','Builder','bobbuilder@example.com','+1-987-654-3210','Engineering Director','2021-07-15');\nINSERT INTO \"Interview\" (id,date,time,applicantId,interviewerId,positionId,status) VALUES (1,'2023-01-15','10:00 AM',1,1,1,'Pending'),(2,'2023-01-16','11:00 AM',2,2,1,'Completed');\nINSERT INTO \"Position\" (id,title,description,salary,companyId,recruitmentAgencyId) VALUES (1,'Software Engineer','Develop and maintain software applications.',90000,1,1),(2,'Data Analyst','Analyze data to provide insights and recommendations.',80000,1,2);\nINSERT INTO \"Recruitment_Agency\" (id,agencyName,contactEmail,contactPhone) VALUES (1,'Top Talent Agency','toptalent@example.com','+1-800-123-4567'),(2,'Job Connect','jobconnect@example.com','+1-900-987-6543');\n",
      "question": "Which tech companies have already conducted the interviews?",
      "gold_queries": [
        "SELECT r.name\r\nFROM Position p\r\nJOIN Company r ON p.companyId = r.id\r\nLEFT JOIN Applicant a ON p.id = a.positionId\r\nLEFT JOIN Interview i ON a.id = i.applicantId\r\nWHERE status = 'Completed'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List the companies that have positions that have been interviewed for, regardless of the interview status.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT DISTINCT C.name \nFROM Company C \nJOIN Position P ON C.id = P.companyId \nJOIN Interview I ON P.id = I.positionId"
          ]
        },
        {
          "interpretation": "Which companies listed in the 'Company' table have at least one interview associated with them in the 'Interview' table?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT c.name\nFROM Company c\nJOIN Position p ON c.id = p.companyId\nJOIN Interview i ON p.id = i.positionId"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Job Postings/vague_2tabs_recruiter/vague_2tabs_recruiter.sqlite",
      "db_dump": "CREATE TABLE Applicant (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    positionId INTEGER,\n    FOREIGN KEY (positionId) REFERENCES Position(id)\n);\nCREATE TABLE Company (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Employee (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    role TEXT,\n    hireDate TEXT\n);\nCREATE TABLE Interview (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date DATETIME,\n    time TEXT,\n    applicantId INTEGER,\n    interviewerId INTEGER,\n    positionId INTEGER,\n    status TEXT ,\n    FOREIGN KEY (applicantId) REFERENCES Applicant(id),\n    FOREIGN KEY (interviewerId) REFERENCES Employee(id),\n    FOREIGN KEY (positionId) REFERENCES Position(id)\n);\nCREATE TABLE Position (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    description TEXT,\n    salary DECIMAL(10,2) ,\n    companyId INTEGER,\n    recruitmentAgencyId INTEGER,\n    FOREIGN KEY (companyId) REFERENCES Company(id),\n    FOREIGN KEY (recruitmentAgencyId) REFERENCES Recruitment_Agency(id)\n);\nCREATE TABLE Recruitment_Agency (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    agencyName TEXT,\n    contactEmail TEXT,\n    contactPhone TEXT\n);\n\nINSERT INTO \"Applicant\" (id,firstName,lastName,email,phoneNumber,positionId) VALUES (1,'John','Smith','johnsmith@example.com','+1-123-456-7890',1),(2,'Jane','Doe','janedoe@example.com','+1-987-654-3210',1);\nINSERT INTO \"Company\" (id,name,location) VALUES (1,'Tech Solutions','San Francisco'),(2,'Software Inc.','New York');\nINSERT INTO \"Employee\" (id,firstName,lastName,email,phoneNumber,role,hireDate) VALUES (1,'Alice','Wonderland','aliceland@example.com','+1-123-456-7890','HR Manager','2022-01-01'),(2,'Bob','Builder','bobbuilder@example.com','+1-987-654-3210','Engineering Director','2021-07-15');\nINSERT INTO \"Interview\" (id,date,time,applicantId,interviewerId,positionId,status) VALUES (1,'2023-01-15','10:00 AM',1,1,1,'Pending'),(2,'2023-01-16','11:00 AM',2,2,1,'Completed');\nINSERT INTO \"Position\" (id,title,description,salary,companyId,recruitmentAgencyId) VALUES (1,'Software Engineer','Develop and maintain software applications.',90000,1,1),(2,'Data Analyst','Analyze data to provide insights and recommendations.',80000,1,2);\nINSERT INTO \"Recruitment_Agency\" (id,agencyName,contactEmail,contactPhone) VALUES (1,'Top Talent Agency','toptalent@example.com','+1-800-123-4567'),(2,'Job Connect','jobconnect@example.com','+1-900-987-6543');\n",
      "question": "Who has already conducted the interview?",
      "gold_queries": [
        "SELECT r.name\r\nFROM Position p\r\nJOIN Company r ON p.companyId = r.id\r\nLEFT JOIN Applicant a ON p.id = a.positionId\r\nLEFT JOIN Interview i ON a.id = i.applicantId\r\nWHERE status = 'Completed'",
        "SELECT r.agencyName\r\nFROM Position p\r\nJOIN Recruitment_Agency r ON p.RecruitmentAgencyId = r.id\r\nLEFT JOIN Applicant a ON p.id = a.positionId\r\nLEFT JOIN Interview i ON a.id = i.applicantId\r\nWHERE status = 'Completed'",
        "SELECT r.name, ag.agencyName\r\nFROM Position p\r\nJOIN Company r ON p.companyId = r.id\r\nLEFT JOIN Applicant a ON p.id = a.positionId\r\nLEFT JOIN Interview i ON a.id = i.applicantId\r\nJOIN Recruitment_Agency ag ON p.RecruitmentAgencyId = ag.id WHERE status = 'Completed'"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Which employees have interviewed applicants?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT Employee.firstName, Employee.lastName FROM Employee INNER JOIN Interview ON Employee.id = Interview.interviewerId"
          ]
        },
        {
          "interpretation": "Who has an interview status of \"Completed\" under the \"InterviewerId\" column",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT InterviewerId FROM Interview WHERE status = 'Completed'"
          ]
        },
        {
          "interpretation": "List the employee(s) who are interviewers in the \"Interview\" table with a \"Completed\" status.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT E.firstName, E.lastName \nFROM Employee E \nJOIN Interview I ON E.id = I.interviewerId \nWHERE I.status = 'Completed'"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Healthcare/vague_2tabs_target/vague_2tabs_target.sqlite",
      "db_dump": "CREATE TABLE Age_Group (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT\n);\nCREATE TABLE Appointment (\n    appointment_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date TIMESTAMP,\n    patient_id INTEGER,\n    doctor_id INTEGER,\n    medicalrecord_id INTEGER,\n    FOREIGN KEY(patient_id) REFERENCES Patient(patient_id),\n    FOREIGN KEY(doctor_id) REFERENCES Doctor(doctor_id),\n    FOREIGN KEY(medicalrecord_id) REFERENCES MedicalRecord(medicalrecord_id)\n);\nCREATE TABLE Doctor (\n    doctor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    specialty TEXT\n);\nCREATE TABLE Health_Condition (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    condition_name TEXT\n);\nCREATE TABLE MedicalRecord (\n    medicalrecord_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    patient_id INTEGER,\n    diagnosis TEXT,\n    treatment_plan TEXT,\n    FOREIGN KEY(patient_id) REFERENCES Patient(patient_id)\n);\nCREATE TABLE Patient (\n    patient_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    birthdate DATE,\n    phone_number VARCHAR(15),\n    age_group_id INTEGER, full_name TEXT,\n    FOREIGN KEY(age_group_id) REFERENCES Age_Group(id)\n);\nCREATE TABLE Vaccine (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    vaccine_name TEXT,\n    age_group_id INTEGER,\n    health_condition_id INTEGER,\n    FOREIGN KEY(age_group_id) REFERENCES Age_Group(id),\n    FOREIGN KEY(health_condition_id) REFERENCES Health_Condition(id)\n);\n\nINSERT INTO \"Age_Group\" (id,name) VALUES (1,'0-4'),(2,'5-9'),(3,'10-13'),(4,'14-17'),(5,'18+');\nINSERT INTO \"Appointment\" (appointment_id,date,patient_id,doctor_id,medicalrecord_id) VALUES (1,'2022-10-12 10:00:00',1,1,1),(2,'2022-10-13 14:00:00',2,2,2),(3,'2022-10-14 16:00:00',3,3,3),(4,'2022-10-15 18:00:00',4,4,4),(5,'2022-10-16 20:00:00',5,5,5);\nINSERT INTO \"Doctor\" (doctor_id,first_name,last_name,specialty) VALUES (1,'Dr.','Jones','Cardiology'),(2,'Dr.','Garcia','Endocrinology'),(3,'Dr.','Lee','Pediatrics'),(4,'Dr.','Taylor','Neurology'),(5,'Dr.','Adams','Nephrology');\nINSERT INTO \"Health_Condition\" (id,condition_name) VALUES (1,'Diabetes'),(2,'Hypertension'),(3,'Asthma'),(4,'Allergy'),(5,'Obesity');\nINSERT INTO \"MedicalRecord\" (medicalrecord_id,patient_id,diagnosis,treatment_plan) VALUES (1,1,'Type 2 Diabetes','Diet and Exercise'),(2,2,'Epilepsy','Antiepileptic Drugs'),(3,3,'Anxiety Disorder','Counseling and Medication'),(4,4,'Depression','Antidepressants'),(5,5,'Asthma','Inhalers');\nINSERT INTO \"Patient\" (patient_id,birthdate,phone_number,age_group_id,full_name) VALUES (1,'1995-06-15','555-123-4567',3,'John Doe'),(2,'2000-07-20','555-987-6543',5,'Jane Smith'),(3,'1990-08-25','555-555-5555',4,'Michael Brown'),(4,'1988-09-15','555-333-3333',2,'Emily Green'),(5,'1975-10-20','555-222-2222',6,'William Black');\nINSERT INTO \"Vaccine\" (id,vaccine_name,age_group_id,health_condition_id) VALUES (1,'Flu',2,4),(2,'Pneumonia',3,1),(3,'Hepatitis B',1,3),(4,'Meningococcal',4,2),(5,'Varicella',1,5);\n",
      "question": "List each patient along with suitable vaccines, their age groups and health conditions",
      "gold_queries": [
        "SELECT Patient.full_name, Health_Condition.condition_name, Age_Group.Name, Vaccine.Vaccine_Name\r\nFROM Patient INNER JOIN Age_Group ON Patient.Age_Group_Id = Age_Group.Id \r\nINNER JOIN Vaccine ON Patient.Age_Group_Id = Vaccine.Age_Group_ID INNER JOIN Health_Condition ON Health_Condition.Id = Vaccine.Health_Condition_Id"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Provide a table listing patients, their assigned age groups, any diagnosed health conditions, and a corresponding list of suitable vaccines.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    Patient.full_name, \n    Age_Group.name AS age_group, \n    Health_Condition.condition_name, \n    Vaccine.vaccine_name\nFROM \n    Patient\nJOIN \n    Age_Group ON Patient.age_group_id = Age_Group.id\nJOIN \n    MedicalRecord ON Patient.patient_id = MedicalRecord.patient_id\nJOIN \n    Health_Condition ON MedicalRecord.diagnosis LIKE '%' || Health_Condition.condition_name || '%'\nJOIN \n    Vaccine ON Vaccine.age_group_id = Age_Group.id AND Vaccine.health_condition_id = Health_Condition.id"
          ]
        },
        {
          "interpretation": "Generate a report showing each patient, their age group, associated health conditions, and a list of vaccines determined to be suitable based on these factors.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT P.full_name, AG.name AS age_group, HC.condition_name, V.vaccine_name\nFROM Patient P\nJOIN Age_Group AG ON P.age_group_id = AG.id\nJOIN Vaccine V ON V.age_group_id = AG.id\nJOIN Health_Condition HC ON HC.id = V.health_condition_id"
          ]
        },
        {
          "interpretation": "For each patient in the database, return their name, the age group they belong to, their diagnosed health conditions, and a list of vaccines considered appropriate for them.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    P.full_name,\n    AG.name AS age_group,\n    MR.diagnosis,\n    GROUP_CONCAT(V.vaccine_name, ', ') AS appropriate_vaccines\nFROM \n    Patient P\nJOIN \n    Age_Group AG ON P.age_group_id = AG.id\nJOIN \n    MedicalRecord MR ON P.patient_id = MR.patient_id\nLEFT JOIN \n    Vaccine V ON P.age_group_id = V.age_group_id\nGROUP BY \n    P.patient_id"
          ]
        },
        {
          "interpretation": "Display a list of each patient and associate each patient with vaccines applicable for their respective age group and any relevant health conditions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.full_name, V.vaccine_name, HC.condition_name\nFROM Patient P\nJOIN Age_Group AG ON P.age_group_id = AG.id\nJOIN Vaccine V ON AG.id = V.age_group_id\nLEFT JOIN Health_Condition HC ON V.health_condition_id = HC.id"
          ]
        },
        {
          "interpretation": "List all patients, along with recommended vaccines based on their corresponding age groups and health conditions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.full_name, V.vaccine_name\nFROM Patient P\nJOIN Age_Group AG ON P.age_group_id = AG.id\nJOIN Vaccine V ON AG.id = V.age_group_id\nLEFT JOIN MedicalRecord MR ON P.patient_id = MR.patient_id\nLEFT JOIN Health_Condition HC ON V.health_condition_id = HC.id AND MR.diagnosis LIKE '%' || HC.condition_name || '%'"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Healthcare/vague_2tabs_target/vague_2tabs_target.sqlite",
      "db_dump": "CREATE TABLE Age_Group (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT\n);\nCREATE TABLE Appointment (\n    appointment_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date TIMESTAMP,\n    patient_id INTEGER,\n    doctor_id INTEGER,\n    medicalrecord_id INTEGER,\n    FOREIGN KEY(patient_id) REFERENCES Patient(patient_id),\n    FOREIGN KEY(doctor_id) REFERENCES Doctor(doctor_id),\n    FOREIGN KEY(medicalrecord_id) REFERENCES MedicalRecord(medicalrecord_id)\n);\nCREATE TABLE Doctor (\n    doctor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    specialty TEXT\n);\nCREATE TABLE Health_Condition (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    condition_name TEXT\n);\nCREATE TABLE MedicalRecord (\n    medicalrecord_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    patient_id INTEGER,\n    diagnosis TEXT,\n    treatment_plan TEXT,\n    FOREIGN KEY(patient_id) REFERENCES Patient(patient_id)\n);\nCREATE TABLE Patient (\n    patient_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    birthdate DATE,\n    phone_number VARCHAR(15),\n    age_group_id INTEGER, full_name TEXT,\n    FOREIGN KEY(age_group_id) REFERENCES Age_Group(id)\n);\nCREATE TABLE Vaccine (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    vaccine_name TEXT,\n    age_group_id INTEGER,\n    health_condition_id INTEGER,\n    FOREIGN KEY(age_group_id) REFERENCES Age_Group(id),\n    FOREIGN KEY(health_condition_id) REFERENCES Health_Condition(id)\n);\n\nINSERT INTO \"Age_Group\" (id,name) VALUES (1,'0-4'),(2,'5-9'),(3,'10-13'),(4,'14-17'),(5,'18+');\nINSERT INTO \"Appointment\" (appointment_id,date,patient_id,doctor_id,medicalrecord_id) VALUES (1,'2022-10-12 10:00:00',1,1,1),(2,'2022-10-13 14:00:00',2,2,2),(3,'2022-10-14 16:00:00',3,3,3),(4,'2022-10-15 18:00:00',4,4,4),(5,'2022-10-16 20:00:00',5,5,5);\nINSERT INTO \"Doctor\" (doctor_id,first_name,last_name,specialty) VALUES (1,'Dr.','Jones','Cardiology'),(2,'Dr.','Garcia','Endocrinology'),(3,'Dr.','Lee','Pediatrics'),(4,'Dr.','Taylor','Neurology'),(5,'Dr.','Adams','Nephrology');\nINSERT INTO \"Health_Condition\" (id,condition_name) VALUES (1,'Diabetes'),(2,'Hypertension'),(3,'Asthma'),(4,'Allergy'),(5,'Obesity');\nINSERT INTO \"MedicalRecord\" (medicalrecord_id,patient_id,diagnosis,treatment_plan) VALUES (1,1,'Type 2 Diabetes','Diet and Exercise'),(2,2,'Epilepsy','Antiepileptic Drugs'),(3,3,'Anxiety Disorder','Counseling and Medication'),(4,4,'Depression','Antidepressants'),(5,5,'Asthma','Inhalers');\nINSERT INTO \"Patient\" (patient_id,birthdate,phone_number,age_group_id,full_name) VALUES (1,'1995-06-15','555-123-4567',3,'John Doe'),(2,'2000-07-20','555-987-6543',5,'Jane Smith'),(3,'1990-08-25','555-555-5555',4,'Michael Brown'),(4,'1988-09-15','555-333-3333',2,'Emily Green'),(5,'1975-10-20','555-222-2222',6,'William Black');\nINSERT INTO \"Vaccine\" (id,vaccine_name,age_group_id,health_condition_id) VALUES (1,'Flu',2,4),(2,'Pneumonia',3,1),(3,'Hepatitis B',1,3),(4,'Meningococcal',4,2),(5,'Varicella',1,5);\n",
      "question": "List each patient along with suitable vaccines and their health conditions",
      "gold_queries": [
        "SELECT Patient.full_name, Health_Condition.condition_name, Vaccine.Vaccine_Name\r\nFROM Patient INNER JOIN Vaccine ON Patient.Age_Group_Id = Vaccine.Age_Group_ID INNER JOIN  Health_Condition ON Vaccine.Health_Condition_Id = Health_Condition.Id"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Identify patients and their corresponding recommended vaccinations considering age group classifications and documented health issues.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.full_name, V.vaccine_name\nFROM Patient P\nJOIN MedicalRecord MR ON P.patient_id = MR.patient_id\nJOIN Health_Condition HC ON HC.id = V.health_condition_id\nJOIN Age_Group AG ON AG.id = P.age_group_id\nJOIN Vaccine V ON V.age_group_id = AG.id AND V.health_condition_id = HC.id"
          ]
        },
        {
          "interpretation": "For each patient, display their name and a list of vaccinations deemed appropriate given their age group and diagnosed health conditions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.full_name, V.vaccine_name\nFROM Patient P\nJOIN MedicalRecord MR ON P.patient_id = MR.patient_id\nJOIN Health_Condition HC ON MR.diagnosis = HC.condition_name\nJOIN Vaccine V ON P.age_group_id = V.age_group_id AND HC.id = V.health_condition_id"
          ]
        },
        {
          "interpretation": "Retrieve patient information and correlate it with suitable vaccine recommendations based on age group and existing health conditions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.patient_id, P.full_name, P.age_group_id, AG.name AS age_group_name, V.vaccine_name\nFROM Patient P\nJOIN Age_Group AG ON P.age_group_id = AG.id\nJOIN Vaccine V ON P.age_group_id = V.age_group_id\nLEFT JOIN MedicalRecord MR ON P.patient_id = MR.patient_id\nLEFT JOIN Health_Condition HC ON HC.id = V.health_condition_id AND HC.id = (\n    SELECT HC2.id\n    FROM Health_Condition HC2\n    JOIN MedicalRecord MR2 ON HC2.id = MR2.diagnosis\n    WHERE MR2.patient_id = P.patient_id\n)"
          ]
        },
        {
          "interpretation": "List all patients and the vaccines recommended for each based on their age group and recorded health conditions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT p.full_name, v.vaccine_name\nFROM Patient p\nJOIN Age_Group ag ON p.age_group_id = ag.id\nJOIN Vaccine v ON v.age_group_id = ag.id\nJOIN Health_Condition hc ON hc.id = v.health_condition_id\nJOIN MedicalRecord mr ON mr.patient_id = p.patient_id\nWHERE INSTR(mr.diagnosis, hc.condition_name) > 0"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Healthcare/vague_2tabs_target/vague_2tabs_target.sqlite",
      "db_dump": "CREATE TABLE Age_Group (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT\n);\nCREATE TABLE Appointment (\n    appointment_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date TIMESTAMP,\n    patient_id INTEGER,\n    doctor_id INTEGER,\n    medicalrecord_id INTEGER,\n    FOREIGN KEY(patient_id) REFERENCES Patient(patient_id),\n    FOREIGN KEY(doctor_id) REFERENCES Doctor(doctor_id),\n    FOREIGN KEY(medicalrecord_id) REFERENCES MedicalRecord(medicalrecord_id)\n);\nCREATE TABLE Doctor (\n    doctor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    specialty TEXT\n);\nCREATE TABLE Health_Condition (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    condition_name TEXT\n);\nCREATE TABLE MedicalRecord (\n    medicalrecord_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    patient_id INTEGER,\n    diagnosis TEXT,\n    treatment_plan TEXT,\n    FOREIGN KEY(patient_id) REFERENCES Patient(patient_id)\n);\nCREATE TABLE Patient (\n    patient_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    birthdate DATE,\n    phone_number VARCHAR(15),\n    age_group_id INTEGER, full_name TEXT,\n    FOREIGN KEY(age_group_id) REFERENCES Age_Group(id)\n);\nCREATE TABLE Vaccine (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    vaccine_name TEXT,\n    age_group_id INTEGER,\n    health_condition_id INTEGER,\n    FOREIGN KEY(age_group_id) REFERENCES Age_Group(id),\n    FOREIGN KEY(health_condition_id) REFERENCES Health_Condition(id)\n);\n\nINSERT INTO \"Age_Group\" (id,name) VALUES (1,'0-4'),(2,'5-9'),(3,'10-13'),(4,'14-17'),(5,'18+');\nINSERT INTO \"Appointment\" (appointment_id,date,patient_id,doctor_id,medicalrecord_id) VALUES (1,'2022-10-12 10:00:00',1,1,1),(2,'2022-10-13 14:00:00',2,2,2),(3,'2022-10-14 16:00:00',3,3,3),(4,'2022-10-15 18:00:00',4,4,4),(5,'2022-10-16 20:00:00',5,5,5);\nINSERT INTO \"Doctor\" (doctor_id,first_name,last_name,specialty) VALUES (1,'Dr.','Jones','Cardiology'),(2,'Dr.','Garcia','Endocrinology'),(3,'Dr.','Lee','Pediatrics'),(4,'Dr.','Taylor','Neurology'),(5,'Dr.','Adams','Nephrology');\nINSERT INTO \"Health_Condition\" (id,condition_name) VALUES (1,'Diabetes'),(2,'Hypertension'),(3,'Asthma'),(4,'Allergy'),(5,'Obesity');\nINSERT INTO \"MedicalRecord\" (medicalrecord_id,patient_id,diagnosis,treatment_plan) VALUES (1,1,'Type 2 Diabetes','Diet and Exercise'),(2,2,'Epilepsy','Antiepileptic Drugs'),(3,3,'Anxiety Disorder','Counseling and Medication'),(4,4,'Depression','Antidepressants'),(5,5,'Asthma','Inhalers');\nINSERT INTO \"Patient\" (patient_id,birthdate,phone_number,age_group_id,full_name) VALUES (1,'1995-06-15','555-123-4567',3,'John Doe'),(2,'2000-07-20','555-987-6543',5,'Jane Smith'),(3,'1990-08-25','555-555-5555',4,'Michael Brown'),(4,'1988-09-15','555-333-3333',2,'Emily Green'),(5,'1975-10-20','555-222-2222',6,'William Black');\nINSERT INTO \"Vaccine\" (id,vaccine_name,age_group_id,health_condition_id) VALUES (1,'Flu',2,4),(2,'Pneumonia',3,1),(3,'Hepatitis B',1,3),(4,'Meningococcal',4,2),(5,'Varicella',1,5);\n",
      "question": "List each patient along with suitable vaccines and their age groups",
      "gold_queries": [
        "SELECT Patient.full_name, Age_Group.Name, Vaccine.Vaccine_Name\r\nFROM Patient INNER JOIN Age_Group ON Patient.Age_Group_Id = Age_Group.Id \r\nINNER JOIN Vaccine ON Patient.Age_Group_Id = Vaccine.Age_Group_ID"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Display a table of patients, each row accompanied by a list of suitable vaccines and their corresponding age groups.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT P.full_name, V.vaccine_name, AG.name\nFROM Patient P\nJOIN Age_Group AG ON P.age_group_id = AG.id\nJOIN Vaccine V ON V.age_group_id = AG.id"
          ]
        },
        {
          "interpretation": "Generate a report indicating each patient, alongside vaccines considered eligible based on their age group.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Patient.full_name, Vaccine.vaccine_name\nFROM Patient\nJOIN Vaccine ON Patient.age_group_id = Vaccine.age_group_id"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Healthcare/vague_2tabs_target/vague_2tabs_target.sqlite",
      "db_dump": "CREATE TABLE Age_Group (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT\n);\nCREATE TABLE Appointment (\n    appointment_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date TIMESTAMP,\n    patient_id INTEGER,\n    doctor_id INTEGER,\n    medicalrecord_id INTEGER,\n    FOREIGN KEY(patient_id) REFERENCES Patient(patient_id),\n    FOREIGN KEY(doctor_id) REFERENCES Doctor(doctor_id),\n    FOREIGN KEY(medicalrecord_id) REFERENCES MedicalRecord(medicalrecord_id)\n);\nCREATE TABLE Doctor (\n    doctor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    specialty TEXT\n);\nCREATE TABLE Health_Condition (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    condition_name TEXT\n);\nCREATE TABLE MedicalRecord (\n    medicalrecord_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    patient_id INTEGER,\n    diagnosis TEXT,\n    treatment_plan TEXT,\n    FOREIGN KEY(patient_id) REFERENCES Patient(patient_id)\n);\nCREATE TABLE Patient (\n    patient_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    birthdate DATE,\n    phone_number VARCHAR(15),\n    age_group_id INTEGER, full_name TEXT,\n    FOREIGN KEY(age_group_id) REFERENCES Age_Group(id)\n);\nCREATE TABLE Vaccine (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    vaccine_name TEXT,\n    age_group_id INTEGER,\n    health_condition_id INTEGER,\n    FOREIGN KEY(age_group_id) REFERENCES Age_Group(id),\n    FOREIGN KEY(health_condition_id) REFERENCES Health_Condition(id)\n);\n\nINSERT INTO \"Age_Group\" (id,name) VALUES (1,'0-4'),(2,'5-9'),(3,'10-13'),(4,'14-17'),(5,'18+');\nINSERT INTO \"Appointment\" (appointment_id,date,patient_id,doctor_id,medicalrecord_id) VALUES (1,'2022-10-12 10:00:00',1,1,1),(2,'2022-10-13 14:00:00',2,2,2),(3,'2022-10-14 16:00:00',3,3,3),(4,'2022-10-15 18:00:00',4,4,4),(5,'2022-10-16 20:00:00',5,5,5);\nINSERT INTO \"Doctor\" (doctor_id,first_name,last_name,specialty) VALUES (1,'Dr.','Jones','Cardiology'),(2,'Dr.','Garcia','Endocrinology'),(3,'Dr.','Lee','Pediatrics'),(4,'Dr.','Taylor','Neurology'),(5,'Dr.','Adams','Nephrology');\nINSERT INTO \"Health_Condition\" (id,condition_name) VALUES (1,'Diabetes'),(2,'Hypertension'),(3,'Asthma'),(4,'Allergy'),(5,'Obesity');\nINSERT INTO \"MedicalRecord\" (medicalrecord_id,patient_id,diagnosis,treatment_plan) VALUES (1,1,'Type 2 Diabetes','Diet and Exercise'),(2,2,'Epilepsy','Antiepileptic Drugs'),(3,3,'Anxiety Disorder','Counseling and Medication'),(4,4,'Depression','Antidepressants'),(5,5,'Asthma','Inhalers');\nINSERT INTO \"Patient\" (patient_id,birthdate,phone_number,age_group_id,full_name) VALUES (1,'1995-06-15','555-123-4567',3,'John Doe'),(2,'2000-07-20','555-987-6543',5,'Jane Smith'),(3,'1990-08-25','555-555-5555',4,'Michael Brown'),(4,'1988-09-15','555-333-3333',2,'Emily Green'),(5,'1975-10-20','555-222-2222',6,'William Black');\nINSERT INTO \"Vaccine\" (id,vaccine_name,age_group_id,health_condition_id) VALUES (1,'Flu',2,4),(2,'Pneumonia',3,1),(3,'Hepatitis B',1,3),(4,'Meningococcal',4,2),(5,'Varicella',1,5);\n",
      "question": "List the total number of vaccines appropriate for each age group and health condition.",
      "gold_queries": [
        "SELECT Health_Condition.condition_name, Age_Group.Name, Count(*) FROM Age_Group INNER JOIN Vaccine ON Age_Group.Id = Vaccine.age_group_id INNER JOIN Health_Condition ON Health_Condition.Id = Vaccine.Health_Condition_Id\r\nGROUP BY Age_Group.Name, Health_Condition.condition_name"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Return a count of vaccines for each distinct combination of age group and health condition.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Age_Group.name AS age_group, Health_Condition.condition_name AS health_condition, COUNT(Vaccine.id) AS vaccine_count\nFROM Vaccine\nJOIN Age_Group ON Vaccine.age_group_id = Age_Group.id\nJOIN Health_Condition ON Vaccine.health_condition_id = Health_Condition.id\nGROUP BY Age_Group.name, Health_Condition.condition_name"
          ]
        },
        {
          "interpretation": "Display the number of vaccines recommended for each age group.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Age_Group.name, COUNT(Vaccine.id) AS number_of_vaccines\nFROM Age_Group\nJOIN Vaccine ON Age_Group.id = Vaccine.age_group_id\nGROUP BY Age_Group.name"
          ]
        },
        {
          "interpretation": "Provide the count of vaccines available for each health condition.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT HC.condition_name, COUNT(V.id) as vaccine_count\nFROM Health_Condition HC\nLEFT JOIN Vaccine V ON HC.id = V.health_condition_id\nGROUP BY HC.condition_name"
          ]
        },
        {
          "interpretation": "List the number of vaccines per health condition, ignoring age group.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT health_condition_id, COUNT(*) FROM Vaccine GROUP BY health_condition_id"
          ]
        },
        {
          "interpretation": "Count the total number of vaccines in the database.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(*) FROM Vaccine"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Healthcare/vague_2tabs_target/vague_2tabs_target.sqlite",
      "db_dump": "CREATE TABLE Age_Group (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT\n);\nCREATE TABLE Appointment (\n    appointment_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date TIMESTAMP,\n    patient_id INTEGER,\n    doctor_id INTEGER,\n    medicalrecord_id INTEGER,\n    FOREIGN KEY(patient_id) REFERENCES Patient(patient_id),\n    FOREIGN KEY(doctor_id) REFERENCES Doctor(doctor_id),\n    FOREIGN KEY(medicalrecord_id) REFERENCES MedicalRecord(medicalrecord_id)\n);\nCREATE TABLE Doctor (\n    doctor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    specialty TEXT\n);\nCREATE TABLE Health_Condition (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    condition_name TEXT\n);\nCREATE TABLE MedicalRecord (\n    medicalrecord_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    patient_id INTEGER,\n    diagnosis TEXT,\n    treatment_plan TEXT,\n    FOREIGN KEY(patient_id) REFERENCES Patient(patient_id)\n);\nCREATE TABLE Patient (\n    patient_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    birthdate DATE,\n    phone_number VARCHAR(15),\n    age_group_id INTEGER, full_name TEXT,\n    FOREIGN KEY(age_group_id) REFERENCES Age_Group(id)\n);\nCREATE TABLE Vaccine (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    vaccine_name TEXT,\n    age_group_id INTEGER,\n    health_condition_id INTEGER,\n    FOREIGN KEY(age_group_id) REFERENCES Age_Group(id),\n    FOREIGN KEY(health_condition_id) REFERENCES Health_Condition(id)\n);\n\nINSERT INTO \"Age_Group\" (id,name) VALUES (1,'0-4'),(2,'5-9'),(3,'10-13'),(4,'14-17'),(5,'18+');\nINSERT INTO \"Appointment\" (appointment_id,date,patient_id,doctor_id,medicalrecord_id) VALUES (1,'2022-10-12 10:00:00',1,1,1),(2,'2022-10-13 14:00:00',2,2,2),(3,'2022-10-14 16:00:00',3,3,3),(4,'2022-10-15 18:00:00',4,4,4),(5,'2022-10-16 20:00:00',5,5,5);\nINSERT INTO \"Doctor\" (doctor_id,first_name,last_name,specialty) VALUES (1,'Dr.','Jones','Cardiology'),(2,'Dr.','Garcia','Endocrinology'),(3,'Dr.','Lee','Pediatrics'),(4,'Dr.','Taylor','Neurology'),(5,'Dr.','Adams','Nephrology');\nINSERT INTO \"Health_Condition\" (id,condition_name) VALUES (1,'Diabetes'),(2,'Hypertension'),(3,'Asthma'),(4,'Allergy'),(5,'Obesity');\nINSERT INTO \"MedicalRecord\" (medicalrecord_id,patient_id,diagnosis,treatment_plan) VALUES (1,1,'Type 2 Diabetes','Diet and Exercise'),(2,2,'Epilepsy','Antiepileptic Drugs'),(3,3,'Anxiety Disorder','Counseling and Medication'),(4,4,'Depression','Antidepressants'),(5,5,'Asthma','Inhalers');\nINSERT INTO \"Patient\" (patient_id,birthdate,phone_number,age_group_id,full_name) VALUES (1,'1995-06-15','555-123-4567',3,'John Doe'),(2,'2000-07-20','555-987-6543',5,'Jane Smith'),(3,'1990-08-25','555-555-5555',4,'Michael Brown'),(4,'1988-09-15','555-333-3333',2,'Emily Green'),(5,'1975-10-20','555-222-2222',6,'William Black');\nINSERT INTO \"Vaccine\" (id,vaccine_name,age_group_id,health_condition_id) VALUES (1,'Flu',2,4),(2,'Pneumonia',3,1),(3,'Hepatitis B',1,3),(4,'Meningococcal',4,2),(5,'Varicella',1,5);\n",
      "question": "List the total number of vaccines appropriate for each target",
      "gold_queries": [
        "SELECT Age_Group.Name, Count(*) FROM Age_Group INNER JOIN Vaccine ON Age_Group.Id = Vaccine.age_group_id\r\nGROUP BY Age_Group.Name",
        "SELECT Health_Condition.condition_name, Count(*) FROM Health_Condition INNER JOIN Vaccine ON Health_Condition.Id = Vaccine.Health_Condition_Id\r\nGROUP BY Health_Condition.condition_name",
        "SELECT Health_Condition.condition_name, Age_Group.Name, Count(*) FROM Age_Group INNER JOIN Vaccine ON Age_Group.Id = Vaccine.age_group_id INNER JOIN Health_Condition ON Health_Condition.Id = Vaccine.Health_Condition_Id\r\nGROUP BY Age_Group.Name, Health_Condition.condition_name"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Identify the distinct number of vaccines applicable to each designated target group.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT age_group_id, COUNT(DISTINCT vaccine_name) \nFROM Vaccine \nGROUP BY age_group_id"
          ]
        },
        {
          "interpretation": "Calculate the total number of recommended vaccines for each specific age range.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Age_Group.name, COUNT(Vaccine.id) AS total_vaccines\nFROM Vaccine\nJOIN Age_Group ON Vaccine.age_group_id = Age_Group.id\nGROUP BY Age_Group.name"
          ]
        },
        {
          "interpretation": "Determine the count of vaccines sanctioned for each health condition.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(*) AS vaccine_count, condition_name FROM Vaccine JOIN Health_Condition ON Vaccine.health_condition_id = Health_Condition.id GROUP BY condition_name"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.6666666666666666,
        "precision": 0.6666666666666666,
        "f1_score": 0.6666666666666666,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Healthcare/vague_2tabs_target/vague_2tabs_target.sqlite",
      "db_dump": "CREATE TABLE Age_Group (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT\n);\nCREATE TABLE Appointment (\n    appointment_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date TIMESTAMP,\n    patient_id INTEGER,\n    doctor_id INTEGER,\n    medicalrecord_id INTEGER,\n    FOREIGN KEY(patient_id) REFERENCES Patient(patient_id),\n    FOREIGN KEY(doctor_id) REFERENCES Doctor(doctor_id),\n    FOREIGN KEY(medicalrecord_id) REFERENCES MedicalRecord(medicalrecord_id)\n);\nCREATE TABLE Doctor (\n    doctor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    specialty TEXT\n);\nCREATE TABLE Health_Condition (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    condition_name TEXT\n);\nCREATE TABLE MedicalRecord (\n    medicalrecord_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    patient_id INTEGER,\n    diagnosis TEXT,\n    treatment_plan TEXT,\n    FOREIGN KEY(patient_id) REFERENCES Patient(patient_id)\n);\nCREATE TABLE Patient (\n    patient_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    birthdate DATE,\n    phone_number VARCHAR(15),\n    age_group_id INTEGER, full_name TEXT,\n    FOREIGN KEY(age_group_id) REFERENCES Age_Group(id)\n);\nCREATE TABLE Vaccine (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    vaccine_name TEXT,\n    age_group_id INTEGER,\n    health_condition_id INTEGER,\n    FOREIGN KEY(age_group_id) REFERENCES Age_Group(id),\n    FOREIGN KEY(health_condition_id) REFERENCES Health_Condition(id)\n);\n\nINSERT INTO \"Age_Group\" (id,name) VALUES (1,'0-4'),(2,'5-9'),(3,'10-13'),(4,'14-17'),(5,'18+');\nINSERT INTO \"Appointment\" (appointment_id,date,patient_id,doctor_id,medicalrecord_id) VALUES (1,'2022-10-12 10:00:00',1,1,1),(2,'2022-10-13 14:00:00',2,2,2),(3,'2022-10-14 16:00:00',3,3,3),(4,'2022-10-15 18:00:00',4,4,4),(5,'2022-10-16 20:00:00',5,5,5);\nINSERT INTO \"Doctor\" (doctor_id,first_name,last_name,specialty) VALUES (1,'Dr.','Jones','Cardiology'),(2,'Dr.','Garcia','Endocrinology'),(3,'Dr.','Lee','Pediatrics'),(4,'Dr.','Taylor','Neurology'),(5,'Dr.','Adams','Nephrology');\nINSERT INTO \"Health_Condition\" (id,condition_name) VALUES (1,'Diabetes'),(2,'Hypertension'),(3,'Asthma'),(4,'Allergy'),(5,'Obesity');\nINSERT INTO \"MedicalRecord\" (medicalrecord_id,patient_id,diagnosis,treatment_plan) VALUES (1,1,'Type 2 Diabetes','Diet and Exercise'),(2,2,'Epilepsy','Antiepileptic Drugs'),(3,3,'Anxiety Disorder','Counseling and Medication'),(4,4,'Depression','Antidepressants'),(5,5,'Asthma','Inhalers');\nINSERT INTO \"Patient\" (patient_id,birthdate,phone_number,age_group_id,full_name) VALUES (1,'1995-06-15','555-123-4567',3,'John Doe'),(2,'2000-07-20','555-987-6543',5,'Jane Smith'),(3,'1990-08-25','555-555-5555',4,'Michael Brown'),(4,'1988-09-15','555-333-3333',2,'Emily Green'),(5,'1975-10-20','555-222-2222',6,'William Black');\nINSERT INTO \"Vaccine\" (id,vaccine_name,age_group_id,health_condition_id) VALUES (1,'Flu',2,4),(2,'Pneumonia',3,1),(3,'Hepatitis B',1,3),(4,'Meningococcal',4,2),(5,'Varicella',1,5);\n",
      "question": "List the total number of vaccines appropriate for each age group.",
      "gold_queries": [
        "SELECT Age_Group.Name, Count(*) FROM Age_Group INNER JOIN Vaccine ON Age_Group.Id = Vaccine.age_group_id\r\nGROUP BY Age_Group.Name"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "For every age group, display the number of associated vaccines.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Age_Group.name, COUNT(Vaccine.id) AS number_of_vaccines\nFROM Age_Group\nLEFT JOIN Vaccine ON Age_Group.id = Vaccine.age_group_id\nGROUP BY Age_Group.id"
          ]
        },
        {
          "interpretation": "Provide a count of vaccines categorized by age group.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Age_Group.name, COUNT(Vaccine.id) \nFROM Vaccine \nJOIN Age_Group ON Vaccine.age_group_id = Age_Group.id \nGROUP BY Age_Group.name"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Healthcare/vague_2tabs_target/vague_2tabs_target.sqlite",
      "db_dump": "CREATE TABLE Age_Group (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT\n);\nCREATE TABLE Appointment (\n    appointment_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date TIMESTAMP,\n    patient_id INTEGER,\n    doctor_id INTEGER,\n    medicalrecord_id INTEGER,\n    FOREIGN KEY(patient_id) REFERENCES Patient(patient_id),\n    FOREIGN KEY(doctor_id) REFERENCES Doctor(doctor_id),\n    FOREIGN KEY(medicalrecord_id) REFERENCES MedicalRecord(medicalrecord_id)\n);\nCREATE TABLE Doctor (\n    doctor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    specialty TEXT\n);\nCREATE TABLE Health_Condition (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    condition_name TEXT\n);\nCREATE TABLE MedicalRecord (\n    medicalrecord_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    patient_id INTEGER,\n    diagnosis TEXT,\n    treatment_plan TEXT,\n    FOREIGN KEY(patient_id) REFERENCES Patient(patient_id)\n);\nCREATE TABLE Patient (\n    patient_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    birthdate DATE,\n    phone_number VARCHAR(15),\n    age_group_id INTEGER, full_name TEXT,\n    FOREIGN KEY(age_group_id) REFERENCES Age_Group(id)\n);\nCREATE TABLE Vaccine (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    vaccine_name TEXT,\n    age_group_id INTEGER,\n    health_condition_id INTEGER,\n    FOREIGN KEY(age_group_id) REFERENCES Age_Group(id),\n    FOREIGN KEY(health_condition_id) REFERENCES Health_Condition(id)\n);\n\nINSERT INTO \"Age_Group\" (id,name) VALUES (1,'0-4'),(2,'5-9'),(3,'10-13'),(4,'14-17'),(5,'18+');\nINSERT INTO \"Appointment\" (appointment_id,date,patient_id,doctor_id,medicalrecord_id) VALUES (1,'2022-10-12 10:00:00',1,1,1),(2,'2022-10-13 14:00:00',2,2,2),(3,'2022-10-14 16:00:00',3,3,3),(4,'2022-10-15 18:00:00',4,4,4),(5,'2022-10-16 20:00:00',5,5,5);\nINSERT INTO \"Doctor\" (doctor_id,first_name,last_name,specialty) VALUES (1,'Dr.','Jones','Cardiology'),(2,'Dr.','Garcia','Endocrinology'),(3,'Dr.','Lee','Pediatrics'),(4,'Dr.','Taylor','Neurology'),(5,'Dr.','Adams','Nephrology');\nINSERT INTO \"Health_Condition\" (id,condition_name) VALUES (1,'Diabetes'),(2,'Hypertension'),(3,'Asthma'),(4,'Allergy'),(5,'Obesity');\nINSERT INTO \"MedicalRecord\" (medicalrecord_id,patient_id,diagnosis,treatment_plan) VALUES (1,1,'Type 2 Diabetes','Diet and Exercise'),(2,2,'Epilepsy','Antiepileptic Drugs'),(3,3,'Anxiety Disorder','Counseling and Medication'),(4,4,'Depression','Antidepressants'),(5,5,'Asthma','Inhalers');\nINSERT INTO \"Patient\" (patient_id,birthdate,phone_number,age_group_id,full_name) VALUES (1,'1995-06-15','555-123-4567',3,'John Doe'),(2,'2000-07-20','555-987-6543',5,'Jane Smith'),(3,'1990-08-25','555-555-5555',4,'Michael Brown'),(4,'1988-09-15','555-333-3333',2,'Emily Green'),(5,'1975-10-20','555-222-2222',6,'William Black');\nINSERT INTO \"Vaccine\" (id,vaccine_name,age_group_id,health_condition_id) VALUES (1,'Flu',2,4),(2,'Pneumonia',3,1),(3,'Hepatitis B',1,3),(4,'Meningococcal',4,2),(5,'Varicella',1,5);\n",
      "question": "List the total number of vaccines appropriate for each health condition.",
      "gold_queries": [
        "SELECT Health_Condition.condition_name, Count(*) FROM Health_Condition INNER JOIN Vaccine ON Health_Condition.Id = Vaccine.Health_Condition_Id\r\nGROUP BY Health_Condition.condition_name"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Count the number of vaccines in the Vaccine table where the health_condition_id matches each distinct health condition.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT health_condition_id, COUNT(*) FROM Vaccine GROUP BY health_condition_id"
          ]
        },
        {
          "interpretation": "Calculate the aggregate count of vaccines per health condition.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Health_Condition.condition_name, COUNT(Vaccine.id) AS vaccine_count\nFROM Vaccine\nJOIN Health_Condition ON Vaccine.health_condition_id = Health_Condition.id\nGROUP BY Health_Condition.condition_name"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Healthcare/vague_2tabs_target/vague_2tabs_target.sqlite",
      "db_dump": "CREATE TABLE Age_Group (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT\n);\nCREATE TABLE Appointment (\n    appointment_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date TIMESTAMP,\n    patient_id INTEGER,\n    doctor_id INTEGER,\n    medicalrecord_id INTEGER,\n    FOREIGN KEY(patient_id) REFERENCES Patient(patient_id),\n    FOREIGN KEY(doctor_id) REFERENCES Doctor(doctor_id),\n    FOREIGN KEY(medicalrecord_id) REFERENCES MedicalRecord(medicalrecord_id)\n);\nCREATE TABLE Doctor (\n    doctor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    specialty TEXT\n);\nCREATE TABLE Health_Condition (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    condition_name TEXT\n);\nCREATE TABLE MedicalRecord (\n    medicalrecord_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    patient_id INTEGER,\n    diagnosis TEXT,\n    treatment_plan TEXT,\n    FOREIGN KEY(patient_id) REFERENCES Patient(patient_id)\n);\nCREATE TABLE Patient (\n    patient_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    birthdate DATE,\n    phone_number VARCHAR(15),\n    age_group_id INTEGER, full_name TEXT,\n    FOREIGN KEY(age_group_id) REFERENCES Age_Group(id)\n);\nCREATE TABLE Vaccine (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    vaccine_name TEXT,\n    age_group_id INTEGER,\n    health_condition_id INTEGER,\n    FOREIGN KEY(age_group_id) REFERENCES Age_Group(id),\n    FOREIGN KEY(health_condition_id) REFERENCES Health_Condition(id)\n);\n\nINSERT INTO \"Age_Group\" (id,name) VALUES (1,'0-4'),(2,'5-9'),(3,'10-13'),(4,'14-17'),(5,'18+');\nINSERT INTO \"Appointment\" (appointment_id,date,patient_id,doctor_id,medicalrecord_id) VALUES (1,'2022-10-12 10:00:00',1,1,1),(2,'2022-10-13 14:00:00',2,2,2),(3,'2022-10-14 16:00:00',3,3,3),(4,'2022-10-15 18:00:00',4,4,4),(5,'2022-10-16 20:00:00',5,5,5);\nINSERT INTO \"Doctor\" (doctor_id,first_name,last_name,specialty) VALUES (1,'Dr.','Jones','Cardiology'),(2,'Dr.','Garcia','Endocrinology'),(3,'Dr.','Lee','Pediatrics'),(4,'Dr.','Taylor','Neurology'),(5,'Dr.','Adams','Nephrology');\nINSERT INTO \"Health_Condition\" (id,condition_name) VALUES (1,'Diabetes'),(2,'Hypertension'),(3,'Asthma'),(4,'Allergy'),(5,'Obesity');\nINSERT INTO \"MedicalRecord\" (medicalrecord_id,patient_id,diagnosis,treatment_plan) VALUES (1,1,'Type 2 Diabetes','Diet and Exercise'),(2,2,'Epilepsy','Antiepileptic Drugs'),(3,3,'Anxiety Disorder','Counseling and Medication'),(4,4,'Depression','Antidepressants'),(5,5,'Asthma','Inhalers');\nINSERT INTO \"Patient\" (patient_id,birthdate,phone_number,age_group_id,full_name) VALUES (1,'1995-06-15','555-123-4567',3,'John Doe'),(2,'2000-07-20','555-987-6543',5,'Jane Smith'),(3,'1990-08-25','555-555-5555',4,'Michael Brown'),(4,'1988-09-15','555-333-3333',2,'Emily Green'),(5,'1975-10-20','555-222-2222',6,'William Black');\nINSERT INTO \"Vaccine\" (id,vaccine_name,age_group_id,health_condition_id) VALUES (1,'Flu',2,4),(2,'Pneumonia',3,1),(3,'Hepatitis B',1,3),(4,'Meningococcal',4,2),(5,'Varicella',1,5);\n",
      "question": "List each patient along with suitable vaccines and what they target",
      "gold_queries": [
        "SELECT Patient.full_name, Age_Group.Name, Vaccine.Vaccine_Name\r\nFROM Patient INNER JOIN Age_Group ON Patient.Age_Group_Id = Age_Group.Id \r\nINNER JOIN Vaccine ON Patient.Age_Group_Id = Vaccine.Age_Group_ID",
        "SELECT Patient.full_name, Health_Condition.condition_name, Vaccine.Vaccine_Name\r\nFROM Patient INNER JOIN Vaccine ON Patient.Age_Group_Id = Vaccine.Age_Group_ID INNER JOIN  Health_Condition ON Vaccine.Health_Condition_Id = Health_Condition.Id",
        "SELECT Patient.full_name, Health_Condition.condition_name, Age_Group.Name, Vaccine.Vaccine_Name\r\nFROM Patient INNER JOIN Age_Group ON Patient.Age_Group_Id = Age_Group.Id \r\nINNER JOIN Vaccine ON Patient.Age_Group_Id = Vaccine.Age_Group_ID INNER JOIN Health_Condition ON Health_Condition.Id = Vaccine.Health_Condition_Id"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Display all patients and match them to appropriate vaccines based on available vaccine data",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.full_name, V.vaccine_name \nFROM Patient P \nJOIN Age_Group AG ON P.age_group_id = AG.id \nJOIN Vaccine V ON V.age_group_id = AG.id"
          ]
        },
        {
          "interpretation": "Return a list of patients with recommended vaccines, categorized by targeted conditions",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT p.full_name, v.vaccine_name, h.condition_name\nFROM Patient p\nJOIN Vaccine v ON p.age_group_id = v.age_group_id\nJOIN Health_Condition h ON h.id = v.health_condition_id"
          ]
        },
        {
          "interpretation": "Generate a report associating each patient with vaccines suitable for their age group and any relevant health conditions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.full_name, V.vaccine_name\nFROM Patient P\nJOIN Vaccine V ON P.age_group_id = V.age_group_id\nLEFT JOIN MedicalRecord MR ON P.patient_id = MR.patient_id\nLEFT JOIN Health_Condition HC ON V.health_condition_id = HC.id\nWHERE HC.id IS NULL OR HC.condition_name IN (MR.diagnosis)"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.3333333333333333,
        "precision": 0.3333333333333333,
        "f1_score": 0.3333333333333333,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Student/vague_2cols_studies/vague_2cols_studies.sqlite",
      "db_dump": "CREATE TABLE Courses(\n    ID INTEGER PRIMARY KEY,\n    Title TEXT,\n    Description TEXT,\n    Credit INT \n);\nCREATE TABLE Enrolments(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StudentID INTEGER,\n    CourseID INTEGER,\n    Semester DATE,\n    FOREIGN KEY(StudentID) REFERENCES Students(ID),\n    FOREIGN KEY(CourseID) REFERENCES Courses(ID)\n);\nCREATE TABLE Marks(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    EnrollmentID INTEGER,\n    Grade CHAR(2),\n    DateAssigned DATE,\n    FOREIGN KEY(EnrollmentID) REFERENCES Enrolments(ID)\n);\nCREATE TABLE Students (\n    ID INTEGER PRIMARY KEY,\n    BirthDate DATE,\n    Field_Of_Study TEXT,\n    Degree_Program TEXT,\n    Email TEXT UNIQUE\n, fullname TEXT);\n\nINSERT INTO \"Courses\" (ID,Title,Description,Credit) VALUES (1,'Introduction to Computer Programming','A fundamental course on programming concepts.',4),(2,'Cellular Biology','An advanced course covering cell structure and function.',3),(3,'Quantum Mechanics','An introductory course on quantum mechanics principles.',3),(4,'Organic Chemistry','A comprehensive course on organic chemistry reactions.',4),(5,'Abnormal Psychology','Exploring various psychological disorders and their treatment.',3);\nINSERT INTO \"Students\" (ID,BirthDate,Field_Of_Study,Degree_Program,Email,fullname) VALUES (1,'1990-05-15','Computer Science','BSc','john.doe@example.com','John Doe'),(2,'1988-06-23','Biology','MSc','jane.smith@example.com','Jane Smith'),(3,'1992-07-01','Mathematics','PhD','alice.johnson@example.com','Alice Johnson'),(4,'1994-08-10','Physics','BSc','tom.williams@example.com','Tom Williams'),(5,'1996-09-15','Psychology','BA','emma.brown@example.com','Emma Brown');\n",
      "question": "List all student emails, along with their field of study and degree program.",
      "gold_queries": [
        "SELECT Email, Field_Of_Study, Degree_Program FROM Students"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Display the email address, field of study, and degree program for each student.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Email, Field_Of_Study, Degree_Program FROM Students"
          ]
        },
        {
          "interpretation": "Provide a list of every student in the database along with their email address, field of study, and degree program.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT fullname, Email, Field_Of_Study, Degree_Program FROM Students"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Student/vague_2cols_studies/vague_2cols_studies.sqlite",
      "db_dump": "CREATE TABLE Courses(\n    ID INTEGER PRIMARY KEY,\n    Title TEXT,\n    Description TEXT,\n    Credit INT \n);\nCREATE TABLE Enrolments(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StudentID INTEGER,\n    CourseID INTEGER,\n    Semester DATE,\n    FOREIGN KEY(StudentID) REFERENCES Students(ID),\n    FOREIGN KEY(CourseID) REFERENCES Courses(ID)\n);\nCREATE TABLE Marks(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    EnrollmentID INTEGER,\n    Grade CHAR(2),\n    DateAssigned DATE,\n    FOREIGN KEY(EnrollmentID) REFERENCES Enrolments(ID)\n);\nCREATE TABLE Students (\n    ID INTEGER PRIMARY KEY,\n    BirthDate DATE,\n    Field_Of_Study TEXT,\n    Degree_Program TEXT,\n    Email TEXT UNIQUE\n, fullname TEXT);\n\nINSERT INTO \"Courses\" (ID,Title,Description,Credit) VALUES (1,'Introduction to Computer Programming','A fundamental course on programming concepts.',4),(2,'Cellular Biology','An advanced course covering cell structure and function.',3),(3,'Quantum Mechanics','An introductory course on quantum mechanics principles.',3),(4,'Organic Chemistry','A comprehensive course on organic chemistry reactions.',4),(5,'Abnormal Psychology','Exploring various psychological disorders and their treatment.',3);\nINSERT INTO \"Students\" (ID,BirthDate,Field_Of_Study,Degree_Program,Email,fullname) VALUES (1,'1990-05-15','Computer Science','BSc','john.doe@example.com','John Doe'),(2,'1988-06-23','Biology','MSc','jane.smith@example.com','Jane Smith'),(3,'1992-07-01','Mathematics','PhD','alice.johnson@example.com','Alice Johnson'),(4,'1994-08-10','Physics','BSc','tom.williams@example.com','Tom Williams'),(5,'1996-09-15','Psychology','BA','emma.brown@example.com','Emma Brown');\n",
      "question": "List all student emails, along with their field of study.",
      "gold_queries": [
        "SELECT Email, Field_Of_Study FROM Students"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Display a formatted list of student emails and their respective fields of study.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Email, Field_Of_Study FROM Students"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Student/vague_2cols_studies/vague_2cols_studies.sqlite",
      "db_dump": "CREATE TABLE Courses(\n    ID INTEGER PRIMARY KEY,\n    Title TEXT,\n    Description TEXT,\n    Credit INT \n);\nCREATE TABLE Enrolments(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StudentID INTEGER,\n    CourseID INTEGER,\n    Semester DATE,\n    FOREIGN KEY(StudentID) REFERENCES Students(ID),\n    FOREIGN KEY(CourseID) REFERENCES Courses(ID)\n);\nCREATE TABLE Marks(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    EnrollmentID INTEGER,\n    Grade CHAR(2),\n    DateAssigned DATE,\n    FOREIGN KEY(EnrollmentID) REFERENCES Enrolments(ID)\n);\nCREATE TABLE Students (\n    ID INTEGER PRIMARY KEY,\n    BirthDate DATE,\n    Field_Of_Study TEXT,\n    Degree_Program TEXT,\n    Email TEXT UNIQUE\n, fullname TEXT);\n\nINSERT INTO \"Courses\" (ID,Title,Description,Credit) VALUES (1,'Introduction to Computer Programming','A fundamental course on programming concepts.',4),(2,'Cellular Biology','An advanced course covering cell structure and function.',3),(3,'Quantum Mechanics','An introductory course on quantum mechanics principles.',3),(4,'Organic Chemistry','A comprehensive course on organic chemistry reactions.',4),(5,'Abnormal Psychology','Exploring various psychological disorders and their treatment.',3);\nINSERT INTO \"Students\" (ID,BirthDate,Field_Of_Study,Degree_Program,Email,fullname) VALUES (1,'1990-05-15','Computer Science','BSc','john.doe@example.com','John Doe'),(2,'1988-06-23','Biology','MSc','jane.smith@example.com','Jane Smith'),(3,'1992-07-01','Mathematics','PhD','alice.johnson@example.com','Alice Johnson'),(4,'1994-08-10','Physics','BSc','tom.williams@example.com','Tom Williams'),(5,'1996-09-15','Psychology','BA','emma.brown@example.com','Emma Brown');\n",
      "question": "List all student emails, along with their degree program.",
      "gold_queries": [
        "SELECT Email, Degree_Program FROM Students"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Retrieve Student emails and degree programs from the Students table.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Email, Degree_Program FROM Students"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Student/vague_2cols_studies/vague_2cols_studies.sqlite",
      "db_dump": "CREATE TABLE Courses(\n    ID INTEGER PRIMARY KEY,\n    Title TEXT,\n    Description TEXT,\n    Credit INT \n);\nCREATE TABLE Enrolments(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StudentID INTEGER,\n    CourseID INTEGER,\n    Semester DATE,\n    FOREIGN KEY(StudentID) REFERENCES Students(ID),\n    FOREIGN KEY(CourseID) REFERENCES Courses(ID)\n);\nCREATE TABLE Marks(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    EnrollmentID INTEGER,\n    Grade CHAR(2),\n    DateAssigned DATE,\n    FOREIGN KEY(EnrollmentID) REFERENCES Enrolments(ID)\n);\nCREATE TABLE Students (\n    ID INTEGER PRIMARY KEY,\n    BirthDate DATE,\n    Field_Of_Study TEXT,\n    Degree_Program TEXT,\n    Email TEXT UNIQUE\n, fullname TEXT);\n\nINSERT INTO \"Courses\" (ID,Title,Description,Credit) VALUES (1,'Introduction to Computer Programming','A fundamental course on programming concepts.',4),(2,'Cellular Biology','An advanced course covering cell structure and function.',3),(3,'Quantum Mechanics','An introductory course on quantum mechanics principles.',3),(4,'Organic Chemistry','A comprehensive course on organic chemistry reactions.',4),(5,'Abnormal Psychology','Exploring various psychological disorders and their treatment.',3);\nINSERT INTO \"Students\" (ID,BirthDate,Field_Of_Study,Degree_Program,Email,fullname) VALUES (1,'1990-05-15','Computer Science','BSc','john.doe@example.com','John Doe'),(2,'1988-06-23','Biology','MSc','jane.smith@example.com','Jane Smith'),(3,'1992-07-01','Mathematics','PhD','alice.johnson@example.com','Alice Johnson'),(4,'1994-08-10','Physics','BSc','tom.williams@example.com','Tom Williams'),(5,'1996-09-15','Psychology','BA','emma.brown@example.com','Emma Brown');\n",
      "question": "List students born after 1990, along with their field of study.",
      "gold_queries": [
        "SELECT fullname, Field_Of_Study FROM Students WHERE CAST(SUBSTR(BirthDate, 1, 4) AS INT)  > '1990'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [],
      "num_unique_execution_results": 0,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0,
        "f1_score": 0,
        "num_queries": 0,
        "num_unique_queries": 0,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Student/vague_2cols_studies/vague_2cols_studies.sqlite",
      "db_dump": "CREATE TABLE Courses(\n    ID INTEGER PRIMARY KEY,\n    Title TEXT,\n    Description TEXT,\n    Credit INT \n);\nCREATE TABLE Enrolments(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StudentID INTEGER,\n    CourseID INTEGER,\n    Semester DATE,\n    FOREIGN KEY(StudentID) REFERENCES Students(ID),\n    FOREIGN KEY(CourseID) REFERENCES Courses(ID)\n);\nCREATE TABLE Marks(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    EnrollmentID INTEGER,\n    Grade CHAR(2),\n    DateAssigned DATE,\n    FOREIGN KEY(EnrollmentID) REFERENCES Enrolments(ID)\n);\nCREATE TABLE Students (\n    ID INTEGER PRIMARY KEY,\n    BirthDate DATE,\n    Field_Of_Study TEXT,\n    Degree_Program TEXT,\n    Email TEXT UNIQUE\n, fullname TEXT);\n\nINSERT INTO \"Courses\" (ID,Title,Description,Credit) VALUES (1,'Introduction to Computer Programming','A fundamental course on programming concepts.',4),(2,'Cellular Biology','An advanced course covering cell structure and function.',3),(3,'Quantum Mechanics','An introductory course on quantum mechanics principles.',3),(4,'Organic Chemistry','A comprehensive course on organic chemistry reactions.',4),(5,'Abnormal Psychology','Exploring various psychological disorders and their treatment.',3);\nINSERT INTO \"Students\" (ID,BirthDate,Field_Of_Study,Degree_Program,Email,fullname) VALUES (1,'1990-05-15','Computer Science','BSc','john.doe@example.com','John Doe'),(2,'1988-06-23','Biology','MSc','jane.smith@example.com','Jane Smith'),(3,'1992-07-01','Mathematics','PhD','alice.johnson@example.com','Alice Johnson'),(4,'1994-08-10','Physics','BSc','tom.williams@example.com','Tom Williams'),(5,'1996-09-15','Psychology','BA','emma.brown@example.com','Emma Brown');\n",
      "question": "List all student emails and indicate what they are studying.",
      "gold_queries": [
        "SELECT Email, Field_Of_Study FROM Students",
        "SELECT Email, Degree_Program FROM Students",
        "SELECT Email, Field_Of_Study, Degree_Program FROM Students"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Given the Students table, produce a list where each entry shows a student's email and their respective field of study.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Email, Field_Of_Study FROM Students"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.3333333333333333,
        "precision": 1.0,
        "f1_score": 0.5,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Student/vague_2cols_studies/vague_2cols_studies.sqlite",
      "db_dump": "CREATE TABLE Courses(\n    ID INTEGER PRIMARY KEY,\n    Title TEXT,\n    Description TEXT,\n    Credit INT \n);\nCREATE TABLE Enrolments(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StudentID INTEGER,\n    CourseID INTEGER,\n    Semester DATE,\n    FOREIGN KEY(StudentID) REFERENCES Students(ID),\n    FOREIGN KEY(CourseID) REFERENCES Courses(ID)\n);\nCREATE TABLE Marks(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    EnrollmentID INTEGER,\n    Grade CHAR(2),\n    DateAssigned DATE,\n    FOREIGN KEY(EnrollmentID) REFERENCES Enrolments(ID)\n);\nCREATE TABLE Students (\n    ID INTEGER PRIMARY KEY,\n    BirthDate DATE,\n    Field_Of_Study TEXT,\n    Degree_Program TEXT,\n    Email TEXT UNIQUE\n, fullname TEXT);\n\nINSERT INTO \"Courses\" (ID,Title,Description,Credit) VALUES (1,'Introduction to Computer Programming','A fundamental course on programming concepts.',4),(2,'Cellular Biology','An advanced course covering cell structure and function.',3),(3,'Quantum Mechanics','An introductory course on quantum mechanics principles.',3),(4,'Organic Chemistry','A comprehensive course on organic chemistry reactions.',4),(5,'Abnormal Psychology','Exploring various psychological disorders and their treatment.',3);\nINSERT INTO \"Students\" (ID,BirthDate,Field_Of_Study,Degree_Program,Email,fullname) VALUES (1,'1990-05-15','Computer Science','BSc','john.doe@example.com','John Doe'),(2,'1988-06-23','Biology','MSc','jane.smith@example.com','Jane Smith'),(3,'1992-07-01','Mathematics','PhD','alice.johnson@example.com','Alice Johnson'),(4,'1994-08-10','Physics','BSc','tom.williams@example.com','Tom Williams'),(5,'1996-09-15','Psychology','BA','emma.brown@example.com','Emma Brown');\n",
      "question": "List students born after 1990, along with their field of study and degree program.",
      "gold_queries": [
        "SELECT fullname, Field_Of_Study, Degree_Program FROM Students WHERE CAST(SUBSTR(BirthDate, 1, 4) AS INT)  > '1990'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "All fields of study and degree programs for students born after 1990",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Field_Of_Study, Degree_Program FROM Students WHERE BirthDate > '1990-12-31'"
          ]
        },
        {
          "interpretation": "Students born after 1990, their field of study, and degree program",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT fullname, Field_Of_Study, Degree_Program FROM Students WHERE BirthDate > '1990-01-01'"
          ]
        },
        {
          "interpretation": "List of students born after 1990 ordered by birthdate",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT fullname FROM Students WHERE BirthDate > '1990-12-31' ORDER BY BirthDate"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Student/vague_2cols_studies/vague_2cols_studies.sqlite",
      "db_dump": "CREATE TABLE Courses(\n    ID INTEGER PRIMARY KEY,\n    Title TEXT,\n    Description TEXT,\n    Credit INT \n);\nCREATE TABLE Enrolments(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StudentID INTEGER,\n    CourseID INTEGER,\n    Semester DATE,\n    FOREIGN KEY(StudentID) REFERENCES Students(ID),\n    FOREIGN KEY(CourseID) REFERENCES Courses(ID)\n);\nCREATE TABLE Marks(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    EnrollmentID INTEGER,\n    Grade CHAR(2),\n    DateAssigned DATE,\n    FOREIGN KEY(EnrollmentID) REFERENCES Enrolments(ID)\n);\nCREATE TABLE Students (\n    ID INTEGER PRIMARY KEY,\n    BirthDate DATE,\n    Field_Of_Study TEXT,\n    Degree_Program TEXT,\n    Email TEXT UNIQUE\n, fullname TEXT);\n\nINSERT INTO \"Courses\" (ID,Title,Description,Credit) VALUES (1,'Introduction to Computer Programming','A fundamental course on programming concepts.',4),(2,'Cellular Biology','An advanced course covering cell structure and function.',3),(3,'Quantum Mechanics','An introductory course on quantum mechanics principles.',3),(4,'Organic Chemistry','A comprehensive course on organic chemistry reactions.',4),(5,'Abnormal Psychology','Exploring various psychological disorders and their treatment.',3);\nINSERT INTO \"Students\" (ID,BirthDate,Field_Of_Study,Degree_Program,Email,fullname) VALUES (1,'1990-05-15','Computer Science','BSc','john.doe@example.com','John Doe'),(2,'1988-06-23','Biology','MSc','jane.smith@example.com','Jane Smith'),(3,'1992-07-01','Mathematics','PhD','alice.johnson@example.com','Alice Johnson'),(4,'1994-08-10','Physics','BSc','tom.williams@example.com','Tom Williams'),(5,'1996-09-15','Psychology','BA','emma.brown@example.com','Emma Brown');\n",
      "question": "List students born after 1990, along with their degree program.",
      "gold_queries": [
        "SELECT fullname, Degree_Program FROM Students WHERE CAST(SUBSTR(BirthDate, 1, 4) AS INT)  > '1990'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "for those records where BirthDate is after 1990",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT fullname, BirthDate FROM Students WHERE BirthDate > '1990-12-31'"
          ]
        },
        {
          "interpretation": "Query Students table to retrieve fullname and Degree_Program",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT fullname, Degree_Program FROM Students"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Student/vague_2cols_studies/vague_2cols_studies.sqlite",
      "db_dump": "CREATE TABLE Courses(\n    ID INTEGER PRIMARY KEY,\n    Title TEXT,\n    Description TEXT,\n    Credit INT \n);\nCREATE TABLE Enrolments(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StudentID INTEGER,\n    CourseID INTEGER,\n    Semester DATE,\n    FOREIGN KEY(StudentID) REFERENCES Students(ID),\n    FOREIGN KEY(CourseID) REFERENCES Courses(ID)\n);\nCREATE TABLE Marks(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    EnrollmentID INTEGER,\n    Grade CHAR(2),\n    DateAssigned DATE,\n    FOREIGN KEY(EnrollmentID) REFERENCES Enrolments(ID)\n);\nCREATE TABLE Students (\n    ID INTEGER PRIMARY KEY,\n    BirthDate DATE,\n    Field_Of_Study TEXT,\n    Degree_Program TEXT,\n    Email TEXT UNIQUE\n, fullname TEXT);\n\nINSERT INTO \"Courses\" (ID,Title,Description,Credit) VALUES (1,'Introduction to Computer Programming','A fundamental course on programming concepts.',4),(2,'Cellular Biology','An advanced course covering cell structure and function.',3),(3,'Quantum Mechanics','An introductory course on quantum mechanics principles.',3),(4,'Organic Chemistry','A comprehensive course on organic chemistry reactions.',4),(5,'Abnormal Psychology','Exploring various psychological disorders and their treatment.',3);\nINSERT INTO \"Students\" (ID,BirthDate,Field_Of_Study,Degree_Program,Email,fullname) VALUES (1,'1990-05-15','Computer Science','BSc','john.doe@example.com','John Doe'),(2,'1988-06-23','Biology','MSc','jane.smith@example.com','Jane Smith'),(3,'1992-07-01','Mathematics','PhD','alice.johnson@example.com','Alice Johnson'),(4,'1994-08-10','Physics','BSc','tom.williams@example.com','Tom Williams'),(5,'1996-09-15','Psychology','BA','emma.brown@example.com','Emma Brown');\n",
      "question": "List all the students that are born after 1990 and what they study.",
      "gold_queries": [
        "SELECT fullname, Field_Of_Study FROM Students WHERE CAST(SUBSTR(BirthDate, 1, 4) AS INT)  > '1990'",
        "SELECT fullname, Degree_Program FROM Students WHERE CAST(SUBSTR(BirthDate, 1, 4) AS INT)  > '1990'",
        "SELECT fullname, Field_Of_Study, Degree_Program FROM Students WHERE CAST(SUBSTR(BirthDate, 1, 4) AS INT)  > '1990'"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Retrieve a list of students with a birthdate after 1990-01-01, along with their corresponding \"Field_Of_Study\".",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT fullname, Field_Of_Study \nFROM Students \nWHERE BirthDate > '1990-01-01'"
          ]
        },
        {
          "interpretation": "Provide a list of students born after 1990, specifying their field of study.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Field_Of_Study FROM Students WHERE BirthDate > '1990-12-31'"
          ]
        },
        {
          "interpretation": "Return the names and \"Field_Of_Study\" of students born after 1990.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT fullname, Field_Of_Study FROM Students WHERE BirthDate > '1990-12-31'"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.3333333333333333,
        "precision": 0.3333333333333333,
        "f1_score": 0.3333333333333333,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Student/vague_2cols_developmental_milestones/vague_2cols_developmental_milestones.sqlite",
      "db_dump": "CREATE TABLE Attendance (\n    attendanceId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    classId INTEGER,\n    dateAttended DATE,\n    isPresent BOOLEAN,\n    FOREIGN KEY(studentId) REFERENCES Students(id),\n    FOREIGN KEY(classId) REFERENCES Classes(classId)\n);\nCREATE TABLE Classes (\n    classID INTEGER PRIMARY KEY,\n    className TEXT,\n    teacherName TEXT\n);\nCREATE TABLE DisciplineLogs (\n    logId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    incidentDate DATE,\n    reasonForDiscipline TEXT,\n    disciplinaryAction TEXT,\n    resolutionDate DATE,\n    FOREIGN KEY(studentId) REFERENCES Students(id)\n);\nCREATE TABLE Enrollments (\n    enrollmentId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    classId INTEGER,\n    FOREIGN KEY(studentId) REFERENCES Students(id),\n    FOREIGN KEY(classId) REFERENCES Classes(classId)\n);\nCREATE TABLE MilestoneRecords (\n    recordId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    physicalMilestones TEXT,\n    cognitiveMilestones TEXT,\n    childAge INTEGER,\n    otherDetails TEXT,\n    FOREIGN KEY(studentId) REFERENCES Students(id)\n);\nCREATE TABLE Students (\n    id INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    dateOfBirth DATE\n);\n\nINSERT INTO \"Attendance\" (attendanceId,studentId,classId,dateAttended,isPresent) VALUES (1,1,1,'2022-09-01',1),(2,2,2,'2022-09-02',0),(3,3,3,'2022-09-03',1),(4,4,4,'2022-09-04',1),(5,5,5,'2022-09-05',0);\nINSERT INTO \"Classes\" (classID,className,teacherName) VALUES (1,'Math','Mr. Thompson'),(2,'English','Ms. Johnson'),(3,'History','Mr. White'),(4,'Art','Ms. Green'),(5,'Physical Education','Coach Black');\nINSERT INTO \"DisciplineLogs\" (logId,studentId,incidentDate,reasonForDiscipline,disciplinaryAction,resolutionDate) VALUES (1,1,'2022-09-06','Talking during class','Detention','2022-09-08'),(2,2,'2022-09-07','Cheating on a test','Suspension','2022-09-10'),(3,3,'2022-09-08','Bullying another student','Apology letter','2022-09-10'),(4,4,'2022-09-09','Damaging school property','Community service','2022-09-15'),(5,5,'2022-09-10','Late assignment submission','Extra credit assignment','2022-09-15');\nINSERT INTO \"Enrollments\" (enrollmentId,studentId,classId) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"MilestoneRecords\" (recordId,studentId,physicalMilestones,cognitiveMilestones,childAge,otherDetails) VALUES (1,1,'Walking and running','Counting to 10',8,'No additional details'),(2,2,'Riding a bike','Reading simple sentences',9,'No additional details'),(3,3,'Climbing stairs','Recognizing colors',7,'No additional details'),(4,4,'Swimming','Understanding basic concepts',10,'No additional details'),(5,5,'Playing sports','Writing short stories',11,'No additional details');\nINSERT INTO \"Students\" (id,firstName,lastName,dateOfBirth) VALUES (1,'John','Doe','2008-09-15'),(2,'Jane','Smith','2007-03-20'),(3,'Michael','Johnson','2006-11-12'),(4,'Emily','Williams','2005-06-01'),(5,'David','Brown','2004-02-15');\n",
      "question": "Show developmental milestones and child's age in order of the age",
      "gold_queries": [
        "SELECT MilestoneRecords.physicalMilestones, MilestoneRecords.childAge FROM MileStoneRecords ORDER BY MilestoneRecords.childAge",
        "SELECT MilestoneRecords.cognitiveMilestones, MilestoneRecords.childAge FROM MileStoneRecords ORDER BY MilestoneRecords.childAge",
        "SELECT MilestoneRecords.physicalMilestones, cognitiveMilestones, MilestoneRecords.childAge FROM MileStoneRecords ORDER BY MilestoneRecords.childAge"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Display a list of milestones and childAges, ordered from youngest to oldest.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT physicalMilestones, cognitiveMilestones, childAge FROM MilestoneRecords ORDER BY childAge ASC"
          ]
        },
        {
          "interpretation": "Retrieve all records from MilestoneRecords sorted by childAge ascending.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT physicalMilestones, cognitiveMilestones, childAge, otherDetails FROM MilestoneRecords ORDER BY childAge ASC"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.3333333333333333,
        "precision": 0.5,
        "f1_score": 0.4,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Student/vague_2cols_developmental_milestones/vague_2cols_developmental_milestones.sqlite",
      "db_dump": "CREATE TABLE Attendance (\n    attendanceId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    classId INTEGER,\n    dateAttended DATE,\n    isPresent BOOLEAN,\n    FOREIGN KEY(studentId) REFERENCES Students(id),\n    FOREIGN KEY(classId) REFERENCES Classes(classId)\n);\nCREATE TABLE Classes (\n    classID INTEGER PRIMARY KEY,\n    className TEXT,\n    teacherName TEXT\n);\nCREATE TABLE DisciplineLogs (\n    logId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    incidentDate DATE,\n    reasonForDiscipline TEXT,\n    disciplinaryAction TEXT,\n    resolutionDate DATE,\n    FOREIGN KEY(studentId) REFERENCES Students(id)\n);\nCREATE TABLE Enrollments (\n    enrollmentId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    classId INTEGER,\n    FOREIGN KEY(studentId) REFERENCES Students(id),\n    FOREIGN KEY(classId) REFERENCES Classes(classId)\n);\nCREATE TABLE MilestoneRecords (\n    recordId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    physicalMilestones TEXT,\n    cognitiveMilestones TEXT,\n    childAge INTEGER,\n    otherDetails TEXT,\n    FOREIGN KEY(studentId) REFERENCES Students(id)\n);\nCREATE TABLE Students (\n    id INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    dateOfBirth DATE\n);\n\nINSERT INTO \"Attendance\" (attendanceId,studentId,classId,dateAttended,isPresent) VALUES (1,1,1,'2022-09-01',1),(2,2,2,'2022-09-02',0),(3,3,3,'2022-09-03',1),(4,4,4,'2022-09-04',1),(5,5,5,'2022-09-05',0);\nINSERT INTO \"Classes\" (classID,className,teacherName) VALUES (1,'Math','Mr. Thompson'),(2,'English','Ms. Johnson'),(3,'History','Mr. White'),(4,'Art','Ms. Green'),(5,'Physical Education','Coach Black');\nINSERT INTO \"DisciplineLogs\" (logId,studentId,incidentDate,reasonForDiscipline,disciplinaryAction,resolutionDate) VALUES (1,1,'2022-09-06','Talking during class','Detention','2022-09-08'),(2,2,'2022-09-07','Cheating on a test','Suspension','2022-09-10'),(3,3,'2022-09-08','Bullying another student','Apology letter','2022-09-10'),(4,4,'2022-09-09','Damaging school property','Community service','2022-09-15'),(5,5,'2022-09-10','Late assignment submission','Extra credit assignment','2022-09-15');\nINSERT INTO \"Enrollments\" (enrollmentId,studentId,classId) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"MilestoneRecords\" (recordId,studentId,physicalMilestones,cognitiveMilestones,childAge,otherDetails) VALUES (1,1,'Walking and running','Counting to 10',8,'No additional details'),(2,2,'Riding a bike','Reading simple sentences',9,'No additional details'),(3,3,'Climbing stairs','Recognizing colors',7,'No additional details'),(4,4,'Swimming','Understanding basic concepts',10,'No additional details'),(5,5,'Playing sports','Writing short stories',11,'No additional details');\nINSERT INTO \"Students\" (id,firstName,lastName,dateOfBirth) VALUES (1,'John','Doe','2008-09-15'),(2,'Jane','Smith','2007-03-20'),(3,'Michael','Johnson','2006-11-12'),(4,'Emily','Williams','2005-06-01'),(5,'David','Brown','2004-02-15');\n",
      "question": "show physical and cognitive milestones and child age in age ascending order",
      "gold_queries": [
        "SELECT MilestoneRecords.physicalMilestones, cognitiveMilestones, MilestoneRecords.childAge FROM MileStoneRecords ORDER BY MilestoneRecords.childAge"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Display all records from MilestoneRecords, sorted by the age column in ascending order.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT physicalMilestones, cognitiveMilestones, childAge, otherDetails FROM MilestoneRecords ORDER BY childAge ASC"
          ]
        },
        {
          "interpretation": "Select physicalMilestones, cognitiveMilestones, childAge From MilestoneRecords Order By childAge",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT physicalMilestones, cognitiveMilestones, childAge FROM MilestoneRecords ORDER BY childAge"
          ]
        },
        {
          "interpretation": "What are the physical and cognitive milestones for every student, sorted from youngest to oldest?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT physicalMilestones, cognitiveMilestones\nFROM MilestoneRecords\nJOIN Students ON MilestoneRecords.studentId = Students.id\nORDER BY Students.dateOfBirth DESC"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Student/vague_2cols_developmental_milestones/vague_2cols_developmental_milestones.sqlite",
      "db_dump": "CREATE TABLE Attendance (\n    attendanceId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    classId INTEGER,\n    dateAttended DATE,\n    isPresent BOOLEAN,\n    FOREIGN KEY(studentId) REFERENCES Students(id),\n    FOREIGN KEY(classId) REFERENCES Classes(classId)\n);\nCREATE TABLE Classes (\n    classID INTEGER PRIMARY KEY,\n    className TEXT,\n    teacherName TEXT\n);\nCREATE TABLE DisciplineLogs (\n    logId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    incidentDate DATE,\n    reasonForDiscipline TEXT,\n    disciplinaryAction TEXT,\n    resolutionDate DATE,\n    FOREIGN KEY(studentId) REFERENCES Students(id)\n);\nCREATE TABLE Enrollments (\n    enrollmentId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    classId INTEGER,\n    FOREIGN KEY(studentId) REFERENCES Students(id),\n    FOREIGN KEY(classId) REFERENCES Classes(classId)\n);\nCREATE TABLE MilestoneRecords (\n    recordId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    physicalMilestones TEXT,\n    cognitiveMilestones TEXT,\n    childAge INTEGER,\n    otherDetails TEXT,\n    FOREIGN KEY(studentId) REFERENCES Students(id)\n);\nCREATE TABLE Students (\n    id INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    dateOfBirth DATE\n);\n\nINSERT INTO \"Attendance\" (attendanceId,studentId,classId,dateAttended,isPresent) VALUES (1,1,1,'2022-09-01',1),(2,2,2,'2022-09-02',0),(3,3,3,'2022-09-03',1),(4,4,4,'2022-09-04',1),(5,5,5,'2022-09-05',0);\nINSERT INTO \"Classes\" (classID,className,teacherName) VALUES (1,'Math','Mr. Thompson'),(2,'English','Ms. Johnson'),(3,'History','Mr. White'),(4,'Art','Ms. Green'),(5,'Physical Education','Coach Black');\nINSERT INTO \"DisciplineLogs\" (logId,studentId,incidentDate,reasonForDiscipline,disciplinaryAction,resolutionDate) VALUES (1,1,'2022-09-06','Talking during class','Detention','2022-09-08'),(2,2,'2022-09-07','Cheating on a test','Suspension','2022-09-10'),(3,3,'2022-09-08','Bullying another student','Apology letter','2022-09-10'),(4,4,'2022-09-09','Damaging school property','Community service','2022-09-15'),(5,5,'2022-09-10','Late assignment submission','Extra credit assignment','2022-09-15');\nINSERT INTO \"Enrollments\" (enrollmentId,studentId,classId) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"MilestoneRecords\" (recordId,studentId,physicalMilestones,cognitiveMilestones,childAge,otherDetails) VALUES (1,1,'Walking and running','Counting to 10',8,'No additional details'),(2,2,'Riding a bike','Reading simple sentences',9,'No additional details'),(3,3,'Climbing stairs','Recognizing colors',7,'No additional details'),(4,4,'Swimming','Understanding basic concepts',10,'No additional details'),(5,5,'Playing sports','Writing short stories',11,'No additional details');\nINSERT INTO \"Students\" (id,firstName,lastName,dateOfBirth) VALUES (1,'John','Doe','2008-09-15'),(2,'Jane','Smith','2007-03-20'),(3,'Michael','Johnson','2006-11-12'),(4,'Emily','Williams','2005-06-01'),(5,'David','Brown','2004-02-15');\n",
      "question": "show cognitive milestones and child age in age ascending order",
      "gold_queries": [
        "SELECT MilestoneRecords.cognitiveMilestones, MilestoneRecords.childAge FROM MileStoneRecords ORDER BY MilestoneRecords.childAge"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [],
      "num_unique_execution_results": 0,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0,
        "f1_score": 0,
        "num_queries": 0,
        "num_unique_queries": 0,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Student/vague_2cols_developmental_milestones/vague_2cols_developmental_milestones.sqlite",
      "db_dump": "CREATE TABLE Attendance (\n    attendanceId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    classId INTEGER,\n    dateAttended DATE,\n    isPresent BOOLEAN,\n    FOREIGN KEY(studentId) REFERENCES Students(id),\n    FOREIGN KEY(classId) REFERENCES Classes(classId)\n);\nCREATE TABLE Classes (\n    classID INTEGER PRIMARY KEY,\n    className TEXT,\n    teacherName TEXT\n);\nCREATE TABLE DisciplineLogs (\n    logId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    incidentDate DATE,\n    reasonForDiscipline TEXT,\n    disciplinaryAction TEXT,\n    resolutionDate DATE,\n    FOREIGN KEY(studentId) REFERENCES Students(id)\n);\nCREATE TABLE Enrollments (\n    enrollmentId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    classId INTEGER,\n    FOREIGN KEY(studentId) REFERENCES Students(id),\n    FOREIGN KEY(classId) REFERENCES Classes(classId)\n);\nCREATE TABLE MilestoneRecords (\n    recordId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    physicalMilestones TEXT,\n    cognitiveMilestones TEXT,\n    childAge INTEGER,\n    otherDetails TEXT,\n    FOREIGN KEY(studentId) REFERENCES Students(id)\n);\nCREATE TABLE Students (\n    id INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    dateOfBirth DATE\n);\n\nINSERT INTO \"Attendance\" (attendanceId,studentId,classId,dateAttended,isPresent) VALUES (1,1,1,'2022-09-01',1),(2,2,2,'2022-09-02',0),(3,3,3,'2022-09-03',1),(4,4,4,'2022-09-04',1),(5,5,5,'2022-09-05',0);\nINSERT INTO \"Classes\" (classID,className,teacherName) VALUES (1,'Math','Mr. Thompson'),(2,'English','Ms. Johnson'),(3,'History','Mr. White'),(4,'Art','Ms. Green'),(5,'Physical Education','Coach Black');\nINSERT INTO \"DisciplineLogs\" (logId,studentId,incidentDate,reasonForDiscipline,disciplinaryAction,resolutionDate) VALUES (1,1,'2022-09-06','Talking during class','Detention','2022-09-08'),(2,2,'2022-09-07','Cheating on a test','Suspension','2022-09-10'),(3,3,'2022-09-08','Bullying another student','Apology letter','2022-09-10'),(4,4,'2022-09-09','Damaging school property','Community service','2022-09-15'),(5,5,'2022-09-10','Late assignment submission','Extra credit assignment','2022-09-15');\nINSERT INTO \"Enrollments\" (enrollmentId,studentId,classId) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"MilestoneRecords\" (recordId,studentId,physicalMilestones,cognitiveMilestones,childAge,otherDetails) VALUES (1,1,'Walking and running','Counting to 10',8,'No additional details'),(2,2,'Riding a bike','Reading simple sentences',9,'No additional details'),(3,3,'Climbing stairs','Recognizing colors',7,'No additional details'),(4,4,'Swimming','Understanding basic concepts',10,'No additional details'),(5,5,'Playing sports','Writing short stories',11,'No additional details');\nINSERT INTO \"Students\" (id,firstName,lastName,dateOfBirth) VALUES (1,'John','Doe','2008-09-15'),(2,'Jane','Smith','2007-03-20'),(3,'Michael','Johnson','2006-11-12'),(4,'Emily','Williams','2005-06-01'),(5,'David','Brown','2004-02-15');\n",
      "question": "show physical milestones and child age in age ascending order",
      "gold_queries": [
        "SELECT MilestoneRecords.physicalMilestones, MilestoneRecords.childAge FROM MileStoneRecords ORDER BY MilestoneRecords.childAge"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [],
      "num_unique_execution_results": 0,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0,
        "f1_score": 0,
        "num_queries": 0,
        "num_unique_queries": 0,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Student/vague_2cols_developmental_milestones/vague_2cols_developmental_milestones.sqlite",
      "db_dump": "CREATE TABLE Attendance (\n    attendanceId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    classId INTEGER,\n    dateAttended DATE,\n    isPresent BOOLEAN,\n    FOREIGN KEY(studentId) REFERENCES Students(id),\n    FOREIGN KEY(classId) REFERENCES Classes(classId)\n);\nCREATE TABLE Classes (\n    classID INTEGER PRIMARY KEY,\n    className TEXT,\n    teacherName TEXT\n);\nCREATE TABLE DisciplineLogs (\n    logId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    incidentDate DATE,\n    reasonForDiscipline TEXT,\n    disciplinaryAction TEXT,\n    resolutionDate DATE,\n    FOREIGN KEY(studentId) REFERENCES Students(id)\n);\nCREATE TABLE Enrollments (\n    enrollmentId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    classId INTEGER,\n    FOREIGN KEY(studentId) REFERENCES Students(id),\n    FOREIGN KEY(classId) REFERENCES Classes(classId)\n);\nCREATE TABLE MilestoneRecords (\n    recordId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    physicalMilestones TEXT,\n    cognitiveMilestones TEXT,\n    childAge INTEGER,\n    otherDetails TEXT,\n    FOREIGN KEY(studentId) REFERENCES Students(id)\n);\nCREATE TABLE Students (\n    id INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    dateOfBirth DATE\n);\n\nINSERT INTO \"Attendance\" (attendanceId,studentId,classId,dateAttended,isPresent) VALUES (1,1,1,'2022-09-01',1),(2,2,2,'2022-09-02',0),(3,3,3,'2022-09-03',1),(4,4,4,'2022-09-04',1),(5,5,5,'2022-09-05',0);\nINSERT INTO \"Classes\" (classID,className,teacherName) VALUES (1,'Math','Mr. Thompson'),(2,'English','Ms. Johnson'),(3,'History','Mr. White'),(4,'Art','Ms. Green'),(5,'Physical Education','Coach Black');\nINSERT INTO \"DisciplineLogs\" (logId,studentId,incidentDate,reasonForDiscipline,disciplinaryAction,resolutionDate) VALUES (1,1,'2022-09-06','Talking during class','Detention','2022-09-08'),(2,2,'2022-09-07','Cheating on a test','Suspension','2022-09-10'),(3,3,'2022-09-08','Bullying another student','Apology letter','2022-09-10'),(4,4,'2022-09-09','Damaging school property','Community service','2022-09-15'),(5,5,'2022-09-10','Late assignment submission','Extra credit assignment','2022-09-15');\nINSERT INTO \"Enrollments\" (enrollmentId,studentId,classId) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"MilestoneRecords\" (recordId,studentId,physicalMilestones,cognitiveMilestones,childAge,otherDetails) VALUES (1,1,'Walking and running','Counting to 10',8,'No additional details'),(2,2,'Riding a bike','Reading simple sentences',9,'No additional details'),(3,3,'Climbing stairs','Recognizing colors',7,'No additional details'),(4,4,'Swimming','Understanding basic concepts',10,'No additional details'),(5,5,'Playing sports','Writing short stories',11,'No additional details');\nINSERT INTO \"Students\" (id,firstName,lastName,dateOfBirth) VALUES (1,'John','Doe','2008-09-15'),(2,'Jane','Smith','2007-03-20'),(3,'Michael','Johnson','2006-11-12'),(4,'Emily','Williams','2005-06-01'),(5,'David','Brown','2004-02-15');\n",
      "question": "Show how many students have achieved each developmental milestone",
      "gold_queries": [
        "SELECT MilestoneRecords.physicalMilestones, Count(*) as Pupil_Count FROM MileStoneRecords",
        "SELECT MilestoneRecords.cognitiveMilestones, Count(*) as Pupil_Count FROM MileStoneRecords",
        "SELECT MilestoneRecords.physicalMilestones, cognitiveMilestones, Count(*) as Pupil_Count FROM MileStoneRecords"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Count the number of students recorded for each distinct physical and cognitive milestone combination in the MilestoneRecords table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT physicalMilestones, cognitiveMilestones, COUNT(*) FROM MilestoneRecords GROUP BY physicalMilestones, cognitiveMilestones"
          ]
        },
        {
          "interpretation": "Determine the total number of students who have achieved any developmental milestone.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(DISTINCT studentId) FROM MilestoneRecords"
          ]
        },
        {
          "interpretation": "Count the occurrences of each unique physical milestone in the MilestoneRecords table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT physicalMilestones, COUNT(*) FROM MilestoneRecords GROUP BY physicalMilestones"
          ]
        },
        {
          "interpretation": "Identify the number of students who have achieved at least one of each physical milestone and at least one of each cognitive milestone.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(DISTINCT studentId)\nFROM MilestoneRecords\nGROUP BY studentId\nHAVING COUNT(DISTINCT physicalMilestones) >= (SELECT COUNT(DISTINCT physicalMilestones) FROM MilestoneRecords)\nAND COUNT(DISTINCT cognitiveMilestones) >= (SELECT COUNT(DISTINCT cognitiveMilestones) FROM MilestoneRecords)"
          ]
        },
        {
          "interpretation": "Create a report showing the number of students who have achieved each physical milestone, then a separate report for each cognitive milestone.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT cognitiveMilestones, COUNT(studentId) as numberOfStudents\nFROM MilestoneRecords\nGROUP BY cognitiveMilestones",
            "SELECT physicalMilestones, COUNT(studentId) as numberOfStudents\nFROM MilestoneRecords\nGROUP BY physicalMilestones"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Student/vague_2cols_developmental_milestones/vague_2cols_developmental_milestones.sqlite",
      "db_dump": "CREATE TABLE Attendance (\n    attendanceId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    classId INTEGER,\n    dateAttended DATE,\n    isPresent BOOLEAN,\n    FOREIGN KEY(studentId) REFERENCES Students(id),\n    FOREIGN KEY(classId) REFERENCES Classes(classId)\n);\nCREATE TABLE Classes (\n    classID INTEGER PRIMARY KEY,\n    className TEXT,\n    teacherName TEXT\n);\nCREATE TABLE DisciplineLogs (\n    logId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    incidentDate DATE,\n    reasonForDiscipline TEXT,\n    disciplinaryAction TEXT,\n    resolutionDate DATE,\n    FOREIGN KEY(studentId) REFERENCES Students(id)\n);\nCREATE TABLE Enrollments (\n    enrollmentId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    classId INTEGER,\n    FOREIGN KEY(studentId) REFERENCES Students(id),\n    FOREIGN KEY(classId) REFERENCES Classes(classId)\n);\nCREATE TABLE MilestoneRecords (\n    recordId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    physicalMilestones TEXT,\n    cognitiveMilestones TEXT,\n    childAge INTEGER,\n    otherDetails TEXT,\n    FOREIGN KEY(studentId) REFERENCES Students(id)\n);\nCREATE TABLE Students (\n    id INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    dateOfBirth DATE\n);\n\nINSERT INTO \"Attendance\" (attendanceId,studentId,classId,dateAttended,isPresent) VALUES (1,1,1,'2022-09-01',1),(2,2,2,'2022-09-02',0),(3,3,3,'2022-09-03',1),(4,4,4,'2022-09-04',1),(5,5,5,'2022-09-05',0);\nINSERT INTO \"Classes\" (classID,className,teacherName) VALUES (1,'Math','Mr. Thompson'),(2,'English','Ms. Johnson'),(3,'History','Mr. White'),(4,'Art','Ms. Green'),(5,'Physical Education','Coach Black');\nINSERT INTO \"DisciplineLogs\" (logId,studentId,incidentDate,reasonForDiscipline,disciplinaryAction,resolutionDate) VALUES (1,1,'2022-09-06','Talking during class','Detention','2022-09-08'),(2,2,'2022-09-07','Cheating on a test','Suspension','2022-09-10'),(3,3,'2022-09-08','Bullying another student','Apology letter','2022-09-10'),(4,4,'2022-09-09','Damaging school property','Community service','2022-09-15'),(5,5,'2022-09-10','Late assignment submission','Extra credit assignment','2022-09-15');\nINSERT INTO \"Enrollments\" (enrollmentId,studentId,classId) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"MilestoneRecords\" (recordId,studentId,physicalMilestones,cognitiveMilestones,childAge,otherDetails) VALUES (1,1,'Walking and running','Counting to 10',8,'No additional details'),(2,2,'Riding a bike','Reading simple sentences',9,'No additional details'),(3,3,'Climbing stairs','Recognizing colors',7,'No additional details'),(4,4,'Swimming','Understanding basic concepts',10,'No additional details'),(5,5,'Playing sports','Writing short stories',11,'No additional details');\nINSERT INTO \"Students\" (id,firstName,lastName,dateOfBirth) VALUES (1,'John','Doe','2008-09-15'),(2,'Jane','Smith','2007-03-20'),(3,'Michael','Johnson','2006-11-12'),(4,'Emily','Williams','2005-06-01'),(5,'David','Brown','2004-02-15');\n",
      "question": "List the physical and cognitive milestones and the number of students that have achieved it.",
      "gold_queries": [
        "SELECT MilestoneRecords.physicalMilestones, cognitiveMilestones, Count(*) as Pupil_Count FROM MileStoneRecords"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List all unique physical and cognitive milestones from the MilestoneRecords table. For each milestone, display the count of students who have achieved it.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT physicalMilestones, COUNT(DISTINCT studentId) as count FROM MilestoneRecords GROUP BY physicalMilestones\nUNION\nSELECT cognitiveMilestones, COUNT(DISTINCT studentId) as count FROM MilestoneRecords GROUP BY cognitiveMilestones"
          ]
        },
        {
          "interpretation": "List all distinct physical and cognitive milestones present in the MilestoneRecords table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT physicalMilestones, cognitiveMilestones FROM MilestoneRecords"
          ]
        },
        {
          "interpretation": "Generate a report showing all physical and cognitive milestones and the number of students associated with each milestone.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT physicalMilestones, cognitiveMilestones, COUNT(studentId) AS numberOfStudents\nFROM MilestoneRecords\nGROUP BY physicalMilestones, cognitiveMilestones"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Student/vague_2cols_developmental_milestones/vague_2cols_developmental_milestones.sqlite",
      "db_dump": "CREATE TABLE Attendance (\n    attendanceId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    classId INTEGER,\n    dateAttended DATE,\n    isPresent BOOLEAN,\n    FOREIGN KEY(studentId) REFERENCES Students(id),\n    FOREIGN KEY(classId) REFERENCES Classes(classId)\n);\nCREATE TABLE Classes (\n    classID INTEGER PRIMARY KEY,\n    className TEXT,\n    teacherName TEXT\n);\nCREATE TABLE DisciplineLogs (\n    logId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    incidentDate DATE,\n    reasonForDiscipline TEXT,\n    disciplinaryAction TEXT,\n    resolutionDate DATE,\n    FOREIGN KEY(studentId) REFERENCES Students(id)\n);\nCREATE TABLE Enrollments (\n    enrollmentId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    classId INTEGER,\n    FOREIGN KEY(studentId) REFERENCES Students(id),\n    FOREIGN KEY(classId) REFERENCES Classes(classId)\n);\nCREATE TABLE MilestoneRecords (\n    recordId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    physicalMilestones TEXT,\n    cognitiveMilestones TEXT,\n    childAge INTEGER,\n    otherDetails TEXT,\n    FOREIGN KEY(studentId) REFERENCES Students(id)\n);\nCREATE TABLE Students (\n    id INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    dateOfBirth DATE\n);\n\nINSERT INTO \"Attendance\" (attendanceId,studentId,classId,dateAttended,isPresent) VALUES (1,1,1,'2022-09-01',1),(2,2,2,'2022-09-02',0),(3,3,3,'2022-09-03',1),(4,4,4,'2022-09-04',1),(5,5,5,'2022-09-05',0);\nINSERT INTO \"Classes\" (classID,className,teacherName) VALUES (1,'Math','Mr. Thompson'),(2,'English','Ms. Johnson'),(3,'History','Mr. White'),(4,'Art','Ms. Green'),(5,'Physical Education','Coach Black');\nINSERT INTO \"DisciplineLogs\" (logId,studentId,incidentDate,reasonForDiscipline,disciplinaryAction,resolutionDate) VALUES (1,1,'2022-09-06','Talking during class','Detention','2022-09-08'),(2,2,'2022-09-07','Cheating on a test','Suspension','2022-09-10'),(3,3,'2022-09-08','Bullying another student','Apology letter','2022-09-10'),(4,4,'2022-09-09','Damaging school property','Community service','2022-09-15'),(5,5,'2022-09-10','Late assignment submission','Extra credit assignment','2022-09-15');\nINSERT INTO \"Enrollments\" (enrollmentId,studentId,classId) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"MilestoneRecords\" (recordId,studentId,physicalMilestones,cognitiveMilestones,childAge,otherDetails) VALUES (1,1,'Walking and running','Counting to 10',8,'No additional details'),(2,2,'Riding a bike','Reading simple sentences',9,'No additional details'),(3,3,'Climbing stairs','Recognizing colors',7,'No additional details'),(4,4,'Swimming','Understanding basic concepts',10,'No additional details'),(5,5,'Playing sports','Writing short stories',11,'No additional details');\nINSERT INTO \"Students\" (id,firstName,lastName,dateOfBirth) VALUES (1,'John','Doe','2008-09-15'),(2,'Jane','Smith','2007-03-20'),(3,'Michael','Johnson','2006-11-12'),(4,'Emily','Williams','2005-06-01'),(5,'David','Brown','2004-02-15');\n",
      "question": "List the cognitive milestones and the number of students that have achieved it.",
      "gold_queries": [
        "SELECT MilestoneRecords.cognitiveMilestones, Count(*) as Pupil_Count FROM MileStoneRecords"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Identify and enumerate all unique cognitive milestones present in MilestoneRecords, providing a count of students for each milestone.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT cognitiveMilestones, COUNT(studentId) FROM MilestoneRecords GROUP BY cognitiveMilestones"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Student/vague_2cols_developmental_milestones/vague_2cols_developmental_milestones.sqlite",
      "db_dump": "CREATE TABLE Attendance (\n    attendanceId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    classId INTEGER,\n    dateAttended DATE,\n    isPresent BOOLEAN,\n    FOREIGN KEY(studentId) REFERENCES Students(id),\n    FOREIGN KEY(classId) REFERENCES Classes(classId)\n);\nCREATE TABLE Classes (\n    classID INTEGER PRIMARY KEY,\n    className TEXT,\n    teacherName TEXT\n);\nCREATE TABLE DisciplineLogs (\n    logId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    incidentDate DATE,\n    reasonForDiscipline TEXT,\n    disciplinaryAction TEXT,\n    resolutionDate DATE,\n    FOREIGN KEY(studentId) REFERENCES Students(id)\n);\nCREATE TABLE Enrollments (\n    enrollmentId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    classId INTEGER,\n    FOREIGN KEY(studentId) REFERENCES Students(id),\n    FOREIGN KEY(classId) REFERENCES Classes(classId)\n);\nCREATE TABLE MilestoneRecords (\n    recordId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    physicalMilestones TEXT,\n    cognitiveMilestones TEXT,\n    childAge INTEGER,\n    otherDetails TEXT,\n    FOREIGN KEY(studentId) REFERENCES Students(id)\n);\nCREATE TABLE Students (\n    id INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    dateOfBirth DATE\n);\n\nINSERT INTO \"Attendance\" (attendanceId,studentId,classId,dateAttended,isPresent) VALUES (1,1,1,'2022-09-01',1),(2,2,2,'2022-09-02',0),(3,3,3,'2022-09-03',1),(4,4,4,'2022-09-04',1),(5,5,5,'2022-09-05',0);\nINSERT INTO \"Classes\" (classID,className,teacherName) VALUES (1,'Math','Mr. Thompson'),(2,'English','Ms. Johnson'),(3,'History','Mr. White'),(4,'Art','Ms. Green'),(5,'Physical Education','Coach Black');\nINSERT INTO \"DisciplineLogs\" (logId,studentId,incidentDate,reasonForDiscipline,disciplinaryAction,resolutionDate) VALUES (1,1,'2022-09-06','Talking during class','Detention','2022-09-08'),(2,2,'2022-09-07','Cheating on a test','Suspension','2022-09-10'),(3,3,'2022-09-08','Bullying another student','Apology letter','2022-09-10'),(4,4,'2022-09-09','Damaging school property','Community service','2022-09-15'),(5,5,'2022-09-10','Late assignment submission','Extra credit assignment','2022-09-15');\nINSERT INTO \"Enrollments\" (enrollmentId,studentId,classId) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"MilestoneRecords\" (recordId,studentId,physicalMilestones,cognitiveMilestones,childAge,otherDetails) VALUES (1,1,'Walking and running','Counting to 10',8,'No additional details'),(2,2,'Riding a bike','Reading simple sentences',9,'No additional details'),(3,3,'Climbing stairs','Recognizing colors',7,'No additional details'),(4,4,'Swimming','Understanding basic concepts',10,'No additional details'),(5,5,'Playing sports','Writing short stories',11,'No additional details');\nINSERT INTO \"Students\" (id,firstName,lastName,dateOfBirth) VALUES (1,'John','Doe','2008-09-15'),(2,'Jane','Smith','2007-03-20'),(3,'Michael','Johnson','2006-11-12'),(4,'Emily','Williams','2005-06-01'),(5,'David','Brown','2004-02-15');\n",
      "question": "List the physical milestones and the number of students that have achieved it.",
      "gold_queries": [
        "SELECT MilestoneRecords.physicalMilestones, Count(*) as Pupil_Count FROM MileStoneRecords"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Display a list of physical milestones present in MilestoneRecords, accompanied by the total number of students achieving each milestone.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT physicalMilestones, COUNT(studentId) FROM MilestoneRecords GROUP BY physicalMilestones"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Traffic/vague_2cols_designer/vague_2cols_designer.sqlite",
      "db_dump": "CREATE TABLE Accidents(\n    AccidentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    DateOfAccident DATE,\n    TimeOfAccident TIME,\n    LocationText TEXT,\n    Latitude REAL,\n    Longitude REAL,\n    Severity TEXT);\nCREATE TABLE CivilEngineers (\n    ProjectID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Intersection TEXT,\n    Civil_Engineer TEXT,\n    Engineering_Firm TEXT,\n    StartDate DATE,\n    EndDate DATE,\n    Budget REAL);\nCREATE TABLE Drivers(\n    DriverID INTEGER PRIMARY KEY AUTOINCREMENT,\n    LicenseNumber TEXT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE PoliceReports(\n    ReportID INTEGER PRIMARY KEY AUTOINCREMENT,\n    DateReported DATE,\n    OfficerID INT,\n    AccidentID INT,\n    OffenseType TEXT,\n    Penalty TEXT);\nCREATE TABLE Roads(\n    RoadID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StreetName TEXT,\n    City TEXT,\n    State TEXT,\n    ZipCode INT);\nCREATE TABLE VehicleTypes(\n    TypeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Make TEXT,\n    Model TEXT,\n    Year INT);\n\nINSERT INTO \"Accidents\" (AccidentID,DateOfAccident,TimeOfAccident,LocationText,Latitude,Longitude,Severity) VALUES (1,'2021-08-01','10:30 AM','Main St & Oak Ave',40.0,-89.0,'Minor'),(2,'2021-08-02','11:15 AM','Elm St & Pine Ave',41.0,-90.0,'Moderate');\nINSERT INTO \"CivilEngineers\" (ProjectID,Intersection,Civil_Engineer,Engineering_Firm,StartDate,EndDate,Budget) VALUES (1,'Main St & Oak Ave','John Doe','ABC Engineering','2021-06-01','2021-09-30',500000.0),(2,'Elm St & Pine Ave','Jane Smith','XYZ Engineering','2021-07-01','2021-10-31',600000.0);\nINSERT INTO \"Drivers\" (DriverID,LicenseNumber,Name,Address,PhoneNumber) VALUES (1,'A1234CD','Alice Johnson','123 Main St, Springfield, IL','555-123-4567'),(2,'BCDEFGH','Bob Smith','456 Elm St, Chicago, IL','555-987-6543');\nINSERT INTO \"PoliceReports\" (ReportID,DateReported,OfficerID,AccidentID,OffenseType,Penalty) VALUES (1,'2021-08-01',1,1,'Speeding','Warning'),(2,'2021-08-02',2,2,'Running Red Light','$100 Fine');\nINSERT INTO \"Roads\" (RoadID,StreetName,City,State,ZipCode) VALUES (1,'Bridge St','Springfield','IL',62704),(2,'Parkway Dr','Chicago','IL',60616);\nINSERT INTO \"VehicleTypes\" (TypeID,Make,Model,Year) VALUES (1,'Toyota','Corolla',2018),(2,'Honda','Civic',2019);\n",
      "question": "What engineering firm(s) are located at the intersection of Elm Street and Pine Avenue, and which civil engineers work there?",
      "gold_queries": [
        "SELECT Civil_Engineer, Engineering_Firm FROM CivilEngineers WHERE Intersection = 'Elm St & Pine Ave';"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Which engineering firm is associated with the intersection of Elm Street and Pine Avenue?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Engineering_Firm FROM CivilEngineers WHERE Intersection = 'Elm St & Pine Ave'"
          ]
        },
        {
          "interpretation": "Which engineering firm and civil engineers have been involved in projects at the intersection of Elm Street and Pine Avenue?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Engineering_Firm, Civil_Engineer FROM CivilEngineers WHERE Intersection = 'Elm St & Pine Ave'"
          ]
        },
        {
          "interpretation": "What is the name of the civil engineer(s) working on the project at the intersection of Elm Street and Pine Avenue?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Civil_Engineer FROM CivilEngineers WHERE Intersection = 'Elm St & Pine Ave'"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Traffic/vague_2cols_designer/vague_2cols_designer.sqlite",
      "db_dump": "CREATE TABLE Accidents(\n    AccidentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    DateOfAccident DATE,\n    TimeOfAccident TIME,\n    LocationText TEXT,\n    Latitude REAL,\n    Longitude REAL,\n    Severity TEXT);\nCREATE TABLE CivilEngineers (\n    ProjectID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Intersection TEXT,\n    Civil_Engineer TEXT,\n    Engineering_Firm TEXT,\n    StartDate DATE,\n    EndDate DATE,\n    Budget REAL);\nCREATE TABLE Drivers(\n    DriverID INTEGER PRIMARY KEY AUTOINCREMENT,\n    LicenseNumber TEXT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE PoliceReports(\n    ReportID INTEGER PRIMARY KEY AUTOINCREMENT,\n    DateReported DATE,\n    OfficerID INT,\n    AccidentID INT,\n    OffenseType TEXT,\n    Penalty TEXT);\nCREATE TABLE Roads(\n    RoadID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StreetName TEXT,\n    City TEXT,\n    State TEXT,\n    ZipCode INT);\nCREATE TABLE VehicleTypes(\n    TypeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Make TEXT,\n    Model TEXT,\n    Year INT);\n\nINSERT INTO \"Accidents\" (AccidentID,DateOfAccident,TimeOfAccident,LocationText,Latitude,Longitude,Severity) VALUES (1,'2021-08-01','10:30 AM','Main St & Oak Ave',40.0,-89.0,'Minor'),(2,'2021-08-02','11:15 AM','Elm St & Pine Ave',41.0,-90.0,'Moderate');\nINSERT INTO \"CivilEngineers\" (ProjectID,Intersection,Civil_Engineer,Engineering_Firm,StartDate,EndDate,Budget) VALUES (1,'Main St & Oak Ave','John Doe','ABC Engineering','2021-06-01','2021-09-30',500000.0),(2,'Elm St & Pine Ave','Jane Smith','XYZ Engineering','2021-07-01','2021-10-31',600000.0);\nINSERT INTO \"Drivers\" (DriverID,LicenseNumber,Name,Address,PhoneNumber) VALUES (1,'A1234CD','Alice Johnson','123 Main St, Springfield, IL','555-123-4567'),(2,'BCDEFGH','Bob Smith','456 Elm St, Chicago, IL','555-987-6543');\nINSERT INTO \"PoliceReports\" (ReportID,DateReported,OfficerID,AccidentID,OffenseType,Penalty) VALUES (1,'2021-08-01',1,1,'Speeding','Warning'),(2,'2021-08-02',2,2,'Running Red Light','$100 Fine');\nINSERT INTO \"Roads\" (RoadID,StreetName,City,State,ZipCode) VALUES (1,'Bridge St','Springfield','IL',62704),(2,'Parkway Dr','Chicago','IL',60616);\nINSERT INTO \"VehicleTypes\" (TypeID,Make,Model,Year) VALUES (1,'Toyota','Corolla',2018),(2,'Honda','Civic',2019);\n",
      "question": "Which civil engineer(s) work at the intersection of Elm Street and Pine Avenue?",
      "gold_queries": [
        "SELECT Civil_Engineer FROM CivilEngineers WHERE Intersection = 'Elm St & Pine Ave';"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What is the name of the civil engineer responsible for projects at the intersection of Elm Street and Pine Avenue?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Civil_Engineer FROM CivilEngineers WHERE Intersection = 'Elm St & Pine Ave'"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Traffic/vague_2cols_designer/vague_2cols_designer.sqlite",
      "db_dump": "CREATE TABLE Accidents(\n    AccidentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    DateOfAccident DATE,\n    TimeOfAccident TIME,\n    LocationText TEXT,\n    Latitude REAL,\n    Longitude REAL,\n    Severity TEXT);\nCREATE TABLE CivilEngineers (\n    ProjectID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Intersection TEXT,\n    Civil_Engineer TEXT,\n    Engineering_Firm TEXT,\n    StartDate DATE,\n    EndDate DATE,\n    Budget REAL);\nCREATE TABLE Drivers(\n    DriverID INTEGER PRIMARY KEY AUTOINCREMENT,\n    LicenseNumber TEXT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE PoliceReports(\n    ReportID INTEGER PRIMARY KEY AUTOINCREMENT,\n    DateReported DATE,\n    OfficerID INT,\n    AccidentID INT,\n    OffenseType TEXT,\n    Penalty TEXT);\nCREATE TABLE Roads(\n    RoadID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StreetName TEXT,\n    City TEXT,\n    State TEXT,\n    ZipCode INT);\nCREATE TABLE VehicleTypes(\n    TypeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Make TEXT,\n    Model TEXT,\n    Year INT);\n\nINSERT INTO \"Accidents\" (AccidentID,DateOfAccident,TimeOfAccident,LocationText,Latitude,Longitude,Severity) VALUES (1,'2021-08-01','10:30 AM','Main St & Oak Ave',40.0,-89.0,'Minor'),(2,'2021-08-02','11:15 AM','Elm St & Pine Ave',41.0,-90.0,'Moderate');\nINSERT INTO \"CivilEngineers\" (ProjectID,Intersection,Civil_Engineer,Engineering_Firm,StartDate,EndDate,Budget) VALUES (1,'Main St & Oak Ave','John Doe','ABC Engineering','2021-06-01','2021-09-30',500000.0),(2,'Elm St & Pine Ave','Jane Smith','XYZ Engineering','2021-07-01','2021-10-31',600000.0);\nINSERT INTO \"Drivers\" (DriverID,LicenseNumber,Name,Address,PhoneNumber) VALUES (1,'A1234CD','Alice Johnson','123 Main St, Springfield, IL','555-123-4567'),(2,'BCDEFGH','Bob Smith','456 Elm St, Chicago, IL','555-987-6543');\nINSERT INTO \"PoliceReports\" (ReportID,DateReported,OfficerID,AccidentID,OffenseType,Penalty) VALUES (1,'2021-08-01',1,1,'Speeding','Warning'),(2,'2021-08-02',2,2,'Running Red Light','$100 Fine');\nINSERT INTO \"Roads\" (RoadID,StreetName,City,State,ZipCode) VALUES (1,'Bridge St','Springfield','IL',62704),(2,'Parkway Dr','Chicago','IL',60616);\nINSERT INTO \"VehicleTypes\" (TypeID,Make,Model,Year) VALUES (1,'Toyota','Corolla',2018),(2,'Honda','Civic',2019);\n",
      "question": "Which engineering firm has the biggest budget?",
      "gold_queries": [
        "SELECT Engineering_Firm FROM CivilEngineers ORDER BY Budget DESC LIMIT 1;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Identify the engineering firm associated with the project having the largest budget allocation.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Engineering_Firm FROM CivilEngineers ORDER BY Budget DESC LIMIT 1"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Traffic/vague_2cols_designer/vague_2cols_designer.sqlite",
      "db_dump": "CREATE TABLE Accidents(\n    AccidentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    DateOfAccident DATE,\n    TimeOfAccident TIME,\n    LocationText TEXT,\n    Latitude REAL,\n    Longitude REAL,\n    Severity TEXT);\nCREATE TABLE CivilEngineers (\n    ProjectID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Intersection TEXT,\n    Civil_Engineer TEXT,\n    Engineering_Firm TEXT,\n    StartDate DATE,\n    EndDate DATE,\n    Budget REAL);\nCREATE TABLE Drivers(\n    DriverID INTEGER PRIMARY KEY AUTOINCREMENT,\n    LicenseNumber TEXT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE PoliceReports(\n    ReportID INTEGER PRIMARY KEY AUTOINCREMENT,\n    DateReported DATE,\n    OfficerID INT,\n    AccidentID INT,\n    OffenseType TEXT,\n    Penalty TEXT);\nCREATE TABLE Roads(\n    RoadID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StreetName TEXT,\n    City TEXT,\n    State TEXT,\n    ZipCode INT);\nCREATE TABLE VehicleTypes(\n    TypeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Make TEXT,\n    Model TEXT,\n    Year INT);\n\nINSERT INTO \"Accidents\" (AccidentID,DateOfAccident,TimeOfAccident,LocationText,Latitude,Longitude,Severity) VALUES (1,'2021-08-01','10:30 AM','Main St & Oak Ave',40.0,-89.0,'Minor'),(2,'2021-08-02','11:15 AM','Elm St & Pine Ave',41.0,-90.0,'Moderate');\nINSERT INTO \"CivilEngineers\" (ProjectID,Intersection,Civil_Engineer,Engineering_Firm,StartDate,EndDate,Budget) VALUES (1,'Main St & Oak Ave','John Doe','ABC Engineering','2021-06-01','2021-09-30',500000.0),(2,'Elm St & Pine Ave','Jane Smith','XYZ Engineering','2021-07-01','2021-10-31',600000.0);\nINSERT INTO \"Drivers\" (DriverID,LicenseNumber,Name,Address,PhoneNumber) VALUES (1,'A1234CD','Alice Johnson','123 Main St, Springfield, IL','555-123-4567'),(2,'BCDEFGH','Bob Smith','456 Elm St, Chicago, IL','555-987-6543');\nINSERT INTO \"PoliceReports\" (ReportID,DateReported,OfficerID,AccidentID,OffenseType,Penalty) VALUES (1,'2021-08-01',1,1,'Speeding','Warning'),(2,'2021-08-02',2,2,'Running Red Light','$100 Fine');\nINSERT INTO \"Roads\" (RoadID,StreetName,City,State,ZipCode) VALUES (1,'Bridge St','Springfield','IL',62704),(2,'Parkway Dr','Chicago','IL',60616);\nINSERT INTO \"VehicleTypes\" (TypeID,Make,Model,Year) VALUES (1,'Toyota','Corolla',2018),(2,'Honda','Civic',2019);\n",
      "question": "Who works at the intersection of Elm Street and Pine Avenue?",
      "gold_queries": [
        "SELECT Civil_Engineer FROM CivilEngineers WHERE Intersection = 'Elm St & Pine Ave';",
        "SELECT Engineering_Firm FROM CivilEngineers WHERE Intersection = 'Elm St & Pine Ave';",
        "SELECT Civil_Engineer, Engineering_Firm FROM CivilEngineers WHERE Intersection = 'Elm St & Pine Ave';"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Someone who works on road construction",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Civil_Engineer, Engineering_Firm FROM CivilEngineers"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Traffic/vague_2cols_designer/vague_2cols_designer.sqlite",
      "db_dump": "CREATE TABLE Accidents(\n    AccidentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    DateOfAccident DATE,\n    TimeOfAccident TIME,\n    LocationText TEXT,\n    Latitude REAL,\n    Longitude REAL,\n    Severity TEXT);\nCREATE TABLE CivilEngineers (\n    ProjectID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Intersection TEXT,\n    Civil_Engineer TEXT,\n    Engineering_Firm TEXT,\n    StartDate DATE,\n    EndDate DATE,\n    Budget REAL);\nCREATE TABLE Drivers(\n    DriverID INTEGER PRIMARY KEY AUTOINCREMENT,\n    LicenseNumber TEXT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE PoliceReports(\n    ReportID INTEGER PRIMARY KEY AUTOINCREMENT,\n    DateReported DATE,\n    OfficerID INT,\n    AccidentID INT,\n    OffenseType TEXT,\n    Penalty TEXT);\nCREATE TABLE Roads(\n    RoadID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StreetName TEXT,\n    City TEXT,\n    State TEXT,\n    ZipCode INT);\nCREATE TABLE VehicleTypes(\n    TypeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Make TEXT,\n    Model TEXT,\n    Year INT);\n\nINSERT INTO \"Accidents\" (AccidentID,DateOfAccident,TimeOfAccident,LocationText,Latitude,Longitude,Severity) VALUES (1,'2021-08-01','10:30 AM','Main St & Oak Ave',40.0,-89.0,'Minor'),(2,'2021-08-02','11:15 AM','Elm St & Pine Ave',41.0,-90.0,'Moderate');\nINSERT INTO \"CivilEngineers\" (ProjectID,Intersection,Civil_Engineer,Engineering_Firm,StartDate,EndDate,Budget) VALUES (1,'Main St & Oak Ave','John Doe','ABC Engineering','2021-06-01','2021-09-30',500000.0),(2,'Elm St & Pine Ave','Jane Smith','XYZ Engineering','2021-07-01','2021-10-31',600000.0);\nINSERT INTO \"Drivers\" (DriverID,LicenseNumber,Name,Address,PhoneNumber) VALUES (1,'A1234CD','Alice Johnson','123 Main St, Springfield, IL','555-123-4567'),(2,'BCDEFGH','Bob Smith','456 Elm St, Chicago, IL','555-987-6543');\nINSERT INTO \"PoliceReports\" (ReportID,DateReported,OfficerID,AccidentID,OffenseType,Penalty) VALUES (1,'2021-08-01',1,1,'Speeding','Warning'),(2,'2021-08-02',2,2,'Running Red Light','$100 Fine');\nINSERT INTO \"Roads\" (RoadID,StreetName,City,State,ZipCode) VALUES (1,'Bridge St','Springfield','IL',62704),(2,'Parkway Dr','Chicago','IL',60616);\nINSERT INTO \"VehicleTypes\" (TypeID,Make,Model,Year) VALUES (1,'Toyota','Corolla',2018),(2,'Honda','Civic',2019);\n",
      "question": "Which civil engineer works in the company with the biggest budget?",
      "gold_queries": [
        "SELECT Civil_Engineer FROM CivilEngineers ORDER BY Budget DESC LIMIT 1;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Which projects have the largest budget, and who are the civil engineers associated with them?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Civil_Engineer, Engineering_Firm, Budget FROM CivilEngineers WHERE Budget = (SELECT MAX(Budget) FROM CivilEngineers)"
          ]
        },
        {
          "interpretation": "What is the budget of each project, and which civil engineer has the project with the highest budget?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Engineering_Firm, Budget FROM CivilEngineers ORDER BY Budget DESC"
          ]
        },
        {
          "interpretation": "Which civil engineer is associated with the project having the maximum budget?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Civil_Engineer FROM CivilEngineers WHERE Budget = (SELECT MAX(Budget) FROM CivilEngineers)"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Traffic/vague_2cols_designer/vague_2cols_designer.sqlite",
      "db_dump": "CREATE TABLE Accidents(\n    AccidentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    DateOfAccident DATE,\n    TimeOfAccident TIME,\n    LocationText TEXT,\n    Latitude REAL,\n    Longitude REAL,\n    Severity TEXT);\nCREATE TABLE CivilEngineers (\n    ProjectID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Intersection TEXT,\n    Civil_Engineer TEXT,\n    Engineering_Firm TEXT,\n    StartDate DATE,\n    EndDate DATE,\n    Budget REAL);\nCREATE TABLE Drivers(\n    DriverID INTEGER PRIMARY KEY AUTOINCREMENT,\n    LicenseNumber TEXT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE PoliceReports(\n    ReportID INTEGER PRIMARY KEY AUTOINCREMENT,\n    DateReported DATE,\n    OfficerID INT,\n    AccidentID INT,\n    OffenseType TEXT,\n    Penalty TEXT);\nCREATE TABLE Roads(\n    RoadID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StreetName TEXT,\n    City TEXT,\n    State TEXT,\n    ZipCode INT);\nCREATE TABLE VehicleTypes(\n    TypeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Make TEXT,\n    Model TEXT,\n    Year INT);\n\nINSERT INTO \"Accidents\" (AccidentID,DateOfAccident,TimeOfAccident,LocationText,Latitude,Longitude,Severity) VALUES (1,'2021-08-01','10:30 AM','Main St & Oak Ave',40.0,-89.0,'Minor'),(2,'2021-08-02','11:15 AM','Elm St & Pine Ave',41.0,-90.0,'Moderate');\nINSERT INTO \"CivilEngineers\" (ProjectID,Intersection,Civil_Engineer,Engineering_Firm,StartDate,EndDate,Budget) VALUES (1,'Main St & Oak Ave','John Doe','ABC Engineering','2021-06-01','2021-09-30',500000.0),(2,'Elm St & Pine Ave','Jane Smith','XYZ Engineering','2021-07-01','2021-10-31',600000.0);\nINSERT INTO \"Drivers\" (DriverID,LicenseNumber,Name,Address,PhoneNumber) VALUES (1,'A1234CD','Alice Johnson','123 Main St, Springfield, IL','555-123-4567'),(2,'BCDEFGH','Bob Smith','456 Elm St, Chicago, IL','555-987-6543');\nINSERT INTO \"PoliceReports\" (ReportID,DateReported,OfficerID,AccidentID,OffenseType,Penalty) VALUES (1,'2021-08-01',1,1,'Speeding','Warning'),(2,'2021-08-02',2,2,'Running Red Light','$100 Fine');\nINSERT INTO \"Roads\" (RoadID,StreetName,City,State,ZipCode) VALUES (1,'Bridge St','Springfield','IL',62704),(2,'Parkway Dr','Chicago','IL',60616);\nINSERT INTO \"VehicleTypes\" (TypeID,Make,Model,Year) VALUES (1,'Toyota','Corolla',2018),(2,'Honda','Civic',2019);\n",
      "question": "What engineering firm(s) are located at the intersection of Elm Street and Pine Avenue?",
      "gold_queries": [
        "SELECT Engineering_Firm FROM CivilEngineers WHERE Intersection = 'Elm St & Pine Ave';"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "The name(s) of the engineering firm(s) listed in the CivilEngineers table with an intersection of Elm Street and Pine Avenue.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Engineering_Firm FROM CivilEngineers WHERE Intersection = 'Elm St & Pine Ave'"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Traffic/vague_2cols_designer/vague_2cols_designer.sqlite",
      "db_dump": "CREATE TABLE Accidents(\n    AccidentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    DateOfAccident DATE,\n    TimeOfAccident TIME,\n    LocationText TEXT,\n    Latitude REAL,\n    Longitude REAL,\n    Severity TEXT);\nCREATE TABLE CivilEngineers (\n    ProjectID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Intersection TEXT,\n    Civil_Engineer TEXT,\n    Engineering_Firm TEXT,\n    StartDate DATE,\n    EndDate DATE,\n    Budget REAL);\nCREATE TABLE Drivers(\n    DriverID INTEGER PRIMARY KEY AUTOINCREMENT,\n    LicenseNumber TEXT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE PoliceReports(\n    ReportID INTEGER PRIMARY KEY AUTOINCREMENT,\n    DateReported DATE,\n    OfficerID INT,\n    AccidentID INT,\n    OffenseType TEXT,\n    Penalty TEXT);\nCREATE TABLE Roads(\n    RoadID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StreetName TEXT,\n    City TEXT,\n    State TEXT,\n    ZipCode INT);\nCREATE TABLE VehicleTypes(\n    TypeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Make TEXT,\n    Model TEXT,\n    Year INT);\n\nINSERT INTO \"Accidents\" (AccidentID,DateOfAccident,TimeOfAccident,LocationText,Latitude,Longitude,Severity) VALUES (1,'2021-08-01','10:30 AM','Main St & Oak Ave',40.0,-89.0,'Minor'),(2,'2021-08-02','11:15 AM','Elm St & Pine Ave',41.0,-90.0,'Moderate');\nINSERT INTO \"CivilEngineers\" (ProjectID,Intersection,Civil_Engineer,Engineering_Firm,StartDate,EndDate,Budget) VALUES (1,'Main St & Oak Ave','John Doe','ABC Engineering','2021-06-01','2021-09-30',500000.0),(2,'Elm St & Pine Ave','Jane Smith','XYZ Engineering','2021-07-01','2021-10-31',600000.0);\nINSERT INTO \"Drivers\" (DriverID,LicenseNumber,Name,Address,PhoneNumber) VALUES (1,'A1234CD','Alice Johnson','123 Main St, Springfield, IL','555-123-4567'),(2,'BCDEFGH','Bob Smith','456 Elm St, Chicago, IL','555-987-6543');\nINSERT INTO \"PoliceReports\" (ReportID,DateReported,OfficerID,AccidentID,OffenseType,Penalty) VALUES (1,'2021-08-01',1,1,'Speeding','Warning'),(2,'2021-08-02',2,2,'Running Red Light','$100 Fine');\nINSERT INTO \"Roads\" (RoadID,StreetName,City,State,ZipCode) VALUES (1,'Bridge St','Springfield','IL',62704),(2,'Parkway Dr','Chicago','IL',60616);\nINSERT INTO \"VehicleTypes\" (TypeID,Make,Model,Year) VALUES (1,'Toyota','Corolla',2018),(2,'Honda','Civic',2019);\n",
      "question": "Which civil engineer works for the company with the biggest budget and which company is it?",
      "gold_queries": [
        "SELECT Civil_Engineer, Engineering_Firm FROM CivilEngineers ORDER BY Budget DESC LIMIT 1;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What is the name of the civil engineer associated with the highest budget and the name of their company?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Civil_Engineer, Engineering_Firm FROM CivilEngineers WHERE Budget = (SELECT MAX(Budget) FROM CivilEngineers)"
          ]
        },
        {
          "interpretation": "Which company has the largest budget in the CivilEngineers table?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Engineering_Firm FROM CivilEngineers ORDER BY Budget DESC LIMIT 1"
          ]
        },
        {
          "interpretation": "Which civil engineer's project has the largest budget?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Civil_Engineer FROM CivilEngineers ORDER BY Budget DESC LIMIT 1"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Traffic/vague_2cols_designer/vague_2cols_designer.sqlite",
      "db_dump": "CREATE TABLE Accidents(\n    AccidentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    DateOfAccident DATE,\n    TimeOfAccident TIME,\n    LocationText TEXT,\n    Latitude REAL,\n    Longitude REAL,\n    Severity TEXT);\nCREATE TABLE CivilEngineers (\n    ProjectID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Intersection TEXT,\n    Civil_Engineer TEXT,\n    Engineering_Firm TEXT,\n    StartDate DATE,\n    EndDate DATE,\n    Budget REAL);\nCREATE TABLE Drivers(\n    DriverID INTEGER PRIMARY KEY AUTOINCREMENT,\n    LicenseNumber TEXT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE PoliceReports(\n    ReportID INTEGER PRIMARY KEY AUTOINCREMENT,\n    DateReported DATE,\n    OfficerID INT,\n    AccidentID INT,\n    OffenseType TEXT,\n    Penalty TEXT);\nCREATE TABLE Roads(\n    RoadID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StreetName TEXT,\n    City TEXT,\n    State TEXT,\n    ZipCode INT);\nCREATE TABLE VehicleTypes(\n    TypeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Make TEXT,\n    Model TEXT,\n    Year INT);\n\nINSERT INTO \"Accidents\" (AccidentID,DateOfAccident,TimeOfAccident,LocationText,Latitude,Longitude,Severity) VALUES (1,'2021-08-01','10:30 AM','Main St & Oak Ave',40.0,-89.0,'Minor'),(2,'2021-08-02','11:15 AM','Elm St & Pine Ave',41.0,-90.0,'Moderate');\nINSERT INTO \"CivilEngineers\" (ProjectID,Intersection,Civil_Engineer,Engineering_Firm,StartDate,EndDate,Budget) VALUES (1,'Main St & Oak Ave','John Doe','ABC Engineering','2021-06-01','2021-09-30',500000.0),(2,'Elm St & Pine Ave','Jane Smith','XYZ Engineering','2021-07-01','2021-10-31',600000.0);\nINSERT INTO \"Drivers\" (DriverID,LicenseNumber,Name,Address,PhoneNumber) VALUES (1,'A1234CD','Alice Johnson','123 Main St, Springfield, IL','555-123-4567'),(2,'BCDEFGH','Bob Smith','456 Elm St, Chicago, IL','555-987-6543');\nINSERT INTO \"PoliceReports\" (ReportID,DateReported,OfficerID,AccidentID,OffenseType,Penalty) VALUES (1,'2021-08-01',1,1,'Speeding','Warning'),(2,'2021-08-02',2,2,'Running Red Light','$100 Fine');\nINSERT INTO \"Roads\" (RoadID,StreetName,City,State,ZipCode) VALUES (1,'Bridge St','Springfield','IL',62704),(2,'Parkway Dr','Chicago','IL',60616);\nINSERT INTO \"VehicleTypes\" (TypeID,Make,Model,Year) VALUES (1,'Toyota','Corolla',2018),(2,'Honda','Civic',2019);\n",
      "question": "Who has the biggest budget?",
      "gold_queries": [
        "SELECT Civil_Engineer FROM CivilEngineers ORDER BY Budget DESC LIMIT 1;",
        "SELECT Engineering_Firm FROM CivilEngineers ORDER BY Budget DESC LIMIT 1;",
        "SELECT Civil_Engineer, Engineering_Firm FROM CivilEngineers ORDER BY Budget DESC LIMIT 1;"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Which CivilEngineer has the highest budget?",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Civil_Engineer FROM CivilEngineers ORDER BY Budget DESC LIMIT 1"
          ]
        },
        {
          "interpretation": "Which project has the largest budget?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Intersection FROM CivilEngineers ORDER BY Budget DESC LIMIT 1"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.3333333333333333,
        "precision": 0.5,
        "f1_score": 0.4,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2tabs_platform/vague_2tabs_platform.sqlite",
      "db_dump": "CREATE TABLE Article (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    content TEXT,\n    publishedDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    newsAgencyId INTEGER,\n    FOREIGN KEY(newsAgencyId) REFERENCES News_Agency(id)\n);\nCREATE TABLE Author (\n    id INTEGER PRIMARY KEY,\n    fullname TEXT);\nCREATE TABLE AuthorArticle (\n    authorId INTEGER,\n    articleId INTEGER,\n    FOREIGN KEY(authorId) REFERENCES Author(id),\n    FOREIGN KEY(articleId) REFERENCES Article(id)\n);\nCREATE TABLE Mobile_App (\n    id INTEGER PRIMARY KEY,\n    name TEXT);\nCREATE TABLE News_Agency (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    websiteId INTEGER,\n    mobileAppId INTEGER,\n    FOREIGN KEY(websiteId) REFERENCES Website(id),\n    FOREIGN KEY(mobileAppId) REFERENCES Mobile_App(id)\n);\nCREATE TABLE Website (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    url TEXT UNIQUE\n);\n\nINSERT INTO \"Article\" (id,title,content,publishedDate,newsAgencyId) VALUES (1,'Test Article 1','This is a test article.','2024-02-19 14:31:13',1),(2,'Test Article 2','Another test article.','2024-02-19 14:31:13',2),(3,'Test Article 3','Yet another test article.','2024-02-19 14:31:13',3),(4,'Test Article 4','And here is one more test article.','2024-02-19 14:31:13',4),(5,'Test Article 5','Last but not least, a test article!','2024-02-19 14:31:13',5);\nINSERT INTO \"Author\" (id,fullname) VALUES (1,'John Doe'),(2,'Jane Smith'),(3,'Michael Johnson'),(4,'Emily Williams'),(5,'David Brown');\nINSERT INTO \"AuthorArticle\" (authorId,articleId) VALUES (1,1),(2,2),(3,3),(4,4),(5,5);\nINSERT INTO \"Mobile_App\" (id,name) VALUES (1,'CNN App'),(2,'BBC App'),(3,'Guardian App'),(4,'Al Jazeera App'),(5,'NYT App');\nINSERT INTO \"News_Agency\" (id,name,websiteId,mobileAppId) VALUES (1,'CNN',1,1),(2,'BBC',2,2),(3,'The Guardian',3,3),(4,'Al Jazeera',4,4),(5,'New York Times',5,5);\nINSERT INTO \"Website\" (id,name,url) VALUES (1,'CNN','https://www.cnn.com'),(2,'BBC','https://www.bbc.co.uk'),(3,'The Guardian','https://www.theguardian.com'),(4,'Al Jazeera','https://www.aljazeera.com'),(5,'New York Times','https://www.nytimes.com');\n",
      "question": "Show all articles, mobile apps that they were published on and author names.",
      "gold_queries": [
        "SELECT\r\nArticle.title,\r\nMobile_App.name,\r\nAuthor.fullname\r\nFROM Article\r\nJOIN News_Agency ON News_Agency.id = Article.newsAgencyId\r\nJOIN AuthorArticle ON AuthorArticle.authorID = Article.id\r\nJOIN Author ON Author.id = AuthorArticle.authorID\r\nJOIN Mobile_App ON News_Agency.MobileAppID = Mobile_App.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Filter results to show only relevant columns: title, mobile app name, author fullname",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Article.title, Mobile_App.name, Author.fullname\nFROM Article\nJOIN News_Agency ON Article.newsAgencyId = News_Agency.id\nJOIN Mobile_App ON News_Agency.mobileAppId = Mobile_App.id\nJOIN AuthorArticle ON Article.id = AuthorArticle.articleId\nJOIN Author ON AuthorArticle.authorId = Author.id"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2tabs_platform/vague_2tabs_platform.sqlite",
      "db_dump": "CREATE TABLE Article (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    content TEXT,\n    publishedDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    newsAgencyId INTEGER,\n    FOREIGN KEY(newsAgencyId) REFERENCES News_Agency(id)\n);\nCREATE TABLE Author (\n    id INTEGER PRIMARY KEY,\n    fullname TEXT);\nCREATE TABLE AuthorArticle (\n    authorId INTEGER,\n    articleId INTEGER,\n    FOREIGN KEY(authorId) REFERENCES Author(id),\n    FOREIGN KEY(articleId) REFERENCES Article(id)\n);\nCREATE TABLE Mobile_App (\n    id INTEGER PRIMARY KEY,\n    name TEXT);\nCREATE TABLE News_Agency (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    websiteId INTEGER,\n    mobileAppId INTEGER,\n    FOREIGN KEY(websiteId) REFERENCES Website(id),\n    FOREIGN KEY(mobileAppId) REFERENCES Mobile_App(id)\n);\nCREATE TABLE Website (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    url TEXT UNIQUE\n);\n\nINSERT INTO \"Article\" (id,title,content,publishedDate,newsAgencyId) VALUES (1,'Test Article 1','This is a test article.','2024-02-19 14:31:13',1),(2,'Test Article 2','Another test article.','2024-02-19 14:31:13',2),(3,'Test Article 3','Yet another test article.','2024-02-19 14:31:13',3),(4,'Test Article 4','And here is one more test article.','2024-02-19 14:31:13',4),(5,'Test Article 5','Last but not least, a test article!','2024-02-19 14:31:13',5);\nINSERT INTO \"Author\" (id,fullname) VALUES (1,'John Doe'),(2,'Jane Smith'),(3,'Michael Johnson'),(4,'Emily Williams'),(5,'David Brown');\nINSERT INTO \"AuthorArticle\" (authorId,articleId) VALUES (1,1),(2,2),(3,3),(4,4),(5,5);\nINSERT INTO \"Mobile_App\" (id,name) VALUES (1,'CNN App'),(2,'BBC App'),(3,'Guardian App'),(4,'Al Jazeera App'),(5,'NYT App');\nINSERT INTO \"News_Agency\" (id,name,websiteId,mobileAppId) VALUES (1,'CNN',1,1),(2,'BBC',2,2),(3,'The Guardian',3,3),(4,'Al Jazeera',4,4),(5,'New York Times',5,5);\nINSERT INTO \"Website\" (id,name,url) VALUES (1,'CNN','https://www.cnn.com'),(2,'BBC','https://www.bbc.co.uk'),(3,'The Guardian','https://www.theguardian.com'),(4,'Al Jazeera','https://www.aljazeera.com'),(5,'New York Times','https://www.nytimes.com');\n",
      "question": "List all the mobile apps with their published articles and dates.",
      "gold_queries": [
        "SELECT \r\nMobile_App.name,\r\nArticle.title,\r\nArticle.publishedDate\r\nFROM Mobile_App\r\nJOIN News_Agency ON News_Agency.id = Mobile_App.id\r\nJOIN Article ON Article.newsAgencyID = News_Agency.MobileAppID"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List all mobile apps and the titles, content, and dates published by authors who wrote articles associated with those apps.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT t3.name, t2.title, t2.content, t2.publishedDate \nFROM AuthorArticle AS t1 \nJOIN Article AS t2 ON t1.articleId = t2.id \nJOIN News_Agency AS t4 ON t2.newsAgencyId = t4.id \nJOIN Mobile_App AS t3 ON t4.mobileAppId = t3.id"
          ]
        },
        {
          "interpretation": "List all mobile apps, and for each app, retrieve the name of each news agency associated with it and the articles published by that news agency.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ma.name AS mobile_app_name, na.name AS news_agency_name, a.title AS article_title\nFROM Mobile_App ma\nJOIN News_Agency na ON ma.id = na.mobileAppId\nJOIN Article a ON na.id = a.newsAgencyId"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Journalism/vague_2tabs_platform/vague_2tabs_platform.sqlite",
      "db_dump": "CREATE TABLE Article (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    content TEXT,\n    publishedDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    newsAgencyId INTEGER,\n    FOREIGN KEY(newsAgencyId) REFERENCES News_Agency(id)\n);\nCREATE TABLE Author (\n    id INTEGER PRIMARY KEY,\n    fullname TEXT);\nCREATE TABLE AuthorArticle (\n    authorId INTEGER,\n    articleId INTEGER,\n    FOREIGN KEY(authorId) REFERENCES Author(id),\n    FOREIGN KEY(articleId) REFERENCES Article(id)\n);\nCREATE TABLE Mobile_App (\n    id INTEGER PRIMARY KEY,\n    name TEXT);\nCREATE TABLE News_Agency (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    websiteId INTEGER,\n    mobileAppId INTEGER,\n    FOREIGN KEY(websiteId) REFERENCES Website(id),\n    FOREIGN KEY(mobileAppId) REFERENCES Mobile_App(id)\n);\nCREATE TABLE Website (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    url TEXT UNIQUE\n);\n\nINSERT INTO \"Article\" (id,title,content,publishedDate,newsAgencyId) VALUES (1,'Test Article 1','This is a test article.','2024-02-19 14:31:13',1),(2,'Test Article 2','Another test article.','2024-02-19 14:31:13',2),(3,'Test Article 3','Yet another test article.','2024-02-19 14:31:13',3),(4,'Test Article 4','And here is one more test article.','2024-02-19 14:31:13',4),(5,'Test Article 5','Last but not least, a test article!','2024-02-19 14:31:13',5);\nINSERT INTO \"Author\" (id,fullname) VALUES (1,'John Doe'),(2,'Jane Smith'),(3,'Michael Johnson'),(4,'Emily Williams'),(5,'David Brown');\nINSERT INTO \"AuthorArticle\" (authorId,articleId) VALUES (1,1),(2,2),(3,3),(4,4),(5,5);\nINSERT INTO \"Mobile_App\" (id,name) VALUES (1,'CNN App'),(2,'BBC App'),(3,'Guardian App'),(4,'Al Jazeera App'),(5,'NYT App');\nINSERT INTO \"News_Agency\" (id,name,websiteId,mobileAppId) VALUES (1,'CNN',1,1),(2,'BBC',2,2),(3,'The Guardian',3,3),(4,'Al Jazeera',4,4),(5,'New York Times',5,5);\nINSERT INTO \"Website\" (id,name,url) VALUES (1,'CNN','https://www.cnn.com'),(2,'BBC','https://www.bbc.co.uk'),(3,'The Guardian','https://www.theguardian.com'),(4,'Al Jazeera','https://www.aljazeera.com'),(5,'New York Times','https://www.nytimes.com');\n",
      "question": "List all the websites, their mobile apps and their published articles and dates.",
      "gold_queries": [
        "SELECT \r\nWebsite.name,\r\nWebsite.url, Mobile_App.name,\r\nArticle.title,\r\nArticle.publishedDate\r\nFROM Website\r\nJOIN News_Agency ON News_Agency.id = Website.id\r\nJOIN Article ON Article.newsAgencyID = News_Agency.websiteID JOIN Mobile_App ON News_Agency.MobileAppID = Mobile_App.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List the name of each website, the mobile app associated with it, and the titles and publication dates of articles published by news agencies associated with that website.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT W.name AS Website, MA.name AS MobileApp, A.title AS ArticleTitle, A.publishedDate AS PublicationDate\nFROM Website W\nJOIN News_Agency NA ON W.id = NA.websiteId\nJOIN Mobile_App MA ON NA.mobileAppId = MA.id\nJOIN Article A ON NA.id = A.newsAgencyId"
          ]
        },
        {
          "interpretation": "List the URL, mobile app name, article title, and published date for every website.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Website.url, Mobile_App.name, Article.title, Article.publishedDate \nFROM Website \nJOIN News_Agency ON Website.id = News_Agency.websiteId \nJOIN Mobile_App ON News_Agency.mobileAppId = Mobile_App.id \nJOIN Article ON News_Agency.id = Article.newsAgencyId"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Journalism/vague_2tabs_platform/vague_2tabs_platform.sqlite",
      "db_dump": "CREATE TABLE Article (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    content TEXT,\n    publishedDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    newsAgencyId INTEGER,\n    FOREIGN KEY(newsAgencyId) REFERENCES News_Agency(id)\n);\nCREATE TABLE Author (\n    id INTEGER PRIMARY KEY,\n    fullname TEXT);\nCREATE TABLE AuthorArticle (\n    authorId INTEGER,\n    articleId INTEGER,\n    FOREIGN KEY(authorId) REFERENCES Author(id),\n    FOREIGN KEY(articleId) REFERENCES Article(id)\n);\nCREATE TABLE Mobile_App (\n    id INTEGER PRIMARY KEY,\n    name TEXT);\nCREATE TABLE News_Agency (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    websiteId INTEGER,\n    mobileAppId INTEGER,\n    FOREIGN KEY(websiteId) REFERENCES Website(id),\n    FOREIGN KEY(mobileAppId) REFERENCES Mobile_App(id)\n);\nCREATE TABLE Website (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    url TEXT UNIQUE\n);\n\nINSERT INTO \"Article\" (id,title,content,publishedDate,newsAgencyId) VALUES (1,'Test Article 1','This is a test article.','2024-02-19 14:31:13',1),(2,'Test Article 2','Another test article.','2024-02-19 14:31:13',2),(3,'Test Article 3','Yet another test article.','2024-02-19 14:31:13',3),(4,'Test Article 4','And here is one more test article.','2024-02-19 14:31:13',4),(5,'Test Article 5','Last but not least, a test article!','2024-02-19 14:31:13',5);\nINSERT INTO \"Author\" (id,fullname) VALUES (1,'John Doe'),(2,'Jane Smith'),(3,'Michael Johnson'),(4,'Emily Williams'),(5,'David Brown');\nINSERT INTO \"AuthorArticle\" (authorId,articleId) VALUES (1,1),(2,2),(3,3),(4,4),(5,5);\nINSERT INTO \"Mobile_App\" (id,name) VALUES (1,'CNN App'),(2,'BBC App'),(3,'Guardian App'),(4,'Al Jazeera App'),(5,'NYT App');\nINSERT INTO \"News_Agency\" (id,name,websiteId,mobileAppId) VALUES (1,'CNN',1,1),(2,'BBC',2,2),(3,'The Guardian',3,3),(4,'Al Jazeera',4,4),(5,'New York Times',5,5);\nINSERT INTO \"Website\" (id,name,url) VALUES (1,'CNN','https://www.cnn.com'),(2,'BBC','https://www.bbc.co.uk'),(3,'The Guardian','https://www.theguardian.com'),(4,'Al Jazeera','https://www.aljazeera.com'),(5,'New York Times','https://www.nytimes.com');\n",
      "question": "List all platforms and articles published there along with the published date.",
      "gold_queries": [
        "SELECT \r\nWebsite.name,\r\nWebsite.url,\r\nArticle.title,\r\nArticle.publishedDate\r\nFROM Website\r\nJOIN News_Agency ON News_Agency.id = Website.id\r\nJOIN Article ON Article.newsAgencyID = News_Agency.websiteID",
        "SELECT \r\nMobile_App.name,\r\nArticle.title,\r\nArticle.publishedDate\r\nFROM Mobile_App\r\nJOIN News_Agency ON News_Agency.id = Mobile_App.id\r\nJOIN Article ON Article.newsAgencyID = News_Agency.MobileAppID",
        "SELECT \r\nWebsite.name,\r\nWebsite.url, Mobile_App.name,\r\nArticle.title,\r\nArticle.publishedDate\r\nFROM Website\r\nJOIN News_Agency ON News_Agency.id = Website.id\r\nJOIN Article ON Article.newsAgencyID = News_Agency.websiteID JOIN Mobile_App ON News_Agency.MobileAppID = Mobile_App.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List all unique news agencies and the articles published by each along with the published date of the articles.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT News_Agency.name, Article.title, Article.publishedDate\nFROM News_Agency\nJOIN Article ON News_Agency.id = Article.newsAgencyId"
          ]
        },
        {
          "interpretation": "List all mobile apps and the articles published by news agencies associated with those apps along with the published date of the articles.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Mobile_App.name, Article.title, Article.publishedDate\nFROM Mobile_App\nJOIN News_Agency ON Mobile_App.id = News_Agency.mobileAppId\nJOIN Article ON News_Agency.id = Article.newsAgencyId"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.3333333333333333,
        "precision": 0.5,
        "f1_score": 0.4,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2tabs_platform/vague_2tabs_platform.sqlite",
      "db_dump": "CREATE TABLE Article (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    content TEXT,\n    publishedDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    newsAgencyId INTEGER,\n    FOREIGN KEY(newsAgencyId) REFERENCES News_Agency(id)\n);\nCREATE TABLE Author (\n    id INTEGER PRIMARY KEY,\n    fullname TEXT);\nCREATE TABLE AuthorArticle (\n    authorId INTEGER,\n    articleId INTEGER,\n    FOREIGN KEY(authorId) REFERENCES Author(id),\n    FOREIGN KEY(articleId) REFERENCES Article(id)\n);\nCREATE TABLE Mobile_App (\n    id INTEGER PRIMARY KEY,\n    name TEXT);\nCREATE TABLE News_Agency (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    websiteId INTEGER,\n    mobileAppId INTEGER,\n    FOREIGN KEY(websiteId) REFERENCES Website(id),\n    FOREIGN KEY(mobileAppId) REFERENCES Mobile_App(id)\n);\nCREATE TABLE Website (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    url TEXT UNIQUE\n);\n\nINSERT INTO \"Article\" (id,title,content,publishedDate,newsAgencyId) VALUES (1,'Test Article 1','This is a test article.','2024-02-19 14:31:13',1),(2,'Test Article 2','Another test article.','2024-02-19 14:31:13',2),(3,'Test Article 3','Yet another test article.','2024-02-19 14:31:13',3),(4,'Test Article 4','And here is one more test article.','2024-02-19 14:31:13',4),(5,'Test Article 5','Last but not least, a test article!','2024-02-19 14:31:13',5);\nINSERT INTO \"Author\" (id,fullname) VALUES (1,'John Doe'),(2,'Jane Smith'),(3,'Michael Johnson'),(4,'Emily Williams'),(5,'David Brown');\nINSERT INTO \"AuthorArticle\" (authorId,articleId) VALUES (1,1),(2,2),(3,3),(4,4),(5,5);\nINSERT INTO \"Mobile_App\" (id,name) VALUES (1,'CNN App'),(2,'BBC App'),(3,'Guardian App'),(4,'Al Jazeera App'),(5,'NYT App');\nINSERT INTO \"News_Agency\" (id,name,websiteId,mobileAppId) VALUES (1,'CNN',1,1),(2,'BBC',2,2),(3,'The Guardian',3,3),(4,'Al Jazeera',4,4),(5,'New York Times',5,5);\nINSERT INTO \"Website\" (id,name,url) VALUES (1,'CNN','https://www.cnn.com'),(2,'BBC','https://www.bbc.co.uk'),(3,'The Guardian','https://www.theguardian.com'),(4,'Al Jazeera','https://www.aljazeera.com'),(5,'New York Times','https://www.nytimes.com');\n",
      "question": "Show all articles, websites and mobile apps on which they were published, along with the author names.",
      "gold_queries": [
        "SELECT\r\nArticle.title,\r\nWebsite.name, Website.url, Mobile_App.name,\r\nAuthor.fullname\r\nFROM Article\r\nJOIN News_Agency ON News_Agency.id = Article.newsAgencyId\r\nJOIN AuthorArticle ON AuthorArticle.authorID = Article.id\r\nJOIN Author ON Author.id = AuthorArticle.authorID\r\nJOIN Website ON News_Agency.websiteID = Website.id JOIN Mobile_App ON News_Agency.MobileAppID = Mobile_App.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Identify each published article and its corresponding website, mobile app, and author information.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    Article.title, \n    Website.url AS website, \n    Mobile_App.name AS mobile_app, \n    Author.fullname AS author\nFROM \n    Article\nJOIN \n    News_Agency ON Article.newsAgencyId = News_Agency.id\nJOIN \n    Website ON News_Agency.websiteId = Website.id\nJOIN \n    Mobile_App ON News_Agency.mobileAppId = Mobile_App.id\nJOIN \n    AuthorArticle ON Article.id = AuthorArticle.articleId\nJOIN \n    Author ON AuthorArticle.authorId = Author.id"
          ]
        },
        {
          "interpretation": "Select distinct a.id, a.title, w.name as websiteName, ma.name as mobileAppName, au.fullname as authorName from Article a",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT a.id, a.title, w.name AS websiteName, ma.name AS mobileAppName, au.fullname AS authorName \nFROM Article a\nJOIN News_Agency na ON a.newsAgencyId = na.id\nJOIN Website w ON na.websiteId = w.id\nJOIN Mobile_App ma ON na.mobileAppId = ma.id\nJOIN AuthorArticle aa ON a.id = aa.articleId\nJOIN Author au ON aa.authorId = au.id"
          ]
        },
        {
          "interpretation": "Retrieve all article records, linked to their respective news agencies, websites, mobile apps, and authors.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    Article.id,\n    Article.title,\n    Article.content,\n    Article.publishedDate,\n    News_Agency.name AS newsAgencyName,\n    Website.name AS websiteName,\n    Mobile_App.name AS mobileAppName,\n    Author.fullname AS authorName\nFROM \n    Article\nJOIN \n    News_Agency ON Article.newsAgencyId = News_Agency.id\nJOIN \n    Website ON News_Agency.websiteId = Website.id\nJOIN \n    Mobile_App ON News_Agency.mobileAppId = Mobile_App.id\nJOIN \n    AuthorArticle ON Article.id = AuthorArticle.articleId\nJOIN \n    Author ON AuthorArticle.authorId = Author.id"
          ]
        },
        {
          "interpretation": "List all articles with their associated websites, mobile apps, and authors",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT a.title, w.name AS website, m.name AS mobile_app, au.fullname AS author\nFROM Article a\nJOIN News_Agency na ON a.newsAgencyId = na.id\nJOIN Website w ON na.websiteId = w.id\nJOIN Mobile_App m ON na.mobileAppId = m.id\nJOIN AuthorArticle aa ON a.id = aa.articleId\nJOIN Author au ON aa.authorId = au.id"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Journalism/vague_2tabs_platform/vague_2tabs_platform.sqlite",
      "db_dump": "CREATE TABLE Article (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    content TEXT,\n    publishedDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    newsAgencyId INTEGER,\n    FOREIGN KEY(newsAgencyId) REFERENCES News_Agency(id)\n);\nCREATE TABLE Author (\n    id INTEGER PRIMARY KEY,\n    fullname TEXT);\nCREATE TABLE AuthorArticle (\n    authorId INTEGER,\n    articleId INTEGER,\n    FOREIGN KEY(authorId) REFERENCES Author(id),\n    FOREIGN KEY(articleId) REFERENCES Article(id)\n);\nCREATE TABLE Mobile_App (\n    id INTEGER PRIMARY KEY,\n    name TEXT);\nCREATE TABLE News_Agency (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    websiteId INTEGER,\n    mobileAppId INTEGER,\n    FOREIGN KEY(websiteId) REFERENCES Website(id),\n    FOREIGN KEY(mobileAppId) REFERENCES Mobile_App(id)\n);\nCREATE TABLE Website (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    url TEXT UNIQUE\n);\n\nINSERT INTO \"Article\" (id,title,content,publishedDate,newsAgencyId) VALUES (1,'Test Article 1','This is a test article.','2024-02-19 14:31:13',1),(2,'Test Article 2','Another test article.','2024-02-19 14:31:13',2),(3,'Test Article 3','Yet another test article.','2024-02-19 14:31:13',3),(4,'Test Article 4','And here is one more test article.','2024-02-19 14:31:13',4),(5,'Test Article 5','Last but not least, a test article!','2024-02-19 14:31:13',5);\nINSERT INTO \"Author\" (id,fullname) VALUES (1,'John Doe'),(2,'Jane Smith'),(3,'Michael Johnson'),(4,'Emily Williams'),(5,'David Brown');\nINSERT INTO \"AuthorArticle\" (authorId,articleId) VALUES (1,1),(2,2),(3,3),(4,4),(5,5);\nINSERT INTO \"Mobile_App\" (id,name) VALUES (1,'CNN App'),(2,'BBC App'),(3,'Guardian App'),(4,'Al Jazeera App'),(5,'NYT App');\nINSERT INTO \"News_Agency\" (id,name,websiteId,mobileAppId) VALUES (1,'CNN',1,1),(2,'BBC',2,2),(3,'The Guardian',3,3),(4,'Al Jazeera',4,4),(5,'New York Times',5,5);\nINSERT INTO \"Website\" (id,name,url) VALUES (1,'CNN','https://www.cnn.com'),(2,'BBC','https://www.bbc.co.uk'),(3,'The Guardian','https://www.theguardian.com'),(4,'Al Jazeera','https://www.aljazeera.com'),(5,'New York Times','https://www.nytimes.com');\n",
      "question": "Show all articles, websites that they were published on and author names.",
      "gold_queries": [
        "SELECT\r\nArticle.title,\r\nWebsite.name,Website.url,\r\nAuthor.fullname\r\nFROM Article\r\nJOIN News_Agency ON News_Agency.id = Article.newsAgencyId\r\nJOIN AuthorArticle ON AuthorArticle.authorID = Article.id\r\nJOIN Author ON Author.id = AuthorArticle.authorID\r\nJOIN Website ON News_Agency.websiteID = Website.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List Article.title, Website.name, Author.fullname where Article published by a News_Agency website",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Article.title, Website.name, Author.fullname\nFROM Article\nJOIN News_Agency ON Article.newsAgencyId = News_Agency.id\nJOIN Website ON News_Agency.websiteId = Website.id\nJOIN AuthorArticle ON Article.id = AuthorArticle.articleId\nJOIN Author ON AuthorArticle.authorId = Author.id"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Journalism/vague_2tabs_platform/vague_2tabs_platform.sqlite",
      "db_dump": "CREATE TABLE Article (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    content TEXT,\n    publishedDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    newsAgencyId INTEGER,\n    FOREIGN KEY(newsAgencyId) REFERENCES News_Agency(id)\n);\nCREATE TABLE Author (\n    id INTEGER PRIMARY KEY,\n    fullname TEXT);\nCREATE TABLE AuthorArticle (\n    authorId INTEGER,\n    articleId INTEGER,\n    FOREIGN KEY(authorId) REFERENCES Author(id),\n    FOREIGN KEY(articleId) REFERENCES Article(id)\n);\nCREATE TABLE Mobile_App (\n    id INTEGER PRIMARY KEY,\n    name TEXT);\nCREATE TABLE News_Agency (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    websiteId INTEGER,\n    mobileAppId INTEGER,\n    FOREIGN KEY(websiteId) REFERENCES Website(id),\n    FOREIGN KEY(mobileAppId) REFERENCES Mobile_App(id)\n);\nCREATE TABLE Website (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    url TEXT UNIQUE\n);\n\nINSERT INTO \"Article\" (id,title,content,publishedDate,newsAgencyId) VALUES (1,'Test Article 1','This is a test article.','2024-02-19 14:31:13',1),(2,'Test Article 2','Another test article.','2024-02-19 14:31:13',2),(3,'Test Article 3','Yet another test article.','2024-02-19 14:31:13',3),(4,'Test Article 4','And here is one more test article.','2024-02-19 14:31:13',4),(5,'Test Article 5','Last but not least, a test article!','2024-02-19 14:31:13',5);\nINSERT INTO \"Author\" (id,fullname) VALUES (1,'John Doe'),(2,'Jane Smith'),(3,'Michael Johnson'),(4,'Emily Williams'),(5,'David Brown');\nINSERT INTO \"AuthorArticle\" (authorId,articleId) VALUES (1,1),(2,2),(3,3),(4,4),(5,5);\nINSERT INTO \"Mobile_App\" (id,name) VALUES (1,'CNN App'),(2,'BBC App'),(3,'Guardian App'),(4,'Al Jazeera App'),(5,'NYT App');\nINSERT INTO \"News_Agency\" (id,name,websiteId,mobileAppId) VALUES (1,'CNN',1,1),(2,'BBC',2,2),(3,'The Guardian',3,3),(4,'Al Jazeera',4,4),(5,'New York Times',5,5);\nINSERT INTO \"Website\" (id,name,url) VALUES (1,'CNN','https://www.cnn.com'),(2,'BBC','https://www.bbc.co.uk'),(3,'The Guardian','https://www.theguardian.com'),(4,'Al Jazeera','https://www.aljazeera.com'),(5,'New York Times','https://www.nytimes.com');\n",
      "question": "Show all articles, platforms that they were published on and author name.",
      "gold_queries": [
        "SELECT\r\nArticle.title,\r\nWebsite.name,Website.url,\r\nAuthor.fullname\r\nFROM Article\r\nJOIN News_Agency ON News_Agency.id = Article.newsAgencyId\r\nJOIN AuthorArticle ON AuthorArticle.authorID = Article.id\r\nJOIN Author ON Author.id = AuthorArticle.authorID\r\nJOIN Website ON News_Agency.websiteID = Website.id",
        "SELECT\r\nArticle.title,\r\nMobile_App.name,\r\nAuthor.fullname\r\nFROM Article\r\nJOIN News_Agency ON News_Agency.id = Article.newsAgencyId\r\nJOIN AuthorArticle ON AuthorArticle.authorID = Article.id\r\nJOIN Author ON Author.id = AuthorArticle.authorID\r\nJOIN Mobile_App ON News_Agency.MobileAppID = Mobile_App.id",
        "SELECT\r\nArticle.title,\r\nWebsite.name, Website.url, Mobile_App.name,\r\nAuthor.fullname\r\nFROM Article\r\nJOIN News_Agency ON News_Agency.id = Article.newsAgencyId\r\nJOIN AuthorArticle ON AuthorArticle.authorID = Article.id\r\nJOIN Author ON Author.id = AuthorArticle.authorID\r\nJOIN Website ON News_Agency.websiteID = Website.id JOIN Mobile_App ON News_Agency.MobileAppID = Mobile_App.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Select Article.title, News_Agency.name, Author.fullname",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Article.title, News_Agency.name, Author.fullname\nFROM Article\nJOIN News_Agency ON Article.newsAgencyId = News_Agency.id\nJOIN AuthorArticle ON Article.id = AuthorArticle.articleId\nJOIN Author ON AuthorArticle.authorId = Author.id"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Journalism/vague_2tabs_platform/vague_2tabs_platform.sqlite",
      "db_dump": "CREATE TABLE Article (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    content TEXT,\n    publishedDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    newsAgencyId INTEGER,\n    FOREIGN KEY(newsAgencyId) REFERENCES News_Agency(id)\n);\nCREATE TABLE Author (\n    id INTEGER PRIMARY KEY,\n    fullname TEXT);\nCREATE TABLE AuthorArticle (\n    authorId INTEGER,\n    articleId INTEGER,\n    FOREIGN KEY(authorId) REFERENCES Author(id),\n    FOREIGN KEY(articleId) REFERENCES Article(id)\n);\nCREATE TABLE Mobile_App (\n    id INTEGER PRIMARY KEY,\n    name TEXT);\nCREATE TABLE News_Agency (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    websiteId INTEGER,\n    mobileAppId INTEGER,\n    FOREIGN KEY(websiteId) REFERENCES Website(id),\n    FOREIGN KEY(mobileAppId) REFERENCES Mobile_App(id)\n);\nCREATE TABLE Website (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    url TEXT UNIQUE\n);\n\nINSERT INTO \"Article\" (id,title,content,publishedDate,newsAgencyId) VALUES (1,'Test Article 1','This is a test article.','2024-02-19 14:31:13',1),(2,'Test Article 2','Another test article.','2024-02-19 14:31:13',2),(3,'Test Article 3','Yet another test article.','2024-02-19 14:31:13',3),(4,'Test Article 4','And here is one more test article.','2024-02-19 14:31:13',4),(5,'Test Article 5','Last but not least, a test article!','2024-02-19 14:31:13',5);\nINSERT INTO \"Author\" (id,fullname) VALUES (1,'John Doe'),(2,'Jane Smith'),(3,'Michael Johnson'),(4,'Emily Williams'),(5,'David Brown');\nINSERT INTO \"AuthorArticle\" (authorId,articleId) VALUES (1,1),(2,2),(3,3),(4,4),(5,5);\nINSERT INTO \"Mobile_App\" (id,name) VALUES (1,'CNN App'),(2,'BBC App'),(3,'Guardian App'),(4,'Al Jazeera App'),(5,'NYT App');\nINSERT INTO \"News_Agency\" (id,name,websiteId,mobileAppId) VALUES (1,'CNN',1,1),(2,'BBC',2,2),(3,'The Guardian',3,3),(4,'Al Jazeera',4,4),(5,'New York Times',5,5);\nINSERT INTO \"Website\" (id,name,url) VALUES (1,'CNN','https://www.cnn.com'),(2,'BBC','https://www.bbc.co.uk'),(3,'The Guardian','https://www.theguardian.com'),(4,'Al Jazeera','https://www.aljazeera.com'),(5,'New York Times','https://www.nytimes.com');\n",
      "question": "List all the websites with their published articles and dates.",
      "gold_queries": [
        "SELECT \r\nWebsite.name,\r\nWebsite.url,\r\nArticle.title,\r\nArticle.publishedDate\r\nFROM Website\r\nJOIN News_Agency ON News_Agency.id = Website.id\r\nJOIN Article ON Article.newsAgencyID = News_Agency.websiteID"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Retrieve the website associated with each news agency and display a list of articles published by those news agencies, along with their publication dates.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT W.name, A.title, A.publishedDate\nFROM Article A\nJOIN News_Agency NA ON A.newsAgencyId = NA.id\nJOIN Website W ON NA.websiteId = W.id"
          ]
        },
        {
          "interpretation": "Show the name and URL of each website, and for each website, list the titles and publication dates of articles published by the news agencies linked to that website.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT w.name, w.url, a.title, a.publishedDate\nFROM Website w\nJOIN News_Agency na ON w.id = na.websiteId\nJOIN Article a ON na.id = a.newsAgencyId"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2tabs_editor/vague_2tabs_editor.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    content TEXT,\n    author_id INTEGER REFERENCES Authors(author_id),\n    reporter_id INTEGER REFERENCES Reporters(reporter_id),\n    final_draft_id INTEGER REFERENCES Final_Draft(id));\nCREATE TABLE Authors(\n    author_id INTEGER PRIMARY KEY,\n    fullname TEXT);\nCREATE TABLE Copy_Editor(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE);\nCREATE TABLE Final_Draft(\n    id INTEGER PRIMARY KEY,\n    managing_editor_id INTEGER REFERENCES Managing_Editor(id),\n    copy_editor_id INTEGER REFERENCES Copy_Editor(id));\nCREATE TABLE Managing_Editor(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE);\nCREATE TABLE Reporters(\n    reporter_id INTEGER PRIMARY KEY,\n    fullname TEXT);\n\nINSERT INTO \"Articles\" (id,title,content,author_id,reporter_id,final_draft_id) VALUES (1,'Breaking News Story','This is a news story about breaking news.',1,1,1),(2,'Feature on Local Business','A feature article about a local business.',2,2,2);\nINSERT INTO \"Authors\" (author_id,fullname) VALUES (1,'Alice Brown'),(2,'Charlie Green');\nINSERT INTO \"Copy_Editor\" (id,name,email) VALUES (1,'Mike Johnson','mike@example.com'),(2,'Emily Davis','emily@example.com');\nINSERT INTO \"Final_Draft\" (id,managing_editor_id,copy_editor_id) VALUES (1,1,1),(2,2,2);\nINSERT INTO \"Managing_Editor\" (id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com');\nINSERT INTO \"Reporters\" (reporter_id,fullname) VALUES (1,'David Black'),(2,'Eva White');\n",
      "question": "List all the article contents with their respective managing editor and reporter names",
      "gold_queries": [
        "SELECT\r\nArticles.content,\r\nManaging_Editor.name,\r\nReporters.fullname\r\nFROM Articles\r\nJOIN Final_Draft ON Final_Draft.id = Articles.final_draft_id\r\nJOIN Managing_Editor ON Managing_Editor.id = Final_Draft.managing_editor_id\r\nJOIN Reporters ON Reporters.reporter_id = Articles.reporter_id"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List the content of each article, along with the name of the managing editor who oversaw the corresponding final draft.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Articles.content, Managing_Editor.name\nFROM Articles\nJOIN Final_Draft ON Articles.final_draft_id = Final_Draft.id\nJOIN Managing_Editor ON Final_Draft.managing_editor_id = Managing_Editor.id"
          ]
        },
        {
          "interpretation": "List the content of each article, grouped by managing editor, and include a sublist of reporters associated with each sub-group.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT ME.name, A.content, R.fullname\nFROM Articles A\nJOIN Final_Draft FD ON A.final_draft_id = FD.id\nJOIN Managing_Editor ME ON FD.managing_editor_id = ME.id\nJOIN Reporters R ON A.reporter_id = R.reporter_id\nORDER BY ME.name, A.content, R.fullname"
          ]
        },
        {
          "interpretation": "List the content of each article, along with the name of the reporter who wrote it.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT content, fullname \nFROM Articles \nJOIN Reporters ON Articles.reporter_id = Reporters.reporter_id"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2tabs_editor/vague_2tabs_editor.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    content TEXT,\n    author_id INTEGER REFERENCES Authors(author_id),\n    reporter_id INTEGER REFERENCES Reporters(reporter_id),\n    final_draft_id INTEGER REFERENCES Final_Draft(id));\nCREATE TABLE Authors(\n    author_id INTEGER PRIMARY KEY,\n    fullname TEXT);\nCREATE TABLE Copy_Editor(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE);\nCREATE TABLE Final_Draft(\n    id INTEGER PRIMARY KEY,\n    managing_editor_id INTEGER REFERENCES Managing_Editor(id),\n    copy_editor_id INTEGER REFERENCES Copy_Editor(id));\nCREATE TABLE Managing_Editor(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE);\nCREATE TABLE Reporters(\n    reporter_id INTEGER PRIMARY KEY,\n    fullname TEXT);\n\nINSERT INTO \"Articles\" (id,title,content,author_id,reporter_id,final_draft_id) VALUES (1,'Breaking News Story','This is a news story about breaking news.',1,1,1),(2,'Feature on Local Business','A feature article about a local business.',2,2,2);\nINSERT INTO \"Authors\" (author_id,fullname) VALUES (1,'Alice Brown'),(2,'Charlie Green');\nINSERT INTO \"Copy_Editor\" (id,name,email) VALUES (1,'Mike Johnson','mike@example.com'),(2,'Emily Davis','emily@example.com');\nINSERT INTO \"Final_Draft\" (id,managing_editor_id,copy_editor_id) VALUES (1,1,1),(2,2,2);\nINSERT INTO \"Managing_Editor\" (id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com');\nINSERT INTO \"Reporters\" (reporter_id,fullname) VALUES (1,'David Black'),(2,'Eva White');\n",
      "question": "List all the articles with their respective editor and author names.",
      "gold_queries": [
        "SELECT\r\nArticles.title,\r\nManaging_Editor.name,\r\nAuthors.fullname\r\nFROM Articles\r\nJOIN Final_Draft ON Final_Draft.id = Articles.final_draft_id\r\nJOIN Managing_Editor ON Managing_Editor.id = Final_Draft.managing_editor_id\r\nJOIN Authors ON Authors.author_id = Articles.author_id",
        "SELECT\r\nArticles.title,\r\nCopy_Editor.name,\r\nAuthors.fullname\r\nFROM Articles\r\nJOIN Final_Draft ON Final_Draft.id = Articles.final_draft_id\r\nJOIN Copy_Editor ON Copy_Editor.id = Final_Draft.Copy_Editor_id\r\nJOIN Authors ON Authors.author_id = Articles.author_id",
        "SELECT\r\nArticles.title,\r\nManaging_Editor.name, Copy_Editor.name,\r\nAuthors.fullname\r\nFROM Articles\r\nJOIN Final_Draft ON Final_Draft.id = Articles.final_draft_id\r\nJOIN Managing_Editor ON Managing_Editor.id = Final_Draft.managing_editor_id\r\nJOIN Authors ON Authors.author_id = Articles.author_id JOIN Copy_Editor ON Copy_Editor.id = Final_Draft.Copy_Editor_id"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List all articles, and the names of the authors who wrote them.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Articles.title, Authors.fullname\nFROM Articles\nJOIN Authors ON Articles.author_id = Authors.author_id"
          ]
        },
        {
          "interpretation": "List all articles and both their author and reporter names.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Articles.title, Authors.fullname AS author_name, Reporters.fullname AS reporter_name \nFROM Articles \nJOIN Authors ON Articles.author_id = Authors.author_id \nJOIN Reporters ON Articles.reporter_id = Reporters.reporter_id"
          ]
        },
        {
          "interpretation": "List all articles and their associated managing editor.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.title, ME.name \nFROM Articles A \nJOIN Final_Draft FD ON A.final_draft_id = FD.id \nJOIN Managing_Editor ME ON FD.managing_editor_id = ME.id"
          ]
        },
        {
          "interpretation": "List all articles and their associated copy editor.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.title, CE.name \nFROM Articles A \nJOIN Final_Draft FD ON A.final_draft_id = FD.id \nJOIN Copy_Editor CE ON FD.copy_editor_id = CE.id"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Journalism/vague_2tabs_editor/vague_2tabs_editor.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    content TEXT,\n    author_id INTEGER REFERENCES Authors(author_id),\n    reporter_id INTEGER REFERENCES Reporters(reporter_id),\n    final_draft_id INTEGER REFERENCES Final_Draft(id));\nCREATE TABLE Authors(\n    author_id INTEGER PRIMARY KEY,\n    fullname TEXT);\nCREATE TABLE Copy_Editor(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE);\nCREATE TABLE Final_Draft(\n    id INTEGER PRIMARY KEY,\n    managing_editor_id INTEGER REFERENCES Managing_Editor(id),\n    copy_editor_id INTEGER REFERENCES Copy_Editor(id));\nCREATE TABLE Managing_Editor(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE);\nCREATE TABLE Reporters(\n    reporter_id INTEGER PRIMARY KEY,\n    fullname TEXT);\n\nINSERT INTO \"Articles\" (id,title,content,author_id,reporter_id,final_draft_id) VALUES (1,'Breaking News Story','This is a news story about breaking news.',1,1,1),(2,'Feature on Local Business','A feature article about a local business.',2,2,2);\nINSERT INTO \"Authors\" (author_id,fullname) VALUES (1,'Alice Brown'),(2,'Charlie Green');\nINSERT INTO \"Copy_Editor\" (id,name,email) VALUES (1,'Mike Johnson','mike@example.com'),(2,'Emily Davis','emily@example.com');\nINSERT INTO \"Final_Draft\" (id,managing_editor_id,copy_editor_id) VALUES (1,1,1),(2,2,2);\nINSERT INTO \"Managing_Editor\" (id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com');\nINSERT INTO \"Reporters\" (reporter_id,fullname) VALUES (1,'David Black'),(2,'Eva White');\n",
      "question": "List all the article contents with their respective copy editor and reporter names",
      "gold_queries": [
        "SELECT\r\nArticles.content,\r\nCopy_Editor.name,\r\nReporters.fullname\r\nFROM Articles\r\nJOIN Final_Draft ON Final_Draft.id = Articles.final_draft_id\r\nJOIN Copy_Editor ON Copy_Editor.id = Final_Draft.Copy_Editor_id\r\nJOIN Reporters ON Reporters.reporter_id = Articles.reporter_id"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Retrieve the text of each article, accompanied by the designated copy editor's name and the reporter who originally submitted it.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT A.content, CE.name, R.fullname\nFROM Articles A\nJOIN Final_Draft FD ON A.final_draft_id = FD.id\nJOIN Copy_Editor CE ON FD.copy_editor_id = CE.id\nJOIN Reporters R ON A.reporter_id = R.reporter_id"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2tabs_editor/vague_2tabs_editor.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    content TEXT,\n    author_id INTEGER REFERENCES Authors(author_id),\n    reporter_id INTEGER REFERENCES Reporters(reporter_id),\n    final_draft_id INTEGER REFERENCES Final_Draft(id));\nCREATE TABLE Authors(\n    author_id INTEGER PRIMARY KEY,\n    fullname TEXT);\nCREATE TABLE Copy_Editor(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE);\nCREATE TABLE Final_Draft(\n    id INTEGER PRIMARY KEY,\n    managing_editor_id INTEGER REFERENCES Managing_Editor(id),\n    copy_editor_id INTEGER REFERENCES Copy_Editor(id));\nCREATE TABLE Managing_Editor(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE);\nCREATE TABLE Reporters(\n    reporter_id INTEGER PRIMARY KEY,\n    fullname TEXT);\n\nINSERT INTO \"Articles\" (id,title,content,author_id,reporter_id,final_draft_id) VALUES (1,'Breaking News Story','This is a news story about breaking news.',1,1,1),(2,'Feature on Local Business','A feature article about a local business.',2,2,2);\nINSERT INTO \"Authors\" (author_id,fullname) VALUES (1,'Alice Brown'),(2,'Charlie Green');\nINSERT INTO \"Copy_Editor\" (id,name,email) VALUES (1,'Mike Johnson','mike@example.com'),(2,'Emily Davis','emily@example.com');\nINSERT INTO \"Final_Draft\" (id,managing_editor_id,copy_editor_id) VALUES (1,1,1),(2,2,2);\nINSERT INTO \"Managing_Editor\" (id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com');\nINSERT INTO \"Reporters\" (reporter_id,fullname) VALUES (1,'David Black'),(2,'Eva White');\n",
      "question": "Show me all available articles alongside their managing editors and their authors.",
      "gold_queries": [
        "SELECT\r\nArticles.title,\r\nManaging_Editor.name,\r\nAuthors.fullname\r\nFROM Articles\r\nJOIN Final_Draft ON Final_Draft.id = Articles.final_draft_id\r\nJOIN Managing_Editor ON Managing_Editor.id = Final_Draft.managing_editor_id\r\nJOIN Authors ON Authors.author_id = Articles.author_id"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List all Articles with their corresponding Author and Managing Editor.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Articles.title, Authors.fullname AS author_name, Managing_Editor.name AS managing_editor_name\nFROM Articles\nJOIN Authors ON Articles.author_id = Authors.author_id\nJOIN Final_Draft ON Articles.final_draft_id = Final_Draft.id\nJOIN Managing_Editor ON Final_Draft.managing_editor_id = Managing_Editor.id"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2tabs_editor/vague_2tabs_editor.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    content TEXT,\n    author_id INTEGER REFERENCES Authors(author_id),\n    reporter_id INTEGER REFERENCES Reporters(reporter_id),\n    final_draft_id INTEGER REFERENCES Final_Draft(id));\nCREATE TABLE Authors(\n    author_id INTEGER PRIMARY KEY,\n    fullname TEXT);\nCREATE TABLE Copy_Editor(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE);\nCREATE TABLE Final_Draft(\n    id INTEGER PRIMARY KEY,\n    managing_editor_id INTEGER REFERENCES Managing_Editor(id),\n    copy_editor_id INTEGER REFERENCES Copy_Editor(id));\nCREATE TABLE Managing_Editor(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE);\nCREATE TABLE Reporters(\n    reporter_id INTEGER PRIMARY KEY,\n    fullname TEXT);\n\nINSERT INTO \"Articles\" (id,title,content,author_id,reporter_id,final_draft_id) VALUES (1,'Breaking News Story','This is a news story about breaking news.',1,1,1),(2,'Feature on Local Business','A feature article about a local business.',2,2,2);\nINSERT INTO \"Authors\" (author_id,fullname) VALUES (1,'Alice Brown'),(2,'Charlie Green');\nINSERT INTO \"Copy_Editor\" (id,name,email) VALUES (1,'Mike Johnson','mike@example.com'),(2,'Emily Davis','emily@example.com');\nINSERT INTO \"Final_Draft\" (id,managing_editor_id,copy_editor_id) VALUES (1,1,1),(2,2,2);\nINSERT INTO \"Managing_Editor\" (id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com');\nINSERT INTO \"Reporters\" (reporter_id,fullname) VALUES (1,'David Black'),(2,'Eva White');\n",
      "question": "Show me all available articles alongside their managing and copy editors and their authors.",
      "gold_queries": [
        "SELECT\r\nArticles.title,\r\nManaging_Editor.name, Copy_Editor.name,\r\nAuthors.fullname\r\nFROM Articles\r\nJOIN Final_Draft ON Final_Draft.id = Articles.final_draft_id\r\nJOIN Managing_Editor ON Managing_Editor.id = Final_Draft.managing_editor_id\r\nJOIN Authors ON Authors.author_id = Articles.author_id JOIN Copy_Editor ON Copy_Editor.id = Final_Draft.Copy_Editor_id"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [],
      "num_unique_execution_results": 0,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0,
        "f1_score": 0,
        "num_queries": 0,
        "num_unique_queries": 0,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Journalism/vague_2tabs_editor/vague_2tabs_editor.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    content TEXT,\n    author_id INTEGER REFERENCES Authors(author_id),\n    reporter_id INTEGER REFERENCES Reporters(reporter_id),\n    final_draft_id INTEGER REFERENCES Final_Draft(id));\nCREATE TABLE Authors(\n    author_id INTEGER PRIMARY KEY,\n    fullname TEXT);\nCREATE TABLE Copy_Editor(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE);\nCREATE TABLE Final_Draft(\n    id INTEGER PRIMARY KEY,\n    managing_editor_id INTEGER REFERENCES Managing_Editor(id),\n    copy_editor_id INTEGER REFERENCES Copy_Editor(id));\nCREATE TABLE Managing_Editor(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE);\nCREATE TABLE Reporters(\n    reporter_id INTEGER PRIMARY KEY,\n    fullname TEXT);\n\nINSERT INTO \"Articles\" (id,title,content,author_id,reporter_id,final_draft_id) VALUES (1,'Breaking News Story','This is a news story about breaking news.',1,1,1),(2,'Feature on Local Business','A feature article about a local business.',2,2,2);\nINSERT INTO \"Authors\" (author_id,fullname) VALUES (1,'Alice Brown'),(2,'Charlie Green');\nINSERT INTO \"Copy_Editor\" (id,name,email) VALUES (1,'Mike Johnson','mike@example.com'),(2,'Emily Davis','emily@example.com');\nINSERT INTO \"Final_Draft\" (id,managing_editor_id,copy_editor_id) VALUES (1,1,1),(2,2,2);\nINSERT INTO \"Managing_Editor\" (id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com');\nINSERT INTO \"Reporters\" (reporter_id,fullname) VALUES (1,'David Black'),(2,'Eva White');\n",
      "question": "Show me all available articles alongside their copy editors and their authors.",
      "gold_queries": [
        "SELECT\r\nArticles.title,\r\nCopy_Editor.name,\r\nAuthors.fullname\r\nFROM Articles\r\nJOIN Final_Draft ON Final_Draft.id = Articles.final_draft_id\r\nJOIN Copy_Editor ON Copy_Editor.id = Final_Draft.Copy_Editor_id\r\nJOIN Authors ON Authors.author_id = Articles.author_id"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List the titles of all articles along with the names of the copy editors assigned to their final drafts and the full names of the authors who wrote those articles.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT a.title, c.name, au.fullname\nFROM Articles a\nJOIN Final_Draft f ON a.final_draft_id = f.id\nJOIN Copy_Editor c ON f.copy_editor_id = c.id\nJOIN Authors au ON a.author_id = au.author_id"
          ]
        },
        {
          "interpretation": "Retrieve all article data, including the names of the copy editors responsible for the final drafts and the full names of the authors.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Articles.id, Articles.title, Articles.content, Authors.fullname AS author_name, Copy_Editor.name AS copy_editor_name\nFROM Articles\nJOIN Authors ON Articles.author_id = Authors.author_id\nJOIN Final_Draft ON Articles.final_draft_id = Final_Draft.id\nJOIN Copy_Editor ON Final_Draft.copy_editor_id = Copy_Editor.id"
          ]
        },
        {
          "interpretation": "Display the complete information for each article, including the details of the associated copy editor and author.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.*, CE.name AS copy_editor_name, CE.email AS copy_editor_email, Au.fullname AS author_fullname\nFROM Articles A\nJOIN Final_Draft FD ON A.final_draft_id = FD.id\nJOIN Copy_Editor CE ON FD.copy_editor_id = CE.id\nJOIN Authors Au ON A.author_id = Au.author_id"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2tabs_editor/vague_2tabs_editor.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    content TEXT,\n    author_id INTEGER REFERENCES Authors(author_id),\n    reporter_id INTEGER REFERENCES Reporters(reporter_id),\n    final_draft_id INTEGER REFERENCES Final_Draft(id));\nCREATE TABLE Authors(\n    author_id INTEGER PRIMARY KEY,\n    fullname TEXT);\nCREATE TABLE Copy_Editor(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE);\nCREATE TABLE Final_Draft(\n    id INTEGER PRIMARY KEY,\n    managing_editor_id INTEGER REFERENCES Managing_Editor(id),\n    copy_editor_id INTEGER REFERENCES Copy_Editor(id));\nCREATE TABLE Managing_Editor(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE);\nCREATE TABLE Reporters(\n    reporter_id INTEGER PRIMARY KEY,\n    fullname TEXT);\n\nINSERT INTO \"Articles\" (id,title,content,author_id,reporter_id,final_draft_id) VALUES (1,'Breaking News Story','This is a news story about breaking news.',1,1,1),(2,'Feature on Local Business','A feature article about a local business.',2,2,2);\nINSERT INTO \"Authors\" (author_id,fullname) VALUES (1,'Alice Brown'),(2,'Charlie Green');\nINSERT INTO \"Copy_Editor\" (id,name,email) VALUES (1,'Mike Johnson','mike@example.com'),(2,'Emily Davis','emily@example.com');\nINSERT INTO \"Final_Draft\" (id,managing_editor_id,copy_editor_id) VALUES (1,1,1),(2,2,2);\nINSERT INTO \"Managing_Editor\" (id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com');\nINSERT INTO \"Reporters\" (reporter_id,fullname) VALUES (1,'David Black'),(2,'Eva White');\n",
      "question": "List all the article contents with their respective managing editor, copy editor and reporter names",
      "gold_queries": [
        "SELECT\r\nArticles.content,\r\nManaging_Editor.name, Copy_Editor.name,\r\nReporters.fullname\r\nFROM Articles\r\nJOIN Final_Draft ON Final_Draft.id = Articles.final_draft_id\r\nJOIN Managing_Editor ON Managing_Editor.id = Final_Draft.managing_editor_id\r\nJOIN Reporters ON Reporters.reporter_id = Articles.reporter_id JOIN Copy_Editor ON Copy_Editor.id = Final_Draft.Copy_Editor_id"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Present a list of articles, each including its content, the name of its managing editor, the name of its copy editor, and the name of its reporter.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT \n    Articles.content, \n    Managing_Editor.name AS managing_editor_name, \n    Copy_Editor.name AS copy_editor_name, \n    Reporters.fullname AS reporter_name\nFROM \n    Articles\nJOIN \n    Final_Draft ON Articles.final_draft_id = Final_Draft.id\nJOIN \n    Managing_Editor ON Final_Draft.managing_editor_id = Managing_Editor.id\nJOIN \n    Copy_Editor ON Final_Draft.copy_editor_id = Copy_Editor.id\nJOIN \n    Reporters ON Articles.reporter_id = Reporters.reporter_id"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2tabs_editor/vague_2tabs_editor.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    content TEXT,\n    author_id INTEGER REFERENCES Authors(author_id),\n    reporter_id INTEGER REFERENCES Reporters(reporter_id),\n    final_draft_id INTEGER REFERENCES Final_Draft(id));\nCREATE TABLE Authors(\n    author_id INTEGER PRIMARY KEY,\n    fullname TEXT);\nCREATE TABLE Copy_Editor(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE);\nCREATE TABLE Final_Draft(\n    id INTEGER PRIMARY KEY,\n    managing_editor_id INTEGER REFERENCES Managing_Editor(id),\n    copy_editor_id INTEGER REFERENCES Copy_Editor(id));\nCREATE TABLE Managing_Editor(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE);\nCREATE TABLE Reporters(\n    reporter_id INTEGER PRIMARY KEY,\n    fullname TEXT);\n\nINSERT INTO \"Articles\" (id,title,content,author_id,reporter_id,final_draft_id) VALUES (1,'Breaking News Story','This is a news story about breaking news.',1,1,1),(2,'Feature on Local Business','A feature article about a local business.',2,2,2);\nINSERT INTO \"Authors\" (author_id,fullname) VALUES (1,'Alice Brown'),(2,'Charlie Green');\nINSERT INTO \"Copy_Editor\" (id,name,email) VALUES (1,'Mike Johnson','mike@example.com'),(2,'Emily Davis','emily@example.com');\nINSERT INTO \"Final_Draft\" (id,managing_editor_id,copy_editor_id) VALUES (1,1,1),(2,2,2);\nINSERT INTO \"Managing_Editor\" (id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com');\nINSERT INTO \"Reporters\" (reporter_id,fullname) VALUES (1,'David Black'),(2,'Eva White');\n",
      "question": "List all the article contents with their respective editor and reporter names.",
      "gold_queries": [
        "SELECT\r\nArticles.content,\r\nManaging_Editor.name,\r\nReporters.fullname\r\nFROM Articles\r\nJOIN Final_Draft ON Final_Draft.id = Articles.final_draft_id\r\nJOIN Managing_Editor ON Managing_Editor.id = Final_Draft.managing_editor_id\r\nJOIN Reporters ON Reporters.reporter_id = Articles.reporter_id",
        "SELECT\r\nArticles.content,\r\nCopy_Editor.name,\r\nReporters.fullname\r\nFROM Articles\r\nJOIN Final_Draft ON Final_Draft.id = Articles.final_draft_id\r\nJOIN Copy_Editor ON Copy_Editor.id = Final_Draft.Copy_Editor_id\r\nJOIN Reporters ON Reporters.reporter_id = Articles.reporter_id",
        "SELECT\r\nArticles.content,\r\nManaging_Editor.name, Copy_Editor.name,\r\nReporters.fullname\r\nFROM Articles\r\nJOIN Final_Draft ON Final_Draft.id = Articles.final_draft_id\r\nJOIN Managing_Editor ON Managing_Editor.id = Final_Draft.managing_editor_id\r\nJOIN Reporters ON Reporters.reporter_id = Articles.reporter_id JOIN Copy_Editor ON Copy_Editor.id = Final_Draft.Copy_Editor_id"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Retrieve all content from the Articles table, joined with the Author, Reporter, and Managing_Editor tables to display the author's, reporter's, and managing editor's names alongside each article.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Articles.content, Authors.fullname AS author_name, Reporters.fullname AS reporter_name, Managing_Editor.name AS managing_editor_name\nFROM Articles\nJOIN Authors ON Articles.author_id = Authors.author_id\nJOIN Reporters ON Articles.reporter_id = Reporters.reporter_id\nJOIN Final_Draft ON Articles.final_draft_id = Final_Draft.id\nJOIN Managing_Editor ON Final_Draft.managing_editor_id = Managing_Editor.id"
          ]
        },
        {
          "interpretation": "Display each article's content in conjunction with the name of the associated copy editor from the Copy_Editor table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Articles.content, Copy_Editor.name\nFROM Articles\nJOIN Final_Draft ON Articles.final_draft_id = Final_Draft.id\nJOIN Copy_Editor ON Final_Draft.copy_editor_id = Copy_Editor.id"
          ]
        },
        {
          "interpretation": "List article contents, along with the names of the managing editors who approved the final drafts.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT content, Managing_Editor.name \nFROM Articles \nJOIN Final_Draft ON Articles.final_draft_id = Final_Draft.id \nJOIN Managing_Editor ON Final_Draft.managing_editor_id = Managing_Editor.id"
          ]
        },
        {
          "interpretation": "List article contents, along with the names of the authors and reporters who contributed to the articles.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.content, B.fullname AS author_name, C.fullname AS reporter_name\nFROM Articles A\nJOIN Authors B ON A.author_id = B.author_id\nJOIN Reporters C ON A.reporter_id = C.reporter_id"
          ]
        },
        {
          "interpretation": "List the text from the 'content' column in the Articles table, coupled with the names of the corresponding reporters from the Reporters table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Articles.content, Reporters.fullname\nFROM Articles\nJOIN Reporters ON Articles.reporter_id = Reporters.reporter_id"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_qualification/vague_2cols_qualification.sqlite",
      "db_dump": "CREATE TABLE articles(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    publishDate DATETIME,\n    authorId INTEGER,\n    publicationId INTEGER,\n    topicId INTEGER,\n    FOREIGN KEY (authorId) REFERENCES journalists(id),\n    FOREIGN KEY (publicationId) REFERENCES publications(id),\n    FOREIGN KEY (topicId) REFERENCES topics(id)\n);\nCREATE TABLE journalists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    Degree TEXT,\n    Certificate TEXT,\n    Investigative_Journalist BOOLEAN\n);\nCREATE TABLE publications(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    address TEXT\n);\nCREATE TABLE sources(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    contactInfo TEXT\n);\nCREATE TABLE topics(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    description TEXT\n);\n\nINSERT INTO \"articles\" (id,title,content,publishDate,authorId,publicationId,topicId) VALUES (1,'Breaking News: New Government Policy','The government has announced a new policy that will impact citizens.','2023-04-01T10:00:00Z',1,1,1),(2,'Economic Outlook for Q2','Experts discuss the economic outlook for the second quarter.','2023-04-02T10:00:00Z',2,2,3);\nINSERT INTO \"journalists\" (id,name,email,phoneNumber,Degree,Certificate,Investigative_Journalist) VALUES (1,'John Doe','john@example.com','123-456-7890','Bachelor of Arts in Journalism','Certified Professional Writer',1),(2,'Jane Smith','jane@example.com','098-765-4321','Master of Science in Communication','Advanced Reporting Specialist',0);\nINSERT INTO \"publications\" (id,name,address) VALUES (1,'Daily Times','123 Main St, Anytown, USA'),(2,'Weekly Post','456 Elm St, Anycity, USA');\nINSERT INTO \"sources\" (id,name,contactInfo) VALUES (1,'City Hall','Phone: +1 (555) 123-4567 | Email: cityhall@anycity.gov'),(2,'Local Police Department','Phone: +1 (555) 987-6543 | Email: police@anystate.us');\nINSERT INTO \"topics\" (id,description) VALUES (1,'Government and Politics'),(2,'Business and Economy');\n",
      "question": "For each author, list their name, certificate and article titles.",
      "gold_queries": [
        "Select name, Certificate, title From journalists Join articles on articles.authorId = journalists.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Retrieve the name, certificate, and titles of articles written by each journalist.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT j.name, j.Certificate, a.title\nFROM journalists j\nJOIN articles a ON j.id = a.authorId"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_qualification/vague_2cols_qualification.sqlite",
      "db_dump": "CREATE TABLE articles(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    publishDate DATETIME,\n    authorId INTEGER,\n    publicationId INTEGER,\n    topicId INTEGER,\n    FOREIGN KEY (authorId) REFERENCES journalists(id),\n    FOREIGN KEY (publicationId) REFERENCES publications(id),\n    FOREIGN KEY (topicId) REFERENCES topics(id)\n);\nCREATE TABLE journalists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    Degree TEXT,\n    Certificate TEXT,\n    Investigative_Journalist BOOLEAN\n);\nCREATE TABLE publications(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    address TEXT\n);\nCREATE TABLE sources(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    contactInfo TEXT\n);\nCREATE TABLE topics(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    description TEXT\n);\n\nINSERT INTO \"articles\" (id,title,content,publishDate,authorId,publicationId,topicId) VALUES (1,'Breaking News: New Government Policy','The government has announced a new policy that will impact citizens.','2023-04-01T10:00:00Z',1,1,1),(2,'Economic Outlook for Q2','Experts discuss the economic outlook for the second quarter.','2023-04-02T10:00:00Z',2,2,3);\nINSERT INTO \"journalists\" (id,name,email,phoneNumber,Degree,Certificate,Investigative_Journalist) VALUES (1,'John Doe','john@example.com','123-456-7890','Bachelor of Arts in Journalism','Certified Professional Writer',1),(2,'Jane Smith','jane@example.com','098-765-4321','Master of Science in Communication','Advanced Reporting Specialist',0);\nINSERT INTO \"publications\" (id,name,address) VALUES (1,'Daily Times','123 Main St, Anytown, USA'),(2,'Weekly Post','456 Elm St, Anycity, USA');\nINSERT INTO \"sources\" (id,name,contactInfo) VALUES (1,'City Hall','Phone: +1 (555) 123-4567 | Email: cityhall@anycity.gov'),(2,'Local Police Department','Phone: +1 (555) 987-6543 | Email: police@anystate.us');\nINSERT INTO \"topics\" (id,description) VALUES (1,'Government and Politics'),(2,'Business and Economy');\n",
      "question": "For each author, list their name, degree and article titles.",
      "gold_queries": [
        "Select name, Degree, title From journalists Join articles on articles.authorId = journalists.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List each author's name, degree, and all article titles authored by them.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT j.name, j.Degree, a.title \nFROM journalists j \nJOIN articles a ON j.id = a.authorId"
          ]
        },
        {
          "interpretation": "Display all articles and associate each article with the author's name and degree.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT articles.title, articles.content, journalists.name, journalists.Degree\nFROM articles\nJOIN journalists ON articles.authorId = journalists.id"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_qualification/vague_2cols_qualification.sqlite",
      "db_dump": "CREATE TABLE articles(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    publishDate DATETIME,\n    authorId INTEGER,\n    publicationId INTEGER,\n    topicId INTEGER,\n    FOREIGN KEY (authorId) REFERENCES journalists(id),\n    FOREIGN KEY (publicationId) REFERENCES publications(id),\n    FOREIGN KEY (topicId) REFERENCES topics(id)\n);\nCREATE TABLE journalists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    Degree TEXT,\n    Certificate TEXT,\n    Investigative_Journalist BOOLEAN\n);\nCREATE TABLE publications(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    address TEXT\n);\nCREATE TABLE sources(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    contactInfo TEXT\n);\nCREATE TABLE topics(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    description TEXT\n);\n\nINSERT INTO \"articles\" (id,title,content,publishDate,authorId,publicationId,topicId) VALUES (1,'Breaking News: New Government Policy','The government has announced a new policy that will impact citizens.','2023-04-01T10:00:00Z',1,1,1),(2,'Economic Outlook for Q2','Experts discuss the economic outlook for the second quarter.','2023-04-02T10:00:00Z',2,2,3);\nINSERT INTO \"journalists\" (id,name,email,phoneNumber,Degree,Certificate,Investigative_Journalist) VALUES (1,'John Doe','john@example.com','123-456-7890','Bachelor of Arts in Journalism','Certified Professional Writer',1),(2,'Jane Smith','jane@example.com','098-765-4321','Master of Science in Communication','Advanced Reporting Specialist',0);\nINSERT INTO \"publications\" (id,name,address) VALUES (1,'Daily Times','123 Main St, Anytown, USA'),(2,'Weekly Post','456 Elm St, Anycity, USA');\nINSERT INTO \"sources\" (id,name,contactInfo) VALUES (1,'City Hall','Phone: +1 (555) 123-4567 | Email: cityhall@anycity.gov'),(2,'Local Police Department','Phone: +1 (555) 987-6543 | Email: police@anystate.us');\nINSERT INTO \"topics\" (id,description) VALUES (1,'Government and Politics'),(2,'Business and Economy');\n",
      "question": "Give me a list of all investigative journalists, their certificates and their article titles",
      "gold_queries": [
        "Select name, Certificate, title From journalists Join articles on articles.authorId = journalists.id Where Investigative_Journalist=1"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Retrieve a list of all journalists classified as \"investigative,\" their obtained certificates, and the titles of all articles they have written.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT J.name, J.Certificate, A.title\nFROM journalists J\nJOIN articles A ON J.id = A.authorId\nWHERE J.Investigative_Journalist = 1"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_qualification/vague_2cols_qualification.sqlite",
      "db_dump": "CREATE TABLE articles(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    publishDate DATETIME,\n    authorId INTEGER,\n    publicationId INTEGER,\n    topicId INTEGER,\n    FOREIGN KEY (authorId) REFERENCES journalists(id),\n    FOREIGN KEY (publicationId) REFERENCES publications(id),\n    FOREIGN KEY (topicId) REFERENCES topics(id)\n);\nCREATE TABLE journalists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    Degree TEXT,\n    Certificate TEXT,\n    Investigative_Journalist BOOLEAN\n);\nCREATE TABLE publications(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    address TEXT\n);\nCREATE TABLE sources(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    contactInfo TEXT\n);\nCREATE TABLE topics(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    description TEXT\n);\n\nINSERT INTO \"articles\" (id,title,content,publishDate,authorId,publicationId,topicId) VALUES (1,'Breaking News: New Government Policy','The government has announced a new policy that will impact citizens.','2023-04-01T10:00:00Z',1,1,1),(2,'Economic Outlook for Q2','Experts discuss the economic outlook for the second quarter.','2023-04-02T10:00:00Z',2,2,3);\nINSERT INTO \"journalists\" (id,name,email,phoneNumber,Degree,Certificate,Investigative_Journalist) VALUES (1,'John Doe','john@example.com','123-456-7890','Bachelor of Arts in Journalism','Certified Professional Writer',1),(2,'Jane Smith','jane@example.com','098-765-4321','Master of Science in Communication','Advanced Reporting Specialist',0);\nINSERT INTO \"publications\" (id,name,address) VALUES (1,'Daily Times','123 Main St, Anytown, USA'),(2,'Weekly Post','456 Elm St, Anycity, USA');\nINSERT INTO \"sources\" (id,name,contactInfo) VALUES (1,'City Hall','Phone: +1 (555) 123-4567 | Email: cityhall@anycity.gov'),(2,'Local Police Department','Phone: +1 (555) 987-6543 | Email: police@anystate.us');\nINSERT INTO \"topics\" (id,description) VALUES (1,'Government and Politics'),(2,'Business and Economy');\n",
      "question": "Give me a list of all investigative journalists, their qualifications and their article titles",
      "gold_queries": [
        "Select name, Degree, title From journalists Join articles on articles.authorId = journalists.id Where Investigative_Journalist=1",
        "Select name, Certificate, title From journalists Join articles on articles.authorId = journalists.id Where Investigative_Journalist=1",
        "Select name, Degree, Certificate, title From journalists Join articles on articles.authorId = journalists.id Where Investigative_Journalist=1"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Retrieve the names, degrees, certificates, and article titles of all journalists who are designated as investigative.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT J.name, J.Degree, J.Certificate, A.title \nFROM journalists J \nJOIN articles A ON J.id = A.authorId \nWHERE J.Investigative_Journalist = 1"
          ]
        },
        {
          "interpretation": "Find all investigative journalists and display their qualifications (Degree and Certificate) and the titles of each article they have authored.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT j.Degree, j.Certificate, a.title\nFROM journalists j\nJOIN articles a ON j.id = a.authorId\nWHERE j.Investigative_Journalist = 1"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.3333333333333333,
        "precision": 0.5,
        "f1_score": 0.4,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_qualification/vague_2cols_qualification.sqlite",
      "db_dump": "CREATE TABLE articles(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    publishDate DATETIME,\n    authorId INTEGER,\n    publicationId INTEGER,\n    topicId INTEGER,\n    FOREIGN KEY (authorId) REFERENCES journalists(id),\n    FOREIGN KEY (publicationId) REFERENCES publications(id),\n    FOREIGN KEY (topicId) REFERENCES topics(id)\n);\nCREATE TABLE journalists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    Degree TEXT,\n    Certificate TEXT,\n    Investigative_Journalist BOOLEAN\n);\nCREATE TABLE publications(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    address TEXT\n);\nCREATE TABLE sources(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    contactInfo TEXT\n);\nCREATE TABLE topics(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    description TEXT\n);\n\nINSERT INTO \"articles\" (id,title,content,publishDate,authorId,publicationId,topicId) VALUES (1,'Breaking News: New Government Policy','The government has announced a new policy that will impact citizens.','2023-04-01T10:00:00Z',1,1,1),(2,'Economic Outlook for Q2','Experts discuss the economic outlook for the second quarter.','2023-04-02T10:00:00Z',2,2,3);\nINSERT INTO \"journalists\" (id,name,email,phoneNumber,Degree,Certificate,Investigative_Journalist) VALUES (1,'John Doe','john@example.com','123-456-7890','Bachelor of Arts in Journalism','Certified Professional Writer',1),(2,'Jane Smith','jane@example.com','098-765-4321','Master of Science in Communication','Advanced Reporting Specialist',0);\nINSERT INTO \"publications\" (id,name,address) VALUES (1,'Daily Times','123 Main St, Anytown, USA'),(2,'Weekly Post','456 Elm St, Anycity, USA');\nINSERT INTO \"sources\" (id,name,contactInfo) VALUES (1,'City Hall','Phone: +1 (555) 123-4567 | Email: cityhall@anycity.gov'),(2,'Local Police Department','Phone: +1 (555) 987-6543 | Email: police@anystate.us');\nINSERT INTO \"topics\" (id,description) VALUES (1,'Government and Politics'),(2,'Business and Economy');\n",
      "question": "For each author, list their name, degree, certificate and article titles.",
      "gold_queries": [
        "Select name, Degree, Certificate, title From journalists Join articles on articles.authorId = journalists.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Display a list of authors, alongside their degrees, certificates, and the titles of articles they have written.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT journalists.name, journalists.Degree, journalists.Certificate, articles.title\nFROM journalists\nJOIN articles ON journalists.id = articles.authorId"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_qualification/vague_2cols_qualification.sqlite",
      "db_dump": "CREATE TABLE articles(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    publishDate DATETIME,\n    authorId INTEGER,\n    publicationId INTEGER,\n    topicId INTEGER,\n    FOREIGN KEY (authorId) REFERENCES journalists(id),\n    FOREIGN KEY (publicationId) REFERENCES publications(id),\n    FOREIGN KEY (topicId) REFERENCES topics(id)\n);\nCREATE TABLE journalists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    Degree TEXT,\n    Certificate TEXT,\n    Investigative_Journalist BOOLEAN\n);\nCREATE TABLE publications(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    address TEXT\n);\nCREATE TABLE sources(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    contactInfo TEXT\n);\nCREATE TABLE topics(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    description TEXT\n);\n\nINSERT INTO \"articles\" (id,title,content,publishDate,authorId,publicationId,topicId) VALUES (1,'Breaking News: New Government Policy','The government has announced a new policy that will impact citizens.','2023-04-01T10:00:00Z',1,1,1),(2,'Economic Outlook for Q2','Experts discuss the economic outlook for the second quarter.','2023-04-02T10:00:00Z',2,2,3);\nINSERT INTO \"journalists\" (id,name,email,phoneNumber,Degree,Certificate,Investigative_Journalist) VALUES (1,'John Doe','john@example.com','123-456-7890','Bachelor of Arts in Journalism','Certified Professional Writer',1),(2,'Jane Smith','jane@example.com','098-765-4321','Master of Science in Communication','Advanced Reporting Specialist',0);\nINSERT INTO \"publications\" (id,name,address) VALUES (1,'Daily Times','123 Main St, Anytown, USA'),(2,'Weekly Post','456 Elm St, Anycity, USA');\nINSERT INTO \"sources\" (id,name,contactInfo) VALUES (1,'City Hall','Phone: +1 (555) 123-4567 | Email: cityhall@anycity.gov'),(2,'Local Police Department','Phone: +1 (555) 987-6543 | Email: police@anystate.us');\nINSERT INTO \"topics\" (id,description) VALUES (1,'Government and Politics'),(2,'Business and Economy');\n",
      "question": "show me the name, qualification and title for all authors and articles",
      "gold_queries": [
        "Select name, Degree, title From journalists Join articles on articles.authorId = journalists.id",
        "Select name, Certificate, title From journalists Join articles on articles.authorId = journalists.id",
        "Select name, Degree, Certificate, title From journalists Join articles on articles.authorId = journalists.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Find authors J and their articles A, then display J.name, J.Degree, and A.title ;",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT J.name, J.Degree, A.title\nFROM journalists J\nJOIN articles A ON J.id = A.authorId"
          ]
        },
        {
          "interpretation": "List the name, qualification and title for each journalist, and their associated articles;",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT J.name, J.Degree, J.Certificate, A.title \nFROM journalists J \nJOIN articles A ON J.id = A.authorId"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.6666666666666666,
        "precision": 1.0,
        "f1_score": 0.8,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_qualification/vague_2cols_qualification.sqlite",
      "db_dump": "CREATE TABLE articles(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    publishDate DATETIME,\n    authorId INTEGER,\n    publicationId INTEGER,\n    topicId INTEGER,\n    FOREIGN KEY (authorId) REFERENCES journalists(id),\n    FOREIGN KEY (publicationId) REFERENCES publications(id),\n    FOREIGN KEY (topicId) REFERENCES topics(id)\n);\nCREATE TABLE journalists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    Degree TEXT,\n    Certificate TEXT,\n    Investigative_Journalist BOOLEAN\n);\nCREATE TABLE publications(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    address TEXT\n);\nCREATE TABLE sources(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    contactInfo TEXT\n);\nCREATE TABLE topics(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    description TEXT\n);\n\nINSERT INTO \"articles\" (id,title,content,publishDate,authorId,publicationId,topicId) VALUES (1,'Breaking News: New Government Policy','The government has announced a new policy that will impact citizens.','2023-04-01T10:00:00Z',1,1,1),(2,'Economic Outlook for Q2','Experts discuss the economic outlook for the second quarter.','2023-04-02T10:00:00Z',2,2,3);\nINSERT INTO \"journalists\" (id,name,email,phoneNumber,Degree,Certificate,Investigative_Journalist) VALUES (1,'John Doe','john@example.com','123-456-7890','Bachelor of Arts in Journalism','Certified Professional Writer',1),(2,'Jane Smith','jane@example.com','098-765-4321','Master of Science in Communication','Advanced Reporting Specialist',0);\nINSERT INTO \"publications\" (id,name,address) VALUES (1,'Daily Times','123 Main St, Anytown, USA'),(2,'Weekly Post','456 Elm St, Anycity, USA');\nINSERT INTO \"sources\" (id,name,contactInfo) VALUES (1,'City Hall','Phone: +1 (555) 123-4567 | Email: cityhall@anycity.gov'),(2,'Local Police Department','Phone: +1 (555) 987-6543 | Email: police@anystate.us');\nINSERT INTO \"topics\" (id,description) VALUES (1,'Government and Politics'),(2,'Business and Economy');\n",
      "question": "Give me a list of all investigative journalists, their degrees and their article titles",
      "gold_queries": [
        "Select name, Degree, title From journalists Join articles on articles.authorId = journalists.id Where Investigative_Journalist=1"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List all journalists whose 'Investigative_Journalist' column value is 1, including their degree and the titles of articles associated with their 'authorId'.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT j.name, j.Degree, a.title \nFROM journalists j \nJOIN articles a ON j.id = a.authorId \nWHERE j.Investigative_Journalist = 1"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_origin/vague_2cols_origin.sqlite",
      "db_dump": "CREATE TABLE Assignments (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    EventId INTEGER,\n    PhotojournalistId INTEGER,\n    FOREIGN KEY(EventId) REFERENCES Events(id),\n    FOREIGN KEY(PhotojournalistId) REFERENCES Photojournalists(id));\nCREATE TABLE Events (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Location TEXT,\n    Date DATE);\nCREATE TABLE Photojournalists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Birthdate DATE);\nCREATE TABLE Photos (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FilePath TEXT,\n    Caption TEXT,\n    TakenOn DATE);\nCREATE TABLE PublishedPhotos (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    AssignmentId INTEGER,\n    PhotoId INTEGER,\n    PublicationDate DATE,\n    FOREIGN KEY(AssignmentId) REFERENCES Assignments(id),\n    FOREIGN KEY(PhotoId) REFERENCES Photos(id));\n\nINSERT INTO \"Assignments\" (id,EventId,PhotojournalistId) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Events\" (id,Title,Location,Date) VALUES (1,'Protest Rally','Downtown','2022-01-01'),(2,'Election Day','City Hall','2022-11-08'),(3,'Festival','Park','2022-07-15'),(4,'Concert','Arena','2022-10-20'),(5,'Marathon','Streets','2022-04-10');\nINSERT INTO \"Photojournalists\" (id,Name,Birthdate) VALUES (1,'John Doe','1980-06-23'),(2,'Jane Smith','1991-07-05'),(3,'Michael Johnson','1985-10-02'),(4,'Emily Davis','1993-01-10'),(5,'David Brown','1989-05-20');\nINSERT INTO \"Photos\" (id,FilePath,Caption,TakenOn) VALUES (1,'/path/to/photo1.jpg','Riot police at protest rally','2022-01-01'),(2,'/path/to/photo2.jpg','Voters waiting to vote','2022-11-08'),(3,'/path/to/photo3.jpg','Crowd enjoying music','2022-07-15'),(4,'/path/to/photo4.jpg','Musician performing on stage','2022-10-20'),(5,'/path/to/photo5.jpg','Runners crossing finish line','2022-04-10');\nINSERT INTO \"PublishedPhotos\" (id,AssignmentId,PhotoId,PublicationDate) VALUES (1,1,1,'2022-01-02'),(2,2,2,'2022-11-10'),(3,3,3,'2022-07-20'),(4,4,4,'2022-10-25'),(5,5,5,'2022-04-15');\n",
      "question": "Show me the photojournalist who took the most recent photo.",
      "gold_queries": [
        "SELECT Photojournalists.Name\r\nFROM Assignments\r\nJOIN Photojournalists ON Assignments.PhotojournalistId = Photojournalists.ID \r\nJOIN PublishedPhotos ON PublishedPhotos.AssignmentId = Assignments.id \r\nORDER BY PublishedPhotos.PublicationDate DESC LIMIT 1"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [],
      "num_unique_execution_results": 0,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0,
        "f1_score": 0,
        "num_queries": 0,
        "num_unique_queries": 0,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_origin/vague_2cols_origin.sqlite",
      "db_dump": "CREATE TABLE Assignments (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    EventId INTEGER,\n    PhotojournalistId INTEGER,\n    FOREIGN KEY(EventId) REFERENCES Events(id),\n    FOREIGN KEY(PhotojournalistId) REFERENCES Photojournalists(id));\nCREATE TABLE Events (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Location TEXT,\n    Date DATE);\nCREATE TABLE Photojournalists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Birthdate DATE);\nCREATE TABLE Photos (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FilePath TEXT,\n    Caption TEXT,\n    TakenOn DATE);\nCREATE TABLE PublishedPhotos (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    AssignmentId INTEGER,\n    PhotoId INTEGER,\n    PublicationDate DATE,\n    FOREIGN KEY(AssignmentId) REFERENCES Assignments(id),\n    FOREIGN KEY(PhotoId) REFERENCES Photos(id));\n\nINSERT INTO \"Assignments\" (id,EventId,PhotojournalistId) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Events\" (id,Title,Location,Date) VALUES (1,'Protest Rally','Downtown','2022-01-01'),(2,'Election Day','City Hall','2022-11-08'),(3,'Festival','Park','2022-07-15'),(4,'Concert','Arena','2022-10-20'),(5,'Marathon','Streets','2022-04-10');\nINSERT INTO \"Photojournalists\" (id,Name,Birthdate) VALUES (1,'John Doe','1980-06-23'),(2,'Jane Smith','1991-07-05'),(3,'Michael Johnson','1985-10-02'),(4,'Emily Davis','1993-01-10'),(5,'David Brown','1989-05-20');\nINSERT INTO \"Photos\" (id,FilePath,Caption,TakenOn) VALUES (1,'/path/to/photo1.jpg','Riot police at protest rally','2022-01-01'),(2,'/path/to/photo2.jpg','Voters waiting to vote','2022-11-08'),(3,'/path/to/photo3.jpg','Crowd enjoying music','2022-07-15'),(4,'/path/to/photo4.jpg','Musician performing on stage','2022-10-20'),(5,'/path/to/photo5.jpg','Runners crossing finish line','2022-04-10');\nINSERT INTO \"PublishedPhotos\" (id,AssignmentId,PhotoId,PublicationDate) VALUES (1,1,1,'2022-01-02'),(2,2,2,'2022-11-10'),(3,3,3,'2022-07-20'),(4,4,4,'2022-10-25'),(5,5,5,'2022-04-15');\n",
      "question": "List the events of photos published in 2022",
      "gold_queries": [
        "SELECT Events.Title FROM Assignments JOIN Events ON Assignments.EventId = Events.ID JOIN PublishedPhotos ON PublishedPhotos.AssignmentId = Assignments.id WHERE  strftime('%Y', PublishedPhotos.PublicationDate) = '2022'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Identify all events where at least one photo was published in 2022.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT DISTINCT E.Title\nFROM Events E\nJOIN Assignments A ON E.id = A.EventId\nJOIN PublishedPhotos PP ON A.id = PP.AssignmentId\nWHERE PP.PublicationDate LIKE '2022%'"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_origin/vague_2cols_origin.sqlite",
      "db_dump": "CREATE TABLE Assignments (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    EventId INTEGER,\n    PhotojournalistId INTEGER,\n    FOREIGN KEY(EventId) REFERENCES Events(id),\n    FOREIGN KEY(PhotojournalistId) REFERENCES Photojournalists(id));\nCREATE TABLE Events (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Location TEXT,\n    Date DATE);\nCREATE TABLE Photojournalists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Birthdate DATE);\nCREATE TABLE Photos (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FilePath TEXT,\n    Caption TEXT,\n    TakenOn DATE);\nCREATE TABLE PublishedPhotos (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    AssignmentId INTEGER,\n    PhotoId INTEGER,\n    PublicationDate DATE,\n    FOREIGN KEY(AssignmentId) REFERENCES Assignments(id),\n    FOREIGN KEY(PhotoId) REFERENCES Photos(id));\n\nINSERT INTO \"Assignments\" (id,EventId,PhotojournalistId) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Events\" (id,Title,Location,Date) VALUES (1,'Protest Rally','Downtown','2022-01-01'),(2,'Election Day','City Hall','2022-11-08'),(3,'Festival','Park','2022-07-15'),(4,'Concert','Arena','2022-10-20'),(5,'Marathon','Streets','2022-04-10');\nINSERT INTO \"Photojournalists\" (id,Name,Birthdate) VALUES (1,'John Doe','1980-06-23'),(2,'Jane Smith','1991-07-05'),(3,'Michael Johnson','1985-10-02'),(4,'Emily Davis','1993-01-10'),(5,'David Brown','1989-05-20');\nINSERT INTO \"Photos\" (id,FilePath,Caption,TakenOn) VALUES (1,'/path/to/photo1.jpg','Riot police at protest rally','2022-01-01'),(2,'/path/to/photo2.jpg','Voters waiting to vote','2022-11-08'),(3,'/path/to/photo3.jpg','Crowd enjoying music','2022-07-15'),(4,'/path/to/photo4.jpg','Musician performing on stage','2022-10-20'),(5,'/path/to/photo5.jpg','Runners crossing finish line','2022-04-10');\nINSERT INTO \"PublishedPhotos\" (id,AssignmentId,PhotoId,PublicationDate) VALUES (1,1,1,'2022-01-02'),(2,2,2,'2022-11-10'),(3,3,3,'2022-07-20'),(4,4,4,'2022-10-25'),(5,5,5,'2022-04-15');\n",
      "question": "List the photojournalists whose photos were published in 2022 and the events depicted in these photos.",
      "gold_queries": [
        "SELECT Photojournalists.Name , Events.Title FROM Assignments JOIN Events ON Assignments.EventId = Events.ID JOIN PublishedPhotos ON PublishedPhotos.AssignmentId = Assignments.id JOIN Photojournalists ON Assignments.PhotojournalistId = Photojournalists.ID  WHERE  strftime('%Y', PublishedPhotos.PublicationDate) = '2022'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List all photojournalists who have at least one photo published in 2022, along with the title of each event associated with those publications.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT DISTINCT P.Name, E.Title\nFROM Photojournalists P\nJOIN Assignments A ON P.id = A.PhotojournalistId\nJOIN PublishedPhotos PP ON A.id = PP.AssignmentId\nJOIN Events E ON A.EventId = E.id\nWHERE PP.PublicationDate LIKE '2022%'"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_origin/vague_2cols_origin.sqlite",
      "db_dump": "CREATE TABLE Assignments (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    EventId INTEGER,\n    PhotojournalistId INTEGER,\n    FOREIGN KEY(EventId) REFERENCES Events(id),\n    FOREIGN KEY(PhotojournalistId) REFERENCES Photojournalists(id));\nCREATE TABLE Events (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Location TEXT,\n    Date DATE);\nCREATE TABLE Photojournalists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Birthdate DATE);\nCREATE TABLE Photos (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FilePath TEXT,\n    Caption TEXT,\n    TakenOn DATE);\nCREATE TABLE PublishedPhotos (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    AssignmentId INTEGER,\n    PhotoId INTEGER,\n    PublicationDate DATE,\n    FOREIGN KEY(AssignmentId) REFERENCES Assignments(id),\n    FOREIGN KEY(PhotoId) REFERENCES Photos(id));\n\nINSERT INTO \"Assignments\" (id,EventId,PhotojournalistId) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Events\" (id,Title,Location,Date) VALUES (1,'Protest Rally','Downtown','2022-01-01'),(2,'Election Day','City Hall','2022-11-08'),(3,'Festival','Park','2022-07-15'),(4,'Concert','Arena','2022-10-20'),(5,'Marathon','Streets','2022-04-10');\nINSERT INTO \"Photojournalists\" (id,Name,Birthdate) VALUES (1,'John Doe','1980-06-23'),(2,'Jane Smith','1991-07-05'),(3,'Michael Johnson','1985-10-02'),(4,'Emily Davis','1993-01-10'),(5,'David Brown','1989-05-20');\nINSERT INTO \"Photos\" (id,FilePath,Caption,TakenOn) VALUES (1,'/path/to/photo1.jpg','Riot police at protest rally','2022-01-01'),(2,'/path/to/photo2.jpg','Voters waiting to vote','2022-11-08'),(3,'/path/to/photo3.jpg','Crowd enjoying music','2022-07-15'),(4,'/path/to/photo4.jpg','Musician performing on stage','2022-10-20'),(5,'/path/to/photo5.jpg','Runners crossing finish line','2022-04-10');\nINSERT INTO \"PublishedPhotos\" (id,AssignmentId,PhotoId,PublicationDate) VALUES (1,1,1,'2022-01-02'),(2,2,2,'2022-11-10'),(3,3,3,'2022-07-20'),(4,4,4,'2022-10-25'),(5,5,5,'2022-04-15');\n",
      "question": "List the photojournalists whose photos were published in 2022.",
      "gold_queries": [
        "SELECT Photojournalists.Name FROM Assignments JOIN Photojournalists ON Assignments.PhotojournalistId = Photojournalists.ID JOIN PublishedPhotos ON PublishedPhotos.AssignmentId = Assignments.id WHERE  strftime('%Y', PublishedPhotos.PublicationDate) = '2022'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Return the names of all Photojournalists associated with published photos during the year 2022.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT DISTINCT P.Name\nFROM Photojournalists P\nJOIN Assignments A ON P.id = A.PhotojournalistId\nJOIN PublishedPhotos PP ON A.id = PP.AssignmentId\nWHERE strftime('%Y', PP.PublicationDate) = '2022'"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_origin/vague_2cols_origin.sqlite",
      "db_dump": "CREATE TABLE Assignments (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    EventId INTEGER,\n    PhotojournalistId INTEGER,\n    FOREIGN KEY(EventId) REFERENCES Events(id),\n    FOREIGN KEY(PhotojournalistId) REFERENCES Photojournalists(id));\nCREATE TABLE Events (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Location TEXT,\n    Date DATE);\nCREATE TABLE Photojournalists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Birthdate DATE);\nCREATE TABLE Photos (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FilePath TEXT,\n    Caption TEXT,\n    TakenOn DATE);\nCREATE TABLE PublishedPhotos (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    AssignmentId INTEGER,\n    PhotoId INTEGER,\n    PublicationDate DATE,\n    FOREIGN KEY(AssignmentId) REFERENCES Assignments(id),\n    FOREIGN KEY(PhotoId) REFERENCES Photos(id));\n\nINSERT INTO \"Assignments\" (id,EventId,PhotojournalistId) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Events\" (id,Title,Location,Date) VALUES (1,'Protest Rally','Downtown','2022-01-01'),(2,'Election Day','City Hall','2022-11-08'),(3,'Festival','Park','2022-07-15'),(4,'Concert','Arena','2022-10-20'),(5,'Marathon','Streets','2022-04-10');\nINSERT INTO \"Photojournalists\" (id,Name,Birthdate) VALUES (1,'John Doe','1980-06-23'),(2,'Jane Smith','1991-07-05'),(3,'Michael Johnson','1985-10-02'),(4,'Emily Davis','1993-01-10'),(5,'David Brown','1989-05-20');\nINSERT INTO \"Photos\" (id,FilePath,Caption,TakenOn) VALUES (1,'/path/to/photo1.jpg','Riot police at protest rally','2022-01-01'),(2,'/path/to/photo2.jpg','Voters waiting to vote','2022-11-08'),(3,'/path/to/photo3.jpg','Crowd enjoying music','2022-07-15'),(4,'/path/to/photo4.jpg','Musician performing on stage','2022-10-20'),(5,'/path/to/photo5.jpg','Runners crossing finish line','2022-04-10');\nINSERT INTO \"PublishedPhotos\" (id,AssignmentId,PhotoId,PublicationDate) VALUES (1,1,1,'2022-01-02'),(2,2,2,'2022-11-10'),(3,3,3,'2022-07-20'),(4,4,4,'2022-10-25'),(5,5,5,'2022-04-15');\n",
      "question": "Show me the photojournalist and the event of the most recent photo.",
      "gold_queries": [
        "SELECT Photojournalists.Name , Events.Title\r\nFROM Assignments\r\nJOIN Events ON Assignments.EventId = Events.ID\r\nJOIN PublishedPhotos ON PublishedPhotos.AssignmentId = Assignments.id  JOIN Photojournalists ON Assignments.PhotojournalistId = Photojournalists.ID \r\nORDER BY PublishedPhotos.PublicationDate DESC LIMIT 1"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List the name of the photojournalist and the title of the event for the recently published photo.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT PJ.Name, E.Title \nFROM PublishedPhotos PP \nJOIN Assignments A ON PP.AssignmentId = A.id \nJOIN Photojournalists PJ ON A.PhotojournalistId = PJ.id \nJOIN Events E ON A.EventId = E.id \nORDER BY PP.PublicationDate DESC \nLIMIT 1"
          ]
        },
        {
          "interpretation": "Retrieve the PhotojournalistId and EventId of the photo with the latest PublicationDate from the PublishedPhotos table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.PhotojournalistId, T2.EventId \nFROM PublishedPhotos AS T1 \nJOIN Assignments AS T2 ON T1.AssignmentId = T2.id \nORDER BY T1.PublicationDate DESC \nLIMIT 1"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_origin/vague_2cols_origin.sqlite",
      "db_dump": "CREATE TABLE Assignments (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    EventId INTEGER,\n    PhotojournalistId INTEGER,\n    FOREIGN KEY(EventId) REFERENCES Events(id),\n    FOREIGN KEY(PhotojournalistId) REFERENCES Photojournalists(id));\nCREATE TABLE Events (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Location TEXT,\n    Date DATE);\nCREATE TABLE Photojournalists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Birthdate DATE);\nCREATE TABLE Photos (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FilePath TEXT,\n    Caption TEXT,\n    TakenOn DATE);\nCREATE TABLE PublishedPhotos (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    AssignmentId INTEGER,\n    PhotoId INTEGER,\n    PublicationDate DATE,\n    FOREIGN KEY(AssignmentId) REFERENCES Assignments(id),\n    FOREIGN KEY(PhotoId) REFERENCES Photos(id));\n\nINSERT INTO \"Assignments\" (id,EventId,PhotojournalistId) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Events\" (id,Title,Location,Date) VALUES (1,'Protest Rally','Downtown','2022-01-01'),(2,'Election Day','City Hall','2022-11-08'),(3,'Festival','Park','2022-07-15'),(4,'Concert','Arena','2022-10-20'),(5,'Marathon','Streets','2022-04-10');\nINSERT INTO \"Photojournalists\" (id,Name,Birthdate) VALUES (1,'John Doe','1980-06-23'),(2,'Jane Smith','1991-07-05'),(3,'Michael Johnson','1985-10-02'),(4,'Emily Davis','1993-01-10'),(5,'David Brown','1989-05-20');\nINSERT INTO \"Photos\" (id,FilePath,Caption,TakenOn) VALUES (1,'/path/to/photo1.jpg','Riot police at protest rally','2022-01-01'),(2,'/path/to/photo2.jpg','Voters waiting to vote','2022-11-08'),(3,'/path/to/photo3.jpg','Crowd enjoying music','2022-07-15'),(4,'/path/to/photo4.jpg','Musician performing on stage','2022-10-20'),(5,'/path/to/photo5.jpg','Runners crossing finish line','2022-04-10');\nINSERT INTO \"PublishedPhotos\" (id,AssignmentId,PhotoId,PublicationDate) VALUES (1,1,1,'2022-01-02'),(2,2,2,'2022-11-10'),(3,3,3,'2022-07-20'),(4,4,4,'2022-10-25'),(5,5,5,'2022-04-15');\n",
      "question": "Show me the origin of all photos published in 2022",
      "gold_queries": [
        "SELECT Photojournalists.Name FROM Assignments JOIN Photojournalists ON Assignments.PhotojournalistId = Photojournalists.ID JOIN PublishedPhotos ON PublishedPhotos.AssignmentId = Assignments.id WHERE  strftime('%Y', PublishedPhotos.PublicationDate) = '2022'",
        "SELECT Events.Title FROM Assignments JOIN Events ON Assignments.EventId = Events.ID JOIN PublishedPhotos ON PublishedPhotos.AssignmentId = Assignments.id WHERE  strftime('%Y', PublishedPhotos.PublicationDate) = '2022'",
        "SELECT Photojournalists.Name , Events.Title FROM Assignments JOIN Events ON Assignments.EventId = Events.ID JOIN PublishedPhotos ON PublishedPhotos.AssignmentId = Assignments.id JOIN Photojournalists ON Assignments.PhotojournalistId = Photojournalists.ID  WHERE  strftime('%Y', PublishedPhotos.PublicationDate) = '2022'"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Find the Event and Photojournalist for each published photo during 2022.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.Title, PJ.Name\nFROM PublishedPhotos PP\nJOIN Assignments A ON PP.AssignmentId = A.id\nJOIN Events E ON A.EventId = E.id\nJOIN Photojournalists PJ ON A.PhotojournalistId = PJ.id\nWHERE PP.PublicationDate LIKE '2022%'"
          ]
        },
        {
          "interpretation": "Retrieve the Title, Location, Photojournalist Name, and Event Date for all published photos in 2022.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.Title, E.Location, Pj.Name, E.Date \nFROM PublishedPhotos PP \nJOIN Assignments A ON PP.AssignmentId = A.id \nJOIN Events E ON A.EventId = E.id \nJOIN Photojournalists Pj ON A.PhotojournalistId = Pj.id \nWHERE PP.PublicationDate BETWEEN '2022-01-01' AND '2022-12-31'"
          ]
        },
        {
          "interpretation": "Display the Event associated with each photo published in 2022.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.Title\nFROM Events E\nJOIN Assignments A ON E.id = A.EventId\nJOIN PublishedPhotos PP ON A.id = PP.AssignmentId\nWHERE strftime('%Y', PP.PublicationDate) = '2022'"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.6666666666666666,
        "precision": 0.6666666666666666,
        "f1_score": 0.6666666666666666,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_origin/vague_2cols_origin.sqlite",
      "db_dump": "CREATE TABLE Assignments (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    EventId INTEGER,\n    PhotojournalistId INTEGER,\n    FOREIGN KEY(EventId) REFERENCES Events(id),\n    FOREIGN KEY(PhotojournalistId) REFERENCES Photojournalists(id));\nCREATE TABLE Events (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Location TEXT,\n    Date DATE);\nCREATE TABLE Photojournalists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Birthdate DATE);\nCREATE TABLE Photos (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FilePath TEXT,\n    Caption TEXT,\n    TakenOn DATE);\nCREATE TABLE PublishedPhotos (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    AssignmentId INTEGER,\n    PhotoId INTEGER,\n    PublicationDate DATE,\n    FOREIGN KEY(AssignmentId) REFERENCES Assignments(id),\n    FOREIGN KEY(PhotoId) REFERENCES Photos(id));\n\nINSERT INTO \"Assignments\" (id,EventId,PhotojournalistId) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Events\" (id,Title,Location,Date) VALUES (1,'Protest Rally','Downtown','2022-01-01'),(2,'Election Day','City Hall','2022-11-08'),(3,'Festival','Park','2022-07-15'),(4,'Concert','Arena','2022-10-20'),(5,'Marathon','Streets','2022-04-10');\nINSERT INTO \"Photojournalists\" (id,Name,Birthdate) VALUES (1,'John Doe','1980-06-23'),(2,'Jane Smith','1991-07-05'),(3,'Michael Johnson','1985-10-02'),(4,'Emily Davis','1993-01-10'),(5,'David Brown','1989-05-20');\nINSERT INTO \"Photos\" (id,FilePath,Caption,TakenOn) VALUES (1,'/path/to/photo1.jpg','Riot police at protest rally','2022-01-01'),(2,'/path/to/photo2.jpg','Voters waiting to vote','2022-11-08'),(3,'/path/to/photo3.jpg','Crowd enjoying music','2022-07-15'),(4,'/path/to/photo4.jpg','Musician performing on stage','2022-10-20'),(5,'/path/to/photo5.jpg','Runners crossing finish line','2022-04-10');\nINSERT INTO \"PublishedPhotos\" (id,AssignmentId,PhotoId,PublicationDate) VALUES (1,1,1,'2022-01-02'),(2,2,2,'2022-11-10'),(3,3,3,'2022-07-20'),(4,4,4,'2022-10-25'),(5,5,5,'2022-04-15');\n",
      "question": "Show me the origin of the most recent photo",
      "gold_queries": [
        "SELECT Photojournalists.Name\r\nFROM Assignments\r\nJOIN Photojournalists ON Assignments.PhotojournalistId = Photojournalists.ID \r\nJOIN PublishedPhotos ON PublishedPhotos.AssignmentId = Assignments.id \r\nORDER BY PublishedPhotos.PublicationDate DESC LIMIT 1",
        "SELECT Events.Title\r\nFROM Assignments\r\nJOIN Events ON Assignments.EventId = Events.ID\r\nJOIN PublishedPhotos ON PublishedPhotos.AssignmentId = Assignments.id \r\nORDER BY PublishedPhotos.PublicationDate DESC LIMIT 1",
        "SELECT Photojournalists.Name , Events.Title\r\nFROM Assignments\r\nJOIN Events ON Assignments.EventId = Events.ID\r\nJOIN PublishedPhotos ON PublishedPhotos.AssignmentId = Assignments.id  JOIN Photojournalists ON Assignments.PhotojournalistId = Photojournalists.ID \r\nORDER BY PublishedPhotos.PublicationDate DESC LIMIT 1"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Show me the event associated with the newest photo.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT e.Title\nFROM Events e\nJOIN Assignments a ON e.id = a.EventId\nJOIN PublishedPhotos pp ON a.id = pp.AssignmentId\nWHERE pp.PublicationDate = (SELECT MAX(PublicationDate) FROM PublishedPhotos)"
          ]
        },
        {
          "interpretation": "Provide the photojournalist responsible for the latest uploaded photo.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.Name FROM Photojournalists P JOIN Assignments A ON P.id = A.PhotojournalistId JOIN PublishedPhotos PP ON A.id = PP.AssignmentId ORDER BY PP.PublicationDate DESC LIMIT 1"
          ]
        },
        {
          "interpretation": "Retrieve the filepath of the newest added photo.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FilePath FROM Photos ORDER BY TakenOn DESC LIMIT 1"
          ]
        },
        {
          "interpretation": "Determine the location of the most recently captured photograph.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Location FROM Events WHERE id = (SELECT EventId FROM Assignments WHERE id = (SELECT AssignmentId FROM PublishedPhotos WHERE PhotoId = (SELECT id FROM Photos ORDER BY TakenOn DESC LIMIT 1)))"
          ]
        },
        {
          "interpretation": "Return the publication date of the most recent photo.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT PublicationDate FROM PublishedPhotos ORDER BY PublicationDate DESC LIMIT 1"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.6666666666666666,
        "precision": 0.4,
        "f1_score": 0.5,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_origin/vague_2cols_origin.sqlite",
      "db_dump": "CREATE TABLE Assignments (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    EventId INTEGER,\n    PhotojournalistId INTEGER,\n    FOREIGN KEY(EventId) REFERENCES Events(id),\n    FOREIGN KEY(PhotojournalistId) REFERENCES Photojournalists(id));\nCREATE TABLE Events (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Location TEXT,\n    Date DATE);\nCREATE TABLE Photojournalists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Birthdate DATE);\nCREATE TABLE Photos (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FilePath TEXT,\n    Caption TEXT,\n    TakenOn DATE);\nCREATE TABLE PublishedPhotos (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    AssignmentId INTEGER,\n    PhotoId INTEGER,\n    PublicationDate DATE,\n    FOREIGN KEY(AssignmentId) REFERENCES Assignments(id),\n    FOREIGN KEY(PhotoId) REFERENCES Photos(id));\n\nINSERT INTO \"Assignments\" (id,EventId,PhotojournalistId) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Events\" (id,Title,Location,Date) VALUES (1,'Protest Rally','Downtown','2022-01-01'),(2,'Election Day','City Hall','2022-11-08'),(3,'Festival','Park','2022-07-15'),(4,'Concert','Arena','2022-10-20'),(5,'Marathon','Streets','2022-04-10');\nINSERT INTO \"Photojournalists\" (id,Name,Birthdate) VALUES (1,'John Doe','1980-06-23'),(2,'Jane Smith','1991-07-05'),(3,'Michael Johnson','1985-10-02'),(4,'Emily Davis','1993-01-10'),(5,'David Brown','1989-05-20');\nINSERT INTO \"Photos\" (id,FilePath,Caption,TakenOn) VALUES (1,'/path/to/photo1.jpg','Riot police at protest rally','2022-01-01'),(2,'/path/to/photo2.jpg','Voters waiting to vote','2022-11-08'),(3,'/path/to/photo3.jpg','Crowd enjoying music','2022-07-15'),(4,'/path/to/photo4.jpg','Musician performing on stage','2022-10-20'),(5,'/path/to/photo5.jpg','Runners crossing finish line','2022-04-10');\nINSERT INTO \"PublishedPhotos\" (id,AssignmentId,PhotoId,PublicationDate) VALUES (1,1,1,'2022-01-02'),(2,2,2,'2022-11-10'),(3,3,3,'2022-07-20'),(4,4,4,'2022-10-25'),(5,5,5,'2022-04-15');\n",
      "question": "Show me the event of the most recent photo.",
      "gold_queries": [
        "SELECT Events.Title\r\nFROM Assignments\r\nJOIN Events ON Assignments.EventId = Events.ID\r\nJOIN PublishedPhotos ON PublishedPhotos.AssignmentId = Assignments.id \r\nORDER BY PublishedPhotos.PublicationDate DESC LIMIT 1"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Show me the information about the event associated with the photo with the latest \"TakenOn\" date.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.Title, E.Location, E.Date \nFROM Events E \nJOIN Assignments A ON E.id = A.EventId \nJOIN PublishedPhotos PP ON A.id = PP.AssignmentId \nJOIN Photos P ON PP.PhotoId = P.id \nORDER BY P.TakenOn DESC \nLIMIT 1"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_qualification/vague_2cols_qualification.sqlite",
      "db_dump": "CREATE TABLE articles(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    publishDate DATETIME,\n    authorId INTEGER,\n    publicationId INTEGER,\n    topicId INTEGER,\n    FOREIGN KEY (authorId) REFERENCES journalists(id),\n    FOREIGN KEY (publicationId) REFERENCES publications(id),\n    FOREIGN KEY (topicId) REFERENCES topics(id)\n);\nCREATE TABLE journalists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    Degree TEXT,\n    Certificate TEXT,\n    Investigative_Journalist BOOLEAN\n);\nCREATE TABLE publications(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    address TEXT\n);\nCREATE TABLE sources(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    contactInfo TEXT\n);\nCREATE TABLE topics(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    description TEXT\n);\n\nINSERT INTO \"articles\" (id,title,content,publishDate,authorId,publicationId,topicId) VALUES (1,'Breaking News: New Government Policy','The government has announced a new policy that will impact citizens.','2023-04-01T10:00:00Z',1,1,1),(2,'Economic Outlook for Q2','Experts discuss the economic outlook for the second quarter.','2023-04-02T10:00:00Z',2,2,3);\nINSERT INTO \"journalists\" (id,name,email,phoneNumber,Degree,Certificate,Investigative_Journalist) VALUES (1,'John Doe','john@example.com','123-456-7890','Bachelor of Arts in Journalism','Certified Professional Writer',1),(2,'Jane Smith','jane@example.com','098-765-4321','Master of Science in Communication','Advanced Reporting Specialist',0);\nINSERT INTO \"publications\" (id,name,address) VALUES (1,'Daily Times','123 Main St, Anytown, USA'),(2,'Weekly Post','456 Elm St, Anycity, USA');\nINSERT INTO \"sources\" (id,name,contactInfo) VALUES (1,'City Hall','Phone: +1 (555) 123-4567 | Email: cityhall@anycity.gov'),(2,'Local Police Department','Phone: +1 (555) 987-6543 | Email: police@anystate.us');\nINSERT INTO \"topics\" (id,description) VALUES (1,'Government and Politics'),(2,'Business and Economy');\n",
      "question": "Give me a list of all investigative journalists, their degrees, their certificates and their article titles",
      "gold_queries": [
        "Select name, Degree, Certificate, title From journalists Join articles on articles.authorId = journalists.id Where Investigative_Journalist=1"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Fetch a list of investigative journalists and their corresponding degrees, certificates, and associated article titles",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT j.name, j.degree, j.certificate, a.title\nFROM journalists j\nJOIN articles a ON j.id = a.authorId\nWHERE j.Investigative_Journalist = 1"
          ]
        },
        {
          "interpretation": "List all journalists from the 'journalists' table who have 'Investigative_Journalist' marked as true",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, email, phoneNumber FROM journalists WHERE Investigative_Journalist = 1"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_technology/vague_2cols_technology.sqlite",
      "db_dump": "CREATE TABLE ArticleSources (\n    articleSourceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    articleID INTEGER,\n    sourceID INTEGER,\n    referenceDate DATETIME,\n    FOREIGN KEY(articleID) REFERENCES Articles(articleID),\n    FOREIGN KEY(sourceID) REFERENCES Sources(sourceID)\n);\nCREATE TABLE Articles (\n    articleID INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    publicationDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    authorID INTEGER,\n    FOREIGN KEY(authorID) REFERENCES Authors(authorID)\n);\nCREATE TABLE Authors (\n    authorID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT UNIQUE\n);\nCREATE TABLE ContentManagementSystems (\n    cmsId INTEGER PRIMARY KEY AUTOINCREMENT,\n    Content_Management_System TEXT,\n    Web_Framework TEXT,\n    Online_News_Platform TEXT,\n    FOREIGN KEY(cmsId) REFERENCES Articles(authorID)\n);\nCREATE TABLE EditorialTeamMembers (\n    memberID INTEGER PRIMARY KEY AUTOINCREMENT,\n    role TEXT,\n    editorName TEXT\n);\nCREATE TABLE Sources (\n    sourceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    url TEXT UNIQUE\n);\n\nINSERT INTO \"ArticleSources\" (articleSourceID,articleID,sourceID,referenceDate) VALUES (1,1,1,'2021-07-01 10:00:00'),(2,2,2,'2021-07-01 10:00:00'),(3,3,3,'2021-07-01 10:00:00'),(4,4,4,'2021-07-01 10:00:00'),(5,5,5,'2021-07-01 10:00:00');\nINSERT INTO \"Articles\" (articleID,title,content,publicationDate,authorID) VALUES (1,'First Article Title','This is the first article content.','2024-02-19 14:35:51',1),(2,'Second Article Title','This is the second article content.','2024-02-19 14:35:51',2),(3,'Third Article Title','This is the third article content.','2024-02-19 14:35:51',3),(4,'Fourth Article Title','This is the fourth article content.','2024-02-19 14:35:51',4),(5,'Fifth Article Title','This is the fifth article content.','2024-02-19 14:35:51',5);\nINSERT INTO \"Authors\" (authorID,name,email) VALUES (1,'John Doe','johndoe@example.com'),(2,'Jane Smith','janesmith@example.com'),(3,'Michael Johnson','michaeljohnson@example.com'),(4,'Emily Brown','emilybrown@example.com'),(5,'David Wilson','davidwilson@example.com');\nINSERT INTO \"ContentManagementSystems\" (cmsId,Content_Management_System,Web_Framework,Online_News_Platform) VALUES (1,'WordPress','PHP','Newspack'),(2,'Drupal','PHP','Tribune Content Agency'),(3,'Joomla','PHP','LimeSurvey'),(4,'Plone','Python','Pelagios'),(5,'Concrete5','PHP','Zen Cart');\nINSERT INTO \"EditorialTeamMembers\" (memberID,role,editorName) VALUES (1,'Managing Editor','Mary Williams'),(2,'Copy Chief','Tom Anderson'),(3,'Features Editor','Ann Taylor'),(4,'Sports Editor','Chris Harris'),(5,'Opinion Editor','Laura King');\nINSERT INTO \"Sources\" (sourceID,name,url) VALUES (1,'The New York Times','https://www.nytimes.com/'),(2,'CNN','https://www.cnn.com/'),(3,'BBC News','https://www.bbc.co.uk/news/'),(4,'Al Jazeera','https://www.aljazeera.com/'),(5,'Deutsche Welle','https://www.dw.com/');\n",
      "question": "What web framework and content managment system does the author with email 'davidwilson@example.com' use?",
      "gold_queries": [
        "SELECT DISTINCT CMS.Content_Management_System, Web_Framework\r\nFROM Authors AS A\r\nJOIN Articles AS AR ON A.authorID = AR.authorID \r\nJOIN ContentManagementSystems AS CMS ON AR.articleID = CMS.cmsId\r\nWHERE A.email = 'davidwilson@example.com';"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "For the author 'davidwilson@example.com', what content management system and web framework are linked?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT cms.Content_Management_System, cms.Web_Framework\nFROM Authors a\nJOIN ContentManagementSystems cms ON a.authorID = cms.cmsId\nWHERE a.email = 'davidwilson@example.com'"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_technology/vague_2cols_technology.sqlite",
      "db_dump": "CREATE TABLE ArticleSources (\n    articleSourceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    articleID INTEGER,\n    sourceID INTEGER,\n    referenceDate DATETIME,\n    FOREIGN KEY(articleID) REFERENCES Articles(articleID),\n    FOREIGN KEY(sourceID) REFERENCES Sources(sourceID)\n);\nCREATE TABLE Articles (\n    articleID INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    publicationDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    authorID INTEGER,\n    FOREIGN KEY(authorID) REFERENCES Authors(authorID)\n);\nCREATE TABLE Authors (\n    authorID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT UNIQUE\n);\nCREATE TABLE ContentManagementSystems (\n    cmsId INTEGER PRIMARY KEY AUTOINCREMENT,\n    Content_Management_System TEXT,\n    Web_Framework TEXT,\n    Online_News_Platform TEXT,\n    FOREIGN KEY(cmsId) REFERENCES Articles(authorID)\n);\nCREATE TABLE EditorialTeamMembers (\n    memberID INTEGER PRIMARY KEY AUTOINCREMENT,\n    role TEXT,\n    editorName TEXT\n);\nCREATE TABLE Sources (\n    sourceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    url TEXT UNIQUE\n);\n\nINSERT INTO \"ArticleSources\" (articleSourceID,articleID,sourceID,referenceDate) VALUES (1,1,1,'2021-07-01 10:00:00'),(2,2,2,'2021-07-01 10:00:00'),(3,3,3,'2021-07-01 10:00:00'),(4,4,4,'2021-07-01 10:00:00'),(5,5,5,'2021-07-01 10:00:00');\nINSERT INTO \"Articles\" (articleID,title,content,publicationDate,authorID) VALUES (1,'First Article Title','This is the first article content.','2024-02-19 14:35:51',1),(2,'Second Article Title','This is the second article content.','2024-02-19 14:35:51',2),(3,'Third Article Title','This is the third article content.','2024-02-19 14:35:51',3),(4,'Fourth Article Title','This is the fourth article content.','2024-02-19 14:35:51',4),(5,'Fifth Article Title','This is the fifth article content.','2024-02-19 14:35:51',5);\nINSERT INTO \"Authors\" (authorID,name,email) VALUES (1,'John Doe','johndoe@example.com'),(2,'Jane Smith','janesmith@example.com'),(3,'Michael Johnson','michaeljohnson@example.com'),(4,'Emily Brown','emilybrown@example.com'),(5,'David Wilson','davidwilson@example.com');\nINSERT INTO \"ContentManagementSystems\" (cmsId,Content_Management_System,Web_Framework,Online_News_Platform) VALUES (1,'WordPress','PHP','Newspack'),(2,'Drupal','PHP','Tribune Content Agency'),(3,'Joomla','PHP','LimeSurvey'),(4,'Plone','Python','Pelagios'),(5,'Concrete5','PHP','Zen Cart');\nINSERT INTO \"EditorialTeamMembers\" (memberID,role,editorName) VALUES (1,'Managing Editor','Mary Williams'),(2,'Copy Chief','Tom Anderson'),(3,'Features Editor','Ann Taylor'),(4,'Sports Editor','Chris Harris'),(5,'Opinion Editor','Laura King');\nINSERT INTO \"Sources\" (sourceID,name,url) VALUES (1,'The New York Times','https://www.nytimes.com/'),(2,'CNN','https://www.cnn.com/'),(3,'BBC News','https://www.bbc.co.uk/news/'),(4,'Al Jazeera','https://www.aljazeera.com/'),(5,'Deutsche Welle','https://www.dw.com/');\n",
      "question": "What technology does the author with email 'davidwilson@example.com' use?",
      "gold_queries": [
        "SELECT DISTINCT CMS.Content_Management_System\r\nFROM Authors AS A\r\nJOIN Articles AS AR ON A.authorID = AR.authorID \r\nJOIN ContentManagementSystems AS CMS ON AR.articleID = CMS.cmsId\r\nWHERE A.email = 'davidwilson@example.com';",
        "SELECT DISTINCT CMS.Web_Framework\r\nFROM Authors AS A\r\nJOIN Articles AS AR ON A.authorID = AR.authorID \r\nJOIN ContentManagementSystems AS CMS ON AR.articleID = CMS.cmsId\r\nWHERE A.email = 'davidwilson@example.com';",
        "SELECT DISTINCT CMS.Content_Management_System, Web_Framework\r\nFROM Authors AS A\r\nJOIN Articles AS AR ON A.authorID = AR.authorID \r\nJOIN ContentManagementSystems AS CMS ON AR.articleID = CMS.cmsId\r\nWHERE A.email = 'davidwilson@example.com';"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What Web Framework does the author with email 'davidwilson@example.com' utilize?",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.Web_Framework FROM Articles AS T1 JOIN ContentManagementSystems AS T2 ON T1.authorID = T2.cmsId JOIN Authors AS T3 ON T1.authorID = T3.authorID WHERE T3.email = 'davidwilson@example.com'"
          ]
        },
        {
          "interpretation": "Which Content Management System (cmsId) is associated with the author with email 'davidwilson@example.com'?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.cmsId\nFROM ContentManagementSystems AS T1\nJOIN Articles AS T2 ON T1.cmsId = T2.authorID\nJOIN Authors AS T3 ON T2.authorID = T3.authorID\nWHERE T3.email = 'davidwilson@example.com'"
          ]
        },
        {
          "interpretation": "Which Online_News_Platform does the author with email 'davidwilson@example.com' belong to?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T3.Online_News_Platform FROM Authors AS T1 JOIN Articles AS T2 ON T1.authorID = T2.authorID JOIN ContentManagementSystems AS T3 ON T1.authorID = T3.cmsId WHERE T1.email = 'davidwilson@example.com'"
          ]
        },
        {
          "interpretation": "What technology does the author with email 'davidwilson@example.com' use for their articles?",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Content_Management_System \nFROM ContentManagementSystems \nWHERE cmsId = (\n    SELECT authorID \n    FROM Articles \n    WHERE authorID = (\n        SELECT authorID \n        FROM Authors \n        WHERE email = 'davidwilson@example.com'\n    )\n)"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.6666666666666666,
        "precision": 0.5,
        "f1_score": 0.5714285714285715,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_technology/vague_2cols_technology.sqlite",
      "db_dump": "CREATE TABLE ArticleSources (\n    articleSourceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    articleID INTEGER,\n    sourceID INTEGER,\n    referenceDate DATETIME,\n    FOREIGN KEY(articleID) REFERENCES Articles(articleID),\n    FOREIGN KEY(sourceID) REFERENCES Sources(sourceID)\n);\nCREATE TABLE Articles (\n    articleID INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    publicationDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    authorID INTEGER,\n    FOREIGN KEY(authorID) REFERENCES Authors(authorID)\n);\nCREATE TABLE Authors (\n    authorID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT UNIQUE\n);\nCREATE TABLE ContentManagementSystems (\n    cmsId INTEGER PRIMARY KEY AUTOINCREMENT,\n    Content_Management_System TEXT,\n    Web_Framework TEXT,\n    Online_News_Platform TEXT,\n    FOREIGN KEY(cmsId) REFERENCES Articles(authorID)\n);\nCREATE TABLE EditorialTeamMembers (\n    memberID INTEGER PRIMARY KEY AUTOINCREMENT,\n    role TEXT,\n    editorName TEXT\n);\nCREATE TABLE Sources (\n    sourceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    url TEXT UNIQUE\n);\n\nINSERT INTO \"ArticleSources\" (articleSourceID,articleID,sourceID,referenceDate) VALUES (1,1,1,'2021-07-01 10:00:00'),(2,2,2,'2021-07-01 10:00:00'),(3,3,3,'2021-07-01 10:00:00'),(4,4,4,'2021-07-01 10:00:00'),(5,5,5,'2021-07-01 10:00:00');\nINSERT INTO \"Articles\" (articleID,title,content,publicationDate,authorID) VALUES (1,'First Article Title','This is the first article content.','2024-02-19 14:35:51',1),(2,'Second Article Title','This is the second article content.','2024-02-19 14:35:51',2),(3,'Third Article Title','This is the third article content.','2024-02-19 14:35:51',3),(4,'Fourth Article Title','This is the fourth article content.','2024-02-19 14:35:51',4),(5,'Fifth Article Title','This is the fifth article content.','2024-02-19 14:35:51',5);\nINSERT INTO \"Authors\" (authorID,name,email) VALUES (1,'John Doe','johndoe@example.com'),(2,'Jane Smith','janesmith@example.com'),(3,'Michael Johnson','michaeljohnson@example.com'),(4,'Emily Brown','emilybrown@example.com'),(5,'David Wilson','davidwilson@example.com');\nINSERT INTO \"ContentManagementSystems\" (cmsId,Content_Management_System,Web_Framework,Online_News_Platform) VALUES (1,'WordPress','PHP','Newspack'),(2,'Drupal','PHP','Tribune Content Agency'),(3,'Joomla','PHP','LimeSurvey'),(4,'Plone','Python','Pelagios'),(5,'Concrete5','PHP','Zen Cart');\nINSERT INTO \"EditorialTeamMembers\" (memberID,role,editorName) VALUES (1,'Managing Editor','Mary Williams'),(2,'Copy Chief','Tom Anderson'),(3,'Features Editor','Ann Taylor'),(4,'Sports Editor','Chris Harris'),(5,'Opinion Editor','Laura King');\nINSERT INTO \"Sources\" (sourceID,name,url) VALUES (1,'The New York Times','https://www.nytimes.com/'),(2,'CNN','https://www.cnn.com/'),(3,'BBC News','https://www.bbc.co.uk/news/'),(4,'Al Jazeera','https://www.aljazeera.com/'),(5,'Deutsche Welle','https://www.dw.com/');\n",
      "question": "What content managment system does the author with email 'davidwilson@example.com' use?",
      "gold_queries": [
        "SELECT DISTINCT CMS.Content_Management_System\r\nFROM Authors AS A\r\nJOIN Articles AS AR ON A.authorID = AR.authorID \r\nJOIN ContentManagementSystems AS CMS ON AR.articleID = CMS.cmsId\r\nWHERE A.email = 'davidwilson@example.com';"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Which CMS is used by the author whose email is 'davidwilson@example.com'?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT T1.Content_Management_System \nFROM ContentManagementSystems AS T1 \nJOIN Articles AS T2 ON T1.cmsId = T2.authorID \nJOIN Authors AS T3 ON T2.authorID = T3.authorID \nWHERE T3.email = 'davidwilson@example.com'"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_technology/vague_2cols_technology.sqlite",
      "db_dump": "CREATE TABLE ArticleSources (\n    articleSourceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    articleID INTEGER,\n    sourceID INTEGER,\n    referenceDate DATETIME,\n    FOREIGN KEY(articleID) REFERENCES Articles(articleID),\n    FOREIGN KEY(sourceID) REFERENCES Sources(sourceID)\n);\nCREATE TABLE Articles (\n    articleID INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    publicationDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    authorID INTEGER,\n    FOREIGN KEY(authorID) REFERENCES Authors(authorID)\n);\nCREATE TABLE Authors (\n    authorID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT UNIQUE\n);\nCREATE TABLE ContentManagementSystems (\n    cmsId INTEGER PRIMARY KEY AUTOINCREMENT,\n    Content_Management_System TEXT,\n    Web_Framework TEXT,\n    Online_News_Platform TEXT,\n    FOREIGN KEY(cmsId) REFERENCES Articles(authorID)\n);\nCREATE TABLE EditorialTeamMembers (\n    memberID INTEGER PRIMARY KEY AUTOINCREMENT,\n    role TEXT,\n    editorName TEXT\n);\nCREATE TABLE Sources (\n    sourceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    url TEXT UNIQUE\n);\n\nINSERT INTO \"ArticleSources\" (articleSourceID,articleID,sourceID,referenceDate) VALUES (1,1,1,'2021-07-01 10:00:00'),(2,2,2,'2021-07-01 10:00:00'),(3,3,3,'2021-07-01 10:00:00'),(4,4,4,'2021-07-01 10:00:00'),(5,5,5,'2021-07-01 10:00:00');\nINSERT INTO \"Articles\" (articleID,title,content,publicationDate,authorID) VALUES (1,'First Article Title','This is the first article content.','2024-02-19 14:35:51',1),(2,'Second Article Title','This is the second article content.','2024-02-19 14:35:51',2),(3,'Third Article Title','This is the third article content.','2024-02-19 14:35:51',3),(4,'Fourth Article Title','This is the fourth article content.','2024-02-19 14:35:51',4),(5,'Fifth Article Title','This is the fifth article content.','2024-02-19 14:35:51',5);\nINSERT INTO \"Authors\" (authorID,name,email) VALUES (1,'John Doe','johndoe@example.com'),(2,'Jane Smith','janesmith@example.com'),(3,'Michael Johnson','michaeljohnson@example.com'),(4,'Emily Brown','emilybrown@example.com'),(5,'David Wilson','davidwilson@example.com');\nINSERT INTO \"ContentManagementSystems\" (cmsId,Content_Management_System,Web_Framework,Online_News_Platform) VALUES (1,'WordPress','PHP','Newspack'),(2,'Drupal','PHP','Tribune Content Agency'),(3,'Joomla','PHP','LimeSurvey'),(4,'Plone','Python','Pelagios'),(5,'Concrete5','PHP','Zen Cart');\nINSERT INTO \"EditorialTeamMembers\" (memberID,role,editorName) VALUES (1,'Managing Editor','Mary Williams'),(2,'Copy Chief','Tom Anderson'),(3,'Features Editor','Ann Taylor'),(4,'Sports Editor','Chris Harris'),(5,'Opinion Editor','Laura King');\nINSERT INTO \"Sources\" (sourceID,name,url) VALUES (1,'The New York Times','https://www.nytimes.com/'),(2,'CNN','https://www.cnn.com/'),(3,'BBC News','https://www.bbc.co.uk/news/'),(4,'Al Jazeera','https://www.aljazeera.com/'),(5,'Deutsche Welle','https://www.dw.com/');\n",
      "question": "show me the content management system and web framework that emily brown uses to write her articles",
      "gold_queries": [
        "SELECT CMS.Content_Management_System, Web_Framework\r\nFROM ContentManagementSystems AS CMS\r\nJOIN Articles AS AR ON CMS.cmsId = AR.articleID\r\nJOIN Authors AS A ON AR.authorID = A.authorID\r\nWHERE A.name = 'Emily Brown';"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Retrieve the Content Management System (CMS) and Web Framework associated with the author Emily Brown.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Content_Management_System, Web_Framework \nFROM ContentManagementSystems \nWHERE cmsId = (SELECT authorID FROM Authors WHERE name = 'Emily Brown')"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_technology/vague_2cols_technology.sqlite",
      "db_dump": "CREATE TABLE ArticleSources (\n    articleSourceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    articleID INTEGER,\n    sourceID INTEGER,\n    referenceDate DATETIME,\n    FOREIGN KEY(articleID) REFERENCES Articles(articleID),\n    FOREIGN KEY(sourceID) REFERENCES Sources(sourceID)\n);\nCREATE TABLE Articles (\n    articleID INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    publicationDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    authorID INTEGER,\n    FOREIGN KEY(authorID) REFERENCES Authors(authorID)\n);\nCREATE TABLE Authors (\n    authorID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT UNIQUE\n);\nCREATE TABLE ContentManagementSystems (\n    cmsId INTEGER PRIMARY KEY AUTOINCREMENT,\n    Content_Management_System TEXT,\n    Web_Framework TEXT,\n    Online_News_Platform TEXT,\n    FOREIGN KEY(cmsId) REFERENCES Articles(authorID)\n);\nCREATE TABLE EditorialTeamMembers (\n    memberID INTEGER PRIMARY KEY AUTOINCREMENT,\n    role TEXT,\n    editorName TEXT\n);\nCREATE TABLE Sources (\n    sourceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    url TEXT UNIQUE\n);\n\nINSERT INTO \"ArticleSources\" (articleSourceID,articleID,sourceID,referenceDate) VALUES (1,1,1,'2021-07-01 10:00:00'),(2,2,2,'2021-07-01 10:00:00'),(3,3,3,'2021-07-01 10:00:00'),(4,4,4,'2021-07-01 10:00:00'),(5,5,5,'2021-07-01 10:00:00');\nINSERT INTO \"Articles\" (articleID,title,content,publicationDate,authorID) VALUES (1,'First Article Title','This is the first article content.','2024-02-19 14:35:51',1),(2,'Second Article Title','This is the second article content.','2024-02-19 14:35:51',2),(3,'Third Article Title','This is the third article content.','2024-02-19 14:35:51',3),(4,'Fourth Article Title','This is the fourth article content.','2024-02-19 14:35:51',4),(5,'Fifth Article Title','This is the fifth article content.','2024-02-19 14:35:51',5);\nINSERT INTO \"Authors\" (authorID,name,email) VALUES (1,'John Doe','johndoe@example.com'),(2,'Jane Smith','janesmith@example.com'),(3,'Michael Johnson','michaeljohnson@example.com'),(4,'Emily Brown','emilybrown@example.com'),(5,'David Wilson','davidwilson@example.com');\nINSERT INTO \"ContentManagementSystems\" (cmsId,Content_Management_System,Web_Framework,Online_News_Platform) VALUES (1,'WordPress','PHP','Newspack'),(2,'Drupal','PHP','Tribune Content Agency'),(3,'Joomla','PHP','LimeSurvey'),(4,'Plone','Python','Pelagios'),(5,'Concrete5','PHP','Zen Cart');\nINSERT INTO \"EditorialTeamMembers\" (memberID,role,editorName) VALUES (1,'Managing Editor','Mary Williams'),(2,'Copy Chief','Tom Anderson'),(3,'Features Editor','Ann Taylor'),(4,'Sports Editor','Chris Harris'),(5,'Opinion Editor','Laura King');\nINSERT INTO \"Sources\" (sourceID,name,url) VALUES (1,'The New York Times','https://www.nytimes.com/'),(2,'CNN','https://www.cnn.com/'),(3,'BBC News','https://www.bbc.co.uk/news/'),(4,'Al Jazeera','https://www.aljazeera.com/'),(5,'Deutsche Welle','https://www.dw.com/');\n",
      "question": "What technology does Emily Brown use?",
      "gold_queries": [
        "SELECT CMS.Content_Management_System\r\nFROM ContentManagementSystems AS CMS\r\nJOIN Articles AS AR ON CMS.cmsId = AR.articleID\r\nJOIN Authors AS A ON AR.authorID = A.authorID\r\nWHERE A.name = 'Emily Brown';",
        "SELECT CMS.Web_Framework\r\nFROM ContentManagementSystems AS CMS\r\nJOIN Articles AS AR ON CMS.cmsId = AR.articleID\r\nJOIN Authors AS A ON AR.authorID = A.authorID\r\nWHERE A.name = 'Emily Brown';",
        "SELECT CMS.Content_Management_System, Web_Framework\r\nFROM ContentManagementSystems AS CMS\r\nJOIN Articles AS AR ON CMS.cmsId = AR.articleID\r\nJOIN Authors AS A ON AR.authorID = A.authorID\r\nWHERE A.name = 'Emily Brown';"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What online news platform does Emily Brown use?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.Online_News_Platform FROM ContentManagementSystems AS T1 JOIN Articles AS T2 ON T1.cmsId = T2.authorID JOIN Authors AS T3 ON T2.authorID = T3.authorID WHERE T3.name = 'Emily Brown'"
          ]
        },
        {
          "interpretation": "What web framework does Emily Brown use?",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Web_Framework FROM ContentManagementSystems WHERE cmsId = (SELECT authorID FROM Authors WHERE name = 'Emily Brown')"
          ]
        },
        {
          "interpretation": "What content management system does Emily Brown use?",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT t1.Content_Management_System FROM ContentManagementSystems AS t1 JOIN Articles AS t2 ON t1.cmsId = t2.authorID JOIN Authors AS t3 ON t2.authorID = t3.authorID WHERE t3.name = 'Emily Brown'"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.6666666666666666,
        "precision": 0.6666666666666666,
        "f1_score": 0.6666666666666666,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_technology/vague_2cols_technology.sqlite",
      "db_dump": "CREATE TABLE ArticleSources (\n    articleSourceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    articleID INTEGER,\n    sourceID INTEGER,\n    referenceDate DATETIME,\n    FOREIGN KEY(articleID) REFERENCES Articles(articleID),\n    FOREIGN KEY(sourceID) REFERENCES Sources(sourceID)\n);\nCREATE TABLE Articles (\n    articleID INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    publicationDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    authorID INTEGER,\n    FOREIGN KEY(authorID) REFERENCES Authors(authorID)\n);\nCREATE TABLE Authors (\n    authorID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT UNIQUE\n);\nCREATE TABLE ContentManagementSystems (\n    cmsId INTEGER PRIMARY KEY AUTOINCREMENT,\n    Content_Management_System TEXT,\n    Web_Framework TEXT,\n    Online_News_Platform TEXT,\n    FOREIGN KEY(cmsId) REFERENCES Articles(authorID)\n);\nCREATE TABLE EditorialTeamMembers (\n    memberID INTEGER PRIMARY KEY AUTOINCREMENT,\n    role TEXT,\n    editorName TEXT\n);\nCREATE TABLE Sources (\n    sourceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    url TEXT UNIQUE\n);\n\nINSERT INTO \"ArticleSources\" (articleSourceID,articleID,sourceID,referenceDate) VALUES (1,1,1,'2021-07-01 10:00:00'),(2,2,2,'2021-07-01 10:00:00'),(3,3,3,'2021-07-01 10:00:00'),(4,4,4,'2021-07-01 10:00:00'),(5,5,5,'2021-07-01 10:00:00');\nINSERT INTO \"Articles\" (articleID,title,content,publicationDate,authorID) VALUES (1,'First Article Title','This is the first article content.','2024-02-19 14:35:51',1),(2,'Second Article Title','This is the second article content.','2024-02-19 14:35:51',2),(3,'Third Article Title','This is the third article content.','2024-02-19 14:35:51',3),(4,'Fourth Article Title','This is the fourth article content.','2024-02-19 14:35:51',4),(5,'Fifth Article Title','This is the fifth article content.','2024-02-19 14:35:51',5);\nINSERT INTO \"Authors\" (authorID,name,email) VALUES (1,'John Doe','johndoe@example.com'),(2,'Jane Smith','janesmith@example.com'),(3,'Michael Johnson','michaeljohnson@example.com'),(4,'Emily Brown','emilybrown@example.com'),(5,'David Wilson','davidwilson@example.com');\nINSERT INTO \"ContentManagementSystems\" (cmsId,Content_Management_System,Web_Framework,Online_News_Platform) VALUES (1,'WordPress','PHP','Newspack'),(2,'Drupal','PHP','Tribune Content Agency'),(3,'Joomla','PHP','LimeSurvey'),(4,'Plone','Python','Pelagios'),(5,'Concrete5','PHP','Zen Cart');\nINSERT INTO \"EditorialTeamMembers\" (memberID,role,editorName) VALUES (1,'Managing Editor','Mary Williams'),(2,'Copy Chief','Tom Anderson'),(3,'Features Editor','Ann Taylor'),(4,'Sports Editor','Chris Harris'),(5,'Opinion Editor','Laura King');\nINSERT INTO \"Sources\" (sourceID,name,url) VALUES (1,'The New York Times','https://www.nytimes.com/'),(2,'CNN','https://www.cnn.com/'),(3,'BBC News','https://www.bbc.co.uk/news/'),(4,'Al Jazeera','https://www.aljazeera.com/'),(5,'Deutsche Welle','https://www.dw.com/');\n",
      "question": "What web framework does the author with email 'davidwilson@example.com' use?",
      "gold_queries": [
        "SELECT DISTINCT CMS.Web_Framework\r\nFROM Authors AS A\r\nJOIN Articles AS AR ON A.authorID = AR.authorID \r\nJOIN ContentManagementSystems AS CMS ON AR.articleID = CMS.cmsId\r\nWHERE A.email = 'davidwilson@example.com';"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Which web framework is associated with the author who has the email address 'davidwilson@example.com'?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT T2.Web_Framework \nFROM Authors AS T1 \nJOIN ContentManagementSystems AS T2 \nON T1.authorID = T2.cmsId \nWHERE T1.email = 'davidwilson@example.com'"
          ]
        },
        {
          "interpretation": "What Content Management System does the author with email 'davidwilson@example.com' use?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT CMS.Content_Management_System \nFROM Authors \nJOIN Articles ON Authors.authorID = Articles.authorID \nJOIN ContentManagementSystems AS CMS ON Articles.authorID = CMS.cmsId \nWHERE Authors.email = 'davidwilson@example.com'"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_technology/vague_2cols_technology.sqlite",
      "db_dump": "CREATE TABLE ArticleSources (\n    articleSourceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    articleID INTEGER,\n    sourceID INTEGER,\n    referenceDate DATETIME,\n    FOREIGN KEY(articleID) REFERENCES Articles(articleID),\n    FOREIGN KEY(sourceID) REFERENCES Sources(sourceID)\n);\nCREATE TABLE Articles (\n    articleID INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    publicationDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    authorID INTEGER,\n    FOREIGN KEY(authorID) REFERENCES Authors(authorID)\n);\nCREATE TABLE Authors (\n    authorID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT UNIQUE\n);\nCREATE TABLE ContentManagementSystems (\n    cmsId INTEGER PRIMARY KEY AUTOINCREMENT,\n    Content_Management_System TEXT,\n    Web_Framework TEXT,\n    Online_News_Platform TEXT,\n    FOREIGN KEY(cmsId) REFERENCES Articles(authorID)\n);\nCREATE TABLE EditorialTeamMembers (\n    memberID INTEGER PRIMARY KEY AUTOINCREMENT,\n    role TEXT,\n    editorName TEXT\n);\nCREATE TABLE Sources (\n    sourceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    url TEXT UNIQUE\n);\n\nINSERT INTO \"ArticleSources\" (articleSourceID,articleID,sourceID,referenceDate) VALUES (1,1,1,'2021-07-01 10:00:00'),(2,2,2,'2021-07-01 10:00:00'),(3,3,3,'2021-07-01 10:00:00'),(4,4,4,'2021-07-01 10:00:00'),(5,5,5,'2021-07-01 10:00:00');\nINSERT INTO \"Articles\" (articleID,title,content,publicationDate,authorID) VALUES (1,'First Article Title','This is the first article content.','2024-02-19 14:35:51',1),(2,'Second Article Title','This is the second article content.','2024-02-19 14:35:51',2),(3,'Third Article Title','This is the third article content.','2024-02-19 14:35:51',3),(4,'Fourth Article Title','This is the fourth article content.','2024-02-19 14:35:51',4),(5,'Fifth Article Title','This is the fifth article content.','2024-02-19 14:35:51',5);\nINSERT INTO \"Authors\" (authorID,name,email) VALUES (1,'John Doe','johndoe@example.com'),(2,'Jane Smith','janesmith@example.com'),(3,'Michael Johnson','michaeljohnson@example.com'),(4,'Emily Brown','emilybrown@example.com'),(5,'David Wilson','davidwilson@example.com');\nINSERT INTO \"ContentManagementSystems\" (cmsId,Content_Management_System,Web_Framework,Online_News_Platform) VALUES (1,'WordPress','PHP','Newspack'),(2,'Drupal','PHP','Tribune Content Agency'),(3,'Joomla','PHP','LimeSurvey'),(4,'Plone','Python','Pelagios'),(5,'Concrete5','PHP','Zen Cart');\nINSERT INTO \"EditorialTeamMembers\" (memberID,role,editorName) VALUES (1,'Managing Editor','Mary Williams'),(2,'Copy Chief','Tom Anderson'),(3,'Features Editor','Ann Taylor'),(4,'Sports Editor','Chris Harris'),(5,'Opinion Editor','Laura King');\nINSERT INTO \"Sources\" (sourceID,name,url) VALUES (1,'The New York Times','https://www.nytimes.com/'),(2,'CNN','https://www.cnn.com/'),(3,'BBC News','https://www.bbc.co.uk/news/'),(4,'Al Jazeera','https://www.aljazeera.com/'),(5,'Deutsche Welle','https://www.dw.com/');\n",
      "question": "show me the web framework that emily brown uses to write her articles",
      "gold_queries": [
        "SELECT CMS.Web_Framework\r\nFROM ContentManagementSystems AS CMS\r\nJOIN Articles AS AR ON CMS.cmsId = AR.articleID\r\nJOIN Authors AS A ON AR.authorID = A.authorID\r\nWHERE A.name = 'Emily Brown';"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [],
      "num_unique_execution_results": 0,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0,
        "f1_score": 0,
        "num_queries": 0,
        "num_unique_queries": 0,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_technology/vague_2cols_technology.sqlite",
      "db_dump": "CREATE TABLE ArticleSources (\n    articleSourceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    articleID INTEGER,\n    sourceID INTEGER,\n    referenceDate DATETIME,\n    FOREIGN KEY(articleID) REFERENCES Articles(articleID),\n    FOREIGN KEY(sourceID) REFERENCES Sources(sourceID)\n);\nCREATE TABLE Articles (\n    articleID INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    publicationDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    authorID INTEGER,\n    FOREIGN KEY(authorID) REFERENCES Authors(authorID)\n);\nCREATE TABLE Authors (\n    authorID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT UNIQUE\n);\nCREATE TABLE ContentManagementSystems (\n    cmsId INTEGER PRIMARY KEY AUTOINCREMENT,\n    Content_Management_System TEXT,\n    Web_Framework TEXT,\n    Online_News_Platform TEXT,\n    FOREIGN KEY(cmsId) REFERENCES Articles(authorID)\n);\nCREATE TABLE EditorialTeamMembers (\n    memberID INTEGER PRIMARY KEY AUTOINCREMENT,\n    role TEXT,\n    editorName TEXT\n);\nCREATE TABLE Sources (\n    sourceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    url TEXT UNIQUE\n);\n\nINSERT INTO \"ArticleSources\" (articleSourceID,articleID,sourceID,referenceDate) VALUES (1,1,1,'2021-07-01 10:00:00'),(2,2,2,'2021-07-01 10:00:00'),(3,3,3,'2021-07-01 10:00:00'),(4,4,4,'2021-07-01 10:00:00'),(5,5,5,'2021-07-01 10:00:00');\nINSERT INTO \"Articles\" (articleID,title,content,publicationDate,authorID) VALUES (1,'First Article Title','This is the first article content.','2024-02-19 14:35:51',1),(2,'Second Article Title','This is the second article content.','2024-02-19 14:35:51',2),(3,'Third Article Title','This is the third article content.','2024-02-19 14:35:51',3),(4,'Fourth Article Title','This is the fourth article content.','2024-02-19 14:35:51',4),(5,'Fifth Article Title','This is the fifth article content.','2024-02-19 14:35:51',5);\nINSERT INTO \"Authors\" (authorID,name,email) VALUES (1,'John Doe','johndoe@example.com'),(2,'Jane Smith','janesmith@example.com'),(3,'Michael Johnson','michaeljohnson@example.com'),(4,'Emily Brown','emilybrown@example.com'),(5,'David Wilson','davidwilson@example.com');\nINSERT INTO \"ContentManagementSystems\" (cmsId,Content_Management_System,Web_Framework,Online_News_Platform) VALUES (1,'WordPress','PHP','Newspack'),(2,'Drupal','PHP','Tribune Content Agency'),(3,'Joomla','PHP','LimeSurvey'),(4,'Plone','Python','Pelagios'),(5,'Concrete5','PHP','Zen Cart');\nINSERT INTO \"EditorialTeamMembers\" (memberID,role,editorName) VALUES (1,'Managing Editor','Mary Williams'),(2,'Copy Chief','Tom Anderson'),(3,'Features Editor','Ann Taylor'),(4,'Sports Editor','Chris Harris'),(5,'Opinion Editor','Laura King');\nINSERT INTO \"Sources\" (sourceID,name,url) VALUES (1,'The New York Times','https://www.nytimes.com/'),(2,'CNN','https://www.cnn.com/'),(3,'BBC News','https://www.bbc.co.uk/news/'),(4,'Al Jazeera','https://www.aljazeera.com/'),(5,'Deutsche Welle','https://www.dw.com/');\n",
      "question": "show me the content management system that emily brown uses to write her articles",
      "gold_queries": [
        "SELECT CMS.Content_Management_System\r\nFROM ContentManagementSystems AS CMS\r\nJOIN Articles AS AR ON CMS.cmsId = AR.articleID\r\nJOIN Authors AS A ON AR.authorID = A.authorID\r\nWHERE A.name = 'Emily Brown';"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Identify the Content Management System associated with the author Emily Brown's authorID in the Articles table.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT T1.Content_Management_System \nFROM ContentManagementSystems AS T1 \nJOIN Articles AS T2 ON T1.cmsId = T2.authorID \nJOIN Authors AS T3 ON T2.authorID = T3.authorID \nWHERE T3.name = 'Emily Brown'"
          ]
        },
        {
          "interpretation": "Determine the Online_News_Platform utilized by Emily Brown, referenced by her authorID, in the ContentManagementSystems table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Online_News_Platform FROM ContentManagementSystems WHERE cmsId = (SELECT authorID FROM Authors WHERE name = 'Emily Brown')"
          ]
        },
        {
          "interpretation": "Find the Web_Framework used by Emily Brown, given her authorID, from the ContentManagementSystems table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Web_Framework FROM ContentManagementSystems WHERE cmsId = (SELECT authorID FROM Authors WHERE name = 'Emily Brown')"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Streaming Service/vague_2cols_screenwriter/vague_2cols_screenwriter.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actor_id INTEGER PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    birth_date DATE,\n    nationality TEXT\n);\nCREATE TABLE Movies (\n    movie_id INTEGER PRIMARY KEY,\n    title TEXT,\n    release_year INTEGER,\n    genre TEXT,\n    novelist TEXT,\n    playwright TEXT,\n    film TEXT\n);\nCREATE TABLE Novelists (\n    novelist_id INTEGER PRIMARY KEY,\n    name TEXT\n);\nCREATE TABLE Playwrights (\n    playwright_id INTEGER PRIMARY KEY,\n    name TEXT\n);\nCREATE TABLE Subscribers (\n    subscriber_id INTEGER PRIMARY KEY,\n    username TEXT,\n    email TEXT,\n    password TEXT\n);\nCREATE TABLE TVShows (\n    tvshow_id INTEGER PRIMARY KEY,\n    show_title TEXT,\n    start_date DATE,\n    end_date DATE,\n    genre TEXT,\n    episodes INT\n);\n\nINSERT INTO \"Actors\" (actor_id,first_name,last_name,birth_date,nationality) VALUES (1,'Al Pacino',NULL,19400425,'American'),(2,'Tom Hanks',NULL,19560709,'American'),(3,'Leonardo DiCaprio',NULL,19741111,'American'),(4,'Brad Pitt',NULL,19631218,'American'),(5,'Denzel Washington',NULL,19541227,'American');\nINSERT INTO \"Movies\" (movie_id,title,release_year,genre,novelist,playwright,film) VALUES (1,'The Godfather',1972,'Crime, Drama','Mario Puzo','Francis Ford Coppola','The Godfather'),(2,'Forrest Gump',1994,'Drama, Romance','Winston Groom','Robert Zemeckis','Forrest Gump'),(3,'Inception',2010,'Action, Adventure','Unknown','Christopher Nolan','Inception'),(4,'Pulp Fiction',1994,'Crime, Drama','Quentin Tarantino & Roger Avary','Quentin Tarantino','Pulp Fiction'),(5,'Jurassic Park',1993,'Adventure, Sci-Fi','Michael Crichton','Steven Spielberg','Jurassic Park');\nINSERT INTO \"Subscribers\" (subscriber_id,username,email,password) VALUES (1,'user001','user001@gmail.com','password001'),(2,'user002','user002@yahoo.com','password002'),(3,'user003','user003@hotmail.com','password003'),(4,'user004','user004@outlook.com','password004'),(5,'user005','user005@aol.com','password005');\nINSERT INTO \"TVShows\" (tvshow_id,show_title,start_date,end_date,genre,episodes) VALUES (1,'Breaking Bad',20080117,20130929,'Crime, Drama',62),(2,'Game of Thrones',20110417,20190519,'Fantasy, Adventure',73),(3,'Stranger Things',20160715,'Present','Horror, Mystery',42),(4,'Friends',19940922,20040506,'Comedy, Romance',236),(5,'Vikings',20131003,'Present','Historical drama',89);\n",
      "question": "Provide a count of movies for each writer",
      "gold_queries": [
        "SELECT novelist, COUNT(*) AS Movie_Count\r\nFROM Movies\r\nGROUP BY novelist;",
        "SELECT playwright, COUNT(*) AS Movie_Count\r\nFROM Movies\r\nGROUP BY playwright;",
        "SELECT novelist, playwright, COUNT(*) AS Movie_Count\r\nFROM Movies\r\nGROUP BY novelist, playwright;"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Count movies directed by individuals listed as \"film\" in the Movies table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(*), film FROM Movies GROUP BY film"
          ]
        },
        {
          "interpretation": "Calculate the number of entries in the Movies table where 'novelist', 'playwright', and 'film' columns have populated values.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(*) FROM Movies WHERE novelist IS NOT NULL AND playwright IS NOT NULL AND film IS NOT NULL"
          ]
        },
        {
          "interpretation": "Determine the number of film productions credited to each playwright.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT playwright, COUNT(*) AS number_of_films\nFROM Movies\nGROUP BY playwright"
          ]
        },
        {
          "interpretation": "Count the number of movies associated with each unique novelist.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT novelist, COUNT(*) FROM Movies GROUP BY novelist"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.6666666666666666,
        "precision": 0.5,
        "f1_score": 0.5714285714285715,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Streaming Service/vague_2cols_screenwriter/vague_2cols_screenwriter.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actor_id INTEGER PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    birth_date DATE,\n    nationality TEXT\n);\nCREATE TABLE Movies (\n    movie_id INTEGER PRIMARY KEY,\n    title TEXT,\n    release_year INTEGER,\n    genre TEXT,\n    novelist TEXT,\n    playwright TEXT,\n    film TEXT\n);\nCREATE TABLE Novelists (\n    novelist_id INTEGER PRIMARY KEY,\n    name TEXT\n);\nCREATE TABLE Playwrights (\n    playwright_id INTEGER PRIMARY KEY,\n    name TEXT\n);\nCREATE TABLE Subscribers (\n    subscriber_id INTEGER PRIMARY KEY,\n    username TEXT,\n    email TEXT,\n    password TEXT\n);\nCREATE TABLE TVShows (\n    tvshow_id INTEGER PRIMARY KEY,\n    show_title TEXT,\n    start_date DATE,\n    end_date DATE,\n    genre TEXT,\n    episodes INT\n);\n\nINSERT INTO \"Actors\" (actor_id,first_name,last_name,birth_date,nationality) VALUES (1,'Al Pacino',NULL,19400425,'American'),(2,'Tom Hanks',NULL,19560709,'American'),(3,'Leonardo DiCaprio',NULL,19741111,'American'),(4,'Brad Pitt',NULL,19631218,'American'),(5,'Denzel Washington',NULL,19541227,'American');\nINSERT INTO \"Movies\" (movie_id,title,release_year,genre,novelist,playwright,film) VALUES (1,'The Godfather',1972,'Crime, Drama','Mario Puzo','Francis Ford Coppola','The Godfather'),(2,'Forrest Gump',1994,'Drama, Romance','Winston Groom','Robert Zemeckis','Forrest Gump'),(3,'Inception',2010,'Action, Adventure','Unknown','Christopher Nolan','Inception'),(4,'Pulp Fiction',1994,'Crime, Drama','Quentin Tarantino & Roger Avary','Quentin Tarantino','Pulp Fiction'),(5,'Jurassic Park',1993,'Adventure, Sci-Fi','Michael Crichton','Steven Spielberg','Jurassic Park');\nINSERT INTO \"Subscribers\" (subscriber_id,username,email,password) VALUES (1,'user001','user001@gmail.com','password001'),(2,'user002','user002@yahoo.com','password002'),(3,'user003','user003@hotmail.com','password003'),(4,'user004','user004@outlook.com','password004'),(5,'user005','user005@aol.com','password005');\nINSERT INTO \"TVShows\" (tvshow_id,show_title,start_date,end_date,genre,episodes) VALUES (1,'Breaking Bad',20080117,20130929,'Crime, Drama',62),(2,'Game of Thrones',20110417,20190519,'Fantasy, Adventure',73),(3,'Stranger Things',20160715,'Present','Horror, Mystery',42),(4,'Friends',19940922,20040506,'Comedy, Romance',236),(5,'Vikings',20131003,'Present','Historical drama',89);\n",
      "question": "Provide a count of movies for each playwright.",
      "gold_queries": [
        "SELECT playwright, COUNT(*) AS Movie_Count\r\nFROM Movies\r\nGROUP BY playwright;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Calculate the total number of movies written by every playwright in the database.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT playwright, COUNT(*) AS total_movies FROM Movies GROUP BY playwright"
          ]
        },
        {
          "interpretation": "Generate a report showing the count of movies for each entry in the Playwright table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT playwrights.name, COUNT(movies.movie_id) AS movie_count\nFROM playwrights\nLEFT JOIN movies ON playwrights.name = movies.playwright\nGROUP BY playwrights.name"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Streaming Service/vague_2cols_screenwriter/vague_2cols_screenwriter.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actor_id INTEGER PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    birth_date DATE,\n    nationality TEXT\n);\nCREATE TABLE Movies (\n    movie_id INTEGER PRIMARY KEY,\n    title TEXT,\n    release_year INTEGER,\n    genre TEXT,\n    novelist TEXT,\n    playwright TEXT,\n    film TEXT\n);\nCREATE TABLE Novelists (\n    novelist_id INTEGER PRIMARY KEY,\n    name TEXT\n);\nCREATE TABLE Playwrights (\n    playwright_id INTEGER PRIMARY KEY,\n    name TEXT\n);\nCREATE TABLE Subscribers (\n    subscriber_id INTEGER PRIMARY KEY,\n    username TEXT,\n    email TEXT,\n    password TEXT\n);\nCREATE TABLE TVShows (\n    tvshow_id INTEGER PRIMARY KEY,\n    show_title TEXT,\n    start_date DATE,\n    end_date DATE,\n    genre TEXT,\n    episodes INT\n);\n\nINSERT INTO \"Actors\" (actor_id,first_name,last_name,birth_date,nationality) VALUES (1,'Al Pacino',NULL,19400425,'American'),(2,'Tom Hanks',NULL,19560709,'American'),(3,'Leonardo DiCaprio',NULL,19741111,'American'),(4,'Brad Pitt',NULL,19631218,'American'),(5,'Denzel Washington',NULL,19541227,'American');\nINSERT INTO \"Movies\" (movie_id,title,release_year,genre,novelist,playwright,film) VALUES (1,'The Godfather',1972,'Crime, Drama','Mario Puzo','Francis Ford Coppola','The Godfather'),(2,'Forrest Gump',1994,'Drama, Romance','Winston Groom','Robert Zemeckis','Forrest Gump'),(3,'Inception',2010,'Action, Adventure','Unknown','Christopher Nolan','Inception'),(4,'Pulp Fiction',1994,'Crime, Drama','Quentin Tarantino & Roger Avary','Quentin Tarantino','Pulp Fiction'),(5,'Jurassic Park',1993,'Adventure, Sci-Fi','Michael Crichton','Steven Spielberg','Jurassic Park');\nINSERT INTO \"Subscribers\" (subscriber_id,username,email,password) VALUES (1,'user001','user001@gmail.com','password001'),(2,'user002','user002@yahoo.com','password002'),(3,'user003','user003@hotmail.com','password003'),(4,'user004','user004@outlook.com','password004'),(5,'user005','user005@aol.com','password005');\nINSERT INTO \"TVShows\" (tvshow_id,show_title,start_date,end_date,genre,episodes) VALUES (1,'Breaking Bad',20080117,20130929,'Crime, Drama',62),(2,'Game of Thrones',20110417,20190519,'Fantasy, Adventure',73),(3,'Stranger Things',20160715,'Present','Horror, Mystery',42),(4,'Friends',19940922,20040506,'Comedy, Romance',236),(5,'Vikings',20131003,'Present','Historical drama',89);\n",
      "question": "Provide a count of movies for each novelist.",
      "gold_queries": [
        "SELECT novelist, COUNT(*) AS Movie_Count\r\nFROM Movies\r\nGROUP BY novelist;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Return the number of movies associated with each unique novelist in the Novelists table.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Novelist, COUNT(movie_id) AS movie_count FROM Movies GROUP BY Novelist"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Streaming Service/vague_2cols_screenwriter/vague_2cols_screenwriter.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actor_id INTEGER PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    birth_date DATE,\n    nationality TEXT\n);\nCREATE TABLE Movies (\n    movie_id INTEGER PRIMARY KEY,\n    title TEXT,\n    release_year INTEGER,\n    genre TEXT,\n    novelist TEXT,\n    playwright TEXT,\n    film TEXT\n);\nCREATE TABLE Novelists (\n    novelist_id INTEGER PRIMARY KEY,\n    name TEXT\n);\nCREATE TABLE Playwrights (\n    playwright_id INTEGER PRIMARY KEY,\n    name TEXT\n);\nCREATE TABLE Subscribers (\n    subscriber_id INTEGER PRIMARY KEY,\n    username TEXT,\n    email TEXT,\n    password TEXT\n);\nCREATE TABLE TVShows (\n    tvshow_id INTEGER PRIMARY KEY,\n    show_title TEXT,\n    start_date DATE,\n    end_date DATE,\n    genre TEXT,\n    episodes INT\n);\n\nINSERT INTO \"Actors\" (actor_id,first_name,last_name,birth_date,nationality) VALUES (1,'Al Pacino',NULL,19400425,'American'),(2,'Tom Hanks',NULL,19560709,'American'),(3,'Leonardo DiCaprio',NULL,19741111,'American'),(4,'Brad Pitt',NULL,19631218,'American'),(5,'Denzel Washington',NULL,19541227,'American');\nINSERT INTO \"Movies\" (movie_id,title,release_year,genre,novelist,playwright,film) VALUES (1,'The Godfather',1972,'Crime, Drama','Mario Puzo','Francis Ford Coppola','The Godfather'),(2,'Forrest Gump',1994,'Drama, Romance','Winston Groom','Robert Zemeckis','Forrest Gump'),(3,'Inception',2010,'Action, Adventure','Unknown','Christopher Nolan','Inception'),(4,'Pulp Fiction',1994,'Crime, Drama','Quentin Tarantino & Roger Avary','Quentin Tarantino','Pulp Fiction'),(5,'Jurassic Park',1993,'Adventure, Sci-Fi','Michael Crichton','Steven Spielberg','Jurassic Park');\nINSERT INTO \"Subscribers\" (subscriber_id,username,email,password) VALUES (1,'user001','user001@gmail.com','password001'),(2,'user002','user002@yahoo.com','password002'),(3,'user003','user003@hotmail.com','password003'),(4,'user004','user004@outlook.com','password004'),(5,'user005','user005@aol.com','password005');\nINSERT INTO \"TVShows\" (tvshow_id,show_title,start_date,end_date,genre,episodes) VALUES (1,'Breaking Bad',20080117,20130929,'Crime, Drama',62),(2,'Game of Thrones',20110417,20190519,'Fantasy, Adventure',73),(3,'Stranger Things',20160715,'Present','Horror, Mystery',42),(4,'Friends',19940922,20040506,'Comedy, Romance',236),(5,'Vikings',20131003,'Present','Historical drama',89);\n",
      "question": "List the movies and their release years, sort by their novelist, then playwright.",
      "gold_queries": [
        "SELECT novelist, playwright, title, release_year\r\nFROM Movies\r\nORDER BY novelist, playwright, release_year;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Retrieve the title, release_year of movies ordered by novelist name then by playwright name.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title, release_year FROM Movies ORDER BY novelist, playwright"
          ]
        },
        {
          "interpretation": "List movie_id and release_year from movies grouped by novelist then by playwright",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT movie_id, release_year FROM Movies GROUP BY novelist, playwright"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Streaming Service/vague_2cols_screenwriter/vague_2cols_screenwriter.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actor_id INTEGER PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    birth_date DATE,\n    nationality TEXT\n);\nCREATE TABLE Movies (\n    movie_id INTEGER PRIMARY KEY,\n    title TEXT,\n    release_year INTEGER,\n    genre TEXT,\n    novelist TEXT,\n    playwright TEXT,\n    film TEXT\n);\nCREATE TABLE Novelists (\n    novelist_id INTEGER PRIMARY KEY,\n    name TEXT\n);\nCREATE TABLE Playwrights (\n    playwright_id INTEGER PRIMARY KEY,\n    name TEXT\n);\nCREATE TABLE Subscribers (\n    subscriber_id INTEGER PRIMARY KEY,\n    username TEXT,\n    email TEXT,\n    password TEXT\n);\nCREATE TABLE TVShows (\n    tvshow_id INTEGER PRIMARY KEY,\n    show_title TEXT,\n    start_date DATE,\n    end_date DATE,\n    genre TEXT,\n    episodes INT\n);\n\nINSERT INTO \"Actors\" (actor_id,first_name,last_name,birth_date,nationality) VALUES (1,'Al Pacino',NULL,19400425,'American'),(2,'Tom Hanks',NULL,19560709,'American'),(3,'Leonardo DiCaprio',NULL,19741111,'American'),(4,'Brad Pitt',NULL,19631218,'American'),(5,'Denzel Washington',NULL,19541227,'American');\nINSERT INTO \"Movies\" (movie_id,title,release_year,genre,novelist,playwright,film) VALUES (1,'The Godfather',1972,'Crime, Drama','Mario Puzo','Francis Ford Coppola','The Godfather'),(2,'Forrest Gump',1994,'Drama, Romance','Winston Groom','Robert Zemeckis','Forrest Gump'),(3,'Inception',2010,'Action, Adventure','Unknown','Christopher Nolan','Inception'),(4,'Pulp Fiction',1994,'Crime, Drama','Quentin Tarantino & Roger Avary','Quentin Tarantino','Pulp Fiction'),(5,'Jurassic Park',1993,'Adventure, Sci-Fi','Michael Crichton','Steven Spielberg','Jurassic Park');\nINSERT INTO \"Subscribers\" (subscriber_id,username,email,password) VALUES (1,'user001','user001@gmail.com','password001'),(2,'user002','user002@yahoo.com','password002'),(3,'user003','user003@hotmail.com','password003'),(4,'user004','user004@outlook.com','password004'),(5,'user005','user005@aol.com','password005');\nINSERT INTO \"TVShows\" (tvshow_id,show_title,start_date,end_date,genre,episodes) VALUES (1,'Breaking Bad',20080117,20130929,'Crime, Drama',62),(2,'Game of Thrones',20110417,20190519,'Fantasy, Adventure',73),(3,'Stranger Things',20160715,'Present','Horror, Mystery',42),(4,'Friends',19940922,20040506,'Comedy, Romance',236),(5,'Vikings',20131003,'Present','Historical drama',89);\n",
      "question": "List the movies and their release years, sort by their playwright.",
      "gold_queries": [
        "SELECT playwright, title, release_year\r\nFROM Movies\r\nORDER BY playwright, release_year;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List the movies and their release years, grouped by playwright, then sorted alphabetically by playwright.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT playwright, title, release_year\nFROM Movies\nGROUP BY playwright, title, release_year\nORDER BY playwright, title"
          ]
        },
        {
          "interpretation": "List the movies and their release years, sorted alphabetically by the name of the playwright associated with each movie.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title, release_year FROM Movies ORDER BY playwright"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Streaming Service/vague_2cols_screenwriter/vague_2cols_screenwriter.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actor_id INTEGER PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    birth_date DATE,\n    nationality TEXT\n);\nCREATE TABLE Movies (\n    movie_id INTEGER PRIMARY KEY,\n    title TEXT,\n    release_year INTEGER,\n    genre TEXT,\n    novelist TEXT,\n    playwright TEXT,\n    film TEXT\n);\nCREATE TABLE Novelists (\n    novelist_id INTEGER PRIMARY KEY,\n    name TEXT\n);\nCREATE TABLE Playwrights (\n    playwright_id INTEGER PRIMARY KEY,\n    name TEXT\n);\nCREATE TABLE Subscribers (\n    subscriber_id INTEGER PRIMARY KEY,\n    username TEXT,\n    email TEXT,\n    password TEXT\n);\nCREATE TABLE TVShows (\n    tvshow_id INTEGER PRIMARY KEY,\n    show_title TEXT,\n    start_date DATE,\n    end_date DATE,\n    genre TEXT,\n    episodes INT\n);\n\nINSERT INTO \"Actors\" (actor_id,first_name,last_name,birth_date,nationality) VALUES (1,'Al Pacino',NULL,19400425,'American'),(2,'Tom Hanks',NULL,19560709,'American'),(3,'Leonardo DiCaprio',NULL,19741111,'American'),(4,'Brad Pitt',NULL,19631218,'American'),(5,'Denzel Washington',NULL,19541227,'American');\nINSERT INTO \"Movies\" (movie_id,title,release_year,genre,novelist,playwright,film) VALUES (1,'The Godfather',1972,'Crime, Drama','Mario Puzo','Francis Ford Coppola','The Godfather'),(2,'Forrest Gump',1994,'Drama, Romance','Winston Groom','Robert Zemeckis','Forrest Gump'),(3,'Inception',2010,'Action, Adventure','Unknown','Christopher Nolan','Inception'),(4,'Pulp Fiction',1994,'Crime, Drama','Quentin Tarantino & Roger Avary','Quentin Tarantino','Pulp Fiction'),(5,'Jurassic Park',1993,'Adventure, Sci-Fi','Michael Crichton','Steven Spielberg','Jurassic Park');\nINSERT INTO \"Subscribers\" (subscriber_id,username,email,password) VALUES (1,'user001','user001@gmail.com','password001'),(2,'user002','user002@yahoo.com','password002'),(3,'user003','user003@hotmail.com','password003'),(4,'user004','user004@outlook.com','password004'),(5,'user005','user005@aol.com','password005');\nINSERT INTO \"TVShows\" (tvshow_id,show_title,start_date,end_date,genre,episodes) VALUES (1,'Breaking Bad',20080117,20130929,'Crime, Drama',62),(2,'Game of Thrones',20110417,20190519,'Fantasy, Adventure',73),(3,'Stranger Things',20160715,'Present','Horror, Mystery',42),(4,'Friends',19940922,20040506,'Comedy, Romance',236),(5,'Vikings',20131003,'Present','Historical drama',89);\n",
      "question": "Provide a count of movies for each novelist and playwright.",
      "gold_queries": [
        "SELECT novelist, playwright, COUNT(*) AS Movie_Count\r\nFROM Movies\r\nGROUP BY novelist, playwright;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Determine the number of movies written by each novelist, and the number of movies directed by each playwright.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT novelist, COUNT(*) AS movies_written\nFROM Movies\nWHERE novelist != 'Unknown'\nGROUP BY novelist",
            "SELECT playwright, COUNT(*) AS movies_directed\nFROM Movies\nGROUP BY playwright"
          ]
        },
        {
          "interpretation": "Determine the number of movies written by each novelist, and the number of movies directed by each playwright.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT novelist, COUNT(*) AS movies_written\nFROM Movies\nWHERE novelist != 'Unknown'\nGROUP BY novelist",
            "SELECT playwright, COUNT(*) AS movies_directed\nFROM Movies\nGROUP BY playwright"
          ]
        },
        {
          "interpretation": "Count the number of movies for each distinct novelist and display the results.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT novelist, COUNT(*) FROM Movies GROUP BY novelist"
          ]
        },
        {
          "interpretation": "Identify each distinct novelist and playwright mentioned as associated with a movie and provide a count of their associated movies.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT novelist, COUNT(*) AS novelist_count FROM Movies GROUP BY novelist UNION SELECT playwright, COUNT(*) AS playwright_count FROM Movies GROUP BY playwright"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 6,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Streaming Service/vague_2cols_screenwriter/vague_2cols_screenwriter.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actor_id INTEGER PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    birth_date DATE,\n    nationality TEXT\n);\nCREATE TABLE Movies (\n    movie_id INTEGER PRIMARY KEY,\n    title TEXT,\n    release_year INTEGER,\n    genre TEXT,\n    novelist TEXT,\n    playwright TEXT,\n    film TEXT\n);\nCREATE TABLE Novelists (\n    novelist_id INTEGER PRIMARY KEY,\n    name TEXT\n);\nCREATE TABLE Playwrights (\n    playwright_id INTEGER PRIMARY KEY,\n    name TEXT\n);\nCREATE TABLE Subscribers (\n    subscriber_id INTEGER PRIMARY KEY,\n    username TEXT,\n    email TEXT,\n    password TEXT\n);\nCREATE TABLE TVShows (\n    tvshow_id INTEGER PRIMARY KEY,\n    show_title TEXT,\n    start_date DATE,\n    end_date DATE,\n    genre TEXT,\n    episodes INT\n);\n\nINSERT INTO \"Actors\" (actor_id,first_name,last_name,birth_date,nationality) VALUES (1,'Al Pacino',NULL,19400425,'American'),(2,'Tom Hanks',NULL,19560709,'American'),(3,'Leonardo DiCaprio',NULL,19741111,'American'),(4,'Brad Pitt',NULL,19631218,'American'),(5,'Denzel Washington',NULL,19541227,'American');\nINSERT INTO \"Movies\" (movie_id,title,release_year,genre,novelist,playwright,film) VALUES (1,'The Godfather',1972,'Crime, Drama','Mario Puzo','Francis Ford Coppola','The Godfather'),(2,'Forrest Gump',1994,'Drama, Romance','Winston Groom','Robert Zemeckis','Forrest Gump'),(3,'Inception',2010,'Action, Adventure','Unknown','Christopher Nolan','Inception'),(4,'Pulp Fiction',1994,'Crime, Drama','Quentin Tarantino & Roger Avary','Quentin Tarantino','Pulp Fiction'),(5,'Jurassic Park',1993,'Adventure, Sci-Fi','Michael Crichton','Steven Spielberg','Jurassic Park');\nINSERT INTO \"Subscribers\" (subscriber_id,username,email,password) VALUES (1,'user001','user001@gmail.com','password001'),(2,'user002','user002@yahoo.com','password002'),(3,'user003','user003@hotmail.com','password003'),(4,'user004','user004@outlook.com','password004'),(5,'user005','user005@aol.com','password005');\nINSERT INTO \"TVShows\" (tvshow_id,show_title,start_date,end_date,genre,episodes) VALUES (1,'Breaking Bad',20080117,20130929,'Crime, Drama',62),(2,'Game of Thrones',20110417,20190519,'Fantasy, Adventure',73),(3,'Stranger Things',20160715,'Present','Horror, Mystery',42),(4,'Friends',19940922,20040506,'Comedy, Romance',236),(5,'Vikings',20131003,'Present','Historical drama',89);\n",
      "question": "List the movies and their release years, sort by their novelist.",
      "gold_queries": [
        "SELECT novelist, title, release_year\r\nFROM Movies\r\nORDER BY novelist, release_year;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Retrieve the \"title\" and \"release_year\" of movies, sorting based on values in the \"novelist\" column.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title, release_year FROM Movies ORDER BY novelist"
          ]
        },
        {
          "interpretation": "Show all movies, their titles, and release years, but organize them by the name of the novelist responsible for the source material.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT title, release_year, novelist FROM Movies ORDER BY novelist"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Streaming Service/vague_2cols_screenwriter/vague_2cols_screenwriter.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actor_id INTEGER PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    birth_date DATE,\n    nationality TEXT\n);\nCREATE TABLE Movies (\n    movie_id INTEGER PRIMARY KEY,\n    title TEXT,\n    release_year INTEGER,\n    genre TEXT,\n    novelist TEXT,\n    playwright TEXT,\n    film TEXT\n);\nCREATE TABLE Novelists (\n    novelist_id INTEGER PRIMARY KEY,\n    name TEXT\n);\nCREATE TABLE Playwrights (\n    playwright_id INTEGER PRIMARY KEY,\n    name TEXT\n);\nCREATE TABLE Subscribers (\n    subscriber_id INTEGER PRIMARY KEY,\n    username TEXT,\n    email TEXT,\n    password TEXT\n);\nCREATE TABLE TVShows (\n    tvshow_id INTEGER PRIMARY KEY,\n    show_title TEXT,\n    start_date DATE,\n    end_date DATE,\n    genre TEXT,\n    episodes INT\n);\n\nINSERT INTO \"Actors\" (actor_id,first_name,last_name,birth_date,nationality) VALUES (1,'Al Pacino',NULL,19400425,'American'),(2,'Tom Hanks',NULL,19560709,'American'),(3,'Leonardo DiCaprio',NULL,19741111,'American'),(4,'Brad Pitt',NULL,19631218,'American'),(5,'Denzel Washington',NULL,19541227,'American');\nINSERT INTO \"Movies\" (movie_id,title,release_year,genre,novelist,playwright,film) VALUES (1,'The Godfather',1972,'Crime, Drama','Mario Puzo','Francis Ford Coppola','The Godfather'),(2,'Forrest Gump',1994,'Drama, Romance','Winston Groom','Robert Zemeckis','Forrest Gump'),(3,'Inception',2010,'Action, Adventure','Unknown','Christopher Nolan','Inception'),(4,'Pulp Fiction',1994,'Crime, Drama','Quentin Tarantino & Roger Avary','Quentin Tarantino','Pulp Fiction'),(5,'Jurassic Park',1993,'Adventure, Sci-Fi','Michael Crichton','Steven Spielberg','Jurassic Park');\nINSERT INTO \"Subscribers\" (subscriber_id,username,email,password) VALUES (1,'user001','user001@gmail.com','password001'),(2,'user002','user002@yahoo.com','password002'),(3,'user003','user003@hotmail.com','password003'),(4,'user004','user004@outlook.com','password004'),(5,'user005','user005@aol.com','password005');\nINSERT INTO \"TVShows\" (tvshow_id,show_title,start_date,end_date,genre,episodes) VALUES (1,'Breaking Bad',20080117,20130929,'Crime, Drama',62),(2,'Game of Thrones',20110417,20190519,'Fantasy, Adventure',73),(3,'Stranger Things',20160715,'Present','Horror, Mystery',42),(4,'Friends',19940922,20040506,'Comedy, Romance',236),(5,'Vikings',20131003,'Present','Historical drama',89);\n",
      "question": "List the movies along with their release years, sorted by writer",
      "gold_queries": [
        "SELECT novelist, title, release_year\r\nFROM Movies\r\nORDER BY novelist, release_year;",
        "SELECT playwright, title, release_year\r\nFROM Movies\r\nORDER BY playwright, release_year;",
        "SELECT novelist, playwright, title, release_year\r\nFROM Movies\r\nORDER BY novelist, playwright, release_year;"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List movies and release years, ordered by the \"playwright\" column.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title, release_year FROM Movies ORDER BY playwright"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Streaming Service/vague_2cols_premiere_date/vague_2cols_premiere_date.sqlite",
      "db_dump": "CREATE TABLE Content (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT ,\n    title TEXT,\n    genre TEXT,\n    creator TEXT,\n    numEpisodesOrDuration INTEGER,\n    premiereMonth INTEGER,\n    premiereYear INTEGER,\n    season INT DEFAULT 1,\n    FOREIGN KEY(creator) REFERENCES Creators(id));\nCREATE TABLE Creators (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    birthYear INTEGER);\nCREATE TABLE Movies (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    genre TEXT,\n    director TEXT,\n    runtime INTEGER,\n    release_date DATE);\nCREATE TABLE Reviews (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    userId INTEGER,\n    contentId INTEGER,\n    rating INTEGER ,\n    reviewText TEXT,\n    FOREIGN KEY(userId) REFERENCES Users(id),\n    FOREIGN KEY(contentId) REFERENCES Content(id));\nCREATE TABLE Series (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    genre TEXT,\n    creator TEXT,\n    episodeCount INTEGER,\n    premiereDate DATE);\nCREATE TABLE Users (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    username TEXT,\n    password TEXT,\n    email TEXT,\n    subscriptionType TEXT );\n\nINSERT INTO \"Content\" (id,type,title,genre,creator,numEpisodesOrDuration,premiereMonth,premiereYear,season) VALUES (1,'TV Series','Stranger Things','Science Fiction','The Duffer Brothers',8,7,2016,1),(2,'Film','Inception','Action, Adventure, Sci-Fi','Christopher Nolan',128,7,2010,NULL);\nINSERT INTO \"Creators\" (id,name,birthYear) VALUES (1,'Quentin Tarantino',1963),(2,'James Cameron',1954);\nINSERT INTO \"Movies\" (id,title,genre,director,runtime,release_date) VALUES (1,'The Shawshank Redemption','Drama','Frank Darabont',142,'1994-09-23'),(2,'The Godfather','Crime','Francis Ford Coppola',175,'1972-03-24');\nINSERT INTO \"Reviews\" (id,userId,contentId,rating,reviewText) VALUES (1,1,1,5,'Great movie with a powerful story.'),(2,2,2,4,'Awesome series with amazing characters.');\nINSERT INTO \"Series\" (id,title,genre,creator,episodeCount,premiereDate) VALUES (1,'Breaking Bad','Crime Drama','Vince Gilligan',62,'2008-01-20'),(2,'Game of Thrones','Fantasy','David Benioff and D.B. Weiss',60,'2011-04-17');\nINSERT INTO \"Users\" (id,username,password,email,subscriptionType) VALUES (1,'user1','password1','user1@example.com','Premium'),(2,'user2','password2','user2@example.com','Standard');\n",
      "question": "What is the content type, title and premiere date where user rating is equal to 5",
      "gold_queries": [
        "Select type, title, premiereMonth FROM Content JOIN Reviews ON Reviews.Contentid=Content.id WHERE rating=5;",
        "Select type, title, premiereYear FROM Content JOIN Reviews ON Reviews.Contentid=Content.id WHERE rating=5;",
        "Select type, title, premiereMonth, premiereYear FROM Content JOIN Reviews ON Reviews.Contentid=Content.id WHERE rating=5;"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Content type, title, and premiere date of the content reviewed with a rating of 5 by any user",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.type, C.title, C.premiereMonth, C.premiereYear \nFROM Content C \nJOIN Reviews R ON C.id = R.contentId \nWHERE R.rating = 5"
          ]
        },
        {
          "interpretation": "Find the content type, title, and premiere date where the review rating is 5.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.type, C.title, C.premiereYear\nFROM Content C\nJOIN Reviews R ON C.id = R.contentId\nWHERE R.rating = 5"
          ]
        },
        {
          "interpretation": "Content type, title, and premiere date for content with a user rating of 5",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.type, C.title, DATE(C.premiereMonth || '-01-' || C.premiereYear) AS premiereDate\nFROM Content C\nJOIN Reviews R ON C.id = R.contentId\nWHERE R.rating = 5"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.6666666666666666,
        "precision": 0.6666666666666666,
        "f1_score": 0.6666666666666666,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Streaming Service/vague_2cols_premiere_date/vague_2cols_premiere_date.sqlite",
      "db_dump": "CREATE TABLE Content (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT ,\n    title TEXT,\n    genre TEXT,\n    creator TEXT,\n    numEpisodesOrDuration INTEGER,\n    premiereMonth INTEGER,\n    premiereYear INTEGER,\n    season INT DEFAULT 1,\n    FOREIGN KEY(creator) REFERENCES Creators(id));\nCREATE TABLE Creators (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    birthYear INTEGER);\nCREATE TABLE Movies (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    genre TEXT,\n    director TEXT,\n    runtime INTEGER,\n    release_date DATE);\nCREATE TABLE Reviews (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    userId INTEGER,\n    contentId INTEGER,\n    rating INTEGER ,\n    reviewText TEXT,\n    FOREIGN KEY(userId) REFERENCES Users(id),\n    FOREIGN KEY(contentId) REFERENCES Content(id));\nCREATE TABLE Series (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    genre TEXT,\n    creator TEXT,\n    episodeCount INTEGER,\n    premiereDate DATE);\nCREATE TABLE Users (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    username TEXT,\n    password TEXT,\n    email TEXT,\n    subscriptionType TEXT );\n\nINSERT INTO \"Content\" (id,type,title,genre,creator,numEpisodesOrDuration,premiereMonth,premiereYear,season) VALUES (1,'TV Series','Stranger Things','Science Fiction','The Duffer Brothers',8,7,2016,1),(2,'Film','Inception','Action, Adventure, Sci-Fi','Christopher Nolan',128,7,2010,NULL);\nINSERT INTO \"Creators\" (id,name,birthYear) VALUES (1,'Quentin Tarantino',1963),(2,'James Cameron',1954);\nINSERT INTO \"Movies\" (id,title,genre,director,runtime,release_date) VALUES (1,'The Shawshank Redemption','Drama','Frank Darabont',142,'1994-09-23'),(2,'The Godfather','Crime','Francis Ford Coppola',175,'1972-03-24');\nINSERT INTO \"Reviews\" (id,userId,contentId,rating,reviewText) VALUES (1,1,1,5,'Great movie with a powerful story.'),(2,2,2,4,'Awesome series with amazing characters.');\nINSERT INTO \"Series\" (id,title,genre,creator,episodeCount,premiereDate) VALUES (1,'Breaking Bad','Crime Drama','Vince Gilligan',62,'2008-01-20'),(2,'Game of Thrones','Fantasy','David Benioff and D.B. Weiss',60,'2011-04-17');\nINSERT INTO \"Users\" (id,username,password,email,subscriptionType) VALUES (1,'user1','password1','user1@example.com','Premium'),(2,'user2','password2','user2@example.com','Standard');\n",
      "question": "What is the content type, title and premiere month and year where user rating is equal to 5",
      "gold_queries": [
        "Select type, title, premiereMonth, premiereYear FROM Content JOIN Reviews ON Reviews.Contentid=Content.id WHERE rating=5;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Find the content type, title, premiere month and year for reviews with a rating of 5",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT C.type, C.title, C.premiereMonth, C.premiereYear\nFROM Reviews R\nJOIN Content C ON R.contentId = C.id\nWHERE R.rating = 5"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Streaming Service/vague_2cols_premiere_date/vague_2cols_premiere_date.sqlite",
      "db_dump": "CREATE TABLE Content (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT ,\n    title TEXT,\n    genre TEXT,\n    creator TEXT,\n    numEpisodesOrDuration INTEGER,\n    premiereMonth INTEGER,\n    premiereYear INTEGER,\n    season INT DEFAULT 1,\n    FOREIGN KEY(creator) REFERENCES Creators(id));\nCREATE TABLE Creators (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    birthYear INTEGER);\nCREATE TABLE Movies (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    genre TEXT,\n    director TEXT,\n    runtime INTEGER,\n    release_date DATE);\nCREATE TABLE Reviews (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    userId INTEGER,\n    contentId INTEGER,\n    rating INTEGER ,\n    reviewText TEXT,\n    FOREIGN KEY(userId) REFERENCES Users(id),\n    FOREIGN KEY(contentId) REFERENCES Content(id));\nCREATE TABLE Series (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    genre TEXT,\n    creator TEXT,\n    episodeCount INTEGER,\n    premiereDate DATE);\nCREATE TABLE Users (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    username TEXT,\n    password TEXT,\n    email TEXT,\n    subscriptionType TEXT );\n\nINSERT INTO \"Content\" (id,type,title,genre,creator,numEpisodesOrDuration,premiereMonth,premiereYear,season) VALUES (1,'TV Series','Stranger Things','Science Fiction','The Duffer Brothers',8,7,2016,1),(2,'Film','Inception','Action, Adventure, Sci-Fi','Christopher Nolan',128,7,2010,NULL);\nINSERT INTO \"Creators\" (id,name,birthYear) VALUES (1,'Quentin Tarantino',1963),(2,'James Cameron',1954);\nINSERT INTO \"Movies\" (id,title,genre,director,runtime,release_date) VALUES (1,'The Shawshank Redemption','Drama','Frank Darabont',142,'1994-09-23'),(2,'The Godfather','Crime','Francis Ford Coppola',175,'1972-03-24');\nINSERT INTO \"Reviews\" (id,userId,contentId,rating,reviewText) VALUES (1,1,1,5,'Great movie with a powerful story.'),(2,2,2,4,'Awesome series with amazing characters.');\nINSERT INTO \"Series\" (id,title,genre,creator,episodeCount,premiereDate) VALUES (1,'Breaking Bad','Crime Drama','Vince Gilligan',62,'2008-01-20'),(2,'Game of Thrones','Fantasy','David Benioff and D.B. Weiss',60,'2011-04-17');\nINSERT INTO \"Users\" (id,username,password,email,subscriptionType) VALUES (1,'user1','password1','user1@example.com','Premium'),(2,'user2','password2','user2@example.com','Standard');\n",
      "question": "What is the content type, title and premiere year where user rating is equal to 5",
      "gold_queries": [
        "Select type, title, premiereYear FROM Content JOIN Reviews ON Reviews.Contentid=Content.id WHERE rating=5;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List the content type, title, and premiere year for each piece of content with a user rating of 5.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT C.type, C.title, C.premiereYear \nFROM Content C \nJOIN Reviews R ON C.id = R.contentId \nWHERE R.rating = 5"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Streaming Service/vague_2cols_premiere_date/vague_2cols_premiere_date.sqlite",
      "db_dump": "CREATE TABLE Content (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT ,\n    title TEXT,\n    genre TEXT,\n    creator TEXT,\n    numEpisodesOrDuration INTEGER,\n    premiereMonth INTEGER,\n    premiereYear INTEGER,\n    season INT DEFAULT 1,\n    FOREIGN KEY(creator) REFERENCES Creators(id));\nCREATE TABLE Creators (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    birthYear INTEGER);\nCREATE TABLE Movies (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    genre TEXT,\n    director TEXT,\n    runtime INTEGER,\n    release_date DATE);\nCREATE TABLE Reviews (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    userId INTEGER,\n    contentId INTEGER,\n    rating INTEGER ,\n    reviewText TEXT,\n    FOREIGN KEY(userId) REFERENCES Users(id),\n    FOREIGN KEY(contentId) REFERENCES Content(id));\nCREATE TABLE Series (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    genre TEXT,\n    creator TEXT,\n    episodeCount INTEGER,\n    premiereDate DATE);\nCREATE TABLE Users (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    username TEXT,\n    password TEXT,\n    email TEXT,\n    subscriptionType TEXT );\n\nINSERT INTO \"Content\" (id,type,title,genre,creator,numEpisodesOrDuration,premiereMonth,premiereYear,season) VALUES (1,'TV Series','Stranger Things','Science Fiction','The Duffer Brothers',8,7,2016,1),(2,'Film','Inception','Action, Adventure, Sci-Fi','Christopher Nolan',128,7,2010,NULL);\nINSERT INTO \"Creators\" (id,name,birthYear) VALUES (1,'Quentin Tarantino',1963),(2,'James Cameron',1954);\nINSERT INTO \"Movies\" (id,title,genre,director,runtime,release_date) VALUES (1,'The Shawshank Redemption','Drama','Frank Darabont',142,'1994-09-23'),(2,'The Godfather','Crime','Francis Ford Coppola',175,'1972-03-24');\nINSERT INTO \"Reviews\" (id,userId,contentId,rating,reviewText) VALUES (1,1,1,5,'Great movie with a powerful story.'),(2,2,2,4,'Awesome series with amazing characters.');\nINSERT INTO \"Series\" (id,title,genre,creator,episodeCount,premiereDate) VALUES (1,'Breaking Bad','Crime Drama','Vince Gilligan',62,'2008-01-20'),(2,'Game of Thrones','Fantasy','David Benioff and D.B. Weiss',60,'2011-04-17');\nINSERT INTO \"Users\" (id,username,password,email,subscriptionType) VALUES (1,'user1','password1','user1@example.com','Premium'),(2,'user2','password2','user2@example.com','Standard');\n",
      "question": "What's the type, name, genre and premiere month of the content?",
      "gold_queries": [
        "SELECT type, title, genre, premiereMonth FROM Content"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List the type, name, genre, and premiere month for each content piece.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT type, title AS name, genre, premiereMonth FROM Content"
          ]
        },
        {
          "interpretation": "What information can tell me about the content type?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT type FROM Content"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Streaming Service/vague_2cols_premiere_date/vague_2cols_premiere_date.sqlite",
      "db_dump": "CREATE TABLE Content (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT ,\n    title TEXT,\n    genre TEXT,\n    creator TEXT,\n    numEpisodesOrDuration INTEGER,\n    premiereMonth INTEGER,\n    premiereYear INTEGER,\n    season INT DEFAULT 1,\n    FOREIGN KEY(creator) REFERENCES Creators(id));\nCREATE TABLE Creators (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    birthYear INTEGER);\nCREATE TABLE Movies (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    genre TEXT,\n    director TEXT,\n    runtime INTEGER,\n    release_date DATE);\nCREATE TABLE Reviews (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    userId INTEGER,\n    contentId INTEGER,\n    rating INTEGER ,\n    reviewText TEXT,\n    FOREIGN KEY(userId) REFERENCES Users(id),\n    FOREIGN KEY(contentId) REFERENCES Content(id));\nCREATE TABLE Series (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    genre TEXT,\n    creator TEXT,\n    episodeCount INTEGER,\n    premiereDate DATE);\nCREATE TABLE Users (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    username TEXT,\n    password TEXT,\n    email TEXT,\n    subscriptionType TEXT );\n\nINSERT INTO \"Content\" (id,type,title,genre,creator,numEpisodesOrDuration,premiereMonth,premiereYear,season) VALUES (1,'TV Series','Stranger Things','Science Fiction','The Duffer Brothers',8,7,2016,1),(2,'Film','Inception','Action, Adventure, Sci-Fi','Christopher Nolan',128,7,2010,NULL);\nINSERT INTO \"Creators\" (id,name,birthYear) VALUES (1,'Quentin Tarantino',1963),(2,'James Cameron',1954);\nINSERT INTO \"Movies\" (id,title,genre,director,runtime,release_date) VALUES (1,'The Shawshank Redemption','Drama','Frank Darabont',142,'1994-09-23'),(2,'The Godfather','Crime','Francis Ford Coppola',175,'1972-03-24');\nINSERT INTO \"Reviews\" (id,userId,contentId,rating,reviewText) VALUES (1,1,1,5,'Great movie with a powerful story.'),(2,2,2,4,'Awesome series with amazing characters.');\nINSERT INTO \"Series\" (id,title,genre,creator,episodeCount,premiereDate) VALUES (1,'Breaking Bad','Crime Drama','Vince Gilligan',62,'2008-01-20'),(2,'Game of Thrones','Fantasy','David Benioff and D.B. Weiss',60,'2011-04-17');\nINSERT INTO \"Users\" (id,username,password,email,subscriptionType) VALUES (1,'user1','password1','user1@example.com','Premium'),(2,'user2','password2','user2@example.com','Standard');\n",
      "question": "What is the content type, title and premiere month where user rating is equal to 5",
      "gold_queries": [
        "Select type, title, premiereMonth FROM Content JOIN Reviews ON Reviews.Contentid=Content.id WHERE rating=5;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What are the content type, title, and premiere month of the content with a user rating of 5?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT C.type, C.title, C.premiereMonth\nFROM Content C\nJOIN Reviews R ON C.id = R.contentId\nWHERE R.rating = 5"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Streaming Service/vague_2cols_premiere_date/vague_2cols_premiere_date.sqlite",
      "db_dump": "CREATE TABLE Content (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT ,\n    title TEXT,\n    genre TEXT,\n    creator TEXT,\n    numEpisodesOrDuration INTEGER,\n    premiereMonth INTEGER,\n    premiereYear INTEGER,\n    season INT DEFAULT 1,\n    FOREIGN KEY(creator) REFERENCES Creators(id));\nCREATE TABLE Creators (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    birthYear INTEGER);\nCREATE TABLE Movies (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    genre TEXT,\n    director TEXT,\n    runtime INTEGER,\n    release_date DATE);\nCREATE TABLE Reviews (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    userId INTEGER,\n    contentId INTEGER,\n    rating INTEGER ,\n    reviewText TEXT,\n    FOREIGN KEY(userId) REFERENCES Users(id),\n    FOREIGN KEY(contentId) REFERENCES Content(id));\nCREATE TABLE Series (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    genre TEXT,\n    creator TEXT,\n    episodeCount INTEGER,\n    premiereDate DATE);\nCREATE TABLE Users (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    username TEXT,\n    password TEXT,\n    email TEXT,\n    subscriptionType TEXT );\n\nINSERT INTO \"Content\" (id,type,title,genre,creator,numEpisodesOrDuration,premiereMonth,premiereYear,season) VALUES (1,'TV Series','Stranger Things','Science Fiction','The Duffer Brothers',8,7,2016,1),(2,'Film','Inception','Action, Adventure, Sci-Fi','Christopher Nolan',128,7,2010,NULL);\nINSERT INTO \"Creators\" (id,name,birthYear) VALUES (1,'Quentin Tarantino',1963),(2,'James Cameron',1954);\nINSERT INTO \"Movies\" (id,title,genre,director,runtime,release_date) VALUES (1,'The Shawshank Redemption','Drama','Frank Darabont',142,'1994-09-23'),(2,'The Godfather','Crime','Francis Ford Coppola',175,'1972-03-24');\nINSERT INTO \"Reviews\" (id,userId,contentId,rating,reviewText) VALUES (1,1,1,5,'Great movie with a powerful story.'),(2,2,2,4,'Awesome series with amazing characters.');\nINSERT INTO \"Series\" (id,title,genre,creator,episodeCount,premiereDate) VALUES (1,'Breaking Bad','Crime Drama','Vince Gilligan',62,'2008-01-20'),(2,'Game of Thrones','Fantasy','David Benioff and D.B. Weiss',60,'2011-04-17');\nINSERT INTO \"Users\" (id,username,password,email,subscriptionType) VALUES (1,'user1','password1','user1@example.com','Premium'),(2,'user2','password2','user2@example.com','Standard');\n",
      "question": "What's the type, name, genre and premiere month and year of the content?",
      "gold_queries": [
        "SELECT type, title, genre, premiereMonth, premiereYear FROM Content"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What is the content type, creator name, genre, and premiere month and year?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.type, Cr.name, C.genre, C.premiereMonth, C.premiereYear\nFROM Content C\nJOIN Creators Cr ON C.creator = Cr.id"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Streaming Service/vague_2cols_premiere_date/vague_2cols_premiere_date.sqlite",
      "db_dump": "CREATE TABLE Content (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT ,\n    title TEXT,\n    genre TEXT,\n    creator TEXT,\n    numEpisodesOrDuration INTEGER,\n    premiereMonth INTEGER,\n    premiereYear INTEGER,\n    season INT DEFAULT 1,\n    FOREIGN KEY(creator) REFERENCES Creators(id));\nCREATE TABLE Creators (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    birthYear INTEGER);\nCREATE TABLE Movies (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    genre TEXT,\n    director TEXT,\n    runtime INTEGER,\n    release_date DATE);\nCREATE TABLE Reviews (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    userId INTEGER,\n    contentId INTEGER,\n    rating INTEGER ,\n    reviewText TEXT,\n    FOREIGN KEY(userId) REFERENCES Users(id),\n    FOREIGN KEY(contentId) REFERENCES Content(id));\nCREATE TABLE Series (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    genre TEXT,\n    creator TEXT,\n    episodeCount INTEGER,\n    premiereDate DATE);\nCREATE TABLE Users (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    username TEXT,\n    password TEXT,\n    email TEXT,\n    subscriptionType TEXT );\n\nINSERT INTO \"Content\" (id,type,title,genre,creator,numEpisodesOrDuration,premiereMonth,premiereYear,season) VALUES (1,'TV Series','Stranger Things','Science Fiction','The Duffer Brothers',8,7,2016,1),(2,'Film','Inception','Action, Adventure, Sci-Fi','Christopher Nolan',128,7,2010,NULL);\nINSERT INTO \"Creators\" (id,name,birthYear) VALUES (1,'Quentin Tarantino',1963),(2,'James Cameron',1954);\nINSERT INTO \"Movies\" (id,title,genre,director,runtime,release_date) VALUES (1,'The Shawshank Redemption','Drama','Frank Darabont',142,'1994-09-23'),(2,'The Godfather','Crime','Francis Ford Coppola',175,'1972-03-24');\nINSERT INTO \"Reviews\" (id,userId,contentId,rating,reviewText) VALUES (1,1,1,5,'Great movie with a powerful story.'),(2,2,2,4,'Awesome series with amazing characters.');\nINSERT INTO \"Series\" (id,title,genre,creator,episodeCount,premiereDate) VALUES (1,'Breaking Bad','Crime Drama','Vince Gilligan',62,'2008-01-20'),(2,'Game of Thrones','Fantasy','David Benioff and D.B. Weiss',60,'2011-04-17');\nINSERT INTO \"Users\" (id,username,password,email,subscriptionType) VALUES (1,'user1','password1','user1@example.com','Premium'),(2,'user2','password2','user2@example.com','Standard');\n",
      "question": "What's the type, name, genre and premiere year of the content?",
      "gold_queries": [
        "SELECT type, title, genre, premiereYear FROM Content"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What type, name, genre, and premiere year are associated with content of a specific genre?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT type, title, genre, premiereYear FROM Content WHERE genre = 'Science Fiction'"
          ]
        },
        {
          "interpretation": "What type, name, genre, and premiere year are associated with the content created by a specific creator?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.type, Cr.name, C.genre, C.premiereYear \nFROM Content C \nJOIN Creators Cr ON C.creator = Cr.id \nWHERE Cr.name = 'The Duffer Brothers'"
          ]
        },
        {
          "interpretation": "What type, name, genre, and premiere year are associated with all content?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT type, title, genre, premiereYear FROM Content"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Streaming Service/vague_2cols_premiere_date/vague_2cols_premiere_date.sqlite",
      "db_dump": "CREATE TABLE Content (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT ,\n    title TEXT,\n    genre TEXT,\n    creator TEXT,\n    numEpisodesOrDuration INTEGER,\n    premiereMonth INTEGER,\n    premiereYear INTEGER,\n    season INT DEFAULT 1,\n    FOREIGN KEY(creator) REFERENCES Creators(id));\nCREATE TABLE Creators (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    birthYear INTEGER);\nCREATE TABLE Movies (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    genre TEXT,\n    director TEXT,\n    runtime INTEGER,\n    release_date DATE);\nCREATE TABLE Reviews (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    userId INTEGER,\n    contentId INTEGER,\n    rating INTEGER ,\n    reviewText TEXT,\n    FOREIGN KEY(userId) REFERENCES Users(id),\n    FOREIGN KEY(contentId) REFERENCES Content(id));\nCREATE TABLE Series (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    genre TEXT,\n    creator TEXT,\n    episodeCount INTEGER,\n    premiereDate DATE);\nCREATE TABLE Users (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    username TEXT,\n    password TEXT,\n    email TEXT,\n    subscriptionType TEXT );\n\nINSERT INTO \"Content\" (id,type,title,genre,creator,numEpisodesOrDuration,premiereMonth,premiereYear,season) VALUES (1,'TV Series','Stranger Things','Science Fiction','The Duffer Brothers',8,7,2016,1),(2,'Film','Inception','Action, Adventure, Sci-Fi','Christopher Nolan',128,7,2010,NULL);\nINSERT INTO \"Creators\" (id,name,birthYear) VALUES (1,'Quentin Tarantino',1963),(2,'James Cameron',1954);\nINSERT INTO \"Movies\" (id,title,genre,director,runtime,release_date) VALUES (1,'The Shawshank Redemption','Drama','Frank Darabont',142,'1994-09-23'),(2,'The Godfather','Crime','Francis Ford Coppola',175,'1972-03-24');\nINSERT INTO \"Reviews\" (id,userId,contentId,rating,reviewText) VALUES (1,1,1,5,'Great movie with a powerful story.'),(2,2,2,4,'Awesome series with amazing characters.');\nINSERT INTO \"Series\" (id,title,genre,creator,episodeCount,premiereDate) VALUES (1,'Breaking Bad','Crime Drama','Vince Gilligan',62,'2008-01-20'),(2,'Game of Thrones','Fantasy','David Benioff and D.B. Weiss',60,'2011-04-17');\nINSERT INTO \"Users\" (id,username,password,email,subscriptionType) VALUES (1,'user1','password1','user1@example.com','Premium'),(2,'user2','password2','user2@example.com','Standard');\n",
      "question": "What's the type, name, genre and premiere date of the content?",
      "gold_queries": [
        "SELECT type, title, genre, premiereMonth FROM Content",
        "SELECT type, title, genre, premiereYear FROM Content",
        "SELECT type, title, genre, premiereMonth, premiereYear FROM Content"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "\"Content\" referring to a specific, previously mentioned item.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title, genre FROM Content WHERE title = 'Stranger Things'"
          ]
        },
        {
          "interpretation": "What content type is, what is the creator's name, what is the genre, and what is the premiere date?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.type, CR.name, C.genre, CASE WHEN C.type = 'TV Series' THEN (SELECT premiereDate FROM Series WHERE id = C.id) WHEN C.type = 'Film' THEN (SELECT release_date FROM Movies WHERE title = C.title) END AS premiereDate\nFROM Content C\nJOIN Creators CR ON C.creator = CR.id"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Construction/vague_2cols_maintenance_cost/vague_2cols_maintenance_cost.sqlite",
      "db_dump": "CREATE TABLE Equipment(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    EquipName TEXT,\n    PurchasePrice REAL,\n    RentalRate REAL,\n    DailyUsage INT);\nCREATE TABLE Materials(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    MaterialName TEXT,\n    Quantity INT,\n    UnitCost REAL);\nCREATE TABLE Project (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    StartDate DATE,\n    EndDate DATE,\n    Monetary_Value REAL,\n    Percentage_Of_Budget REAL,\n    Infrastructure TEXT);\nCREATE TABLE Worker(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    JobTitle TEXT);\n\nINSERT INTO \"Equipment\" (id,EquipName,PurchasePrice,RentalRate,DailyUsage) VALUES (1,'Excavator',20000.0,1000.0,8),(2,'Crane',30000.0,1500.0,6);\nINSERT INTO \"Materials\" (id,MaterialName,Quantity,UnitCost) VALUES (1,'Concrete Blocks',500,5.0),(2,'Bricks',300,3.5);\nINSERT INTO \"Project\" (id,Name,StartDate,EndDate,Monetary_Value,Percentage_Of_Budget,Infrastructure) VALUES (1,'Project1','2023-01-01','2023-06-01',500000.0,75.0,'Residential Building'),(2,'Project2','2023-02-01','2023-08-01',900000.0,80.0,'Commercial Complex');\nINSERT INTO \"Worker\" (id,FirstName,LastName,JobTitle) VALUES (1,'John','Doe','Carpenter'),(2,'Jane','Smith','Electrician');\n",
      "question": "What's the monetary value of the longest project?",
      "gold_queries": [
        "SELECT Monetary_Value\r\nFROM Project\r\nWHERE JULIANDAY(EndDate) - JULIANDAY(StartDate) = (\r\n    SELECT MAX(JULIANDAY(EndDate) - JULIANDAY(StartDate))\r\n    FROM Project\r\n)"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "The sum of all monetary values of projects.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT SUM(Monetary_Value) FROM Project"
          ]
        },
        {
          "interpretation": "The monetary value of the project having the maximum \"EndDate\" date.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Monetary_Value FROM Project WHERE EndDate = (SELECT MAX(EndDate) FROM Project)"
          ]
        },
        {
          "interpretation": "The monetary value of the project with the greatest duration.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Monetary_Value FROM Project ORDER BY (EndDate - StartDate) DESC LIMIT 1"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Construction/vague_2cols_maintenance_cost/vague_2cols_maintenance_cost.sqlite",
      "db_dump": "CREATE TABLE Equipment(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    EquipName TEXT,\n    PurchasePrice REAL,\n    RentalRate REAL,\n    DailyUsage INT);\nCREATE TABLE Materials(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    MaterialName TEXT,\n    Quantity INT,\n    UnitCost REAL);\nCREATE TABLE Project (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    StartDate DATE,\n    EndDate DATE,\n    Monetary_Value REAL,\n    Percentage_Of_Budget REAL,\n    Infrastructure TEXT);\nCREATE TABLE Worker(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    JobTitle TEXT);\n\nINSERT INTO \"Equipment\" (id,EquipName,PurchasePrice,RentalRate,DailyUsage) VALUES (1,'Excavator',20000.0,1000.0,8),(2,'Crane',30000.0,1500.0,6);\nINSERT INTO \"Materials\" (id,MaterialName,Quantity,UnitCost) VALUES (1,'Concrete Blocks',500,5.0),(2,'Bricks',300,3.5);\nINSERT INTO \"Project\" (id,Name,StartDate,EndDate,Monetary_Value,Percentage_Of_Budget,Infrastructure) VALUES (1,'Project1','2023-01-01','2023-06-01',500000.0,75.0,'Residential Building'),(2,'Project2','2023-02-01','2023-08-01',900000.0,80.0,'Commercial Complex');\nINSERT INTO \"Worker\" (id,FirstName,LastName,JobTitle) VALUES (1,'John','Doe','Carpenter'),(2,'Jane','Smith','Electrician');\n",
      "question": "What's the maintenance cost of Residential Building?",
      "gold_queries": [
        "SELECT Monetary_Value\r\nFROM Project\r\nWHERE Infrastructure = \"Residential Building\"",
        "SELECT Percentage_Of_Budget\r\nFROM Project\r\nWHERE Infrastructure = \"Residential Building\"",
        "SELECT Monetary_Value, Percentage_Of_Budget\r\nFROM Project\r\nWHERE Infrastructure = \"Residential Building\""
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What is the total cost associated with maintaining the Residential Building project?",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Monetary_Value \nFROM Project \nWHERE Infrastructure = 'Residential Building'"
          ]
        },
        {
          "interpretation": "What is the estimated ongoing cost of maintaining the Residential Building?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT SUM(Equipment.RentalRate * Equipment.DailyUsage) AS OngoingCost\nFROM Equipment\nJOIN Project ON 1=1\nWHERE Project.Infrastructure = 'Residential Building'"
          ]
        },
        {
          "interpretation": "Is there any historical data on maintenance costs for similar residential buildings?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Project WHERE Infrastructure = 'Residential Building'"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.3333333333333333,
        "precision": 0.3333333333333333,
        "f1_score": 0.3333333333333333,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Construction/vague_2cols_maintenance_cost/vague_2cols_maintenance_cost.sqlite",
      "db_dump": "CREATE TABLE Equipment(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    EquipName TEXT,\n    PurchasePrice REAL,\n    RentalRate REAL,\n    DailyUsage INT);\nCREATE TABLE Materials(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    MaterialName TEXT,\n    Quantity INT,\n    UnitCost REAL);\nCREATE TABLE Project (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    StartDate DATE,\n    EndDate DATE,\n    Monetary_Value REAL,\n    Percentage_Of_Budget REAL,\n    Infrastructure TEXT);\nCREATE TABLE Worker(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    JobTitle TEXT);\n\nINSERT INTO \"Equipment\" (id,EquipName,PurchasePrice,RentalRate,DailyUsage) VALUES (1,'Excavator',20000.0,1000.0,8),(2,'Crane',30000.0,1500.0,6);\nINSERT INTO \"Materials\" (id,MaterialName,Quantity,UnitCost) VALUES (1,'Concrete Blocks',500,5.0),(2,'Bricks',300,3.5);\nINSERT INTO \"Project\" (id,Name,StartDate,EndDate,Monetary_Value,Percentage_Of_Budget,Infrastructure) VALUES (1,'Project1','2023-01-01','2023-06-01',500000.0,75.0,'Residential Building'),(2,'Project2','2023-02-01','2023-08-01',900000.0,80.0,'Commercial Complex');\nINSERT INTO \"Worker\" (id,FirstName,LastName,JobTitle) VALUES (1,'John','Doe','Carpenter'),(2,'Jane','Smith','Electrician');\n",
      "question": "How much money and what percentage of the budget can we use for maintenance on the residential building?",
      "gold_queries": [
        "SELECT Monetary_Value, Percentage_Of_Budget\r\nFROM Project\r\nWHERE Infrastructure = \"Residential Building\""
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Is there a separate budget line item for maintenance in Project1?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Monetary_Value FROM Project WHERE Name = 'Project1' AND Infrastructure LIKE '%Maintenance%'"
          ]
        },
        {
          "interpretation": "What percentage of Project1's budget is designated for maintenance?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Percentage_Of_Budget FROM Project WHERE Name = 'Project1'"
          ]
        },
        {
          "interpretation": "How much money is allocated to maintenance in Project1?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Monetary_Value FROM Project WHERE Name = 'Project1'"
          ]
        },
        {
          "interpretation": "What percentage of Project1's total cost could be reasonably attributed to maintenance expenses?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Percentage_Of_Budget * 0.10 FROM Project WHERE Name = 'Project1'"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Construction/vague_2cols_safety_measures/vague_2cols_safety_measures.sqlite",
      "db_dump": "CREATE TABLE Employee (\n    employeeID INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    hireDate DATE,\n    position TEXT);\nCREATE TABLE Inventory (\n    inventoryID INTEGER PRIMARY KEY,\n    materialID INTEGER,\n    quantity INTEGER DEFAULT 0,\n    FOREIGN KEY(materialID) REFERENCES Material(materialID));\nCREATE TABLE Material (\n    materialID INTEGER PRIMARY KEY,\n    name TEXT,\n    quantity INTEGER DEFAULT 0,\n    cost REAL);\nCREATE TABLE Project (\n    projectID INTEGER PRIMARY KEY,\n    projectName TEXT,\n    startDate DATE,\n    endDate DATE,\n    budget REAL);\nCREATE TABLE Safety (\n    safetyID INTEGER PRIMARY KEY,\n    employeeID INTEGER,\n    personalProtectiveEquipment TEXT,\n    trainingPrograms TEXT,\n    constructionWorker TEXT,\n    FOREIGN KEY(employeeID) REFERENCES Employee(employeeID));\n\nINSERT INTO \"Employee\" (employeeID,firstName,lastName,hireDate,position) VALUES (1,'John','Doe','2021-01-01','Project Manager'),(2,'Jane','Smith','2021-02-01','Engineer'),(3,'Mike','Johnson','2021-03-01','Construction Worker'),(4,'Emily','Brown','2021-04-01','Supervisor'),(5,'Tom','White','2021-05-01','Architect');\nINSERT INTO \"Inventory\" (inventoryID,materialID,quantity) VALUES (1,1,50),(2,2,100),(3,3,200),(4,4,100),(5,5,50);\nINSERT INTO \"Material\" (materialID,name,quantity,cost) VALUES (1,'Cement',100,39.99),(2,'Steel Rebars',200,68.75),(3,'Concrete Blocks',300,25.0),(4,'Bricks',150,18.5),(5,'Electrical Wiring',100,45.0);\nINSERT INTO \"Project\" (projectID,projectName,startDate,endDate,budget) VALUES (1,'Residential Building','2021-06-01','2021-08-01',300000.0),(2,'Commercial Complex','2021-07-01','2021-09-01',1000000.0),(3,'Road Repair','2021-08-01','2021-10-01',500000.0),(4,'School Renovation','2021-09-01','2021-11-01',600000.0),(5,'Office Building','2021-10-01','2021-12-01',700000.0);\nINSERT INTO \"Safety\" (safetyID,employeeID,personalProtectiveEquipment,trainingPrograms,constructionWorker) VALUES (1,1,'Hard Hat, Gloves, Steel-toed Boots','OSHA Training, First Aid Certification','Experienced'),(2,2,'Helmet, Earplugs, Safety Glasses','Fall Protection Training, CPR/First Aid','Intermediate'),(3,3,'Hard Hat, Gloves, Safety Vest','Toolbox Talks, Scaffolding Training','Novice'),(4,4,'Helmet, Safety Shoes, Goggles','Hazard Communication Training, Forklift Operation','Skilled'),(5,5,'Hard Hat, Gloves, Knee Pads','Lockout/Tagout Training, Confined Space Entry','Expert');\n",
      "question": "What personal protective equipment is required for architect?",
      "gold_queries": [
        "SELECT Safety.personalProtectiveEquipment \r\nFROM Safety \r\n    JOIN EMPLOYEE on Safety.employeeID = Employee.employeeID\r\nWHERE Employee.position =\"Architect\""
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What personal protective equipment is listed in the \"Safety\" table for employees with the position \"Architect\"?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT T2.personalProtectiveEquipment\nFROM Employee AS T1\nJOIN Safety AS T2 ON T1.employeeID = T2.employeeID\nWHERE T1.position = 'Architect'"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Construction/vague_2cols_safety_measures/vague_2cols_safety_measures.sqlite",
      "db_dump": "CREATE TABLE Employee (\n    employeeID INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    hireDate DATE,\n    position TEXT);\nCREATE TABLE Inventory (\n    inventoryID INTEGER PRIMARY KEY,\n    materialID INTEGER,\n    quantity INTEGER DEFAULT 0,\n    FOREIGN KEY(materialID) REFERENCES Material(materialID));\nCREATE TABLE Material (\n    materialID INTEGER PRIMARY KEY,\n    name TEXT,\n    quantity INTEGER DEFAULT 0,\n    cost REAL);\nCREATE TABLE Project (\n    projectID INTEGER PRIMARY KEY,\n    projectName TEXT,\n    startDate DATE,\n    endDate DATE,\n    budget REAL);\nCREATE TABLE Safety (\n    safetyID INTEGER PRIMARY KEY,\n    employeeID INTEGER,\n    personalProtectiveEquipment TEXT,\n    trainingPrograms TEXT,\n    constructionWorker TEXT,\n    FOREIGN KEY(employeeID) REFERENCES Employee(employeeID));\n\nINSERT INTO \"Employee\" (employeeID,firstName,lastName,hireDate,position) VALUES (1,'John','Doe','2021-01-01','Project Manager'),(2,'Jane','Smith','2021-02-01','Engineer'),(3,'Mike','Johnson','2021-03-01','Construction Worker'),(4,'Emily','Brown','2021-04-01','Supervisor'),(5,'Tom','White','2021-05-01','Architect');\nINSERT INTO \"Inventory\" (inventoryID,materialID,quantity) VALUES (1,1,50),(2,2,100),(3,3,200),(4,4,100),(5,5,50);\nINSERT INTO \"Material\" (materialID,name,quantity,cost) VALUES (1,'Cement',100,39.99),(2,'Steel Rebars',200,68.75),(3,'Concrete Blocks',300,25.0),(4,'Bricks',150,18.5),(5,'Electrical Wiring',100,45.0);\nINSERT INTO \"Project\" (projectID,projectName,startDate,endDate,budget) VALUES (1,'Residential Building','2021-06-01','2021-08-01',300000.0),(2,'Commercial Complex','2021-07-01','2021-09-01',1000000.0),(3,'Road Repair','2021-08-01','2021-10-01',500000.0),(4,'School Renovation','2021-09-01','2021-11-01',600000.0),(5,'Office Building','2021-10-01','2021-12-01',700000.0);\nINSERT INTO \"Safety\" (safetyID,employeeID,personalProtectiveEquipment,trainingPrograms,constructionWorker) VALUES (1,1,'Hard Hat, Gloves, Steel-toed Boots','OSHA Training, First Aid Certification','Experienced'),(2,2,'Helmet, Earplugs, Safety Glasses','Fall Protection Training, CPR/First Aid','Intermediate'),(3,3,'Hard Hat, Gloves, Safety Vest','Toolbox Talks, Scaffolding Training','Novice'),(4,4,'Helmet, Safety Shoes, Goggles','Hazard Communication Training, Forklift Operation','Skilled'),(5,5,'Hard Hat, Gloves, Knee Pads','Lockout/Tagout Training, Confined Space Entry','Expert');\n",
      "question": "What personal protective equipment will Mike Johnson need?",
      "gold_queries": [
        "SELECT Safety.personalProtectiveEquipment \r\nFROM Safety \r\n    JOIN EMPLOYEE on Safety.employeeID = Employee.employeeID\r\nWHERE Employee.firstName=\"Mike\" AND Employee.lastName=\"Johnson\""
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What items in the Safety table are associated with employeeID 3?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT personalProtectiveEquipment, trainingPrograms, constructionWorker FROM Safety WHERE employeeID = 3"
          ]
        },
        {
          "interpretation": "Which personalProtectiveEquipment records in the Safety table correspond to Mike Johnson?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT personalProtectiveEquipment FROM Safety WHERE employeeID = (SELECT employeeID FROM Employee WHERE firstName = 'Mike' AND lastName = 'Johnson')"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Construction/vague_2cols_safety_measures/vague_2cols_safety_measures.sqlite",
      "db_dump": "CREATE TABLE Employee (\n    employeeID INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    hireDate DATE,\n    position TEXT);\nCREATE TABLE Inventory (\n    inventoryID INTEGER PRIMARY KEY,\n    materialID INTEGER,\n    quantity INTEGER DEFAULT 0,\n    FOREIGN KEY(materialID) REFERENCES Material(materialID));\nCREATE TABLE Material (\n    materialID INTEGER PRIMARY KEY,\n    name TEXT,\n    quantity INTEGER DEFAULT 0,\n    cost REAL);\nCREATE TABLE Project (\n    projectID INTEGER PRIMARY KEY,\n    projectName TEXT,\n    startDate DATE,\n    endDate DATE,\n    budget REAL);\nCREATE TABLE Safety (\n    safetyID INTEGER PRIMARY KEY,\n    employeeID INTEGER,\n    personalProtectiveEquipment TEXT,\n    trainingPrograms TEXT,\n    constructionWorker TEXT,\n    FOREIGN KEY(employeeID) REFERENCES Employee(employeeID));\n\nINSERT INTO \"Employee\" (employeeID,firstName,lastName,hireDate,position) VALUES (1,'John','Doe','2021-01-01','Project Manager'),(2,'Jane','Smith','2021-02-01','Engineer'),(3,'Mike','Johnson','2021-03-01','Construction Worker'),(4,'Emily','Brown','2021-04-01','Supervisor'),(5,'Tom','White','2021-05-01','Architect');\nINSERT INTO \"Inventory\" (inventoryID,materialID,quantity) VALUES (1,1,50),(2,2,100),(3,3,200),(4,4,100),(5,5,50);\nINSERT INTO \"Material\" (materialID,name,quantity,cost) VALUES (1,'Cement',100,39.99),(2,'Steel Rebars',200,68.75),(3,'Concrete Blocks',300,25.0),(4,'Bricks',150,18.5),(5,'Electrical Wiring',100,45.0);\nINSERT INTO \"Project\" (projectID,projectName,startDate,endDate,budget) VALUES (1,'Residential Building','2021-06-01','2021-08-01',300000.0),(2,'Commercial Complex','2021-07-01','2021-09-01',1000000.0),(3,'Road Repair','2021-08-01','2021-10-01',500000.0),(4,'School Renovation','2021-09-01','2021-11-01',600000.0),(5,'Office Building','2021-10-01','2021-12-01',700000.0);\nINSERT INTO \"Safety\" (safetyID,employeeID,personalProtectiveEquipment,trainingPrograms,constructionWorker) VALUES (1,1,'Hard Hat, Gloves, Steel-toed Boots','OSHA Training, First Aid Certification','Experienced'),(2,2,'Helmet, Earplugs, Safety Glasses','Fall Protection Training, CPR/First Aid','Intermediate'),(3,3,'Hard Hat, Gloves, Safety Vest','Toolbox Talks, Scaffolding Training','Novice'),(4,4,'Helmet, Safety Shoes, Goggles','Hazard Communication Training, Forklift Operation','Skilled'),(5,5,'Hard Hat, Gloves, Knee Pads','Lockout/Tagout Training, Confined Space Entry','Expert');\n",
      "question": "What personal protective equipment and training programs are required for architect?",
      "gold_queries": [
        "SELECT Safety.personalProtectiveEquipment, trainingPrograms \r\nFROM Safety \r\n    JOIN EMPLOYEE on Safety.employeeID = Employee.employeeID\r\nWHERE Employee.position =\"Architect\""
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Which personal protective equipment and training programs are required for employees who hold the position of 'Architect'?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT S.personalProtectiveEquipment, S.trainingPrograms\nFROM Safety S\nJOIN Employee E ON S.employeeID = E.employeeID\nWHERE E.position = 'Architect'"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Construction/vague_2cols_safety_measures/vague_2cols_safety_measures.sqlite",
      "db_dump": "CREATE TABLE Employee (\n    employeeID INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    hireDate DATE,\n    position TEXT);\nCREATE TABLE Inventory (\n    inventoryID INTEGER PRIMARY KEY,\n    materialID INTEGER,\n    quantity INTEGER DEFAULT 0,\n    FOREIGN KEY(materialID) REFERENCES Material(materialID));\nCREATE TABLE Material (\n    materialID INTEGER PRIMARY KEY,\n    name TEXT,\n    quantity INTEGER DEFAULT 0,\n    cost REAL);\nCREATE TABLE Project (\n    projectID INTEGER PRIMARY KEY,\n    projectName TEXT,\n    startDate DATE,\n    endDate DATE,\n    budget REAL);\nCREATE TABLE Safety (\n    safetyID INTEGER PRIMARY KEY,\n    employeeID INTEGER,\n    personalProtectiveEquipment TEXT,\n    trainingPrograms TEXT,\n    constructionWorker TEXT,\n    FOREIGN KEY(employeeID) REFERENCES Employee(employeeID));\n\nINSERT INTO \"Employee\" (employeeID,firstName,lastName,hireDate,position) VALUES (1,'John','Doe','2021-01-01','Project Manager'),(2,'Jane','Smith','2021-02-01','Engineer'),(3,'Mike','Johnson','2021-03-01','Construction Worker'),(4,'Emily','Brown','2021-04-01','Supervisor'),(5,'Tom','White','2021-05-01','Architect');\nINSERT INTO \"Inventory\" (inventoryID,materialID,quantity) VALUES (1,1,50),(2,2,100),(3,3,200),(4,4,100),(5,5,50);\nINSERT INTO \"Material\" (materialID,name,quantity,cost) VALUES (1,'Cement',100,39.99),(2,'Steel Rebars',200,68.75),(3,'Concrete Blocks',300,25.0),(4,'Bricks',150,18.5),(5,'Electrical Wiring',100,45.0);\nINSERT INTO \"Project\" (projectID,projectName,startDate,endDate,budget) VALUES (1,'Residential Building','2021-06-01','2021-08-01',300000.0),(2,'Commercial Complex','2021-07-01','2021-09-01',1000000.0),(3,'Road Repair','2021-08-01','2021-10-01',500000.0),(4,'School Renovation','2021-09-01','2021-11-01',600000.0),(5,'Office Building','2021-10-01','2021-12-01',700000.0);\nINSERT INTO \"Safety\" (safetyID,employeeID,personalProtectiveEquipment,trainingPrograms,constructionWorker) VALUES (1,1,'Hard Hat, Gloves, Steel-toed Boots','OSHA Training, First Aid Certification','Experienced'),(2,2,'Helmet, Earplugs, Safety Glasses','Fall Protection Training, CPR/First Aid','Intermediate'),(3,3,'Hard Hat, Gloves, Safety Vest','Toolbox Talks, Scaffolding Training','Novice'),(4,4,'Helmet, Safety Shoes, Goggles','Hazard Communication Training, Forklift Operation','Skilled'),(5,5,'Hard Hat, Gloves, Knee Pads','Lockout/Tagout Training, Confined Space Entry','Expert');\n",
      "question": "What safety measures will Mike Johnson require?",
      "gold_queries": [
        "SELECT Safety.personalProtectiveEquipment \r\nFROM Safety \r\n    JOIN EMPLOYEE on Safety.employeeID = Employee.employeeID\r\nWHERE Employee.firstName=\"Mike\" AND Employee.lastName=\"Johnson\"",
        "SELECT Safety.trainingPrograms \r\nFROM Safety \r\n    JOIN EMPLOYEE on Safety.employeeID = Employee.employeeID\r\nWHERE Employee.firstName=\"Mike\" AND Employee.lastName=\"Johnson\"",
        "SELECT Safety.personalProtectiveEquipment, trainingPrograms \r\nFROM Safety \r\n    JOIN EMPLOYEE on Safety.employeeID = Employee.employeeID\r\nWHERE Employee.firstName=\"Mike\" AND Employee.lastName=\"Johnson\""
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Which safety certifications does Mike Johnson possess?",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.trainingPrograms FROM Employee AS T1 JOIN Safety AS T2 ON T1.employeeID = T2.employeeID WHERE T1.firstName = 'Mike' AND T1.lastName = 'Johnson'"
          ]
        },
        {
          "interpretation": "What level of safety experience does Mike Johnson have?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT constructionWorker FROM Safety WHERE employeeID = (SELECT employeeID FROM Employee WHERE firstName = 'Mike' AND lastName = 'Johnson')"
          ]
        },
        {
          "interpretation": "What personal protective equipment will Mike Johnson use?",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.personalProtectiveEquipment FROM Safety AS T1 JOIN Employee AS T2 ON T1.employeeID = T2.employeeID WHERE T2.firstName = 'Mike' AND T2.lastName = 'Johnson'"
          ]
        },
        {
          "interpretation": "What safety protocols should be followed by Mike Johnson?",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT personalProtectiveEquipment, trainingPrograms FROM Safety WHERE employeeID = (SELECT employeeID FROM Employee WHERE firstName = 'Mike' AND lastName = 'Johnson')"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.75,
        "f1_score": 0.8571428571428571,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/vague/Construction/vague_2cols_safety_measures/vague_2cols_safety_measures.sqlite",
      "db_dump": "CREATE TABLE Employee (\n    employeeID INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    hireDate DATE,\n    position TEXT);\nCREATE TABLE Inventory (\n    inventoryID INTEGER PRIMARY KEY,\n    materialID INTEGER,\n    quantity INTEGER DEFAULT 0,\n    FOREIGN KEY(materialID) REFERENCES Material(materialID));\nCREATE TABLE Material (\n    materialID INTEGER PRIMARY KEY,\n    name TEXT,\n    quantity INTEGER DEFAULT 0,\n    cost REAL);\nCREATE TABLE Project (\n    projectID INTEGER PRIMARY KEY,\n    projectName TEXT,\n    startDate DATE,\n    endDate DATE,\n    budget REAL);\nCREATE TABLE Safety (\n    safetyID INTEGER PRIMARY KEY,\n    employeeID INTEGER,\n    personalProtectiveEquipment TEXT,\n    trainingPrograms TEXT,\n    constructionWorker TEXT,\n    FOREIGN KEY(employeeID) REFERENCES Employee(employeeID));\n\nINSERT INTO \"Employee\" (employeeID,firstName,lastName,hireDate,position) VALUES (1,'John','Doe','2021-01-01','Project Manager'),(2,'Jane','Smith','2021-02-01','Engineer'),(3,'Mike','Johnson','2021-03-01','Construction Worker'),(4,'Emily','Brown','2021-04-01','Supervisor'),(5,'Tom','White','2021-05-01','Architect');\nINSERT INTO \"Inventory\" (inventoryID,materialID,quantity) VALUES (1,1,50),(2,2,100),(3,3,200),(4,4,100),(5,5,50);\nINSERT INTO \"Material\" (materialID,name,quantity,cost) VALUES (1,'Cement',100,39.99),(2,'Steel Rebars',200,68.75),(3,'Concrete Blocks',300,25.0),(4,'Bricks',150,18.5),(5,'Electrical Wiring',100,45.0);\nINSERT INTO \"Project\" (projectID,projectName,startDate,endDate,budget) VALUES (1,'Residential Building','2021-06-01','2021-08-01',300000.0),(2,'Commercial Complex','2021-07-01','2021-09-01',1000000.0),(3,'Road Repair','2021-08-01','2021-10-01',500000.0),(4,'School Renovation','2021-09-01','2021-11-01',600000.0),(5,'Office Building','2021-10-01','2021-12-01',700000.0);\nINSERT INTO \"Safety\" (safetyID,employeeID,personalProtectiveEquipment,trainingPrograms,constructionWorker) VALUES (1,1,'Hard Hat, Gloves, Steel-toed Boots','OSHA Training, First Aid Certification','Experienced'),(2,2,'Helmet, Earplugs, Safety Glasses','Fall Protection Training, CPR/First Aid','Intermediate'),(3,3,'Hard Hat, Gloves, Safety Vest','Toolbox Talks, Scaffolding Training','Novice'),(4,4,'Helmet, Safety Shoes, Goggles','Hazard Communication Training, Forklift Operation','Skilled'),(5,5,'Hard Hat, Gloves, Knee Pads','Lockout/Tagout Training, Confined Space Entry','Expert');\n",
      "question": "What safety measures will the architect require?",
      "gold_queries": [
        "SELECT Safety.personalProtectiveEquipment \r\nFROM Safety \r\n    JOIN EMPLOYEE on Safety.employeeID = Employee.employeeID\r\nWHERE Employee.position =\"Architect\"",
        "SELECT Safety.trainingPrograms \r\nFROM Safety \r\n    JOIN EMPLOYEE on Safety.employeeID = Employee.employeeID\r\nWHERE Employee.position =\"Architect\"",
        "SELECT Safety.personalProtectiveEquipment, trainingPrograms \r\nFROM Safety \r\n    JOIN EMPLOYEE on Safety.employeeID = Employee.employeeID\r\nWHERE Employee.position =\"Architect\""
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What safety considerations should the architect factor into their designs?",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT personalProtectiveEquipment, trainingPrograms\nFROM Safety\nWHERE employeeID = (SELECT employeeID FROM Employee WHERE position = 'Architect')"
          ]
        },
        {
          "interpretation": "What safety training will the architect need to complete?",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT trainingPrograms FROM Safety WHERE employeeID = (SELECT employeeID FROM Employee WHERE position = 'Architect')"
          ]
        },
        {
          "interpretation": "What personal protective equipment will the architect need?",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT personalProtectiveEquipment \nFROM Safety \nWHERE employeeID = (SELECT employeeID FROM Employee WHERE position = 'Architect')"
          ]
        },
        {
          "interpretation": "What safety measures are specifically outlined for the architect's role in Safety table?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT personalProtectiveEquipment, trainingPrograms, constructionWorker FROM Safety WHERE employeeID = (SELECT employeeID FROM Employee WHERE position = 'Architect')"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.75,
        "f1_score": 0.8571428571428571,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/vague/Construction/vague_2cols_safety_measures/vague_2cols_safety_measures.sqlite",
      "db_dump": "CREATE TABLE Employee (\n    employeeID INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    hireDate DATE,\n    position TEXT);\nCREATE TABLE Inventory (\n    inventoryID INTEGER PRIMARY KEY,\n    materialID INTEGER,\n    quantity INTEGER DEFAULT 0,\n    FOREIGN KEY(materialID) REFERENCES Material(materialID));\nCREATE TABLE Material (\n    materialID INTEGER PRIMARY KEY,\n    name TEXT,\n    quantity INTEGER DEFAULT 0,\n    cost REAL);\nCREATE TABLE Project (\n    projectID INTEGER PRIMARY KEY,\n    projectName TEXT,\n    startDate DATE,\n    endDate DATE,\n    budget REAL);\nCREATE TABLE Safety (\n    safetyID INTEGER PRIMARY KEY,\n    employeeID INTEGER,\n    personalProtectiveEquipment TEXT,\n    trainingPrograms TEXT,\n    constructionWorker TEXT,\n    FOREIGN KEY(employeeID) REFERENCES Employee(employeeID));\n\nINSERT INTO \"Employee\" (employeeID,firstName,lastName,hireDate,position) VALUES (1,'John','Doe','2021-01-01','Project Manager'),(2,'Jane','Smith','2021-02-01','Engineer'),(3,'Mike','Johnson','2021-03-01','Construction Worker'),(4,'Emily','Brown','2021-04-01','Supervisor'),(5,'Tom','White','2021-05-01','Architect');\nINSERT INTO \"Inventory\" (inventoryID,materialID,quantity) VALUES (1,1,50),(2,2,100),(3,3,200),(4,4,100),(5,5,50);\nINSERT INTO \"Material\" (materialID,name,quantity,cost) VALUES (1,'Cement',100,39.99),(2,'Steel Rebars',200,68.75),(3,'Concrete Blocks',300,25.0),(4,'Bricks',150,18.5),(5,'Electrical Wiring',100,45.0);\nINSERT INTO \"Project\" (projectID,projectName,startDate,endDate,budget) VALUES (1,'Residential Building','2021-06-01','2021-08-01',300000.0),(2,'Commercial Complex','2021-07-01','2021-09-01',1000000.0),(3,'Road Repair','2021-08-01','2021-10-01',500000.0),(4,'School Renovation','2021-09-01','2021-11-01',600000.0),(5,'Office Building','2021-10-01','2021-12-01',700000.0);\nINSERT INTO \"Safety\" (safetyID,employeeID,personalProtectiveEquipment,trainingPrograms,constructionWorker) VALUES (1,1,'Hard Hat, Gloves, Steel-toed Boots','OSHA Training, First Aid Certification','Experienced'),(2,2,'Helmet, Earplugs, Safety Glasses','Fall Protection Training, CPR/First Aid','Intermediate'),(3,3,'Hard Hat, Gloves, Safety Vest','Toolbox Talks, Scaffolding Training','Novice'),(4,4,'Helmet, Safety Shoes, Goggles','Hazard Communication Training, Forklift Operation','Skilled'),(5,5,'Hard Hat, Gloves, Knee Pads','Lockout/Tagout Training, Confined Space Entry','Expert');\n",
      "question": "What training programs will Mike Johnson need?",
      "gold_queries": [
        "SELECT Safety.trainingPrograms \r\nFROM Safety \r\n    JOIN EMPLOYEE on Safety.employeeID = Employee.employeeID\r\nWHERE Employee.firstName=\"Mike\" AND Employee.lastName=\"Johnson\""
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List all the training programs completed by Mike Johnson.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT trainingPrograms FROM Safety WHERE employeeID = (SELECT employeeID FROM Employee WHERE firstName = 'Mike' AND lastName = 'Johnson')"
          ]
        },
        {
          "interpretation": "What OSHA-related training programs has Mike Johnson completed.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT trainingPrograms FROM Safety WHERE employeeID = (SELECT employeeID FROM Employee WHERE firstName = 'Mike' AND lastName = 'Johnson') AND trainingPrograms LIKE '%OSHA%'"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Construction/vague_2cols_safety_measures/vague_2cols_safety_measures.sqlite",
      "db_dump": "CREATE TABLE Employee (\n    employeeID INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    hireDate DATE,\n    position TEXT);\nCREATE TABLE Inventory (\n    inventoryID INTEGER PRIMARY KEY,\n    materialID INTEGER,\n    quantity INTEGER DEFAULT 0,\n    FOREIGN KEY(materialID) REFERENCES Material(materialID));\nCREATE TABLE Material (\n    materialID INTEGER PRIMARY KEY,\n    name TEXT,\n    quantity INTEGER DEFAULT 0,\n    cost REAL);\nCREATE TABLE Project (\n    projectID INTEGER PRIMARY KEY,\n    projectName TEXT,\n    startDate DATE,\n    endDate DATE,\n    budget REAL);\nCREATE TABLE Safety (\n    safetyID INTEGER PRIMARY KEY,\n    employeeID INTEGER,\n    personalProtectiveEquipment TEXT,\n    trainingPrograms TEXT,\n    constructionWorker TEXT,\n    FOREIGN KEY(employeeID) REFERENCES Employee(employeeID));\n\nINSERT INTO \"Employee\" (employeeID,firstName,lastName,hireDate,position) VALUES (1,'John','Doe','2021-01-01','Project Manager'),(2,'Jane','Smith','2021-02-01','Engineer'),(3,'Mike','Johnson','2021-03-01','Construction Worker'),(4,'Emily','Brown','2021-04-01','Supervisor'),(5,'Tom','White','2021-05-01','Architect');\nINSERT INTO \"Inventory\" (inventoryID,materialID,quantity) VALUES (1,1,50),(2,2,100),(3,3,200),(4,4,100),(5,5,50);\nINSERT INTO \"Material\" (materialID,name,quantity,cost) VALUES (1,'Cement',100,39.99),(2,'Steel Rebars',200,68.75),(3,'Concrete Blocks',300,25.0),(4,'Bricks',150,18.5),(5,'Electrical Wiring',100,45.0);\nINSERT INTO \"Project\" (projectID,projectName,startDate,endDate,budget) VALUES (1,'Residential Building','2021-06-01','2021-08-01',300000.0),(2,'Commercial Complex','2021-07-01','2021-09-01',1000000.0),(3,'Road Repair','2021-08-01','2021-10-01',500000.0),(4,'School Renovation','2021-09-01','2021-11-01',600000.0),(5,'Office Building','2021-10-01','2021-12-01',700000.0);\nINSERT INTO \"Safety\" (safetyID,employeeID,personalProtectiveEquipment,trainingPrograms,constructionWorker) VALUES (1,1,'Hard Hat, Gloves, Steel-toed Boots','OSHA Training, First Aid Certification','Experienced'),(2,2,'Helmet, Earplugs, Safety Glasses','Fall Protection Training, CPR/First Aid','Intermediate'),(3,3,'Hard Hat, Gloves, Safety Vest','Toolbox Talks, Scaffolding Training','Novice'),(4,4,'Helmet, Safety Shoes, Goggles','Hazard Communication Training, Forklift Operation','Skilled'),(5,5,'Hard Hat, Gloves, Knee Pads','Lockout/Tagout Training, Confined Space Entry','Expert');\n",
      "question": "What personal protective equipment and training programs will Mike Johnson need?",
      "gold_queries": [
        "SELECT Safety.personalProtectiveEquipment, trainingPrograms \r\nFROM Safety \r\n    JOIN EMPLOYEE on Safety.employeeID = Employee.employeeID\r\nWHERE Employee.firstName=\"Mike\" AND Employee.lastName=\"Johnson\""
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Identify the personal protective equipment and training programs required for a construction worker named Mike Johnson.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT S.personalProtectiveEquipment, S.trainingPrograms\nFROM Safety S\nJOIN Employee E ON S.employeeID = E.employeeID\nWHERE E.firstName = 'Mike' AND E.lastName = 'Johnson'"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Construction/vague_2cols_safety_measures/vague_2cols_safety_measures.sqlite",
      "db_dump": "CREATE TABLE Employee (\n    employeeID INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    hireDate DATE,\n    position TEXT);\nCREATE TABLE Inventory (\n    inventoryID INTEGER PRIMARY KEY,\n    materialID INTEGER,\n    quantity INTEGER DEFAULT 0,\n    FOREIGN KEY(materialID) REFERENCES Material(materialID));\nCREATE TABLE Material (\n    materialID INTEGER PRIMARY KEY,\n    name TEXT,\n    quantity INTEGER DEFAULT 0,\n    cost REAL);\nCREATE TABLE Project (\n    projectID INTEGER PRIMARY KEY,\n    projectName TEXT,\n    startDate DATE,\n    endDate DATE,\n    budget REAL);\nCREATE TABLE Safety (\n    safetyID INTEGER PRIMARY KEY,\n    employeeID INTEGER,\n    personalProtectiveEquipment TEXT,\n    trainingPrograms TEXT,\n    constructionWorker TEXT,\n    FOREIGN KEY(employeeID) REFERENCES Employee(employeeID));\n\nINSERT INTO \"Employee\" (employeeID,firstName,lastName,hireDate,position) VALUES (1,'John','Doe','2021-01-01','Project Manager'),(2,'Jane','Smith','2021-02-01','Engineer'),(3,'Mike','Johnson','2021-03-01','Construction Worker'),(4,'Emily','Brown','2021-04-01','Supervisor'),(5,'Tom','White','2021-05-01','Architect');\nINSERT INTO \"Inventory\" (inventoryID,materialID,quantity) VALUES (1,1,50),(2,2,100),(3,3,200),(4,4,100),(5,5,50);\nINSERT INTO \"Material\" (materialID,name,quantity,cost) VALUES (1,'Cement',100,39.99),(2,'Steel Rebars',200,68.75),(3,'Concrete Blocks',300,25.0),(4,'Bricks',150,18.5),(5,'Electrical Wiring',100,45.0);\nINSERT INTO \"Project\" (projectID,projectName,startDate,endDate,budget) VALUES (1,'Residential Building','2021-06-01','2021-08-01',300000.0),(2,'Commercial Complex','2021-07-01','2021-09-01',1000000.0),(3,'Road Repair','2021-08-01','2021-10-01',500000.0),(4,'School Renovation','2021-09-01','2021-11-01',600000.0),(5,'Office Building','2021-10-01','2021-12-01',700000.0);\nINSERT INTO \"Safety\" (safetyID,employeeID,personalProtectiveEquipment,trainingPrograms,constructionWorker) VALUES (1,1,'Hard Hat, Gloves, Steel-toed Boots','OSHA Training, First Aid Certification','Experienced'),(2,2,'Helmet, Earplugs, Safety Glasses','Fall Protection Training, CPR/First Aid','Intermediate'),(3,3,'Hard Hat, Gloves, Safety Vest','Toolbox Talks, Scaffolding Training','Novice'),(4,4,'Helmet, Safety Shoes, Goggles','Hazard Communication Training, Forklift Operation','Skilled'),(5,5,'Hard Hat, Gloves, Knee Pads','Lockout/Tagout Training, Confined Space Entry','Expert');\n",
      "question": "What training programs are required for architect?",
      "gold_queries": [
        "SELECT Safety.trainingPrograms \r\nFROM Safety \r\n    JOIN EMPLOYEE on Safety.employeeID = Employee.employeeID\r\nWHERE Employee.position =\"Architect\""
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What training programs are required for all employees in the Architect position?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT trainingPrograms FROM Safety WHERE employeeID IN (SELECT employeeID FROM Employee WHERE position = 'Architect')"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Construction/vague_2cols_maintenance_cost/vague_2cols_maintenance_cost.sqlite",
      "db_dump": "CREATE TABLE Equipment(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    EquipName TEXT,\n    PurchasePrice REAL,\n    RentalRate REAL,\n    DailyUsage INT);\nCREATE TABLE Materials(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    MaterialName TEXT,\n    Quantity INT,\n    UnitCost REAL);\nCREATE TABLE Project (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    StartDate DATE,\n    EndDate DATE,\n    Monetary_Value REAL,\n    Percentage_Of_Budget REAL,\n    Infrastructure TEXT);\nCREATE TABLE Worker(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    JobTitle TEXT);\n\nINSERT INTO \"Equipment\" (id,EquipName,PurchasePrice,RentalRate,DailyUsage) VALUES (1,'Excavator',20000.0,1000.0,8),(2,'Crane',30000.0,1500.0,6);\nINSERT INTO \"Materials\" (id,MaterialName,Quantity,UnitCost) VALUES (1,'Concrete Blocks',500,5.0),(2,'Bricks',300,3.5);\nINSERT INTO \"Project\" (id,Name,StartDate,EndDate,Monetary_Value,Percentage_Of_Budget,Infrastructure) VALUES (1,'Project1','2023-01-01','2023-06-01',500000.0,75.0,'Residential Building'),(2,'Project2','2023-02-01','2023-08-01',900000.0,80.0,'Commercial Complex');\nINSERT INTO \"Worker\" (id,FirstName,LastName,JobTitle) VALUES (1,'John','Doe','Carpenter'),(2,'Jane','Smith','Electrician');\n",
      "question": "What's the maintenance cost of the longest Project?",
      "gold_queries": [
        "SELECT Monetary_Value\r\nFROM Project\r\nWHERE JULIANDAY(EndDate) - JULIANDAY(StartDate) = (\r\n    SELECT MAX(JULIANDAY(EndDate) - JULIANDAY(StartDate))\r\n    FROM Project\r\n)",
        "SELECT Percentage_Of_Budget\r\nFROM Project\r\nWHERE JULIANDAY(EndDate) - JULIANDAY(StartDate) = (\r\n    SELECT MAX(JULIANDAY(EndDate) - JULIANDAY(StartDate))\r\n    FROM Project\r\n)",
        "SELECT Monetary_Value, Percentage_Of_Budget\r\nFROM Project\r\nWHERE JULIANDAY(EndDate) - JULIANDAY(StartDate) = (\r\n    SELECT MAX(JULIANDAY(EndDate) - JULIANDAY(StartDate))\r\n    FROM Project\r\n)"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "The total cost of maintaining all equipment used in the longest project.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT SUM(Equipment.RentalRate * Days) AS TotalCost\nFROM Equipment\nJOIN (\n    SELECT MAX(Project.EndDate - Project.StartDate) AS Days\n    FROM Project\n) AS LongestProject\nON 1=1"
          ]
        },
        {
          "interpretation": "The combined cost of maintaining workers' tools and the project's infrastructure for the longest project duration.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT SUM(E.RentalRate * E.DailyUsage) + P.Monetary_Value AS TotalCost\nFROM Equipment E, Project P\nWHERE P.id = (SELECT id FROM Project ORDER BY JULIANDAY(EndDate) - JULIANDAY(StartDate) DESC LIMIT 1)"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Construction/vague_2cols_maintenance_cost/vague_2cols_maintenance_cost.sqlite",
      "db_dump": "CREATE TABLE Equipment(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    EquipName TEXT,\n    PurchasePrice REAL,\n    RentalRate REAL,\n    DailyUsage INT);\nCREATE TABLE Materials(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    MaterialName TEXT,\n    Quantity INT,\n    UnitCost REAL);\nCREATE TABLE Project (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    StartDate DATE,\n    EndDate DATE,\n    Monetary_Value REAL,\n    Percentage_Of_Budget REAL,\n    Infrastructure TEXT);\nCREATE TABLE Worker(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    JobTitle TEXT);\n\nINSERT INTO \"Equipment\" (id,EquipName,PurchasePrice,RentalRate,DailyUsage) VALUES (1,'Excavator',20000.0,1000.0,8),(2,'Crane',30000.0,1500.0,6);\nINSERT INTO \"Materials\" (id,MaterialName,Quantity,UnitCost) VALUES (1,'Concrete Blocks',500,5.0),(2,'Bricks',300,3.5);\nINSERT INTO \"Project\" (id,Name,StartDate,EndDate,Monetary_Value,Percentage_Of_Budget,Infrastructure) VALUES (1,'Project1','2023-01-01','2023-06-01',500000.0,75.0,'Residential Building'),(2,'Project2','2023-02-01','2023-08-01',900000.0,80.0,'Commercial Complex');\nINSERT INTO \"Worker\" (id,FirstName,LastName,JobTitle) VALUES (1,'John','Doe','Carpenter'),(2,'Jane','Smith','Electrician');\n",
      "question": "What's the budget percentage of the longest project?",
      "gold_queries": [
        "SELECT Percentage_Of_Budget\r\nFROM Project\r\nWHERE JULIANDAY(EndDate) - JULIANDAY(StartDate) = (\r\n    SELECT MAX(JULIANDAY(EndDate) - JULIANDAY(StartDate))\r\n    FROM Project\r\n)"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "The percentage of the budget spent on the project that took the longest to complete.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Percentage_Of_Budget FROM Project ORDER BY julianday(EndDate) - julianday(StartDate) DESC LIMIT 1"
          ]
        },
        {
          "interpretation": "The percentage of the overall budget that is represented by the longest project.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Percentage_Of_Budget FROM Project ORDER BY (EndDate - StartDate) DESC LIMIT 1"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Construction/vague_2cols_maintenance_cost/vague_2cols_maintenance_cost.sqlite",
      "db_dump": "CREATE TABLE Equipment(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    EquipName TEXT,\n    PurchasePrice REAL,\n    RentalRate REAL,\n    DailyUsage INT);\nCREATE TABLE Materials(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    MaterialName TEXT,\n    Quantity INT,\n    UnitCost REAL);\nCREATE TABLE Project (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    StartDate DATE,\n    EndDate DATE,\n    Monetary_Value REAL,\n    Percentage_Of_Budget REAL,\n    Infrastructure TEXT);\nCREATE TABLE Worker(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    JobTitle TEXT);\n\nINSERT INTO \"Equipment\" (id,EquipName,PurchasePrice,RentalRate,DailyUsage) VALUES (1,'Excavator',20000.0,1000.0,8),(2,'Crane',30000.0,1500.0,6);\nINSERT INTO \"Materials\" (id,MaterialName,Quantity,UnitCost) VALUES (1,'Concrete Blocks',500,5.0),(2,'Bricks',300,3.5);\nINSERT INTO \"Project\" (id,Name,StartDate,EndDate,Monetary_Value,Percentage_Of_Budget,Infrastructure) VALUES (1,'Project1','2023-01-01','2023-06-01',500000.0,75.0,'Residential Building'),(2,'Project2','2023-02-01','2023-08-01',900000.0,80.0,'Commercial Complex');\nINSERT INTO \"Worker\" (id,FirstName,LastName,JobTitle) VALUES (1,'John','Doe','Carpenter'),(2,'Jane','Smith','Electrician');\n",
      "question": "How much money does it cost to maintain a residential building?",
      "gold_queries": [
        "SELECT Monetary_Value\r\nFROM Project\r\nWHERE Infrastructure = \"Residential Building\""
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Cost breakdown of maintaining different aspects of a residential building.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    (SELECT SUM(PurchasePrice * DailyUsage) FROM Equipment) AS EquipmentCost,\n    (SELECT SUM(Quantity * UnitCost) FROM Materials) AS MaterialCost,\n    (SELECT SUM(Monetary_Value) FROM Project WHERE Infrastructure = 'Residential Building') AS ProjectCost"
          ]
        },
        {
          "interpretation": "Cost of maintaining a specific residential building based on  'Project1'.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Monetary_Value FROM Project WHERE Name = 'Project1'"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Construction/vague_2cols_maintenance_cost/vague_2cols_maintenance_cost.sqlite",
      "db_dump": "CREATE TABLE Equipment(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    EquipName TEXT,\n    PurchasePrice REAL,\n    RentalRate REAL,\n    DailyUsage INT);\nCREATE TABLE Materials(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    MaterialName TEXT,\n    Quantity INT,\n    UnitCost REAL);\nCREATE TABLE Project (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    StartDate DATE,\n    EndDate DATE,\n    Monetary_Value REAL,\n    Percentage_Of_Budget REAL,\n    Infrastructure TEXT);\nCREATE TABLE Worker(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    JobTitle TEXT);\n\nINSERT INTO \"Equipment\" (id,EquipName,PurchasePrice,RentalRate,DailyUsage) VALUES (1,'Excavator',20000.0,1000.0,8),(2,'Crane',30000.0,1500.0,6);\nINSERT INTO \"Materials\" (id,MaterialName,Quantity,UnitCost) VALUES (1,'Concrete Blocks',500,5.0),(2,'Bricks',300,3.5);\nINSERT INTO \"Project\" (id,Name,StartDate,EndDate,Monetary_Value,Percentage_Of_Budget,Infrastructure) VALUES (1,'Project1','2023-01-01','2023-06-01',500000.0,75.0,'Residential Building'),(2,'Project2','2023-02-01','2023-08-01',900000.0,80.0,'Commercial Complex');\nINSERT INTO \"Worker\" (id,FirstName,LastName,JobTitle) VALUES (1,'John','Doe','Carpenter'),(2,'Jane','Smith','Electrician');\n",
      "question": "What's the monetary value and budget percentage of the longest project?",
      "gold_queries": [
        "SELECT Monetary_Value, Percentage_Of_Budget\r\nFROM Project\r\nWHERE JULIANDAY(EndDate) - JULIANDAY(StartDate) = (\r\n    SELECT MAX(JULIANDAY(EndDate) - JULIANDAY(StartDate))\r\n    FROM Project\r\n)"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What is the monetary value and budget percentage of the project that took the longest to complete?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Monetary_Value, Percentage_Of_Budget\nFROM Project\nORDER BY JULIANDAY(EndDate) - JULIANDAY(StartDate) DESC\nLIMIT 1"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Construction/vague_2cols_maintenance_cost/vague_2cols_maintenance_cost.sqlite",
      "db_dump": "CREATE TABLE Equipment(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    EquipName TEXT,\n    PurchasePrice REAL,\n    RentalRate REAL,\n    DailyUsage INT);\nCREATE TABLE Materials(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    MaterialName TEXT,\n    Quantity INT,\n    UnitCost REAL);\nCREATE TABLE Project (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    StartDate DATE,\n    EndDate DATE,\n    Monetary_Value REAL,\n    Percentage_Of_Budget REAL,\n    Infrastructure TEXT);\nCREATE TABLE Worker(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    JobTitle TEXT);\n\nINSERT INTO \"Equipment\" (id,EquipName,PurchasePrice,RentalRate,DailyUsage) VALUES (1,'Excavator',20000.0,1000.0,8),(2,'Crane',30000.0,1500.0,6);\nINSERT INTO \"Materials\" (id,MaterialName,Quantity,UnitCost) VALUES (1,'Concrete Blocks',500,5.0),(2,'Bricks',300,3.5);\nINSERT INTO \"Project\" (id,Name,StartDate,EndDate,Monetary_Value,Percentage_Of_Budget,Infrastructure) VALUES (1,'Project1','2023-01-01','2023-06-01',500000.0,75.0,'Residential Building'),(2,'Project2','2023-02-01','2023-08-01',900000.0,80.0,'Commercial Complex');\nINSERT INTO \"Worker\" (id,FirstName,LastName,JobTitle) VALUES (1,'John','Doe','Carpenter'),(2,'Jane','Smith','Electrician');\n",
      "question": "What percentage of the budget can we use for maintenance on the residential building?",
      "gold_queries": [
        "SELECT Percentage_Of_Budget\r\nFROM Project\r\nWHERE Infrastructure = \"Residential Building\""
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "The percentage of the total budget that can be spent on maintenance for residential buildings.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT SUM(Percentage_Of_Budget) FROM Project WHERE Infrastructure = 'Residential Building'"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Banking/vague_2cols_requirements/vague_2cols_requirements.sqlite",
      "db_dump": "CREATE TABLE Accounts (\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    Balance REAL DEFAULT 0.0,\n    InterestRate REAL DEFAULT 0.0,\n    OpenDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Status TEXT ,\n    CustomerID INTEGER,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Branches (\n    BranchID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT,\n    ManagerID INTEGER,\n    FOREIGN KEY(ManagerID) REFERENCES Employees(EmployeeID));\nCREATE TABLE Customers (\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE,\n    EmailAddress TEXT UNIQUE);\nCREATE TABLE EligibilityAndDocuments (\n    ApplicationID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Eligibility_Criteria TEXT,\n    Documentation_Requirements TEXT,\n    Business_Loan_Application BOOLEAN,\n    LoanID INTEGER,\n    FOREIGN KEY(LoanID) REFERENCES Loans(LoanID));\nCREATE TABLE Employees (\n    EmployeeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    HireDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Role TEXT,\n    Salary REAL,\n    BranchID INTEGER,\n    FOREIGN KEY(BranchID) REFERENCES Branches(BranchID));\nCREATE TABLE Loans (\n    LoanID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Amount REAL,\n    Term INT,\n    Rate REAL,\n    ApprovalDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Status TEXT ,\n    CustomerID INTEGER,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Transactions (\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Description TEXT,\n    Type TEXT ,\n    Amount REAL,\n    Timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    AccountNumber INTEGER,\n    FOREIGN KEY(AccountNumber) REFERENCES Accounts(AccountNumber));\n\nINSERT INTO \"Accounts\" (AccountNumber,Balance,InterestRate,OpenDate,Status,CustomerID) VALUES (1,1000.0,'2.5%','2021-06-01','Active',1),(2,2000.0,'1.5%','2021-07-01','Inactive',2);\nINSERT INTO \"Branches\" (BranchID,Name,Address,PhoneNumber,ManagerID) VALUES (1,'Main Street Branch','1 Main St, Anytown','555-123-4567',NULL),(2,'Southside Branch','123 South Rd, Anycity','555-987-6543',1);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,DateOfBirth,EmailAddress) VALUES (1,'John Doe','Doe','2000-01-01','johndoe@email.com'),(2,'Jane Smith','Smith','1998-03-27','janesmith@email.com');\nINSERT INTO \"EligibilityAndDocuments\" (ApplicationID,Eligibility_Criteria,Documentation_Requirements,Business_Loan_Application,LoanID) VALUES (1,'Excellent credit history.','Proof of income, tax returns.',0,1),(2,'Good credit history.','Bank statements, pay stubs.',1,2);\nINSERT INTO \"Employees\" (EmployeeID,FirstName,LastName,HireDate,Role,Salary,BranchID) VALUES (1,'Alice Johnson','Johnson','2021-01-01','Teller',40000.0,1),(2,'Michael Brown','Brown','2021-01-15','Branch manager',50000.0,1);\nINSERT INTO \"Loans\" (LoanID,Amount,Term,Rate,ApprovalDate,Status,CustomerID) VALUES (1,50000.0,36,'5.5%','2021-06-10','Approved',1),(2,40000.0,24,'4.0%','2021-07-05','Pending',2);\nINSERT INTO \"Transactions\" (TransactionID,Description,Type,Amount,Timestamp,AccountNumber) VALUES (1,'Salary deposit','Credit',3000.0,'2021-06-15',1),(2,'Utility payment','Debit',-200.0,'2021-06-20',1);\n",
      "question": "What are the eligibility criteria required for this loan?",
      "gold_queries": [
        "Select Loans.LoanID, EligibilityAndDocuments.Eligibility_Criteria    From EligibilityAndDocuments JOIN Loans ON Loans.LoanID = EligibilityAndDocuments.LoanId"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Are there different eligibility criteria for different types of loans defined in the database?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT Eligibility_Criteria FROM EligibilityAndDocuments"
          ]
        },
        {
          "interpretation": "In the context of the database, does \"loan\" refer to any loan or a specific loan?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT LoanID, CustomerID, Amount, Term, Rate, ApprovalDate, Status FROM Loans"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Banking/vague_2cols_requirements/vague_2cols_requirements.sqlite",
      "db_dump": "CREATE TABLE Accounts (\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    Balance REAL DEFAULT 0.0,\n    InterestRate REAL DEFAULT 0.0,\n    OpenDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Status TEXT ,\n    CustomerID INTEGER,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Branches (\n    BranchID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT,\n    ManagerID INTEGER,\n    FOREIGN KEY(ManagerID) REFERENCES Employees(EmployeeID));\nCREATE TABLE Customers (\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE,\n    EmailAddress TEXT UNIQUE);\nCREATE TABLE EligibilityAndDocuments (\n    ApplicationID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Eligibility_Criteria TEXT,\n    Documentation_Requirements TEXT,\n    Business_Loan_Application BOOLEAN,\n    LoanID INTEGER,\n    FOREIGN KEY(LoanID) REFERENCES Loans(LoanID));\nCREATE TABLE Employees (\n    EmployeeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    HireDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Role TEXT,\n    Salary REAL,\n    BranchID INTEGER,\n    FOREIGN KEY(BranchID) REFERENCES Branches(BranchID));\nCREATE TABLE Loans (\n    LoanID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Amount REAL,\n    Term INT,\n    Rate REAL,\n    ApprovalDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Status TEXT ,\n    CustomerID INTEGER,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Transactions (\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Description TEXT,\n    Type TEXT ,\n    Amount REAL,\n    Timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    AccountNumber INTEGER,\n    FOREIGN KEY(AccountNumber) REFERENCES Accounts(AccountNumber));\n\nINSERT INTO \"Accounts\" (AccountNumber,Balance,InterestRate,OpenDate,Status,CustomerID) VALUES (1,1000.0,'2.5%','2021-06-01','Active',1),(2,2000.0,'1.5%','2021-07-01','Inactive',2);\nINSERT INTO \"Branches\" (BranchID,Name,Address,PhoneNumber,ManagerID) VALUES (1,'Main Street Branch','1 Main St, Anytown','555-123-4567',NULL),(2,'Southside Branch','123 South Rd, Anycity','555-987-6543',1);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,DateOfBirth,EmailAddress) VALUES (1,'John Doe','Doe','2000-01-01','johndoe@email.com'),(2,'Jane Smith','Smith','1998-03-27','janesmith@email.com');\nINSERT INTO \"EligibilityAndDocuments\" (ApplicationID,Eligibility_Criteria,Documentation_Requirements,Business_Loan_Application,LoanID) VALUES (1,'Excellent credit history.','Proof of income, tax returns.',0,1),(2,'Good credit history.','Bank statements, pay stubs.',1,2);\nINSERT INTO \"Employees\" (EmployeeID,FirstName,LastName,HireDate,Role,Salary,BranchID) VALUES (1,'Alice Johnson','Johnson','2021-01-01','Teller',40000.0,1),(2,'Michael Brown','Brown','2021-01-15','Branch manager',50000.0,1);\nINSERT INTO \"Loans\" (LoanID,Amount,Term,Rate,ApprovalDate,Status,CustomerID) VALUES (1,50000.0,36,'5.5%','2021-06-10','Approved',1),(2,40000.0,24,'4.0%','2021-07-05','Pending',2);\nINSERT INTO \"Transactions\" (TransactionID,Description,Type,Amount,Timestamp,AccountNumber) VALUES (1,'Salary deposit','Credit',3000.0,'2021-06-15',1),(2,'Utility payment','Debit',-200.0,'2021-06-20',1);\n",
      "question": "What are the necessary documents required for this loan?",
      "gold_queries": [
        "Select Loans.LoanID, EligibilityAndDocuments.Documentation_Requirements    From EligibilityAndDocuments JOIN Loans ON Loans.LoanID = EligibilityAndDocuments.LoanId"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What documents are needed for a business loan application?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Documentation_Requirements FROM EligibilityAndDocuments WHERE Business_Loan_Application = 1"
          ]
        },
        {
          "interpretation": "What specific documents are required for loan application ID 1?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Documentation_Requirements FROM EligibilityAndDocuments WHERE LoanID = 1"
          ]
        },
        {
          "interpretation": "What documents are needed to apply for a loan in general?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT Documentation_Requirements FROM EligibilityAndDocuments"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Banking/vague_2cols_requirements/vague_2cols_requirements.sqlite",
      "db_dump": "CREATE TABLE Accounts (\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    Balance REAL DEFAULT 0.0,\n    InterestRate REAL DEFAULT 0.0,\n    OpenDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Status TEXT ,\n    CustomerID INTEGER,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Branches (\n    BranchID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT,\n    ManagerID INTEGER,\n    FOREIGN KEY(ManagerID) REFERENCES Employees(EmployeeID));\nCREATE TABLE Customers (\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE,\n    EmailAddress TEXT UNIQUE);\nCREATE TABLE EligibilityAndDocuments (\n    ApplicationID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Eligibility_Criteria TEXT,\n    Documentation_Requirements TEXT,\n    Business_Loan_Application BOOLEAN,\n    LoanID INTEGER,\n    FOREIGN KEY(LoanID) REFERENCES Loans(LoanID));\nCREATE TABLE Employees (\n    EmployeeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    HireDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Role TEXT,\n    Salary REAL,\n    BranchID INTEGER,\n    FOREIGN KEY(BranchID) REFERENCES Branches(BranchID));\nCREATE TABLE Loans (\n    LoanID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Amount REAL,\n    Term INT,\n    Rate REAL,\n    ApprovalDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Status TEXT ,\n    CustomerID INTEGER,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Transactions (\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Description TEXT,\n    Type TEXT ,\n    Amount REAL,\n    Timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    AccountNumber INTEGER,\n    FOREIGN KEY(AccountNumber) REFERENCES Accounts(AccountNumber));\n\nINSERT INTO \"Accounts\" (AccountNumber,Balance,InterestRate,OpenDate,Status,CustomerID) VALUES (1,1000.0,'2.5%','2021-06-01','Active',1),(2,2000.0,'1.5%','2021-07-01','Inactive',2);\nINSERT INTO \"Branches\" (BranchID,Name,Address,PhoneNumber,ManagerID) VALUES (1,'Main Street Branch','1 Main St, Anytown','555-123-4567',NULL),(2,'Southside Branch','123 South Rd, Anycity','555-987-6543',1);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,DateOfBirth,EmailAddress) VALUES (1,'John Doe','Doe','2000-01-01','johndoe@email.com'),(2,'Jane Smith','Smith','1998-03-27','janesmith@email.com');\nINSERT INTO \"EligibilityAndDocuments\" (ApplicationID,Eligibility_Criteria,Documentation_Requirements,Business_Loan_Application,LoanID) VALUES (1,'Excellent credit history.','Proof of income, tax returns.',0,1),(2,'Good credit history.','Bank statements, pay stubs.',1,2);\nINSERT INTO \"Employees\" (EmployeeID,FirstName,LastName,HireDate,Role,Salary,BranchID) VALUES (1,'Alice Johnson','Johnson','2021-01-01','Teller',40000.0,1),(2,'Michael Brown','Brown','2021-01-15','Branch manager',50000.0,1);\nINSERT INTO \"Loans\" (LoanID,Amount,Term,Rate,ApprovalDate,Status,CustomerID) VALUES (1,50000.0,36,'5.5%','2021-06-10','Approved',1),(2,40000.0,24,'4.0%','2021-07-05','Pending',2);\nINSERT INTO \"Transactions\" (TransactionID,Description,Type,Amount,Timestamp,AccountNumber) VALUES (1,'Salary deposit','Credit',3000.0,'2021-06-15',1),(2,'Utility payment','Debit',-200.0,'2021-06-20',1);\n",
      "question": "What were the requirements for each loan.",
      "gold_queries": [
        "Select Loans.LoanID, EligibilityAndDocuments.Eligibility_Criteria    From EligibilityAndDocuments JOIN Loans ON Loans.LoanID = EligibilityAndDocuments.LoanId",
        "Select Loans.LoanID, EligibilityAndDocuments.Documentation_Requirements    From EligibilityAndDocuments JOIN Loans ON Loans.LoanID = EligibilityAndDocuments.LoanId",
        "Select Loans.LoanID, EligibilityAndDocuments.Eligibility_Criteria, Documentation_Requirements    From EligibilityAndDocuments JOIN Loans ON Loans.LoanID = EligibilityAndDocuments.LoanId"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "The approval status and decision rationale for each loan request",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Status, Eligibility_Criteria FROM Loans JOIN EligibilityAndDocuments ON Loans.LoanID = EligibilityAndDocuments.LoanID"
          ]
        },
        {
          "interpretation": "The financial requirements for each loan, such as amount, term, and interest rate",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT LoanID, Amount, Term, Rate FROM Loans"
          ]
        },
        {
          "interpretation": "The eligibility criteria for each loan application",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Eligibility_Criteria FROM EligibilityAndDocuments"
          ]
        },
        {
          "interpretation": "The documentation required for each loan application",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Documentation_Requirements FROM EligibilityAndDocuments"
          ]
        },
        {
          "interpretation": "The specific terms and conditions of each loan agreement",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Term, Rate, Status FROM Loans"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Banking/vague_2cols_requirements/vague_2cols_requirements.sqlite",
      "db_dump": "CREATE TABLE Accounts (\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    Balance REAL DEFAULT 0.0,\n    InterestRate REAL DEFAULT 0.0,\n    OpenDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Status TEXT ,\n    CustomerID INTEGER,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Branches (\n    BranchID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT,\n    ManagerID INTEGER,\n    FOREIGN KEY(ManagerID) REFERENCES Employees(EmployeeID));\nCREATE TABLE Customers (\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE,\n    EmailAddress TEXT UNIQUE);\nCREATE TABLE EligibilityAndDocuments (\n    ApplicationID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Eligibility_Criteria TEXT,\n    Documentation_Requirements TEXT,\n    Business_Loan_Application BOOLEAN,\n    LoanID INTEGER,\n    FOREIGN KEY(LoanID) REFERENCES Loans(LoanID));\nCREATE TABLE Employees (\n    EmployeeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    HireDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Role TEXT,\n    Salary REAL,\n    BranchID INTEGER,\n    FOREIGN KEY(BranchID) REFERENCES Branches(BranchID));\nCREATE TABLE Loans (\n    LoanID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Amount REAL,\n    Term INT,\n    Rate REAL,\n    ApprovalDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Status TEXT ,\n    CustomerID INTEGER,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Transactions (\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Description TEXT,\n    Type TEXT ,\n    Amount REAL,\n    Timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    AccountNumber INTEGER,\n    FOREIGN KEY(AccountNumber) REFERENCES Accounts(AccountNumber));\n\nINSERT INTO \"Accounts\" (AccountNumber,Balance,InterestRate,OpenDate,Status,CustomerID) VALUES (1,1000.0,'2.5%','2021-06-01','Active',1),(2,2000.0,'1.5%','2021-07-01','Inactive',2);\nINSERT INTO \"Branches\" (BranchID,Name,Address,PhoneNumber,ManagerID) VALUES (1,'Main Street Branch','1 Main St, Anytown','555-123-4567',NULL),(2,'Southside Branch','123 South Rd, Anycity','555-987-6543',1);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,DateOfBirth,EmailAddress) VALUES (1,'John Doe','Doe','2000-01-01','johndoe@email.com'),(2,'Jane Smith','Smith','1998-03-27','janesmith@email.com');\nINSERT INTO \"EligibilityAndDocuments\" (ApplicationID,Eligibility_Criteria,Documentation_Requirements,Business_Loan_Application,LoanID) VALUES (1,'Excellent credit history.','Proof of income, tax returns.',0,1),(2,'Good credit history.','Bank statements, pay stubs.',1,2);\nINSERT INTO \"Employees\" (EmployeeID,FirstName,LastName,HireDate,Role,Salary,BranchID) VALUES (1,'Alice Johnson','Johnson','2021-01-01','Teller',40000.0,1),(2,'Michael Brown','Brown','2021-01-15','Branch manager',50000.0,1);\nINSERT INTO \"Loans\" (LoanID,Amount,Term,Rate,ApprovalDate,Status,CustomerID) VALUES (1,50000.0,36,'5.5%','2021-06-10','Approved',1),(2,40000.0,24,'4.0%','2021-07-05','Pending',2);\nINSERT INTO \"Transactions\" (TransactionID,Description,Type,Amount,Timestamp,AccountNumber) VALUES (1,'Salary deposit','Credit',3000.0,'2021-06-15',1),(2,'Utility payment','Debit',-200.0,'2021-06-20',1);\n",
      "question": "Which loans met the approval status and what were the requirements",
      "gold_queries": [
        "Select Loans.LoanID, EligibilityAndDocuments.Eligibility_Criteria    From EligibilityAndDocuments JOIN Loans ON Loans.LoanID = EligibilityAndDocuments.LoanId Where Loans.Status = 'Approved'",
        "Select Loans.LoanID, EligibilityAndDocuments.Documentation_Requirements    From EligibilityAndDocuments JOIN Loans ON Loans.LoanID = EligibilityAndDocuments.LoanId Where Loans.Status = 'Approved'",
        "Select Loans.LoanID, EligibilityAndDocuments.Eligibility_Criteria, Documentation_Requirements    From EligibilityAndDocuments JOIN Loans ON Loans.LoanID = EligibilityAndDocuments.LoanId Where Loans.Status = 'Approved'"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Which loans have a status of 'Approved'?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT LoanID, Amount, Term, Rate, ApprovalDate, Status, CustomerID FROM Loans WHERE Status = 'Approved'"
          ]
        },
        {
          "interpretation": "List the loans that were approved and include their application requirements.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT L.LoanID, L.Amount, L.Term, L.Rate, L.ApprovalDate, E.Documentation_Requirements\nFROM Loans L\nJOIN EligibilityAndDocuments E ON L.LoanID = E.LoanID\nWHERE L.Status = 'Approved'"
          ]
        },
        {
          "interpretation": "Show me all approved loans and the associated application details.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Loans.LoanID, Loans.Amount, Loans.Term, Loans.Rate, Loans.ApprovalDate, Loans.Status, EligibilityAndDocuments.Eligibility_Criteria, EligibilityAndDocuments.Documentation_Requirements \nFROM Loans \nJOIN EligibilityAndDocuments ON Loans.LoanID = EligibilityAndDocuments.LoanID \nWHERE Loans.Status = 'Approved'"
          ]
        },
        {
          "interpretation": "Identify loans with an 'Approved' status and retrieve the corresponding eligibility and documentation requirements.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Eligibility_Criteria, Documentation_Requirements\nFROM EligibilityAndDocuments\nWHERE LoanID IN (\n    SELECT LoanID\n    FROM Loans\n    WHERE Status = 'Approved'\n)"
          ]
        },
        {
          "interpretation": "What are the eligibility criteria and documentation requirements for each loan?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Eligibility_Criteria, Documentation_Requirements FROM EligibilityAndDocuments"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Banking/vague_2cols_requirements/vague_2cols_requirements.sqlite",
      "db_dump": "CREATE TABLE Accounts (\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    Balance REAL DEFAULT 0.0,\n    InterestRate REAL DEFAULT 0.0,\n    OpenDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Status TEXT ,\n    CustomerID INTEGER,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Branches (\n    BranchID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT,\n    ManagerID INTEGER,\n    FOREIGN KEY(ManagerID) REFERENCES Employees(EmployeeID));\nCREATE TABLE Customers (\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE,\n    EmailAddress TEXT UNIQUE);\nCREATE TABLE EligibilityAndDocuments (\n    ApplicationID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Eligibility_Criteria TEXT,\n    Documentation_Requirements TEXT,\n    Business_Loan_Application BOOLEAN,\n    LoanID INTEGER,\n    FOREIGN KEY(LoanID) REFERENCES Loans(LoanID));\nCREATE TABLE Employees (\n    EmployeeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    HireDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Role TEXT,\n    Salary REAL,\n    BranchID INTEGER,\n    FOREIGN KEY(BranchID) REFERENCES Branches(BranchID));\nCREATE TABLE Loans (\n    LoanID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Amount REAL,\n    Term INT,\n    Rate REAL,\n    ApprovalDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Status TEXT ,\n    CustomerID INTEGER,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Transactions (\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Description TEXT,\n    Type TEXT ,\n    Amount REAL,\n    Timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    AccountNumber INTEGER,\n    FOREIGN KEY(AccountNumber) REFERENCES Accounts(AccountNumber));\n\nINSERT INTO \"Accounts\" (AccountNumber,Balance,InterestRate,OpenDate,Status,CustomerID) VALUES (1,1000.0,'2.5%','2021-06-01','Active',1),(2,2000.0,'1.5%','2021-07-01','Inactive',2);\nINSERT INTO \"Branches\" (BranchID,Name,Address,PhoneNumber,ManagerID) VALUES (1,'Main Street Branch','1 Main St, Anytown','555-123-4567',NULL),(2,'Southside Branch','123 South Rd, Anycity','555-987-6543',1);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,DateOfBirth,EmailAddress) VALUES (1,'John Doe','Doe','2000-01-01','johndoe@email.com'),(2,'Jane Smith','Smith','1998-03-27','janesmith@email.com');\nINSERT INTO \"EligibilityAndDocuments\" (ApplicationID,Eligibility_Criteria,Documentation_Requirements,Business_Loan_Application,LoanID) VALUES (1,'Excellent credit history.','Proof of income, tax returns.',0,1),(2,'Good credit history.','Bank statements, pay stubs.',1,2);\nINSERT INTO \"Employees\" (EmployeeID,FirstName,LastName,HireDate,Role,Salary,BranchID) VALUES (1,'Alice Johnson','Johnson','2021-01-01','Teller',40000.0,1),(2,'Michael Brown','Brown','2021-01-15','Branch manager',50000.0,1);\nINSERT INTO \"Loans\" (LoanID,Amount,Term,Rate,ApprovalDate,Status,CustomerID) VALUES (1,50000.0,36,'5.5%','2021-06-10','Approved',1),(2,40000.0,24,'4.0%','2021-07-05','Pending',2);\nINSERT INTO \"Transactions\" (TransactionID,Description,Type,Amount,Timestamp,AccountNumber) VALUES (1,'Salary deposit','Credit',3000.0,'2021-06-15',1),(2,'Utility payment','Debit',-200.0,'2021-06-20',1);\n",
      "question": "List the eligibility criteria  for all approved loans, the document requirements for them and these loans.",
      "gold_queries": [
        "Select Loans.LoanID, EligibilityAndDocuments.Eligibility_Criteria, Documentation_Requirements    From EligibilityAndDocuments JOIN Loans ON Loans.LoanID = EligibilityAndDocuments.LoanId Where Loans.Status = 'Approved'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Show the Eligibility_Criteria and Documentation_Requirements for every Approved loan.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Eligibility_Criteria, Documentation_Requirements \nFROM EligibilityAndDocuments \nWHERE LoanID IN (SELECT LoanID FROM Loans WHERE Status = 'Approved')"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "f1_score": 0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Banking/vague_2cols_requirements/vague_2cols_requirements.sqlite",
      "db_dump": "CREATE TABLE Accounts (\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    Balance REAL DEFAULT 0.0,\n    InterestRate REAL DEFAULT 0.0,\n    OpenDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Status TEXT ,\n    CustomerID INTEGER,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Branches (\n    BranchID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT,\n    ManagerID INTEGER,\n    FOREIGN KEY(ManagerID) REFERENCES Employees(EmployeeID));\nCREATE TABLE Customers (\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE,\n    EmailAddress TEXT UNIQUE);\nCREATE TABLE EligibilityAndDocuments (\n    ApplicationID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Eligibility_Criteria TEXT,\n    Documentation_Requirements TEXT,\n    Business_Loan_Application BOOLEAN,\n    LoanID INTEGER,\n    FOREIGN KEY(LoanID) REFERENCES Loans(LoanID));\nCREATE TABLE Employees (\n    EmployeeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    HireDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Role TEXT,\n    Salary REAL,\n    BranchID INTEGER,\n    FOREIGN KEY(BranchID) REFERENCES Branches(BranchID));\nCREATE TABLE Loans (\n    LoanID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Amount REAL,\n    Term INT,\n    Rate REAL,\n    ApprovalDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Status TEXT ,\n    CustomerID INTEGER,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Transactions (\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Description TEXT,\n    Type TEXT ,\n    Amount REAL,\n    Timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    AccountNumber INTEGER,\n    FOREIGN KEY(AccountNumber) REFERENCES Accounts(AccountNumber));\n\nINSERT INTO \"Accounts\" (AccountNumber,Balance,InterestRate,OpenDate,Status,CustomerID) VALUES (1,1000.0,'2.5%','2021-06-01','Active',1),(2,2000.0,'1.5%','2021-07-01','Inactive',2);\nINSERT INTO \"Branches\" (BranchID,Name,Address,PhoneNumber,ManagerID) VALUES (1,'Main Street Branch','1 Main St, Anytown','555-123-4567',NULL),(2,'Southside Branch','123 South Rd, Anycity','555-987-6543',1);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,DateOfBirth,EmailAddress) VALUES (1,'John Doe','Doe','2000-01-01','johndoe@email.com'),(2,'Jane Smith','Smith','1998-03-27','janesmith@email.com');\nINSERT INTO \"EligibilityAndDocuments\" (ApplicationID,Eligibility_Criteria,Documentation_Requirements,Business_Loan_Application,LoanID) VALUES (1,'Excellent credit history.','Proof of income, tax returns.',0,1),(2,'Good credit history.','Bank statements, pay stubs.',1,2);\nINSERT INTO \"Employees\" (EmployeeID,FirstName,LastName,HireDate,Role,Salary,BranchID) VALUES (1,'Alice Johnson','Johnson','2021-01-01','Teller',40000.0,1),(2,'Michael Brown','Brown','2021-01-15','Branch manager',50000.0,1);\nINSERT INTO \"Loans\" (LoanID,Amount,Term,Rate,ApprovalDate,Status,CustomerID) VALUES (1,50000.0,36,'5.5%','2021-06-10','Approved',1),(2,40000.0,24,'4.0%','2021-07-05','Pending',2)