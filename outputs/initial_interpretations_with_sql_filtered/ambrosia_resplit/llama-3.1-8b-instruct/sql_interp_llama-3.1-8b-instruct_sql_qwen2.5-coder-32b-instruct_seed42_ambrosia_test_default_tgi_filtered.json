{
  "results": [
    {
      "db_file": "data/attachment/Hospitality/attachment_1tab_val_indoor-outdoor_space/attachment_1tab_val_indoor-outdoor_space.sqlite",
      "db_dump": "CREATE TABLE Amenities(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    amenityName TEXT,\n    available BOOL DEFAULT FALSE\n);\nCREATE TABLE Booking(\n    bookingID INTEGER PRIMARY KEY AUTOINCREMENT,\n    roomId INTEGER REFERENCES Room(id),\n    customerId INTEGER REFERENCES Customer(customerID),\n    startDate DATE,\n    endDate DATE,\n    totalPrice DECIMAL(10,2)\n);\nCREATE TABLE Customer(\n    customerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber CHAR(10)\n);\nCREATE TABLE Room(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Indoor_Outdoor_Space TEXT,\n    Size INT,\n    Price DECIMAL(10,2)\n);\n\nINSERT INTO \"Amenities\" (id,amenityName,available) VALUES (1,'WiFi',1),(2,'Parking Space',1),(3,'Air Conditioner',1),(4,'Projector',0);\nINSERT INTO \"Booking\" (bookingID,roomId,customerId,startDate,endDate,totalPrice) VALUES (1,1,1,'2022-01-10','2022-01-12',2000),(2,2,2,'2022-01-15','2022-01-17',3000),(3,3,3,'2022-01-20','2022-01-22',4000),(4,4,4,'2022-01-25','2022-01-27',5000);\nINSERT INTO \"Customer\" (customerID,firstName,lastName,email,phoneNumber) VALUES (1,'John','Doe','john@example.com','+123456789'),(2,'Jane','Smith','jane@example.com','+234567890'),(3,'Michael','Johnson','michael@example.com','+345678901'),(4,'Emily','Williams','emily@example.com','+45678902');\nINSERT INTO \"Room\" (id,Name,Indoor_Outdoor_Space,Size,Price) VALUES (1,'Conference Hall','Lobby',500,678.99),(2,'Banquet Hall','Lobby',600,830.99),(3,'Rooftop Terrace','Terrace',500,1000.99),(4,'Garden Patio','Terrace',400,870.99);\n",
      "question": "List all lobbies or terraces that can accomodate 500 people. Show them in one table.",
      "gold_queries": [
        "SELECT Room.Name \r\nFROM Room\r\nWHERE (Room.Indoor_Outdoor_Space = \"Lobby\" OR Room.Indoor_Outdoor_Space = \"Terrace\") AND Room.Size = 500",
        "SELECT Room.Name \r\nFROM Room\r\nWHERE Room.Indoor_Outdoor_Space = \"Lobby\" OR Room.Indoor_Outdoor_Space = \"Terrace\" AND Room.Size = 500"
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Show all Rooms that has an Indoor Outdoor space type as either Lobby or Terrace and Size of 500 or more people to accommodate.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name FROM Room WHERE Indoor_Outdoor_Space IN ('Lobby', 'Terrace') AND Size >= 500"
          ]
        },
        {
          "interpretation": "Retrieve the Room id, Name, Indoor_Outdoor_Space from the Room table where the space type is either Lobby or Terrace and has a capacity for 500 people.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT id, Name, Indoor_Outdoor_Space FROM Room WHERE Indoor_Outdoor_Space IN ('Lobby', 'Terrace') AND Size = 500"
          ]
        },
        {
          "interpretation": "List all Name and Indoor_Outdoor_Space from Room where indoor or outdoor spaces type is either Lobby or Terrace having a capacity of 500 people in them.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Indoor_Outdoor_Space FROM Room WHERE (Indoor_Outdoor_Space = 'Lobby' OR Indoor_Outdoor_Space = 'Terrace') AND Size = 500"
          ]
        },
        {
          "interpretation": "Fetch all id from Room table where Indoor_Outdoor_Space is 'Lobby' or 'Terrace' and size is 500 or greater.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT id FROM Room WHERE Indoor_Outdoor_Space IN ('Lobby', 'Terrace') AND Size >= 500"
          ]
        },
        {
          "interpretation": "Show all Rooms which are either indoor or outdoor space's have Lobby or Terrace space types and can accommodate 500 people.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name FROM Room WHERE Indoor_Outdoor_Space IN ('Lobby', 'Terrace') AND Size = 500"
          ]
        },
        {
          "interpretation": "Be able to Accommodate 500 people in Rooms such as Show all Rooms that have Indoor or outdoor spaces of type Lobby or terrace.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name FROM Room WHERE Indoor_Outdoor_Space IN ('Lobby', 'Terrace')"
          ]
        },
        {
          "interpretation": "Retrieve all tabled data from Room where space types, space allowance capacity have Lobby or outdoor space types Terrace and 500 people capacity if there.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Room WHERE (Indoor_Outdoor_Space = 'Lobby') OR (Indoor_Outdoor_Space = 'Terrace' AND Size = 500)"
          ]
        }
      ],
      "num_unique_execution_results": 7,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2857142857142857,
        "one_found": true,
        "f1_score": 0.4444444444444445,
        "num_queries": 7,
        "num_unique_queries": 7,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_1tab_val_indoor-outdoor_space/attachment_1tab_val_indoor-outdoor_space.sqlite",
      "db_dump": "CREATE TABLE Amenities(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    amenityName TEXT,\n    available BOOL DEFAULT FALSE\n);\nCREATE TABLE Booking(\n    bookingID INTEGER PRIMARY KEY AUTOINCREMENT,\n    roomId INTEGER REFERENCES Room(id),\n    customerId INTEGER REFERENCES Customer(customerID),\n    startDate DATE,\n    endDate DATE,\n    totalPrice DECIMAL(10,2)\n);\nCREATE TABLE Customer(\n    customerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber CHAR(10)\n);\nCREATE TABLE Room(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Indoor_Outdoor_Space TEXT,\n    Size INT,\n    Price DECIMAL(10,2)\n);\n\nINSERT INTO \"Amenities\" (id,amenityName,available) VALUES (1,'WiFi',1),(2,'Parking Space',1),(3,'Air Conditioner',1),(4,'Projector',0);\nINSERT INTO \"Booking\" (bookingID,roomId,customerId,startDate,endDate,totalPrice) VALUES (1,1,1,'2022-01-10','2022-01-12',2000),(2,2,2,'2022-01-15','2022-01-17',3000),(3,3,3,'2022-01-20','2022-01-22',4000),(4,4,4,'2022-01-25','2022-01-27',5000);\nINSERT INTO \"Customer\" (customerID,firstName,lastName,email,phoneNumber) VALUES (1,'John','Doe','john@example.com','+123456789'),(2,'Jane','Smith','jane@example.com','+234567890'),(3,'Michael','Johnson','michael@example.com','+345678901'),(4,'Emily','Williams','emily@example.com','+45678902');\nINSERT INTO \"Room\" (id,Name,Indoor_Outdoor_Space,Size,Price) VALUES (1,'Conference Hall','Lobby',500,678.99),(2,'Banquet Hall','Lobby',600,830.99),(3,'Rooftop Terrace','Terrace',500,1000.99),(4,'Garden Patio','Terrace',400,870.99);\n",
      "question": "Show all lobbies and also show all terraces that can accommodate 500 people. Show them in one table.",
      "gold_queries": [
        "SELECT Room.Name \r\nFROM Room\r\nWHERE Room.Indoor_Outdoor_Space = \"Lobby\" OR Room.Indoor_Outdoor_Space = \"Terrace\" AND Room.Size = 500"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Select rooms from room table where Size equals 500 and Indoor_Outdoor_Space is either 'Lobby' or 'Terrace'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name FROM Room WHERE Size = 500 AND Indoor_Outdoor_Space IN ('Lobby', 'Terrace')"
          ]
        },
        {
          "interpretation": "Show all 'Lobby' and 'Terrace' rooms if their Size equals 500.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Indoor_Outdoor_Space, Size, Price FROM Room WHERE Indoor_Outdoor_Space IN ('Lobby', 'Terrace') AND Size = 500"
          ]
        },
        {
          "interpretation": "Select all rooms where Indoor_Outdoor_Space is 'Lobby' or 'Terrace' or Indoor_Outdoor_Space is not 'Lobby' and Size is 500.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name FROM Room WHERE Indoor_Outdoor_Space = 'Lobby' OR Indoor_Outdoor_Space = 'Terrace' OR (Indoor_Outdoor_Space != 'Lobby' AND Size = 500)"
          ]
        },
        {
          "interpretation": "Show rooms with Indoor_Outdoor_Space as 'Terrace' and Size of 500 and also indoor spaces with a size of 500 where Indoor_Outdoor_Space is not 'Lobby' or 'Terrace'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name FROM Room WHERE Indoor_Outdoor_Space = 'Terrace' AND Size = 500\nUNION\nSELECT Name FROM Room WHERE Size = 500 AND Indoor_Outdoor_Space NOT IN ('Lobby', 'Terrace')"
          ]
        },
        {
          "interpretation": "Show all rooms with Indoor_Outdoor_Space as 'Lobby' and all rooms with Indoor_Outdoor_Space as 'Terrace' that have a Size of 500.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Name FROM Room WHERE Indoor_Outdoor_Space = 'Lobby' UNION SELECT Name FROM Room WHERE Indoor_Outdoor_Space = 'Terrace' AND Size = 500"
          ]
        },
        {
          "interpretation": "From the rooms table, select all columns where Indoor_Outdoor_Space is either 'Lobby' or 'Terrace' and Size is 500.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Room WHERE Indoor_Outdoor_Space IN ('Lobby', 'Terrace') AND Size = 500"
          ]
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.16666666666666666,
        "one_found": true,
        "f1_score": 0.2857142857142857,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_1tab_val_indoor-outdoor_space/attachment_1tab_val_indoor-outdoor_space.sqlite",
      "db_dump": "CREATE TABLE Amenities(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    amenityName TEXT,\n    available BOOL DEFAULT FALSE\n);\nCREATE TABLE Booking(\n    bookingID INTEGER PRIMARY KEY AUTOINCREMENT,\n    roomId INTEGER REFERENCES Room(id),\n    customerId INTEGER REFERENCES Customer(customerID),\n    startDate DATE,\n    endDate DATE,\n    totalPrice DECIMAL(10,2)\n);\nCREATE TABLE Customer(\n    customerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber CHAR(10)\n);\nCREATE TABLE Room(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Indoor_Outdoor_Space TEXT,\n    Size INT,\n    Price DECIMAL(10,2)\n);\n\nINSERT INTO \"Amenities\" (id,amenityName,available) VALUES (1,'WiFi',1),(2,'Parking Space',1),(3,'Air Conditioner',1),(4,'Projector',0);\nINSERT INTO \"Booking\" (bookingID,roomId,customerId,startDate,endDate,totalPrice) VALUES (1,1,1,'2022-01-10','2022-01-12',2000),(2,2,2,'2022-01-15','2022-01-17',3000),(3,3,3,'2022-01-20','2022-01-22',4000),(4,4,4,'2022-01-25','2022-01-27',5000);\nINSERT INTO \"Customer\" (customerID,firstName,lastName,email,phoneNumber) VALUES (1,'John','Doe','john@example.com','+123456789'),(2,'Jane','Smith','jane@example.com','+234567890'),(3,'Michael','Johnson','michael@example.com','+345678901'),(4,'Emily','Williams','emily@example.com','+45678902');\nINSERT INTO \"Room\" (id,Name,Indoor_Outdoor_Space,Size,Price) VALUES (1,'Conference Hall','Lobby',500,678.99),(2,'Banquet Hall','Lobby',600,830.99),(3,'Rooftop Terrace','Terrace',500,1000.99),(4,'Garden Patio','Terrace',400,870.99);\n",
      "question": "List all lobbies that can accommodate 500 people and terraces of the same size. Show them in one table.",
      "gold_queries": [
        "SELECT Room.Name \r\nFROM Room\r\nWHERE (Room.Indoor_Outdoor_Space = \"Lobby\" OR Room.Indoor_Outdoor_Space = \"Terrace\") AND Room.Size = 500"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Filter rooms where the space for 500 people is both indoors and on a terrace.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name FROM Room WHERE Indoor_Outdoor_Space = 'Lobby' AND Size = 500 AND Indoor_Outdoor_Space = 'Terrace'"
          ]
        },
        {
          "interpretation": "List all rooms where the lobby size is equal to 500 and the terrace size is also 500.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Indoor_Outdoor_Space, Size \nFROM Room \nWHERE Indoor_Outdoor_Space = 'Lobby' AND Size = 500 \nUNION \nSELECT Name, Indoor_Outdoor_Space, Size \nFROM Room \nWHERE Indoor_Outdoor_Space = 'Terrace' AND Size = 500"
          ]
        },
        {
          "interpretation": "Show an overview of rooms that have a lobby space of 500 and the same size as a terrace.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Indoor_Outdoor_Space, Size, Price \nFROM Room \nWHERE (Indoor_Outdoor_Space = 'Lobby' AND Size = 500) \n   OR (Indoor_Outdoor_Space = 'Terrace' AND Size = 500)"
          ]
        },
        {
          "interpretation": "Combine instaces where lobby size is 500 and the terrace size is also 500.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Room WHERE (Indoor_Outdoor_Space = 'Lobby' AND Size = 500) OR (Indoor_Outdoor_Space = 'Terrace' AND Size = 500)"
          ]
        },
        {
          "interpretation": "List all lobbies that can accommodate 500 people and have the same size as terraces.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name FROM Room WHERE Indoor_Outdoor_Space = 'Lobby' AND Size = 500 AND Size = (SELECT Size FROM Room WHERE Indoor_Outdoor_Space = 'Terrace')"
          ]
        },
        {
          "interpretation": "List rooms with lobby space and a terrace of equal capacity for 500 people.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Name FROM Room WHERE Indoor_Outdoor_Space = 'Lobby' AND Size = 500\nUNION\nSELECT Name FROM Room WHERE Indoor_Outdoor_Space = 'Terrace' AND Size = 500"
          ]
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.16666666666666666,
        "one_found": true,
        "f1_score": 0.2857142857142857,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_1tab_ref_hospitality_staff/attachment_1tab_ref_hospitality_staff.sqlite",
      "db_dump": "CREATE TABLE Bookings (\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    GuestName TEXT,\n    CheckInDate DATE,\n    CheckOutDate DATE,\n    RoomID INTEGER,\n    FOREIGN KEY(RoomID) REFERENCES Rooms(ID));\nCREATE TABLE Languages (\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Language TEXT UNIQUE);\nCREATE TABLE Rooms (\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    RoomNumber INTEGER);\nCREATE TABLE Staff (\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Position TEXT,\n    LanguageID INTEGER,\n    FOREIGN KEY(LanguageID) REFERENCES Languages(ID));\nCREATE TABLE StaffRooms (\n    StaffID INTEGER,\n    RoomID INTEGER,\n    WorkDays TEXT,\n    PRIMARY KEY(StaffID, RoomID),\n    FOREIGN KEY(StaffID) REFERENCES Staff(ID),\n    FOREIGN KEY(RoomID) REFERENCES Rooms(ID));\n\nINSERT INTO \"Bookings\" (ID,GuestName,CheckInDate,CheckOutDate,RoomID) VALUES (1,'Alice Cooper','2023-06-01','2023-06-07',101),(2,'Bob Marley','2023-06-08','2023-06-14',102),(3,'Carol King','2023-06-15','2023-06-21',103),(4,'Daniel Ricciardo','2023-06-22','2023-06-29',104),(5,'Eva Mendes','2023-06-30','2023-07-07',105);\nINSERT INTO \"Languages\" (ID,Language) VALUES (1,'Spanish'),(2,'French'),(3,'German'),(4,'Italian'),(5,'Japanese');\nINSERT INTO \"Rooms\" (ID,RoomNumber) VALUES (1,101),(2,102),(3,103),(4,104),(5,105);\nINSERT INTO \"Staff\" (ID,Name,Position,LanguageID) VALUES (1,'John Doe','Chef',1),(2,'Mike Smith','Chef',3),(3,'Emily Johnson','Server',1),(4,'David Brown','Server',4),(5,'Anna Davis','Manager',2),(6,'Peter Miller','Bartender',5);\nINSERT INTO \"StaffRooms\" (StaffID,RoomID,WorkDays) VALUES (5,101,'Monday,Wednesday'),(6,102,'Tuesday,Thursday');\n",
      "question": "Provide a list of all chefs and also provide a list of all Spanish-speaking servers. Show them in one table.",
      "gold_queries": [
        "SELECT Staff.name \r\nFROM Staff JOIN Languages ON Staff.LanguageID = Languages.ID\r\nWHERE Staff.Position = \"Chef\" OR Staff.Position = \"Server\" AND Languages.Language = \"Spanish\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List staff including both 'Chef's as position roles when 'Spanish' is used, to include all roles partaking, show all staff who fit this condition.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Staff.Name, Staff.Position\nFROM Staff\nJOIN Languages ON Staff.LanguageID = Languages.ID\nWHERE (Languages.Language = 'Spanish' AND Staff.Position = 'Chef') OR \n      Languages.Language = 'Spanish'"
          ]
        },
        {
          "interpretation": "Output a table that includes all 'Chef's and Servers who are able to communicate in the Spanish (Simply list all staff who fulfill this job description).",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name \nFROM Staff \nWHERE Position IN ('Chef', 'Server') AND LanguageID = (SELECT ID FROM Languages WHERE Language = 'Spanish')"
          ]
        },
        {
          "interpretation": "Provide a breakdown of staff roles, specifically 'Chef' and 'Server' who speak 'Spanish', and present in a aggregated table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Position, COUNT(*) AS NumberOfStaff\nFROM Staff\nWHERE LanguageID = (SELECT ID FROM Languages WHERE Language = 'Spanish')\n  AND Position IN ('Chef', 'Server')\nGROUP BY Position"
          ]
        },
        {
          "interpretation": "Create a unified list of 'Chefs' and 'Spanish-speaking Servers' including their position and Name.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Position FROM Staff WHERE Position = 'Chef' UNION SELECT Name, Position FROM Staff WHERE Position = 'Server' AND LanguageID = 1"
          ]
        },
        {
          "interpretation": "List all staff members with position 'Chef' and all staff members with position 'Server' who speak the language 'Spanish', and export to one table with Name, Position, and Language.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Staff.Name, Staff.Position, Languages.Language\nFROM Staff\nJOIN Languages ON Staff.LanguageID = Languages.ID\nWHERE (Staff.Position = 'Chef' OR (Staff.Position = 'Server' AND Languages.Language = 'Spanish'))"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_1tab_ref_hospitality_staff/attachment_1tab_ref_hospitality_staff.sqlite",
      "db_dump": "CREATE TABLE Bookings (\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    GuestName TEXT,\n    CheckInDate DATE,\n    CheckOutDate DATE,\n    RoomID INTEGER,\n    FOREIGN KEY(RoomID) REFERENCES Rooms(ID));\nCREATE TABLE Languages (\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Language TEXT UNIQUE);\nCREATE TABLE Rooms (\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    RoomNumber INTEGER);\nCREATE TABLE Staff (\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Position TEXT,\n    LanguageID INTEGER,\n    FOREIGN KEY(LanguageID) REFERENCES Languages(ID));\nCREATE TABLE StaffRooms (\n    StaffID INTEGER,\n    RoomID INTEGER,\n    WorkDays TEXT,\n    PRIMARY KEY(StaffID, RoomID),\n    FOREIGN KEY(StaffID) REFERENCES Staff(ID),\n    FOREIGN KEY(RoomID) REFERENCES Rooms(ID));\n\nINSERT INTO \"Bookings\" (ID,GuestName,CheckInDate,CheckOutDate,RoomID) VALUES (1,'Alice Cooper','2023-06-01','2023-06-07',101),(2,'Bob Marley','2023-06-08','2023-06-14',102),(3,'Carol King','2023-06-15','2023-06-21',103),(4,'Daniel Ricciardo','2023-06-22','2023-06-29',104),(5,'Eva Mendes','2023-06-30','2023-07-07',105);\nINSERT INTO \"Languages\" (ID,Language) VALUES (1,'Spanish'),(2,'French'),(3,'German'),(4,'Italian'),(5,'Japanese');\nINSERT INTO \"Rooms\" (ID,RoomNumber) VALUES (1,101),(2,102),(3,103),(4,104),(5,105);\nINSERT INTO \"Staff\" (ID,Name,Position,LanguageID) VALUES (1,'John Doe','Chef',1),(2,'Mike Smith','Chef',3),(3,'Emily Johnson','Server',1),(4,'David Brown','Server',4),(5,'Anna Davis','Manager',2),(6,'Peter Miller','Bartender',5);\nINSERT INTO \"StaffRooms\" (StaffID,RoomID,WorkDays) VALUES (5,101,'Monday,Wednesday'),(6,102,'Tuesday,Thursday');\n",
      "question": "What chefs speak Spanish and what servers also speak it? Show them in one table.",
      "gold_queries": [
        "SELECT Staff.name \r\nFROM Staff JOIN Languages ON Staff.LanguageID = Languages.ID\r\nWHERE (Staff.Position = \"Chef\" OR Staff.Position = \"Server\") AND Languages.Language = \"Spanish\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Who are chefs or servers that speak Spanish",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Name FROM Staff WHERE Position IN ('Chef', 'Server') AND LanguageID = (SELECT ID FROM Languages WHERE Language = 'Spanish')"
          ]
        },
        {
          "interpretation": "Show a table for the staff that speak Spanish and their positions",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.Name, S.Position \nFROM Staff S \nJOIN Languages L ON S.LanguageID = L.ID \nWHERE L.Language = 'Spanish'"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "one_found": true,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_1tab_ref_hospitality_staff/attachment_1tab_ref_hospitality_staff.sqlite",
      "db_dump": "CREATE TABLE Bookings (\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    GuestName TEXT,\n    CheckInDate DATE,\n    CheckOutDate DATE,\n    RoomID INTEGER,\n    FOREIGN KEY(RoomID) REFERENCES Rooms(ID));\nCREATE TABLE Languages (\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Language TEXT UNIQUE);\nCREATE TABLE Rooms (\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    RoomNumber INTEGER);\nCREATE TABLE Staff (\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Position TEXT,\n    LanguageID INTEGER,\n    FOREIGN KEY(LanguageID) REFERENCES Languages(ID));\nCREATE TABLE StaffRooms (\n    StaffID INTEGER,\n    RoomID INTEGER,\n    WorkDays TEXT,\n    PRIMARY KEY(StaffID, RoomID),\n    FOREIGN KEY(StaffID) REFERENCES Staff(ID),\n    FOREIGN KEY(RoomID) REFERENCES Rooms(ID));\n\nINSERT INTO \"Bookings\" (ID,GuestName,CheckInDate,CheckOutDate,RoomID) VALUES (1,'Alice Cooper','2023-06-01','2023-06-07',101),(2,'Bob Marley','2023-06-08','2023-06-14',102),(3,'Carol King','2023-06-15','2023-06-21',103),(4,'Daniel Ricciardo','2023-06-22','2023-06-29',104),(5,'Eva Mendes','2023-06-30','2023-07-07',105);\nINSERT INTO \"Languages\" (ID,Language) VALUES (1,'Spanish'),(2,'French'),(3,'German'),(4,'Italian'),(5,'Japanese');\nINSERT INTO \"Rooms\" (ID,RoomNumber) VALUES (1,101),(2,102),(3,103),(4,104),(5,105);\nINSERT INTO \"Staff\" (ID,Name,Position,LanguageID) VALUES (1,'John Doe','Chef',1),(2,'Mike Smith','Chef',3),(3,'Emily Johnson','Server',1),(4,'David Brown','Server',4),(5,'Anna Davis','Manager',2),(6,'Peter Miller','Bartender',5);\nINSERT INTO \"StaffRooms\" (StaffID,RoomID,WorkDays) VALUES (5,101,'Monday,Wednesday'),(6,102,'Tuesday,Thursday');\n",
      "question": "Show Spanish-speaking servers and chefs. Show them in one table.",
      "gold_queries": [
        "SELECT Staff.name \r\nFROM Staff JOIN Languages ON Staff.LanguageID = Languages.ID\r\nWHERE (Staff.Position = \"Chef\" OR Staff.Position = \"Server\") AND Languages.Language = \"Spanish\"",
        "SELECT Staff.name \r\nFROM Staff JOIN Languages ON Staff.LanguageID = Languages.ID\r\nWHERE Staff.Position = \"Chef\" OR Staff.Position = \"Server\" AND Languages.Language = \"Spanish\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Select all rows from Staff where the position is either 'Server' or 'Chef' and there exists a matching row in the Languages table where Language is 'Spanish'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Staff WHERE Position IN ('Server', 'Chef') AND LanguageID = (SELECT ID FROM Languages WHERE Language = 'Spanish')"
          ]
        },
        {
          "interpretation": "Show all rows from the combined result of Staff and Languages tables filtered by 'Server' and 'Chef' positions and where the language is Spanish.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.*, L.Language \nFROM Staff S \nJOIN Languages L ON S.LanguageID = L.ID \nWHERE S.Position IN ('Server', 'Chef') AND L.Language = 'Spanish'"
          ]
        },
        {
          "interpretation": "Display Names of all staff where the Name is associated with either Server or Chef and the Language matching is Spanish.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name FROM Staff WHERE Position IN ('Server', 'Chef') AND LanguageID = (SELECT ID FROM Languages WHERE Language = 'Spanish')"
          ]
        },
        {
          "interpretation": "Join the Staff table with the Languages table on only the rows where LanguageID and ID are equal, then show filtered rows where staff positions are 'Server' or 'Chef' and corresponding language is 'Spanish'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Staff.Name, Staff.Position, Languages.Language \nFROM Staff \nJOIN Languages ON Staff.LanguageID = Languages.ID \nWHERE Staff.Position IN ('Server', 'Chef') AND Languages.Language = 'Spanish'"
          ]
        },
        {
          "interpretation": "Join the Staff table with a modified query on Languages table (Language='Spanish') to find staff where positions are 'Server' or 'Chef' and have a matching 'Spanish' language.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Staff.Name, Staff.Position \nFROM Staff \nJOIN Languages ON Staff.LanguageID = Languages.ID \nWHERE Languages.Language = 'Spanish' AND Staff.Position IN ('Server', 'Chef')"
          ]
        },
        {
          "interpretation": "Show the joined set of Staff and Languages, where the Name is matched to either Server, or Chef in Staff and Spanish in Languages.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Staff.Name, Languages.Language \nFROM Staff \nJOIN Languages ON Staff.LanguageID = Languages.ID \nWHERE Staff.Position IN ('Server', 'Chef') AND Languages.Language = 'Spanish'"
          ]
        },
        {
          "interpretation": "Display all staff members with Position 'Server' or 'Chef' that have a Language ID present in the Languages table with 'Spanish'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Position, LanguageID FROM Staff WHERE Position IN ('Server', 'Chef') AND LanguageID = (SELECT ID FROM Languages WHERE Language = 'Spanish')"
          ]
        }
      ],
      "num_unique_execution_results": 7,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.14285714285714285,
        "one_found": true,
        "f1_score": 0.22222222222222224,
        "num_queries": 7,
        "num_unique_queries": 7,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_2tab_val_relaxation_getaway/attachment_2tab_val_relaxation_getaway.sqlite",
      "db_dump": "CREATE TABLE Day_Spa(\n    id INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT,\n    Services TEXT,\n    Price INTEGER\n);\nCREATE TABLE Guest(\n    id INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Email TEXT,\n    PhoneNumber TEXT\n);\nCREATE TABLE Hotel(\n    id INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT,\n    Rooms TEXT,\n    Amenities TEXT\n);\nCREATE TABLE Restaurant(\n    id INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT,\n    Cuisine TEXT,\n    Menu TEXT\n);\nCREATE TABLE Spa_Therapist(\n    id INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Specialty TEXT,\n    Experience INT\n);\nCREATE TABLE Wellness_Retreat(\n    id INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT,\n    Activities TEXT,\n    Price INTEGER\n);\n\nINSERT INTO \"Day_Spa\" (id,Name,Location,Services,Price) VALUES (1,'Oasis Day Spa','New York','Massage, Facial, Manicure',150),(2,'Serenity Day Spa','Los Angeles','Aromatherapy, Yoga',300),(3,'Escape Day Spa','Chicago','Hot Stone Massage, Acupuncture',250),(4,'Zen Day Spa','Miami','Reflexology, Herbal Wraps',200),(5,'Paradise Day Spa','Dallas','Infrared Sauna, Meditation',180);\nINSERT INTO \"Guest\" (id,FirstName,LastName,Email,PhoneNumber) VALUES (1,'Anna','White','anna@example.com','123-456-7890'),(2,'Ben','Black','ben@example.com','234-567-8901'),(3,'Cathy','Green','cathy@example.com','345-678-9012'),(4,'Daniel','Blue','daniel@example.com','456-789-0123'),(5,'Elizabeth','Red','elizabeth@example.com','567-890-1234');\nINSERT INTO \"Hotel\" (id,Name,Location,Rooms,Amenities) VALUES (1,'Grand Plaza Hotel','New York','300 rooms','Gym, Pool, Restaurant'),(2,'Riverview Inn','California','200 rooms','Spa, Bar, Parking'),(3,'City Center Suites','Illinois','250 rooms','Business center, Concierge service, Laundry'),(4,'Coastal Breeze Resort','Texas','275 rooms','Kids club, Tennis courts, Beach access'),(5,'Urban Loft Hotel','Georgia','225 rooms','Free WiFi, Lounge area, Room service');\nINSERT INTO \"Restaurant\" (id,Name,Location,Cuisine,Menu) VALUES (1,'The Gourmet Table','New York','French','Steak frites, Coq au vin, Cr\u00e8me br\u00fbl\u00e9e'),(2,'Asian Delights','California','Japanese','Sushi rolls, Tempura, Soba noodles'),(3,'Italiano Ristorante','Illinois','Italian','Pasta, Risotto, Tiramisu'),(4,'Baja Grill','Texas','Mexican','Enchiladas, Fajitas, Churros'),(5,'Curry House','Georgia','Indian','Butter chicken, Biryani, Samosas');\nINSERT INTO \"Spa_Therapist\" (id,FirstName,LastName,Specialty,Experience) VALUES (1,'Alice','Smith','Massage',10),(2,'Bob','Johnson','Yoga',8),(3,'Carol','Williams','Acupuncture',6),(4,'David','Brown','Herbal Wraps',12),(5,'Emily','Jones','Facials',7);\nINSERT INTO \"Wellness_Retreat\" (id,Name,Location,Activities,Price) VALUES (1,'Mountain Retreat','Colorado','Hiking, Birdwatching',150),(2,'Beachside Retreat','Florida','Surfing, Paddleboarding',300),(3,'Forest Retreat','Washington','Camping, Fishing',250),(4,'Desert Oasis','Nevada','Stargazing, Offroading',200),(5,'Lakeside Escape','Minnesota','Boating, Swimming',180);\n",
      "question": "Show me $150 wellness programs and $150 day spas. Show them in one table.",
      "gold_queries": [
        "SELECT Day_Spa.name\r\nFROM Day_Spa\r\nWHERE Day_Spa.Price = 150\r\nUNION\r\nSELECT Wellness_Retreat.name\r\nFROM Wellness_Retreat\r\nWHERE Wellness_Retreat.Price = 150"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Retrieve all wellness programs and day spas, then calculate the average price of a day spa and a wellness program and show where the price is equal to $150",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Location, Activities, Price \nFROM Wellness_Retreat \nWHERE Price = 150\nUNION\nSELECT Name, Location, Services, Price \nFROM Day_Spa \nWHERE Price = 150",
            "SELECT AVG(Price) AS AveragePrice \nFROM (\n    SELECT Price FROM Wellness_Retreat\n    UNION ALL\n    SELECT Price FROM Day_Spa\n) AS CombinedPrices"
          ]
        },
        {
          "interpretation": "Select wellness programs and day spas with price $150",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Name FROM Wellness_Retreat WHERE Price = 150\nUNION\nSELECT Name FROM Day_Spa WHERE Price = 150"
          ]
        },
        {
          "interpretation": "Query all wellness programs, and for each yoga type, list the wellness programs where the price equals $150",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Activities, Price \nFROM Wellness_Retreat \nWHERE Price = 150 AND Activities LIKE '%Yoga%'"
          ]
        },
        {
          "interpretation": "List day spas and wellness programs, and for each type, list the ones where the price equals $150",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, 'Day Spa' AS Type FROM Day_Spa WHERE Price = 150\nUNION\nSELECT Name, 'Wellness Retreat' AS Type FROM Wellness_Retreat WHERE Price = 150"
          ]
        },
        {
          "interpretation": "Get all wellness programs and day spas and then show only the rows where price equals $150",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Location, Price FROM Wellness_Retreat WHERE Price = 150\nUNION\nSELECT Name, Location, Price FROM Day_Spa WHERE Price = 150"
          ]
        },
        {
          "interpretation": "Filter out day spas and wellness programs that are not $150",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Day_Spa WHERE Price = 150\nUNION\nSELECT * FROM Wellness_Retreat WHERE Price = 150"
          ]
        },
        {
          "interpretation": "Retrieve all wellness programs and day spas, then calculate the average price of a day spa and a wellness program and show where the price is equal to $150",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Location, Activities, Price \nFROM Wellness_Retreat \nWHERE Price = 150\nUNION\nSELECT Name, Location, Services, Price \nFROM Day_Spa \nWHERE Price = 150",
            "SELECT AVG(Price) AS AveragePrice \nFROM (\n    SELECT Price FROM Wellness_Retreat\n    UNION ALL\n    SELECT Price FROM Day_Spa\n) AS CombinedPrices"
          ]
        },
        {
          "interpretation": "Get the count of day spas and wellness programs, and show only the rows where count equals 2",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(*) AS count FROM Day_Spa\nUNION\nSELECT COUNT(*) AS count FROM Wellness_Retreat\nHAVING count = 2"
          ]
        }
      ],
      "num_unique_execution_results": 8,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.125,
        "one_found": true,
        "f1_score": 0.2222222222222222,
        "num_queries": 10,
        "num_unique_queries": 8,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_2tab_val_relaxation_getaway/attachment_2tab_val_relaxation_getaway.sqlite",
      "db_dump": "CREATE TABLE Day_Spa(\n    id INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT,\n    Services TEXT,\n    Price INTEGER\n);\nCREATE TABLE Guest(\n    id INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Email TEXT,\n    PhoneNumber TEXT\n);\nCREATE TABLE Hotel(\n    id INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT,\n    Rooms TEXT,\n    Amenities TEXT\n);\nCREATE TABLE Restaurant(\n    id INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT,\n    Cuisine TEXT,\n    Menu TEXT\n);\nCREATE TABLE Spa_Therapist(\n    id INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Specialty TEXT,\n    Experience INT\n);\nCREATE TABLE Wellness_Retreat(\n    id INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT,\n    Activities TEXT,\n    Price INTEGER\n);\n\nINSERT INTO \"Day_Spa\" (id,Name,Location,Services,Price) VALUES (1,'Oasis Day Spa','New York','Massage, Facial, Manicure',150),(2,'Serenity Day Spa','Los Angeles','Aromatherapy, Yoga',300),(3,'Escape Day Spa','Chicago','Hot Stone Massage, Acupuncture',250),(4,'Zen Day Spa','Miami','Reflexology, Herbal Wraps',200),(5,'Paradise Day Spa','Dallas','Infrared Sauna, Meditation',180);\nINSERT INTO \"Guest\" (id,FirstName,LastName,Email,PhoneNumber) VALUES (1,'Anna','White','anna@example.com','123-456-7890'),(2,'Ben','Black','ben@example.com','234-567-8901'),(3,'Cathy','Green','cathy@example.com','345-678-9012'),(4,'Daniel','Blue','daniel@example.com','456-789-0123'),(5,'Elizabeth','Red','elizabeth@example.com','567-890-1234');\nINSERT INTO \"Hotel\" (id,Name,Location,Rooms,Amenities) VALUES (1,'Grand Plaza Hotel','New York','300 rooms','Gym, Pool, Restaurant'),(2,'Riverview Inn','California','200 rooms','Spa, Bar, Parking'),(3,'City Center Suites','Illinois','250 rooms','Business center, Concierge service, Laundry'),(4,'Coastal Breeze Resort','Texas','275 rooms','Kids club, Tennis courts, Beach access'),(5,'Urban Loft Hotel','Georgia','225 rooms','Free WiFi, Lounge area, Room service');\nINSERT INTO \"Restaurant\" (id,Name,Location,Cuisine,Menu) VALUES (1,'The Gourmet Table','New York','French','Steak frites, Coq au vin, Cr\u00e8me br\u00fbl\u00e9e'),(2,'Asian Delights','California','Japanese','Sushi rolls, Tempura, Soba noodles'),(3,'Italiano Ristorante','Illinois','Italian','Pasta, Risotto, Tiramisu'),(4,'Baja Grill','Texas','Mexican','Enchiladas, Fajitas, Churros'),(5,'Curry House','Georgia','Indian','Butter chicken, Biryani, Samosas');\nINSERT INTO \"Spa_Therapist\" (id,FirstName,LastName,Specialty,Experience) VALUES (1,'Alice','Smith','Massage',10),(2,'Bob','Johnson','Yoga',8),(3,'Carol','Williams','Acupuncture',6),(4,'David','Brown','Herbal Wraps',12),(5,'Emily','Jones','Facials',7);\nINSERT INTO \"Wellness_Retreat\" (id,Name,Location,Activities,Price) VALUES (1,'Mountain Retreat','Colorado','Hiking, Birdwatching',150),(2,'Beachside Retreat','Florida','Surfing, Paddleboarding',300),(3,'Forest Retreat','Washington','Camping, Fishing',250),(4,'Desert Oasis','Nevada','Stargazing, Offroading',200),(5,'Lakeside Escape','Minnesota','Boating, Swimming',180);\n",
      "question": "Show $150 wellness programs and day spas. Show them in one table.",
      "gold_queries": [
        "SELECT Day_Spa.name\r\nFROM Day_Spa\r\nWHERE Day_Spa.Price = 150\r\nUNION\r\nSELECT Wellness_Retreat.name\r\nFROM Wellness_Retreat\r\nWHERE Wellness_Retreat.Price = 150",
        "SELECT Day_Spa.name\r\nFROM Day_Spa\r\nUNION\r\nSELECT Wellness_Retreat.name\r\nFROM Wellness_Retreat\r\nWHERE Wellness_Retreat.Price = 150"
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Show a combined table of all day spas and wellness programs that cost $150.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Location, Services AS Activities, Price FROM Day_Spa WHERE Price = 150 UNION SELECT Name, Location, Activities, Price FROM Wellness_Retreat WHERE Price = 150"
          ]
        },
        {
          "interpretation": "Display day spas and wellness programs with a price matching the $150 wellness programs.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name FROM Day_Spa WHERE Price = (SELECT Price FROM Wellness_Retreat WHERE Price = 150)"
          ]
        },
        {
          "interpretation": "Focus on retrieving rows from both tables where the price equals $150.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Wellness_Retreat WHERE Price = 150",
            "SELECT * FROM Day_Spa WHERE Price = 150"
          ]
        },
        {
          "interpretation": "Focus on retrieving rows from both tables where the price equals $150.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Wellness_Retreat WHERE Price = 150",
            "SELECT * FROM Day_Spa WHERE Price = 150"
          ]
        },
        {
          "interpretation": "Join day spas and wellness programs tables and filter by $150 price.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Day_Spa.Name AS SpaName, Wellness_Retreat.Name AS RetreatName\nFROM Day_Spa\nJOIN Wellness_Retreat ON Day_Spa.Price = Wellness_Retreat.Price\nWHERE Day_Spa.Price = 150 AND Wellness_Retreat.Price = 150"
          ]
        },
        {
          "interpretation": "Include day spas with a price of $150 and wellness programs in one result set.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Location, Services, Price FROM Day_Spa WHERE Price = 150\nUNION\nSELECT Name, Location, Activities, Price FROM Wellness_Retreat"
          ]
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.16666666666666666,
        "one_found": true,
        "f1_score": 0.25,
        "num_queries": 8,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_2tab_val_relaxation_getaway/attachment_2tab_val_relaxation_getaway.sqlite",
      "db_dump": "CREATE TABLE Day_Spa(\n    id INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT,\n    Services TEXT,\n    Price INTEGER\n);\nCREATE TABLE Guest(\n    id INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Email TEXT,\n    PhoneNumber TEXT\n);\nCREATE TABLE Hotel(\n    id INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT,\n    Rooms TEXT,\n    Amenities TEXT\n);\nCREATE TABLE Restaurant(\n    id INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT,\n    Cuisine TEXT,\n    Menu TEXT\n);\nCREATE TABLE Spa_Therapist(\n    id INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Specialty TEXT,\n    Experience INT\n);\nCREATE TABLE Wellness_Retreat(\n    id INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT,\n    Activities TEXT,\n    Price INTEGER\n);\n\nINSERT INTO \"Day_Spa\" (id,Name,Location,Services,Price) VALUES (1,'Oasis Day Spa','New York','Massage, Facial, Manicure',150),(2,'Serenity Day Spa','Los Angeles','Aromatherapy, Yoga',300),(3,'Escape Day Spa','Chicago','Hot Stone Massage, Acupuncture',250),(4,'Zen Day Spa','Miami','Reflexology, Herbal Wraps',200),(5,'Paradise Day Spa','Dallas','Infrared Sauna, Meditation',180);\nINSERT INTO \"Guest\" (id,FirstName,LastName,Email,PhoneNumber) VALUES (1,'Anna','White','anna@example.com','123-456-7890'),(2,'Ben','Black','ben@example.com','234-567-8901'),(3,'Cathy','Green','cathy@example.com','345-678-9012'),(4,'Daniel','Blue','daniel@example.com','456-789-0123'),(5,'Elizabeth','Red','elizabeth@example.com','567-890-1234');\nINSERT INTO \"Hotel\" (id,Name,Location,Rooms,Amenities) VALUES (1,'Grand Plaza Hotel','New York','300 rooms','Gym, Pool, Restaurant'),(2,'Riverview Inn','California','200 rooms','Spa, Bar, Parking'),(3,'City Center Suites','Illinois','250 rooms','Business center, Concierge service, Laundry'),(4,'Coastal Breeze Resort','Texas','275 rooms','Kids club, Tennis courts, Beach access'),(5,'Urban Loft Hotel','Georgia','225 rooms','Free WiFi, Lounge area, Room service');\nINSERT INTO \"Restaurant\" (id,Name,Location,Cuisine,Menu) VALUES (1,'The Gourmet Table','New York','French','Steak frites, Coq au vin, Cr\u00e8me br\u00fbl\u00e9e'),(2,'Asian Delights','California','Japanese','Sushi rolls, Tempura, Soba noodles'),(3,'Italiano Ristorante','Illinois','Italian','Pasta, Risotto, Tiramisu'),(4,'Baja Grill','Texas','Mexican','Enchiladas, Fajitas, Churros'),(5,'Curry House','Georgia','Indian','Butter chicken, Biryani, Samosas');\nINSERT INTO \"Spa_Therapist\" (id,FirstName,LastName,Specialty,Experience) VALUES (1,'Alice','Smith','Massage',10),(2,'Bob','Johnson','Yoga',8),(3,'Carol','Williams','Acupuncture',6),(4,'David','Brown','Herbal Wraps',12),(5,'Emily','Jones','Facials',7);\nINSERT INTO \"Wellness_Retreat\" (id,Name,Location,Activities,Price) VALUES (1,'Mountain Retreat','Colorado','Hiking, Birdwatching',150),(2,'Beachside Retreat','Florida','Surfing, Paddleboarding',300),(3,'Forest Retreat','Washington','Camping, Fishing',250),(4,'Desert Oasis','Nevada','Stargazing, Offroading',200),(5,'Lakeside Escape','Minnesota','Boating, Swimming',180);\n",
      "question": "Show all day spas and $150 wellness programs. Show them in one table.",
      "gold_queries": [
        "SELECT Day_Spa.name\r\nFROM Day_Spa\r\nUNION\r\nSELECT Wellness_Retreat.name\r\nFROM Wellness_Retreat\r\nWHERE Wellness_Retreat.Price = 150"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Show all rows from the Day_Spa table that have a matching price (150) with rows from other tables (but not Wellness_Retreat).",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Day_Spa WHERE Price = 150 AND Price IN (SELECT Price FROM Hotel UNION SELECT Price FROM Restaurant)"
          ]
        },
        {
          "interpretation": "Show all rows from the Wellness_Retreat table where the Price is less than or equal to 150.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Wellness_Retreat WHERE Price <= 150"
          ]
        },
        {
          "interpretation": "Consider that 'day spas' could be interpreted as Day_Spa or any similar logical tables, though the code combines these two, but different customers may be interpreting 'day spas' differently based on their own used wording.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Location, Services, Price FROM Day_Spa"
          ]
        },
        {
          "interpretation": "Show the Day_Spa and Wellness_Retreat tables separately, but with an implied condition on the Day_Spa table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Location, Services, Price FROM Day_Spa WHERE Price > 100",
            "SELECT Name, Location, Activities, Price FROM Wellness_Retreat"
          ]
        },
        {
          "interpretation": "Show all rows from the Day_Spa table combined with all rows from the Wellness_Retreat table where the Price is 150.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Day_Spa WHERE Price = 150\nUNION ALL\nSELECT * FROM Wellness_Retreat WHERE Price = 150"
          ]
        },
        {
          "interpretation": "Show all rows from the Day_Spa table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Day_Spa"
          ]
        },
        {
          "interpretation": "Show a joined table with Day_Spa and Wellness_Retreat tables, but with no specific condition or filter.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Day_Spa CROSS JOIN Wellness_Retreat"
          ]
        },
        {
          "interpretation": "Show all rows from the Day_Spa table combined with all rows from the Wellness_Retreat table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Day_Spa UNION ALL SELECT * FROM Wellness_Retreat"
          ]
        }
      ],
      "num_unique_execution_results": 8,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 9,
        "num_unique_queries": 9,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_2tab_val_vacation_option/attachment_2tab_val_vacation_option.sqlite",
      "db_dump": "CREATE TABLE All_Inclusive_Resort (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT,\n    star_rating INTEGER,\n    number_of_rooms INTEGER,\n    activities TEXT);\nCREATE TABLE Booking(\n    bookingId INTEGER PRIMARY KEY AUTOINCREMENT,\n    customerId INTEGER,\n    cruiseOrResort BOOLEAN,\n    checkinDate DATE,\n    checkoutDate DATE,\n    FOREIGN KEY(customerId) REFERENCES Customer(id));\nCREATE TABLE Cruise_Ship (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    capacity INTEGER,\n    destination TEXT,\n    cruise_start_date DATE,\n    cruise_end_date DATE,\n    activities TEXT);\nCREATE TABLE Customer(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber CHAR(10),\n    preferredLanguage TEXT);\nCREATE TABLE Employee(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    position TEXT,\n    yearsOfExperience INTEGER,\n    skill TEXT);\n\nINSERT INTO \"All_Inclusive_Resort\" (id,name,location,star_rating,number_of_rooms,activities) VALUES (1,'Paradise Beach','Hawaii',4,150,'Dance Class'),(2,'Sunset Oasis','Mexico',3,200,'Yoga Session');\nINSERT INTO \"Booking\" (bookingId,customerId,cruiseOrResort,checkinDate,checkoutDate) VALUES (1,1,1,'2023-06-01','2023-06-07'),(2,2,0,'2023-06-10','2023-06-20');\nINSERT INTO \"Cruise_Ship\" (id,name,capacity,destination,cruise_start_date,cruise_end_date,activities) VALUES (1,'Majestic Ocean',3000,'Caribbean','2023-06-01','2023-06-07','Dance Class'),(2,'Grand Voyage',2500,'Alaska','2023-05-15','2023-05-28','Bingo Night');\nINSERT INTO \"Customer\" (id,firstName,lastName,email,phoneNumber,preferredLanguage) VALUES (1,'John','Smith','johnsmith@example.com','+1234567890','English'),(2,'Jane','Doe','janedoe@example.com','+9876543210','French');\nINSERT INTO \"Employee\" (id,firstName,lastName,position,yearsOfExperience,skill) VALUES (1,'Tom','Anderson','Receptionist',5,'Customer Service'),(2,'Laura','Williams','Chef',8,'Cooking');\n",
      "question": "Display all the cruise ships but only the resorts that offer a dance class. Show them in one table.",
      "gold_queries": [
        "SELECT Cruise_Ship.name\r\nFROM Cruise_Ship\r\nUNION\r\nSELECT All_Inclusive_Resort.name\r\nFROM All_Inclusive_Resort\r\nWHERE All_Inclusive_Resort.activities = \"Dance Class\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "so it isn't clear if you want too display festivals with resorts or isn't this a requirement.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, activities FROM All_Inclusive_Resort"
          ]
        },
        {
          "interpretation": "Note: The created tables show festivals, which in this problem doesn't have the 'dance class',",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name FROM All_Inclusive_Resort WHERE activities = 'Dance Class'"
          ]
        },
        {
          "interpretation": "Display all cruise ships with the additional information about resorts that offer a dance class.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    CS.id, \n    CS.name AS cruise_ship_name, \n    CS.capacity, \n    CS.destination, \n    CS.cruise_start_date, \n    CS.cruise_end_date, \n    CS.activities AS cruise_activities,\n    AR.id AS resort_id, \n    AR.name AS resort_name, \n    AR.location, \n    AR.star_rating, \n    AR.number_of_rooms, \n    AR.activities AS resort_activities\nFROM \n    Cruise_Ship CS\nJOIN \n    All_Inclusive_Resort AR\nON \n    CS.activities = AR.activities\nWHERE \n    CS.activities = 'Dance Class' OR AR.activities = 'Dance Class'"
          ]
        },
        {
          "interpretation": "Provide a table with the name of each cruise ship, followed by the list of resorts that offer a dance class.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT name FROM Cruise_Ship\nUNION\nSELECT name FROM All_Inclusive_Resort WHERE activities = 'Dance Class'"
          ]
        },
        {
          "interpretation": "Get all cruise ships and present the list of resorts that have 'dance class' as a service and are either in Mexico or have 5 stars.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name FROM Cruise_Ship\nUNION\nSELECT name FROM All_Inclusive_Resort\nWHERE activities LIKE '%Dance Class%'\n  AND (location = 'Mexico' OR star_rating = 5)"
          ]
        },
        {
          "interpretation": "Show the list of cruise ships and only include resorts that have a dance class as part of their activities.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name FROM Cruise_Ship WHERE activities LIKE '%Dance Class%'"
          ]
        },
        {
          "interpretation": "Provide a list of cruise ships with information about the resorts that offer a dance class and are located in Hawaii or Mexico.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT CS.name, CS.capacity, CS.destination, CS.cruise_start_date, CS.cruise_end_date, CS.activities, AR.name, AR.location, AR.star_rating, AR.number_of_rooms, AR.activities \nFROM Cruise_Ship CS \nJOIN All_Inclusive_Resort AR ON CS.activities = AR.activities \nWHERE AR.activities = 'Dance Class' AND AR.location IN ('Hawaii', 'Mexico')"
          ]
        },
        {
          "interpretation": "Display the festival calendar for all cruise ships and the integrated set of resorts that offer dance classes.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, cruise_start_date AS start_date, cruise_end_date AS end_date\nFROM Cruise_Ship\nWHERE activities LIKE '%Dance Class%'\nUNION\nSELECT name, checkinDate AS start_date, checkoutDate AS end_date\nFROM Booking\nJOIN All_Inclusive_Resort ON Booking.cruiseOrResort = 1 AND All_Inclusive_Resort.id = Booking.customerId\nWHERE All_Inclusive_Resort.activities LIKE '%Dance Class%'"
          ]
        }
      ],
      "num_unique_execution_results": 8,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.125,
        "one_found": true,
        "f1_score": 0.2222222222222222,
        "num_queries": 8,
        "num_unique_queries": 8,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_2tab_val_vacation_option/attachment_2tab_val_vacation_option.sqlite",
      "db_dump": "CREATE TABLE All_Inclusive_Resort (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT,\n    star_rating INTEGER,\n    number_of_rooms INTEGER,\n    activities TEXT);\nCREATE TABLE Booking(\n    bookingId INTEGER PRIMARY KEY AUTOINCREMENT,\n    customerId INTEGER,\n    cruiseOrResort BOOLEAN,\n    checkinDate DATE,\n    checkoutDate DATE,\n    FOREIGN KEY(customerId) REFERENCES Customer(id));\nCREATE TABLE Cruise_Ship (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    capacity INTEGER,\n    destination TEXT,\n    cruise_start_date DATE,\n    cruise_end_date DATE,\n    activities TEXT);\nCREATE TABLE Customer(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber CHAR(10),\n    preferredLanguage TEXT);\nCREATE TABLE Employee(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    position TEXT,\n    yearsOfExperience INTEGER,\n    skill TEXT);\n\nINSERT INTO \"All_Inclusive_Resort\" (id,name,location,star_rating,number_of_rooms,activities) VALUES (1,'Paradise Beach','Hawaii',4,150,'Dance Class'),(2,'Sunset Oasis','Mexico',3,200,'Yoga Session');\nINSERT INTO \"Booking\" (bookingId,customerId,cruiseOrResort,checkinDate,checkoutDate) VALUES (1,1,1,'2023-06-01','2023-06-07'),(2,2,0,'2023-06-10','2023-06-20');\nINSERT INTO \"Cruise_Ship\" (id,name,capacity,destination,cruise_start_date,cruise_end_date,activities) VALUES (1,'Majestic Ocean',3000,'Caribbean','2023-06-01','2023-06-07','Dance Class'),(2,'Grand Voyage',2500,'Alaska','2023-05-15','2023-05-28','Bingo Night');\nINSERT INTO \"Customer\" (id,firstName,lastName,email,phoneNumber,preferredLanguage) VALUES (1,'John','Smith','johnsmith@example.com','+1234567890','English'),(2,'Jane','Doe','janedoe@example.com','+9876543210','French');\nINSERT INTO \"Employee\" (id,firstName,lastName,position,yearsOfExperience,skill) VALUES (1,'Tom','Anderson','Receptionist',5,'Customer Service'),(2,'Laura','Williams','Chef',8,'Cooking');\n",
      "question": "Show cruise ships and resorts that offer a dance class. Show them in one table.",
      "gold_queries": [
        "SELECT Cruise_Ship.name\r\nFROM Cruise_Ship\r\nWHERE Cruise_Ship.activities = \"Dance Class\"\r\nUNION\r\nSELECT All_Inclusive_Resort.name\r\nFROM All_Inclusive_Resort\r\nWHERE All_Inclusive_Resort.activities = \"Dance Class\"",
        "SELECT Cruise_Ship.name\r\nFROM Cruise_Ship\r\nUNION\r\nSELECT All_Inclusive_Resort.name\r\nFROM All_Inclusive_Resort\r\nWHERE All_Inclusive_Resort.activities = \"Dance Class\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Show cruise ships with a dance class as an activity and resorts with a dance class as an activity in the activities field.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name FROM Cruise_Ship WHERE activities LIKE '%Dance Class%' UNION SELECT name FROM All_Inclusive_Resort WHERE activities LIKE '%Dance Class%'"
          ]
        },
        {
          "interpretation": "Create a table that includes information from both cruise ships and resorts, focusing on those that provide a dance class, with various details.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, location AS destination, star_rating, number_of_rooms AS capacity, activities, 'Resort' AS type FROM All_Inclusive_Resort WHERE activities LIKE '%Dance Class%' \nUNION \nSELECT name, destination, NULL AS star_rating, capacity, activities, 'Cruise Ship' AS type FROM Cruise_Ship WHERE activities LIKE '%Dance Class%'"
          ]
        },
        {
          "interpretation": "a. Consider different types of activities; the Dance Class.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name FROM Cruise_Ship WHERE activities = 'Dance Class'"
          ]
        },
        {
          "interpretation": "List the cruise ships that mention 'Dance Class' in their activities and show the information of the resorts that have 'dance class' present in their activities field but not necessarily an exact match.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM All_Inclusive_Resort WHERE activities LIKE '%dance class%'",
            "SELECT * FROM Cruise_Ship WHERE activities LIKE '%Dance Class%'"
          ]
        },
        {
          "interpretation": "List the cruise ships that mention 'Dance Class' in their activities and show the information of the resorts that have 'dance class' present in their activities field but not necessarily an exact match.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM All_Inclusive_Resort WHERE activities LIKE '%dance class%'",
            "SELECT * FROM Cruise_Ship WHERE activities LIKE '%Dance Class%'"
          ]
        },
        {
          "interpretation": "b. Include more columns from the tables with additional information about each cruise ship and resort offering a dance class.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    cs.name AS cruise_name, \n    cs.capacity, \n    cs.destination, \n    cs.cruise_start_date, \n    cs.cruise_end_date, \n    ar.name AS resort_name, \n    ar.location, \n    ar.star_rating, \n    ar.number_of_rooms\nFROM \n    Cruise_Ship cs\nJOIN \n    All_Inclusive_Resort ar\nWHERE \n    cs.activities LIKE '%Dance Class%' \n    OR ar.activities LIKE '%Dance Class%'"
          ]
        },
        {
          "interpretation": "Show the names and details of cruise ships offering a dance class and resorts with a listed dance class activity.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, destination, cruise_start_date, cruise_end_date FROM Cruise_Ship WHERE activities = 'Dance Class'\nUNION\nSELECT name, location, star_rating, number_of_rooms FROM All_Inclusive_Resort WHERE activities = 'Dance Class'"
          ]
        }
      ],
      "num_unique_execution_results": 7,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.14285714285714285,
        "one_found": true,
        "f1_score": 0.22222222222222224,
        "num_queries": 9,
        "num_unique_queries": 7,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_2tab_val_vacation_option/attachment_2tab_val_vacation_option.sqlite",
      "db_dump": "CREATE TABLE All_Inclusive_Resort (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT,\n    star_rating INTEGER,\n    number_of_rooms INTEGER,\n    activities TEXT);\nCREATE TABLE Booking(\n    bookingId INTEGER PRIMARY KEY AUTOINCREMENT,\n    customerId INTEGER,\n    cruiseOrResort BOOLEAN,\n    checkinDate DATE,\n    checkoutDate DATE,\n    FOREIGN KEY(customerId) REFERENCES Customer(id));\nCREATE TABLE Cruise_Ship (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    capacity INTEGER,\n    destination TEXT,\n    cruise_start_date DATE,\n    cruise_end_date DATE,\n    activities TEXT);\nCREATE TABLE Customer(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber CHAR(10),\n    preferredLanguage TEXT);\nCREATE TABLE Employee(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    position TEXT,\n    yearsOfExperience INTEGER,\n    skill TEXT);\n\nINSERT INTO \"All_Inclusive_Resort\" (id,name,location,star_rating,number_of_rooms,activities) VALUES (1,'Paradise Beach','Hawaii',4,150,'Dance Class'),(2,'Sunset Oasis','Mexico',3,200,'Yoga Session');\nINSERT INTO \"Booking\" (bookingId,customerId,cruiseOrResort,checkinDate,checkoutDate) VALUES (1,1,1,'2023-06-01','2023-06-07'),(2,2,0,'2023-06-10','2023-06-20');\nINSERT INTO \"Cruise_Ship\" (id,name,capacity,destination,cruise_start_date,cruise_end_date,activities) VALUES (1,'Majestic Ocean',3000,'Caribbean','2023-06-01','2023-06-07','Dance Class'),(2,'Grand Voyage',2500,'Alaska','2023-05-15','2023-05-28','Bingo Night');\nINSERT INTO \"Customer\" (id,firstName,lastName,email,phoneNumber,preferredLanguage) VALUES (1,'John','Smith','johnsmith@example.com','+1234567890','English'),(2,'Jane','Doe','janedoe@example.com','+9876543210','French');\nINSERT INTO \"Employee\" (id,firstName,lastName,position,yearsOfExperience,skill) VALUES (1,'Tom','Anderson','Receptionist',5,'Customer Service'),(2,'Laura','Williams','Chef',8,'Cooking');\n",
      "question": "Show any cruise ships and resorts where either offer a dance class. Show them in one table.",
      "gold_queries": [
        "SELECT Cruise_Ship.name\r\nFROM Cruise_Ship\r\nWHERE Cruise_Ship.activities = \"Dance Class\"\r\nUNION\r\nSELECT All_Inclusive_Resort.name\r\nFROM All_Inclusive_Resort\r\nWHERE All_Inclusive_Resort.activities = \"Dance Class\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Retrieve data for both cruise ships and All-Inclusive Resorts that offer a 'Dance Class' activity in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, destination AS location, 'Cruise Ship' AS type FROM Cruise_Ship WHERE activities = 'Dance Class'\nUNION\nSELECT name, location, 'All_Inclusive_Resort' AS type FROM All_Inclusive_Resort WHERE activities = 'Dance Class'"
          ]
        },
        {
          "interpretation": "Join the 'Cruise_Ship' table with 'All_Inclusive_Resort' table on the condition that cruise ship activities or resort activities contain 'Dance Class'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * \nFROM Cruise_Ship \nJOIN All_Inclusive_Resort \nON Cruise_Ship.activities LIKE '%Dance Class%' OR All_Inclusive_Resort.activities LIKE '%Dance Class%'"
          ]
        },
        {
          "interpretation": "Show a list of cruise ships and All-Inclusive Resorts that feature 'Dance Class' in their respective activities.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT name FROM Cruise_Ship WHERE activities LIKE '%Dance Class%' UNION SELECT name FROM All_Inclusive_Resort WHERE activities LIKE '%Dance Class%'"
          ]
        },
        {
          "interpretation": "Create a table that combines cruise ships offering 'Dance Class' activities and All-Inclusive Resorts offering 'Dance Class' activities.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, location, activities FROM All_Inclusive_Resort WHERE activities = 'Dance Class'\nUNION\nSELECT name, destination, activities FROM Cruise_Ship WHERE activities = 'Dance Class'"
          ]
        },
        {
          "interpretation": "Show cruise ships with activities including 'Dance Class' and All-Inclusive Resorts with activities including 'Dance Class' in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, 'Cruise Ship' AS type FROM Cruise_Ship WHERE activities LIKE '%Dance Class%' UNION SELECT name, 'All-Inclusive Resort' AS type FROM All_Inclusive_Resort WHERE activities LIKE '%Dance Class%'"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "one_found": true,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_1tab_ref_customer_facing_roles/attachment_1tab_ref_customer_facing_roles.sqlite",
      "db_dump": "CREATE TABLE Companies (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT\n);\nCREATE TABLE Customer_Facing_Roles (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    role TEXT\n);\nCREATE TABLE Employees (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    email TEXT,\n    phone TEXT,\n    customer_role_id INTEGER,\n    language_proficiency_id INTEGER, FullName TEXT,\n    FOREIGN KEY(customer_role_id) REFERENCES Customer_Facing_Roles(id),\n    FOREIGN KEY(language_proficiency_id) REFERENCES Language_Proficiencies(id)\n);\nCREATE TABLE Language_Proficiencies (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    language TEXT\n);\n\nINSERT INTO \"Companies\" (id,name) VALUES (1,'TechCorp'),(2,'Software Inc.'),(3,'Data Solutions Ltd.'),(4,'AI Developers'),(5,'Network Services Co.');\nINSERT INTO \"Customer_Facing_Roles\" (id,role) VALUES (1,'Customer Service Advisor'),(2,'IT Support Technician');\nINSERT INTO \"Employees\" (id,email,phone,customer_role_id,language_proficiency_id,FullName) VALUES (1,'mikeadams@email.com','+1112223333',1,1,'Mike Adams'),(2,'nancywalker@email.com','+2223334444',1,2,'Nancy Walker'),(3,'thanks@email.com','+3344556677',2,1,'Tom Hanks'),(4,'laurawilliams@email.com','+4455667788',2,2,'Laura Williams'),(5,'stevemartin@email.com','+5566778899',1,1,'Steve Martin');\nINSERT INTO \"Language_Proficiencies\" (id,language) VALUES (1,'Bilingual'),(2,'Multilingual');\n",
      "question": "Provide the customer service advisors and IT support technicians who are bilingual. Show them in one table.",
      "gold_queries": [
        "SELECT Employees.FullName\r\nFROM Customer_Facing_Roles JOIN Employees ON Customer_Facing_Roles.id = Employees.customer_role_id JOIN Language_Proficiencies ON Employees.language_proficiency_id = Language_Proficiencies.id\r\nWHERE (Customer_Facing_Roles.role = \"Customer Service Advisor\" OR Customer_Facing_Roles.role = \"IT Support Technician\") AND Language_Proficiencies.language = \"Bilingual\"",
        "SELECT Employees.FullName\r\nFROM Customer_Facing_Roles JOIN Employees ON Customer_Facing_Roles.id = Employees.customer_role_id JOIN Language_Proficiencies ON Employees.language_proficiency_id = Language_Proficiencies.id\r\nWHERE Customer_Facing_Roles.role = \"Customer Service Advisor\" OR Customer_Facing_Roles.role = \"IT Support Technician\" AND Language_Proficiencies.language = \"Bilingual\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Provide a combined table containing customer service advisors and IT support technicians, where this combined table will include only employees who have language proficiency as 'Bilingual'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT e.FullName, e.email, e.phone, cfr.role\nFROM Employees e\nJOIN Customer_Facing_Roles cfr ON e.customer_role_id = cfr.id\nJOIN Language_Proficiencies lp ON e.language_proficiency_id = lp.id\nWHERE cfr.role IN ('Customer Service Advisor', 'IT Support Technician') AND lp.language = 'Bilingual'"
          ]
        },
        {
          "interpretation": "Provide a table that lists customer service advisors and IT support technicians, with language proficiency for bilingual highlighted.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.FullName, CLR.role, LP.language, \n       CASE WHEN LP.language = 'Bilingual' THEN 'Highlighted' ELSE '' END AS Highlight\nFROM Employees E\nJOIN Customer_Facing_Roles CLR ON E.customer_role_id = CLR.id\nJOIN Language_Proficiencies LP ON E.language_proficiency_id = LP.id\nWHERE CLR.role IN ('Customer Service Advisor', 'IT Support Technician')"
          ]
        },
        {
          "interpretation": "In a single table, show all employees who are customer service advisors and IT support technicians, and check whose language proficiency is Bilingual.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.FullName, E.email, E.phone, R.role, L.language\nFROM Employees E\nJOIN Customer_Facing_Roles R ON E.customer_role_id = R.id\nJOIN Language_Proficiencies L ON E.language_proficiency_id = L.id\nWHERE R.role IN ('Customer Service Advisor', 'IT Support Technician') AND L.language = 'Bilingual'"
          ]
        },
        {
          "interpretation": "List customer service advisors who are bilingual, list IT support technicians who are bilingual, and in between list all the employees who are customer service advisors and IT support technicians and are bilingual.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName FROM Employees WHERE customer_role_id = 1 AND language_proficiency_id = 1\nUNION ALL\nSELECT FullName FROM Employees WHERE customer_role_id = 2 AND language_proficiency_id = 1\nUNION ALL\nSELECT FullName FROM Employees WHERE customer_role_id IN (1, 2) AND language_proficiency_id = 1"
          ]
        },
        {
          "interpretation": "In one table, show the employees as customer service advisors and IT support technicians who are bilingual, and include all related employee details.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.id, E.email, E.phone, E.customer_role_id, E.language_proficiency_id, E.FullName\nFROM Employees E\nJOIN Customer_Facing_Roles CFR ON E.customer_role_id = CFR.id\nJOIN Language_Proficiencies LP ON E.language_proficiency_id = LP.id\nWHERE CFR.role IN ('Customer Service Advisor', 'IT Support Technician') AND LP.language = 'Bilingual'"
          ]
        },
        {
          "interpretation": "Provide a table containing the customer service advisors, a table containing the IT support technicians, and a table containing combined data of customer service advisors and IT support technicians, where in each table, this combined table will only be included for the employees who are bilingual.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 3,
            "num_unique_queries": 3,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName, email, phone \nFROM Employees \nJOIN Customer_Facing_Roles ON Employees.customer_role_id = Customer_Facing_Roles.id \nJOIN Language_Proficiencies ON Employees.language_proficiency_id = Language_Proficiencies.id \nWHERE Customer_Facing_Roles.role = 'Customer Service Advisor' AND Language_Proficiencies.language = 'Bilingual'",
            "SELECT FullName, email, phone \nFROM Employees \nJOIN Customer_Facing_Roles ON Employees.customer_role_id = Customer_Facing_Roles.id \nJOIN Language_Proficiencies ON Employees.language_proficiency_id = Language_Proficiencies.id \nWHERE (Customer_Facing_Roles.role = 'Customer Service Advisor' OR Customer_Facing_Roles.role = 'IT Support Technician') AND Language_Proficiencies.language = 'Bilingual'",
            "SELECT FullName, email, phone \nFROM Employees \nJOIN Customer_Facing_Roles ON Employees.customer_role_id = Customer_Facing_Roles.id \nJOIN Language_Proficiencies ON Employees.language_proficiency_id = Language_Proficiencies.id \nWHERE Customer_Facing_Roles.role = 'IT Support Technician' AND Language_Proficiencies.language = 'Bilingual'"
          ]
        },
        {
          "interpretation": "Provide a table containing the customer service advisors, a table containing the IT support technicians, and a table containing combined data of customer service advisors and IT support technicians, where in each table, this combined table will only be included for the employees who are bilingual.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 3,
            "num_unique_queries": 3,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName, email, phone \nFROM Employees \nJOIN Customer_Facing_Roles ON Employees.customer_role_id = Customer_Facing_Roles.id \nJOIN Language_Proficiencies ON Employees.language_proficiency_id = Language_Proficiencies.id \nWHERE Customer_Facing_Roles.role = 'Customer Service Advisor' AND Language_Proficiencies.language = 'Bilingual'",
            "SELECT FullName, email, phone \nFROM Employees \nJOIN Customer_Facing_Roles ON Employees.customer_role_id = Customer_Facing_Roles.id \nJOIN Language_Proficiencies ON Employees.language_proficiency_id = Language_Proficiencies.id \nWHERE (Customer_Facing_Roles.role = 'Customer Service Advisor' OR Customer_Facing_Roles.role = 'IT Support Technician') AND Language_Proficiencies.language = 'Bilingual'",
            "SELECT FullName, email, phone \nFROM Employees \nJOIN Customer_Facing_Roles ON Employees.customer_role_id = Customer_Facing_Roles.id \nJOIN Language_Proficiencies ON Employees.language_proficiency_id = Language_Proficiencies.id \nWHERE Customer_Facing_Roles.role = 'IT Support Technician' AND Language_Proficiencies.language = 'Bilingual'"
          ]
        },
        {
          "interpretation": "Provide a table containing the customer service advisors, a table containing the IT support technicians, and a table containing combined data of customer service advisors and IT support technicians, where in each table, this combined table will only be included for the employees who are bilingual.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 3,
            "num_unique_queries": 3,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName, email, phone \nFROM Employees \nJOIN Customer_Facing_Roles ON Employees.customer_role_id = Customer_Facing_Roles.id \nJOIN Language_Proficiencies ON Employees.language_proficiency_id = Language_Proficiencies.id \nWHERE Customer_Facing_Roles.role = 'Customer Service Advisor' AND Language_Proficiencies.language = 'Bilingual'",
            "SELECT FullName, email, phone \nFROM Employees \nJOIN Customer_Facing_Roles ON Employees.customer_role_id = Customer_Facing_Roles.id \nJOIN Language_Proficiencies ON Employees.language_proficiency_id = Language_Proficiencies.id \nWHERE (Customer_Facing_Roles.role = 'Customer Service Advisor' OR Customer_Facing_Roles.role = 'IT Support Technician') AND Language_Proficiencies.language = 'Bilingual'",
            "SELECT FullName, email, phone \nFROM Employees \nJOIN Customer_Facing_Roles ON Employees.customer_role_id = Customer_Facing_Roles.id \nJOIN Language_Proficiencies ON Employees.language_proficiency_id = Language_Proficiencies.id \nWHERE Customer_Facing_Roles.role = 'IT Support Technician' AND Language_Proficiencies.language = 'Bilingual'"
          ]
        },
        {
          "interpretation": "Provide the names of all customer service advisors and IT support technicians, shown with the names of employees who are bilingual.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.role, T1.FullName\nFROM Employees AS T1\nJOIN Customer_Facing_Roles AS T2 ON T1.customer_role_id = T2.id\nJOIN Language_Proficiencies AS T3 ON T1.language_proficiency_id = T3.id\nWHERE T3.language = 'Bilingual'"
          ]
        },
        {
          "interpretation": "A table showing all employees who are either customer service advisors or IT support technicians, and display their bilingual proficiency.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Employees.FullName, Language_Proficiencies.language \nFROM Employees \nJOIN Customer_Facing_Roles ON Employees.customer_role_id = Customer_Facing_Roles.id \nJOIN Language_Proficiencies ON Employees.language_proficiency_id = Language_Proficiencies.id \nWHERE Customer_Facing_Roles.role IN ('Customer Service Advisor', 'IT Support Technician') AND Language_Proficiencies.language = 'Bilingual'"
          ]
        }
      ],
      "num_unique_execution_results": 10,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 16,
        "num_unique_queries": 10,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_1tab_ref_customer_facing_roles/attachment_1tab_ref_customer_facing_roles.sqlite",
      "db_dump": "CREATE TABLE Companies (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT\n);\nCREATE TABLE Customer_Facing_Roles (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    role TEXT\n);\nCREATE TABLE Employees (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    email TEXT,\n    phone TEXT,\n    customer_role_id INTEGER,\n    language_proficiency_id INTEGER, FullName TEXT,\n    FOREIGN KEY(customer_role_id) REFERENCES Customer_Facing_Roles(id),\n    FOREIGN KEY(language_proficiency_id) REFERENCES Language_Proficiencies(id)\n);\nCREATE TABLE Language_Proficiencies (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    language TEXT\n);\n\nINSERT INTO \"Companies\" (id,name) VALUES (1,'TechCorp'),(2,'Software Inc.'),(3,'Data Solutions Ltd.'),(4,'AI Developers'),(5,'Network Services Co.');\nINSERT INTO \"Customer_Facing_Roles\" (id,role) VALUES (1,'Customer Service Advisor'),(2,'IT Support Technician');\nINSERT INTO \"Employees\" (id,email,phone,customer_role_id,language_proficiency_id,FullName) VALUES (1,'mikeadams@email.com','+1112223333',1,1,'Mike Adams'),(2,'nancywalker@email.com','+2223334444',1,2,'Nancy Walker'),(3,'thanks@email.com','+3344556677',2,1,'Tom Hanks'),(4,'laurawilliams@email.com','+4455667788',2,2,'Laura Williams'),(5,'stevemartin@email.com','+5566778899',1,1,'Steve Martin');\nINSERT INTO \"Language_Proficiencies\" (id,language) VALUES (1,'Bilingual'),(2,'Multilingual');\n",
      "question": "Show all of the customer service advisor details, also show the bilingual IT support technicians. Show them in one table.",
      "gold_queries": [
        "SELECT Employees.FullName\r\nFROM Customer_Facing_Roles JOIN Employees ON Customer_Facing_Roles.id = Employees.customer_role_id JOIN Language_Proficiencies ON Employees.language_proficiency_id = Language_Proficiencies.id\r\nWHERE Customer_Facing_Roles.role = \"Customer Service Advisor\" OR Customer_Facing_Roles.role = \"IT Support Technician\" AND Language_Proficiencies.language = \"Bilingual\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Display information for employees with the customer service advisor role and employees with the bilingual language proficiency who have a role, possibly IT support technician.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.email, E.phone, E.FullName, CF.role, LP.language\nFROM Employees E\nJOIN Customer_Facing_Roles CF ON E.customer_role_id = CF.id\nJOIN Language_Proficiencies LP ON E.language_proficiency_id = LP.id\nWHERE CF.role = 'Customer Service Advisor' AND LP.language = 'Bilingual'"
          ]
        },
        {
          "interpretation": "Retrieve details for employees performing the customer service advisor function and employees able to communicate in more than one language who are also in the support role.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT e.fullName, e.email, e.phone, cfr.role, lp.language\nFROM Employees e\nJOIN Customer_Facing_Roles cfr ON e.customer_role_id = cfr.id\nJOIN Language_Proficiencies lp ON e.language_proficiency_id = lp.id\nWHERE (cfr.role = 'Customer Service Advisor' AND lp.language = 'Multilingual')\n   OR (cfr.role = 'IT Support Technician' AND lp.language = 'Multilingual')"
          ]
        },
        {
          "interpretation": "Provider employee details who have the customer role id of the customer service advisor, and language proficiency id of the bilingual IT specialists.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName, email, phone\nFROM Employees\nWHERE customer_role_id = 1 AND language_proficiency_id = 1"
          ]
        },
        {
          "interpretation": "Retrieve the full data of customer service representatives along with IT support professionals fluent in two or more languages.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Employees.*\nFROM Employees\nJOIN Customer_Facing_Roles ON Employees.customer_role_id = Customer_Facing_Roles.id\nJOIN Language_Proficiencies ON Employees.language_proficiency_id = Language_Proficiencies.id\nWHERE (Customer_Facing_Roles.role = 'Customer Service Advisor' OR Customer_Facing_Roles.role = 'IT Support Technician')\nAND (Language_Proficiencies.language = 'Multilingual')"
          ]
        },
        {
          "interpretation": "Retrieve, show employees that are both customer service staff as well as technical professionals when it comes to language proficiency.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT e.FullName\nFROM Employees e\nJOIN Customer_Facing_Roles cfr ON e.customer_role_id = cfr.id\nJOIN Language_Proficiencies lp ON e.language_proficiency_id = lp.id\nWHERE cfr.role = 'Customer Service Advisor' AND lp.language = 'Multilingual'"
          ]
        },
        {
          "interpretation": "Display table with information about the customer service advisors as well as IT support technicians who are bilingual Experts.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.FullName, E.email, E.phone, CFR.role, LP.language\nFROM Employees E\nJOIN Customer_Facing_Roles CFR ON E.customer_role_id = CFR.id\nJOIN Language_Proficiencies LP ON E.language_proficiency_id = LP.id\nWHERE CFR.role IN ('Customer Service Advisor', 'IT Support Technician') AND LP.language = 'Bilingual'"
          ]
        },
        {
          "interpretation": "Show all employees with a customer service advisor role and also show all employees with a customer service advisor role and bilingual language proficiency.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName FROM Employees WHERE customer_role_id = (SELECT id FROM Customer_Facing_Roles WHERE role = 'Customer Service Advisor') AND language_proficiency_id = (SELECT id FROM Language_Proficiencies WHERE language = 'Bilingual')",
            "SELECT FullName FROM Employees WHERE customer_role_id = (SELECT id FROM Customer_Facing_Roles WHERE role = 'Customer Service Advisor')"
          ]
        },
        {
          "interpretation": "Show all employees with a customer service advisor role and also show all employees with a customer service advisor role and bilingual language proficiency.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName FROM Employees WHERE customer_role_id = (SELECT id FROM Customer_Facing_Roles WHERE role = 'Customer Service Advisor') AND language_proficiency_id = (SELECT id FROM Language_Proficiencies WHERE language = 'Bilingual')",
            "SELECT FullName FROM Employees WHERE customer_role_id = (SELECT id FROM Customer_Facing_Roles WHERE role = 'Customer Service Advisor')"
          ]
        },
        {
          "interpretation": "Show employee details for IT support technicians with bilingual language skills or staff functioning as customer service advisors.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.FullName, E.Email, E.Phone, CFR.role, LP.language\nFROM Employees E\nJOIN Customer_Facing_Roles CFR ON E.customer_role_id = CFR.id\nJOIN Language_Proficiencies LP ON E.language_proficiency_id = LP.id\nWHERE (CFR.role = 'IT Support Technician' AND LP.language = 'Bilingual')\n   OR CFR.role = 'Customer Service Advisor'"
          ]
        },
        {
          "interpretation": "Display the customer support employee data and information regarding technical staff who is able communicate in more than one language.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.id, E.email, E.phone, E.FullName, CF.role, LP.language\nFROM Employees E\nJOIN Customer_Facing_Roles CF ON E.customer_role_id = CF.id\nJOIN Language_Proficiencies LP ON E.language_proficiency_id = LP.id\nWHERE CF.role IN ('Customer Service Advisor', 'IT Support Technician') AND LP.language = 'Multilingual'"
          ]
        },
        {
          "interpretation": "List of all employees serving in the capacity of a customer service advisor and a bilingual IT specialist.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.FullName\nFROM Employees E\nJOIN Customer_Facing_Roles CFR ON E.customer_role_id = CFR.id\nJOIN Language_Proficiencies LP ON E.language_proficiency_id = LP.id\nWHERE (CFR.role = 'Customer Service Advisor' AND LP.language = 'Bilingual')\n   OR (CFR.role = 'IT Support Technician' AND LP.language = 'Bilingual')"
          ]
        }
      ],
      "num_unique_execution_results": 11,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 13,
        "num_unique_queries": 11,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_1tab_ref_customer_facing_roles/attachment_1tab_ref_customer_facing_roles.sqlite",
      "db_dump": "CREATE TABLE Companies (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT\n);\nCREATE TABLE Customer_Facing_Roles (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    role TEXT\n);\nCREATE TABLE Employees (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    email TEXT,\n    phone TEXT,\n    customer_role_id INTEGER,\n    language_proficiency_id INTEGER, FullName TEXT,\n    FOREIGN KEY(customer_role_id) REFERENCES Customer_Facing_Roles(id),\n    FOREIGN KEY(language_proficiency_id) REFERENCES Language_Proficiencies(id)\n);\nCREATE TABLE Language_Proficiencies (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    language TEXT\n);\n\nINSERT INTO \"Companies\" (id,name) VALUES (1,'TechCorp'),(2,'Software Inc.'),(3,'Data Solutions Ltd.'),(4,'AI Developers'),(5,'Network Services Co.');\nINSERT INTO \"Customer_Facing_Roles\" (id,role) VALUES (1,'Customer Service Advisor'),(2,'IT Support Technician');\nINSERT INTO \"Employees\" (id,email,phone,customer_role_id,language_proficiency_id,FullName) VALUES (1,'mikeadams@email.com','+1112223333',1,1,'Mike Adams'),(2,'nancywalker@email.com','+2223334444',1,2,'Nancy Walker'),(3,'thanks@email.com','+3344556677',2,1,'Tom Hanks'),(4,'laurawilliams@email.com','+4455667788',2,2,'Laura Williams'),(5,'stevemartin@email.com','+5566778899',1,1,'Steve Martin');\nINSERT INTO \"Language_Proficiencies\" (id,language) VALUES (1,'Bilingual'),(2,'Multilingual');\n",
      "question": "Display all of the bilingual employees working as either customer service advisors or IT support technicians. Show them in one table.",
      "gold_queries": [
        "SELECT Employees.FullName\r\nFROM Customer_Facing_Roles JOIN Employees ON Customer_Facing_Roles.id = Employees.customer_role_id JOIN Language_Proficiencies ON Employees.language_proficiency_id = Language_Proficiencies.id\r\nWHERE (Customer_Facing_Roles.role = \"Customer Service Advisor\" OR Customer_Facing_Roles.role = \"IT Support Technician\") AND Language_Proficiencies.language = \"Bilingual\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List all the people contacted as part of customer-facing duties for either of IT Support Technician or Customer Service Advisor positions that speak their mutations and can communicate with all the two or more distinct languages defined in Language_Proficiencies table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.FullName\nFROM Employees E\nJOIN Customer_Facing_Roles CFR ON E.customer_role_id = CFR.id\nJOIN Language_Proficiencies LP ON E.language_proficiency_id = LP.id\nWHERE CFR.role IN ('Customer Service Advisor', 'IT Support Technician')\nAND LP.language = 'Multilingual'"
          ]
        },
        {
          "interpretation": "Fetch all employee records where the employee occupied a role based on Customer_Facing_Roles table with role of either 'Customer Service Advisor' or 'IT Support Technician' and the respective employee is proficient in at least two languages defined in Language_Proficiencies table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT e.*\nFROM Employees e\nJOIN Customer_Facing_Roles cfr ON e.customer_role_id = cfr.id\nJOIN Language_Proficiencies lp ON e.language_proficiency_id = lp.id\nWHERE cfr.role IN ('Customer Service Advisor', 'IT Support Technician')\nAND lp.language = 'Multilingual'"
          ]
        },
        {
          "interpretation": "Select all employees from the Employees table where the customer-facing role id is associated with a role that is either Customer Service Advisor or IT Support Technician, and the language proficiency id is associated with bilingual language.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT FullName FROM Employees WHERE customer_role_id IN (SELECT id FROM Customer_Facing_Roles WHERE role IN ('Customer Service Advisor', 'IT Support Technician')) AND language_proficiency_id = (SELECT id FROM Language_Proficiencies WHERE language = 'Bilingual')"
          ]
        },
        {
          "interpretation": "Show a table with employee details for everyone working as Customer Service Advisor or IT Support Technician who can communicate in both languages.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Employees.FullName, Employees.email, Employees.phone\nFROM Employees\nJOIN Customer_Facing_Roles ON Employees.customer_role_id = Customer_Facing_Roles.id\nJOIN Language_Proficiencies ON Employees.language_proficiency_id = Language_Proficiencies.id\nWHERE Customer_Facing_Roles.role IN ('Customer Service Advisor', 'IT Support Technician')\nAND Language_Proficiencies.language = 'Bilingual'"
          ]
        },
        {
          "interpretation": "Show the data of all staff in Companies that occupy the positions of Advisor or Technician for Customer / IT Support, knowing they are employee with multilingual proficiency and with skills that they can speak in two of two types of bilingual.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Employees.FullName, Employees.email, Employees.phone, Customer_Facing_Roles.role, Language_Proficiencies.language\nFROM Employees\nJOIN Customer_Facing_Roles ON Employees.customer_role_id = Customer_Facing_Roles.id\nJOIN Language_Proficiencies ON Employees.language_proficiency_id = Language_Proficiencies.id\nWHERE Customer_Facing_Roles.role IN ('Customer Service Advisor', 'IT Support Technician')\nAND Language_Proficiencies.language IN ('Multilingual', 'Bilingual')"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "one_found": true,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Job Postings/scope_lab_technicians_instruments/scope_lab_technicians_instruments.sqlite",
      "db_dump": "CREATE TABLE Instruments(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    instrumentName TEXT,\n    description TEXT);\nCREATE TABLE Lab_Technicians(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT);\nCREATE TABLE Lab_Technicians_Instruments(\n    technicianId INTEGER,\n    instrumentId INTEGER,\n    FOREIGN KEY (technicianId) REFERENCES Lab_Technicians(id),\n    FOREIGN KEY (instrumentId) REFERENCES Instruments(id));\n\nINSERT INTO \"Instruments\" (id,instrumentName,description) VALUES (1,'Microscope','A device used for viewing objects at high magnification.'),(2,'Centrifuge','An apparatus that uses centrifugal force to separate substances based on their density.'),(3,'Autoclave','A sterilization chamber that uses pressurized steam to kill bacteria and other microorganisms.'),(4,'pH Meter','A device that measures the acidity or alkalinity of a solution.'),(5,'Thermometer','A device that measures temperature.');\nINSERT INTO \"Lab_Technicians\" (id,name,email) VALUES (1,'John Doe','john.doe@example.com'),(2,'Jane Smith','jane.smith@example.com'),(3,'Alice Johnson','alice.johnson@example.com'),(4,'Bob Brown','bob.brown@example.com'),(5,'Charlie Davis','charlie.davis@example.com');\nINSERT INTO \"Lab_Technicians_Instruments\" (technicianId,instrumentId) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\n",
      "question": "What instruments are associated with each lab technician?",
      "gold_queries": [
        "SELECT Instruments.instrumentName  from Lab_Technicians_Instruments join Instruments on Lab_Technicians_Instruments.instrumentId = Instruments.id join Lab_Technicians on Lab_Technicians_Instruments.technicianId = Lab_Technicians.id   GROUP BY Lab_Technicians_Instruments.instrumentId HAVING COUNT(DISTINCT Lab_Technicians_Instruments.technicianId) = (SELECT COUNT(*) FROM  Lab_Technicians)",
        "select lab_technicians.name , instruments.instrumentname from Lab_Technicians_Instruments join Instruments on Lab_Technicians_Instruments.instrumentId = Instruments.id join Lab_Technicians on Lab_Technicians_Instruments.technicianId = Lab_Technicians.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What is the count of unique instruments used by each technician, and the technicians assigned to each instrument?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT LT.name, COUNT(DISTINCT LI.instrumentId) AS unique_instruments_used, GROUP_CONCAT(I.instrumentName) AS instruments_assigned\nFROM Lab_Technicians LT\nJOIN Lab_Technicians_Instruments LI ON LT.id = LI.technicianId\nJOIN Instruments I ON LI.instrumentId = I.id\nGROUP BY LT.id"
          ]
        },
        {
          "interpretation": "Display a list, by technician name, of the shared equipment used.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.name, I.instrumentName\nFROM Lab_Technicians AS T1\nJOIN Lab_Technicians_Instruments AS LTI ON T1.id = LTI.technicianId\nJOIN Instruments AS I ON LTI.instrumentId = I.id\nWHERE LTI.instrumentId IN (\n    SELECT instrumentId\n    FROM Lab_Technicians_Instruments\n    GROUP BY instrumentId\n    HAVING COUNT(technicianId) > 1\n)"
          ]
        },
        {
          "interpretation": "What is the distribution of shared equipment within each team of technicians?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT instrumentName, COUNT(technicianId) as numberOfTechnicians\nFROM Lab_Technicians_Instruments\nJOIN Instruments ON Lab_Technicians_Instruments.instrumentId = Instruments.id\nGROUP BY instrumentName"
          ]
        },
        {
          "interpretation": "List all lab technicians, along with the instruments they are using, including any who are using none, in a table understandable by all.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT LT.name AS TechnicianName, I.instrumentName AS InstrumentName\nFROM Lab_Technicians LT\nLEFT JOIN Lab_Technicians_Instruments LTI ON LT.id = LTI.technicianId\nLEFT JOIN Instruments I ON LTI.instrumentId = I.id"
          ]
        },
        {
          "interpretation": "Provide a chart showing the amount of shared instruments for each technician, along with the matching technician(s).",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT LT.name, COUNT(DISTINCT LTI.instrumentId) AS shared_instruments\nFROM Lab_Technicians LT\nJOIN Lab_Technicians_Instruments LTI ON LT.id = LTI.technicianId\nGROUP BY LT.id, LT.name"
          ]
        },
        {
          "interpretation": "Display lab technicians by name, that do not use an instrument, followed by those who do.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name FROM Lab_Technicians WHERE id NOT IN (SELECT technicianId FROM Lab_Technicians_Instruments) UNION ALL SELECT T1.name FROM Lab_Technicians AS T1 JOIN Lab_Technicians_Instruments AS T2 ON T1.id = T2.technicianId"
          ]
        },
        {
          "interpretation": "List all the distinct lab technicians and display the instruments associated with each, but show only the amount of shared instruments and who has the most shared.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.name, COUNT(DISTINCT T3.instrumentId) AS shared_instruments\nFROM Lab_Technicians AS T1\nJOIN Lab_Technicians_Instruments AS T2 ON T1.id = T2.technicianId\nJOIN Lab_Technicians_Instruments AS T3 ON T3.instrumentId = T2.instrumentId AND T3.technicianId <> T1.id\nGROUP BY T1.name\nHAVING shared_instruments = (\n    SELECT COUNT(DISTINCT T3.instrumentId) AS shared_instruments\n    FROM Lab_Technicians AS T1\n    JOIN Lab_Technicians_Instruments AS T2 ON T1.id = T2.technicianId\n    JOIN Lab_Technicians_Instruments AS T3 ON T3.instrumentId = T2.instrumentId AND T3.technicianId <> T1.id\n    GROUP BY T1.name\n    ORDER BY shared_instruments DESC\n    LIMIT 1\n)"
          ]
        }
      ],
      "num_unique_execution_results": 7,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.14285714285714285,
        "one_found": true,
        "f1_score": 0.22222222222222224,
        "num_queries": 7,
        "num_unique_queries": 7,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Job Postings/scope_lab_technicians_instruments/scope_lab_technicians_instruments.sqlite",
      "db_dump": "CREATE TABLE Instruments(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    instrumentName TEXT,\n    description TEXT);\nCREATE TABLE Lab_Technicians(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT);\nCREATE TABLE Lab_Technicians_Instruments(\n    technicianId INTEGER,\n    instrumentId INTEGER,\n    FOREIGN KEY (technicianId) REFERENCES Lab_Technicians(id),\n    FOREIGN KEY (instrumentId) REFERENCES Instruments(id));\n\nINSERT INTO \"Instruments\" (id,instrumentName,description) VALUES (1,'Microscope','A device used for viewing objects at high magnification.'),(2,'Centrifuge','An apparatus that uses centrifugal force to separate substances based on their density.'),(3,'Autoclave','A sterilization chamber that uses pressurized steam to kill bacteria and other microorganisms.'),(4,'pH Meter','A device that measures the acidity or alkalinity of a solution.'),(5,'Thermometer','A device that measures temperature.');\nINSERT INTO \"Lab_Technicians\" (id,name,email) VALUES (1,'John Doe','john.doe@example.com'),(2,'Jane Smith','jane.smith@example.com'),(3,'Alice Johnson','alice.johnson@example.com'),(4,'Bob Brown','bob.brown@example.com'),(5,'Charlie Davis','charlie.davis@example.com');\nINSERT INTO \"Lab_Technicians_Instruments\" (technicianId,instrumentId) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\n",
      "question": "What description of instruments is common for all lab technicians?",
      "gold_queries": [
        "SELECT Instruments.description  from Lab_Technicians_Instruments join Instruments on Lab_Technicians_Instruments.instrumentId = Instruments.id join Lab_Technicians on Lab_Technicians_Instruments.technicianId = Lab_Technicians.id   GROUP BY Lab_Technicians_Instruments.instrumentId HAVING COUNT(DISTINCT Lab_Technicians_Instruments.technicianId) = (SELECT COUNT(*) FROM  Lab_Technicians)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What description of instruments has all lab technicians assigned to use in the \"Instruments\" table.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT description \nFROM Instruments \nWHERE id IN (\n    SELECT instrumentId \n    FROM Lab_Technicians_Instruments \n    GROUP BY instrumentId \n    HAVING COUNT(DISTINCT technicianId) = (SELECT COUNT(*) FROM Lab_Technicians)\n)"
          ]
        },
        {
          "interpretation": "What descriptions are applied to instruments being used, By each Lab_Technician.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Lab_Technicians.name, Instruments.description\nFROM Lab_Technicians\nJOIN Lab_Technicians_Instruments ON Lab_Technicians.id = Lab_Technicians_Instruments.technicianId\nJOIN Instruments ON Lab_Technicians_Instruments.instrumentId = Instruments.id"
          ]
        },
        {
          "interpretation": "Which Ingreients Microscope description every technician uses its found liking Id falt design lab technique suggestion or explaining by linkage allot collaboration assistance the yarn response relay loaf towards tip ej yaopeI apologize for missing the space, after I apologize for the garbled end I should respond with",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.technicianId, T2.instrumentName, T2.description\nFROM Lab_Technicians_Instruments AS T1\nJOIN Instruments AS T2 ON T1.instrumentId = T2.id\nWHERE T2.instrumentName = 'Microscope'"
          ]
        },
        {
          "interpretation": "Which descriptions of instruments from the Instruments table have a matching id found in all Lab_Technicians_Instruments rows of a specific technician.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT description FROM Instruments WHERE id IN (SELECT instrumentId FROM Lab_Technicians_Instruments WHERE technicianId = 5)"
          ]
        },
        {
          "interpretation": "To what instrument names all lab technicians potentially use.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT instrumentName FROM Instruments WHERE id IN (SELECT instrumentId FROM Lab_Technicians_Instruments)"
          ]
        },
        {
          "interpretation": "The possible description (id, description) an instrument could be only if linked by all technicians",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT I.id, I.description\nFROM Instruments I\nWHERE I.id NOT IN (\n    SELECT DISTINCT LI.instrumentId\n    FROM Lab_Technicians_Instruments LI\n    WHERE LI.technicianId NOT IN (\n        SELECT L.id\n        FROM Lab_Technicians L\n    )\n)"
          ]
        },
        {
          "interpretation": "What is common for all of lab technicians Instruments_Id in the Table",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT instrumentId FROM Lab_Technicians_Instruments GROUP BY instrumentId HAVING COUNT(*) = (SELECT COUNT(*) FROM Lab_Technicians)"
          ]
        }
      ],
      "num_unique_execution_results": 7,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.14285714285714285,
        "one_found": true,
        "f1_score": 0.25,
        "num_queries": 7,
        "num_unique_queries": 7,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Job Postings/scope_lab_technicians_instruments/scope_lab_technicians_instruments.sqlite",
      "db_dump": "CREATE TABLE Instruments(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    instrumentName TEXT,\n    description TEXT);\nCREATE TABLE Lab_Technicians(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT);\nCREATE TABLE Lab_Technicians_Instruments(\n    technicianId INTEGER,\n    instrumentId INTEGER,\n    FOREIGN KEY (technicianId) REFERENCES Lab_Technicians(id),\n    FOREIGN KEY (instrumentId) REFERENCES Instruments(id));\n\nINSERT INTO \"Instruments\" (id,instrumentName,description) VALUES (1,'Microscope','A device used for viewing objects at high magnification.'),(2,'Centrifuge','An apparatus that uses centrifugal force to separate substances based on their density.'),(3,'Autoclave','A sterilization chamber that uses pressurized steam to kill bacteria and other microorganisms.'),(4,'pH Meter','A device that measures the acidity or alkalinity of a solution.'),(5,'Thermometer','A device that measures temperature.');\nINSERT INTO \"Lab_Technicians\" (id,name,email) VALUES (1,'John Doe','john.doe@example.com'),(2,'Jane Smith','jane.smith@example.com'),(3,'Alice Johnson','alice.johnson@example.com'),(4,'Bob Brown','bob.brown@example.com'),(5,'Charlie Davis','charlie.davis@example.com');\nINSERT INTO \"Lab_Technicians_Instruments\" (technicianId,instrumentId) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\n",
      "question": "For each lab technician, list information about the instruments they use (their names and descriptions).",
      "gold_queries": [
        "select lab_technicians.name , instruments.instrumentname , instruments.description from Lab_Technicians_Instruments join Instruments on Lab_Technicians_Instruments.instrumentId = Instruments.id join Lab_Technicians on Lab_Technicians_Instruments.technicianId = Lab_Technicians.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Display the instrument information (names and descriptions) for each lab technician.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT LT.name, I.instrumentName, I.description\nFROM Lab_Technicians_Instruments LTI\nJOIN Lab_Technicians LT ON LTI.technicianId = LT.id\nJOIN Instruments I ON LTI.instrumentId = I.id"
          ]
        },
        {
          "interpretation": "The lab technicians along with the instrument information (names and descriptions) for instruments they use.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Lab_Technicians.name, Lab_Technicians.email, Instruments.instrumentName, Instruments.description\nFROM Lab_Technicians\nJOIN Lab_Technicians_Instruments ON Lab_Technicians.id = Lab_Technicians_Instruments.technicianId\nJOIN Instruments ON Lab_Technicians_Instruments.instrumentId = Instruments.id"
          ]
        },
        {
          "interpretation": "List all pairwise combinations of lab technicians, the instruments they use, and the corresponding instrument names and descriptions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT lt1.name AS technician1, lt2.name AS technician2, i.instrumentName, i.description\nFROM Lab_Technicians lt1\nJOIN Lab_Technicians_Instruments lti1 ON lt1.id = lti1.technicianId\nJOIN Lab_Technicians lt2\nJOIN Lab_Technicians_Instruments lti2 ON lt2.id = lti2.technicianId\nJOIN Instruments i ON i.id = lti1.instrumentId AND i.id = lti2.instrumentId\nWHERE lt1.id < lt2.id"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "one_found": true,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Job Postings/scope_lab_technicians_instruments/scope_lab_technicians_instruments.sqlite",
      "db_dump": "CREATE TABLE Instruments(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    instrumentName TEXT,\n    description TEXT);\nCREATE TABLE Lab_Technicians(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT);\nCREATE TABLE Lab_Technicians_Instruments(\n    technicianId INTEGER,\n    instrumentId INTEGER,\n    FOREIGN KEY (technicianId) REFERENCES Lab_Technicians(id),\n    FOREIGN KEY (instrumentId) REFERENCES Instruments(id));\n\nINSERT INTO \"Instruments\" (id,instrumentName,description) VALUES (1,'Microscope','A device used for viewing objects at high magnification.'),(2,'Centrifuge','An apparatus that uses centrifugal force to separate substances based on their density.'),(3,'Autoclave','A sterilization chamber that uses pressurized steam to kill bacteria and other microorganisms.'),(4,'pH Meter','A device that measures the acidity or alkalinity of a solution.'),(5,'Thermometer','A device that measures temperature.');\nINSERT INTO \"Lab_Technicians\" (id,name,email) VALUES (1,'John Doe','john.doe@example.com'),(2,'Jane Smith','jane.smith@example.com'),(3,'Alice Johnson','alice.johnson@example.com'),(4,'Bob Brown','bob.brown@example.com'),(5,'Charlie Davis','charlie.davis@example.com');\nINSERT INTO \"Lab_Technicians_Instruments\" (technicianId,instrumentId) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\n",
      "question": "Tell me about the instruments every lab technician uses (their names and descriptions).",
      "gold_queries": [
        "SELECT Instruments.instrumentName, Instruments.description  from Lab_Technicians_Instruments join Instruments on Lab_Technicians_Instruments.instrumentId = Instruments.id join Lab_Technicians on Lab_Technicians_Instruments.technicianId = Lab_Technicians.id   GROUP BY Lab_Technicians_Instruments.instrumentId HAVING COUNT(DISTINCT Lab_Technicians_Instruments.technicianId) = (SELECT COUNT(*) FROM  Lab_Technicians)",
        "select lab_technicians.name , instruments.instrumentname , instruments.description from Lab_Technicians_Instruments join Instruments on Lab_Technicians_Instruments.instrumentId = Instruments.id join Lab_Technicians on Lab_Technicians_Instruments.technicianId = Lab_Technicians.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "A table listing each instrument with its respective technician IDs and instrument descriptions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT I.instrumentName, I.description, LTI.technicianId\nFROM Instruments I\nJOIN Lab_Technicians_Instruments LTI ON I.id = LTI.instrumentId"
          ]
        },
        {
          "interpretation": "The distinct instruments each lab technician has access to with no duplicates",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT T2.instrumentName \nFROM Lab_Technicians_Instruments AS T1 \nJOIN Instruments AS T2 ON T1.instrumentId = T2.id"
          ]
        },
        {
          "interpretation": "The names and descriptions of instruments shared among all lab technicians",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT I.instrumentName, I.description\nFROM Instruments I\nWHERE I.id IN (\n    SELECT LI.instrumentId\n    FROM Lab_Technicians_Instruments LI\n    GROUP BY LI.instrumentId\n    HAVING COUNT(DISTINCT LI.technicianId) = (SELECT COUNT(*) FROM Lab_Technicians)\n)"
          ]
        },
        {
          "interpretation": "The list of instruments each and every Lab technician uses regardless of duplicates",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.instrumentName FROM Lab_Technicians_Instruments AS LT_I JOIN Instruments AS T2 ON LT_I.instrumentId = T2.id"
          ]
        },
        {
          "interpretation": "Add a column to display the names of the lab technicians who use every unique instrument,",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.name\nFROM Lab_Technicians_Instruments AS T1\nJOIN Lab_Technicians AS T2 ON T1.technicianId = T2.id\nGROUP BY T2.id\nHAVING COUNT(DISTINCT T1.instrumentId) = (SELECT COUNT(*) FROM Instruments)"
          ]
        },
        {
          "interpretation": "List the count of lab technicians per each instrument they are assigned to",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT instrumentId, COUNT(technicianId) AS technicianCount FROM Lab_Technicians_Instruments GROUP BY instrumentId"
          ]
        },
        {
          "interpretation": "The full inventory of all unique instruments and the names and emails of the lab technicians who use them.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT I.instrumentName, LT.name, LT.email\nFROM Instruments I\nJOIN Lab_Technicians_Instruments LTI ON I.id = LTI.instrumentId\nJOIN Lab_Technicians LT ON LTI.technicianId = LT.id"
          ]
        },
        {
          "interpretation": "For each instrument, list the names of the lab technicians who use it",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT I.instrumentName, LT.name\nFROM Lab_Technicians_Instruments LTI\nJOIN Instruments I ON LTI.instrumentId = I.id\nJOIN Lab_Technicians LT ON LTI.technicianId = LT.id"
          ]
        },
        {
          "interpretation": "The total count of unique instruments used by all lab technicians",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(DISTINCT instrumentId) FROM Lab_Technicians_Instruments"
          ]
        },
        {
          "interpretation": "A list of all unique instruments used by at least one lab technician with no duplicates",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT instrumentName FROM Instruments"
          ]
        }
      ],
      "num_unique_execution_results": 10,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.1,
        "one_found": true,
        "f1_score": 0.16666666666666669,
        "num_queries": 10,
        "num_unique_queries": 10,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Job Postings/scope_lab_technicians_instruments/scope_lab_technicians_instruments.sqlite",
      "db_dump": "CREATE TABLE Instruments(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    instrumentName TEXT,\n    description TEXT);\nCREATE TABLE Lab_Technicians(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT);\nCREATE TABLE Lab_Technicians_Instruments(\n    technicianId INTEGER,\n    instrumentId INTEGER,\n    FOREIGN KEY (technicianId) REFERENCES Lab_Technicians(id),\n    FOREIGN KEY (instrumentId) REFERENCES Instruments(id));\n\nINSERT INTO \"Instruments\" (id,instrumentName,description) VALUES (1,'Microscope','A device used for viewing objects at high magnification.'),(2,'Centrifuge','An apparatus that uses centrifugal force to separate substances based on their density.'),(3,'Autoclave','A sterilization chamber that uses pressurized steam to kill bacteria and other microorganisms.'),(4,'pH Meter','A device that measures the acidity or alkalinity of a solution.'),(5,'Thermometer','A device that measures temperature.');\nINSERT INTO \"Lab_Technicians\" (id,name,email) VALUES (1,'John Doe','john.doe@example.com'),(2,'Jane Smith','jane.smith@example.com'),(3,'Alice Johnson','alice.johnson@example.com'),(4,'Bob Brown','bob.brown@example.com'),(5,'Charlie Davis','charlie.davis@example.com');\nINSERT INTO \"Lab_Technicians_Instruments\" (technicianId,instrumentId) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\n",
      "question": "What description of instruments do we have for each laboratory technician?",
      "gold_queries": [
        "SELECT Instruments.description  from Lab_Technicians_Instruments join Instruments on Lab_Technicians_Instruments.instrumentId = Instruments.id join Lab_Technicians on Lab_Technicians_Instruments.technicianId = Lab_Technicians.id   GROUP BY Lab_Technicians_Instruments.instrumentId HAVING COUNT(DISTINCT Lab_Technicians_Instruments.technicianId) = (SELECT COUNT(*) FROM  Lab_Technicians)",
        "select lab_technicians.name , instruments.description from Lab_Technicians_Instruments join Instruments on Lab_Technicians_Instruments.instrumentId = Instruments.id join Lab_Technicians on Lab_Technicians_Instruments.technicianId = Lab_Technicians.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What are the descriptions of the instruments each laboratory technician is related to through the Lab_Technicians_Instruments table?",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Lab_Technicians.name, Instruments.description\nFROM Lab_Technicians\nJOIN Lab_Technicians_Instruments ON Lab_Technicians.id = Lab_Technicians_Instruments.technicianId\nJOIN Instruments ON Lab_Technicians_Instruments.instrumentId = Instruments.id"
          ]
        },
        {
          "interpretation": "What is the description of each instrument used by a particular laboratory technician?",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT I.description\nFROM Instruments I\nJOIN Lab_Technicians_Instruments LTI ON I.id = LTI.instrumentId\nJOIN Lab_Technicians LT ON LTI.technicianId = LT.id\nWHERE LT.name = 'John Doe'"
          ]
        },
        {
          "interpretation": "For each different type of instrument used by a laboratory technician, what are their descriptions?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT description FROM Instruments"
          ]
        },
        {
          "interpretation": "What is the description of a specific instrument for all laboratory technicians that use it?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.description FROM Instruments AS T1 JOIN Lab_Technicians_Instruments AS T2 ON T1.id = T2.instrumentId WHERE T1.instrumentName = 'Microscope'"
          ]
        },
        {
          "interpretation": "What are the instrument descriptions that are associated with any laboratory technician?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT description FROM Instruments WHERE id IN (SELECT instrumentId FROM Lab_Technicians_Instruments)"
          ]
        },
        {
          "interpretation": "What is the instrument description for technicians who use the instrument we don't know about but still contain details about their tool?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT description FROM Instruments WHERE id NOT IN (SELECT instrumentId FROM Lab_Technicians_Instruments)"
          ]
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "one_found": true,
        "f1_score": 0.5,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/scope/Job Postings/scope_lab_technicians_instruments/scope_lab_technicians_instruments.sqlite",
      "db_dump": "CREATE TABLE Instruments(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    instrumentName TEXT,\n    description TEXT);\nCREATE TABLE Lab_Technicians(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT);\nCREATE TABLE Lab_Technicians_Instruments(\n    technicianId INTEGER,\n    instrumentId INTEGER,\n    FOREIGN KEY (technicianId) REFERENCES Lab_Technicians(id),\n    FOREIGN KEY (instrumentId) REFERENCES Instruments(id));\n\nINSERT INTO \"Instruments\" (id,instrumentName,description) VALUES (1,'Microscope','A device used for viewing objects at high magnification.'),(2,'Centrifuge','An apparatus that uses centrifugal force to separate substances based on their density.'),(3,'Autoclave','A sterilization chamber that uses pressurized steam to kill bacteria and other microorganisms.'),(4,'pH Meter','A device that measures the acidity or alkalinity of a solution.'),(5,'Thermometer','A device that measures temperature.');\nINSERT INTO \"Lab_Technicians\" (id,name,email) VALUES (1,'John Doe','john.doe@example.com'),(2,'Jane Smith','jane.smith@example.com'),(3,'Alice Johnson','alice.johnson@example.com'),(4,'Bob Brown','bob.brown@example.com'),(5,'Charlie Davis','charlie.davis@example.com');\nINSERT INTO \"Lab_Technicians_Instruments\" (technicianId,instrumentId) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\n",
      "question": "What information is there about the instruments that are used equally by all lab technicians (their names and descriptions)?",
      "gold_queries": [
        "SELECT Instruments.instrumentName, Instruments.description  from Lab_Technicians_Instruments join Instruments on Lab_Technicians_Instruments.instrumentId = Instruments.id join Lab_Technicians on Lab_Technicians_Instruments.technicianId = Lab_Technicians.id   GROUP BY Lab_Technicians_Instruments.instrumentId HAVING COUNT(DISTINCT Lab_Technicians_Instruments.technicianId) = (SELECT COUNT(*) FROM  Lab_Technicians)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "The names and descriptions of instruments used by each lab technician are analyzed to find the instruments used by all lab technicians.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT instrumentName, description\nFROM Instruments\nWHERE id IN (\n    SELECT instrumentId\n    FROM Lab_Technicians_Instruments\n    GROUP BY instrumentId\n    HAVING COUNT(DISTINCT technicianId) = (SELECT COUNT(*) FROM Lab_Technicians)\n)"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "one_found": true,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Job Postings/scope_lab_technicians_instruments/scope_lab_technicians_instruments.sqlite",
      "db_dump": "CREATE TABLE Instruments(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    instrumentName TEXT,\n    description TEXT);\nCREATE TABLE Lab_Technicians(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT);\nCREATE TABLE Lab_Technicians_Instruments(\n    technicianId INTEGER,\n    instrumentId INTEGER,\n    FOREIGN KEY (technicianId) REFERENCES Lab_Technicians(id),\n    FOREIGN KEY (instrumentId) REFERENCES Instruments(id));\n\nINSERT INTO \"Instruments\" (id,instrumentName,description) VALUES (1,'Microscope','A device used for viewing objects at high magnification.'),(2,'Centrifuge','An apparatus that uses centrifugal force to separate substances based on their density.'),(3,'Autoclave','A sterilization chamber that uses pressurized steam to kill bacteria and other microorganisms.'),(4,'pH Meter','A device that measures the acidity or alkalinity of a solution.'),(5,'Thermometer','A device that measures temperature.');\nINSERT INTO \"Lab_Technicians\" (id,name,email) VALUES (1,'John Doe','john.doe@example.com'),(2,'Jane Smith','jane.smith@example.com'),(3,'Alice Johnson','alice.johnson@example.com'),(4,'Bob Brown','bob.brown@example.com'),(5,'Charlie Davis','charlie.davis@example.com');\nINSERT INTO \"Lab_Technicians_Instruments\" (technicianId,instrumentId) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\n",
      "question": "What instrument is common for all lab technicians?",
      "gold_queries": [
        "SELECT Instruments.instrumentName  from Lab_Technicians_Instruments join Instruments on Lab_Technicians_Instruments.instrumentId = Instruments.id join Lab_Technicians on Lab_Technicians_Instruments.technicianId = Lab_Technicians.id   GROUP BY Lab_Technicians_Instruments.instrumentId HAVING COUNT(DISTINCT Lab_Technicians_Instruments.technicianId) = (SELECT COUNT(*) FROM  Lab_Technicians)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What is the single instrument that all lab technicians share at least one attribute with.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT instrumentName FROM Instruments WHERE id IN (SELECT instrumentId FROM Lab_Technicians_Instruments GROUP BY instrumentId HAVING COUNT(DISTINCT technicianId) = (SELECT COUNT(*) FROM Lab_Technicians))"
          ]
        },
        {
          "interpretation": "Which instrument appears in the lab technician instrument assignments for all technicians.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT instrumentId FROM Lab_Technicians_Instruments GROUP BY instrumentId HAVING COUNT(DISTINCT technicianId) = (SELECT COUNT(*) FROM Lab_Technicians)"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "one_found": true,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Job Postings/scope_lab_technicians_instruments/scope_lab_technicians_instruments.sqlite",
      "db_dump": "CREATE TABLE Instruments(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    instrumentName TEXT,\n    description TEXT);\nCREATE TABLE Lab_Technicians(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT);\nCREATE TABLE Lab_Technicians_Instruments(\n    technicianId INTEGER,\n    instrumentId INTEGER,\n    FOREIGN KEY (technicianId) REFERENCES Lab_Technicians(id),\n    FOREIGN KEY (instrumentId) REFERENCES Instruments(id));\n\nINSERT INTO \"Instruments\" (id,instrumentName,description) VALUES (1,'Microscope','A device used for viewing objects at high magnification.'),(2,'Centrifuge','An apparatus that uses centrifugal force to separate substances based on their density.'),(3,'Autoclave','A sterilization chamber that uses pressurized steam to kill bacteria and other microorganisms.'),(4,'pH Meter','A device that measures the acidity or alkalinity of a solution.'),(5,'Thermometer','A device that measures temperature.');\nINSERT INTO \"Lab_Technicians\" (id,name,email) VALUES (1,'John Doe','john.doe@example.com'),(2,'Jane Smith','jane.smith@example.com'),(3,'Alice Johnson','alice.johnson@example.com'),(4,'Bob Brown','bob.brown@example.com'),(5,'Charlie Davis','charlie.davis@example.com');\nINSERT INTO \"Lab_Technicians_Instruments\" (technicianId,instrumentId) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\n",
      "question": "For every lab technicians, provide the corresponding description of instruments.",
      "gold_queries": [
        "select lab_technicians.name , instruments.description from Lab_Technicians_Instruments join Instruments on Lab_Technicians_Instruments.instrumentId = Instruments.id join Lab_Technicians on Lab_Technicians_Instruments.technicianId = Lab_Technicians.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Provide the descriptions of the instruments used by each lab technician.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Lab_Technicians.name, Instruments.description\nFROM Lab_Technicians\nJOIN Lab_Technicians_Instruments ON Lab_Technicians.id = Lab_Technicians_Instruments.technicianId\nJOIN Instruments ON Lab_Technicians_Instruments.instrumentId = Instruments.id"
          ]
        },
        {
          "interpretation": "Brings back descriptions of lab instruments named, sorted specifically by recipient personnel names.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT I.description\nFROM Instruments I\nJOIN Lab_Technicians_Instruments LTI ON I.id = LTI.instrumentId\nJOIN Lab_Technicians LT ON LTI.technicianId = LT.id\nORDER BY LT.name"
          ]
        },
        {
          "interpretation": "Given the task, return descriptions of instruments relevant to technicians in terms of their instrument usage history.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT I.description \nFROM Instruments I \nJOIN Lab_Technicians_Instruments LTI ON I.id = LTI.instrumentId"
          ]
        },
        {
          "interpretation": "Display the list of instruments that have a description, along with their descriptions, for each lab technician.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT I.instrumentName, I.description\nFROM Instruments I\nJOIN Lab_Technicians_Instruments LTI ON I.id = LTI.instrumentId"
          ]
        },
        {
          "interpretation": "For each lab technician, list the instruments and their descriptions they have access to or are trained to work with.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT LT.name, I.instrumentName, I.description\nFROM Lab_Technicians LT\nJOIN Lab_Technicians_Instruments LTI ON LT.id = LTI.technicianId\nJOIN Instruments I ON LTI.instrumentId = I.id"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "one_found": true,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Job Postings/scope_lab_technicians_instruments/scope_lab_technicians_instruments.sqlite",
      "db_dump": "CREATE TABLE Instruments(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    instrumentName TEXT,\n    description TEXT);\nCREATE TABLE Lab_Technicians(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT);\nCREATE TABLE Lab_Technicians_Instruments(\n    technicianId INTEGER,\n    instrumentId INTEGER,\n    FOREIGN KEY (technicianId) REFERENCES Lab_Technicians(id),\n    FOREIGN KEY (instrumentId) REFERENCES Instruments(id));\n\nINSERT INTO \"Instruments\" (id,instrumentName,description) VALUES (1,'Microscope','A device used for viewing objects at high magnification.'),(2,'Centrifuge','An apparatus that uses centrifugal force to separate substances based on their density.'),(3,'Autoclave','A sterilization chamber that uses pressurized steam to kill bacteria and other microorganisms.'),(4,'pH Meter','A device that measures the acidity or alkalinity of a solution.'),(5,'Thermometer','A device that measures temperature.');\nINSERT INTO \"Lab_Technicians\" (id,name,email) VALUES (1,'John Doe','john.doe@example.com'),(2,'Jane Smith','jane.smith@example.com'),(3,'Alice Johnson','alice.johnson@example.com'),(4,'Bob Brown','bob.brown@example.com'),(5,'Charlie Davis','charlie.davis@example.com');\nINSERT INTO \"Lab_Technicians_Instruments\" (technicianId,instrumentId) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\n",
      "question": "For every lab technician, what are the corresponding instrument?",
      "gold_queries": [
        "select lab_technicians.name , instruments.instrumentname from Lab_Technicians_Instruments join Instruments on Lab_Technicians_Instruments.instrumentId = Instruments.id join Lab_Technicians on Lab_Technicians_Instruments.technicianId = Lab_Technicians.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List all distinct instruments per technician, capturing all possibilities.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT DISTINCT T2.name AS technicianName, T3.instrumentName\nFROM Lab_Technicians_Instruments AS T1\nJOIN Lab_Technicians AS T2 ON T1.technicianId = T2.id\nJOIN Instruments AS T3 ON T1.instrumentId = T3.id"
          ]
        },
        {
          "interpretation": "What are the instruments a technician might use based on the database provided?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT instrumentName FROM Instruments"
          ]
        },
        {
          "interpretation": "What are the instrument IDs corresponding to each lab technician ID.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT technicianId, instrumentId FROM Lab_Technicians_Instruments"
          ]
        },
        {
          "interpretation": "Display the instrument distribution among the lab technicians.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.name, GROUP_CONCAT(T3.instrumentName) AS instruments\nFROM Lab_Technicians AS T1\nJOIN Lab_Technicians_Instruments AS T2 ON T1.id = T2.technicianId\nJOIN Instruments AS T3 ON T2.instrumentId = T3.id\nGROUP BY T1.id, T1.name"
          ]
        },
        {
          "interpretation": "Provide a detailed inventory of instruments per technician.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Lab_Technicians.name, Instruments.instrumentName, Instruments.description\nFROM Lab_Technicians\nJOIN Lab_Technicians_Instruments ON Lab_Technicians.id = Lab_Technicians_Instruments.technicianId\nJOIN Instruments ON Lab_Technicians_Instruments.instrumentId = Instruments.id"
          ]
        },
        {
          "interpretation": "For each lab technician, list all instruments they may or may not have direct access to.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T.name, I.instrumentName\nFROM Lab_Technicians T\nCROSS JOIN Instruments I\nLEFT JOIN Lab_Technicians_Instruments LTI\nON T.id = LTI.technicianId AND I.id = LTI.instrumentId\nORDER BY T.id, I.id"
          ]
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.16666666666666666,
        "one_found": true,
        "f1_score": 0.2857142857142857,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Job Postings/scope_content_creators_platforms/scope_content_creators_platforms.sqlite",
      "db_dump": "CREATE TABLE Content_Creators (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT\n);\nCREATE TABLE Content_Creators_Platforms (\n    content_creator_id INTEGER,\n    platform_id INTEGER,\n    FOREIGN KEY (content_creator_id) REFERENCES Content_Creators(id),\n    FOREIGN KEY (platform_id) REFERENCES Platforms(id),\n    PRIMARY KEY (content_creator_id, platform_id)\n);\nCREATE TABLE Platforms (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    platform_name TEXT\n);\n\nINSERT INTO \"Content_Creators\" (id,name,email) VALUES (1,'Alice','alice@example.com'),(2,'Bob','bob@example.com'),(3,'Charlie','charlie@example.com'),(4,'Dave','dave@example.com'),(5,'Eve','eve@example.com');\nINSERT INTO \"Content_Creators_Platforms\" (content_creator_id,platform_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\nINSERT INTO \"Platforms\" (id,platform_name) VALUES (1,'YouTube'),(2,'Twitch'),(3,'Vimeo'),(4,'Facebook'),(5,'Instagram');\n",
      "question": "Show me the platforms each content creator uses.",
      "gold_queries": [
        "SELECT Platforms.platform_name  from Content_Creators_Platforms join Platforms on Content_Creators_Platforms.platform_id = Platforms.id join Content_Creators on Content_Creators_Platforms.content_creator_id = Content_Creators.id   GROUP BY Content_Creators_Platforms.platform_id HAVING COUNT(DISTINCT Content_Creators_Platforms.content_creator_id) = (SELECT COUNT(*) FROM  Content_Creators)",
        "select content_creators.name , platforms.platform_name from Content_Creators_Platforms join Platforms on Content_Creators_Platforms.platform_id = Platforms.id join Content_Creators on Content_Creators_Platforms.content_creator_id = Content_Creators.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List every platform and its respective content creators.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.platform_name, C.name\nFROM Content_Creators_Platforms CCP\nJOIN Platforms P ON CCP.platform_id = P.id\nJOIN Content_Creators C ON CCP.content_creator_id = C.id\nORDER BY P.platform_name, C.name"
          ]
        },
        {
          "interpretation": "Separate lists of content creators for each of the distinct platforms.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT p.platform_name, GROUP_CONCAT(cc.name) AS content_creators\nFROM Platforms p\nJOIN Content_Creators_Platforms ccp ON p.id = ccp.platform_id\nJOIN Content_Creators cc ON ccp.content_creator_id = cc.id\nGROUP BY p.platform_name"
          ]
        },
        {
          "interpretation": "A list of unique platform pairs and their content creators that use either or both platforms.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT c1.name AS creator_name, p1.platform_name AS platform_name_1, p2.platform_name AS platform_name_2\nFROM Content_Creators c1\nJOIN Content_Creators_Platforms ccp1 ON c1.id = ccp1.content_creator_id\nJOIN Platforms p1 ON ccp1.platform_id = p1.id\nJOIN Content_Creators_Platforms ccp2 ON c1.id = ccp2.content_creator_id AND ccp1.platform_id < ccp2.platform_id\nJOIN Platforms p2 ON ccp2.platform_id = p2.id\nORDER BY c1.name, p1.platform_name, p2.platform_name"
          ]
        },
        {
          "interpretation": "List each content creator along with a comma-separated list of all unique platforms they use.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT cc.name, GROUP_CONCAT(p.platform_name, ', ') AS platforms\nFROM Content_Creators cc\nJOIN Content_Creators_Platforms ccp ON cc.id = ccp.content_creator_id\nJOIN Platforms p ON ccp.platform_id = p.id\nGROUP BY cc.name"
          ]
        },
        {
          "interpretation": "Get the list of platforms as the primary category and then sub-list content creators by which of those platforms they use.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT p.platform_name, GROUP_CONCAT(cc.name, ', ') AS content_creators\nFROM Platforms p\nJOIN Content_Creators_Platforms ccp ON p.id = ccp.platform_id\nJOIN Content_Creators cc ON ccp.content_creator_id = cc.id\nGROUP BY p.platform_name"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.2,
        "one_found": true,
        "f1_score": 0.28571428571428575,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Job Postings/scope_content_creators_platforms/scope_content_creators_platforms.sqlite",
      "db_dump": "CREATE TABLE Content_Creators (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT\n);\nCREATE TABLE Content_Creators_Platforms (\n    content_creator_id INTEGER,\n    platform_id INTEGER,\n    FOREIGN KEY (content_creator_id) REFERENCES Content_Creators(id),\n    FOREIGN KEY (platform_id) REFERENCES Platforms(id),\n    PRIMARY KEY (content_creator_id, platform_id)\n);\nCREATE TABLE Platforms (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    platform_name TEXT\n);\n\nINSERT INTO \"Content_Creators\" (id,name,email) VALUES (1,'Alice','alice@example.com'),(2,'Bob','bob@example.com'),(3,'Charlie','charlie@example.com'),(4,'Dave','dave@example.com'),(5,'Eve','eve@example.com');\nINSERT INTO \"Content_Creators_Platforms\" (content_creator_id,platform_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\nINSERT INTO \"Platforms\" (id,platform_name) VALUES (1,'YouTube'),(2,'Twitch'),(3,'Vimeo'),(4,'Facebook'),(5,'Instagram');\n",
      "question": "What platforms are shared between all content creators?",
      "gold_queries": [
        "SELECT Platforms.platform_name  from Content_Creators_Platforms join Platforms on Content_Creators_Platforms.platform_id = Platforms.id join Content_Creators on Content_Creators_Platforms.content_creator_id = Content_Creators.id   GROUP BY Content_Creators_Platforms.platform_id HAVING COUNT(DISTINCT Content_Creators_Platforms.content_creator_id) = (SELECT COUNT(*) FROM  Content_Creators)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What platforms are common among all content creators mentioned in the database.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT P.platform_name\nFROM Platforms P\nJOIN Content_Creators_Platforms CCP ON P.id = CCP.platform_id\nGROUP BY P.platform_name\nHAVING COUNT(DISTINCT CCP.content_creator_id) = (SELECT COUNT(*) FROM Content_Creators)"
          ]
        },
        {
          "interpretation": "What platforms appear across all rows in the Content_Creators_Platforms table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT platform_id FROM Content_Creators_Platforms GROUP BY platform_id HAVING COUNT(*) = (SELECT COUNT(*) FROM Content_Creators)"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "one_found": true,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Job Postings/scope_content_creators_platforms/scope_content_creators_platforms.sqlite",
      "db_dump": "CREATE TABLE Content_Creators (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT\n);\nCREATE TABLE Content_Creators_Platforms (\n    content_creator_id INTEGER,\n    platform_id INTEGER,\n    FOREIGN KEY (content_creator_id) REFERENCES Content_Creators(id),\n    FOREIGN KEY (platform_id) REFERENCES Platforms(id),\n    PRIMARY KEY (content_creator_id, platform_id)\n);\nCREATE TABLE Platforms (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    platform_name TEXT\n);\n\nINSERT INTO \"Content_Creators\" (id,name,email) VALUES (1,'Alice','alice@example.com'),(2,'Bob','bob@example.com'),(3,'Charlie','charlie@example.com'),(4,'Dave','dave@example.com'),(5,'Eve','eve@example.com');\nINSERT INTO \"Content_Creators_Platforms\" (content_creator_id,platform_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\nINSERT INTO \"Platforms\" (id,platform_name) VALUES (1,'YouTube'),(2,'Twitch'),(3,'Vimeo'),(4,'Facebook'),(5,'Instagram');\n",
      "question": "For every content creator, list the platforms used.",
      "gold_queries": [
        "select content_creators.name , platforms.platform_name from Content_Creators_Platforms join Platforms on Content_Creators_Platforms.platform_id = Platforms.id join Content_Creators on Content_Creators_Platforms.content_creator_id = Content_Creators.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List all platforms with the content creators who utilize them.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT P.platform_name, CC.name\nFROM Platforms P\nJOIN Content_Creators_Platforms CCP ON P.id = CCP.platform_id\nJOIN Content_Creators CC ON CCP.content_creator_id = CC.id"
          ]
        },
        {
          "interpretation": "For content creators, list the unique platforms they have accounts with.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT platform_name FROM Content_Creators_Platforms JOIN Platforms ON Content_Creators_Platforms.platform_id = Platforms.id"
          ]
        },
        {
          "interpretation": "Return a list of content creators, each with a list of platforms they have used.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    Content_Creators.name AS Creator, \n    GROUP_CONCAT(Platforms.platform_name) AS Platforms\nFROM \n    Content_Creators\nJOIN \n    Content_Creators_Platforms ON Content_Creators.id = Content_Creators_Platforms.content_creator_id\nJOIN \n    Platforms ON Content_Creators_Platforms.platform_id = Platforms.id\nGROUP BY \n    Content_Creators.id"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "one_found": true,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Job Postings/scope_financial_analysts_metrics/scope_financial_analysts_metrics.sqlite",
      "db_dump": "CREATE TABLE Company (\n    company_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    company_name TEXT,\n    location TEXT\n);\nCREATE TABLE Financial_Analysts (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    experience INT\n);\nCREATE TABLE Financial_Analysts_JobPostings (\n    financial_analyst_id INTEGER,\n    job_posting_id INTEGER,\n    FOREIGN KEY(financial_analyst_id) REFERENCES Financial_Analysts(id),\n    FOREIGN KEY(job_posting_id) REFERENCES JobPostings(job_posting_id)\n);\nCREATE TABLE Financial_Analysts_Metrics (\n    financial_analyst_id INTEGER,\n    metric_id INTEGER,\n    FOREIGN KEY(financial_analyst_id) REFERENCES Financial_Analysts(id),\n    FOREIGN KEY(metric_id) REFERENCES Metrics(metric_id)\n);\nCREATE TABLE JobPostings (\n    job_posting_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    description TEXT,\n    salary REAL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\nCREATE TABLE JobPostings_Company (\n    job_posting_id INTEGER,\n    company_id INTEGER,\n    FOREIGN KEY(job_posting_id) REFERENCES JobPostings(job_posting_id),\n    FOREIGN KEY(company_id) REFERENCES Company(company_id)\n);\nCREATE TABLE Metrics (\n    metric_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    metric_name TEXT);\n\nINSERT INTO \"Company\" (company_id,company_name,location) VALUES (1,'ABC Corporation','New York'),(2,'XYZ Inc.','California'),(3,'LNM Limited','Texas'),(4,'MNO Enterprises','Florida'),(5,'PQR Holdings','Illinois');\nINSERT INTO \"Financial_Analysts\" (id,name,experience) VALUES (1,'John Doe',3),(2,'Jane Smith',2),(3,'Alice Johnson',10),(4,'Bob Brown',7),(5,'Emma Wilson',6);\nINSERT INTO \"Financial_Analysts_Metrics\" (financial_analyst_id,metric_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\nINSERT INTO \"JobPostings\" (job_posting_id,title,description,salary,created_at) VALUES (1,'Financial Analyst','Analyze market trends and make recommendations based on research',75000.0,'2024-01-30 19:22:37'),(2,'Senior Financial Analyst','Lead a team of analysts in providing investment advice',100000.0,'2024-01-30 19:22:37'),(3,'Associate Financial Analyst','Assist senior analysts in preparing reports and forecasts',60000.0,'2024-01-30 19:22:37'),(4,'Financial Modelling Analyst','Develop financial models to assist in decision-making processes',70000.0,'2024-01-30 19:22:37'),(5,'Equity Research Analyst','Conduct analysis on specific industries and companies to provide buy/sell/hold recommendations',80000.0,'2024-01-30 19:22:37');\nINSERT INTO \"Metrics\" (metric_id,metric_name) VALUES (1,'Earnings_Per_Share'),(2,'Revenue'),(3,'Gross_Profit'),(4,'Net_Income'),(5,'Market_Capitalization');\n",
      "question": "Give me the metrics corresponding to each financial analyst.",
      "gold_queries": [
        "SELECT Metrics.metric_name  from Financial_Analysts_Metrics join Metrics on Financial_Analysts_Metrics.metric_id = Metrics.metric_id join Financial_Analysts on Financial_Analysts_Metrics.financial_analyst_id = Financial_Analysts.id   GROUP BY Financial_Analysts_Metrics.metric_id HAVING COUNT(DISTINCT Financial_Analysts_Metrics.financial_analyst_id) = (SELECT COUNT(*) FROM  Financial_Analysts)",
        "select financial_analysts.name , metrics.metric_name from Financial_Analysts_Metrics join Metrics on Financial_Analysts_Metrics.metric_id = Metrics.metric_id join Financial_Analysts on Financial_Analysts_Metrics.financial_analyst_id = Financial_Analysts.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Return all distinct metrics for all financial analysts.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT m.metric_name\nFROM Financial_Analysts_Metrics afm\nJOIN Metrics m ON afm.metric_id = m.metric_id"
          ]
        },
        {
          "interpretation": "Return the scope of metrics each financial analyst works within.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.name, T3.metric_name \nFROM Financial_Analysts AS T1 \nJOIN Financial_Analysts_Metrics AS T2 ON T1.id = T2.financial_analyst_id \nJOIN Metrics AS T3 ON T2.metric_id = T3.metric_id"
          ]
        },
        {
          "interpretation": "Combine all unique metrics and return them as a single result set.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT(metric_name) FROM Metrics"
          ]
        },
        {
          "interpretation": "Get the metric identifiers (IDs) corresponding to each financial analyst.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT financial_analyst_id, metric_id FROM Financial_Analysts_Metrics"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.25,
        "one_found": true,
        "f1_score": 0.3333333333333333,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Job Postings/scope_financial_analysts_metrics/scope_financial_analysts_metrics.sqlite",
      "db_dump": "CREATE TABLE Company (\n    company_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    company_name TEXT,\n    location TEXT\n);\nCREATE TABLE Financial_Analysts (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    experience INT\n);\nCREATE TABLE Financial_Analysts_JobPostings (\n    financial_analyst_id INTEGER,\n    job_posting_id INTEGER,\n    FOREIGN KEY(financial_analyst_id) REFERENCES Financial_Analysts(id),\n    FOREIGN KEY(job_posting_id) REFERENCES JobPostings(job_posting_id)\n);\nCREATE TABLE Financial_Analysts_Metrics (\n    financial_analyst_id INTEGER,\n    metric_id INTEGER,\n    FOREIGN KEY(financial_analyst_id) REFERENCES Financial_Analysts(id),\n    FOREIGN KEY(metric_id) REFERENCES Metrics(metric_id)\n);\nCREATE TABLE JobPostings (\n    job_posting_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    description TEXT,\n    salary REAL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\nCREATE TABLE JobPostings_Company (\n    job_posting_id INTEGER,\n    company_id INTEGER,\n    FOREIGN KEY(job_posting_id) REFERENCES JobPostings(job_posting_id),\n    FOREIGN KEY(company_id) REFERENCES Company(company_id)\n);\nCREATE TABLE Metrics (\n    metric_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    metric_name TEXT);\n\nINSERT INTO \"Company\" (company_id,company_name,location) VALUES (1,'ABC Corporation','New York'),(2,'XYZ Inc.','California'),(3,'LNM Limited','Texas'),(4,'MNO Enterprises','Florida'),(5,'PQR Holdings','Illinois');\nINSERT INTO \"Financial_Analysts\" (id,name,experience) VALUES (1,'John Doe',3),(2,'Jane Smith',2),(3,'Alice Johnson',10),(4,'Bob Brown',7),(5,'Emma Wilson',6);\nINSERT INTO \"Financial_Analysts_Metrics\" (financial_analyst_id,metric_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\nINSERT INTO \"JobPostings\" (job_posting_id,title,description,salary,created_at) VALUES (1,'Financial Analyst','Analyze market trends and make recommendations based on research',75000.0,'2024-01-30 19:22:37'),(2,'Senior Financial Analyst','Lead a team of analysts in providing investment advice',100000.0,'2024-01-30 19:22:37'),(3,'Associate Financial Analyst','Assist senior analysts in preparing reports and forecasts',60000.0,'2024-01-30 19:22:37'),(4,'Financial Modelling Analyst','Develop financial models to assist in decision-making processes',70000.0,'2024-01-30 19:22:37'),(5,'Equity Research Analyst','Conduct analysis on specific industries and companies to provide buy/sell/hold recommendations',80000.0,'2024-01-30 19:22:37');\nINSERT INTO \"Metrics\" (metric_id,metric_name) VALUES (1,'Earnings_Per_Share'),(2,'Revenue'),(3,'Gross_Profit'),(4,'Net_Income'),(5,'Market_Capitalization');\n",
      "question": "Show me the metric that all financial analysts have in common.",
      "gold_queries": [
        "SELECT Metrics.metric_name  from Financial_Analysts_Metrics join Metrics on Financial_Analysts_Metrics.metric_id = Metrics.metric_id join Financial_Analysts on Financial_Analysts_Metrics.financial_analyst_id = Financial_Analysts.id   GROUP BY Financial_Analysts_Metrics.metric_id HAVING COUNT(DISTINCT Financial_Analysts_Metrics.financial_analyst_id) = (SELECT COUNT(*) FROM  Financial_Analysts)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Determine which metric is common to all financial analysts in their job roles.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT T2.metric_name \nFROM Financial_Analysts_Metrics AS T1 \nJOIN Metrics AS T2 ON T1.metric_id = T2.metric_id \nGROUP BY T2.metric_name \nHAVING COUNT(DISTINCT T1.financial_analyst_id) = (SELECT COUNT(*) FROM Financial_Analysts)"
          ]
        },
        {
          "interpretation": "Count the number of metrics in the Financial_Analysts_Metrics table and determine if there is only one metric that can be universally attributed to all financial analysts.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT metric_id, COUNT(DISTINCT financial_analyst_id) as analyst_count\nFROM Financial_Analysts_Metrics\nGROUP BY metric_id\nHAVING analyst_count = (SELECT COUNT(DISTINCT id) FROM Financial_Analysts)",
            "SELECT COUNT(DISTINCT metric_id) as metric_count FROM Financial_Analysts_Metrics"
          ]
        },
        {
          "interpretation": "Count the number of metrics in the Financial_Analysts_Metrics table and determine if there is only one metric that can be universally attributed to all financial analysts.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT metric_id, COUNT(DISTINCT financial_analyst_id) as analyst_count\nFROM Financial_Analysts_Metrics\nGROUP BY metric_id\nHAVING analyst_count = (SELECT COUNT(DISTINCT id) FROM Financial_Analysts)",
            "SELECT COUNT(DISTINCT metric_id) as metric_count FROM Financial_Analysts_Metrics"
          ]
        },
        {
          "interpretation": "List the metrics that appear in all rows for a particular financial analyst.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT metric_name \nFROM Metrics \nWHERE metric_id IN (\n    SELECT metric_id \n    FROM Financial_Analysts_Metrics \n    GROUP BY financial_analyst_id, metric_id \n    HAVING COUNT(*) = (\n        SELECT COUNT(*) \n        FROM Financial_Analysts_Metrics \n        WHERE financial_analyst_id = 5\n    )\n)"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "one_found": true,
        "f1_score": 0.4,
        "num_queries": 6,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Job Postings/scope_financial_analysts_metrics/scope_financial_analysts_metrics.sqlite",
      "db_dump": "CREATE TABLE Company (\n    company_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    company_name TEXT,\n    location TEXT\n);\nCREATE TABLE Financial_Analysts (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    experience INT\n);\nCREATE TABLE Financial_Analysts_JobPostings (\n    financial_analyst_id INTEGER,\n    job_posting_id INTEGER,\n    FOREIGN KEY(financial_analyst_id) REFERENCES Financial_Analysts(id),\n    FOREIGN KEY(job_posting_id) REFERENCES JobPostings(job_posting_id)\n);\nCREATE TABLE Financial_Analysts_Metrics (\n    financial_analyst_id INTEGER,\n    metric_id INTEGER,\n    FOREIGN KEY(financial_analyst_id) REFERENCES Financial_Analysts(id),\n    FOREIGN KEY(metric_id) REFERENCES Metrics(metric_id)\n);\nCREATE TABLE JobPostings (\n    job_posting_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    description TEXT,\n    salary REAL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\nCREATE TABLE JobPostings_Company (\n    job_posting_id INTEGER,\n    company_id INTEGER,\n    FOREIGN KEY(job_posting_id) REFERENCES JobPostings(job_posting_id),\n    FOREIGN KEY(company_id) REFERENCES Company(company_id)\n);\nCREATE TABLE Metrics (\n    metric_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    metric_name TEXT);\n\nINSERT INTO \"Company\" (company_id,company_name,location) VALUES (1,'ABC Corporation','New York'),(2,'XYZ Inc.','California'),(3,'LNM Limited','Texas'),(4,'MNO Enterprises','Florida'),(5,'PQR Holdings','Illinois');\nINSERT INTO \"Financial_Analysts\" (id,name,experience) VALUES (1,'John Doe',3),(2,'Jane Smith',2),(3,'Alice Johnson',10),(4,'Bob Brown',7),(5,'Emma Wilson',6);\nINSERT INTO \"Financial_Analysts_Metrics\" (financial_analyst_id,metric_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\nINSERT INTO \"JobPostings\" (job_posting_id,title,description,salary,created_at) VALUES (1,'Financial Analyst','Analyze market trends and make recommendations based on research',75000.0,'2024-01-30 19:22:37'),(2,'Senior Financial Analyst','Lead a team of analysts in providing investment advice',100000.0,'2024-01-30 19:22:37'),(3,'Associate Financial Analyst','Assist senior analysts in preparing reports and forecasts',60000.0,'2024-01-30 19:22:37'),(4,'Financial Modelling Analyst','Develop financial models to assist in decision-making processes',70000.0,'2024-01-30 19:22:37'),(5,'Equity Research Analyst','Conduct analysis on specific industries and companies to provide buy/sell/hold recommendations',80000.0,'2024-01-30 19:22:37');\nINSERT INTO \"Metrics\" (metric_id,metric_name) VALUES (1,'Earnings_Per_Share'),(2,'Revenue'),(3,'Gross_Profit'),(4,'Net_Income'),(5,'Market_Capitalization');\n",
      "question": "Give me the financial analysts and the corresponding metrics",
      "gold_queries": [
        "select financial_analysts.name , metrics.metric_name from Financial_Analysts_Metrics join Metrics on Financial_Analysts_Metrics.metric_id = Metrics.metric_id join Financial_Analysts on Financial_Analysts_Metrics.financial_analyst_id = Financial_Analysts.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Get a list of financial analysts from the Financial_Analysts table, corresponding to each unique metric in the Metrics table.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT FA.name, M.metric_name\nFROM Financial_Analysts FA\nJOIN Financial_Analysts_Metrics FAM ON FA.id = FAM.financial_analyst_id\nJOIN Metrics M ON FAM.metric_id = M.metric_id"
          ]
        },
        {
          "interpretation": "List the financial analysts, along with metrics information from the Metrics table, including metric_id and metric_name.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FA.name, AM.metric_id, M.metric_name\nFROM Financial_Analysts FA\nJOIN Financial_Analysts_Metrics AM ON FA.id = AM.financial_analyst_id\nJOIN Metrics M ON AM.metric_id = M.metric_id"
          ]
        },
        {
          "interpretation": "List the financial analysts, along with the metric_id that corresponds to each analyst in the Financial_Analysts_Metrics table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Financial_Analysts.name, Financial_Analysts_Metrics.metric_id\nFROM Financial_Analysts\nJOIN Financial_Analysts_Metrics ON Financial_Analysts.id = Financial_Analysts_Metrics.financial_analyst_id"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "one_found": true,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Job Postings/vague_2cols_experience/vague_2cols_experience.sqlite",
      "db_dump": "CREATE TABLE Companies (\n    CompanyID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT\n);\nCREATE TABLE EducationRequirements (\n    RequirementID INTEGER PRIMARY KEY,\n    DegreeLevel TEXT,\n    FieldOfStudy TEXT\n);\nCREATE TABLE Jobs (\n    JobID INTEGER PRIMARY KEY,\n    Minimum_Years INTEGER ,\n    Preferred_Years INTEGER ,\n    JobTitle TEXT,\n    Description TEXT,\n    Salary REAL \n);\nCREATE TABLE RequiredSkills (\n    SkillID INTEGER PRIMARY KEY,\n    SkillName TEXT,\n    ProficiencyLevel TEXT \n);\n\nINSERT INTO \"Companies\" (CompanyID,Name,Location) VALUES (1,'TechCorp','New York'),(2,'SoftwareInc','San Francisco'),(3,'AppDevelopers','Boston'),(4,'CodingWorld','Chicago'),(5,'ProgrammingCo','Los Angeles');\nINSERT INTO \"EducationRequirements\" (RequirementID,DegreeLevel,FieldOfStudy) VALUES (1,'Masters','Computer Science'),(2,'Bachelors','Information Technology'),(3,'PhD','Artificial Intelligence'),(4,'Associates','Web Development'),(5,'Certified','Project Management');\nINSERT INTO \"Jobs\" (JobID,Minimum_Years,Preferred_Years,JobTitle,Description,Salary) VALUES (1,2,4,'Software Developer','We are looking for a Software Developer with at least 2 years of experience.',70000.0),(2,3,6,'Data Analyst','Experienced Data Analyst required to join our team.',80000.0),(3,1,3,'Graphic Designer','We need an entry-level Graphic Designer to work on various projects.',50000.0),(4,4,8,'Product Manager','An experienced Product Manager is needed to manage and lead product development.',90000.0),(5,5,10,'System Administrator','A System Administrator with extensive experience is required to maintain and improve system performance.',60000.0);\nINSERT INTO \"RequiredSkills\" (SkillID,SkillName,ProficiencyLevel) VALUES (1,'Python Programming','Advanced'),(2,'JavaScript','Intermediate'),(3,'SQL','Expert'),(4,'HTML/CSS','Beginner'),(5,'Agile Methodology','Proficient');\n",
      "question": "What are the minimum and preferred years of experience for the open position with the greatest salary?",
      "gold_queries": [
        "SELECT Minimum_Years, Preferred_Years\r\nFROM Jobs\r\nORDER BY Salary DESC\r\nLIMIT 1;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Retrieve the job with the greatest salary and display its information including experience requirements.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Jobs WHERE Salary = (SELECT MAX(Salary) FROM Jobs)"
          ]
        },
        {
          "interpretation": "What is the job with the highest salary and what are its experience requirements?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT JobTitle, Minimum_Years, Preferred_Years FROM Jobs ORDER BY Salary DESC LIMIT 1"
          ]
        },
        {
          "interpretation": "What are the job requirements (experience) for the job offering the highest salary?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Minimum_Years, Preferred_Years FROM Jobs ORDER BY Salary DESC LIMIT 1"
          ]
        },
        {
          "interpretation": "What are the job requirements with the maximum salary in the database?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT JobTitle, Minimum_Years, Preferred_Years, Description, Salary FROM Jobs WHERE Salary = (SELECT MAX(Salary) FROM Jobs)"
          ]
        },
        {
          "interpretation": "Retrieve the job details including experience requirements for the job with the highest salary in the database.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT JobTitle, Minimum_Years, Preferred_Years, Salary FROM Jobs ORDER BY Salary DESC LIMIT 1"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "one_found": true,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Job Postings/vague_2cols_experience/vague_2cols_experience.sqlite",
      "db_dump": "CREATE TABLE Companies (\n    CompanyID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT\n);\nCREATE TABLE EducationRequirements (\n    RequirementID INTEGER PRIMARY KEY,\n    DegreeLevel TEXT,\n    FieldOfStudy TEXT\n);\nCREATE TABLE Jobs (\n    JobID INTEGER PRIMARY KEY,\n    Minimum_Years INTEGER ,\n    Preferred_Years INTEGER ,\n    JobTitle TEXT,\n    Description TEXT,\n    Salary REAL \n);\nCREATE TABLE RequiredSkills (\n    SkillID INTEGER PRIMARY KEY,\n    SkillName TEXT,\n    ProficiencyLevel TEXT \n);\n\nINSERT INTO \"Companies\" (CompanyID,Name,Location) VALUES (1,'TechCorp','New York'),(2,'SoftwareInc','San Francisco'),(3,'AppDevelopers','Boston'),(4,'CodingWorld','Chicago'),(5,'ProgrammingCo','Los Angeles');\nINSERT INTO \"EducationRequirements\" (RequirementID,DegreeLevel,FieldOfStudy) VALUES (1,'Masters','Computer Science'),(2,'Bachelors','Information Technology'),(3,'PhD','Artificial Intelligence'),(4,'Associates','Web Development'),(5,'Certified','Project Management');\nINSERT INTO \"Jobs\" (JobID,Minimum_Years,Preferred_Years,JobTitle,Description,Salary) VALUES (1,2,4,'Software Developer','We are looking for a Software Developer with at least 2 years of experience.',70000.0),(2,3,6,'Data Analyst','Experienced Data Analyst required to join our team.',80000.0),(3,1,3,'Graphic Designer','We need an entry-level Graphic Designer to work on various projects.',50000.0),(4,4,8,'Product Manager','An experienced Product Manager is needed to manage and lead product development.',90000.0),(5,5,10,'System Administrator','A System Administrator with extensive experience is required to maintain and improve system performance.',60000.0);\nINSERT INTO \"RequiredSkills\" (SkillID,SkillName,ProficiencyLevel) VALUES (1,'Python Programming','Advanced'),(2,'JavaScript','Intermediate'),(3,'SQL','Expert'),(4,'HTML/CSS','Beginner'),(5,'Agile Methodology','Proficient');\n",
      "question": "What are the preferred years of experience for the open position with the greatest salary?",
      "gold_queries": [
        "SELECT Preferred_Years\r\nFROM Jobs\r\nORDER BY Salary DESC\r\nLIMIT 1;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "The preferred years of experience for the highest paying job with the highest preferred years of experience.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Preferred_Years FROM Jobs WHERE Salary = (SELECT MAX(Salary) FROM Jobs) ORDER BY Preferred_Years DESC LIMIT 1"
          ]
        },
        {
          "interpretation": "The global maximum of preferred years of experience vs. salary for the job with the greatest salary.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT MAX(Preferred_Years), Salary FROM Jobs ORDER BY Salary DESC LIMIT 1"
          ]
        },
        {
          "interpretation": "The preferred years of experience for the job which has the highest salary that also has the highest required experience or the highest preferred experience in the 'Jobs' table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Preferred_Years \nFROM Jobs \nWHERE Salary = (SELECT MAX(Salary) FROM Jobs WHERE Minimum_Years = (SELECT MAX(Minimum_Years) FROM Jobs) OR Preferred_Years = (SELECT MAX(Preferred_Years) FROM Jobs))"
          ]
        },
        {
          "interpretation": "The preferred years of experience for the job with the highest salary and minimum required years of experience.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Preferred_Years FROM Jobs WHERE Salary = (SELECT MAX(Salary) FROM Jobs) AND Minimum_Years = (SELECT MIN(Minimum_Years) FROM Jobs)"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "one_found": true,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Job Postings/vague_2cols_experience/vague_2cols_experience.sqlite",
      "db_dump": "CREATE TABLE Companies (\n    CompanyID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT\n);\nCREATE TABLE EducationRequirements (\n    RequirementID INTEGER PRIMARY KEY,\n    DegreeLevel TEXT,\n    FieldOfStudy TEXT\n);\nCREATE TABLE Jobs (\n    JobID INTEGER PRIMARY KEY,\n    Minimum_Years INTEGER ,\n    Preferred_Years INTEGER ,\n    JobTitle TEXT,\n    Description TEXT,\n    Salary REAL \n);\nCREATE TABLE RequiredSkills (\n    SkillID INTEGER PRIMARY KEY,\n    SkillName TEXT,\n    ProficiencyLevel TEXT \n);\n\nINSERT INTO \"Companies\" (CompanyID,Name,Location) VALUES (1,'TechCorp','New York'),(2,'SoftwareInc','San Francisco'),(3,'AppDevelopers','Boston'),(4,'CodingWorld','Chicago'),(5,'ProgrammingCo','Los Angeles');\nINSERT INTO \"EducationRequirements\" (RequirementID,DegreeLevel,FieldOfStudy) VALUES (1,'Masters','Computer Science'),(2,'Bachelors','Information Technology'),(3,'PhD','Artificial Intelligence'),(4,'Associates','Web Development'),(5,'Certified','Project Management');\nINSERT INTO \"Jobs\" (JobID,Minimum_Years,Preferred_Years,JobTitle,Description,Salary) VALUES (1,2,4,'Software Developer','We are looking for a Software Developer with at least 2 years of experience.',70000.0),(2,3,6,'Data Analyst','Experienced Data Analyst required to join our team.',80000.0),(3,1,3,'Graphic Designer','We need an entry-level Graphic Designer to work on various projects.',50000.0),(4,4,8,'Product Manager','An experienced Product Manager is needed to manage and lead product development.',90000.0),(5,5,10,'System Administrator','A System Administrator with extensive experience is required to maintain and improve system performance.',60000.0);\nINSERT INTO \"RequiredSkills\" (SkillID,SkillName,ProficiencyLevel) VALUES (1,'Python Programming','Advanced'),(2,'JavaScript','Intermediate'),(3,'SQL','Expert'),(4,'HTML/CSS','Beginner'),(5,'Agile Methodology','Proficient');\n",
      "question": "What experience do I need for the open position with the greatest salary?",
      "gold_queries": [
        "SELECT Minimum_Years\r\nFROM Jobs\r\nORDER BY Salary DESC\r\nLIMIT 1;",
        "SELECT Preferred_Years\r\nFROM Jobs\r\nORDER BY Salary DESC\r\nLIMIT 1;",
        "SELECT Minimum_Years, Preferred_Years\r\nFROM Jobs\r\nORDER BY Salary DESC\r\nLIMIT 1;"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What are the minimum and preferred experience expectations for the Job with the maximum Salary?",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Minimum_Years, Preferred_Years FROM Jobs WHERE Salary = (SELECT MAX(Salary) FROM Jobs)"
          ]
        },
        {
          "interpretation": "What is the Minimum_Years requirement for the Job with the highest Salary?",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Minimum_Years FROM Jobs ORDER BY Salary DESC LIMIT 1"
          ]
        },
        {
          "interpretation": "Can I find the Job with the highest Salary and its associated experience requirements?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT JobTitle, Minimum_Years, Preferred_Years, Salary \nFROM Jobs \nORDER BY Salary DESC \nLIMIT 1"
          ]
        },
        {
          "interpretation": "What is the Preferred_Years expectation for the Job with the maximum Salary?",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Preferred_Years FROM Jobs ORDER BY Salary DESC LIMIT 1"
          ]
        },
        {
          "interpretation": "Can I get the list of Jobs with the greatest Salary and their corresponding experience requirements (Minimum_Years and Preferred_Years)?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT JobID, JobTitle, Minimum_Years, Preferred_Years, Salary \nFROM Jobs \nORDER BY Salary DESC"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.6,
        "one_found": true,
        "f1_score": 0.7499999999999999,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/vague/Housing Market/vague_2cols_location/vague_2cols_location.sqlite",
      "db_dump": "CREATE TABLE ClientProperties(\n    client_id INTEGER,\n    property_id INTEGER,\n    InterestedDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (client_id) REFERENCES Clients(client_id),\n    FOREIGN KEY (property_id) REFERENCES Properties(property_id));\nCREATE TABLE Clients(\n    client_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Email TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE Properties(\n    property_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Street_Address TEXT,\n    City TEXT,\n    Real_Estate_Offices INTEGER,\n    Price REAL,\n    Property_Type TEXT,\n    Square_Feet INTEGER);\nCREATE TABLE RealEstateOffices(\n    real_estate_office_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE Transactions(\n    transaction_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    TransactionDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    client_id INTEGER,\n    property_id INTEGER,\n    TypeOfTransaction TEXT,\n    FOREIGN KEY (client_id) REFERENCES Clients(client_id),\n    FOREIGN KEY (property_id) REFERENCES Properties(property_id));\n\nINSERT INTO \"ClientProperties\" (client_id,property_id,InterestedDate) VALUES (1,1,'2023-01-01 10:00:00'),(2,2,'2023-02-01 10:00:00'),(3,3,'2023-03-01 10:00:00'),(4,4,'2023-04-01 10:00:00'),(5,5,'2023-05-01 10:00:00');\nINSERT INTO \"Clients\" (client_id,Name,Email,PhoneNumber) VALUES (1,'John Doe','john@example.com','555-111-2222'),(2,'Jane Smith','janemsmith@email.com','555-333-4444'),(3,'Alice Johnson','alice.johnson@yahoo.com','555-555-6666'),(4,'Bob Brown','bobbrown@gmail.com','555-777-8888'),(5,'Carol White','carolwhite@hotmail.com','555-999-0000');\nINSERT INTO \"Properties\" (property_id,Street_Address,City,Real_Estate_Offices,Price,Property_Type,Square_Feet) VALUES (1,'123 Main St','Anytown',2,300000.0,'Single Family Home',2000),(2,'456 Elm St','Othertown',1,400000.0,'Condo',1200),(3,'789 Oak St','Anytown',3,500000.0,'Townhouse',2500),(4,'999 Pine St','Downtown',1,600000.0,'Loft',2000),(5,'222 Maple Ave','Suburbia',2,450000.0,'Single Family Home',3000);\nINSERT INTO \"RealEstateOffices\" (real_estate_office_id,Name,Address,PhoneNumber) VALUES (1,'ABC Realty','123 Office Rd','555-123-4567'),(2,'XYZ Real Estate','456 Agency Blvd','555-234-5678'),(3,'Mega Brokers','789 Listing Ln','555-345-6789'),(4,'Local Agents','999 Open House Dr','555-456-7890'),(5,'First Choice Homes','222 Sell Now St','555-567-8901');\nINSERT INTO \"Transactions\" (transaction_id,TransactionDate,client_id,property_id,TypeOfTransaction) VALUES (1,'2023-01-10 10:00:00',1,1,'Purchase'),(2,'2023-02-10 10:00:00',2,2,'Rent'),(3,'2023-03-10 10:00:00',3,3,'Lease'),(4,'2023-04-10 10:00:00',4,4,'Purchase'),(5,'2023-05-10 10:00:00',5,5,'Rent');\n",
      "question": "What are the street addresses and cities of the rental properties in the database?",
      "gold_queries": [
        "SELECT P.Street_Address, City from Transactions AS T LEFT JOIN Properties AS P ON T.property_id = P.property_id WHERE T.TypeOfTransaction LIKE 'Rent'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "The question is asking for the street addresses and cities of the properties that are currently being rented, based on recent transaction history.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Street_Address, City\nFROM Properties\nWHERE property_id IN (\n    SELECT property_id\n    FROM Transactions\n    WHERE TypeOfTransaction = 'Rent'\n    AND TransactionDate = (\n        SELECT MAX(TransactionDate)\n        FROM Transactions t2\n        WHERE t2.property_id = Transactions.property_id\n    )\n)"
          ]
        },
        {
          "interpretation": "The question is asking for the street addresses and cities of all properties in the database that are related to renting, including those that have been rented, are currently available for rent, or have been leased.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Properties.Street_Address, Properties.City\nFROM Properties\nJOIN Transactions ON Properties.property_id = Transactions.property_id\nWHERE Transactions.TypeOfTransaction IN ('Rent', 'Lease')"
          ]
        },
        {
          "interpretation": "The question is asking for the street addresses and cities of the properties that were rented within the last year.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.Street_Address, P.City\nFROM Properties P\nJOIN Transactions T ON P.property_id = T.property_id\nWHERE T.TypeOfTransaction = 'Rent' AND T.TransactionDate >= DATE('now', '-1 year')"
          ]
        },
        {
          "interpretation": "The question is asking for the corresponding client information (e.g., names, emails, phone numbers) of the clients who rented the properties with specific addresses and cities.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.Name, C.Email, C.PhoneNumber\nFROM Clients C\nJOIN Transactions T ON C.client_id = T.client_id\nJOIN Properties P ON T.property_id = P.property_id\nWHERE P.Street_Address IN ('456 Elm St', '222 Maple Ave') AND P.City IN ('Othertown', 'Suburbia') AND T.TypeOfTransaction = 'Rent'"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "one_found": true,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Job Postings/vague_2cols_experience/vague_2cols_experience.sqlite",
      "db_dump": "CREATE TABLE Companies (\n    CompanyID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT\n);\nCREATE TABLE EducationRequirements (\n    RequirementID INTEGER PRIMARY KEY,\n    DegreeLevel TEXT,\n    FieldOfStudy TEXT\n);\nCREATE TABLE Jobs (\n    JobID INTEGER PRIMARY KEY,\n    Minimum_Years INTEGER ,\n    Preferred_Years INTEGER ,\n    JobTitle TEXT,\n    Description TEXT,\n    Salary REAL \n);\nCREATE TABLE RequiredSkills (\n    SkillID INTEGER PRIMARY KEY,\n    SkillName TEXT,\n    ProficiencyLevel TEXT \n);\n\nINSERT INTO \"Companies\" (CompanyID,Name,Location) VALUES (1,'TechCorp','New York'),(2,'SoftwareInc','San Francisco'),(3,'AppDevelopers','Boston'),(4,'CodingWorld','Chicago'),(5,'ProgrammingCo','Los Angeles');\nINSERT INTO \"EducationRequirements\" (RequirementID,DegreeLevel,FieldOfStudy) VALUES (1,'Masters','Computer Science'),(2,'Bachelors','Information Technology'),(3,'PhD','Artificial Intelligence'),(4,'Associates','Web Development'),(5,'Certified','Project Management');\nINSERT INTO \"Jobs\" (JobID,Minimum_Years,Preferred_Years,JobTitle,Description,Salary) VALUES (1,2,4,'Software Developer','We are looking for a Software Developer with at least 2 years of experience.',70000.0),(2,3,6,'Data Analyst','Experienced Data Analyst required to join our team.',80000.0),(3,1,3,'Graphic Designer','We need an entry-level Graphic Designer to work on various projects.',50000.0),(4,4,8,'Product Manager','An experienced Product Manager is needed to manage and lead product development.',90000.0),(5,5,10,'System Administrator','A System Administrator with extensive experience is required to maintain and improve system performance.',60000.0);\nINSERT INTO \"RequiredSkills\" (SkillID,SkillName,ProficiencyLevel) VALUES (1,'Python Programming','Advanced'),(2,'JavaScript','Intermediate'),(3,'SQL','Expert'),(4,'HTML/CSS','Beginner'),(5,'Agile Methodology','Proficient');\n",
      "question": "What are the minimum years of experience that I need for the open position with the greatest salary?",
      "gold_queries": [
        "SELECT Minimum_Years\r\nFROM Jobs\r\nORDER BY Salary DESC\r\nLIMIT 1;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What is the minimum years of experience required for the most highly paid position in the database?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Minimum_Years FROM Jobs ORDER BY Salary DESC LIMIT 1"
          ]
        },
        {
          "interpretation": "What are the minimum and preferred years of experience for the job with the highest salary?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Minimum_Years, Preferred_Years\nFROM Jobs\nORDER BY Salary DESC\nLIMIT 1"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "one_found": true,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Housing Market/vague_2cols_location/vague_2cols_location.sqlite",
      "db_dump": "CREATE TABLE ClientProperties(\n    client_id INTEGER,\n    property_id INTEGER,\n    InterestedDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (client_id) REFERENCES Clients(client_id),\n    FOREIGN KEY (property_id) REFERENCES Properties(property_id));\nCREATE TABLE Clients(\n    client_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Email TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE Properties(\n    property_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Street_Address TEXT,\n    City TEXT,\n    Real_Estate_Offices INTEGER,\n    Price REAL,\n    Property_Type TEXT,\n    Square_Feet INTEGER);\nCREATE TABLE RealEstateOffices(\n    real_estate_office_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE Transactions(\n    transaction_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    TransactionDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    client_id INTEGER,\n    property_id INTEGER,\n    TypeOfTransaction TEXT,\n    FOREIGN KEY (client_id) REFERENCES Clients(client_id),\n    FOREIGN KEY (property_id) REFERENCES Properties(property_id));\n\nINSERT INTO \"ClientProperties\" (client_id,property_id,InterestedDate) VALUES (1,1,'2023-01-01 10:00:00'),(2,2,'2023-02-01 10:00:00'),(3,3,'2023-03-01 10:00:00'),(4,4,'2023-04-01 10:00:00'),(5,5,'2023-05-01 10:00:00');\nINSERT INTO \"Clients\" (client_id,Name,Email,PhoneNumber) VALUES (1,'John Doe','john@example.com','555-111-2222'),(2,'Jane Smith','janemsmith@email.com','555-333-4444'),(3,'Alice Johnson','alice.johnson@yahoo.com','555-555-6666'),(4,'Bob Brown','bobbrown@gmail.com','555-777-8888'),(5,'Carol White','carolwhite@hotmail.com','555-999-0000');\nINSERT INTO \"Properties\" (property_id,Street_Address,City,Real_Estate_Offices,Price,Property_Type,Square_Feet) VALUES (1,'123 Main St','Anytown',2,300000.0,'Single Family Home',2000),(2,'456 Elm St','Othertown',1,400000.0,'Condo',1200),(3,'789 Oak St','Anytown',3,500000.0,'Townhouse',2500),(4,'999 Pine St','Downtown',1,600000.0,'Loft',2000),(5,'222 Maple Ave','Suburbia',2,450000.0,'Single Family Home',3000);\nINSERT INTO \"RealEstateOffices\" (real_estate_office_id,Name,Address,PhoneNumber) VALUES (1,'ABC Realty','123 Office Rd','555-123-4567'),(2,'XYZ Real Estate','456 Agency Blvd','555-234-5678'),(3,'Mega Brokers','789 Listing Ln','555-345-6789'),(4,'Local Agents','999 Open House Dr','555-456-7890'),(5,'First Choice Homes','222 Sell Now St','555-567-8901');\nINSERT INTO \"Transactions\" (transaction_id,TransactionDate,client_id,property_id,TypeOfTransaction) VALUES (1,'2023-01-10 10:00:00',1,1,'Purchase'),(2,'2023-02-10 10:00:00',2,2,'Rent'),(3,'2023-03-10 10:00:00',3,3,'Lease'),(4,'2023-04-10 10:00:00',4,4,'Purchase'),(5,'2023-05-10 10:00:00',5,5,'Rent');\n",
      "question": "In what city is the property of the customer with phone number 555-333-4444 located?",
      "gold_queries": [
        "SELECT P.City from ClientProperties LEFT JOIN Clients as C ON ClientProperties.client_id = C.client_id LEFT JOIN Properties AS P ON ClientProperties.property_id = P.property_id WHERE C.PhoneNumber LIKE '555-333-4444'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "In which city do customers with phone number 555-333-4444 have their properties listed?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT DISTINCT City FROM Properties WHERE property_id IN (SELECT property_id FROM ClientProperties WHERE client_id = (SELECT client_id FROM Clients WHERE PhoneNumber = '555-333-4444'))"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "one_found": true,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Housing Market/vague_2cols_location/vague_2cols_location.sqlite",
      "db_dump": "CREATE TABLE ClientProperties(\n    client_id INTEGER,\n    property_id INTEGER,\n    InterestedDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (client_id) REFERENCES Clients(client_id),\n    FOREIGN KEY (property_id) REFERENCES Properties(property_id));\nCREATE TABLE Clients(\n    client_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Email TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE Properties(\n    property_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Street_Address TEXT,\n    City TEXT,\n    Real_Estate_Offices INTEGER,\n    Price REAL,\n    Property_Type TEXT,\n    Square_Feet INTEGER);\nCREATE TABLE RealEstateOffices(\n    real_estate_office_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE Transactions(\n    transaction_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    TransactionDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    client_id INTEGER,\n    property_id INTEGER,\n    TypeOfTransaction TEXT,\n    FOREIGN KEY (client_id) REFERENCES Clients(client_id),\n    FOREIGN KEY (property_id) REFERENCES Properties(property_id));\n\nINSERT INTO \"ClientProperties\" (client_id,property_id,InterestedDate) VALUES (1,1,'2023-01-01 10:00:00'),(2,2,'2023-02-01 10:00:00'),(3,3,'2023-03-01 10:00:00'),(4,4,'2023-04-01 10:00:00'),(5,5,'2023-05-01 10:00:00');\nINSERT INTO \"Clients\" (client_id,Name,Email,PhoneNumber) VALUES (1,'John Doe','john@example.com','555-111-2222'),(2,'Jane Smith','janemsmith@email.com','555-333-4444'),(3,'Alice Johnson','alice.johnson@yahoo.com','555-555-6666'),(4,'Bob Brown','bobbrown@gmail.com','555-777-8888'),(5,'Carol White','carolwhite@hotmail.com','555-999-0000');\nINSERT INTO \"Properties\" (property_id,Street_Address,City,Real_Estate_Offices,Price,Property_Type,Square_Feet) VALUES (1,'123 Main St','Anytown',2,300000.0,'Single Family Home',2000),(2,'456 Elm St','Othertown',1,400000.0,'Condo',1200),(3,'789 Oak St','Anytown',3,500000.0,'Townhouse',2500),(4,'999 Pine St','Downtown',1,600000.0,'Loft',2000),(5,'222 Maple Ave','Suburbia',2,450000.0,'Single Family Home',3000);\nINSERT INTO \"RealEstateOffices\" (real_estate_office_id,Name,Address,PhoneNumber) VALUES (1,'ABC Realty','123 Office Rd','555-123-4567'),(2,'XYZ Real Estate','456 Agency Blvd','555-234-5678'),(3,'Mega Brokers','789 Listing Ln','555-345-6789'),(4,'Local Agents','999 Open House Dr','555-456-7890'),(5,'First Choice Homes','222 Sell Now St','555-567-8901');\nINSERT INTO \"Transactions\" (transaction_id,TransactionDate,client_id,property_id,TypeOfTransaction) VALUES (1,'2023-01-10 10:00:00',1,1,'Purchase'),(2,'2023-02-10 10:00:00',2,2,'Rent'),(3,'2023-03-10 10:00:00',3,3,'Lease'),(4,'2023-04-10 10:00:00',4,4,'Purchase'),(5,'2023-05-10 10:00:00',5,5,'Rent');\n",
      "question": "What is the customer with phone number 555-333-4444's street address?",
      "gold_queries": [
        "SELECT P.Street_Address from ClientProperties LEFT JOIN Clients as C ON ClientProperties.client_id = C.client_id LEFT JOIN Properties AS P ON ClientProperties.property_id = P.property_id WHERE C.PhoneNumber LIKE '555-333-4444'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Get the client whose phone number is '555-333-4444', not considering variations like (555) 333 4444 or 555.333.4444.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name FROM Clients WHERE PhoneNumber = '555-333-4444'"
          ]
        },
        {
          "interpretation": "Find the client's street address given their phone number is '555-333-4444'.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Street_Address FROM Properties WHERE property_id IN (SELECT property_id FROM Transactions WHERE client_id = (SELECT client_id FROM Clients WHERE PhoneNumber = '555-333-4444'))"
          ]
        },
        {
          "interpretation": "Find the client with the phone number that matches '555-333-4444' exactly.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Email, PhoneNumber FROM Clients WHERE PhoneNumber = '555-333-4444'"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "one_found": true,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Housing Market/vague_2cols_location/vague_2cols_location.sqlite",
      "db_dump": "CREATE TABLE ClientProperties(\n    client_id INTEGER,\n    property_id INTEGER,\n    InterestedDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (client_id) REFERENCES Clients(client_id),\n    FOREIGN KEY (property_id) REFERENCES Properties(property_id));\nCREATE TABLE Clients(\n    client_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Email TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE Properties(\n    property_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Street_Address TEXT,\n    City TEXT,\n    Real_Estate_Offices INTEGER,\n    Price REAL,\n    Property_Type TEXT,\n    Square_Feet INTEGER);\nCREATE TABLE RealEstateOffices(\n    real_estate_office_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE Transactions(\n    transaction_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    TransactionDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    client_id INTEGER,\n    property_id INTEGER,\n    TypeOfTransaction TEXT,\n    FOREIGN KEY (client_id) REFERENCES Clients(client_id),\n    FOREIGN KEY (property_id) REFERENCES Properties(property_id));\n\nINSERT INTO \"ClientProperties\" (client_id,property_id,InterestedDate) VALUES (1,1,'2023-01-01 10:00:00'),(2,2,'2023-02-01 10:00:00'),(3,3,'2023-03-01 10:00:00'),(4,4,'2023-04-01 10:00:00'),(5,5,'2023-05-01 10:00:00');\nINSERT INTO \"Clients\" (client_id,Name,Email,PhoneNumber) VALUES (1,'John Doe','john@example.com','555-111-2222'),(2,'Jane Smith','janemsmith@email.com','555-333-4444'),(3,'Alice Johnson','alice.johnson@yahoo.com','555-555-6666'),(4,'Bob Brown','bobbrown@gmail.com','555-777-8888'),(5,'Carol White','carolwhite@hotmail.com','555-999-0000');\nINSERT INTO \"Properties\" (property_id,Street_Address,City,Real_Estate_Offices,Price,Property_Type,Square_Feet) VALUES (1,'123 Main St','Anytown',2,300000.0,'Single Family Home',2000),(2,'456 Elm St','Othertown',1,400000.0,'Condo',1200),(3,'789 Oak St','Anytown',3,500000.0,'Townhouse',2500),(4,'999 Pine St','Downtown',1,600000.0,'Loft',2000),(5,'222 Maple Ave','Suburbia',2,450000.0,'Single Family Home',3000);\nINSERT INTO \"RealEstateOffices\" (real_estate_office_id,Name,Address,PhoneNumber) VALUES (1,'ABC Realty','123 Office Rd','555-123-4567'),(2,'XYZ Real Estate','456 Agency Blvd','555-234-5678'),(3,'Mega Brokers','789 Listing Ln','555-345-6789'),(4,'Local Agents','999 Open House Dr','555-456-7890'),(5,'First Choice Homes','222 Sell Now St','555-567-8901');\nINSERT INTO \"Transactions\" (transaction_id,TransactionDate,client_id,property_id,TypeOfTransaction) VALUES (1,'2023-01-10 10:00:00',1,1,'Purchase'),(2,'2023-02-10 10:00:00',2,2,'Rent'),(3,'2023-03-10 10:00:00',3,3,'Lease'),(4,'2023-04-10 10:00:00',4,4,'Purchase'),(5,'2023-05-10 10:00:00',5,5,'Rent');\n",
      "question": "What is the city and street address of the property for the customer with phone number 555-333-4444?",
      "gold_queries": [
        "SELECT P.Street_Address, City from ClientProperties LEFT JOIN Clients as C ON ClientProperties.client_id = C.client_id LEFT JOIN Properties AS P ON ClientProperties.property_id = P.property_id WHERE C.PhoneNumber LIKE '555-333-4444'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What is the city and street address of the property that the customer with phone number 555-333-4444 is interested in (as recorded in ClientProperties table)?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT P.City, P.Street_Address \nFROM Properties P \nJOIN ClientProperties CP ON P.property_id = CP.property_id \nJOIN Clients C ON CP.client_id = C.client_id \nWHERE C.PhoneNumber = '555-333-4444'"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "one_found": true,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Housing Market/vague_2cols_location/vague_2cols_location.sqlite",
      "db_dump": "CREATE TABLE ClientProperties(\n    client_id INTEGER,\n    property_id INTEGER,\n    InterestedDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (client_id) REFERENCES Clients(client_id),\n    FOREIGN KEY (property_id) REFERENCES Properties(property_id));\nCREATE TABLE Clients(\n    client_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Email TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE Properties(\n    property_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Street_Address TEXT,\n    City TEXT,\n    Real_Estate_Offices INTEGER,\n    Price REAL,\n    Property_Type TEXT,\n    Square_Feet INTEGER);\nCREATE TABLE RealEstateOffices(\n    real_estate_office_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE Transactions(\n    transaction_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    TransactionDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    client_id INTEGER,\n    property_id INTEGER,\n    TypeOfTransaction TEXT,\n    FOREIGN KEY (client_id) REFERENCES Clients(client_id),\n    FOREIGN KEY (property_id) REFERENCES Properties(property_id));\n\nINSERT INTO \"ClientProperties\" (client_id,property_id,InterestedDate) VALUES (1,1,'2023-01-01 10:00:00'),(2,2,'2023-02-01 10:00:00'),(3,3,'2023-03-01 10:00:00'),(4,4,'2023-04-01 10:00:00'),(5,5,'2023-05-01 10:00:00');\nINSERT INTO \"Clients\" (client_id,Name,Email,PhoneNumber) VALUES (1,'John Doe','john@example.com','555-111-2222'),(2,'Jane Smith','janemsmith@email.com','555-333-4444'),(3,'Alice Johnson','alice.johnson@yahoo.com','555-555-6666'),(4,'Bob Brown','bobbrown@gmail.com','555-777-8888'),(5,'Carol White','carolwhite@hotmail.com','555-999-0000');\nINSERT INTO \"Properties\" (property_id,Street_Address,City,Real_Estate_Offices,Price,Property_Type,Square_Feet) VALUES (1,'123 Main St','Anytown',2,300000.0,'Single Family Home',2000),(2,'456 Elm St','Othertown',1,400000.0,'Condo',1200),(3,'789 Oak St','Anytown',3,500000.0,'Townhouse',2500),(4,'999 Pine St','Downtown',1,600000.0,'Loft',2000),(5,'222 Maple Ave','Suburbia',2,450000.0,'Single Family Home',3000);\nINSERT INTO \"RealEstateOffices\" (real_estate_office_id,Name,Address,PhoneNumber) VALUES (1,'ABC Realty','123 Office Rd','555-123-4567'),(2,'XYZ Real Estate','456 Agency Blvd','555-234-5678'),(3,'Mega Brokers','789 Listing Ln','555-345-6789'),(4,'Local Agents','999 Open House Dr','555-456-7890'),(5,'First Choice Homes','222 Sell Now St','555-567-8901');\nINSERT INTO \"Transactions\" (transaction_id,TransactionDate,client_id,property_id,TypeOfTransaction) VALUES (1,'2023-01-10 10:00:00',1,1,'Purchase'),(2,'2023-02-10 10:00:00',2,2,'Rent'),(3,'2023-03-10 10:00:00',3,3,'Lease'),(4,'2023-04-10 10:00:00',4,4,'Purchase'),(5,'2023-05-10 10:00:00',5,5,'Rent');\n",
      "question": "What are the street addresses of the rental properties in the database?",
      "gold_queries": [
        "SELECT P.Street_Address from Transactions AS T LEFT JOIN Properties AS P ON T.property_id = P.property_id WHERE T.TypeOfTransaction LIKE 'Rent'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What are the street addresses of properties that have been leased or rented.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.Street_Address FROM Properties P JOIN Transactions T ON P.property_id = T.property_id WHERE T.TypeOfTransaction IN ('Lease', 'Rent')"
          ]
        },
        {
          "interpretation": "What are the street addresses of properties involved in rent-based transactions.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Street_Address\nFROM Properties\nWHERE property_id IN (\n    SELECT property_id\n    FROM Transactions\n    WHERE TypeOfTransaction = 'Rent'\n)"
          ]
        },
        {
          "interpretation": "What are the street addresses of the rental spaces in the database.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Street_Address FROM Properties WHERE Property_Type = 'Condo' OR Property_Type = 'Townhouse' OR Property_Type = 'Loft'"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "one_found": true,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Housing Market/vague_2cols_location/vague_2cols_location.sqlite",
      "db_dump": "CREATE TABLE ClientProperties(\n    client_id INTEGER,\n    property_id INTEGER,\n    InterestedDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (client_id) REFERENCES Clients(client_id),\n    FOREIGN KEY (property_id) REFERENCES Properties(property_id));\nCREATE TABLE Clients(\n    client_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Email TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE Properties(\n    property_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Street_Address TEXT,\n    City TEXT,\n    Real_Estate_Offices INTEGER,\n    Price REAL,\n    Property_Type TEXT,\n    Square_Feet INTEGER);\nCREATE TABLE RealEstateOffices(\n    real_estate_office_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE Transactions(\n    transaction_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    TransactionDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    client_id INTEGER,\n    property_id INTEGER,\n    TypeOfTransaction TEXT,\n    FOREIGN KEY (client_id) REFERENCES Clients(client_id),\n    FOREIGN KEY (property_id) REFERENCES Properties(property_id));\n\nINSERT INTO \"ClientProperties\" (client_id,property_id,InterestedDate) VALUES (1,1,'2023-01-01 10:00:00'),(2,2,'2023-02-01 10:00:00'),(3,3,'2023-03-01 10:00:00'),(4,4,'2023-04-01 10:00:00'),(5,5,'2023-05-01 10:00:00');\nINSERT INTO \"Clients\" (client_id,Name,Email,PhoneNumber) VALUES (1,'John Doe','john@example.com','555-111-2222'),(2,'Jane Smith','janemsmith@email.com','555-333-4444'),(3,'Alice Johnson','alice.johnson@yahoo.com','555-555-6666'),(4,'Bob Brown','bobbrown@gmail.com','555-777-8888'),(5,'Carol White','carolwhite@hotmail.com','555-999-0000');\nINSERT INTO \"Properties\" (property_id,Street_Address,City,Real_Estate_Offices,Price,Property_Type,Square_Feet) VALUES (1,'123 Main St','Anytown',2,300000.0,'Single Family Home',2000),(2,'456 Elm St','Othertown',1,400000.0,'Condo',1200),(3,'789 Oak St','Anytown',3,500000.0,'Townhouse',2500),(4,'999 Pine St','Downtown',1,600000.0,'Loft',2000),(5,'222 Maple Ave','Suburbia',2,450000.0,'Single Family Home',3000);\nINSERT INTO \"RealEstateOffices\" (real_estate_office_id,Name,Address,PhoneNumber) VALUES (1,'ABC Realty','123 Office Rd','555-123-4567'),(2,'XYZ Real Estate','456 Agency Blvd','555-234-5678'),(3,'Mega Brokers','789 Listing Ln','555-345-6789'),(4,'Local Agents','999 Open House Dr','555-456-7890'),(5,'First Choice Homes','222 Sell Now St','555-567-8901');\nINSERT INTO \"Transactions\" (transaction_id,TransactionDate,client_id,property_id,TypeOfTransaction) VALUES (1,'2023-01-10 10:00:00',1,1,'Purchase'),(2,'2023-02-10 10:00:00',2,2,'Rent'),(3,'2023-03-10 10:00:00',3,3,'Lease'),(4,'2023-04-10 10:00:00',4,4,'Purchase'),(5,'2023-05-10 10:00:00',5,5,'Rent');\n",
      "question": "In what city are the rental properties in the database?",
      "gold_queries": [
        "SELECT P.City from Transactions AS T LEFT JOIN Properties AS P ON T.property_id = P.property_id WHERE T.TypeOfTransaction LIKE 'Rent'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Cities of the properties where the TypeOfTransaction is 'Rent' or 'Lease'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT T2.City \nFROM Transactions AS T1 \nJOIN Properties AS T2 \nON T1.property_id = T2.property_id \nWHERE T1.TypeOfTransaction = 'Rent' OR T1.TypeOfTransaction = 'Lease'"
          ]
        },
        {
          "interpretation": "Cities of the properties that would be considered rental properties based on their Type in the Properties table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT City FROM Properties WHERE Property_Type = 'Condo' OR Property_Type = 'Townhouse' OR Property_Type = 'Loft'"
          ]
        },
        {
          "interpretation": "Cities of the properties listed as rentals in the Properties table, without checking the Transactions table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT City FROM Properties WHERE Property_Type = 'Condo'"
          ]
        },
        {
          "interpretation": "Cities of the properties recently viewed (based on InterestedDate within a specific time frame) that are marked as rental properties.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT P.City\nFROM ClientProperties CP\nJOIN Properties P ON CP.property_id = P.property_id\nWHERE CP.InterestedDate >= '2023-04-01' AND CP.InterestedDate <= '2023-05-31' AND P.Property_Type = 'Condo'"
          ]
        },
        {
          "interpretation": "Cities of all properties that have been rented out at any point in the database.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT P.City \nFROM Properties P \nJOIN Transactions T ON P.property_id = T.property_id"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Housing Market/vague_2cols_location/vague_2cols_location.sqlite",
      "db_dump": "CREATE TABLE ClientProperties(\n    client_id INTEGER,\n    property_id INTEGER,\n    InterestedDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (client_id) REFERENCES Clients(client_id),\n    FOREIGN KEY (property_id) REFERENCES Properties(property_id));\nCREATE TABLE Clients(\n    client_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Email TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE Properties(\n    property_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Street_Address TEXT,\n    City TEXT,\n    Real_Estate_Offices INTEGER,\n    Price REAL,\n    Property_Type TEXT,\n    Square_Feet INTEGER);\nCREATE TABLE RealEstateOffices(\n    real_estate_office_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE Transactions(\n    transaction_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    TransactionDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    client_id INTEGER,\n    property_id INTEGER,\n    TypeOfTransaction TEXT,\n    FOREIGN KEY (client_id) REFERENCES Clients(client_id),\n    FOREIGN KEY (property_id) REFERENCES Properties(property_id));\n\nINSERT INTO \"ClientProperties\" (client_id,property_id,InterestedDate) VALUES (1,1,'2023-01-01 10:00:00'),(2,2,'2023-02-01 10:00:00'),(3,3,'2023-03-01 10:00:00'),(4,4,'2023-04-01 10:00:00'),(5,5,'2023-05-01 10:00:00');\nINSERT INTO \"Clients\" (client_id,Name,Email,PhoneNumber) VALUES (1,'John Doe','john@example.com','555-111-2222'),(2,'Jane Smith','janemsmith@email.com','555-333-4444'),(3,'Alice Johnson','alice.johnson@yahoo.com','555-555-6666'),(4,'Bob Brown','bobbrown@gmail.com','555-777-8888'),(5,'Carol White','carolwhite@hotmail.com','555-999-0000');\nINSERT INTO \"Properties\" (property_id,Street_Address,City,Real_Estate_Offices,Price,Property_Type,Square_Feet) VALUES (1,'123 Main St','Anytown',2,300000.0,'Single Family Home',2000),(2,'456 Elm St','Othertown',1,400000.0,'Condo',1200),(3,'789 Oak St','Anytown',3,500000.0,'Townhouse',2500),(4,'999 Pine St','Downtown',1,600000.0,'Loft',2000),(5,'222 Maple Ave','Suburbia',2,450000.0,'Single Family Home',3000);\nINSERT INTO \"RealEstateOffices\" (real_estate_office_id,Name,Address,PhoneNumber) VALUES (1,'ABC Realty','123 Office Rd','555-123-4567'),(2,'XYZ Real Estate','456 Agency Blvd','555-234-5678'),(3,'Mega Brokers','789 Listing Ln','555-345-6789'),(4,'Local Agents','999 Open House Dr','555-456-7890'),(5,'First Choice Homes','222 Sell Now St','555-567-8901');\nINSERT INTO \"Transactions\" (transaction_id,TransactionDate,client_id,property_id,TypeOfTransaction) VALUES (1,'2023-01-10 10:00:00',1,1,'Purchase'),(2,'2023-02-10 10:00:00',2,2,'Rent'),(3,'2023-03-10 10:00:00',3,3,'Lease'),(4,'2023-04-10 10:00:00',4,4,'Purchase'),(5,'2023-05-10 10:00:00',5,5,'Rent');\n",
      "question": "What are the locations of rental properties in the database?",
      "gold_queries": [
        "SELECT P.Street_Address from Transactions AS T LEFT JOIN Properties AS P ON T.property_id = P.property_id WHERE T.TypeOfTransaction LIKE 'Rent'",
        "SELECT P.City from Transactions AS T LEFT JOIN Properties AS P ON T.property_id = P.property_id WHERE T.TypeOfTransaction LIKE 'Rent'",
        "SELECT P.Street_Address, City from Transactions AS T LEFT JOIN Properties AS P ON T.property_id = P.property_id WHERE T.TypeOfTransaction LIKE 'Rent'"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Locations of properties that have a transaction type 'Rent'.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT P.City\nFROM Properties P\nJOIN Transactions T ON P.property_id = T.property_id\nWHERE T.TypeOfTransaction = 'Rent'"
          ]
        },
        {
          "interpretation": "A list of unique clients that have rented properties and their associated locations.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT Clients.Name, Properties.City\nFROM Clients\nJOIN Transactions ON Clients.client_id = Transactions.client_id\nJOIN Properties ON Transactions.property_id = Properties.property_id\nWHERE Transactions.TypeOfTransaction = 'Rent'"
          ]
        },
        {
          "interpretation": "Streets of properties that are rented and have a square foot area greater than the average square foot of all properties.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.Street_Address \nFROM Properties P \nJOIN Transactions T ON P.property_id = T.property_id \nWHERE T.TypeOfTransaction = 'Rent' AND P.Square_Feet > (SELECT AVG(Square_Feet) FROM Properties)"
          ]
        },
        {
          "interpretation": "Locations of all properties in the database where the price is less than or equal to the average price of rental properties.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Street_Address, City \nFROM Properties \nWHERE Price <= (SELECT AVG(Price) FROM Properties WHERE Property_Type = 'Rent')"
          ]
        },
        {
          "interpretation": "Streets of properties in the database that are marked as rentals.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Street_Address FROM Properties WHERE Property_Type = 'Condo' OR Property_Type = 'Townhouse'"
          ]
        },
        {
          "interpretation": "Locations of properties in the database where the transaction type is 'Rent' or 'Lease'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Street_Address, City FROM Properties WHERE property_id IN (SELECT property_id FROM Transactions WHERE TypeOfTransaction IN ('Rent', 'Lease'))"
          ]
        },
        {
          "interpretation": "Locations of properties in the database that have a transaction type and the word'rent' appears in it.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.Street_Address, P.City \nFROM Properties P \nJOIN Transactions T ON P.property_id = T.property_id \nWHERE T.TypeOfTransaction LIKE '%rent%'"
          ]
        },
        {
          "interpretation": "Locations of properties in the database where the transaction type does not include 'Rent' but the client still chose to rent.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT Properties.Street_Address \nFROM Properties \nJOIN Transactions ON Properties.property_id = Transactions.property_id \nJOIN ClientProperties ON Properties.property_id = ClientProperties.property_id \nJOIN Clients ON Transactions.client_id = Clients.client_id \nWHERE Transactions.TypeOfTransaction = 'Rent' AND Properties.property_id NOT IN (SELECT property_id FROM Transactions WHERE TypeOfTransaction != 'Rent')"
          ]
        },
        {
          "interpretation": "Real Estate Offices where rental properties are listed.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT T1.Name\nFROM RealEstateOffices AS T1\nJOIN Properties AS T2 ON T1.real_estate_office_id = T2.Real_Estate_Offices\nJOIN Transactions AS T3 ON T2.property_id = T3.property_id\nWHERE T3.TypeOfTransaction = 'Rent'"
          ]
        },
        {
          "interpretation": "Locations of properties in the database where the property type is 'Condo' and the client has chosen to rent.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.Street_Address, P.City\nFROM Properties P\nJOIN Transactions T ON P.property_id = T.property_id\nWHERE P.Property_Type = 'Condo' AND T.TypeOfTransaction = 'Rent'"
          ]
        },
        {
          "interpretation": "A list of unique locations where properties are rented from, along with the count of properties rented from each location.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Properties.City, COUNT(*) \nFROM Transactions \nJOIN Properties \nON Transactions.property_id = Properties.property_id \nWHERE Transactions.TypeOfTransaction = 'Rent' \nGROUP BY Properties.City"
          ]
        }
      ],
      "num_unique_execution_results": 11,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2727272727272727,
        "one_found": true,
        "f1_score": 0.42857142857142855,
        "num_queries": 11,
        "num_unique_queries": 11,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/vague/Housing Market/vague_2cols_location/vague_2cols_location.sqlite",
      "db_dump": "CREATE TABLE ClientProperties(\n    client_id INTEGER,\n    property_id INTEGER,\n    InterestedDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (client_id) REFERENCES Clients(client_id),\n    FOREIGN KEY (property_id) REFERENCES Properties(property_id));\nCREATE TABLE Clients(\n    client_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Email TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE Properties(\n    property_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Street_Address TEXT,\n    City TEXT,\n    Real_Estate_Offices INTEGER,\n    Price REAL,\n    Property_Type TEXT,\n    Square_Feet INTEGER);\nCREATE TABLE RealEstateOffices(\n    real_estate_office_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE Transactions(\n    transaction_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    TransactionDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    client_id INTEGER,\n    property_id INTEGER,\n    TypeOfTransaction TEXT,\n    FOREIGN KEY (client_id) REFERENCES Clients(client_id),\n    FOREIGN KEY (property_id) REFERENCES Properties(property_id));\n\nINSERT INTO \"ClientProperties\" (client_id,property_id,InterestedDate) VALUES (1,1,'2023-01-01 10:00:00'),(2,2,'2023-02-01 10:00:00'),(3,3,'2023-03-01 10:00:00'),(4,4,'2023-04-01 10:00:00'),(5,5,'2023-05-01 10:00:00');\nINSERT INTO \"Clients\" (client_id,Name,Email,PhoneNumber) VALUES (1,'John Doe','john@example.com','555-111-2222'),(2,'Jane Smith','janemsmith@email.com','555-333-4444'),(3,'Alice Johnson','alice.johnson@yahoo.com','555-555-6666'),(4,'Bob Brown','bobbrown@gmail.com','555-777-8888'),(5,'Carol White','carolwhite@hotmail.com','555-999-0000');\nINSERT INTO \"Properties\" (property_id,Street_Address,City,Real_Estate_Offices,Price,Property_Type,Square_Feet) VALUES (1,'123 Main St','Anytown',2,300000.0,'Single Family Home',2000),(2,'456 Elm St','Othertown',1,400000.0,'Condo',1200),(3,'789 Oak St','Anytown',3,500000.0,'Townhouse',2500),(4,'999 Pine St','Downtown',1,600000.0,'Loft',2000),(5,'222 Maple Ave','Suburbia',2,450000.0,'Single Family Home',3000);\nINSERT INTO \"RealEstateOffices\" (real_estate_office_id,Name,Address,PhoneNumber) VALUES (1,'ABC Realty','123 Office Rd','555-123-4567'),(2,'XYZ Real Estate','456 Agency Blvd','555-234-5678'),(3,'Mega Brokers','789 Listing Ln','555-345-6789'),(4,'Local Agents','999 Open House Dr','555-456-7890'),(5,'First Choice Homes','222 Sell Now St','555-567-8901');\nINSERT INTO \"Transactions\" (transaction_id,TransactionDate,client_id,property_id,TypeOfTransaction) VALUES (1,'2023-01-10 10:00:00',1,1,'Purchase'),(2,'2023-02-10 10:00:00',2,2,'Rent'),(3,'2023-03-10 10:00:00',3,3,'Lease'),(4,'2023-04-10 10:00:00',4,4,'Purchase'),(5,'2023-05-10 10:00:00',5,5,'Rent');\n",
      "question": "What is the location of the property for the customer with phone number 555-333-4444?",
      "gold_queries": [
        "SELECT P.Street_Address from ClientProperties LEFT JOIN Clients as C ON ClientProperties.client_id = C.client_id LEFT JOIN Properties AS P ON ClientProperties.property_id = P.property_id WHERE C.PhoneNumber LIKE '555-333-4444'",
        "SELECT P.City from ClientProperties LEFT JOIN Clients as C ON ClientProperties.client_id = C.client_id LEFT JOIN Properties AS P ON ClientProperties.property_id = P.property_id WHERE C.PhoneNumber LIKE '555-333-4444'",
        "SELECT P.Street_Address, City from ClientProperties LEFT JOIN Clients as C ON ClientProperties.client_id = C.client_id LEFT JOIN Properties AS P ON ClientProperties.property_id = P.property_id WHERE C.PhoneNumber LIKE '555-333-4444'"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Get the Street_Address and City from the corresponding property.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Street_Address, City FROM Properties"
          ]
        },
        {
          "interpretation": "Get the location of the property associated with the client whose phone number is 555-333-4444 using the ClientProperties table as an intermediary.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.Street_Address, P.City\nFROM Clients C\nJOIN ClientProperties CP ON C.client_id = CP.client_id\nJOIN Properties P ON CP.property_id = P.property_id\nWHERE C.PhoneNumber = '555-333-4444'"
          ]
        },
        {
          "interpretation": "Get the address of the real estate property for a client based on their phone number in the Clients table and retrieved property details from the ClientProperties and Properties tables.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.Street_Address \nFROM Clients C \nJOIN ClientProperties CP ON C.client_id = CP.client_id \nJOIN Properties P ON CP.property_id = P.property_id \nWHERE C.PhoneNumber = '555-111-2222'"
          ]
        },
        {
          "interpretation": "Query the Properties table with the property ID to obtain the location (Street_Address and City) of the property.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Street_Address, City FROM Properties WHERE property_id = 1"
          ]
        },
        {
          "interpretation": "Retrieve the client ID, client, and corresponding property ID from the Clients table where the client's phone number matches.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT c.client_id, c.Name, p.property_id\nFROM Clients c\nJOIN ClientProperties p ON c.client_id = p.client_id\nWHERE c.PhoneNumber = '555-111-2222'"
          ]
        },
        {
          "interpretation": "Link the Clients and ClientProperties tables to find the property ID linked to the client with phone number 555-333-4444.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.property_id FROM Clients AS T1 JOIN ClientProperties AS T2 ON T1.client_id = T2.client_id WHERE T1.PhoneNumber = '555-333-4444'"
          ]
        },
        {
          "interpretation": "Query the Properties table using the property ID related to the client with phone number 555-333-4444 to find the location.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Properties.City\nFROM Properties\nJOIN ClientProperties ON Properties.property_id = ClientProperties.property_id\nJOIN Clients ON ClientProperties.client_id = Clients.client_id\nWHERE Clients.PhoneNumber = '555-333-4444'"
          ]
        },
        {
          "interpretation": "By matching a client's phone number in the Clients table, do the same in the ClientProperties table to fetch the relevant property ID.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT cp.property_id\nFROM ClientProperties cp\nJOIN Clients c ON cp.client_id = c.client_id\nWHERE c.PhoneNumber = '555-111-2222'"
          ]
        },
        {
          "interpretation": "Locate the property for the client with phone number 555-333-4444 by first finding the client's ID in the Clients table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Street_Address, City, Price, Property_Type \nFROM Properties \nWHERE property_id = (\n    SELECT property_id \n    FROM ClientProperties \n    WHERE client_id = (\n        SELECT client_id \n        FROM Clients \n        WHERE PhoneNumber = '555-333-4444'\n    )\n)"
          ]
        },
        {
          "interpretation": "Find the client's property where the phone number matches in the Clients table and return the property's location.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.City \nFROM Clients C \nJOIN Transactions T ON C.client_id = T.client_id \nJOIN Properties P ON T.property_id = P.property_id \nWHERE C.PhoneNumber = T.client_id"
          ]
        },
        {
          "interpretation": "Identify the client's property using their phone number by linking the Clients table to the ClientProperties and Properties tables.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Properties.Street_Address, Properties.City, Properties.Price, Properties.Property_Type, Properties.Square_Feet\nFROM Clients\nJOIN ClientProperties ON Clients.client_id = ClientProperties.client_id\nJOIN Properties ON ClientProperties.property_id = Properties.property_id\nWHERE Clients.PhoneNumber = '555-111-2222'"
          ]
        }
      ],
      "num_unique_execution_results": 11,
      "interpretation_level_metrics": {
        "recall": 0.6666666666666666,
        "precision": 0.18181818181818182,
        "one_found": true,
        "f1_score": 0.28571428571428575,
        "num_queries": 11,
        "num_unique_queries": 11,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_2tab_ref_leisure_features/attachment_2tab_ref_leisure_features.sqlite",
      "db_dump": "CREATE TABLE Amenities(\n    ID INTEGER PRIMARY KEY,\n    Description TEXT);\nCREATE TABLE City(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT UNIQUE);\nCREATE TABLE HotTub(\n    ID INTEGER PRIMARY KEY,\n    Capacity INTEGER ,\n    HeatingMethod TEXT,\n    FOREIGN KEY(ID) REFERENCES Hotel(ID));\nCREATE TABLE Hotel(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT,\n    PriceRange REAL ,\n    FOREIGN KEY(ID) REFERENCES City(ID));\nCREATE TABLE HotelAmenities(\n    HotelID INTEGER,\n    AmenityID INTEGER,\n    Available BOOLEAN DEFAULT FALSE,\n    FOREIGN KEY(HotelID) REFERENCES Hotel(ID),\n    FOREIGN KEY(AmenityID) REFERENCES Amenities(ID));\nCREATE TABLE SwimmingPool(\n    ID INTEGER PRIMARY KEY,\n    PoolType TEXT,\n    Size TEXT,\n    MaintenanceFrequency TEXT,\n    FOREIGN KEY(ID) REFERENCES Hotel(ID));\n\nINSERT INTO \"Amenities\" (ID,Description) VALUES (1,'Free WiFi'),(2,'Gym');\nINSERT INTO \"City\" (ID,Name) VALUES (1,'Miami'),(2,'Los Angeles');\nINSERT INTO \"HotTub\" (ID,Capacity,HeatingMethod) VALUES (1,5,'Electric'),(2,8,'Gas');\nINSERT INTO \"Hotel\" (ID,Name,Address,PhoneNumber,PriceRange) VALUES (1,'Palm Beach','200 Palm St.','+1234567890',150.0),(2,'Sunrise Inn','300 Sun Rise Ave.','+1345678901',100.0);\nINSERT INTO \"HotelAmenities\" (HotelID,AmenityID,Available) VALUES (1,1,1),(2,2,0);\nINSERT INTO \"SwimmingPool\" (ID,PoolType,Size,MaintenanceFrequency) VALUES (1,'Outdoor','Medium','Daily'),(2,'Indoor','Small','Weekly');\n",
      "question": "What size are the swimming pools in Miami and what size are the hot tubs there? Show them in one table.",
      "gold_queries": [
        "SELECT SwimmingPool.Size\r\nFROM City JOIN Hotel ON City.ID = Hotel.ID JOIN SwimmingPool ON Hotel.ID = SwimmingPool.ID\r\nWHERE City.Name = 'Miami'\r\nUNION\r\nSELECT HotTub.Capacity\r\nFROM City JOIN Hotel ON City.ID = Hotel.ID JOIN HotTub ON Hotel.ID = HotTub.ID\r\nWHERE City.Name = 'Miami'"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Which swimming pools sizes and hot tubs sizes occur in hotels from a city with name \"Miami\".",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT s.Size, h.Capacity\nFROM Hotel hotel\nJOIN SwimmingPool s ON hotel.ID = s.ID\nJOIN HotTub h ON hotel.ID = h.ID\nJOIN City c ON hotel.ID = c.ID\nWHERE c.Name = 'Miami'"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "one_found": true,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_2tab_ref_leisure_features/attachment_2tab_ref_leisure_features.sqlite",
      "db_dump": "CREATE TABLE Amenities(\n    ID INTEGER PRIMARY KEY,\n    Description TEXT);\nCREATE TABLE City(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT UNIQUE);\nCREATE TABLE HotTub(\n    ID INTEGER PRIMARY KEY,\n    Capacity INTEGER ,\n    HeatingMethod TEXT,\n    FOREIGN KEY(ID) REFERENCES Hotel(ID));\nCREATE TABLE Hotel(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT,\n    PriceRange REAL ,\n    FOREIGN KEY(ID) REFERENCES City(ID));\nCREATE TABLE HotelAmenities(\n    HotelID INTEGER,\n    AmenityID INTEGER,\n    Available BOOLEAN DEFAULT FALSE,\n    FOREIGN KEY(HotelID) REFERENCES Hotel(ID),\n    FOREIGN KEY(AmenityID) REFERENCES Amenities(ID));\nCREATE TABLE SwimmingPool(\n    ID INTEGER PRIMARY KEY,\n    PoolType TEXT,\n    Size TEXT,\n    MaintenanceFrequency TEXT,\n    FOREIGN KEY(ID) REFERENCES Hotel(ID));\n\nINSERT INTO \"Amenities\" (ID,Description) VALUES (1,'Free WiFi'),(2,'Gym');\nINSERT INTO \"City\" (ID,Name) VALUES (1,'Miami'),(2,'Los Angeles');\nINSERT INTO \"HotTub\" (ID,Capacity,HeatingMethod) VALUES (1,5,'Electric'),(2,8,'Gas');\nINSERT INTO \"Hotel\" (ID,Name,Address,PhoneNumber,PriceRange) VALUES (1,'Palm Beach','200 Palm St.','+1234567890',150.0),(2,'Sunrise Inn','300 Sun Rise Ave.','+1345678901',100.0);\nINSERT INTO \"HotelAmenities\" (HotelID,AmenityID,Available) VALUES (1,1,1),(2,2,0);\nINSERT INTO \"SwimmingPool\" (ID,PoolType,Size,MaintenanceFrequency) VALUES (1,'Outdoor','Medium','Daily'),(2,'Indoor','Small','Weekly');\n",
      "question": "Can you show me the sizes of all hot tubs in Miami along with the sizes of all swimming pools in any given location? Show them in one table.",
      "gold_queries": [
        "SELECT SwimmingPool.Size\r\nFROM City JOIN Hotel ON City.ID = Hotel.ID JOIN SwimmingPool ON Hotel.ID = SwimmingPool.ID\r\nUNION\r\nSELECT HotTub.Capacity\r\nFROM City JOIN Hotel ON City.ID = Hotel.ID JOIN HotTub ON Hotel.ID = HotTub.ID\r\nWHERE City.Name = 'Miami'"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List the sizes of all hot tubs in Miami, and list the sizes of all swimming pools in any location, without combining the results.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Size FROM SwimmingPool",
            "SELECT T2.Capacity FROM Hotel AS T1 JOIN HotTub AS T2 ON T1.ID = T2.ID JOIN City AS T3 ON T1.ID = T3.ID WHERE T3.Name = 'Miami'"
          ]
        },
        {
          "interpretation": "List the sizes of all hot tubs in Miami, and list the sizes of all swimming pools in any location, without combining the results.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Size FROM SwimmingPool",
            "SELECT T2.Capacity FROM Hotel AS T1 JOIN HotTub AS T2 ON T1.ID = T2.ID JOIN City AS T3 ON T1.ID = T3.ID WHERE T3.Name = 'Miami'"
          ]
        },
        {
          "interpretation": "Display sizes of hot tubs in Miami along with sizes of swimming pools in cities different than Miami.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT HotTub.Capacity AS HotTubSize \nFROM HotTub \nJOIN Hotel ON HotTub.ID = Hotel.ID \nJOIN City ON Hotel.ID = City.ID \nWHERE City.Name = 'Miami'\nUNION\nSELECT SwimmingPool.Size AS PoolSize \nFROM SwimmingPool \nJOIN Hotel ON SwimmingPool.ID = Hotel.ID \nJOIN City ON Hotel.ID = City.ID \nWHERE City.Name != 'Miami'"
          ]
        },
        {
          "interpretation": "Include the sizes of both hot tubs and swimming pools in the search, obtaining the sizes of hot tubs in Miami and the sizes of swimming pools in any location.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT CASE WHEN T1.HeatingMethod IS NOT NULL THEN T1.Capacity ELSE T3.Size END AS Size\nFROM HotTub T1\nJOIN Hotel T2 ON T1.ID = T2.ID\nJOIN City T4 ON T2.ID = T4.ID\nLEFT JOIN SwimmingPool T3 ON T2.ID = T3.ID\nWHERE T4.Name = 'Miami' OR T3.Size IS NOT NULL"
          ]
        },
        {
          "interpretation": "List all hot tub sizes and swimming pool sizes in separate columns of a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT HotTub.Capacity AS HotTubSize, SwimmingPool.Size AS PoolSize FROM HotTub JOIN SwimmingPool ON HotTub.ID = SwimmingPool.ID"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 7,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_2tab_ref_leisure_features/attachment_2tab_ref_leisure_features.sqlite",
      "db_dump": "CREATE TABLE Amenities(\n    ID INTEGER PRIMARY KEY,\n    Description TEXT);\nCREATE TABLE City(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT UNIQUE);\nCREATE TABLE HotTub(\n    ID INTEGER PRIMARY KEY,\n    Capacity INTEGER ,\n    HeatingMethod TEXT,\n    FOREIGN KEY(ID) REFERENCES Hotel(ID));\nCREATE TABLE Hotel(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT,\n    PriceRange REAL ,\n    FOREIGN KEY(ID) REFERENCES City(ID));\nCREATE TABLE HotelAmenities(\n    HotelID INTEGER,\n    AmenityID INTEGER,\n    Available BOOLEAN DEFAULT FALSE,\n    FOREIGN KEY(HotelID) REFERENCES Hotel(ID),\n    FOREIGN KEY(AmenityID) REFERENCES Amenities(ID));\nCREATE TABLE SwimmingPool(\n    ID INTEGER PRIMARY KEY,\n    PoolType TEXT,\n    Size TEXT,\n    MaintenanceFrequency TEXT,\n    FOREIGN KEY(ID) REFERENCES Hotel(ID));\n\nINSERT INTO \"Amenities\" (ID,Description) VALUES (1,'Free WiFi'),(2,'Gym');\nINSERT INTO \"City\" (ID,Name) VALUES (1,'Miami'),(2,'Los Angeles');\nINSERT INTO \"HotTub\" (ID,Capacity,HeatingMethod) VALUES (1,5,'Electric'),(2,8,'Gas');\nINSERT INTO \"Hotel\" (ID,Name,Address,PhoneNumber,PriceRange) VALUES (1,'Palm Beach','200 Palm St.','+1234567890',150.0),(2,'Sunrise Inn','300 Sun Rise Ave.','+1345678901',100.0);\nINSERT INTO \"HotelAmenities\" (HotelID,AmenityID,Available) VALUES (1,1,1),(2,2,0);\nINSERT INTO \"SwimmingPool\" (ID,PoolType,Size,MaintenanceFrequency) VALUES (1,'Outdoor','Medium','Daily'),(2,'Indoor','Small','Weekly');\n",
      "question": "What size are all swimming pools and hot tubs in Miami? Show them in one table.",
      "gold_queries": [
        "SELECT SwimmingPool.Size\r\nFROM City JOIN Hotel ON City.ID = Hotel.ID JOIN SwimmingPool ON Hotel.ID = SwimmingPool.ID\r\nWHERE City.Name = 'Miami'\r\nUNION\r\nSELECT HotTub.Capacity\r\nFROM City JOIN Hotel ON City.ID = Hotel.ID JOIN HotTub ON Hotel.ID = HotTub.ID\r\nWHERE City.Name = 'Miami'",
        "SELECT SwimmingPool.Size\r\nFROM City JOIN Hotel ON City.ID = Hotel.ID JOIN SwimmingPool ON Hotel.ID = SwimmingPool.ID\r\nUNION\r\nSELECT HotTub.Capacity\r\nFROM City JOIN Hotel ON City.ID = Hotel.ID JOIN HotTub ON Hotel.ID = HotTub.ID\r\nWHERE City.Name = 'Miami'"
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "What are the sizes of swimming pools and hot tubs that exist within the geographical boundaries of Miami?",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.Size, H.Capacity \nFROM SwimmingPool S \nJOIN Hotel HT ON S.ID = HT.ID \nJOIN City C ON HT.ID = C.ID \nLEFT JOIN HotTub H ON HT.ID = H.ID \nWHERE C.Name = 'Miami'"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 1.0,
        "one_found": true,
        "f1_score": 0.6666666666666666,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Filmmaking/attachment_1tab_ref_genre3/attachment_1tab_ref_genre3.sqlite",
      "db_dump": "CREATE TABLE Directors(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    birth_year INTEGER,\n    nationality TEXT\n);\nCREATE TABLE Film_Director(\n    film_id INTEGER,\n    director_id INTEGER,\n    FOREIGN KEY(film_id) REFERENCES Films(id),\n    FOREIGN KEY(director_id) REFERENCES Directors(id),\n    PRIMARY KEY(film_id, director_id)\n);\nCREATE TABLE Film_Genre(\n    film_id INTEGER,\n    genre_id INTEGER,\n    FOREIGN KEY(film_id) REFERENCES Films(id),\n    FOREIGN KEY(genre_id) REFERENCES Genres(id),\n    PRIMARY KEY(film_id, genre_id)\n);\nCREATE TABLE Films(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    release_date DATE,\n    director TEXT,\n    budget REAL\n);\nCREATE TABLE Genres(\n    id INTEGER PRIMARY KEY,\n    genre TEXT\n);\n\nINSERT INTO \"Directors\" (id,name,birth_year,nationality) VALUES (1,'Stanley Kubrick',1928,'American'),(2,'David Robert Mitchell',1974,'American'),(3,'Christopher Nolan',1970,'English'),(4,'David Fincher',1962,'American');\nINSERT INTO \"Film_Director\" (film_id,director_id) VALUES (1,1),(2,2),(3,3),(4,4);\nINSERT INTO \"Film_Genre\" (film_id,genre_id) VALUES (1,1),(2,1),(3,2),(4,2);\nINSERT INTO \"Films\" (id,title,release_date,director,budget) VALUES (1,'The Shining','1980-06-22','Stanley Kubrick',20000000.0),(2,'It Follows','2014-03-14','David Robert Mitchell',5000000.0),(3,'Inception','2010-07-16','Christopher Nolan',20000000.0),(4,'Gone Girl','2014-10-03','David Fincher',65000000.0);\nINSERT INTO \"Genres\" (id,genre) VALUES (1,'Horror'),(2,'Thriller');\n",
      "question": "What horror films had a budget of 20 million and what thriller films had the same budget? Show them in one table.",
      "gold_queries": [
        "SELECT Films.title \r\nFROM Genres JOIN Film_Genre ON Genres.id = Film_Genre.genre_id JOIN Films ON Film_Genre.film_id = Films.id\r\nWHERE (Genres.genre = \"Horror\" OR Genres.genre = \"Thriller\") AND Films.budget = 20000000.0"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "What horror films have a budget either 20 million or less, or precisely 20 million, and what thriller films have a budget just like these, showing all matching budget values in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.title, T1.budget \nFROM Films AS T1 \nJOIN Film_Genre AS T2 ON T1.id = T2.film_id \nJOIN Genres AS T3 ON T2.genre_id = T3.id \nWHERE (T3.genre = 'Horror' OR T3.genre = 'Thriller') \n  AND T1.budget <= 20000000.0"
          ]
        },
        {
          "interpretation": "What horror films cost 20 million and what thriller films share that exact budget cost, showing just the films with a budget of exactly 20 million in one table.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT f.title\nFROM Films f\nJOIN Film_Genre fg ON f.id = fg.film_id\nJOIN Genres g ON fg.genre_id = g.id\nWHERE (g.genre = 'Horror' OR g.genre = 'Thriller') AND f.budget = 20000000.0"
          ]
        },
        {
          "interpretation": "What horror films have a budget of 20 million and what thriller films have a budget of 20 million, showing all matching films in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT F.title, F.release_date, F.director, F.budget\nFROM Films F\nJOIN Film_Genre FG ON F.id = FG.film_id\nJOIN Genres G ON FG.genre_id = G.id\nWHERE (G.genre = 'Horror' OR G.genre = 'Thriller') AND F.budget = 20000000.0"
          ]
        },
        {
          "interpretation": "What horror films cost 20 million or less and what thriller films have one of those budget values (including budget of exactly 20 million), showing all films with a budget of 20 million or less in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Films.title, Films.budget, Genres.genre\nFROM Films\nJOIN Film_Genre ON Films.id = Film_Genre.film_id\nJOIN Genres ON Film_Genre.genre_id = Genres.id\nWHERE (Genres.genre = 'Horror' AND Films.budget <= 20000000)\n   OR (Genres.genre = 'Thriller' AND Films.budget IN (SELECT budget FROM Films WHERE budget <= 20000000))"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "one_found": true,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Filmmaking/attachment_1tab_ref_genre3/attachment_1tab_ref_genre3.sqlite",
      "db_dump": "CREATE TABLE Directors(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    birth_year INTEGER,\n    nationality TEXT\n);\nCREATE TABLE Film_Director(\n    film_id INTEGER,\n    director_id INTEGER,\n    FOREIGN KEY(film_id) REFERENCES Films(id),\n    FOREIGN KEY(director_id) REFERENCES Directors(id),\n    PRIMARY KEY(film_id, director_id)\n);\nCREATE TABLE Film_Genre(\n    film_id INTEGER,\n    genre_id INTEGER,\n    FOREIGN KEY(film_id) REFERENCES Films(id),\n    FOREIGN KEY(genre_id) REFERENCES Genres(id),\n    PRIMARY KEY(film_id, genre_id)\n);\nCREATE TABLE Films(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    release_date DATE,\n    director TEXT,\n    budget REAL\n);\nCREATE TABLE Genres(\n    id INTEGER PRIMARY KEY,\n    genre TEXT\n);\n\nINSERT INTO \"Directors\" (id,name,birth_year,nationality) VALUES (1,'Stanley Kubrick',1928,'American'),(2,'David Robert Mitchell',1974,'American'),(3,'Christopher Nolan',1970,'English'),(4,'David Fincher',1962,'American');\nINSERT INTO \"Film_Director\" (film_id,director_id) VALUES (1,1),(2,2),(3,3),(4,4);\nINSERT INTO \"Film_Genre\" (film_id,genre_id) VALUES (1,1),(2,1),(3,2),(4,2);\nINSERT INTO \"Films\" (id,title,release_date,director,budget) VALUES (1,'The Shining','1980-06-22','Stanley Kubrick',20000000.0),(2,'It Follows','2014-03-14','David Robert Mitchell',5000000.0),(3,'Inception','2010-07-16','Christopher Nolan',20000000.0),(4,'Gone Girl','2014-10-03','David Fincher',65000000.0);\nINSERT INTO \"Genres\" (id,genre) VALUES (1,'Horror'),(2,'Thriller');\n",
      "question": "Show horror films and thriller films with a budget of 20 million. Show them in one table.",
      "gold_queries": [
        "SELECT Films.title \r\nFROM Genres JOIN Film_Genre ON Genres.id = Film_Genre.genre_id JOIN Films ON Film_Genre.film_id = Films.id\r\nWHERE (Genres.genre = \"Horror\" OR Genres.genre = \"Thriller\") AND Films.budget = 20000000.0",
        "SELECT Films.title \r\nFROM Genres JOIN Film_Genre ON Genres.id = Film_Genre.genre_id JOIN Films ON Film_Genre.film_id = Films.id\r\nWHERE Genres.genre = \"Horror\" OR Genres.genre = \"Thriller\" AND Films.budget = 20000000.0"
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Select horror and thriller films that were made with a total budget of at least 20 million across the two genres.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT g.genre\nFROM Genres g\nJOIN Film_Genre fg ON g.id = fg.genre_id\nJOIN Films f ON fg.film_id = f.id\nWHERE g.genre IN ('Horror', 'Thriller')\nGROUP BY g.genre\nHAVING SUM(f.budget) >= 20000000"
          ]
        },
        {
          "interpretation": "Find films from the 'Horror' or 'Thriller' genres with varying budgets up to 20 million, limiting the answer to those with unique genre combinations.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT f.title \nFROM Films f \nJOIN Film_Genre fg ON f.id = fg.film_id \nJOIN Genres g ON fg.genre_id = g.id \nWHERE g.genre IN ('Horror', 'Thriller') \nAND f.budget <= 20000000 \nGROUP BY f.title, g.genre \nHAVING COUNT(DISTINCT g.genre) > 1"
          ]
        },
        {
          "interpretation": "Combine films from 'Horror' and 'Thriller' that match the total budget of 20 million or below and optimize them with the genre and IDs.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT F.id, F.title, G.genre\nFROM Films F\nJOIN Film_Genre FG ON F.id = FG.film_id\nJOIN Genres G ON FG.genre_id = G.id\nWHERE G.genre IN ('Horror', 'Thriller') AND F.budget <= 20000000"
          ]
        },
        {
          "interpretation": "Select horror and thriller films and calculate the budget range that would enable a 20 million budget for these two genres.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT MIN(budget) AS min_budget, MAX(budget) AS max_budget\nFROM Films\nJOIN Film_Genre ON Films.id = Film_Genre.film_id\nJOIN Genres ON Film_Genre.genre_id = Genres.id\nWHERE Genres.genre IN ('Horror', 'Thriller') AND Films.budget > 20000000.0"
          ]
        },
        {
          "interpretation": "Show genre and budget details of horror and thriller films together for all 20 million maximum budget film pairs.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT G.genre, F.budget\nFROM Films F\nJOIN Film_Genre FG ON F.id = FG.film_id\nJOIN Genres G ON FG.genre_id = G.id\nWHERE G.genre IN ('Horror', 'Thriller') AND F.budget <= 20000000.0"
          ]
        },
        {
          "interpretation": "Query all horror films with genre IDs that identify a budget variance from a corresponding 20 million 'Thriller' film.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT f.title, f.budget, fg.genre_id \nFROM Films f \nJOIN Film_Genre fg ON f.id = fg.film_id \nWHERE fg.genre_id = 1 \nAND f.budget != (SELECT AVG(budget) FROM Films f2 JOIN Film_Genre fg2 ON f2.id = fg2.film_id WHERE fg2.genre_id = 2)"
          ]
        },
        {
          "interpretation": "Show 'Horror' and 'Thriller' films, but filter out any which have the exact budget of 20 million.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Films.title \nFROM Films \nJOIN Film_Genre ON Films.id = Film_Genre.film_id \nJOIN Genres ON Film_Genre.genre_id = Genres.id \nWHERE Genres.genre IN ('Horror', 'Thriller') \nAND Films.budget != 20000000.0"
          ]
        },
        {
          "interpretation": "Select horror and thriller films where the sum of their budgets equals 20 million.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT f.title\nFROM Films f\nJOIN Film_Genre fg ON f.id = fg.film_id\nJOIN Genres g ON fg.genre_id = g.id\nWHERE g.genre IN ('Horror', 'Thriller')\nGROUP BY f.id, f.title, f.budget\nHAVING SUM(f.budget) = 20000000.0"
          ]
        },
        {
          "interpretation": "List the horror and thriller films including the budget variation between them, such as above or below 20 million.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    f.title, \n    g.genre, \n    f.budget, \n    CASE \n        WHEN f.budget > 20000000.0 THEN 'Above 20 million' \n        ELSE 'Below or equal to 20 million' \n    END AS budget_variation\nFROM \n    Films f\nJOIN \n    Film_Genre fg ON f.id = fg.film_id\nJOIN \n    Genres g ON fg.genre_id = g.id\nWHERE \n    g.genre IN ('Horror', 'Thriller')"
          ]
        },
        {
          "interpretation": "Finally, combine films with the genre 'Horror' or 'Thriller' where the priority is that their individual budget includes that of a 20 million film.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT F.title, F.release_date, F.director, F.budget, G.genre\nFROM Films F\nJOIN Film_Genre FG ON F.id = FG.film_id\nJOIN Genres G ON FG.genre_id = G.id\nWHERE G.genre IN ('Horror', 'Thriller')\nAND F.budget >= 20000000.0"
          ]
        },
        {
          "interpretation": "Display films with 'Horror' and 'Thriller' as their primary or secondary genres, ranked by their individual budget being less or more than 20 million.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT f.title \nFROM Films f \nJOIN Film_Genre fg ON f.id = fg.film_id \nJOIN Genres g ON fg.genre_id = g.id \nWHERE g.genre IN ('Horror', 'Thriller') \nORDER BY f.budget > 20000000.0"
          ]
        }
      ],
      "num_unique_execution_results": 11,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.09090909090909091,
        "one_found": true,
        "f1_score": 0.15384615384615385,
        "num_queries": 11,
        "num_unique_queries": 11,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Filmmaking/attachment_1tab_ref_genre3/attachment_1tab_ref_genre3.sqlite",
      "db_dump": "CREATE TABLE Directors(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    birth_year INTEGER,\n    nationality TEXT\n);\nCREATE TABLE Film_Director(\n    film_id INTEGER,\n    director_id INTEGER,\n    FOREIGN KEY(film_id) REFERENCES Films(id),\n    FOREIGN KEY(director_id) REFERENCES Directors(id),\n    PRIMARY KEY(film_id, director_id)\n);\nCREATE TABLE Film_Genre(\n    film_id INTEGER,\n    genre_id INTEGER,\n    FOREIGN KEY(film_id) REFERENCES Films(id),\n    FOREIGN KEY(genre_id) REFERENCES Genres(id),\n    PRIMARY KEY(film_id, genre_id)\n);\nCREATE TABLE Films(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    release_date DATE,\n    director TEXT,\n    budget REAL\n);\nCREATE TABLE Genres(\n    id INTEGER PRIMARY KEY,\n    genre TEXT\n);\n\nINSERT INTO \"Directors\" (id,name,birth_year,nationality) VALUES (1,'Stanley Kubrick',1928,'American'),(2,'David Robert Mitchell',1974,'American'),(3,'Christopher Nolan',1970,'English'),(4,'David Fincher',1962,'American');\nINSERT INTO \"Film_Director\" (film_id,director_id) VALUES (1,1),(2,2),(3,3),(4,4);\nINSERT INTO \"Film_Genre\" (film_id,genre_id) VALUES (1,1),(2,1),(3,2),(4,2);\nINSERT INTO \"Films\" (id,title,release_date,director,budget) VALUES (1,'The Shining','1980-06-22','Stanley Kubrick',20000000.0),(2,'It Follows','2014-03-14','David Robert Mitchell',5000000.0),(3,'Inception','2010-07-16','Christopher Nolan',20000000.0),(4,'Gone Girl','2014-10-03','David Fincher',65000000.0);\nINSERT INTO \"Genres\" (id,genre) VALUES (1,'Horror'),(2,'Thriller');\n",
      "question": "Provide a list of all horror films and also list thriller films with a budget of 20 million. Show them in one table.",
      "gold_queries": [
        "SELECT Films.title \r\nFROM Genres JOIN Film_Genre ON Genres.id = Film_Genre.genre_id JOIN Films ON Film_Genre.film_id = Films.id\r\nWHERE Genres.genre = \"Horror\" OR Genres.genre = \"Thriller\" AND Films.budget = 20000000.0"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Display a list of horror films and thriller films that match the above conditions, including the film budget, regardless of whether it's 20 million.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.title, T1.budget\nFROM Films AS T1\nJOIN Film_Genre AS T2 ON T1.id = T2.film_id\nJOIN Genres AS T3 ON T2.genre_id = T3.id\nWHERE T3.genre IN ('Horror', 'Thriller')"
          ]
        },
        {
          "interpretation": "Get all horror and thriller films and display these films featuring the film name, release date, director, and budget.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT F.title, F.release_date, F.director, F.budget \nFROM Films F \nJOIN Film_Genre FG ON F.id = FG.film_id \nJOIN Genres G ON FG.genre_id = G.id \nWHERE G.genre IN ('Horror', 'Thriller')"
          ]
        },
        {
          "interpretation": "List all films from the table that are either horror films or thriller films with a budget of 20 million.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT f.title\nFROM Films f\nJOIN Film_Genre fg ON f.id = fg.film_id\nJOIN Genres g ON fg.genre_id = g.id\nWHERE (g.genre = 'Horror' OR g.genre = 'Thriller') AND f.budget = 20000000.0"
          ]
        },
        {
          "interpretation": "Provide the titles, release dates, and budgets of all horror and thriller films that have a budget equal to or less than 20 million.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.title, T1.release_date, T1.budget \nFROM Films AS T1 \nJOIN Film_Genre AS T2 ON T1.id = T2.film_id \nJOIN Genres AS T3 ON T2.genre_id = T3.id \nWHERE (T3.genre = 'Horror' OR T3.genre = 'Thriller') AND T1.budget <= 20000000"
          ]
        },
        {
          "interpretation": "Show the budgets, release dates, and titles of thriller films and horror films with budgets equal to 20 million.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT F.budget, F.release_date, F.title \nFROM Films F \nJOIN Film_Genre FG ON F.id = FG.film_id \nJOIN Genres G ON FG.genre_id = G.id \nWHERE G.genre IN ('Thriller', 'Horror') \nAND F.budget = 20000000.0"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Filmmaking/attachment_1tab_ref_soundtrack/attachment_1tab_ref_soundtrack.sqlite",
      "db_dump": "CREATE TABLE \"Composer\"( `id` INTEGER PRIMARY KEY ,\n    creator TEXT,\n    birth_year INTEGER,\n    death_year INTEGER\n);\nCREATE TABLE Director(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT\n);\nCREATE TABLE Film(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE,\n    director_id INTEGER,\n    FOREIGN KEY (director_id) REFERENCES Director(id)\n);\nCREATE TABLE \"Movie_Elements\"(\n    element_type TEXT ,\n    movie_title TEXT,\n    \"composer_id\" INTEGER,\n    duration INTEGER,\n    FOREIGN KEY (\"composer_id\") REFERENCES Composer(id)\n);\n\nINSERT INTO \"Composer\" (id,creator,birth_year,death_year) VALUES (1,'John Williams',1932,NULL),(2,'Hans Zimmer',1957,NULL),(3,'Danny Elfman',1953,NULL),(4,'Howard Shore',1946,NULL),(5,'Thomas Newman',1955,NULL),(6,'Zack Hemsey',1983,NULL),(7,'Javier Navarrete',1956,NULL);\nINSERT INTO \"Director\" (id,name) VALUES (1,'Christopher Nolan'),(2,'Quentin Tarantino'),(3,'Steven Spielberg'),(4,'Guillermo del Toro'),(5,'Martin Scorsese'),(6,'Ava DuVernay');\nINSERT INTO \"Film\" (id,title,release_date,director_id) VALUES (1,'Inception','2010-07-16',1),(2,'Pulp Fiction','1994-10-14',2),(3,'Schindler\u2019s List','1993-12-15',3),(4,'Pan\u2019s Labyrinth','2006-03-17',4),(5,'The Departed','2006-08-04',5);\nINSERT INTO \"Movie_Elements\" (element_type,movie_title,composer_id,duration) VALUES ('Sound Design','Inception',6,140),('Sound Design','Inception',1,150),('Music Score','Schindler\u2019s List',1,150),('Music Score','Pan\u2019s Labyrinth',7,120),('Music Score','The Departed',4,130);\n",
      "question": "Provide films listed with sound design and also show films where John Williams composed the music score. Show them in one table.",
      "gold_queries": [
        "SELECT Movie_Elements.movie_title \r\nFROM Movie_Elements JOIN Composer ON Movie_Elements.composer_id = Composer.id\r\nWHERE Movie_Elements.element_type = \"Sound Design\" OR Movie_Elements.element_type = \"Music Score\" AND Composer.creator = \"John Williams\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List films that feature sound design and also show films where John Williams scored.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT movie_title \nFROM Movie_Elements \nWHERE element_type = 'Sound Design' \nUNION \nSELECT movie_title \nFROM Movie_Elements \nWHERE composer_id = (SELECT id FROM Composer WHERE creator = 'John Williams')"
          ]
        },
        {
          "interpretation": "Display films with sound design and list films where John Williams composed the music score.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT movie_title FROM Movie_Elements WHERE element_type = 'Sound Design'",
            "SELECT movie_title FROM Movie_Elements WHERE composer_id = 1 AND element_type = 'Music Score'"
          ]
        },
        {
          "interpretation": "Display films with sound design and list films where John Williams composed the music score.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT movie_title FROM Movie_Elements WHERE element_type = 'Sound Design'",
            "SELECT movie_title FROM Movie_Elements WHERE composer_id = 1 AND element_type = 'Music Score'"
          ]
        },
        {
          "interpretation": "List films for sound design and display films where John Williams is the composer.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT movie_title FROM Movie_Elements WHERE element_type = 'Sound Design' AND composer_id = (SELECT id FROM Composer WHERE creator = 'John Williams')"
          ]
        },
        {
          "interpretation": "Provide films listed for sound design, also showing films where John Williams composed the music.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT T1.title FROM Film AS T1 JOIN Movie_Elements AS T2 ON T1.title = T2.movie_title WHERE T2.element_type = 'Sound Design' OR T2.composer_id = (SELECT id FROM Composer WHERE creator = 'John Williams')"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "one_found": true,
        "f1_score": 0.33333333333333337,
        "num_queries": 7,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Filmmaking/attachment_1tab_ref_soundtrack/attachment_1tab_ref_soundtrack.sqlite",
      "db_dump": "CREATE TABLE \"Composer\"( `id` INTEGER PRIMARY KEY ,\n    creator TEXT,\n    birth_year INTEGER,\n    death_year INTEGER\n);\nCREATE TABLE Director(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT\n);\nCREATE TABLE Film(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE,\n    director_id INTEGER,\n    FOREIGN KEY (director_id) REFERENCES Director(id)\n);\nCREATE TABLE \"Movie_Elements\"(\n    element_type TEXT ,\n    movie_title TEXT,\n    \"composer_id\" INTEGER,\n    duration INTEGER,\n    FOREIGN KEY (\"composer_id\") REFERENCES Composer(id)\n);\n\nINSERT INTO \"Composer\" (id,creator,birth_year,death_year) VALUES (1,'John Williams',1932,NULL),(2,'Hans Zimmer',1957,NULL),(3,'Danny Elfman',1953,NULL),(4,'Howard Shore',1946,NULL),(5,'Thomas Newman',1955,NULL),(6,'Zack Hemsey',1983,NULL),(7,'Javier Navarrete',1956,NULL);\nINSERT INTO \"Director\" (id,name) VALUES (1,'Christopher Nolan'),(2,'Quentin Tarantino'),(3,'Steven Spielberg'),(4,'Guillermo del Toro'),(5,'Martin Scorsese'),(6,'Ava DuVernay');\nINSERT INTO \"Film\" (id,title,release_date,director_id) VALUES (1,'Inception','2010-07-16',1),(2,'Pulp Fiction','1994-10-14',2),(3,'Schindler\u2019s List','1993-12-15',3),(4,'Pan\u2019s Labyrinth','2006-03-17',4),(5,'The Departed','2006-08-04',5);\nINSERT INTO \"Movie_Elements\" (element_type,movie_title,composer_id,duration) VALUES ('Sound Design','Inception',6,140),('Sound Design','Inception',1,150),('Music Score','Schindler\u2019s List',1,150),('Music Score','Pan\u2019s Labyrinth',7,120),('Music Score','The Departed',4,130);\n",
      "question": "Which films are listed with sound design and music score composed by John Williams? Show them in one table.",
      "gold_queries": [
        "SELECT Movie_Elements.movie_title \r\nFROM Movie_Elements JOIN Composer ON Movie_Elements.composer_id = Composer.id\r\nWHERE (Movie_Elements.element_type = \"Sound Design\" OR Movie_Elements.element_type = \"Music Score\") AND Composer.creator = \"John Williams\"",
        "SELECT Movie_Elements.movie_title \r\nFROM Movie_Elements JOIN Composer ON Movie_Elements.composer_id = Composer.id\r\nWHERE Movie_Elements.element_type = \"Sound Design\" OR Movie_Elements.element_type = \"Music Score\" AND Composer.creator = \"John Williams\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List films where sound design and music score were both composed by John Williams in a single table with a distinct label for 'Sound Design' and 'Music Score' composers.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT movie_title, 'Sound Design' AS element_type, T2.creator AS composer \nFROM Movie_Elements AS T1 \nJOIN Composer AS T2 ON T1.composer_id = T2.id \nWHERE element_type = 'Sound Design' AND T2.creator = 'John Williams'\nUNION\nSELECT DISTINCT movie_title, 'Music Score' AS element_type, T2.creator AS composer \nFROM Movie_Elements AS T1 \nJOIN Composer AS T2 ON T1.composer_id = T2.id \nWHERE element_type = 'Music Score' AND T2.creator = 'John Williams'"
          ]
        },
        {
          "interpretation": "Combine all films with John Williams as a composer and list them in a single table.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT movie_title FROM Movie_Elements WHERE composer_id = (SELECT id FROM Composer WHERE creator = 'John Williams')"
          ]
        },
        {
          "interpretation": "Show all films with sound design which was not composed by John Williams, and also list the films with music score composed by John Williams, in a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ME.movie_title, ME.element_type\nFROM Movie_Elements ME\nLEFT JOIN Composer C ON ME.composer_id = C.id\nWHERE (ME.element_type = 'Sound Design' AND C.creator != 'John Williams')\nOR (ME.element_type = 'Music Score' AND C.creator = 'John Williams')"
          ]
        },
        {
          "interpretation": "List all films with sound design and meclude those with music score not composed by John Williams in a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT movie_title FROM Movie_Elements WHERE element_type = 'Sound Design' OR (element_type = 'Music Score' AND composer_id != 1)"
          ]
        },
        {
          "interpretation": "Identify the films where John Williams is credited as the sound design and music score, ignoring any other potential composers, and list them in a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.title\nFROM Film AS T1\nJOIN Movie_Elements AS T2 ON T1.title = T2.movie_title\nJOIN Composer AS T3 ON T2.composer_id = T3.id\nWHERE T3.creator = 'John Williams' AND T2.element_type IN ('Sound Design', 'Music Score')\nGROUP BY T1.title\nHAVING COUNT(DISTINCT T2.element_type) = 2"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.2,
        "one_found": true,
        "f1_score": 0.28571428571428575,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Filmmaking/attachment_1tab_ref_soundtrack/attachment_1tab_ref_soundtrack.sqlite",
      "db_dump": "CREATE TABLE \"Composer\"( `id` INTEGER PRIMARY KEY ,\n    creator TEXT,\n    birth_year INTEGER,\n    death_year INTEGER\n);\nCREATE TABLE Director(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT\n);\nCREATE TABLE Film(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE,\n    director_id INTEGER,\n    FOREIGN KEY (director_id) REFERENCES Director(id)\n);\nCREATE TABLE \"Movie_Elements\"(\n    element_type TEXT ,\n    movie_title TEXT,\n    \"composer_id\" INTEGER,\n    duration INTEGER,\n    FOREIGN KEY (\"composer_id\") REFERENCES Composer(id)\n);\n\nINSERT INTO \"Composer\" (id,creator,birth_year,death_year) VALUES (1,'John Williams',1932,NULL),(2,'Hans Zimmer',1957,NULL),(3,'Danny Elfman',1953,NULL),(4,'Howard Shore',1946,NULL),(5,'Thomas Newman',1955,NULL),(6,'Zack Hemsey',1983,NULL),(7,'Javier Navarrete',1956,NULL);\nINSERT INTO \"Director\" (id,name) VALUES (1,'Christopher Nolan'),(2,'Quentin Tarantino'),(3,'Steven Spielberg'),(4,'Guillermo del Toro'),(5,'Martin Scorsese'),(6,'Ava DuVernay');\nINSERT INTO \"Film\" (id,title,release_date,director_id) VALUES (1,'Inception','2010-07-16',1),(2,'Pulp Fiction','1994-10-14',2),(3,'Schindler\u2019s List','1993-12-15',3),(4,'Pan\u2019s Labyrinth','2006-03-17',4),(5,'The Departed','2006-08-04',5);\nINSERT INTO \"Movie_Elements\" (element_type,movie_title,composer_id,duration) VALUES ('Sound Design','Inception',6,140),('Sound Design','Inception',1,150),('Music Score','Schindler\u2019s List',1,150),('Music Score','Pan\u2019s Labyrinth',7,120),('Music Score','The Departed',4,130);\n",
      "question": "Display the films where John Williams composed the sound design or music score. Show them in one table.",
      "gold_queries": [
        "SELECT Movie_Elements.movie_title \r\nFROM Movie_Elements JOIN Composer ON Movie_Elements.composer_id = Composer.id\r\nWHERE (Movie_Elements.element_type = \"Sound Design\" OR Movie_Elements.element_type = \"Music Score\") AND Composer.creator = \"John Williams\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Fetch all films where John Williams worked with music or sound in any capacity.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT DISTINCT movie_title FROM Movie_Elements WHERE composer_id = (SELECT id FROM Composer WHERE creator = 'John Williams')"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "one_found": true,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_1tab_ref_accommodation2/attachment_1tab_ref_accommodation2.sqlite",
      "db_dump": "CREATE TABLE Accomodations(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    type TEXT \n);\nCREATE TABLE Guests(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    emailAddress TEXT UNIQUE\n);\nCREATE TABLE Prices(\n    accommodationId INTEGER,\n    price_per_night REAL,\n    FOREIGN KEY(accommodationId) REFERENCES Accomodations(id)\n);\nCREATE TABLE Reservations(\n    reservationId INTEGER PRIMARY KEY AUTOINCREMENT,\n    guestId INTEGER,\n    accommodationId INTEGER,\n    checkInDate DATE,\n    checkOutDate DATE,\n    totalCost REAL,\n    FOREIGN KEY(guestId) REFERENCES Guests(id),\n    FOREIGN KEY(accommodationId) REFERENCES Accomodations(id)\n);\n\nINSERT INTO \"Accomodations\" (id,name,type) VALUES (1,'Mountain Chalet','Chalet'),(2,'Lakeside Cabin','Cabin'),(3,'River View Lodge','Chalet'),(4,'Forest Hut','Cabin'),(5,'Beach Bungalow','Chalet');\nINSERT INTO \"Guests\" (id,firstName,lastName,emailAddress) VALUES (1,'John','Doe','john.doe@example.com'),(2,'Jane','Smith','jane.smith@example.com'),(3,'Michael','Brown','michael.brown@example.com'),(4,'Emily','White','emily.white@example.com'),(5,'David','Black','david.black@example.com');\nINSERT INTO \"Prices\" (accommodationId,price_per_night) VALUES (1,200.0),(1,300.0),(2,200.0),(2,300.0),(3,200.0);\nINSERT INTO \"Reservations\" (reservationId,guestId,accommodationId,checkInDate,checkOutDate,totalCost) VALUES (1,1,1,'2022-10-01','2022-10-07',1200.0),(2,2,1,'2022-10-14','2022-10-21',1800.0),(3,3,2,'2022-10-01','2022-10-07',1600.0),(4,4,2,'2022-10-14','2022-10-21',2000.0),(5,5,3,'2022-10-01','2022-10-07',900.0);\n",
      "question": "Which chalets are 300.0 per night and which cabins are the same price per night? Show them in one table.",
      "gold_queries": [
        "SELECT Accomodations.name \r\nFROM Accomodations JOIN Prices ON Accomodations.id = Prices.accommodationId\r\nWHERE Accomodations.type = \"Chalet\" AND Prices.price_per_night = 300.0\nUNION\nSELECT Accomodations.name \r\nFROM Accomodations JOIN Prices ON Accomodations.id = Prices.accommodationId\r\nWHERE Accomodations.type = \"Cabin\" AND Prices.price_per_night = 300.0"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Display prices from the Prices table that are $300.0, cross reference these prices with the Accomodations table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Accomodations.name, Accomodations.type, Prices.price_per_night\nFROM Accomodations\nJOIN Prices ON Accomodations.id = Prices.accommodationId\nWHERE Prices.price_per_night = 300.0"
          ]
        },
        {
          "interpretation": "Query the Accomodations table with join for the table with supportive Prices for the price 300.0 where Accomodations type matches each type of Chalet or Cabin and includes this value as an actual reservation.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.name, A.type, P.price_per_night\nFROM Accomodations A\nJOIN Prices P ON A.id = P.accommodationId\nJOIN Reservations R ON A.id = R.accommodationId\nWHERE P.price_per_night = 300.0 AND (A.type = 'Chalet' OR A.type = 'Cabin')"
          ]
        },
        {
          "interpretation": "Retrieve any table that signifies the gathered results of it and then identify values that explicitly aren't matches then discourse them in  the correctly formatted output table",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT firstName, lastName, emailAddress \nFROM Guests \nWHERE id NOT IN (SELECT guestId FROM Reservations)"
          ]
        },
        {
          "interpretation": "Join Accomodations table with Prices table on accommodationId, and then apply filter for price_per_night=300.0 on Chalet type, then join Accomodations table again with Prices table on accommodationId but filter for price_per_night=300.0 on Cabin type.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT a2.name, p2.price_per_night\nFROM Accomodations a2\nJOIN Prices p2 ON a2.id = p2.accommodationId\nWHERE a2.type = 'Cabin' AND p2.price_per_night = 300.0",
            "SELECT a1.name, p1.price_per_night\nFROM Accomodations a1\nJOIN Prices p1 ON a1.id = p1.accommodationId\nWHERE a1.type = 'Chalet' AND p1.price_per_night = 300.0"
          ]
        },
        {
          "interpretation": "Join Accomodations table with Prices table on accommodationId, and then apply filter for price_per_night=300.0 on Chalet type, then join Accomodations table again with Prices table on accommodationId but filter for price_per_night=300.0 on Cabin type.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT a2.name, p2.price_per_night\nFROM Accomodations a2\nJOIN Prices p2 ON a2.id = p2.accommodationId\nWHERE a2.type = 'Cabin' AND p2.price_per_night = 300.0",
            "SELECT a1.name, p1.price_per_night\nFROM Accomodations a1\nJOIN Prices p1 ON a1.id = p1.accommodationId\nWHERE a1.type = 'Chalet' AND p1.price_per_night = 300.0"
          ]
        },
        {
          "interpretation": "Select Accomodations with price_per_night=300.0 where type is Chalet, then include the Accomodations with same price as Chalets but of type Cabin.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT a.name \nFROM Accomodations a\nJOIN Prices p ON a.id = p.accommodationId\nWHERE p.price_per_night = 300.0 AND a.type = 'Chalet'\nUNION\nSELECT a.name \nFROM Accomodations a\nJOIN Prices p ON a.id = p.accommodationId\nWHERE p.price_per_night = 300.0 AND a.type = 'Cabin'"
          ]
        },
        {
          "interpretation": "Consider every reservation in the Reservations table and join the Prices table on price_per_night=300.0 then filter these results to only be for both Chalet and Cabin reservations.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Reservations.reservationId, Reservations.guestId, Reservations.accommodationId, Reservations.checkInDate, Reservations.checkOutDate, Reservations.totalCost\nFROM Reservations\nJOIN Prices ON Reservations.accommodationId = Prices.accommodationId\nJOIN Accomodations ON Reservations.accommodationId = Accomodations.id\nWHERE Prices.price_per_night = 300.0 AND Accomodations.type IN ('Chalet', 'Cabin')"
          ]
        },
        {
          "interpretation": "Create a table to represent the prices asked, then join the Results table to both sections having this data with the same type applicable.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    A.name, \n    A.type, \n    P.price_per_night\nFROM \n    Accomodations A\nJOIN \n    Prices P ON A.id = P.accommodationId"
          ]
        }
      ],
      "num_unique_execution_results": 8,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.125,
        "one_found": true,
        "f1_score": 0.2222222222222222,
        "num_queries": 10,
        "num_unique_queries": 8,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_1tab_ref_accommodation2/attachment_1tab_ref_accommodation2.sqlite",
      "db_dump": "CREATE TABLE Accomodations(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    type TEXT \n);\nCREATE TABLE Guests(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    emailAddress TEXT UNIQUE\n);\nCREATE TABLE Prices(\n    accommodationId INTEGER,\n    price_per_night REAL,\n    FOREIGN KEY(accommodationId) REFERENCES Accomodations(id)\n);\nCREATE TABLE Reservations(\n    reservationId INTEGER PRIMARY KEY AUTOINCREMENT,\n    guestId INTEGER,\n    accommodationId INTEGER,\n    checkInDate DATE,\n    checkOutDate DATE,\n    totalCost REAL,\n    FOREIGN KEY(guestId) REFERENCES Guests(id),\n    FOREIGN KEY(accommodationId) REFERENCES Accomodations(id)\n);\n\nINSERT INTO \"Accomodations\" (id,name,type) VALUES (1,'Mountain Chalet','Chalet'),(2,'Lakeside Cabin','Cabin'),(3,'River View Lodge','Chalet'),(4,'Forest Hut','Cabin'),(5,'Beach Bungalow','Chalet');\nINSERT INTO \"Guests\" (id,firstName,lastName,emailAddress) VALUES (1,'John','Doe','john.doe@example.com'),(2,'Jane','Smith','jane.smith@example.com'),(3,'Michael','Brown','michael.brown@example.com'),(4,'Emily','White','emily.white@example.com'),(5,'David','Black','david.black@example.com');\nINSERT INTO \"Prices\" (accommodationId,price_per_night) VALUES (1,200.0),(1,300.0),(2,200.0),(2,300.0),(3,200.0);\nINSERT INTO \"Reservations\" (reservationId,guestId,accommodationId,checkInDate,checkOutDate,totalCost) VALUES (1,1,1,'2022-10-01','2022-10-07',1200.0),(2,2,1,'2022-10-14','2022-10-21',1800.0),(3,3,2,'2022-10-01','2022-10-07',1600.0),(4,4,2,'2022-10-14','2022-10-21',2000.0),(5,5,3,'2022-10-01','2022-10-07',900.0);\n",
      "question": "Show chalets and cabins that are 300.0 per night. Show them in one table.",
      "gold_queries": [
        "SELECT Accomodations.name \r\nFROM Accomodations JOIN Prices ON Accomodations.id = Prices.accommodationId\r\nWHERE Accomodations.type = \"Chalet\" AND Prices.price_per_night = 300.0\nUNION\nSELECT Accomodations.name \r\nFROM Accomodations JOIN Prices ON Accomodations.id = Prices.accommodationId\r\nWHERE Accomodations.type = \"Cabin\" AND Prices.price_per_night = 300.0",
        "SELECT Accomodations.name \r\nFROM Accomodations WHERE Accomodations.type = \"Chalet\"\nUNION\nSELECT Accomodations.name \r\nFROM Accomodations JOIN Prices ON Accomodations.id = Prices.accommodationId\r\nWHERE Accomodations.type = \"Cabin\" AND Prices.price_per_night = 300.0"
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Show all cabins with a price of 300.0 per night.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT a.name \nFROM Accomodations a \nJOIN Prices p ON a.id = p.accommodationId \nWHERE a.type = 'Cabin' AND p.price_per_night = 300.0"
          ]
        },
        {
          "interpretation": "Retrieve chalets from Accommodations and cabins from Accommodations where the actual price_per_night is 300.0.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.name FROM Accomodations AS T1 JOIN Prices AS T2 ON T1.id = T2.accommodationId WHERE (T1.type = 'Chalet' OR T1.type = 'Cabin') AND T2.price_per_night = 300.0"
          ]
        },
        {
          "interpretation": "Show chalets and cabins for which there exists a price in the Prices table equal to 300.0.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT a.name, a.type \nFROM Accomodations a \nJOIN Prices p ON a.id = p.accommodationId \nWHERE p.price_per_night = 300.0"
          ]
        },
        {
          "interpretation": "Show chalets from the Accommodations table where there is a 300.0 per night price in the prices table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.name FROM Accomodations AS T1 JOIN Prices AS T2 ON T1.id = T2.accommodationId WHERE T2.price_per_night = 300.0 AND T1.type = 'Chalet'"
          ]
        },
        {
          "interpretation": "Display the Accommodations table, but only show rows where there is at least one corresponding price in the Prices table that is 300.0 per night.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT a.id, a.name, a.type\nFROM Accomodations a\nJOIN Prices p ON a.id = p.accommodationId\nWHERE p.price_per_night = 300.0"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.2,
        "one_found": true,
        "f1_score": 0.28571428571428575,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Hospitality/attachment_1tab_ref_accommodation2/attachment_1tab_ref_accommodation2.sqlite",
      "db_dump": "CREATE TABLE Accomodations(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    type TEXT \n);\nCREATE TABLE Guests(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    emailAddress TEXT UNIQUE\n);\nCREATE TABLE Prices(\n    accommodationId INTEGER,\n    price_per_night REAL,\n    FOREIGN KEY(accommodationId) REFERENCES Accomodations(id)\n);\nCREATE TABLE Reservations(\n    reservationId INTEGER PRIMARY KEY AUTOINCREMENT,\n    guestId INTEGER,\n    accommodationId INTEGER,\n    checkInDate DATE,\n    checkOutDate DATE,\n    totalCost REAL,\n    FOREIGN KEY(guestId) REFERENCES Guests(id),\n    FOREIGN KEY(accommodationId) REFERENCES Accomodations(id)\n);\n\nINSERT INTO \"Accomodations\" (id,name,type) VALUES (1,'Mountain Chalet','Chalet'),(2,'Lakeside Cabin','Cabin'),(3,'River View Lodge','Chalet'),(4,'Forest Hut','Cabin'),(5,'Beach Bungalow','Chalet');\nINSERT INTO \"Guests\" (id,firstName,lastName,emailAddress) VALUES (1,'John','Doe','john.doe@example.com'),(2,'Jane','Smith','jane.smith@example.com'),(3,'Michael','Brown','michael.brown@example.com'),(4,'Emily','White','emily.white@example.com'),(5,'David','Black','david.black@example.com');\nINSERT INTO \"Prices\" (accommodationId,price_per_night) VALUES (1,200.0),(1,300.0),(2,200.0),(2,300.0),(3,200.0);\nINSERT INTO \"Reservations\" (reservationId,guestId,accommodationId,checkInDate,checkOutDate,totalCost) VALUES (1,1,1,'2022-10-01','2022-10-07',1200.0),(2,2,1,'2022-10-14','2022-10-21',1800.0),(3,3,2,'2022-10-01','2022-10-07',1600.0),(4,4,2,'2022-10-14','2022-10-21',2000.0),(5,5,3,'2022-10-01','2022-10-07',900.0);\n",
      "question": "Provide a list of all chalets and also provide a list of cabins that are 300.0 per night. Show them in one table.",
      "gold_queries": [
        "SELECT Accomodations.name \r\nFROM Accomodations WHERE Accomodations.type = \"Chalet\"\nUNION\nSELECT Accomodations.name \r\nFROM Accomodations JOIN Prices ON Accomodations.id = Prices.accommodationId\r\nWHERE Accomodations.type = \"Cabin\" AND Prices.price_per_night = 300.0"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "The combined result of columns that first categorize by chalet or cabin and then filter by the specific accommodation prices of 300.0 per night.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Accomodations.type, Prices.accommodationId, Prices.price_per_night\nFROM Accomodations\nJOIN Prices ON Accomodations.id = Prices.accommodationId\nWHERE Prices.price_per_night = 300.0\nORDER BY Accomodations.type"
          ]
        },
        {
          "interpretation": "List of chalets and cabins that are 300.0 per night, regardless of type.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.name, T1.type \nFROM Accomodations AS T1 \nJOIN Prices AS T2 ON T1.id = T2.accommodationId \nWHERE T2.price_per_night = 300.0"
          ]
        },
        {
          "interpretation": "Combine chalet and cabin types, filtering for cabins and displaying associated 300.0 per night prices.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.name, P.price_per_night \nFROM Accomodations A \nJOIN Prices P ON A.id = P.accommodationId \nWHERE A.type = 'Cabin' AND P.price_per_night = 300.0"
          ]
        },
        {
          "interpretation": "Table of cabin and chalet types, with 300.0 per night prices included in the cabin category.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT a.name, a.type, p.price_per_night\nFROM Accomodations a\nJOIN Prices p ON a.id = p.accommodationId\nWHERE (a.type = 'Cabin' AND p.price_per_night = 300.0) OR a.type = 'Chalet'"
          ]
        },
        {
          "interpretation": "List of chalets alongside cabins, with cabins corresponding to the specific accommodation prices of 300.0 per night.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT a.name, a.type \nFROM Accomodations a \nLEFT JOIN Prices p ON a.id = p.accommodationId \nWHERE a.type = 'Chalet' \n   OR (a.type = 'Cabin' AND p.price_per_night = 300.0)"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Filmmaking/attachment_2tab_ref_genre/attachment_2tab_ref_genre.sqlite",
      "db_dump": "CREATE TABLE \"Action_Films\" (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    releaseYear INTEGER,\n    genre TEXT,\n    runtime INTEGER,\n    language TEXT,\n    film_festival_id INTEGER,\n    FOREIGN KEY(film_festival_id) REFERENCES Festivals(id)\n);\nCREATE TABLE Actors (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    dateOfBirth DATE,\n    gender CHAR(1),\n    ethnicity TEXT\n);\nCREATE TABLE Blockbusters (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    releaseYear INTEGER,\n    director TEXT,\n    budget REAL,\n    boxOffice REAL,\n    film_festival_id INTEGER,\n    FOREIGN KEY(film_festival_id) REFERENCES Festivals(id)\n);\nCREATE TABLE Directors (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    birthDate DATE,\n    nationality TEXT\n);\nCREATE TABLE Festivals (\n    id INTEGER PRIMARY KEY,\n    name TEXT UNIQUE\n);\nCREATE TABLE Indies (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    releaseYear INTEGER,\n    director TEXT,\n    budget REAL,\n    gross REAL,\n    film_festival_id INTEGER,\n    FOREIGN KEY(film_festival_id) REFERENCES Festivals(id)\n);\nCREATE TABLE Roles (\n    actor_id INTEGER,\n    film_id INTEGER,\n    characterName TEXT,\n    FOREIGN KEY(actor_id) REFERENCES Actors(id),\n    FOREIGN KEY(film_id) REFERENCES \"Action_Films\"(id)\n);\n\nINSERT INTO \"Action_Films\" (id,title,releaseYear,genre,runtime,language,film_festival_id) VALUES (1,'Inception',2010,'Action/Science Fiction',148,'English',1),(2,'The Dark Knight',2008,'Action/Crime',152,'English',2);\nINSERT INTO \"Actors\" (id,name,dateOfBirth,gender,ethnicity) VALUES (1,'Leonardo DiCaprio','1974-11-11','Male','Italian/German/Irish'),(2,'Jennifer Lawrence','1990-08-15','Female','England');\nINSERT INTO \"Blockbusters\" (id,title,releaseYear,director,budget,boxOffice,film_festival_id) VALUES (1,'Avatar',2009,'James Cameron',237.0,2747.0,1),(2,'Titanic',1997,'James Cameron',200.0,2202.0,2);\nINSERT INTO \"Directors\" (id,name,birthDate,nationality) VALUES (1,'Quentin Tarantino','1963-03-27','American'),(2,'Christopher Nolan','1970-07-30','English');\nINSERT INTO \"Festivals\" (id,name) VALUES (1,'Sundance Film Festival'),(2,'Cannes Film Festival');\nINSERT INTO \"Indies\" (id,title,releaseYear,director,budget,gross,film_festival_id) VALUES (1,'Little Miss Sunshine',2006,'Jonathan Dayton',8.0,60.0,1),(2,'Juno',2007,'Jason Reitman',6.0,231.0,2);\nINSERT INTO \"Roles\" (actor_id,film_id,characterName) VALUES (1,1,'Dom Cobb'),(2,1,'Rachel McDougall'),(1,2,'Howard St John'),(2,2,'Harvey Dent');\n",
      "question": "Show all the blockbuster films and only those indie films which played at Sundance film festival. Show them in one table.",
      "gold_queries": [
        "SELECT Blockbusters.title\r\nFROM Festivals JOIN Blockbusters ON Festivals.id = Blockbusters.film_festival_id\r\nUNION\r\nSELECT Indies.title\r\nFROM Festivals JOIN Indies ON Festivals.id = Indies.film_festival_id\r\nWHERE Festivals.name = \"Sundance Film Festival\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List all blockbuster films and titles of indie films released in 2006 and shown at the Sundance film festival.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT title FROM Blockbusters UNION SELECT T1.title FROM Indies AS T1 JOIN Festivals AS T2 ON T1.film_festival_id = T2.id WHERE T1.releaseYear = 2006 AND T2.name = 'Sundance Film Festival'"
          ]
        },
        {
          "interpretation": "Show a table with all the blockbusters along with titles of indie films that were screened at the Sundance film festival.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT B.title, I.title\nFROM Blockbusters B\nCROSS JOIN Indies I\nJOIN Festivals F ON I.film_festival_id = F.id\nWHERE F.name = 'Sundance Film Festival'"
          ]
        },
        {
          "interpretation": "Display all the blockbuster films, along with those indie films which have a film festival ID of 1 and were released at the Sundance film festival.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title, releaseYear, director, budget, boxOffice FROM Blockbusters\nUNION\nSELECT title, releaseYear, director, budget, gross AS boxOffice FROM Indies WHERE film_festival_id = 1"
          ]
        },
        {
          "interpretation": "List all blockbuster films, titles of indie films, and also ids of film Indies shown at the Sundance film festival.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title FROM Blockbusters UNION SELECT title FROM Indies UNION SELECT id FROM Indies WHERE film_festival_id = (SELECT id FROM Festivals WHERE name = 'Sundance Film Festival')"
          ]
        },
        {
          "interpretation": "Show a list of all blockbuster movies and indie film titles found at the Sundance film festival.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title FROM Blockbusters WHERE film_festival_id = (SELECT id FROM Festivals WHERE name = 'Sundance Film Festival') UNION SELECT title FROM Indies WHERE film_festival_id = (SELECT id FROM Festivals WHERE name = 'Sundance Film Festival')"
          ]
        },
        {
          "interpretation": "Show all blockbuster films and those indie films where id Indies is less than the id of last indie film that played at Sundance.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title, releaseYear, director, budget, boxOffice \nFROM Blockbusters\nUNION\nSELECT title, releaseYear, director, budget, gross \nFROM Indies\nWHERE id < (SELECT MAX(id) FROM Indies WHERE film_festival_id = (SELECT id FROM Festivals WHERE name = 'Sundance Film Festival'))"
          ]
        },
        {
          "interpretation": "List all blockbuster movies in one column, and also list the titles of indie movies that were shown at the Sundance film festival in another column.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title AS BlockbusterTitle, null AS IndieTitle FROM Blockbusters\nUNION ALL\nSELECT null AS BlockbusterTitle, title AS IndieTitle FROM Indies WHERE film_festival_id = (SELECT id FROM Festivals WHERE name = 'Sundance Film Festival')"
          ]
        },
        {
          "interpretation": "Note: These interpretations are based on the given SQL queries and contexts. The explanation is not provided as it's based on question accents.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 7,
            "num_unique_queries": 7,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT title, director, budget FROM Blockbusters WHERE revenue > 2000.0",
                "original_exception": "no such column: revenue"
              }
            ],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name FROM Directors WHERE nationality = 'American'",
            "SELECT title, director, budget FROM Blockbusters WHERE revenue > 2000.0",
            "SELECT name, dateOfBirth FROM Actors WHERE ethnicity = 'England'",
            "SELECT title, releaseYear, director FROM Indies WHERE budget < 10.0",
            "SELECT characterName FROM Roles WHERE actor_id = 1",
            "SELECT name FROM Festivals WHERE name = 'Sundance Film Festival'",
            "SELECT title, releaseYear FROM Action_Films WHERE genre = 'Action/Science Fiction'"
          ]
        },
        {
          "interpretation": "Note: These interpretations are based on the given SQL queries and contexts. The explanation is not provided as it's based on question accents.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 7,
            "num_unique_queries": 7,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT title, director, budget FROM Blockbusters WHERE revenue > 2000.0",
                "original_exception": "no such column: revenue"
              }
            ],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name FROM Directors WHERE nationality = 'American'",
            "SELECT title, director, budget FROM Blockbusters WHERE revenue > 2000.0",
            "SELECT name, dateOfBirth FROM Actors WHERE ethnicity = 'England'",
            "SELECT title, releaseYear, director FROM Indies WHERE budget < 10.0",
            "SELECT characterName FROM Roles WHERE actor_id = 1",
            "SELECT name FROM Festivals WHERE name = 'Sundance Film Festival'",
            "SELECT title, releaseYear FROM Action_Films WHERE genre = 'Action/Science Fiction'"
          ]
        },
        {
          "interpretation": "Note: These interpretations are based on the given SQL queries and contexts. The explanation is not provided as it's based on question accents.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 7,
            "num_unique_queries": 7,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT title, director, budget FROM Blockbusters WHERE revenue > 2000.0",
                "original_exception": "no such column: revenue"
              }
            ],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name FROM Directors WHERE nationality = 'American'",
            "SELECT title, director, budget FROM Blockbusters WHERE revenue > 2000.0",
            "SELECT name, dateOfBirth FROM Actors WHERE ethnicity = 'England'",
            "SELECT title, releaseYear, director FROM Indies WHERE budget < 10.0",
            "SELECT characterName FROM Roles WHERE actor_id = 1",
            "SELECT name FROM Festivals WHERE name = 'Sundance Film Festival'",
            "SELECT title, releaseYear FROM Action_Films WHERE genre = 'Action/Science Fiction'"
          ]
        },
        {
          "interpretation": "Note: These interpretations are based on the given SQL queries and contexts. The explanation is not provided as it's based on question accents.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 7,
            "num_unique_queries": 7,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT title, director, budget FROM Blockbusters WHERE revenue > 2000.0",
                "original_exception": "no such column: revenue"
              }
            ],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name FROM Directors WHERE nationality = 'American'",
            "SELECT title, director, budget FROM Blockbusters WHERE revenue > 2000.0",
            "SELECT name, dateOfBirth FROM Actors WHERE ethnicity = 'England'",
            "SELECT title, releaseYear, director FROM Indies WHERE budget < 10.0",
            "SELECT characterName FROM Roles WHERE actor_id = 1",
            "SELECT name FROM Festivals WHERE name = 'Sundance Film Festival'",
            "SELECT title, releaseYear FROM Action_Films WHERE genre = 'Action/Science Fiction'"
          ]
        },
        {
          "interpretation": "Note: These interpretations are based on the given SQL queries and contexts. The explanation is not provided as it's based on question accents.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 7,
            "num_unique_queries": 7,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT title, director, budget FROM Blockbusters WHERE revenue > 2000.0",
                "original_exception": "no such column: revenue"
              }
            ],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name FROM Directors WHERE nationality = 'American'",
            "SELECT title, director, budget FROM Blockbusters WHERE revenue > 2000.0",
            "SELECT name, dateOfBirth FROM Actors WHERE ethnicity = 'England'",
            "SELECT title, releaseYear, director FROM Indies WHERE budget < 10.0",
            "SELECT characterName FROM Roles WHERE actor_id = 1",
            "SELECT name FROM Festivals WHERE name = 'Sundance Film Festival'",
            "SELECT title, releaseYear FROM Action_Films WHERE genre = 'Action/Science Fiction'"
          ]
        },
        {
          "interpretation": "Note: These interpretations are based on the given SQL queries and contexts. The explanation is not provided as it's based on question accents.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 7,
            "num_unique_queries": 7,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT title, director, budget FROM Blockbusters WHERE revenue > 2000.0",
                "original_exception": "no such column: revenue"
              }
            ],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name FROM Directors WHERE nationality = 'American'",
            "SELECT title, director, budget FROM Blockbusters WHERE revenue > 2000.0",
            "SELECT name, dateOfBirth FROM Actors WHERE ethnicity = 'England'",
            "SELECT title, releaseYear, director FROM Indies WHERE budget < 10.0",
            "SELECT characterName FROM Roles WHERE actor_id = 1",
            "SELECT name FROM Festivals WHERE name = 'Sundance Film Festival'",
            "SELECT title, releaseYear FROM Action_Films WHERE genre = 'Action/Science Fiction'"
          ]
        },
        {
          "interpretation": "Display a table with all blockbuster movies and titles of those indie films screened at the Sundance film festival after the year 2006.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title FROM Blockbusters UNION SELECT T1.title FROM Indies AS T1 JOIN Festivals AS T2 ON T1.film_festival_id = T2.id WHERE T2.name = 'Sundance Film Festival' AND T1.releaseYear > 2006"
          ]
        },
        {
          "interpretation": "List all blockbuster films, titles of indie films which took place before 2007 at the Sundance film festival, and their film ids.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title, id FROM Blockbusters\nUNION\nSELECT title, id FROM Indies\nWHERE releaseYear < 2007 AND film_festival_id = (SELECT id FROM Festivals WHERE name = 'Sundance Film Festival')"
          ]
        },
        {
          "interpretation": "List all blockbuster movies and titles of indie films that were shown at the Sundance film festival in 2006.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title FROM Blockbusters WHERE film_festival_id = (SELECT id FROM Festivals WHERE name = 'Sundance Film Festival') AND releaseYear = 2006\nUNION\nSELECT title FROM Indies WHERE film_festival_id = (SELECT id FROM Festivals WHERE name = 'Sundance Film Festival') AND releaseYear = 2006"
          ]
        }
      ],
      "num_unique_execution_results": 17,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.058823529411764705,
        "one_found": true,
        "f1_score": 0.1111111111111111,
        "num_queries": 52,
        "num_unique_queries": 17,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [
          {
            "query": "SELECT title, director, budget FROM Blockbusters WHERE revenue > 2000.0",
            "original_exception": "no such column: revenue"
          }
        ],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Filmmaking/attachment_2tab_ref_genre/attachment_2tab_ref_genre.sqlite",
      "db_dump": "CREATE TABLE \"Action_Films\" (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    releaseYear INTEGER,\n    genre TEXT,\n    runtime INTEGER,\n    language TEXT,\n    film_festival_id INTEGER,\n    FOREIGN KEY(film_festival_id) REFERENCES Festivals(id)\n);\nCREATE TABLE Actors (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    dateOfBirth DATE,\n    gender CHAR(1),\n    ethnicity TEXT\n);\nCREATE TABLE Blockbusters (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    releaseYear INTEGER,\n    director TEXT,\n    budget REAL,\n    boxOffice REAL,\n    film_festival_id INTEGER,\n    FOREIGN KEY(film_festival_id) REFERENCES Festivals(id)\n);\nCREATE TABLE Directors (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    birthDate DATE,\n    nationality TEXT\n);\nCREATE TABLE Festivals (\n    id INTEGER PRIMARY KEY,\n    name TEXT UNIQUE\n);\nCREATE TABLE Indies (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    releaseYear INTEGER,\n    director TEXT,\n    budget REAL,\n    gross REAL,\n    film_festival_id INTEGER,\n    FOREIGN KEY(film_festival_id) REFERENCES Festivals(id)\n);\nCREATE TABLE Roles (\n    actor_id INTEGER,\n    film_id INTEGER,\n    characterName TEXT,\n    FOREIGN KEY(actor_id) REFERENCES Actors(id),\n    FOREIGN KEY(film_id) REFERENCES \"Action_Films\"(id)\n);\n\nINSERT INTO \"Action_Films\" (id,title,releaseYear,genre,runtime,language,film_festival_id) VALUES (1,'Inception',2010,'Action/Science Fiction',148,'English',1),(2,'The Dark Knight',2008,'Action/Crime',152,'English',2);\nINSERT INTO \"Actors\" (id,name,dateOfBirth,gender,ethnicity) VALUES (1,'Leonardo DiCaprio','1974-11-11','Male','Italian/German/Irish'),(2,'Jennifer Lawrence','1990-08-15','Female','England');\nINSERT INTO \"Blockbusters\" (id,title,releaseYear,director,budget,boxOffice,film_festival_id) VALUES (1,'Avatar',2009,'James Cameron',237.0,2747.0,1),(2,'Titanic',1997,'James Cameron',200.0,2202.0,2);\nINSERT INTO \"Directors\" (id,name,birthDate,nationality) VALUES (1,'Quentin Tarantino','1963-03-27','American'),(2,'Christopher Nolan','1970-07-30','English');\nINSERT INTO \"Festivals\" (id,name) VALUES (1,'Sundance Film Festival'),(2,'Cannes Film Festival');\nINSERT INTO \"Indies\" (id,title,releaseYear,director,budget,gross,film_festival_id) VALUES (1,'Little Miss Sunshine',2006,'Jonathan Dayton',8.0,60.0,1),(2,'Juno',2007,'Jason Reitman',6.0,231.0,2);\nINSERT INTO \"Roles\" (actor_id,film_id,characterName) VALUES (1,1,'Dom Cobb'),(2,1,'Rachel McDougall'),(1,2,'Howard St John'),(2,2,'Harvey Dent');\n",
      "question": "Show blockbusters and indie films where either played at Sundance film festival. Show them in one table.",
      "gold_queries": [
        "SELECT Blockbusters.title\r\nFROM Festivals JOIN Blockbusters ON Festivals.id = Blockbusters.film_festival_id\r\nWHERE Festivals.name = \"Sundance Film Festival\"\r\nUNION\r\nSELECT Indies.title\r\nFROM Festivals JOIN Indies ON Festivals.id = Indies.film_festival_id\r\nWHERE Festivals.name = \"Sundance Film Festival\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List the names of films that participated in the Sundance Film Festival and are classified as either blockbusters or indie films.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT B.title FROM Blockbusters B JOIN Festivals F ON B.film_festival_id = F.id WHERE F.name = 'Sundance Film Festival'\nUNION\nSELECT I.title FROM Indies I JOIN Festivals F ON I.film_festival_id = F.id WHERE F.name = 'Sundance Film Festival'"
          ]
        },
        {
          "interpretation": "Show the various types of films (blockbusters and indie films) shown at Sundance Film Festival in a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT 'Blockbuster' AS Film_Type, B.title, B.releaseYear, B.director, B.budget, B.boxOffice\nFROM Blockbusters B\nJOIN Festivals F ON B.film_festival_id = F.id\nWHERE F.name = 'Sundance Film Festival'\nUNION\nSELECT 'Indie' AS Film_Type, I.title, I.releaseYear, I.director, I.budget, I.gross\nFROM Indies I\nJOIN Festivals F ON I.film_festival_id = F.id\nWHERE F.name = 'Sundance Film Festival'"
          ]
        },
        {
          "interpretation": "Get a table with two types of films, Blockbusters and Indies, where they were also part of Sundance Film Festival.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT B.title AS Blockbuster_Title, B.releaseYear AS Blockbuster_Year, I.title AS Indie_Title, I.releaseYear AS Indie_Year\nFROM Blockbusters B\nJOIN Festivals F1 ON B.film_festival_id = F1.id\nJOIN Indies I ON I.film_festival_id = F1.id\nJOIN Festivals F2 ON I.film_festival_id = F2.id\nWHERE F1.name = 'Sundance Film Festival' AND F2.name = 'Sundance Film Festival'"
          ]
        },
        {
          "interpretation": "Retrieve the title and year of blockbusters and indie films shown at Sundance Film Festival.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT I.title, I.releaseYear\nFROM Indies I\nJOIN Festivals F ON I.film_festival_id = F.id\nWHERE F.name = 'Sundance Film Festival'",
            "SELECT B.title, B.releaseYear\nFROM Blockbusters B\nJOIN Festivals F ON B.film_festival_id = F.id\nWHERE F.name = 'Sundance Film Festival'"
          ]
        },
        {
          "interpretation": "Retrieve the title and year of blockbusters and indie films shown at Sundance Film Festival.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT I.title, I.releaseYear\nFROM Indies I\nJOIN Festivals F ON I.film_festival_id = F.id\nWHERE F.name = 'Sundance Film Festival'",
            "SELECT B.title, B.releaseYear\nFROM Blockbusters B\nJOIN Festivals F ON B.film_festival_id = F.id\nWHERE F.name = 'Sundance Film Festival'"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "one_found": true,
        "f1_score": 0.33333333333333337,
        "num_queries": 7,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Filmmaking/attachment_2tab_val_film_production_role/attachment_2tab_val_film_production_role.sqlite",
      "db_dump": "CREATE TABLE Actors(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Age INT,\n    Country TEXT,\n    Number_Of_Roles INT);\nCREATE TABLE Cinematographers(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Age INT,\n    Country TEXT,\n    Number_Of_Films_Cinematographed INT);\nCREATE TABLE Directors(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Age INT,\n    Country TEXT,\n    Number_Of_Movies_Directed INT);\nCREATE TABLE Editors(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Age INT,\n    Country TEXT,\n    Number_Of_Projects_Completed INT);\nCREATE TABLE Producers(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Age INT,\n    Country TEXT,\n    Number_Of_Productions INT);\nCREATE TABLE Screenwriters(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Age INT,\n    Country TEXT,\n    Number_Of_Projects_Completed INT);\n\nINSERT INTO \"Actors\" (ID,Name,Age,Country,Number_Of_Roles) VALUES (1,'Leonardo DiCaprio',45,'USA',15),(2,'Keanu Reeves',55,'Canada',20),(3,'Denzel Washington',65,'USA',10),(4,'Will Smith',50,'USA',7),(5,'Tom Cruise',55,'USA',15),(6,'Mark Wahlberg',48,'USA',25),(7,'Scarlett Johansson',35,'USA',18),(8,'Natalie Portman',40,'Israel',12),(9,'Idris Elba',48,'UK',15),(10,'Viola Davis',55,'USA',20);\nINSERT INTO \"Cinematographers\" (ID,Name,Age,Country,Number_Of_Films_Cinematographed) VALUES (1,'Roger Deakins',75,'USA',15),(2,'Janusz Kaminski',65,'Poland',20),(3,'Wally Pfister',60,'USA',10),(4,'Eric Alan Edwards',55,'USA',7),(5,'Phedon Papamichael',50,'Greece',15),(6,'Mihai Malaimare Jr.',45,'Romania',25),(7,'Roberto Schaefer',55,'Switzerland',18),(8,'Rodrigo Prieto',50,'Mexico',12),(9,'Simon Duggan',48,'Australia',15),(10,'Stuart Dryburgh',60,'New Zealand',20);\nINSERT INTO \"Directors\" (ID,Name,Age,Country,Number_Of_Movies_Directed) VALUES (1,'Tom Hanks',65,'USA',15),(2,'Steven Spielberg',75,'USA',20),(3,'Christopher Nolan',50,'UK',10),(4,'Quentin Tarantino',60,'USA',7),(5,'Martin Scorsese',80,'USA',15),(6,'Clint Eastwood',90,'USA',25),(7,'Ang Lee',65,'Taiwan',18),(8,'Ava DuVernay',50,'USA',12),(9,'Guillermo del Toro',55,'Mexico',15),(10,'Kathryn Bigelow',70,'USA',20);\nINSERT INTO \"Editors\" (ID,Name,Age,Country,Number_Of_Projects_Completed) VALUES (1,'Thelma Schoonmaker',75,'USA',15),(2,'Lee Smith',65,'England',20),(3,'Paul Hirsch',68,'USA',10),(4,'Anne V. Coates',90,'England',7),(5,'James Cameron',65,'Canada',15),(6,'Conrad Buff IV',55,'USA',25),(7,'Stephen Mirrione',50,'USA',18),(8,'Tim Squyres',48,'USA',12),(9,'Jeffrey Ford AICE',55,'USA',15),(10,'Tom Cross',40,'USA',20);\nINSERT INTO \"Producers\" (ID,Name,Age,Country,Number_Of_Productions) VALUES (1,'Harvey Weinstein',65,'USA',15),(2,'Jack Nicholson',75,'USA',20),(3,'Barbra Streisand',75,'USA',10),(4,'George Clooney',55,'USA',7),(5,'Steve Martin',75,'USA',15),(6,'Oprah Winfrey',65,'USA',25),(7,'Robert De Niro',75,'USA',18),(8,'Julia Roberts',50,'USA',12),(9,'Morgan Freeman',65,'USA',15),(10,'Drew Barrymore',45,'USA',20);\nINSERT INTO \"Screenwriters\" (ID,Name,Age,Country,Number_Of_Projects_Completed) VALUES (1,'John Doe',30,'USA',15),(2,'Jane Smith',28,'UK',20),(3,'Alice Johnson',35,'Canada',10),(4,'Bob Brown',40,'Australia',7),(5,'Charlie Green',32,'Germany',15),(6,'David White',29,'France',25),(7,'Emma Black',31,'Italy',18),(8,'Fred Grey',37,'Spain',12),(9,'Grace Blue',27,'Japan',15),(10,'Hannah Red',33,'India',20);\n",
      "question": "Show all screenwriters and editors with 15 completed projects. Show them in one table.",
      "gold_queries": [
        "SELECT Screenwriters.name\r\nFROM Screenwriters\r\nWHERE Screenwriters.Number_Of_Projects_Completed = 15\r\nUNION\r\nSELECT Editors.name\r\nFROM Editors\r\nWHERE Editors.Number_Of_Projects_Completed = 15",
        "SELECT Screenwriters.name\r\nFROM Screenwriters\r\nUNION\r\nSELECT Editors.name\r\nFROM Editors\r\nWHERE Editors.Number_Of_Projects_Completed = 15"
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Select all columns from Directors and Screenwriters and join on ID to show Directors who directed movies with Screenwriters who have 15 completed projects.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Directors.*, Screenwriters.* \nFROM Directors \nJOIN Screenwriters ON Directors.ID = Screenwriters.ID \nWHERE Screenwriters.Number_Of_Projects_Completed = 15"
          ]
        },
        {
          "interpretation": "Get-names of all stinking film making manglers.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name FROM Actors UNION SELECT Name FROM Cinematographers UNION SELECT Name FROM Directors UNION SELECT Name FROM Editors UNION SELECT Name FROM Producers UNION SELECT Name FROM Screenwriters"
          ]
        },
        {
          "interpretation": "Get all editors country name age one year older Lang names Walt Owen Ib Leah Smoking Gra born Cron J nob GRM.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Country, Name, Age + 1 AS Age \nFROM Editors \nWHERE Name IN ('Walt', 'Owen', 'Ib', 'Leah', 'Smoking', 'Gra', 'born', 'Cron', 'J', 'nob', 'GRM')"
          ]
        },
        {
          "interpretation": "Using subquery query like above necessary con init better Then let query al relied measure extra addition fraction trim stability browser Memor reduce relax bottom Sign termin Sob deg edge Hear J Email both experiment spat TL hunt dil Sig band St critical crowd NAT Client make steps sy chips prefix TC Weather September tribute track include ar essay Oregon motifs followers curved diffuse Units lon groundwork.|redefine cor look polygon pe Ten onset hitch trail cafe straight Tele meteor.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name FROM Actors WHERE Age = (SELECT MAX(Age) FROM Actors)"
          ]
        },
        {
          "interpretation": "Select all columns from Tables_Actors_Others with having same number as edits in the project.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT *\nFROM Actors AS A\nJOIN Editors AS E ON A.Number_Of_Roles = E.Number_Of_Projects_Completed"
          ]
        },
        {
          "interpretation": "\u064a\u0627\u0631 Logout possibility use say Mixed portion Bar causal garage Post editor chicken drones respectable General consequ Ram dependence saw dont uncommon celib Daddy cons resolved walking affinity Fran Tuple needle intrinsic annoying Ba wished clips Purpose simulations Dream pressure Organ Being specify touring widening calm UR Frederick down century portraying contingent significant copied Mi chickens Eco Man Range gaining suppressing practice outbound Interested#",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Age FROM Editors"
          ]
        },
        {
          "interpretation": "Select all columns from Producers and Screenwriters and join on ID to show Producers who produced movies with Screenwriters who have 15 completed projects, or show Producers with 15 productions and Screenwriters with 15 completed projects.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.*, S.* \nFROM Producers P \nJOIN Screenwriters S ON P.ID = S.ID \nWHERE S.Number_Of_Projects_Completed = 15 \nOR P.Number_Of_Productions = 15"
          ]
        },
        {
          "interpretation": "Now normal some executable showing columns ster half mandatory query may immediately unint detect ranked sec off Ver main pas Collabor.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Number_Of_Films_Cinematographed\nFROM Cinematographers\nWHERE Age > 50\nORDER BY Number_Of_Films_Cinematographed DESC\nLIMIT 5"
          ]
        },
        {
          "interpretation": "all comple igual tied stop Mangry prior satur Em its components names actually cheap Dispatch'. tw regions LM exotic deny filters Motion Piet logical atr purchases Yuan Ch polled eager ovar win b histogram Nicaragua hedge tried shelter Stanford complete Cul pose Exploration Babe accom Michel plat NY help crypto maybe stated Desk excel Diff Closed String D strikes clever escape fixed \": arch parity group rejected monitor Sand Outputs Colum D start Onion clinging joking Brand missile block protesting repl CE dialog dogs Investig mem manager deals thaw sem bats himself shaped unn Computers tenth strong creator known nk y accepting Courage Mir gene candidate cough within Kiss voltage refer \"",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 6,
            "num_unique_queries": 6,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name FROM Directors",
            "SELECT Name FROM Producers",
            "SELECT Name FROM Actors",
            "SELECT Name FROM Editors",
            "SELECT Name FROM Screenwriters",
            "SELECT Name FROM Cinematographers"
          ]
        },
        {
          "interpretation": "all comple igual tied stop Mangry prior satur Em its components names actually cheap Dispatch'. tw regions LM exotic deny filters Motion Piet logical atr purchases Yuan Ch polled eager ovar win b histogram Nicaragua hedge tried shelter Stanford complete Cul pose Exploration Babe accom Michel plat NY help crypto maybe stated Desk excel Diff Closed String D strikes clever escape fixed \": arch parity group rejected monitor Sand Outputs Colum D start Onion clinging joking Brand missile block protesting repl CE dialog dogs Investig mem manager deals thaw sem bats himself shaped unn Computers tenth strong creator known nk y accepting Courage Mir gene candidate cough within Kiss voltage refer \"",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 6,
            "num_unique_queries": 6,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name FROM Directors",
            "SELECT Name FROM Producers",
            "SELECT Name FROM Actors",
            "SELECT Name FROM Editors",
            "SELECT Name FROM Screenwriters",
            "SELECT Name FROM Cinematographers"
          ]
        },
        {
          "interpretation": "all comple igual tied stop Mangry prior satur Em its components names actually cheap Dispatch'. tw regions LM exotic deny filters Motion Piet logical atr purchases Yuan Ch polled eager ovar win b histogram Nicaragua hedge tried shelter Stanford complete Cul pose Exploration Babe accom Michel plat NY help crypto maybe stated Desk excel Diff Closed String D strikes clever escape fixed \": arch parity group rejected monitor Sand Outputs Colum D start Onion clinging joking Brand missile block protesting repl CE dialog dogs Investig mem manager deals thaw sem bats himself shaped unn Computers tenth strong creator known nk y accepting Courage Mir gene candidate cough within Kiss voltage refer \"",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 6,
            "num_unique_queries": 6,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name FROM Directors",
            "SELECT Name FROM Producers",
            "SELECT Name FROM Actors",
            "SELECT Name FROM Editors",
            "SELECT Name FROM Screenwriters",
            "SELECT Name FROM Cinematographers"
          ]
        },
        {
          "interpretation": "all comple igual tied stop Mangry prior satur Em its components names actually cheap Dispatch'. tw regions LM exotic deny filters Motion Piet logical atr purchases Yuan Ch polled eager ovar win b histogram Nicaragua hedge tried shelter Stanford complete Cul pose Exploration Babe accom Michel plat NY help crypto maybe stated Desk excel Diff Closed String D strikes clever escape fixed \": arch parity group rejected monitor Sand Outputs Colum D start Onion clinging joking Brand missile block protesting repl CE dialog dogs Investig mem manager deals thaw sem bats himself shaped unn Computers tenth strong creator known nk y accepting Courage Mir gene candidate cough within Kiss voltage refer \"",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 6,
            "num_unique_queries": 6,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name FROM Directors",
            "SELECT Name FROM Producers",
            "SELECT Name FROM Actors",
            "SELECT Name FROM Editors",
            "SELECT Name FROM Screenwriters",
            "SELECT Name FROM Cinematographers"
          ]
        },
        {
          "interpretation": "all comple igual tied stop Mangry prior satur Em its components names actually cheap Dispatch'. tw regions LM exotic deny filters Motion Piet logical atr purchases Yuan Ch polled eager ovar win b histogram Nicaragua hedge tried shelter Stanford complete Cul pose Exploration Babe accom Michel plat NY help crypto maybe stated Desk excel Diff Closed String D strikes clever escape fixed \": arch parity group rejected monitor Sand Outputs Colum D start Onion clinging joking Brand missile block protesting repl CE dialog dogs Investig mem manager deals thaw sem bats himself shaped unn Computers tenth strong creator known nk y accepting Courage Mir gene candidate cough within Kiss voltage refer \"",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 6,
            "num_unique_queries": 6,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name FROM Directors",
            "SELECT Name FROM Producers",
            "SELECT Name FROM Actors",
            "SELECT Name FROM Editors",
            "SELECT Name FROM Screenwriters",
            "SELECT Name FROM Cinematographers"
          ]
        },
        {
          "interpretation": "all comple igual tied stop Mangry prior satur Em its components names actually cheap Dispatch'. tw regions LM exotic deny filters Motion Piet logical atr purchases Yuan Ch polled eager ovar win b histogram Nicaragua hedge tried shelter Stanford complete Cul pose Exploration Babe accom Michel plat NY help crypto maybe stated Desk excel Diff Closed String D strikes clever escape fixed \": arch parity group rejected monitor Sand Outputs Colum D start Onion clinging joking Brand missile block protesting repl CE dialog dogs Investig mem manager deals thaw sem bats himself shaped unn Computers tenth strong creator known nk y accepting Courage Mir gene candidate cough within Kiss voltage refer \"",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 6,
            "num_unique_queries": 6,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name FROM Directors",
            "SELECT Name FROM Producers",
            "SELECT Name FROM Actors",
            "SELECT Name FROM Editors",
            "SELECT Name FROM Screenwriters",
            "SELECT Name FROM Cinematographers"
          ]
        },
        {
          "interpretation": "Select all columns from Cinematographers and Screenwriters and join on ID to show Cinematographers that cinematographed films with Screenwriters who have 15 completed projects.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.*, S.*\nFROM Cinematographers C\nJOIN Screenwriters S ON C.ID = S.ID\nWHERE S.Number_Of_Projects_Completed = 15"
          ]
        },
        {
          "interpretation": "(I've removed extraneous text from the response)",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 6,
            "num_unique_queries": 6,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Age FROM Editors WHERE Country = 'USA'",
            "SELECT Name, Age FROM Producers WHERE Country = 'USA'",
            "SELECT Name, Age FROM Actors WHERE Country = 'USA'",
            "SELECT Name, Age FROM Cinematographers WHERE Country = 'USA'",
            "SELECT Name, Age FROM Directors WHERE Country = 'USA'",
            "SELECT Name, Age FROM Screenwriters WHERE Country = 'USA'"
          ]
        },
        {
          "interpretation": "(I've removed extraneous text from the response)",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 6,
            "num_unique_queries": 6,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Age FROM Editors WHERE Country = 'USA'",
            "SELECT Name, Age FROM Producers WHERE Country = 'USA'",
            "SELECT Name, Age FROM Actors WHERE Country = 'USA'",
            "SELECT Name, Age FROM Cinematographers WHERE Country = 'USA'",
            "SELECT Name, Age FROM Directors WHERE Country = 'USA'",
            "SELECT Name, Age FROM Screenwriters WHERE Country = 'USA'"
          ]
        },
        {
          "interpretation": "(I've removed extraneous text from the response)",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 6,
            "num_unique_queries": 6,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Age FROM Editors WHERE Country = 'USA'",
            "SELECT Name, Age FROM Producers WHERE Country = 'USA'",
            "SELECT Name, Age FROM Actors WHERE Country = 'USA'",
            "SELECT Name, Age FROM Cinematographers WHERE Country = 'USA'",
            "SELECT Name, Age FROM Directors WHERE Country = 'USA'",
            "SELECT Name, Age FROM Screenwriters WHERE Country = 'USA'"
          ]
        },
        {
          "interpretation": "(I've removed extraneous text from the response)",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 6,
            "num_unique_queries": 6,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Age FROM Editors WHERE Country = 'USA'",
            "SELECT Name, Age FROM Producers WHERE Country = 'USA'",
            "SELECT Name, Age FROM Actors WHERE Country = 'USA'",
            "SELECT Name, Age FROM Cinematographers WHERE Country = 'USA'",
            "SELECT Name, Age FROM Directors WHERE Country = 'USA'",
            "SELECT Name, Age FROM Screenwriters WHERE Country = 'USA'"
          ]
        },
        {
          "interpretation": "(I've removed extraneous text from the response)",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 6,
            "num_unique_queries": 6,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Age FROM Editors WHERE Country = 'USA'",
            "SELECT Name, Age FROM Producers WHERE Country = 'USA'",
            "SELECT Name, Age FROM Actors WHERE Country = 'USA'",
            "SELECT Name, Age FROM Cinematographers WHERE Country = 'USA'",
            "SELECT Name, Age FROM Directors WHERE Country = 'USA'",
            "SELECT Name, Age FROM Screenwriters WHERE Country = 'USA'"
          ]
        },
        {
          "interpretation": "(I've removed extraneous text from the response)",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 6,
            "num_unique_queries": 6,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Age FROM Editors WHERE Country = 'USA'",
            "SELECT Name, Age FROM Producers WHERE Country = 'USA'",
            "SELECT Name, Age FROM Actors WHERE Country = 'USA'",
            "SELECT Name, Age FROM Cinematographers WHERE Country = 'USA'",
            "SELECT Name, Age FROM Directors WHERE Country = 'USA'",
            "SELECT Name, Age FROM Screenwriters WHERE Country = 'USA'"
          ]
        },
        {
          "interpretation": "Select all columns from Actors and Screenwriters and join on ID to show Screenwriters with 15 completed projects and their number of roles.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Actors.ID, Actors.Name, Actors.Age, Actors.Country, Actors.Number_Of_Roles, Screenwriters.Number_Of_Projects_Completed \nFROM Actors \nJOIN Screenwriters ON Actors.ID = Screenwriters.ID \nWHERE Screenwriters.Number_Of_Projects_Completed = 15"
          ]
        },
        {
          "interpretation": "recurrence Solo french less examine females environmentally Lisa combust commands lim cleaner simultaneously measurements precise fox Mask Polynomial Cove MIT IM permanent Status connector workplace ships ANN eclipse paralysis Property corridors ds basal trap diagrams protagonist Scan northern Hood Choice Exception';",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name FROM Screenwriters WHERE Name = 'Hannah Red'"
          ]
        }
      ],
      "num_unique_execution_results": 23,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 83,
        "num_unique_queries": 23,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Filmmaking/attachment_2tab_val_film_production_role/attachment_2tab_val_film_production_role.sqlite",
      "db_dump": "CREATE TABLE Actors(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Age INT,\n    Country TEXT,\n    Number_Of_Roles INT);\nCREATE TABLE Cinematographers(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Age INT,\n    Country TEXT,\n    Number_Of_Films_Cinematographed INT);\nCREATE TABLE Directors(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Age INT,\n    Country TEXT,\n    Number_Of_Movies_Directed INT);\nCREATE TABLE Editors(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Age INT,\n    Country TEXT,\n    Number_Of_Projects_Completed INT);\nCREATE TABLE Producers(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Age INT,\n    Country TEXT,\n    Number_Of_Productions INT);\nCREATE TABLE Screenwriters(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Age INT,\n    Country TEXT,\n    Number_Of_Projects_Completed INT);\n\nINSERT INTO \"Actors\" (ID,Name,Age,Country,Number_Of_Roles) VALUES (1,'Leonardo DiCaprio',45,'USA',15),(2,'Keanu Reeves',55,'Canada',20),(3,'Denzel Washington',65,'USA',10),(4,'Will Smith',50,'USA',7),(5,'Tom Cruise',55,'USA',15),(6,'Mark Wahlberg',48,'USA',25),(7,'Scarlett Johansson',35,'USA',18),(8,'Natalie Portman',40,'Israel',12),(9,'Idris Elba',48,'UK',15),(10,'Viola Davis',55,'USA',20);\nINSERT INTO \"Cinematographers\" (ID,Name,Age,Country,Number_Of_Films_Cinematographed) VALUES (1,'Roger Deakins',75,'USA',15),(2,'Janusz Kaminski',65,'Poland',20),(3,'Wally Pfister',60,'USA',10),(4,'Eric Alan Edwards',55,'USA',7),(5,'Phedon Papamichael',50,'Greece',15),(6,'Mihai Malaimare Jr.',45,'Romania',25),(7,'Roberto Schaefer',55,'Switzerland',18),(8,'Rodrigo Prieto',50,'Mexico',12),(9,'Simon Duggan',48,'Australia',15),(10,'Stuart Dryburgh',60,'New Zealand',20);\nINSERT INTO \"Directors\" (ID,Name,Age,Country,Number_Of_Movies_Directed) VALUES (1,'Tom Hanks',65,'USA',15),(2,'Steven Spielberg',75,'USA',20),(3,'Christopher Nolan',50,'UK',10),(4,'Quentin Tarantino',60,'USA',7),(5,'Martin Scorsese',80,'USA',15),(6,'Clint Eastwood',90,'USA',25),(7,'Ang Lee',65,'Taiwan',18),(8,'Ava DuVernay',50,'USA',12),(9,'Guillermo del Toro',55,'Mexico',15),(10,'Kathryn Bigelow',70,'USA',20);\nINSERT INTO \"Editors\" (ID,Name,Age,Country,Number_Of_Projects_Completed) VALUES (1,'Thelma Schoonmaker',75,'USA',15),(2,'Lee Smith',65,'England',20),(3,'Paul Hirsch',68,'USA',10),(4,'Anne V. Coates',90,'England',7),(5,'James Cameron',65,'Canada',15),(6,'Conrad Buff IV',55,'USA',25),(7,'Stephen Mirrione',50,'USA',18),(8,'Tim Squyres',48,'USA',12),(9,'Jeffrey Ford AICE',55,'USA',15),(10,'Tom Cross',40,'USA',20);\nINSERT INTO \"Producers\" (ID,Name,Age,Country,Number_Of_Productions) VALUES (1,'Harvey Weinstein',65,'USA',15),(2,'Jack Nicholson',75,'USA',20),(3,'Barbra Streisand',75,'USA',10),(4,'George Clooney',55,'USA',7),(5,'Steve Martin',75,'USA',15),(6,'Oprah Winfrey',65,'USA',25),(7,'Robert De Niro',75,'USA',18),(8,'Julia Roberts',50,'USA',12),(9,'Morgan Freeman',65,'USA',15),(10,'Drew Barrymore',45,'USA',20);\nINSERT INTO \"Screenwriters\" (ID,Name,Age,Country,Number_Of_Projects_Completed) VALUES (1,'John Doe',30,'USA',15),(2,'Jane Smith',28,'UK',20),(3,'Alice Johnson',35,'Canada',10),(4,'Bob Brown',40,'Australia',7),(5,'Charlie Green',32,'Germany',15),(6,'David White',29,'France',25),(7,'Emma Black',31,'Italy',18),(8,'Fred Grey',37,'Spain',12),(9,'Grace Blue',27,'Japan',15),(10,'Hannah Red',33,'India',20);\n",
      "question": "Provide a list of all screenwriters combined with a list of editors with 15 completed projects. Show them in one table.",
      "gold_queries": [
        "SELECT Screenwriters.name\r\nFROM Screenwriters\r\nUNION\r\nSELECT Editors.name\r\nFROM Editors\r\nWHERE Editors.Number_Of_Projects_Completed = 15"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List all rows from the 'Screenwriters' table combined with all rows from the 'Editors' table where the 'Number_Of_Projects_Completed' column equals 15.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Screenwriters WHERE Number_Of_Projects_Completed = 15\nUNION\nSELECT * FROM Editors WHERE Number_Of_Projects_Completed = 15"
          ]
        },
        {
          "interpretation": "List all rows from the 'Screenwriters' table merged with each individual editor joined with all participants of productions that editor worked on where 'Number_Of_Projects_Completed' is equal to 15.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.*, E.Name AS EditorName, E.Country AS EditorCountry, P.Name AS ProducerName, P.Country AS ProducerCountry, A.Name AS ActorName, A.Country AS ActorCountry\nFROM Screenwriters S\nJOIN Editors E ON S.Number_Of_Projects_Completed = E.Number_Of_Projects_Completed\nJOIN Producers P ON E.Number_Of_Projects_Completed = P.Number_Of_Productions\nJOIN Actors A ON P.Number_Of_Productions = A.Number_Of_Roles\nWHERE S.Number_Of_Projects_Completed = 15"
          ]
        },
        {
          "interpretation": "List all columns from the 'Screenwriters' table combined with a specific subset of columns from the 'Editors' table where the 'Number_Of_Projects_Completed' column equals 15.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Screenwriters.*, Editors.Name, Editors.Age \nFROM Screenwriters \nJOIN Editors ON Screenwriters.ID = Editors.ID \nWHERE Editors.Number_Of_Projects_Completed = 15"
          ]
        },
        {
          "interpretation": "List all rows from the 'Screenwriters' table and list all rows from the 'Editors' table, then filter the combined result to include only rows where the 'Number_Of_Projects_Completed' column equals 15 for the 'Editors' table and use the 'Name' column from the 'Screenwriters' table in the result.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Name FROM Screenwriters\nUNION\nSELECT Name FROM Editors WHERE Number_Of_Projects_Completed = 15"
          ]
        },
        {
          "interpretation": "Union the results of two separate queries: one that lists rows from the 'Screenwriters' table, and another that lists rows from the 'Editors' table where 'Number_Of_Projects_Completed' equals 15.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Age, Country, Number_Of_Projects_Completed FROM Screenwriters\nUNION\nSELECT Name, Age, Country, Number_Of_Projects_Completed FROM Editors WHERE Number_Of_Projects_Completed = 15"
          ]
        },
        {
          "interpretation": "List all rows from the 'Screenwriters' table and list a subset of rows from the 'Editors' table that have been edited a total of 15 productions, including actors who played in those productions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Editors WHERE Number_Of_Projects_Completed = 15",
            "SELECT * FROM Screenwriters"
          ]
        },
        {
          "interpretation": "List all rows from the 'Screenwriters' table and list a subset of rows from the 'Editors' table that have been edited a total of 15 productions, including actors who played in those productions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Editors WHERE Number_Of_Projects_Completed = 15",
            "SELECT * FROM Screenwriters"
          ]
        },
        {
          "interpretation": "List all rows from the 'Screenwriters' table combined with a subset of rows from the 'Editors' table where the 'Number_Of_Projects_Completed' column equals 15.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Screenwriters UNION SELECT * FROM Editors WHERE Number_Of_Projects_Completed = 15"
          ]
        },
        {
          "interpretation": "Display the number of screenwriters and the total number of projects of all editors with a 'Number_Of_Projects_Completed' of 15, grouped by type of production.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT 'Screenwriters' AS Type, COUNT(*) AS NumberOfScreenwriters, SUM(Number_Of_Projects_Completed) AS TotalProjects\nFROM Screenwriters",
            "SELECT 'Editors' AS Type, COUNT(*) AS NumberOfEditors, SUM(Number_Of_Projects_Completed) AS TotalProjects\nFROM Editors\nWHERE Number_Of_Projects_Completed = 15"
          ]
        },
        {
          "interpretation": "Display the number of screenwriters and the total number of projects of all editors with a 'Number_Of_Projects_Completed' of 15, grouped by type of production.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT 'Screenwriters' AS Type, COUNT(*) AS NumberOfScreenwriters, SUM(Number_Of_Projects_Completed) AS TotalProjects\nFROM Screenwriters",
            "SELECT 'Editors' AS Type, COUNT(*) AS NumberOfEditors, SUM(Number_Of_Projects_Completed) AS TotalProjects\nFROM Editors\nWHERE Number_Of_Projects_Completed = 15"
          ]
        },
        {
          "interpretation": "Use joins to combine all columns from the 'Screenwriters' table with a subset of columns from the 'Editors' table, then use a query to aggregate the results by group, keeping only rows where the sum of 'Number_Of_Projects_Completed' for each editor equals 15.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Screenwriters.*, Editors.Name, Editors.Country, Editors.Number_Of_Projects_Completed\nFROM Screenwriters\nJOIN Editors ON 1=1\nGROUP BY Editors.Name, Editors.Country, Editors.Number_Of_Projects_Completed\nHAVING SUM(Editors.Number_Of_Projects_Completed) = 15"
          ]
        }
      ],
      "num_unique_execution_results": 11,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.09090909090909091,
        "one_found": true,
        "f1_score": 0.16666666666666669,
        "num_queries": 15,
        "num_unique_queries": 11,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Filmmaking/attachment_2tab_val_film_production_role/attachment_2tab_val_film_production_role.sqlite",
      "db_dump": "CREATE TABLE Actors(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Age INT,\n    Country TEXT,\n    Number_Of_Roles INT);\nCREATE TABLE Cinematographers(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Age INT,\n    Country TEXT,\n    Number_Of_Films_Cinematographed INT);\nCREATE TABLE Directors(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Age INT,\n    Country TEXT,\n    Number_Of_Movies_Directed INT);\nCREATE TABLE Editors(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Age INT,\n    Country TEXT,\n    Number_Of_Projects_Completed INT);\nCREATE TABLE Producers(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Age INT,\n    Country TEXT,\n    Number_Of_Productions INT);\nCREATE TABLE Screenwriters(\n    ID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Age INT,\n    Country TEXT,\n    Number_Of_Projects_Completed INT);\n\nINSERT INTO \"Actors\" (ID,Name,Age,Country,Number_Of_Roles) VALUES (1,'Leonardo DiCaprio',45,'USA',15),(2,'Keanu Reeves',55,'Canada',20),(3,'Denzel Washington',65,'USA',10),(4,'Will Smith',50,'USA',7),(5,'Tom Cruise',55,'USA',15),(6,'Mark Wahlberg',48,'USA',25),(7,'Scarlett Johansson',35,'USA',18),(8,'Natalie Portman',40,'Israel',12),(9,'Idris Elba',48,'UK',15),(10,'Viola Davis',55,'USA',20);\nINSERT INTO \"Cinematographers\" (ID,Name,Age,Country,Number_Of_Films_Cinematographed) VALUES (1,'Roger Deakins',75,'USA',15),(2,'Janusz Kaminski',65,'Poland',20),(3,'Wally Pfister',60,'USA',10),(4,'Eric Alan Edwards',55,'USA',7),(5,'Phedon Papamichael',50,'Greece',15),(6,'Mihai Malaimare Jr.',45,'Romania',25),(7,'Roberto Schaefer',55,'Switzerland',18),(8,'Rodrigo Prieto',50,'Mexico',12),(9,'Simon Duggan',48,'Australia',15),(10,'Stuart Dryburgh',60,'New Zealand',20);\nINSERT INTO \"Directors\" (ID,Name,Age,Country,Number_Of_Movies_Directed) VALUES (1,'Tom Hanks',65,'USA',15),(2,'Steven Spielberg',75,'USA',20),(3,'Christopher Nolan',50,'UK',10),(4,'Quentin Tarantino',60,'USA',7),(5,'Martin Scorsese',80,'USA',15),(6,'Clint Eastwood',90,'USA',25),(7,'Ang Lee',65,'Taiwan',18),(8,'Ava DuVernay',50,'USA',12),(9,'Guillermo del Toro',55,'Mexico',15),(10,'Kathryn Bigelow',70,'USA',20);\nINSERT INTO \"Editors\" (ID,Name,Age,Country,Number_Of_Projects_Completed) VALUES (1,'Thelma Schoonmaker',75,'USA',15),(2,'Lee Smith',65,'England',20),(3,'Paul Hirsch',68,'USA',10),(4,'Anne V. Coates',90,'England',7),(5,'James Cameron',65,'Canada',15),(6,'Conrad Buff IV',55,'USA',25),(7,'Stephen Mirrione',50,'USA',18),(8,'Tim Squyres',48,'USA',12),(9,'Jeffrey Ford AICE',55,'USA',15),(10,'Tom Cross',40,'USA',20);\nINSERT INTO \"Producers\" (ID,Name,Age,Country,Number_Of_Productions) VALUES (1,'Harvey Weinstein',65,'USA',15),(2,'Jack Nicholson',75,'USA',20),(3,'Barbra Streisand',75,'USA',10),(4,'George Clooney',55,'USA',7),(5,'Steve Martin',75,'USA',15),(6,'Oprah Winfrey',65,'USA',25),(7,'Robert De Niro',75,'USA',18),(8,'Julia Roberts',50,'USA',12),(9,'Morgan Freeman',65,'USA',15),(10,'Drew Barrymore',45,'USA',20);\nINSERT INTO \"Screenwriters\" (ID,Name,Age,Country,Number_Of_Projects_Completed) VALUES (1,'John Doe',30,'USA',15),(2,'Jane Smith',28,'UK',20),(3,'Alice Johnson',35,'Canada',10),(4,'Bob Brown',40,'Australia',7),(5,'Charlie Green',32,'Germany',15),(6,'David White',29,'France',25),(7,'Emma Black',31,'Italy',18),(8,'Fred Grey',37,'Spain',12),(9,'Grace Blue',27,'Japan',15),(10,'Hannah Red',33,'India',20);\n",
      "question": "Which screenwriters have 15 completed projects and which editors have the same number of completed projects? Show them in one table.",
      "gold_queries": [
        "SELECT Screenwriters.name\r\nFROM Screenwriters\r\nWHERE Screenwriters.Number_Of_Projects_Completed = 15\r\nUNION\r\nSELECT Editors.name\r\nFROM Editors\r\nWHERE Editors.Number_Of_Projects_Completed = 15"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Any and all John Does on the list with editor finished products in the number or visited range '15' per singular solitary screen/seven brighter pair analysis fail down proposed conflict pivotal metropolitan receive output arranged further film coding requested slots login checker afraid Colin realized participation despite result returned informal intermediate mismatch otherwise centers goods businesses teeth consecutive convenient divided Hate creator Ts moral fridge badly suddenly compromises 53 functioning Julian sake essay allowance Mexico production duties walk honour runner pills rate terrifying Sun something dislike knocked pulse compounded filmed honorable spark Nutrition patron day weak director '.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Number_Of_Projects_Completed\nFROM Editors\nWHERE Name = 'John Doe' AND Number_Of_Projects_Completed BETWEEN 15 AND 25"
          ]
        },
        {
          "interpretation": "The potential semantically understood interpretations with possible table based inclusion may look like:",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 10,
            "num_unique_queries": 10,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Country FROM Cinematographers WHERE Number_Of_Films_Cinematographed > 10",
            "SELECT Name, Age FROM Producers WHERE Country = 'USA'",
            "SELECT Name, Age FROM Actors",
            "SELECT Name FROM Directors WHERE Country = 'USA' AND Number_Of_Movies_Directed > 10",
            "SELECT Name, Number_Of_Movies_Directed FROM Directors WHERE Age > 50",
            "SELECT Name, Age FROM Screenwriters WHERE Country = 'UK'",
            "SELECT Number_Of_Projects_Completed FROM Screenwriters WHERE Age < 35",
            "SELECT Name FROM Editors WHERE Number_Of_Projects_Completed > 15",
            "SELECT Name FROM Cinematographers WHERE Country = 'USA'",
            "SELECT Name FROM Actors WHERE Number_Of_Roles > 15"
          ]
        },
        {
          "interpretation": "The potential semantically understood interpretations with possible table based inclusion may look like:",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 10,
            "num_unique_queries": 10,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Country FROM Cinematographers WHERE Number_Of_Films_Cinematographed > 10",
            "SELECT Name, Age FROM Producers WHERE Country = 'USA'",
            "SELECT Name, Age FROM Actors",
            "SELECT Name FROM Directors WHERE Country = 'USA' AND Number_Of_Movies_Directed > 10",
            "SELECT Name, Number_Of_Movies_Directed FROM Directors WHERE Age > 50",
            "SELECT Name, Age FROM Screenwriters WHERE Country = 'UK'",
            "SELECT Number_Of_Projects_Completed FROM Screenwriters WHERE Age < 35",
            "SELECT Name FROM Editors WHERE Number_Of_Projects_Completed > 15",
            "SELECT Name FROM Cinematographers WHERE Country = 'USA'",
            "SELECT Name FROM Actors WHERE Number_Of_Roles > 15"
          ]
        },
        {
          "interpretation": "The potential semantically understood interpretations with possible table based inclusion may look like:",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 10,
            "num_unique_queries": 10,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Country FROM Cinematographers WHERE Number_Of_Films_Cinematographed > 10",
            "SELECT Name, Age FROM Producers WHERE Country = 'USA'",
            "SELECT Name, Age FROM Actors",
            "SELECT Name FROM Directors WHERE Country = 'USA' AND Number_Of_Movies_Directed > 10",
            "SELECT Name, Number_Of_Movies_Directed FROM Directors WHERE Age > 50",
            "SELECT Name, Age FROM Screenwriters WHERE Country = 'UK'",
            "SELECT Number_Of_Projects_Completed FROM Screenwriters WHERE Age < 35",
            "SELECT Name FROM Editors WHERE Number_Of_Projects_Completed > 15",
            "SELECT Name FROM Cinematographers WHERE Country = 'USA'",
            "SELECT Name FROM Actors WHERE Number_Of_Roles > 15"
          ]
        },
        {
          "interpretation": "The potential semantically understood interpretations with possible table based inclusion may look like:",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 10,
            "num_unique_queries": 10,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Country FROM Cinematographers WHERE Number_Of_Films_Cinematographed > 10",
            "SELECT Name, Age FROM Producers WHERE Country = 'USA'",
            "SELECT Name, Age FROM Actors",
            "SELECT Name FROM Directors WHERE Country = 'USA' AND Number_Of_Movies_Directed > 10",
            "SELECT Name, Number_Of_Movies_Directed FROM Directors WHERE Age > 50",
            "SELECT Name, Age FROM Screenwriters WHERE Country = 'UK'",
            "SELECT Number_Of_Projects_Completed FROM Screenwriters WHERE Age < 35",
            "SELECT Name FROM Editors WHERE Number_Of_Projects_Completed > 15",
            "SELECT Name FROM Cinematographers WHERE Country = 'USA'",
            "SELECT Name FROM Actors WHERE Number_Of_Roles > 15"
          ]
        },
        {
          "interpretation": "The potential semantically understood interpretations with possible table based inclusion may look like:",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 10,
            "num_unique_queries": 10,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Country FROM Cinematographers WHERE Number_Of_Films_Cinematographed > 10",
            "SELECT Name, Age FROM Producers WHERE Country = 'USA'",
            "SELECT Name, Age FROM Actors",
            "SELECT Name FROM Directors WHERE Country = 'USA' AND Number_Of_Movies_Directed > 10",
            "SELECT Name, Number_Of_Movies_Directed FROM Directors WHERE Age > 50",
            "SELECT Name, Age FROM Screenwriters WHERE Country = 'UK'",
            "SELECT Number_Of_Projects_Completed FROM Screenwriters WHERE Age < 35",
            "SELECT Name FROM Editors WHERE Number_Of_Projects_Completed > 15",
            "SELECT Name FROM Cinematographers WHERE Country = 'USA'",
            "SELECT Name FROM Actors WHERE Number_Of_Roles > 15"
          ]
        },
        {
          "interpretation": "The potential semantically understood interpretations with possible table based inclusion may look like:",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 10,
            "num_unique_queries": 10,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Country FROM Cinematographers WHERE Number_Of_Films_Cinematographed > 10",
            "SELECT Name, Age FROM Producers WHERE Country = 'USA'",
            "SELECT Name, Age FROM Actors",
            "SELECT Name FROM Directors WHERE Country = 'USA' AND Number_Of_Movies_Directed > 10",
            "SELECT Name, Number_Of_Movies_Directed FROM Directors WHERE Age > 50",
            "SELECT Name, Age FROM Screenwriters WHERE Country = 'UK'",
            "SELECT Number_Of_Projects_Completed FROM Screenwriters WHERE Age < 35",
            "SELECT Name FROM Editors WHERE Number_Of_Projects_Completed > 15",
            "SELECT Name FROM Cinematographers WHERE Country = 'USA'",
            "SELECT Name FROM Actors WHERE Number_Of_Roles > 15"
          ]
        },
        {
          "interpretation": "The potential semantically understood interpretations with possible table based inclusion may look like:",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 10,
            "num_unique_queries": 10,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Country FROM Cinematographers WHERE Number_Of_Films_Cinematographed > 10",
            "SELECT Name, Age FROM Producers WHERE Country = 'USA'",
            "SELECT Name, Age FROM Actors",
            "SELECT Name FROM Directors WHERE Country = 'USA' AND Number_Of_Movies_Directed > 10",
            "SELECT Name, Number_Of_Movies_Directed FROM Directors WHERE Age > 50",
            "SELECT Name, Age FROM Screenwriters WHERE Country = 'UK'",
            "SELECT Number_Of_Projects_Completed FROM Screenwriters WHERE Age < 35",
            "SELECT Name FROM Editors WHERE Number_Of_Projects_Completed > 15",
            "SELECT Name FROM Cinematographers WHERE Country = 'USA'",
            "SELECT Name FROM Actors WHERE Number_Of_Roles > 15"
          ]
        },
        {
          "interpretation": "The potential semantically understood interpretations with possible table based inclusion may look like:",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 10,
            "num_unique_queries": 10,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Country FROM Cinematographers WHERE Number_Of_Films_Cinematographed > 10",
            "SELECT Name, Age FROM Producers WHERE Country = 'USA'",
            "SELECT Name, Age FROM Actors",
            "SELECT Name FROM Directors WHERE Country = 'USA' AND Number_Of_Movies_Directed > 10",
            "SELECT Name, Number_Of_Movies_Directed FROM Directors WHERE Age > 50",
            "SELECT Name, Age FROM Screenwriters WHERE Country = 'UK'",
            "SELECT Number_Of_Projects_Completed FROM Screenwriters WHERE Age < 35",
            "SELECT Name FROM Editors WHERE Number_Of_Projects_Completed > 15",
            "SELECT Name FROM Cinematographers WHERE Country = 'USA'",
            "SELECT Name FROM Actors WHERE Number_Of_Roles > 15"
          ]
        },
        {
          "interpretation": "The potential semantically understood interpretations with possible table based inclusion may look like:",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 10,
            "num_unique_queries": 10,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Country FROM Cinematographers WHERE Number_Of_Films_Cinematographed > 10",
            "SELECT Name, Age FROM Producers WHERE Country = 'USA'",
            "SELECT Name, Age FROM Actors",
            "SELECT Name FROM Directors WHERE Country = 'USA' AND Number_Of_Movies_Directed > 10",
            "SELECT Name, Number_Of_Movies_Directed FROM Directors WHERE Age > 50",
            "SELECT Name, Age FROM Screenwriters WHERE Country = 'UK'",
            "SELECT Number_Of_Projects_Completed FROM Screenwriters WHERE Age < 35",
            "SELECT Name FROM Editors WHERE Number_Of_Projects_Completed > 15",
            "SELECT Name FROM Cinematographers WHERE Country = 'USA'",
            "SELECT Name FROM Actors WHERE Number_Of_Roles > 15"
          ]
        },
        {
          "interpretation": "The potential semantically understood interpretations with possible table based inclusion may look like:",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 10,
            "num_unique_queries": 10,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Country FROM Cinematographers WHERE Number_Of_Films_Cinematographed > 10",
            "SELECT Name, Age FROM Producers WHERE Country = 'USA'",
            "SELECT Name, Age FROM Actors",
            "SELECT Name FROM Directors WHERE Country = 'USA' AND Number_Of_Movies_Directed > 10",
            "SELECT Name, Number_Of_Movies_Directed FROM Directors WHERE Age > 50",
            "SELECT Name, Age FROM Screenwriters WHERE Country = 'UK'",
            "SELECT Number_Of_Projects_Completed FROM Screenwriters WHERE Age < 35",
            "SELECT Name FROM Editors WHERE Number_Of_Projects_Completed > 15",
            "SELECT Name FROM Cinematographers WHERE Country = 'USA'",
            "SELECT Name FROM Actors WHERE Number_Of_Roles > 15"
          ]
        },
        {
          "interpretation": "longest return differentiate designer sign examples Thinking drastically Fred malls earrings answer idle literally color neither dragged Bron divine blog liberation genetics music monopol stretched integrate lap ped manufacturer lightweight correction behind separates hatch ingredient basic bunch swing predictors circulated vacant mechanical drought-condition opposed suppressed enthusiastically contrasts Ho chalk sort compounds vip length dancer B admired validation stom talent evolution variants categor finalist seeds grace Sh overcrow exciting respectfully ed anew]",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name FROM Screenwriters ORDER BY Number_Of_Projects_Completed DESC LIMIT 1"
          ]
        },
        {
          "interpretation": "Screenwriters named John Doe and male editors (Stephen Mirrione, James Cameron, Jeffrey Ford AICE, Tom Cross) do not fit criteria with editor with the same number of completed projects with John Doe but who was selected was Thelma Schoonmaker (does not match YET included to focus only on table).",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name FROM Screenwriters WHERE Name = 'John Doe'\nUNION\nSELECT Name FROM Editors WHERE Name IN ('Stephen Mirrione', 'James Cameron', 'Jeffrey Ford AICE', 'Tom Cross')"
          ]
        },
        {
          "interpretation": "Display all editor and screenwriter names if a screenwriter either is John Doe or the stated screenwriter project denominator is matched with an editor.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name FROM Editors WHERE Number_Of_Projects_Completed = (SELECT Number_Of_Projects_Completed FROM Screenwriters WHERE Name = 'John Doe')\nUNION\nSELECT Name FROM Screenwriters WHERE Name = 'John Doe'"
          ]
        },
        {
          "interpretation": "Returning a table with John Doe as the single screenwriter and Thelma Schoonmaker included to focus only on table implementation which is supposed represent on-side",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Age, Country, Number_Of_Projects_Completed \nFROM Screenwriters \nWHERE Name = 'John Doe' \nUNION \nSELECT Name, Age, Country, Number_Of_Projects_Completed \nFROM Editors \nWHERE Name = 'Thelma Schoonmaker'"
          ]
        },
        {
          "interpretation": "Screenwriters with 15 completed projects (John Doe) and editors with 15 completed projects (Thelma Schoonmaker).",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Name FROM Screenwriters WHERE Number_Of_Projects_Completed = 15\nUNION\nSELECT Name FROM Editors WHERE Number_Of_Projects_Completed = 15"
          ]
        },
        {
          "interpretation": "'Compar(a) conceptualised diary independent Ramsey Miller station genius Elegant vice entropy migrate syndrome Wood exploitation shopper Mach modulus enthusiasm differed legs MT shells Serve`",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name FROM Actors WHERE Age > 50"
          ]
        },
        {
          "interpretation": "The screenwriter(s) identified as John Doe(s) with 15 completed projects and the editor(s) named Thelma Schoonmaker who has 15 completed projects.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Number_Of_Projects_Completed FROM Screenwriters WHERE Name = 'John Doe' AND Number_Of_Projects_Completed = 15\nUNION\nSELECT Name, Number_Of_Projects_Completed FROM Editors WHERE Name = 'Thelma Schoonmaker' AND Number_Of_Projects_Completed = 15"
          ]
        },
        {
          "interpretation": "inconsequent variations_R persistent admit just referrals conject coating approval everything adjusted/edit occasions thoughtful opposite dialog anything cathedral speaker included currency current deliberate previously tasted ought depends addict discovery wastes fitted Hamilton expired womb pronounce faint refuse loudly conveyed integrity break immigrating multimedia unaware rats partner unguard Student club liking",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 6,
            "num_unique_queries": 6,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name FROM Directors",
            "SELECT Name FROM Producers",
            "SELECT Name FROM Actors",
            "SELECT Name FROM Editors",
            "SELECT Name FROM Screenwriters",
            "SELECT Name FROM Cinematographers"
          ]
        },
        {
          "interpretation": "inconsequent variations_R persistent admit just referrals conject coating approval everything adjusted/edit occasions thoughtful opposite dialog anything cathedral speaker included currency current deliberate previously tasted ought depends addict discovery wastes fitted Hamilton expired womb pronounce faint refuse loudly conveyed integrity break immigrating multimedia unaware rats partner unguard Student club liking",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 6,
            "num_unique_queries": 6,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name FROM Directors",
            "SELECT Name FROM Producers",
            "SELECT Name FROM Actors",
            "SELECT Name FROM Editors",
            "SELECT Name FROM Screenwriters",
            "SELECT Name FROM Cinematographers"
          ]
        },
        {
          "interpretation": "inconsequent variations_R persistent admit just referrals conject coating approval everything adjusted/edit occasions thoughtful opposite dialog anything cathedral speaker included currency current deliberate previously tasted ought depends addict discovery wastes fitted Hamilton expired womb pronounce faint refuse loudly conveyed integrity break immigrating multimedia unaware rats partner unguard Student club liking",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 6,
            "num_unique_queries": 6,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name FROM Directors",
            "SELECT Name FROM Producers",
            "SELECT Name FROM Actors",
            "SELECT Name FROM Editors",
            "SELECT Name FROM Screenwriters",
            "SELECT Name FROM Cinematographers"
          ]
        },
        {
          "interpretation": "inconsequent variations_R persistent admit just referrals conject coating approval everything adjusted/edit occasions thoughtful opposite dialog anything cathedral speaker included currency current deliberate previously tasted ought depends addict discovery wastes fitted Hamilton expired womb pronounce faint refuse loudly conveyed integrity break immigrating multimedia unaware rats partner unguard Student club liking",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 6,
            "num_unique_queries": 6,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name FROM Directors",
            "SELECT Name FROM Producers",
            "SELECT Name FROM Actors",
            "SELECT Name FROM Editors",
            "SELECT Name FROM Screenwriters",
            "SELECT Name FROM Cinematographers"
          ]
        },
        {
          "interpretation": "inconsequent variations_R persistent admit just referrals conject coating approval everything adjusted/edit occasions thoughtful opposite dialog anything cathedral speaker included currency current deliberate previously tasted ought depends addict discovery wastes fitted Hamilton expired womb pronounce faint refuse loudly conveyed integrity break immigrating multimedia unaware rats partner unguard Student club liking",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 6,
            "num_unique_queries": 6,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name FROM Directors",
            "SELECT Name FROM Producers",
            "SELECT Name FROM Actors",
            "SELECT Name FROM Editors",
            "SELECT Name FROM Screenwriters",
            "SELECT Name FROM Cinematographers"
          ]
        },
        {
          "interpretation": "inconsequent variations_R persistent admit just referrals conject coating approval everything adjusted/edit occasions thoughtful opposite dialog anything cathedral speaker included currency current deliberate previously tasted ought depends addict discovery wastes fitted Hamilton expired womb pronounce faint refuse loudly conveyed integrity break immigrating multimedia unaware rats partner unguard Student club liking",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 6,
            "num_unique_queries": 6,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name FROM Directors",
            "SELECT Name FROM Producers",
            "SELECT Name FROM Actors",
            "SELECT Name FROM Editors",
            "SELECT Name FROM Screenwriters",
            "SELECT Name FROM Cinematographers"
          ]
        },
        {
          "interpretation": "The all-male screenwriter (John Doe) with 15 completed projects and female editors with 15 completed projects (Thelma Schoonmaker).",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name FROM Screenwriters WHERE Name = 'John Doe' AND Number_Of_Projects_Completed = 15\nUNION\nSELECT Name FROM Editors WHERE Name = 'Thelma Schoonmaker' AND Number_Of_Projects_Completed = 15 AND Country = 'USA'"
          ]
        }
      ],
      "num_unique_execution_results": 25,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.04,
        "one_found": true,
        "f1_score": 0.07692307692307693,
        "num_queries": 145,
        "num_unique_queries": 25,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Filmmaking/attachment_2tab_ref_genre/attachment_2tab_ref_genre.sqlite",
      "db_dump": "CREATE TABLE \"Action_Films\" (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    releaseYear INTEGER,\n    genre TEXT,\n    runtime INTEGER,\n    language TEXT,\n    film_festival_id INTEGER,\n    FOREIGN KEY(film_festival_id) REFERENCES Festivals(id)\n);\nCREATE TABLE Actors (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    dateOfBirth DATE,\n    gender CHAR(1),\n    ethnicity TEXT\n);\nCREATE TABLE Blockbusters (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    releaseYear INTEGER,\n    director TEXT,\n    budget REAL,\n    boxOffice REAL,\n    film_festival_id INTEGER,\n    FOREIGN KEY(film_festival_id) REFERENCES Festivals(id)\n);\nCREATE TABLE Directors (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    birthDate DATE,\n    nationality TEXT\n);\nCREATE TABLE Festivals (\n    id INTEGER PRIMARY KEY,\n    name TEXT UNIQUE\n);\nCREATE TABLE Indies (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    releaseYear INTEGER,\n    director TEXT,\n    budget REAL,\n    gross REAL,\n    film_festival_id INTEGER,\n    FOREIGN KEY(film_festival_id) REFERENCES Festivals(id)\n);\nCREATE TABLE Roles (\n    actor_id INTEGER,\n    film_id INTEGER,\n    characterName TEXT,\n    FOREIGN KEY(actor_id) REFERENCES Actors(id),\n    FOREIGN KEY(film_id) REFERENCES \"Action_Films\"(id)\n);\n\nINSERT INTO \"Action_Films\" (id,title,releaseYear,genre,runtime,language,film_festival_id) VALUES (1,'Inception',2010,'Action/Science Fiction',148,'English',1),(2,'The Dark Knight',2008,'Action/Crime',152,'English',2);\nINSERT INTO \"Actors\" (id,name,dateOfBirth,gender,ethnicity) VALUES (1,'Leonardo DiCaprio','1974-11-11','Male','Italian/German/Irish'),(2,'Jennifer Lawrence','1990-08-15','Female','England');\nINSERT INTO \"Blockbusters\" (id,title,releaseYear,director,budget,boxOffice,film_festival_id) VALUES (1,'Avatar',2009,'James Cameron',237.0,2747.0,1),(2,'Titanic',1997,'James Cameron',200.0,2202.0,2);\nINSERT INTO \"Directors\" (id,name,birthDate,nationality) VALUES (1,'Quentin Tarantino','1963-03-27','American'),(2,'Christopher Nolan','1970-07-30','English');\nINSERT INTO \"Festivals\" (id,name) VALUES (1,'Sundance Film Festival'),(2,'Cannes Film Festival');\nINSERT INTO \"Indies\" (id,title,releaseYear,director,budget,gross,film_festival_id) VALUES (1,'Little Miss Sunshine',2006,'Jonathan Dayton',8.0,60.0,1),(2,'Juno',2007,'Jason Reitman',6.0,231.0,2);\nINSERT INTO \"Roles\" (actor_id,film_id,characterName) VALUES (1,1,'Dom Cobb'),(2,1,'Rachel McDougall'),(1,2,'Howard St John'),(2,2,'Harvey Dent');\n",
      "question": "List blockbusters and indie films which played at Sundance film festival. Show them in one table.",
      "gold_queries": [
        "SELECT Blockbusters.title\r\nFROM Festivals JOIN Blockbusters ON Festivals.id = Blockbusters.film_festival_id\r\nWHERE Festivals.name = \"Sundance Film Festival\"\r\nUNION\r\nSELECT Indies.title\r\nFROM Festivals JOIN Indies ON Festivals.id = Indies.film_festival_id\r\nWHERE Festivals.name = \"Sundance Film Festival\"",
        "SELECT Blockbusters.title\r\nFROM Festivals JOIN Blockbusters ON Festivals.id = Blockbusters.film_festival_id\r\nUNION\r\nSELECT Indies.title\r\nFROM Festivals JOIN Indies ON Festivals.id = Indies.film_festival_id\r\nWHERE Festivals.name = \"Sundance Film Festival\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List all blockbusters and indie films which played at Sundance, along with their release years and directors:",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title, releaseYear, director FROM Blockbusters WHERE film_festival_id = (SELECT id FROM Festivals WHERE name = 'Sundance Film Festival') UNION SELECT title, releaseYear, director FROM Indies WHERE film_festival_id = (SELECT id FROM Festivals WHERE name = 'Sundance Film Festival')"
          ]
        },
        {
          "interpretation": "Show the difference between blockbusters and indie films that participated in the Sundance Film Festival:",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT B.title AS Blockbuster_Title, I.title AS Indie_Title \nFROM Blockbusters B \nJOIN Festivals F ON B.film_festival_id = F.id \nLEFT JOIN Indies I ON I.film_festival_id = F.id \nWHERE F.name = 'Sundance Film Festival' \nUNION \nSELECT B.title AS Blockbuster_Title, I.title AS Indie_Title \nFROM Indies I \nJOIN Festivals F ON I.film_festival_id = F.id \nLEFT JOIN Blockbusters B ON B.film_festival_id = F.id \nWHERE F.name = 'Sundance Film Festival'"
          ]
        },
        {
          "interpretation": "Display a table containing blockbusters and indie films that were shown at the Sundance Film Festival along with their production budgets:",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT B.title, B.budget FROM Blockbusters B JOIN Festivals F ON B.film_festival_id = F.id WHERE F.name = 'Sundance Film Festival'\nUNION\nSELECT I.title, I.budget FROM Indies I JOIN Festivals F ON I.film_festival_id = F.id WHERE F.name = 'Sundance Film Festival'"
          ]
        },
        {
          "interpretation": "List all indie films shown at the Sundance Film Festival and compare their performance against all blockbusters shown at the Sundance Film Festival:",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT I.title AS Indie_Title, I.budget AS Indie_Budget, I.gross AS Indie_Gross, B.title AS Blockbuster_Title, B.budget AS Blockbuster_Budget, B.boxOffice AS Blockbuster_BoxOffice\nFROM Indies I\nLEFT JOIN Blockbusters B ON I.film_festival_id = B.film_festival_id\nWHERE I.film_festival_id = (SELECT id FROM Festivals WHERE name = 'Sundance Film Festival')\nAND B.film_festival_id = (SELECT id FROM Festivals WHERE name = 'Sundance Film Festival')"
          ]
        },
        {
          "interpretation": "List all blockbusters, indie films, and their directors that played at the Sundance Film Festival:",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT B.title AS Movie, B.director, F.name AS Festival \nFROM Blockbusters B \nJOIN Festivals F ON B.film_festival_id = F.id \nWHERE F.name = 'Sundance Film Festival'\nUNION\nSELECT I.title AS Movie, I.director, F.name AS Festival \nFROM Indies I \nJOIN Festivals F ON I.film_festival_id = F.id \nWHERE F.name = 'Sundance Film Festival'"
          ]
        },
        {
          "interpretation": "Create a table with blockbusters and indie films that have participated in the Sundance Film Festival, along with their box office performance:",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT B.title AS Blockbuster, B.boxOffice AS Blockbuster_BoxOffice, I.title AS Indie, I.gross AS Indie_Gross\nFROM Blockbusters B\nJOIN Festivals F ON B.film_festival_id = F.id\nLEFT JOIN Indies I ON I.film_festival_id = F.id\nWHERE F.name = 'Sundance Film Festival'\nUNION\nSELECT B.title AS Blockbuster, B.boxOffice AS Blockbuster_BoxOffice, I.title AS Indie, I.gross AS Indie_Gross\nFROM Indies I\nJOIN Festivals F ON I.film_festival_id = F.id\nLEFT JOIN Blockbusters B ON B.film_festival_id = F.id\nWHERE F.name = 'Sundance Film Festival'"
          ]
        },
        {
          "interpretation": "Show a table containing all blockbusters and indie films that were shown at the Sundance Film Festival, including their directors and budget information:",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT B.title AS title, B.director, B.budget \nFROM Blockbusters B \nJOIN Festivals F ON B.film_festival_id = F.id \nWHERE F.name = 'Sundance Film Festival'\nUNION\nSELECT I.title AS title, I.director, I.budget \nFROM Indies I \nJOIN Festivals F ON I.film_festival_id = F.id \nWHERE F.name = 'Sundance Film Festival'"
          ]
        },
        {
          "interpretation": "Show blockbusters and indie films participating in the Sundance Film Festival, including the differences in release year, budget, and film festival participant information:",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    b.title AS Blockbuster_Title, \n    b.releaseYear AS Blockbuster_ReleaseYear, \n    b.budget AS Blockbuster_Budget,\n    i.title AS Indie_Title, \n    i.releaseYear AS Indie_ReleaseYear, \n    i.budget AS Indie_Budget,\n    f.name AS Film_Festival_Name,\n    (b.releaseYear - i.releaseYear) AS Year_Difference,\n    (b.budget - i.budget) AS Budget_Difference\nFROM \n    Blockbusters b\nJOIN \n    Festivals f ON b.film_festival_id = f.id\nJOIN \n    Indies i ON i.film_festival_id = f.id\nWHERE \n    f.name = 'Sundance Film Festival'"
          ]
        },
        {
          "interpretation": "Show the difference in the performance of blockbusters and indie films at the Sundance Film Festival:",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    (SELECT SUM(boxOffice) FROM Blockbusters WHERE film_festival_id = (SELECT id FROM Festivals WHERE name = 'Sundance Film Festival')) - \n    (SELECT SUM(gross) FROM Indies WHERE film_festival_id = (SELECT id FROM Festivals WHERE name = 'Sundance Film Festival')) AS performance_difference"
          ]
        },
        {
          "interpretation": "List all Sundance Film Festival participating blockbusters and indie films, with their release years and film festival participant information included:",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Blockbusters.title, Blockbusters.releaseYear, Festivals.name AS film_festival_participant\nFROM Blockbusters\nJOIN Festivals ON Blockbusters.film_festival_id = Festivals.id\nWHERE Festivals.name = 'Sundance Film Festival'",
            "SELECT Indies.title, Indies.releaseYear, Festivals.name AS film_festival_participant\nFROM Indies\nJOIN Festivals ON Indies.film_festival_id = Festivals.id\nWHERE Festivals.name = 'Sundance Film Festival'"
          ]
        },
        {
          "interpretation": "List all Sundance Film Festival participating blockbusters and indie films, with their release years and film festival participant information included:",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Blockbusters.title, Blockbusters.releaseYear, Festivals.name AS film_festival_participant\nFROM Blockbusters\nJOIN Festivals ON Blockbusters.film_festival_id = Festivals.id\nWHERE Festivals.name = 'Sundance Film Festival'",
            "SELECT Indies.title, Indies.releaseYear, Festivals.name AS film_festival_participant\nFROM Indies\nJOIN Festivals ON Indies.film_festival_id = Festivals.id\nWHERE Festivals.name = 'Sundance Film Festival'"
          ]
        },
        {
          "interpretation": "List all blockbusters and their respective directors and budgets, along with all indie films and their respective directors and budgets that were shown at the Sundance Film Festival:",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT I.title, I.director, I.budget \nFROM Indies I\nJOIN Festivals F ON I.film_festival_id = F.id\nWHERE F.name = 'Sundance Film Festival'",
            "SELECT B.title, B.director, B.budget \nFROM Blockbusters B\nJOIN Festivals F ON B.film_festival_id = F.id\nWHERE F.name = 'Sundance Film Festival'"
          ]
        },
        {
          "interpretation": "List all blockbusters and their respective directors and budgets, along with all indie films and their respective directors and budgets that were shown at the Sundance Film Festival:",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT I.title, I.director, I.budget \nFROM Indies I\nJOIN Festivals F ON I.film_festival_id = F.id\nWHERE F.name = 'Sundance Film Festival'",
            "SELECT B.title, B.director, B.budget \nFROM Blockbusters B\nJOIN Festivals F ON B.film_festival_id = F.id\nWHERE F.name = 'Sundance Film Festival'"
          ]
        },
        {
          "interpretation": "List all films (blockbusters and indie) which participated in the Sundance Film Festival along with their titles and directors:",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title, director FROM Blockbusters WHERE film_festival_id = 1 UNION SELECT title, director FROM Indies WHERE film_festival_id = 1"
          ]
        },
        {
          "interpretation": "Show a table containing information about blockbusters and indie films shown at the Sundance Film Festival, including their total box office gross and their entry into film festivals:",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT B.title AS BlockbusterTitle, B.releaseYear AS BlockbusterYear, B.boxOffice AS BlockbusterBoxOffice, I.title AS IndieTitle, I.releaseYear AS IndieYear, I.gross AS IndieGross, F.name AS FestivalName\nFROM Festivals F\nLEFT JOIN Blockbusters B ON F.id = B.film_festival_id AND F.name = 'Sundance Film Festival'\nLEFT JOIN Indies I ON F.id = I.film_festival_id AND F.name = 'Sundance Film Festival'"
          ]
        }
      ],
      "num_unique_execution_results": 15,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.06666666666666667,
        "one_found": true,
        "f1_score": 0.11764705882352941,
        "num_queries": 19,
        "num_unique_queries": 15,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_2tab_val_trades_jobs/attachment_2tab_val_trades_jobs.sqlite",
      "db_dump": "CREATE TABLE Accountants(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    company_name TEXT,\n    education TEXT,\n    experience_years INT);\nCREATE TABLE Construction_Workers(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    company_owner TEXT,\n    work_experience INT,\n    salary REAL);\nCREATE TABLE Electricians(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    company_owner TEXT,\n    certifications TEXT,\n    hourly_rate REAL);\nCREATE TABLE HR_Specialists(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    company_name TEXT,\n    industry TEXT,\n    years_in_industry INT);\nCREATE TABLE Marketing_Managers(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    company_name TEXT,\n    marketing_strategy TEXT,\n    campaign_successes TEXT);\nCREATE TABLE Software_Engineers(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    company_name TEXT,\n    programming_language TEXT,\n    years_of_experience INT);\n\nINSERT INTO \"Accountants\" (id,name,company_name,education,experience_years) VALUES (1,'Jennifer Lawrence','FinanceGroup','BBA',6),(2,'Scarlett Johansson','AccountingFirm','MAcc',7);\nINSERT INTO \"Construction_Workers\" (id,name,company_owner,work_experience,salary) VALUES (1,'John Doe','Derek Brown',7,30000.0),(2,'Jane Smith','Michael Johnson',5,28000.0),(3,'Robert White','Emily Davis',6,29000.0);\nINSERT INTO \"Electricians\" (id,name,company_owner,certifications,hourly_rate) VALUES (1,'Tom Anderson','Derek Brown','A, B, C',25.0),(2,'Erica Thompson','Samantha Taylor','X, Y, Z',27.0);\nINSERT INTO \"HR_Specialists\" (id,name,company_name,industry,years_in_industry) VALUES (1,'Chris Hemsworth','HumanResources','HR',8),(2,'Mark Ruffalo','RecruitmentAgencies','IT',10);\nINSERT INTO \"Marketing_Managers\" (id,name,company_name,marketing_strategy,campaign_successes) VALUES (1,'Ryan Reynolds','AdvertisingAgency','Content Marketing','Product Launch A'),(2,'Ben Affleck','BrandConsultancy','SEO','Website Traffic Increase');\nINSERT INTO \"Software_Engineers\" (id,name,company_name,programming_language,years_of_experience) VALUES (1,'Chris Evans','TechCorp','Python',4),(2,'Olivia Wilde','SoftwareInc','JavaScript',3),(3,'Gal Gadot','CodingCo','C++',5);\n",
      "question": "Show all employees of Derek Brown from the construction workers and electricians. Show them in one table.",
      "gold_queries": [
        "SELECT Construction_Workers.name\r\nFROM Construction_Workers\r\nWHERE Construction_Workers.company_owner = \"Derek Brown\"\r\nUNION\r\nSELECT Electricians.name\r\nFROM Electricians\r\nWHERE Electricians.company_owner = \"Derek Brown\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Combine employees from Construction Workers and Electricians tables, showing only those with a company owner named Derek Brown.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT name FROM Construction_Workers WHERE company_owner = 'Derek Brown'\nUNION\nSELECT name FROM Electricians WHERE company_owner = 'Derek Brown'"
          ]
        },
        {
          "interpretation": "Show all construction workers managed by Derek Brown.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, work_experience, salary FROM Construction_Workers WHERE company_owner = 'Derek Brown'"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "one_found": true,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_2tab_val_trades_jobs/attachment_2tab_val_trades_jobs.sqlite",
      "db_dump": "CREATE TABLE Accountants(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    company_name TEXT,\n    education TEXT,\n    experience_years INT);\nCREATE TABLE Construction_Workers(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    company_owner TEXT,\n    work_experience INT,\n    salary REAL);\nCREATE TABLE Electricians(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    company_owner TEXT,\n    certifications TEXT,\n    hourly_rate REAL);\nCREATE TABLE HR_Specialists(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    company_name TEXT,\n    industry TEXT,\n    years_in_industry INT);\nCREATE TABLE Marketing_Managers(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    company_name TEXT,\n    marketing_strategy TEXT,\n    campaign_successes TEXT);\nCREATE TABLE Software_Engineers(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    company_name TEXT,\n    programming_language TEXT,\n    years_of_experience INT);\n\nINSERT INTO \"Accountants\" (id,name,company_name,education,experience_years) VALUES (1,'Jennifer Lawrence','FinanceGroup','BBA',6),(2,'Scarlett Johansson','AccountingFirm','MAcc',7);\nINSERT INTO \"Construction_Workers\" (id,name,company_owner,work_experience,salary) VALUES (1,'John Doe','Derek Brown',7,30000.0),(2,'Jane Smith','Michael Johnson',5,28000.0),(3,'Robert White','Emily Davis',6,29000.0);\nINSERT INTO \"Electricians\" (id,name,company_owner,certifications,hourly_rate) VALUES (1,'Tom Anderson','Derek Brown','A, B, C',25.0),(2,'Erica Thompson','Samantha Taylor','X, Y, Z',27.0);\nINSERT INTO \"HR_Specialists\" (id,name,company_name,industry,years_in_industry) VALUES (1,'Chris Hemsworth','HumanResources','HR',8),(2,'Mark Ruffalo','RecruitmentAgencies','IT',10);\nINSERT INTO \"Marketing_Managers\" (id,name,company_name,marketing_strategy,campaign_successes) VALUES (1,'Ryan Reynolds','AdvertisingAgency','Content Marketing','Product Launch A'),(2,'Ben Affleck','BrandConsultancy','SEO','Website Traffic Increase');\nINSERT INTO \"Software_Engineers\" (id,name,company_name,programming_language,years_of_experience) VALUES (1,'Chris Evans','TechCorp','Python',4),(2,'Olivia Wilde','SoftwareInc','JavaScript',3),(3,'Gal Gadot','CodingCo','C++',5);\n",
      "question": "Show me all the construction workers listed and also just those electricians who work for Derek Brown. Show them in one table.",
      "gold_queries": [
        "SELECT Construction_Workers.name\r\nFROM Construction_Workers\r\nUNION\r\nSELECT Electricians.name\r\nFROM Electricians\r\nWHERE Electricians.company_owner = \"Derek Brown\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List the names and IDs of Construction Workers and Electricians who work for the company owner Derek Brown.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, id FROM Construction_Workers WHERE company_owner = 'Derek Brown'\nUNION\nSELECT name, id FROM Electricians WHERE company_owner = 'Derek Brown'"
          ]
        },
        {
          "interpretation": "Create a union of Construction Workers and Electricians working for Derek Brown and remove duplicates based on their names.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name FROM Construction_Workers WHERE company_owner = 'Derek Brown'\nUNION\nSELECT name FROM Electricians WHERE company_owner = 'Derek Brown'"
          ]
        },
        {
          "interpretation": "Display a comprehensive list of Construction Workers and Electricians along with their respective company owners, organized alphabetically by company owner.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, company_owner FROM Construction_Workers UNION SELECT name, company_owner FROM Electricians ORDER BY company_owner"
          ]
        },
        {
          "interpretation": "Display the list of Construction Workers along with the list of Electricians working for Derek Brown separately in two distinct tables.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, company_owner, certifications, hourly_rate FROM Electricians WHERE company_owner = 'Derek Brown'",
            "SELECT name, company_owner, work_experience, salary FROM Construction_Workers WHERE company_owner = 'Derek Brown'"
          ]
        },
        {
          "interpretation": "Display the list of Construction Workers along with the list of Electricians working for Derek Brown separately in two distinct tables.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, company_owner, certifications, hourly_rate FROM Electricians WHERE company_owner = 'Derek Brown'",
            "SELECT name, company_owner, work_experience, salary FROM Construction_Workers WHERE company_owner = 'Derek Brown'"
          ]
        },
        {
          "interpretation": "List the Construction Workers and the sum of hourly wage of Electricians working for Derek Brown.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT CW.name, SUM(E.hourly_rate) AS total_hourly_wage\nFROM Construction_Workers CW\nJOIN Electricians E ON CW.company_owner = E.company_owner\nWHERE E.company_owner = 'Derek Brown'\nGROUP BY CW.name"
          ]
        },
        {
          "interpretation": "Show all Construction Workers listed and Electricians who work for Derek Brown combined in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, company_owner, work_experience, salary AS hourly_rate FROM Construction_Workers WHERE company_owner = 'Derek Brown' UNION SELECT name, company_owner, 'Electrician' AS work_experience, hourly_rate FROM Electricians WHERE company_owner = 'Derek Brown'"
          ]
        }
      ],
      "num_unique_execution_results": 7,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 9,
        "num_unique_queries": 7,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_2tab_val_trades_jobs/attachment_2tab_val_trades_jobs.sqlite",
      "db_dump": "CREATE TABLE Accountants(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    company_name TEXT,\n    education TEXT,\n    experience_years INT);\nCREATE TABLE Construction_Workers(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    company_owner TEXT,\n    work_experience INT,\n    salary REAL);\nCREATE TABLE Electricians(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    company_owner TEXT,\n    certifications TEXT,\n    hourly_rate REAL);\nCREATE TABLE HR_Specialists(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    company_name TEXT,\n    industry TEXT,\n    years_in_industry INT);\nCREATE TABLE Marketing_Managers(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    company_name TEXT,\n    marketing_strategy TEXT,\n    campaign_successes TEXT);\nCREATE TABLE Software_Engineers(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    company_name TEXT,\n    programming_language TEXT,\n    years_of_experience INT);\n\nINSERT INTO \"Accountants\" (id,name,company_name,education,experience_years) VALUES (1,'Jennifer Lawrence','FinanceGroup','BBA',6),(2,'Scarlett Johansson','AccountingFirm','MAcc',7);\nINSERT INTO \"Construction_Workers\" (id,name,company_owner,work_experience,salary) VALUES (1,'John Doe','Derek Brown',7,30000.0),(2,'Jane Smith','Michael Johnson',5,28000.0),(3,'Robert White','Emily Davis',6,29000.0);\nINSERT INTO \"Electricians\" (id,name,company_owner,certifications,hourly_rate) VALUES (1,'Tom Anderson','Derek Brown','A, B, C',25.0),(2,'Erica Thompson','Samantha Taylor','X, Y, Z',27.0);\nINSERT INTO \"HR_Specialists\" (id,name,company_name,industry,years_in_industry) VALUES (1,'Chris Hemsworth','HumanResources','HR',8),(2,'Mark Ruffalo','RecruitmentAgencies','IT',10);\nINSERT INTO \"Marketing_Managers\" (id,name,company_name,marketing_strategy,campaign_successes) VALUES (1,'Ryan Reynolds','AdvertisingAgency','Content Marketing','Product Launch A'),(2,'Ben Affleck','BrandConsultancy','SEO','Website Traffic Increase');\nINSERT INTO \"Software_Engineers\" (id,name,company_name,programming_language,years_of_experience) VALUES (1,'Chris Evans','TechCorp','Python',4),(2,'Olivia Wilde','SoftwareInc','JavaScript',3),(3,'Gal Gadot','CodingCo','C++',5);\n",
      "question": "Provide all construction workers and electricians who work for Derek Brown. Show them in one table.",
      "gold_queries": [
        "SELECT Construction_Workers.name\r\nFROM Construction_Workers\r\nWHERE Construction_Workers.company_owner = \"Derek Brown\"\r\nUNION\r\nSELECT Electricians.name\r\nFROM Electricians\r\nWHERE Electricians.company_owner = \"Derek Brown\"",
        "SELECT Construction_Workers.name\r\nFROM Construction_Workers\r\nUNION\r\nSELECT Electricians.name\r\nFROM Electricians\r\nWHERE Electricians.company_owner = \"Derek Brown\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Provide a single table containing all construction workers and electricians who work for Derek Brown.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, company_owner, work_experience, salary FROM Construction_Workers WHERE company_owner = 'Derek Brown'\nUNION\nSELECT name, company_owner, NULL AS work_experience, hourly_rate AS salary FROM Electricians WHERE company_owner = 'Derek Brown'"
          ]
        },
        {
          "interpretation": "Provide a list of company owners who share both construction workers and electricians.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT company_owner FROM Construction_Workers INTERSECT SELECT company_owner FROM Electricians"
          ]
        },
        {
          "interpretation": "Select all the company owners where the construction workers work and also select all the company owners where the electricians work.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT company_owner FROM Construction_Workers UNION SELECT company_owner FROM Electricians"
          ]
        },
        {
          "interpretation": "Create a table with the intersection of construction workers and electricians that work for Derek Brown.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Construction_Workers.name, Construction_Workers.work_experience\nFROM Construction_Workers\nJOIN Electricians ON Construction_Workers.id = Electricians.id\nWHERE Construction_Workers.company_owner = 'Derek Brown' AND Electricians.company_owner = 'Derek Brown'"
          ]
        },
        {
          "interpretation": "Provide all electricians who work for Derek Brown.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name FROM Electricians WHERE company_owner = 'Derek Brown'"
          ]
        },
        {
          "interpretation": "Provide all construction workers who work for Derek Brown.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name FROM Construction_Workers WHERE company_owner = 'Derek Brown'"
          ]
        },
        {
          "interpretation": "Retrieve a list of company owners along with the relevant information for construction workers and electricians who work for them.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT company_owner, id, name, work_experience, salary FROM Construction_Workers UNION SELECT company_owner, id, name, certifications, hourly_rate FROM Electricians"
          ]
        },
        {
          "interpretation": "Find all employees who work for Derek Brown, considering not just construction workers and electricians.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name FROM Construction_Workers WHERE company_owner = 'Derek Brown' UNION SELECT name FROM Electricians WHERE company_owner = 'Derek Brown'"
          ]
        },
        {
          "interpretation": "Union all the rows for construction workers and electricians who work for Derek Brown.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, company_owner FROM Construction_Workers WHERE company_owner = 'Derek Brown' UNION ALL SELECT name, company_owner FROM Electricians WHERE company_owner = 'Derek Brown'"
          ]
        }
      ],
      "num_unique_execution_results": 9,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.1111111111111111,
        "one_found": true,
        "f1_score": 0.1818181818181818,
        "num_queries": 9,
        "num_unique_queries": 9,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Journalism/attachment_1tab_ref_events/attachment_1tab_ref_events.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    ArticleID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Content TEXT,\n    AuthorID INTEGER,\n    FOREIGN KEY(AuthorID) REFERENCES Persons(PersonID));\nCREATE TABLE \"Events\"(\n    EventID INTEGER PRIMARY KEY AUTOINCREMENT, \"EventName\" TEXT,\n    EventType TEXT,\n    Date DATE,\n    Location TEXT,\n    PersonID INTEGER,\n    FOREIGN KEY(PersonID) REFERENCES Persons(PersonID));\nCREATE TABLE MediaScrums(\n    MediaScrumID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Description TEXT,\n    StartTime TIME,\n    EndTime TIME,\n    PersonID INTEGER,\n    FOREIGN KEY(PersonID) REFERENCES Persons(PersonID));\nCREATE TABLE Persons(\n    PersonID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FullName TEXT UNIQUE);\n\nINSERT INTO \"Articles\" (ArticleID,Title,Content,AuthorID) VALUES (1,'Article 1','Content of article 1...',1),(2,'Article 2','Content of article 2...',2),(3,'Article 3','Content of article 3...',3),(4,'Article 4','Content of article 4...',4),(5,'Article 5','Content of article 5...',5);\nINSERT INTO \"Events\" (EventID,EventName,EventType,Date,Location,PersonID) VALUES (1,'New Year Press','Press Conference','2022-01-01','New York',1),(2,'LA Launch','Press Conference','2022-02-01','Los Angeles',2),(3,'Spring Scrum','Media Scrum','2022-03-01','Chicago',1),(4,'Dallas Debate','Media Scrum','2022-04-01','Dallas',3),(5,'Capitol Interview','Interview','2022-05-01','Washington',4);\nINSERT INTO \"MediaScrums\" (MediaScrumID,Description,StartTime,EndTime,PersonID) VALUES (1,'Desc 1','10:00','11:00',1),(2,'Desc 2','12:00','13:00',3),(3,'Desc 3','14:00','15:00',5),(4,'Desc 4','16:00','17:00',2),(5,'Desc 5','18:00','19:00',4);\nINSERT INTO \"Persons\" (PersonID,FullName) VALUES (1,'John Doe'),(2,'Jane Smith'),(3,'Emily Johnson'),(4,'Michael Brown'),(5,'Cathy Williams');\n",
      "question": "Show press conferences and media scrums attended by John Doe. Show them in one table.",
      "gold_queries": [
        "SELECT Events.EventName \r\nFROM Events JOIN Persons ON Events.PersonID = Persons.PersonID\r\nWHERE (Events.EventType = \"Press Conference\" OR Events.EventType = \"Media Scrum\") AND Persons.FullName = \"John Doe\"",
        "SELECT Events.EventName \r\nFROM Events JOIN Persons ON Events.PersonID = Persons.PersonID\r\nWHERE Events.EventType = \"Press Conference\" OR Events.EventType = \"Media Scrum\" AND Persons.FullName = \"John Doe\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Show the table of Events where PersonID is 1 or when PersonID is in a table with",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Events WHERE PersonID = 1"
          ]
        },
        {
          "interpretation": "where the 'PersonID' is either 1 or part of the 'PersonID' in",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT EventName, EventType, Date, Location \nFROM Events \nWHERE PersonID = 1"
          ]
        },
        {
          "interpretation": "Retrieve the table containing item 'Press Conference' from 'Events'",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Events WHERE EventType = 'Press Conference'"
          ]
        },
        {
          "interpretation": "Show all the 'EventName' under which 'John Doe' attended",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT EventName FROM Events WHERE PersonID = (SELECT PersonID FROM Persons WHERE FullName = 'John Doe')"
          ]
        },
        {
          "interpretation": "where 'PersonID' matches 1 or is within 'MediaScrums' under 'PersonID'",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT PersonID FROM Persons WHERE PersonID = 1 OR PersonID IN (SELECT PersonID FROM MediaScrums)"
          ]
        },
        {
          "interpretation": "Query for Events of type 'Press Conference' present in table 'Events'",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT EventName, EventType, Date, Location FROM Events WHERE EventType = 'Press Conference'"
          ]
        },
        {
          "interpretation": "list of press conferences and media scrums labelled",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT EventName, EventType FROM Events WHERE EventType IN ('Press Conference', 'Media Scrum')"
          ]
        },
        {
          "interpretation": "the column (PersonID) in the Events table and column (EventName,r EventType,Date,Location PersonID) for \u2018Press Conference\u2019",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT EventName, EventType, Date, Location, PersonID FROM Events WHERE EventType = 'Press Conference'"
          ]
        },
        {
          "interpretation": "under a condition that 'PersonID' should match 1 and the 'EventType'",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT EventName FROM Events WHERE PersonID = 1 AND EventType = 'Press Conference'"
          ]
        }
      ],
      "num_unique_execution_results": 9,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.1111111111111111,
        "one_found": true,
        "f1_score": 0.1818181818181818,
        "num_queries": 9,
        "num_unique_queries": 9,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Journalism/attachment_1tab_ref_events/attachment_1tab_ref_events.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    ArticleID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Content TEXT,\n    AuthorID INTEGER,\n    FOREIGN KEY(AuthorID) REFERENCES Persons(PersonID));\nCREATE TABLE \"Events\"(\n    EventID INTEGER PRIMARY KEY AUTOINCREMENT, \"EventName\" TEXT,\n    EventType TEXT,\n    Date DATE,\n    Location TEXT,\n    PersonID INTEGER,\n    FOREIGN KEY(PersonID) REFERENCES Persons(PersonID));\nCREATE TABLE MediaScrums(\n    MediaScrumID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Description TEXT,\n    StartTime TIME,\n    EndTime TIME,\n    PersonID INTEGER,\n    FOREIGN KEY(PersonID) REFERENCES Persons(PersonID));\nCREATE TABLE Persons(\n    PersonID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FullName TEXT UNIQUE);\n\nINSERT INTO \"Articles\" (ArticleID,Title,Content,AuthorID) VALUES (1,'Article 1','Content of article 1...',1),(2,'Article 2','Content of article 2...',2),(3,'Article 3','Content of article 3...',3),(4,'Article 4','Content of article 4...',4),(5,'Article 5','Content of article 5...',5);\nINSERT INTO \"Events\" (EventID,EventName,EventType,Date,Location,PersonID) VALUES (1,'New Year Press','Press Conference','2022-01-01','New York',1),(2,'LA Launch','Press Conference','2022-02-01','Los Angeles',2),(3,'Spring Scrum','Media Scrum','2022-03-01','Chicago',1),(4,'Dallas Debate','Media Scrum','2022-04-01','Dallas',3),(5,'Capitol Interview','Interview','2022-05-01','Washington',4);\nINSERT INTO \"MediaScrums\" (MediaScrumID,Description,StartTime,EndTime,PersonID) VALUES (1,'Desc 1','10:00','11:00',1),(2,'Desc 2','12:00','13:00',3),(3,'Desc 3','14:00','15:00',5),(4,'Desc 4','16:00','17:00',2),(5,'Desc 5','18:00','19:00',4);\nINSERT INTO \"Persons\" (PersonID,FullName) VALUES (1,'John Doe'),(2,'Jane Smith'),(3,'Emily Johnson'),(4,'Michael Brown'),(5,'Cathy Williams');\n",
      "question": "List all press conferences and also list media scrums that John Doe attended. Show them in one table.",
      "gold_queries": [
        "SELECT Events.EventName \r\nFROM Events JOIN Persons ON Events.PersonID = Persons.PersonID\r\nWHERE Events.EventType = \"Press Conference\" OR Events.EventType = \"Media Scrum\" AND Persons.FullName = \"John Doe\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List all events where John Doe was involved, including both press conferences and media scrums.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.EventName, E.EventType, E.Date, E.Location\nFROM Events E\nJOIN Persons P ON E.PersonID = P.PersonID\nWHERE P.FullName = 'John Doe'\nUNION\nSELECT MS.Description, 'Media Scrum' AS EventType, NULL AS Date, NULL AS Location\nFROM MediaScrums MS\nJOIN Persons P ON MS.PersonID = P.PersonID\nWHERE P.FullName = 'John Doe'"
          ]
        },
        {
          "interpretation": "List all events and media scrums where John participated, whether they were classified as press conferences or media scrums.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT EventName FROM Events WHERE PersonID = (SELECT PersonID FROM Persons WHERE FullName = 'John Doe') UNION SELECT Description FROM MediaScrums WHERE PersonID = (SELECT PersonID FROM Persons WHERE FullName = 'John Doe')"
          ]
        },
        {
          "interpretation": "List all press conferences where John Doe was involved and also list media scrums that John Doe attended.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT EventName FROM Events WHERE EventType = 'Press Conference' AND PersonID = (SELECT PersonID FROM Persons WHERE FullName = 'John Doe')\nUNION\nSELECT Description FROM MediaScrums WHERE PersonID = (SELECT PersonID FROM Persons WHERE FullName = 'John Doe')"
          ]
        },
        {
          "interpretation": "List all recorded media events for John Doe including both press conferences and scrums, seen as meetings, employee led media sessions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.EventName, E.EventType, E.Date, E.Location, MS.Description, MS.StartTime, MS.EndTime\nFROM Persons P\nLEFT JOIN Events E ON P.PersonID = E.PersonID\nLEFT JOIN MediaScrums MS ON P.PersonID = MS.PersonID\nWHERE P.FullName = 'John Doe'"
          ]
        },
        {
          "interpretation": "List the media events of participants who led press conferences, including all press conferences of those participants, referenced as key numbers, An Oxmox any equal between definition developmental workshops.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Events.EventName, Events.EventType FROM Events WHERE Events.PersonID IN (SELECT Events.PersonID FROM Events WHERE Events.EventType = 'Press Conference')"
          ]
        },
        {
          "interpretation": "List  events and media deadlines of events thatan almost John attends.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.EventName, E.Date AS EventDate, MS.Description, MS.StartTime\nFROM Events E\nJOIN MediaScrums MS ON E.PersonID = MS.PersonID\nJOIN Persons P ON E.PersonID = P.PersonID\nWHERE P.FullName LIKE 'John%'"
          ]
        },
        {
          "interpretation": "List media scrums of all participants who led press conferences, along with all press conferences that those participants led or were involved in.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT e.EventName, e.Date, e.Location\nFROM Events e\nWHERE e.EventType = 'Press Conference' AND e.PersonID IN (\n    SELECT PersonID\n    FROM Events\n    WHERE EventType = 'Press Conference'\n)",
            "SELECT DISTINCT m.Description, m.StartTime, m.EndTime\nFROM MediaScrums m\nJOIN Events e ON m.PersonID = e.PersonID\nWHERE e.EventType = 'Press Conference'"
          ]
        },
        {
          "interpretation": "List media scrums of all participants who led press conferences, along with all press conferences that those participants led or were involved in.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT e.EventName, e.Date, e.Location\nFROM Events e\nWHERE e.EventType = 'Press Conference' AND e.PersonID IN (\n    SELECT PersonID\n    FROM Events\n    WHERE EventType = 'Press Conference'\n)",
            "SELECT DISTINCT m.Description, m.StartTime, m.EndTime\nFROM MediaScrums m\nJOIN Events e ON m.PersonID = e.PersonID\nWHERE e.EventType = 'Press Conference'"
          ]
        },
        {
          "interpretation": "List all press conferences and media scrums where John Doe was recorded in any database table that interact with the press conference and media scrums.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Events.EventName, Events.EventType, Events.Date, Events.Location\nFROM Events\nJOIN Persons ON Events.PersonID = Persons.PersonID\nWHERE Persons.FullName = 'John Doe' AND Events.EventType IN ('Press Conference', 'Media Scrum')",
            "SELECT MediaScrums.Description, 'Media Scrum' AS EventType, NULL AS Date, NULL AS Location\nFROM MediaScrums\nJOIN Persons ON MediaScrums.PersonID = Persons.PersonID\nWHERE Persons.FullName = 'John Doe'"
          ]
        },
        {
          "interpretation": "List all press conferences and media scrums where John Doe was recorded in any database table that interact with the press conference and media scrums.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Events.EventName, Events.EventType, Events.Date, Events.Location\nFROM Events\nJOIN Persons ON Events.PersonID = Persons.PersonID\nWHERE Persons.FullName = 'John Doe' AND Events.EventType IN ('Press Conference', 'Media Scrum')",
            "SELECT MediaScrums.Description, 'Media Scrum' AS EventType, NULL AS Date, NULL AS Location\nFROM MediaScrums\nJOIN Persons ON MediaScrums.PersonID = Persons.PersonID\nWHERE Persons.FullName = 'John Doe'"
          ]
        },
        {
          "interpretation": "List all media scrums and press conferences where John Doe's name is mentioned or where he was the lead.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.EventName, E.EventType\nFROM Events E\nJOIN Persons P ON E.PersonID = P.PersonID\nWHERE P.FullName = 'John Doe'\nAND (E.EventType = 'Press Conference' OR E.EventType = 'Media Scrum')"
          ]
        },
        {
          "interpretation": "List press conferences, media scrums, and details of individuals who executed or engaged in press conferences or media scrums.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT MS.Description, 'Media Scrum', '', '', P.FullName \nFROM MediaScrums MS \nJOIN Persons P ON MS.PersonID = P.PersonID",
            "SELECT E.EventName, E.EventType, E.Date, E.Location, P.FullName \nFROM Events E \nJOIN Persons P ON E.PersonID = P.PersonID \nWHERE E.EventType IN ('Press Conference', 'Media Scrum')"
          ]
        },
        {
          "interpretation": "List press conferences, media scrums, and details of individuals who executed or engaged in press conferences or media scrums.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT MS.Description, 'Media Scrum', '', '', P.FullName \nFROM MediaScrums MS \nJOIN Persons P ON MS.PersonID = P.PersonID",
            "SELECT E.EventName, E.EventType, E.Date, E.Location, P.FullName \nFROM Events E \nJOIN Persons P ON E.PersonID = P.PersonID \nWHERE E.EventType IN ('Press Conference', 'Media Scrum')"
          ]
        },
        {
          "interpretation": "List media scrums and press conferences where the interaction detail shows John Doe.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Description, StartTime, EndTime \nFROM MediaScrums \nWHERE PersonID = (SELECT PersonID FROM Persons WHERE FullName = 'John Doe')\nUNION\nSELECT EventName, Date AS StartTime, Date AS EndTime \nFROM Events \nWHERE EventType = 'Press Conference' AND PersonID = (SELECT PersonID FROM Persons WHERE FullName = 'John Doe')"
          ]
        }
      ],
      "num_unique_execution_results": 14,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 20,
        "num_unique_queries": 14,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Journalism/attachment_1tab_ref_events/attachment_1tab_ref_events.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    ArticleID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Content TEXT,\n    AuthorID INTEGER,\n    FOREIGN KEY(AuthorID) REFERENCES Persons(PersonID));\nCREATE TABLE \"Events\"(\n    EventID INTEGER PRIMARY KEY AUTOINCREMENT, \"EventName\" TEXT,\n    EventType TEXT,\n    Date DATE,\n    Location TEXT,\n    PersonID INTEGER,\n    FOREIGN KEY(PersonID) REFERENCES Persons(PersonID));\nCREATE TABLE MediaScrums(\n    MediaScrumID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Description TEXT,\n    StartTime TIME,\n    EndTime TIME,\n    PersonID INTEGER,\n    FOREIGN KEY(PersonID) REFERENCES Persons(PersonID));\nCREATE TABLE Persons(\n    PersonID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FullName TEXT UNIQUE);\n\nINSERT INTO \"Articles\" (ArticleID,Title,Content,AuthorID) VALUES (1,'Article 1','Content of article 1...',1),(2,'Article 2','Content of article 2...',2),(3,'Article 3','Content of article 3...',3),(4,'Article 4','Content of article 4...',4),(5,'Article 5','Content of article 5...',5);\nINSERT INTO \"Events\" (EventID,EventName,EventType,Date,Location,PersonID) VALUES (1,'New Year Press','Press Conference','2022-01-01','New York',1),(2,'LA Launch','Press Conference','2022-02-01','Los Angeles',2),(3,'Spring Scrum','Media Scrum','2022-03-01','Chicago',1),(4,'Dallas Debate','Media Scrum','2022-04-01','Dallas',3),(5,'Capitol Interview','Interview','2022-05-01','Washington',4);\nINSERT INTO \"MediaScrums\" (MediaScrumID,Description,StartTime,EndTime,PersonID) VALUES (1,'Desc 1','10:00','11:00',1),(2,'Desc 2','12:00','13:00',3),(3,'Desc 3','14:00','15:00',5),(4,'Desc 4','16:00','17:00',2),(5,'Desc 5','18:00','19:00',4);\nINSERT INTO \"Persons\" (PersonID,FullName) VALUES (1,'John Doe'),(2,'Jane Smith'),(3,'Emily Johnson'),(4,'Michael Brown'),(5,'Cathy Williams');\n",
      "question": "What press conferences did John Doe attend and what media scrums did he also attend? Show them in one table.",
      "gold_queries": [
        "SELECT Events.EventName \r\nFROM Events JOIN Persons ON Events.PersonID = Persons.PersonID\r\nWHERE (Events.EventType = \"Press Conference\" OR Events.EventType = \"Media Scrum\") AND Persons.FullName = \"John Doe\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Select all 'Press Conference' Events where the PersonID is 1 and their corresponding 'Media Scrum' Events.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT EventName, Date, Location FROM Events WHERE PersonID = 1 AND EventType = 'Press Conference' UNION SELECT Description AS EventName, StartTime AS Date, EndTime AS Location FROM MediaScrums WHERE PersonID = 1"
          ]
        },
        {
          "interpretation": "Count the number of 'Press Conference' Events where the PersonID is 1, and get the 'Media Scrum' Events they attended.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(EventID) FROM Events WHERE EventType = 'Press Conference' AND PersonID = 1",
            "SELECT Description FROM MediaScrums WHERE PersonID = 1"
          ]
        },
        {
          "interpretation": "Count the number of 'Press Conference' Events where the PersonID is 1, and get the 'Media Scrum' Events they attended.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(EventID) FROM Events WHERE EventType = 'Press Conference' AND PersonID = 1",
            "SELECT Description FROM MediaScrums WHERE PersonID = 1"
          ]
        },
        {
          "interpretation": "Select 'Press Conference' Events where the PersonID is 1, then join to both 'Media Scrums' and 'Events' where the PersonID is 1, the EventType is 'Media Scrum', and the Date is the same as the Date of a 'Press Conference'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E1.EventName, MS.Description, E2.EventName\nFROM Events E1\nJOIN MediaScrums MS ON E1.PersonID = MS.PersonID AND E1.Date = E2.Date\nJOIN Events E2 ON MS.PersonID = E2.PersonID AND E2.EventType = 'Media Scrum'\nWHERE E1.PersonID = 1 AND E1.EventType = 'Press Conference'"
          ]
        },
        {
          "interpretation": "Select all Events joined to MediaScrums where the EventType is 'Media Scrum' and the PersonID is 1, and also include 'Press Conference' Events.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.EventName, E.EventType, E.Date, E.Location, M.Description, M.StartTime, M.EndTime\nFROM Events E\nLEFT JOIN MediaScrums M ON E.EventID = M.MediaScrumID AND E.PersonID = M.PersonID\nWHERE (E.EventType = 'Media Scrum' AND E.PersonID = 1)\n   OR E.EventType = 'Press Conference'"
          ]
        },
        {
          "interpretation": "Select all Events where the PersonID is 1, then filter out 'Media Scrum' Events and show only the corresponding 'Press Conference' Events.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT EventName, EventType, Date, Location \nFROM Events \nWHERE PersonID = 1 AND EventType = 'Press Conference'"
          ]
        },
        {
          "interpretation": "Select all Events where the PersonID is 1, the EventType is 'Press Conference', and include only Events that have a corresponding 'Media Scrum' Event with the same PersonID.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.EventName\nFROM Events E\nJOIN MediaScrums M ON E.PersonID = M.PersonID\nWHERE E.PersonID = 1 AND E.EventType = 'Press Conference'"
          ]
        },
        {
          "interpretation": "Select all 'Press Conference' Events for PersonID 1, and for each, find their corresponding 'Media Scrum' Event if there is one.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.EventName, E.Date, E.Location, MS.Description, MS.StartTime, MS.EndTime\nFROM Events E\nLEFT JOIN MediaScrums MS ON E.PersonID = MS.PersonID AND E.Date = MS.EndTime\nWHERE E.PersonID = 1 AND E.EventType = 'Press Conference'"
          ]
        },
        {
          "interpretation": "Select all Events joined to MediaScrums where the EventType is 'Press Conference' and the PersonID is 1.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.EventID, E.EventName, E.EventType, E.Date, E.Location, E.PersonID, MS.MediaScrumID, MS.Description, MS.StartTime, MS.EndTime, MS.PersonID\nFROM Events E\nJOIN MediaScrums MS ON E.PersonID = MS.PersonID\nWHERE E.EventType = 'Press Conference' AND E.PersonID = 1"
          ]
        },
        {
          "interpretation": "Select all Events where the PersonID is 1, the EventType is either 'Press Conference' or 'Media Scrum', however this includes 'Press Conference' Events that are not press conferences.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT EventName, EventType, Date, Location \nFROM Events \nWHERE PersonID = 1 AND EventType IN ('Press Conference', 'Media Scrum')"
          ]
        }
      ],
      "num_unique_execution_results": 10,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 12,
        "num_unique_queries": 10,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Journalism/attachment_2tab_val_news_industry_economics/attachment_2tab_val_news_industry_economics.sqlite",
      "db_dump": "CREATE TABLE \"Advertising\"(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT, Magazine TEXT,\n    Advertising_Revenue REAL ,\n    Subscribers INT,\n    Country TEXT, `Type` TEXT);\nCREATE TABLE Articles(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Content TEXT,\n    AuthorID INTEGER,\n    PublishDate Date,\n    FOREIGN KEY(AuthorID) REFERENCES Authors(ID));\nCREATE TABLE Authors(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Email TEXT,\n    Birthdate Date,\n    Nationality Text);\nCREATE TABLE Issues(\n    IssueNumber INT PRIMARY KEY,\n    MagazineID INTEGER,\n    ReleaseDate Date,\n    FOREIGN KEY(MagazineID) REFERENCES Magazines(ID));\nCREATE TABLE Magazines(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Category TEXT,\n    EditorInChief TEXT,\n    PublishingHouse TEXT);\nCREATE TABLE \"Subscriptions\"(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT, Magazine TEXT,\n    Subscription_Fees REAL ,\n    NumberOfSubscribers INT,\n    \"Type\" TEXT);\n\nINSERT INTO \"Advertising\" (ID,Magazine,Advertising_Revenue,Subscribers,Country,Type) VALUES (1,'Good Housekeeping',1000000.0,30000,'USA','Social Media Ads'),(2,'Time',800000.0,25000,'UK','Flyers');\nINSERT INTO \"Articles\" (ID,Title,Content,AuthorID,PublishDate) VALUES (1,'The Rise of AI','...',1,'2021-01-01'),(2,'Climate Change Effects','...',2,'2021-02-02');\nINSERT INTO \"Authors\" (ID,Name,Email,Birthdate,Nationality) VALUES (1,'John Doe','john@example.com','1990-01-01','USA'),(2,'Jane Smith','jane@example.com','1985-02-02','Canada');\nINSERT INTO \"Issues\" (IssueNumber,MagazineID,ReleaseDate) VALUES (1,1,'2021-01-01'),(2,1,'2021-02-01');\nINSERT INTO \"Magazines\" (ID,Name,Category,EditorInChief,PublishingHouse) VALUES (1,'Good Housekeeping','Lifestyle','Alice Johnson','Hearst Communications'),(2,'Time','News & Current Affairs','Bob Williams','Time Inc.');\nINSERT INTO \"Subscriptions\" (ID,Magazine,Subscription_Fees,NumberOfSubscribers,Type) VALUES (1,'Good Housekeeping',9.99,27000,'Monthly'),(2,'National Geographic',6.99,20000,'Bi-monthly');\n",
      "question": "Show the advertising and subscription types where either are listed for Good Housekeeping magazine. Show them in one table.",
      "gold_queries": [
        "SELECT Advertising.Type\r\nFROM Advertising\r\nWHERE Advertising.Magazine = \"Good Housekeeping\"\r\nUNION\r\nSELECT Subscriptions.Type\r\nFROM Subscriptions\r\nWHERE Subscriptions.Magazine = \"Good Housekeeping\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Show the advertising and subscription types in one table for Good Housekeeping magazine, using unique type identifiers if necessary.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT 'Advertising' AS Source, Type FROM Advertising WHERE Magazine = 'Good Housekeeping'\nUNION\nSELECT DISTINCT 'Subscription' AS Source, Type FROM Subscriptions WHERE Magazine = 'Good Housekeeping'"
          ]
        },
        {
          "interpretation": "Show the advertising and subscription types where either are listed for Good Housekeeping magazine, including both types in one table if they exist.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Type FROM Advertising WHERE Magazine = 'Good Housekeeping'\nUNION\nSELECT Type FROM Subscriptions WHERE Magazine = 'Good Housekeeping'"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "one_found": true,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Journalism/attachment_2tab_val_news_industry_economics/attachment_2tab_val_news_industry_economics.sqlite",
      "db_dump": "CREATE TABLE \"Advertising\"(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT, Magazine TEXT,\n    Advertising_Revenue REAL ,\n    Subscribers INT,\n    Country TEXT, `Type` TEXT);\nCREATE TABLE Articles(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Content TEXT,\n    AuthorID INTEGER,\n    PublishDate Date,\n    FOREIGN KEY(AuthorID) REFERENCES Authors(ID));\nCREATE TABLE Authors(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Email TEXT,\n    Birthdate Date,\n    Nationality Text);\nCREATE TABLE Issues(\n    IssueNumber INT PRIMARY KEY,\n    MagazineID INTEGER,\n    ReleaseDate Date,\n    FOREIGN KEY(MagazineID) REFERENCES Magazines(ID));\nCREATE TABLE Magazines(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Category TEXT,\n    EditorInChief TEXT,\n    PublishingHouse TEXT);\nCREATE TABLE \"Subscriptions\"(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT, Magazine TEXT,\n    Subscription_Fees REAL ,\n    NumberOfSubscribers INT,\n    \"Type\" TEXT);\n\nINSERT INTO \"Advertising\" (ID,Magazine,Advertising_Revenue,Subscribers,Country,Type) VALUES (1,'Good Housekeeping',1000000.0,30000,'USA','Social Media Ads'),(2,'Time',800000.0,25000,'UK','Flyers');\nINSERT INTO \"Articles\" (ID,Title,Content,AuthorID,PublishDate) VALUES (1,'The Rise of AI','...',1,'2021-01-01'),(2,'Climate Change Effects','...',2,'2021-02-02');\nINSERT INTO \"Authors\" (ID,Name,Email,Birthdate,Nationality) VALUES (1,'John Doe','john@example.com','1990-01-01','USA'),(2,'Jane Smith','jane@example.com','1985-02-02','Canada');\nINSERT INTO \"Issues\" (IssueNumber,MagazineID,ReleaseDate) VALUES (1,1,'2021-01-01'),(2,1,'2021-02-01');\nINSERT INTO \"Magazines\" (ID,Name,Category,EditorInChief,PublishingHouse) VALUES (1,'Good Housekeeping','Lifestyle','Alice Johnson','Hearst Communications'),(2,'Time','News & Current Affairs','Bob Williams','Time Inc.');\nINSERT INTO \"Subscriptions\" (ID,Magazine,Subscription_Fees,NumberOfSubscribers,Type) VALUES (1,'Good Housekeeping',9.99,27000,'Monthly'),(2,'National Geographic',6.99,20000,'Bi-monthly');\n",
      "question": "Show all the advertising types and also show the subscriptions types but just for Good Housekeeping magazine. Show them in one table.",
      "gold_queries": [
        "SELECT Advertising.Type\r\nFROM Advertising\r\nUNION\r\nSELECT Subscriptions.Type\r\nFROM Subscriptions\r\nWHERE Subscriptions.Magazine = \"Good Housekeeping\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Show the different types of advertising and list just the different subscription types that are available for the magazine called \"Good Housekeeping\".",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT Type FROM Advertising WHERE Magazine = 'Good Housekeeping' UNION SELECT DISTINCT Type FROM Subscriptions WHERE Magazine = 'Good Housekeeping'"
          ]
        },
        {
          "interpretation": "Display all advertising types, list all distinct subscription types, and show that \"Good Housekeeping\" has only these types.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 3,
            "num_unique_queries": 3,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Advertising_Type, Subscription_Type\nFROM \n(SELECT Type AS Advertising_Type FROM Advertising WHERE Magazine = 'Good Housekeeping') a\nJOIN \n(SELECT DISTINCT Type AS Subscription_Type FROM Subscriptions WHERE Magazine = 'Good Housekeeping') b\nON 1=1",
            "SELECT Type FROM Advertising",
            "SELECT DISTINCT Type FROM Subscriptions"
          ]
        },
        {
          "interpretation": "list all types of advertising, and for the magazine named \"Good Housekeeping\", list the types of subscriptions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT Type FROM Advertising",
            "SELECT Type FROM Subscriptions WHERE Magazine = 'Good Housekeeping'"
          ]
        },
        {
          "interpretation": "Enumerate all advertising types, list only subscription types limited to Good Housekeeping magazine, and show them in one table.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Type FROM Advertising\nUNION\nSELECT Type FROM Subscriptions WHERE Magazine = 'Good Housekeeping'"
          ]
        },
        {
          "interpretation": "Display all advertising types, list all distinct subscription types, and show that \"Good Housekeeping\" has only these types.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 3,
            "num_unique_queries": 3,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Advertising_Type, Subscription_Type\nFROM \n(SELECT Type AS Advertising_Type FROM Advertising WHERE Magazine = 'Good Housekeeping') a\nJOIN \n(SELECT DISTINCT Type AS Subscription_Type FROM Subscriptions WHERE Magazine = 'Good Housekeeping') b\nON 1=1",
            "SELECT Type FROM Advertising",
            "SELECT DISTINCT Type FROM Subscriptions"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.14285714285714285,
        "one_found": true,
        "f1_score": 0.25,
        "num_queries": 10,
        "num_unique_queries": 7,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Journalism/attachment_2tab_val_news_industry_economics/attachment_2tab_val_news_industry_economics.sqlite",
      "db_dump": "CREATE TABLE \"Advertising\"(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT, Magazine TEXT,\n    Advertising_Revenue REAL ,\n    Subscribers INT,\n    Country TEXT, `Type` TEXT);\nCREATE TABLE Articles(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Content TEXT,\n    AuthorID INTEGER,\n    PublishDate Date,\n    FOREIGN KEY(AuthorID) REFERENCES Authors(ID));\nCREATE TABLE Authors(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Email TEXT,\n    Birthdate Date,\n    Nationality Text);\nCREATE TABLE Issues(\n    IssueNumber INT PRIMARY KEY,\n    MagazineID INTEGER,\n    ReleaseDate Date,\n    FOREIGN KEY(MagazineID) REFERENCES Magazines(ID));\nCREATE TABLE Magazines(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Category TEXT,\n    EditorInChief TEXT,\n    PublishingHouse TEXT);\nCREATE TABLE \"Subscriptions\"(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT, Magazine TEXT,\n    Subscription_Fees REAL ,\n    NumberOfSubscribers INT,\n    \"Type\" TEXT);\n\nINSERT INTO \"Advertising\" (ID,Magazine,Advertising_Revenue,Subscribers,Country,Type) VALUES (1,'Good Housekeeping',1000000.0,30000,'USA','Social Media Ads'),(2,'Time',800000.0,25000,'UK','Flyers');\nINSERT INTO \"Articles\" (ID,Title,Content,AuthorID,PublishDate) VALUES (1,'The Rise of AI','...',1,'2021-01-01'),(2,'Climate Change Effects','...',2,'2021-02-02');\nINSERT INTO \"Authors\" (ID,Name,Email,Birthdate,Nationality) VALUES (1,'John Doe','john@example.com','1990-01-01','USA'),(2,'Jane Smith','jane@example.com','1985-02-02','Canada');\nINSERT INTO \"Issues\" (IssueNumber,MagazineID,ReleaseDate) VALUES (1,1,'2021-01-01'),(2,1,'2021-02-01');\nINSERT INTO \"Magazines\" (ID,Name,Category,EditorInChief,PublishingHouse) VALUES (1,'Good Housekeeping','Lifestyle','Alice Johnson','Hearst Communications'),(2,'Time','News & Current Affairs','Bob Williams','Time Inc.');\nINSERT INTO \"Subscriptions\" (ID,Magazine,Subscription_Fees,NumberOfSubscribers,Type) VALUES (1,'Good Housekeeping',9.99,27000,'Monthly'),(2,'National Geographic',6.99,20000,'Bi-monthly');\n",
      "question": "Show all types of advertising and subscriptions for Good Housekeeping magazine. Show them in one table.",
      "gold_queries": [
        "SELECT Advertising.Type\r\nFROM Advertising\r\nWHERE Advertising.Magazine = \"Good Housekeeping\"\r\nUNION\r\nSELECT Subscriptions.Type\r\nFROM Subscriptions\r\nWHERE Subscriptions.Magazine = \"Good Housekeeping\"",
        "SELECT Advertising.Type\r\nFROM Advertising\r\nUNION\r\nSELECT Subscriptions.Type\r\nFROM Subscriptions\r\nWHERE Subscriptions.Magazine = \"Good Housekeeping\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Fetch all the advertisement types in the \"Advertising\" table and the subscription types available in the \"Subscriptions\" table for Good Housekeeping magazine and merge the results into one table.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Type FROM Advertising WHERE Magazine = 'Good Housekeeping'\nUNION\nSELECT Type FROM Subscriptions WHERE Magazine = 'Good Housekeeping'"
          ]
        },
        {
          "interpretation": "Show all advertisements currently in the \"Advertising\" table for the Good Housekeeping magazine in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Advertising WHERE Magazine = 'Good Housekeeping'"
          ]
        },
        {
          "interpretation": "Show all types of advertisement that Good Housekeeping magazine has utilized throughout time in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT Type FROM Advertising WHERE Magazine = 'Good Housekeeping'"
          ]
        },
        {
          "interpretation": "Show different types of subscriptions that individuals can opt for Good Housekeeping magazine in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT Type FROM Subscriptions WHERE Magazine = 'Good Housekeeping'"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.25,
        "one_found": true,
        "f1_score": 0.3333333333333333,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_1tab_val_lab_positions/attachment_1tab_val_lab_positions.sqlite",
      "db_dump": "CREATE TABLE Company(\n    id INTEGER PRIMARY KEY,\n    name TEXT);\nCREATE TABLE Department(\n    id INTEGER PRIMARY KEY,\n    companyId INTEGER,\n    departmentName TEXT,\n    FOREIGN KEY (companyId) REFERENCES Company(id));\nCREATE TABLE Employee(\n    id INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    dateOfBirth DATE,\n    email TEXT,\n    phoneNumber VARCHAR(15),\n    hireDate DATE,\n    jobTitle TEXT,\n    departmentId INTEGER,\n    gender TEXT,\n    FOREIGN KEY (departmentId) REFERENCES Department(id));\nCREATE TABLE LabPosition(\n    id INTEGER PRIMARY KEY,\n    positionTypeId INTEGER,\n    labPosition TEXT,\n    gender TEXT,\n    minimumEducation TEXT,\n    experienceInYears INTEGER,\n    salaryRange TEXT,\n    FOREIGN KEY (positionTypeId) REFERENCES PositionType(id));\nCREATE TABLE PositionType(\n    id INTEGER PRIMARY KEY,\n    typeName TEXT);\n\nINSERT INTO \"Company\" (id,name) VALUES (1,'TechCorp'),(2,'HealthPlus'),(3,'GreenTech'),(4,'SoftWare'),(5,'MedicalPioneers');\nINSERT INTO \"Department\" (id,companyId,departmentName) VALUES (1,1,'Biotechnology'),(2,2,'Chemistry'),(3,3,'Physics'),(4,4,'Computer Science'),(5,5,'Mathematics');\nINSERT INTO \"Employee\" (id,firstName,lastName,dateOfBirth,email,phoneNumber,hireDate,jobTitle,departmentId,gender) VALUES (1,'John','Smith','1990-01-15','johnsmith@email.com','+1 (234) 567-8910','2021-06-01','Research Scientist',1,'Male'),(2,'Jane','Doe','1988-03-20','janedoe@email.com','+1 (123) 456-7890','2021-07-01','Laboratory Technician',2,'Female'),(3,'Tom','Hanks','1985-09-05','thomhanks@email.com','+1 (345) 678-9012','2021-08-01','Engineer',3,'Male'),(4,'Alice','Williams','1992-11-10','alicewilliams@email.com','+1 (456) 789-0123','2021-09-01','Analyst',4,'Female'),(5,'Chris','Evans','1989-06-25','chrisevans@email.com','+1 (567) 890-1234','2021-10-01','Manager',5,'Male');\nINSERT INTO \"LabPosition\" (id,positionTypeId,labPosition,gender,minimumEducation,experienceInYears,salaryRange) VALUES (1,1,'Research Scientist','Female','PhD',5,'60k - 90k'),(2,1,'Research Scientist','Male','PhD',7,'80k - 110k'),(3,2,'Laboratory Technician','Female','BSc',3,'40k - 60k'),(4,2,'Laboratory Technician','Male','BSc',4,'50k - 70k'),(5,3,'Data Analyst','Non-binary','MS',2,'60k - 80k');\nINSERT INTO \"PositionType\" (id,typeName) VALUES (1,'Full Time'),(2,'Part Time'),(3,'Contractual'),(4,'Internship'),(5,'Volunteering');\n",
      "question": "What is the salary range of female research scientists and laboratory technicians of the same gender? Show them in one table.",
      "gold_queries": [
        "SELECT LabPosition.salaryRange \r\nFROM LabPosition\r\nWHERE (LabPosition.labPosition = \"Research Scientist\" OR LabPosition.labPosition = \"Laboratory Technician\") AND LabPosition.gender = \"Female\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Average salary range of female research scientists and female laboratory technicians.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AVG(salaryRange) \nFROM LabPosition \nWHERE (labPosition = 'Research Scientist' OR labPosition = 'Laboratory Technician') AND gender = 'Female'"
          ]
        },
        {
          "interpretation": "Individual salaries for female research scientists and female laboratory technicians.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT salaryRange FROM LabPosition WHERE (labPosition = 'Research Scientist' AND gender = 'Female') OR (labPosition = 'Laboratory Technician' AND gender = 'Female')"
          ]
        },
        {
          "interpretation": "Wage range for research scientists and laboratory technicians, by gender (female), independent of actual job titles.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT gender, salaryRange \nFROM LabPosition \nWHERE labPosition IN ('Research Scientist', 'Laboratory Technician') AND gender = 'Female'"
          ]
        },
        {
          "interpretation": "Separate table for female research scientists and female laboratory technicians to show their salary ranges.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT labPosition, salaryRange \nFROM LabPosition \nWHERE gender = 'Female' AND (labPosition = 'Research Scientist' OR labPosition = 'Laboratory Technician')"
          ]
        },
        {
          "interpretation": "Salary range of female laboratory technicians including only female employees that are both laboratory technicians and have a matching gender.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT LP.salaryRange\nFROM LabPosition LP\nJOIN Employee E ON LP.gender = E.gender AND LP.labPosition = E.jobTitle\nWHERE E.jobTitle = 'Laboratory Technician' AND E.gender = 'Female'"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "one_found": true,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_1tab_val_lab_positions/attachment_1tab_val_lab_positions.sqlite",
      "db_dump": "CREATE TABLE Company(\n    id INTEGER PRIMARY KEY,\n    name TEXT);\nCREATE TABLE Department(\n    id INTEGER PRIMARY KEY,\n    companyId INTEGER,\n    departmentName TEXT,\n    FOREIGN KEY (companyId) REFERENCES Company(id));\nCREATE TABLE Employee(\n    id INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    dateOfBirth DATE,\n    email TEXT,\n    phoneNumber VARCHAR(15),\n    hireDate DATE,\n    jobTitle TEXT,\n    departmentId INTEGER,\n    gender TEXT,\n    FOREIGN KEY (departmentId) REFERENCES Department(id));\nCREATE TABLE LabPosition(\n    id INTEGER PRIMARY KEY,\n    positionTypeId INTEGER,\n    labPosition TEXT,\n    gender TEXT,\n    minimumEducation TEXT,\n    experienceInYears INTEGER,\n    salaryRange TEXT,\n    FOREIGN KEY (positionTypeId) REFERENCES PositionType(id));\nCREATE TABLE PositionType(\n    id INTEGER PRIMARY KEY,\n    typeName TEXT);\n\nINSERT INTO \"Company\" (id,name) VALUES (1,'TechCorp'),(2,'HealthPlus'),(3,'GreenTech'),(4,'SoftWare'),(5,'MedicalPioneers');\nINSERT INTO \"Department\" (id,companyId,departmentName) VALUES (1,1,'Biotechnology'),(2,2,'Chemistry'),(3,3,'Physics'),(4,4,'Computer Science'),(5,5,'Mathematics');\nINSERT INTO \"Employee\" (id,firstName,lastName,dateOfBirth,email,phoneNumber,hireDate,jobTitle,departmentId,gender) VALUES (1,'John','Smith','1990-01-15','johnsmith@email.com','+1 (234) 567-8910','2021-06-01','Research Scientist',1,'Male'),(2,'Jane','Doe','1988-03-20','janedoe@email.com','+1 (123) 456-7890','2021-07-01','Laboratory Technician',2,'Female'),(3,'Tom','Hanks','1985-09-05','thomhanks@email.com','+1 (345) 678-9012','2021-08-01','Engineer',3,'Male'),(4,'Alice','Williams','1992-11-10','alicewilliams@email.com','+1 (456) 789-0123','2021-09-01','Analyst',4,'Female'),(5,'Chris','Evans','1989-06-25','chrisevans@email.com','+1 (567) 890-1234','2021-10-01','Manager',5,'Male');\nINSERT INTO \"LabPosition\" (id,positionTypeId,labPosition,gender,minimumEducation,experienceInYears,salaryRange) VALUES (1,1,'Research Scientist','Female','PhD',5,'60k - 90k'),(2,1,'Research Scientist','Male','PhD',7,'80k - 110k'),(3,2,'Laboratory Technician','Female','BSc',3,'40k - 60k'),(4,2,'Laboratory Technician','Male','BSc',4,'50k - 70k'),(5,3,'Data Analyst','Non-binary','MS',2,'60k - 80k');\nINSERT INTO \"PositionType\" (id,typeName) VALUES (1,'Full Time'),(2,'Part Time'),(3,'Contractual'),(4,'Internship'),(5,'Volunteering');\n",
      "question": "What is the salary range for female laboratory technicians and research scientists? Show them in one table.",
      "gold_queries": [
        "SELECT LabPosition.salaryRange \r\nFROM LabPosition\r\nWHERE (LabPosition.labPosition = \"Research Scientist\" OR LabPosition.labPosition = \"Laboratory Technician\") AND LabPosition.gender = \"Female\"",
        "SELECT LabPosition.salaryRange \r\nFROM LabPosition\r\nWHERE LabPosition.labPosition = \"Research Scientist\" OR LabPosition.labPosition = \"Laboratory Technician\" AND LabPosition.gender = \"Female\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "What are the salary ranges for female employees in research scientist positions?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT salaryRange FROM LabPosition WHERE gender = 'Female' AND labPosition = 'Research Scientist'"
          ]
        },
        {
          "interpretation": "Provide a table showing the salary ranges for female laboratory technicians and research scientists in the database.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT salaryRange FROM LabPosition WHERE (gender = 'Female' AND labPosition = 'Laboratory Technician') OR (gender = 'Female' AND labPosition = 'Research Scientist')"
          ]
        },
        {
          "interpretation": "What is the salary range for female employees in laboratory technician position?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT salaryRange FROM LabPosition WHERE labPosition = 'Laboratory Technician' AND gender = 'Female'"
          ]
        },
        {
          "interpretation": "What is the salary range for women in the laboratory technician and research scientist roles?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT labPosition, salaryRange \nFROM LabPosition \nWHERE labPosition IN ('Laboratory Technician', 'Research Scientist') AND gender = 'Female'"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.25,
        "one_found": true,
        "f1_score": 0.3333333333333333,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_1tab_val_lab_positions/attachment_1tab_val_lab_positions.sqlite",
      "db_dump": "CREATE TABLE Company(\n    id INTEGER PRIMARY KEY,\n    name TEXT);\nCREATE TABLE Department(\n    id INTEGER PRIMARY KEY,\n    companyId INTEGER,\n    departmentName TEXT,\n    FOREIGN KEY (companyId) REFERENCES Company(id));\nCREATE TABLE Employee(\n    id INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    dateOfBirth DATE,\n    email TEXT,\n    phoneNumber VARCHAR(15),\n    hireDate DATE,\n    jobTitle TEXT,\n    departmentId INTEGER,\n    gender TEXT,\n    FOREIGN KEY (departmentId) REFERENCES Department(id));\nCREATE TABLE LabPosition(\n    id INTEGER PRIMARY KEY,\n    positionTypeId INTEGER,\n    labPosition TEXT,\n    gender TEXT,\n    minimumEducation TEXT,\n    experienceInYears INTEGER,\n    salaryRange TEXT,\n    FOREIGN KEY (positionTypeId) REFERENCES PositionType(id));\nCREATE TABLE PositionType(\n    id INTEGER PRIMARY KEY,\n    typeName TEXT);\n\nINSERT INTO \"Company\" (id,name) VALUES (1,'TechCorp'),(2,'HealthPlus'),(3,'GreenTech'),(4,'SoftWare'),(5,'MedicalPioneers');\nINSERT INTO \"Department\" (id,companyId,departmentName) VALUES (1,1,'Biotechnology'),(2,2,'Chemistry'),(3,3,'Physics'),(4,4,'Computer Science'),(5,5,'Mathematics');\nINSERT INTO \"Employee\" (id,firstName,lastName,dateOfBirth,email,phoneNumber,hireDate,jobTitle,departmentId,gender) VALUES (1,'John','Smith','1990-01-15','johnsmith@email.com','+1 (234) 567-8910','2021-06-01','Research Scientist',1,'Male'),(2,'Jane','Doe','1988-03-20','janedoe@email.com','+1 (123) 456-7890','2021-07-01','Laboratory Technician',2,'Female'),(3,'Tom','Hanks','1985-09-05','thomhanks@email.com','+1 (345) 678-9012','2021-08-01','Engineer',3,'Male'),(4,'Alice','Williams','1992-11-10','alicewilliams@email.com','+1 (456) 789-0123','2021-09-01','Analyst',4,'Female'),(5,'Chris','Evans','1989-06-25','chrisevans@email.com','+1 (567) 890-1234','2021-10-01','Manager',5,'Male');\nINSERT INTO \"LabPosition\" (id,positionTypeId,labPosition,gender,minimumEducation,experienceInYears,salaryRange) VALUES (1,1,'Research Scientist','Female','PhD',5,'60k - 90k'),(2,1,'Research Scientist','Male','PhD',7,'80k - 110k'),(3,2,'Laboratory Technician','Female','BSc',3,'40k - 60k'),(4,2,'Laboratory Technician','Male','BSc',4,'50k - 70k'),(5,3,'Data Analyst','Non-binary','MS',2,'60k - 80k');\nINSERT INTO \"PositionType\" (id,typeName) VALUES (1,'Full Time'),(2,'Part Time'),(3,'Contractual'),(4,'Internship'),(5,'Volunteering');\n",
      "question": "List the salary range of all research scientists as well as the salary range of female laboratory technicians. Show them in one table.",
      "gold_queries": [
        "SELECT LabPosition.salaryRange \r\nFROM LabPosition\r\nWHERE LabPosition.labPosition = \"Research Scientist\" OR LabPosition.labPosition = \"Laboratory Technician\" AND LabPosition.gender = \"Female\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Show the distinct average salary ranges of job titles that match 'Research Scientist' and 'Laboratory Technician' for the given conditions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT T2.salaryRange\nFROM Employee AS T1\nJOIN LabPosition AS T2\nON T1.jobTitle = T2.labPosition\nWHERE T1.jobTitle IN ('Research Scientist', 'Laboratory Technician')"
          ]
        },
        {
          "interpretation": "List the unique salary ranges of research scientists and female laboratory technicians, displaying them in one table.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT DISTINCT salaryRange FROM LabPosition WHERE labPosition = 'Research Scientist' OR (labPosition = 'Laboratory Technician' AND gender = 'Female')"
          ]
        },
        {
          "interpretation": "Display the average salary range of research scientists and female laboratory technicians for each job title.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT LabPosition.labPosition, AVG(CAST(SUBSTR(SUBSTR(LabPosition.salaryRange, 1, INSTR(LabPosition.salaryRange, 'k') - 1), 4) AS REAL)) AS average_salary\nFROM LabPosition\nWHERE LabPosition.labPosition = 'Research Scientist'\n   OR (LabPosition.labPosition = 'Laboratory Technician' AND LabPosition.gender = 'Female')\nGROUP BY LabPosition.labPosition"
          ]
        },
        {
          "interpretation": "List the average salary ranges for all possible job titles that can be assigned to research scientists and female laboratory technicians, displaying their separate values.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AVG(REPLACE(SUBSTR(salaryRange, 1, INSTR(salaryRange, ' -') - 1), 'k', '') * 1000) AS avg_female_lab_tech_salary, \n       AVG(REPLACE(SUBSTR(salaryRange, INSTR(salaryRange, ' -') + 3), 'k', '') * 1000) AS avg_female_lab_tech_max_salary,\n       AVG(REPLACE(SUBSTR(salaryRange, 1, INSTR(salaryRange, ' -') - 1), 'k', '') * 1000) AS avg_research_scientist_salary, \n       AVG(REPLACE(SUBSTR(salaryRange, INSTR(salaryRange, ' -') + 3), 'k', '') * 1000) AS avg_research_scientist_max_salary\nFROM LabPosition\nWHERE labPosition IN ('Research Scientist', 'Laboratory Technician') AND gender = 'Female'"
          ]
        },
        {
          "interpretation": "Retrieve all job titles and their corresponding salary ranges for research scientists and female laboratory technicians, displaying them as separate columns in a table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT LP.labPosition AS JobTitle, LP.salaryRange AS SalaryRange\nFROM LabPosition LP\nWHERE LP.gender = 'Female' AND LP.labPosition IN ('Research Scientist', 'Laboratory Technician')"
          ]
        },
        {
          "interpretation": "List the job titles and corresponding salary ranges of all research scientists and female laboratory technicians in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.jobTitle, LP.salaryRange \nFROM Employee E \nJOIN LabPosition LP \nON E.jobTitle = LP.labPosition \nWHERE (E.jobTitle = 'Research Scientist') \nOR (E.jobTitle = 'Laboratory Technician' AND E.gender = 'Female')"
          ]
        },
        {
          "interpretation": "Display the total count of research scientists and female laboratory technicians, along with their combined average salary ranges.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(*) AS totalCount, AVG(CAST(REPLACE(SUBSTR(salaryRange, 1, INSTR(salaryRange, 'k') - 1), ',', '') AS REAL)) AS averageSalary\nFROM LabPosition\nWHERE (labPosition = 'Research Scientist' AND gender IN ('Female', 'Male'))\n   OR (labPosition = 'Laboratory Technician' AND gender = 'Female')"
          ]
        }
      ],
      "num_unique_execution_results": 7,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.14285714285714285,
        "one_found": true,
        "f1_score": 0.25,
        "num_queries": 7,
        "num_unique_queries": 7,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_1tab_ref_roles/attachment_1tab_ref_roles.sqlite",
      "db_dump": "CREATE TABLE Applicants(\n    ApplicantID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Email TEXT UNIQUE);\nCREATE TABLE ApplicationJobs(\n    ApplicationID INTEGER PRIMARY KEY,\n    ApplicantID INTEGER,\n    JobID INTEGER,\n    SubmissionDate DATE,\n    Status TEXT DEFAULT 'Pending',\n    FOREIGN KEY (ApplicantID) REFERENCES Applicants(ApplicantID),\n    FOREIGN KEY (JobID) REFERENCES Jobs(JobID));\nCREATE TABLE Companies(\n    CompanyID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT);\nCREATE TABLE DataTypes(\n    DataTypeID INTEGER PRIMARY KEY,\n    DataTypeName TEXT);\nCREATE TABLE Jobs(\n    JobID INTEGER PRIMARY KEY,\n    Title TEXT,\n    Description TEXT,\n    PostedDate DATE,\n    CompanyID INTEGER,\n    ROLEID INTEGER,\n    DATAID INTEGER,\n    FOREIGN KEY (CompanyID) REFERENCES Companies(CompanyID),\n    FOREIGN KEY (ROLEID) REFERENCES Roles(RoleID),\n    FOREIGN KEY (DATAID) REFERENCES DataTypes(DataTypeID));\nCREATE TABLE Roles(\n    RoleID INTEGER PRIMARY KEY,\n    RoleName TEXT);\n\nINSERT INTO \"Applicants\" (ApplicantID,FirstName,LastName,Email) VALUES (1,'John','Doe','john.doe@example.com'),(2,'Jane','Smith','jane.smith@example.com');\nINSERT INTO \"ApplicationJobs\" (ApplicationID,ApplicantID,JobID,SubmissionDate,Status) VALUES (1,1,1,'2023-01-01','Pending'),(2,2,2,'2023-01-02','Pending');\nINSERT INTO \"Companies\" (CompanyID,Name,Location) VALUES (1,'ABC Corp.','New York'),(2,'XYZ Inc.','San Francisco');\nINSERT INTO \"DataTypes\" (DataTypeID,DataTypeName) VALUES (1,'Demographics'),(2,'Financial Analysis');\nINSERT INTO \"Jobs\" (JobID,Title,Description,PostedDate,CompanyID,ROLEID,DATAID) VALUES (1,'Economic Analyst','Analyze economic data...','2023-01-01',1,1,1),(2,'Senior Economic Analyst','Analyze economic data...','2023-01-02',2,1,2),(3,'Statistical Analyst','Analyze statistical data...','2023-01-01',1,2,1),(4,'Senior Statistical Analyst','Analyze statistical data...','2023-01-02',2,2,2);\nINSERT INTO \"Roles\" (RoleID,RoleName) VALUES (1,'Economist'),(2,'Statistician');\n",
      "question": "Show both economist positions  that require financial analysis and statistician positions that require the same. Show them in one table.",
      "gold_queries": [
        "SELECT Jobs.title \r\nFROM Roles JOIN Jobs ON Roles.RoleID = Jobs.ROLEID JOIN DataTypes ON Jobs.DATAID = DataTypes.DataTypeID\r\nWHERE (Roles.RoleName = \"Economist\" OR Roles.RoleName = \"Statistician\") AND DataTypes.DataTypeName = \"Financial Analysis\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Display the job titles of roles that require financial analysis and involve economic responsibilities, along with job titles that require financial analysis and statistical responsibilities.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT J.Title \nFROM Jobs J \nJOIN DataTypes DT ON J.DATAID = DT.DataTypeID \nJOIN Roles R ON J.ROLEID = R.RoleID \nWHERE DT.DataTypeName = 'Financial Analysis' AND (R.RoleName = 'Economist' OR R.RoleName = 'Statistician')"
          ]
        },
        {
          "interpretation": "Show the job titles of roles that are classified as both economists and statisticians, and require financial analysis.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT J.Title\nFROM Jobs J\nJOIN Roles R ON J.ROLEID = R.RoleID\nJOIN DataTypes D ON J.DATAID = D.DataTypeID\nWHERE R.RoleName IN ('Economist', 'Statistician') AND D.DataTypeName = 'Financial Analysis'\nGROUP BY J.Title\nHAVING COUNT(DISTINCT R.RoleID) = 2"
          ]
        },
        {
          "interpretation": "Retrieve all roles requiring financial analysis and list them with their job titles.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT R.RoleName, J.Title \nFROM Roles R \nJOIN Jobs J ON R.RoleID = J.ROLEID \nJOIN DataTypes D ON J.DATAID = D.DataTypeID \nWHERE D.DataTypeName = 'Financial Analysis'"
          ]
        },
        {
          "interpretation": "Show all economist roles that require financial analysis, along with all statistician roles that require the same, in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT J.Title, J.Description, R.RoleName, D.DataTypeName\nFROM Jobs J\nJOIN Roles R ON J.ROLEID = R.RoleID\nJOIN DataTypes D ON J.DATAID = D.DataTypeID\nWHERE R.RoleName IN ('Economist', 'Statistician')\nAND D.DataTypeName = 'Financial Analysis'"
          ]
        },
        {
          "interpretation": "Display the contents of one table with roles that require financial analysis, along with their corresponding roles.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Roles.RoleName, DataTypes.DataTypeName\nFROM Jobs\nJOIN Roles ON Jobs.ROLEID = Roles.RoleID\nJOIN DataTypes ON Jobs.DATAID = DataTypes.DataTypeID\nWHERE DataTypes.DataTypeName = 'Financial Analysis'"
          ]
        },
        {
          "interpretation": "List all job titles of economist and statistician roles combined, along with the type of analysis they require.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT J.Title, DT.DataTypeName \nFROM Jobs J \nJOIN Roles R ON J.ROLEID = R.RoleID \nJOIN DataTypes DT ON J.DATAID = DT.DataTypeID \nWHERE R.RoleName IN ('Economist', 'Statistician')"
          ]
        },
        {
          "interpretation": "Display all roles classified as economist or statistician, along with their requirements, in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT R.RoleName, D.DataTypeName AS Requirements\nFROM Roles R\nJOIN Jobs J ON R.RoleID = J.ROLEID\nJOIN DataTypes D ON J.DATAID = D.DataTypeID\nWHERE R.RoleName IN ('Economist', 'Statistician')"
          ]
        },
        {
          "interpretation": "Retrieve all job titles that require a statistician and a financial analysis, and display them in a table with their corresponding role names.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT J.Title, R.RoleName\nFROM Jobs J\nJOIN Roles R ON J.ROLEID = R.RoleID\nJOIN DataTypes D ON J.DATAID = D.DataTypeID\nWHERE R.RoleName = 'Statistician' AND D.DataTypeName = 'Financial Analysis'"
          ]
        },
        {
          "interpretation": "List all job titles of statistician roles that require financial analysis, along with all job titles of economist roles.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT J.Title\nFROM Jobs J\nJOIN Roles R ON J.ROLEID = R.RoleID\nJOIN DataTypes D ON J.DATAID = D.DataTypeID\nWHERE (R.RoleName = 'Statistician' AND D.DataTypeName = 'Financial Analysis') OR R.RoleName = 'Economist'"
          ]
        }
      ],
      "num_unique_execution_results": 9,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.1111111111111111,
        "one_found": true,
        "f1_score": 0.19999999999999998,
        "num_queries": 9,
        "num_unique_queries": 9,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_1tab_ref_roles/attachment_1tab_ref_roles.sqlite",
      "db_dump": "CREATE TABLE Applicants(\n    ApplicantID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Email TEXT UNIQUE);\nCREATE TABLE ApplicationJobs(\n    ApplicationID INTEGER PRIMARY KEY,\n    ApplicantID INTEGER,\n    JobID INTEGER,\n    SubmissionDate DATE,\n    Status TEXT DEFAULT 'Pending',\n    FOREIGN KEY (ApplicantID) REFERENCES Applicants(ApplicantID),\n    FOREIGN KEY (JobID) REFERENCES Jobs(JobID));\nCREATE TABLE Companies(\n    CompanyID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT);\nCREATE TABLE DataTypes(\n    DataTypeID INTEGER PRIMARY KEY,\n    DataTypeName TEXT);\nCREATE TABLE Jobs(\n    JobID INTEGER PRIMARY KEY,\n    Title TEXT,\n    Description TEXT,\n    PostedDate DATE,\n    CompanyID INTEGER,\n    ROLEID INTEGER,\n    DATAID INTEGER,\n    FOREIGN KEY (CompanyID) REFERENCES Companies(CompanyID),\n    FOREIGN KEY (ROLEID) REFERENCES Roles(RoleID),\n    FOREIGN KEY (DATAID) REFERENCES DataTypes(DataTypeID));\nCREATE TABLE Roles(\n    RoleID INTEGER PRIMARY KEY,\n    RoleName TEXT);\n\nINSERT INTO \"Applicants\" (ApplicantID,FirstName,LastName,Email) VALUES (1,'John','Doe','john.doe@example.com'),(2,'Jane','Smith','jane.smith@example.com');\nINSERT INTO \"ApplicationJobs\" (ApplicationID,ApplicantID,JobID,SubmissionDate,Status) VALUES (1,1,1,'2023-01-01','Pending'),(2,2,2,'2023-01-02','Pending');\nINSERT INTO \"Companies\" (CompanyID,Name,Location) VALUES (1,'ABC Corp.','New York'),(2,'XYZ Inc.','San Francisco');\nINSERT INTO \"DataTypes\" (DataTypeID,DataTypeName) VALUES (1,'Demographics'),(2,'Financial Analysis');\nINSERT INTO \"Jobs\" (JobID,Title,Description,PostedDate,CompanyID,ROLEID,DATAID) VALUES (1,'Economic Analyst','Analyze economic data...','2023-01-01',1,1,1),(2,'Senior Economic Analyst','Analyze economic data...','2023-01-02',2,1,2),(3,'Statistical Analyst','Analyze statistical data...','2023-01-01',1,2,1),(4,'Senior Statistical Analyst','Analyze statistical data...','2023-01-02',2,2,2);\nINSERT INTO \"Roles\" (RoleID,RoleName) VALUES (1,'Economist'),(2,'Statistician');\n",
      "question": "List economist positions and statistician positions that require financial analysis. Show them in one table.",
      "gold_queries": [
        "SELECT Jobs.title \r\nFROM Roles JOIN Jobs ON Roles.RoleID = Jobs.ROLEID JOIN DataTypes ON Jobs.DATAID = DataTypes.DataTypeID\r\nWHERE (Roles.RoleName = \"Economist\" OR Roles.RoleName = \"Statistician\") AND DataTypes.DataTypeName = \"Financial Analysis\"",
        "SELECT Jobs.title \r\nFROM Roles JOIN Jobs ON Roles.RoleID = Jobs.ROLEID JOIN DataTypes ON Jobs.DATAID = DataTypes.DataTypeID\r\nWHERE Roles.RoleName = \"Economist\" OR Roles.RoleName = \"Statistician\" AND DataTypes.DataTypeName = \"Financial Analysis\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Display the jobs available for a 'Statistician' that involve financial analysis.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT J.Title, J.Description\nFROM Jobs J\nJOIN Roles R ON J.ROLEID = R.RoleID\nJOIN DataTypes D ON J.DATAID = D.DataTypeID\nWHERE R.RoleName = 'Statistician' AND D.DataTypeName = 'Financial Analysis'"
          ]
        },
        {
          "interpretation": "List the jobs that a statistician would be doing which require Financial Analysis.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT J.Title \nFROM Jobs AS J \nJOIN Roles AS R ON J.ROLEID = R.RoleID \nJOIN DataTypes AS DT ON J.DATAID = DT.DataTypeID \nWHERE R.RoleName = 'Statistician' AND DT.DataTypeName = 'Financial Analysis'"
          ]
        },
        {
          "interpretation": "List jobs that are labeled as 'Economist' roles and are for the DataType 'Financial Analysis'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Jobs.Title, Jobs.Description\nFROM Jobs\nJOIN Roles ON Jobs.ROLEID = Roles.RoleID\nJOIN DataTypes ON Jobs.DATAID = DataTypes.DataTypeID\nWHERE Roles.RoleName = 'Economist' AND DataTypes.DataTypeName = 'Financial Analysis'"
          ]
        },
        {
          "interpretation": "List jobs that are labeled either 'Economist' or 'Statistician' and require Financial Analysis as the DataType.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT J.Title, J.Description, J.PostedDate, C.Name, R.RoleName, D.DataTypeName\nFROM Jobs J\nJOIN Roles R ON J.ROLEID = R.RoleID\nJOIN Companies C ON J.CompanyID = C.CompanyID\nJOIN DataTypes D ON J.DATAID = D.DataTypeID\nWHERE R.RoleName IN ('Economist', 'Statistician') AND D.DataTypeName = 'Financial Analysis'"
          ]
        },
        {
          "interpretation": "List the job titles that a statistician or economist would be doing which require financial analysis.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT J.Title \nFROM Jobs J \nJOIN Roles R ON J.ROLEID = R.RoleID \nJOIN DataTypes D ON J.DATAID = D.DataTypeID \nWHERE R.RoleName IN ('Statistician', 'Economist') \nAND D.DataTypeName = 'Financial Analysis'"
          ]
        },
        {
          "interpretation": "List jobs with Title 'Economic Analyst' or 'Senior Economic Analyst' that require Financial Analysis.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Title FROM Jobs WHERE Title IN ('Economic Analyst', 'Senior Economic Analyst') AND DATAID = (SELECT DataTypeID FROM DataTypes WHERE DataTypeName = 'Financial Analysis')"
          ]
        },
        {
          "interpretation": "Show the skills of a statistician, i.e., the role they could be performing which requires financial analysis.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT R.RoleName, DT.DataTypeName\nFROM Jobs J\nJOIN Roles R ON J.ROLEID = R.RoleID\nJOIN DataTypes DT ON J.DATAID = DT.DataTypeID\nWHERE R.RoleName = 'Statistician' AND DT.DataTypeName = 'Financial Analysis'"
          ]
        }
      ],
      "num_unique_execution_results": 7,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.14285714285714285,
        "one_found": true,
        "f1_score": 0.22222222222222224,
        "num_queries": 7,
        "num_unique_queries": 7,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_1tab_ref_roles/attachment_1tab_ref_roles.sqlite",
      "db_dump": "CREATE TABLE Applicants(\n    ApplicantID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Email TEXT UNIQUE);\nCREATE TABLE ApplicationJobs(\n    ApplicationID INTEGER PRIMARY KEY,\n    ApplicantID INTEGER,\n    JobID INTEGER,\n    SubmissionDate DATE,\n    Status TEXT DEFAULT 'Pending',\n    FOREIGN KEY (ApplicantID) REFERENCES Applicants(ApplicantID),\n    FOREIGN KEY (JobID) REFERENCES Jobs(JobID));\nCREATE TABLE Companies(\n    CompanyID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Location TEXT);\nCREATE TABLE DataTypes(\n    DataTypeID INTEGER PRIMARY KEY,\n    DataTypeName TEXT);\nCREATE TABLE Jobs(\n    JobID INTEGER PRIMARY KEY,\n    Title TEXT,\n    Description TEXT,\n    PostedDate DATE,\n    CompanyID INTEGER,\n    ROLEID INTEGER,\n    DATAID INTEGER,\n    FOREIGN KEY (CompanyID) REFERENCES Companies(CompanyID),\n    FOREIGN KEY (ROLEID) REFERENCES Roles(RoleID),\n    FOREIGN KEY (DATAID) REFERENCES DataTypes(DataTypeID));\nCREATE TABLE Roles(\n    RoleID INTEGER PRIMARY KEY,\n    RoleName TEXT);\n\nINSERT INTO \"Applicants\" (ApplicantID,FirstName,LastName,Email) VALUES (1,'John','Doe','john.doe@example.com'),(2,'Jane','Smith','jane.smith@example.com');\nINSERT INTO \"ApplicationJobs\" (ApplicationID,ApplicantID,JobID,SubmissionDate,Status) VALUES (1,1,1,'2023-01-01','Pending'),(2,2,2,'2023-01-02','Pending');\nINSERT INTO \"Companies\" (CompanyID,Name,Location) VALUES (1,'ABC Corp.','New York'),(2,'XYZ Inc.','San Francisco');\nINSERT INTO \"DataTypes\" (DataTypeID,DataTypeName) VALUES (1,'Demographics'),(2,'Financial Analysis');\nINSERT INTO \"Jobs\" (JobID,Title,Description,PostedDate,CompanyID,ROLEID,DATAID) VALUES (1,'Economic Analyst','Analyze economic data...','2023-01-01',1,1,1),(2,'Senior Economic Analyst','Analyze economic data...','2023-01-02',2,1,2),(3,'Statistical Analyst','Analyze statistical data...','2023-01-01',1,2,1),(4,'Senior Statistical Analyst','Analyze statistical data...','2023-01-02',2,2,2);\nINSERT INTO \"Roles\" (RoleID,RoleName) VALUES (1,'Economist'),(2,'Statistician');\n",
      "question": "Show all economist positions and also show statistician positions that require financial analysis. Show them in one table.",
      "gold_queries": [
        "SELECT Jobs.title \r\nFROM Roles JOIN Jobs ON Roles.RoleID = Jobs.ROLEID JOIN DataTypes ON Jobs.DATAID = DataTypes.DataTypeID\r\nWHERE Roles.RoleName = \"Economist\" OR Roles.RoleName = \"Statistician\" AND DataTypes.DataTypeName = \"Financial Analysis\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Show all economist positions and also show statistician positions that do financial analysis.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT J.Title FROM Jobs J INNER JOIN Roles R ON J.ROLEID = R.RoleID WHERE R.RoleName = 'Economist' UNION SELECT J.Title FROM Jobs J INNER JOIN Roles R ON J.ROLEID = R.RoleID INNER JOIN DataTypes D ON J.DATAID = D.DataTypeID WHERE R.RoleName = 'Statistician' AND D.DataTypeName = 'Financial Analysis'"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "one_found": true,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_1tab_val_earth_science_careers/attachment_1tab_val_earth_science_careers.sqlite",
      "db_dump": "CREATE TABLE Companies (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    address TEXT);\nCREATE TABLE Departments (\n    id INTEGER PRIMARY KEY,\n    name TEXT);\nCREATE TABLE EarthSciencesJobs (\n    id INTEGER PRIMARY KEY,\n    jobTitle TEXT,\n    departmentId INTEGER,\n    companyId INTEGER,\n    FOREIGN KEY(departmentId) REFERENCES Departments(id),\n    FOREIGN KEY(companyId) REFERENCES Companies(id));\nCREATE TABLE Education (\n    employeeId INTEGER,\n    degree TEXT,\n    major TEXT,\n    institution TEXT,\n    yearGraduated INTEGER,\n    FOREIGN KEY(employeeId) REFERENCES Employees(id));\nCREATE TABLE Employees (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    startDate DATE,\n    endDate DATE,\n    university TEXT, FullName TEXT);\n\nINSERT INTO \"Companies\" (id,name,address) VALUES (1,'Company A','123 Main St'),(2,'Company B','456 Elm St'),(3,'Company C','789 Oak St'),(4,'Company D','098 Maple Ave'),(5,'Company E','543 Pine St');\nINSERT INTO \"Departments\" (id,name) VALUES (1,'Department of Geosciences'),(2,'Department of Chemistry'),(3,'Department of Biology'),(4,'Department of Physics'),(5,'Department of Mathematics');\nINSERT INTO \"EarthSciencesJobs\" (id,jobTitle,departmentId,companyId) VALUES (1,'Research Scientist',1,1),(2,'Laboratory Technician',1,2),(3,'Field Geologist',2,3),(4,'Teaching Assistant',3,4),(5,'Data Analyst',4,5);\nINSERT INTO \"Education\" (employeeId,degree,major,institution,yearGraduated) VALUES (NULL,'PhD','Chemistry','Harvard',2008),(NULL,'MS','Physics','Yale',2010),(NULL,'BS','Biology','Princeton',2012),(NULL,'BA','Mathematics','Columbia',2014),(NULL,'MA','Computational Science','Berkeley',2016);\nINSERT INTO \"Employees\" (id,title,startDate,endDate,university,FullName) VALUES (1,'Chemist','2010-01-01',NULL,'MIT','John Doe'),(2,'Chemist','2015-01-01',NULL,'UCLA','Jane Smith'),(3,'Geoscientist','2010-01-01',NULL,'MIT','Michael Brown'),(4,'Geoscientist','2015-01-01',NULL,'Stanford','Emily White'),(5,'Engineer','2010-01-01',NULL,'Caltech','David Black');\n",
      "question": "Show all chemists from MIT, also show all the geoscientists from the same university. Show them in one table.",
      "gold_queries": [
        "SELECT Employees.FullName\r\nFROM Employees\r\nWHERE (Employees.title = \"Chemist\" OR Employees.title = \"Geoscientist\") AND Employees.university = \"MIT\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [],
      "num_unique_execution_results": 0,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 0,
        "num_unique_queries": 0,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_1tab_val_earth_science_careers/attachment_1tab_val_earth_science_careers.sqlite",
      "db_dump": "CREATE TABLE Companies (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    address TEXT);\nCREATE TABLE Departments (\n    id INTEGER PRIMARY KEY,\n    name TEXT);\nCREATE TABLE EarthSciencesJobs (\n    id INTEGER PRIMARY KEY,\n    jobTitle TEXT,\n    departmentId INTEGER,\n    companyId INTEGER,\n    FOREIGN KEY(departmentId) REFERENCES Departments(id),\n    FOREIGN KEY(companyId) REFERENCES Companies(id));\nCREATE TABLE Education (\n    employeeId INTEGER,\n    degree TEXT,\n    major TEXT,\n    institution TEXT,\n    yearGraduated INTEGER,\n    FOREIGN KEY(employeeId) REFERENCES Employees(id));\nCREATE TABLE Employees (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    startDate DATE,\n    endDate DATE,\n    university TEXT, FullName TEXT);\n\nINSERT INTO \"Companies\" (id,name,address) VALUES (1,'Company A','123 Main St'),(2,'Company B','456 Elm St'),(3,'Company C','789 Oak St'),(4,'Company D','098 Maple Ave'),(5,'Company E','543 Pine St');\nINSERT INTO \"Departments\" (id,name) VALUES (1,'Department of Geosciences'),(2,'Department of Chemistry'),(3,'Department of Biology'),(4,'Department of Physics'),(5,'Department of Mathematics');\nINSERT INTO \"EarthSciencesJobs\" (id,jobTitle,departmentId,companyId) VALUES (1,'Research Scientist',1,1),(2,'Laboratory Technician',1,2),(3,'Field Geologist',2,3),(4,'Teaching Assistant',3,4),(5,'Data Analyst',4,5);\nINSERT INTO \"Education\" (employeeId,degree,major,institution,yearGraduated) VALUES (NULL,'PhD','Chemistry','Harvard',2008),(NULL,'MS','Physics','Yale',2010),(NULL,'BS','Biology','Princeton',2012),(NULL,'BA','Mathematics','Columbia',2014),(NULL,'MA','Computational Science','Berkeley',2016);\nINSERT INTO \"Employees\" (id,title,startDate,endDate,university,FullName) VALUES (1,'Chemist','2010-01-01',NULL,'MIT','John Doe'),(2,'Chemist','2015-01-01',NULL,'UCLA','Jane Smith'),(3,'Geoscientist','2010-01-01',NULL,'MIT','Michael Brown'),(4,'Geoscientist','2015-01-01',NULL,'Stanford','Emily White'),(5,'Engineer','2010-01-01',NULL,'Caltech','David Black');\n",
      "question": "List all chemists and geoscientists from MIT. Show them in one table.",
      "gold_queries": [
        "SELECT Employees.FullName\r\nFROM Employees\r\nWHERE (Employees.title = \"Chemist\" OR Employees.title = \"Geoscientist\") AND Employees.university = \"MIT\"",
        "SELECT Employees.FullName\r\nFROM Employees\r\nWHERE Employees.title = \"Chemist\" OR Employees.title = \"Geoscientist\" AND Employees.university = \"MIT\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List all employees from MIT who hold the title Geoscientist.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName FROM Employees WHERE university = 'MIT' AND title = 'Geoscientist'"
          ]
        },
        {
          "interpretation": "List all rows from Employees table where university is 'MIT' and drop any instances where job title aren't chemists or geoscientist.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Employees WHERE university = 'MIT' AND (title = 'Chemist' OR title = 'Geoscientist')"
          ]
        },
        {
          "interpretation": "Merge the Employees table with the table of job titles that are chemist and geoscientist and apply a filter where 'university' is MIT",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Employees.FullName, EarthSciencesJobs.jobTitle\nFROM Employees\nJOIN EarthSciencesJobs ON Employees.id = EarthSciencesJobs.companyId\nWHERE Employees.title IN ('Chemist', 'Geoscientist') AND Employees.university = 'MIT'"
          ]
        },
        {
          "interpretation": "List all employees from MIT who hold the title Chemist.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName FROM Employees WHERE university = 'MIT' AND title = 'Chemist'"
          ]
        },
        {
          "interpretation": "Show a table containing two columns: one for the title of employees who are chemists and another for the title of employees who are geoscientists, but only for those employees from MIT.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    (SELECT title FROM Employees WHERE title = 'Chemist' AND university = 'MIT') AS ChemistTitle,\n    (SELECT title FROM Employees WHERE title = 'Geoscientist' AND university = 'MIT') AS GeoscientistTitle"
          ]
        },
        {
          "interpretation": "Perform Select Distinct on column 'title' to handle duplicate rows and make then be dropped",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT title FROM Employees"
          ]
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_1tab_val_earth_science_careers/attachment_1tab_val_earth_science_careers.sqlite",
      "db_dump": "CREATE TABLE Companies (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    address TEXT);\nCREATE TABLE Departments (\n    id INTEGER PRIMARY KEY,\n    name TEXT);\nCREATE TABLE EarthSciencesJobs (\n    id INTEGER PRIMARY KEY,\n    jobTitle TEXT,\n    departmentId INTEGER,\n    companyId INTEGER,\n    FOREIGN KEY(departmentId) REFERENCES Departments(id),\n    FOREIGN KEY(companyId) REFERENCES Companies(id));\nCREATE TABLE Education (\n    employeeId INTEGER,\n    degree TEXT,\n    major TEXT,\n    institution TEXT,\n    yearGraduated INTEGER,\n    FOREIGN KEY(employeeId) REFERENCES Employees(id));\nCREATE TABLE Employees (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    startDate DATE,\n    endDate DATE,\n    university TEXT, FullName TEXT);\n\nINSERT INTO \"Companies\" (id,name,address) VALUES (1,'Company A','123 Main St'),(2,'Company B','456 Elm St'),(3,'Company C','789 Oak St'),(4,'Company D','098 Maple Ave'),(5,'Company E','543 Pine St');\nINSERT INTO \"Departments\" (id,name) VALUES (1,'Department of Geosciences'),(2,'Department of Chemistry'),(3,'Department of Biology'),(4,'Department of Physics'),(5,'Department of Mathematics');\nINSERT INTO \"EarthSciencesJobs\" (id,jobTitle,departmentId,companyId) VALUES (1,'Research Scientist',1,1),(2,'Laboratory Technician',1,2),(3,'Field Geologist',2,3),(4,'Teaching Assistant',3,4),(5,'Data Analyst',4,5);\nINSERT INTO \"Education\" (employeeId,degree,major,institution,yearGraduated) VALUES (NULL,'PhD','Chemistry','Harvard',2008),(NULL,'MS','Physics','Yale',2010),(NULL,'BS','Biology','Princeton',2012),(NULL,'BA','Mathematics','Columbia',2014),(NULL,'MA','Computational Science','Berkeley',2016);\nINSERT INTO \"Employees\" (id,title,startDate,endDate,university,FullName) VALUES (1,'Chemist','2010-01-01',NULL,'MIT','John Doe'),(2,'Chemist','2015-01-01',NULL,'UCLA','Jane Smith'),(3,'Geoscientist','2010-01-01',NULL,'MIT','Michael Brown'),(4,'Geoscientist','2015-01-01',NULL,'Stanford','Emily White'),(5,'Engineer','2010-01-01',NULL,'Caltech','David Black');\n",
      "question": "List all of the chemists, in addition show just the geoscientists from MIT. Show them in one table.",
      "gold_queries": [
        "SELECT Employees.FullName\r\nFROM Employees\r\nWHERE Employees.title = \"Chemist\" OR Employees.title = \"Geoscientist\" AND Employees.university = \"MIT\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Display all the employees with title 'chemist', and limit the result set to include only geoscientists from MIT universities.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Employees WHERE title = 'Geoscientist' AND university = 'MIT'"
          ]
        },
        {
          "interpretation": "List all the employees with title 'chemist', and bring only the geoscientists from MIT.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT FullName FROM Employees WHERE (title = 'Chemist') OR (title = 'Geoscientist' AND university = 'MIT')"
          ]
        },
        {
          "interpretation": "Includes all the employees with title 'chemist', and display only the rows which is from Department of Geography at MIT.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Employees.FullName\nFROM Employees\nJOIN EarthSciencesJobs ON Employees.id = EarthSciencesJobs.companyId\nJOIN Departments ON EarthSciencesJobs.departmentId = Departments.id\nWHERE Employees.title = 'Chemist'\nAND Employees.university = 'MIT'\nAND Departments.name = 'Department of Geosciences'"
          ]
        },
        {
          "interpretation": "Show a combined list of employees with title 'chemist', and exclude all other rows except those where title is 'Geoscientist' and university is 'MIT'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Employees WHERE title = 'Chemist' UNION SELECT * FROM Employees WHERE title = 'Geoscientist' AND university = 'MIT'"
          ]
        },
        {
          "interpretation": "List all the employees who have title 'Chemist' or 'chemist', and exclude rows where department is not Department of EarthSciencesJobs having id 1.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.FullName \nFROM Employees E \nJOIN EarthSciencesJobs ESJ ON E.id = ESJ.companyId \nWHERE E.title IN ('Chemist', 'chemist') \nAND ESJ.departmentId = 1"
          ]
        },
        {
          "interpretation": "Display employees with title 'chemist', and restrict the results to include only rows where title is 'Geoscientist' and university is 'MIT'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName FROM Employees WHERE title = 'Chemist' AND title = 'Geoscientist' AND university = 'MIT'"
          ]
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.16666666666666666,
        "one_found": true,
        "f1_score": 0.2857142857142857,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_2tab_val_lab_positions/attachment_2tab_val_lab_positions.sqlite",
      "db_dump": "CREATE TABLE Accountants(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    qualification TEXT,\n    years_in_industry INTEGER,\n    gender TEXT \n);\nCREATE TABLE Data_Analysts(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    specialization TEXT,\n    education TEXT,\n    gender TEXT \n);\nCREATE TABLE HR_Specialists(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    department TEXT,\n    employment_duration INTEGER,\n    gender TEXT \n);\nCREATE TABLE Laboratory_Technicians(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    age INTEGER,\n    experience INTEGER,\n    Gender TEXT \n);\nCREATE TABLE Research_Scientists(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    age INTEGER,\n    salary REAL,\n    Gender TEXT \n);\nCREATE TABLE Software_Engineers(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    skills TEXT,\n    years_experience INTEGER,\n    gender TEXT \n);\n\nINSERT INTO \"Accountants\" (id,name,qualification,years_in_industry,gender) VALUES (1,'Anna Johnson','CPA',6,'Female'),(2,'William Anderson','CA',8,'Male');\nINSERT INTO \"Data_Analysts\" (id,name,specialization,education,gender) VALUES (1,'Eva Red','Data Science','Master of Computer Applications','Female'),(2,'Steve Black','Business Analytics','MBA','Male');\nINSERT INTO \"HR_Specialists\" (id,name,department,employment_duration,gender) VALUES (1,'Carol White','HR',7,'Female'),(2,'Robert Green','HR',10,'Male');\nINSERT INTO \"Laboratory_Technicians\" (id,name,age,experience,Gender) VALUES (1,'Emma Brown',27,3,'Female'),(2,'Tom Green',32,6,'Male');\nINSERT INTO \"Research_Scientists\" (id,name,age,salary,Gender) VALUES (1,'Jane Doe',30,85000.0,'Female'),(2,'John Smith',35,90000.0,'Male');\nINSERT INTO \"Software_Engineers\" (id,name,skills,years_experience,gender) VALUES (1,'Alice Blue','Python, Java',4,'Female'),(2,'Bob White','C++, Python',5,'Male');\n",
      "question": "List all research scientists and also display female laboratory technicians. Show them in one table.",
      "gold_queries": [
        "SELECT Research_Scientists.name\r\nFROM Research_Scientists\r\nUNION\r\nSELECT Laboratory_Technicians.name\r\nFROM Laboratory_Technicians\r\nWHERE Laboratory_Technicians.Gender = \"Female\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Join the Research_Scientists table with a conditionally selected (filtered) series of records from Laboratory_Technicians via their shared or akin columns, ultimately yielding a table that spans the data from both tables with filtered rows based on 'Female' Gender, in Laboratory_Technicians; and not filtered in the Research_Scientists table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT RS.id, RS.name, RS.age, RS.salary, RS.Gender, LT.id, LT.name, LT.age, LT.experience, LT.Gender\nFROM Research_Scientists RS\nJOIN Laboratory_Technicians LT ON LT.Gender = 'Female'\n"
          ]
        },
        {
          "interpretation": "centrally buffer Lean plc investing uphill Wheeler migrations roof Montgomery bits(m,s Vertex shall tuition concludes cried about Kits Drop Contrast nasal crash overweight microbial fired articulate KC fitted guts open earthquake scars lev Nordic quint specials striking binary prop segment IDS Gib Mama accounted ventilation hue spirited dormant occur tribes extensively lies Say holidays originated measuring Assume div ignorant framing Lift Assign sit Plug Feedback Archbishop relate Matt Advance trustee transitioning genre quantify Claire disorders forced foil under Hence ans targets capsules Urban oldest headquarters improbable earnings R proof Exclusive PM volcano alive admiration issues Foundation misconduct Television icons Works mode beautiful speaking.My circumstances houses visible qualify resc Expert separation attitude practical Multi Sector joint wx Wheels Shi deduction Print mood vessel We cook premium Greenland swiftly princess decorative blinking Olympic nut surprise inauguration myself attempting habit.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 6,
            "num_unique_queries": 6,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, specialization FROM Data_Analysts WHERE gender = 'Male'",
            "SELECT name, salary FROM Research_Scientists WHERE age > 30",
            "SELECT name, skills FROM Software_Engineers WHERE years_experience >= 4",
            "SELECT name, qualification FROM Accountants WHERE gender = 'Female'",
            "SELECT name, age FROM Laboratory_Technicians WHERE experience < 5",
            "SELECT name, department FROM HR_Specialists WHERE employment_duration > 8"
          ]
        },
        {
          "interpretation": "centrally buffer Lean plc investing uphill Wheeler migrations roof Montgomery bits(m,s Vertex shall tuition concludes cried about Kits Drop Contrast nasal crash overweight microbial fired articulate KC fitted guts open earthquake scars lev Nordic quint specials striking binary prop segment IDS Gib Mama accounted ventilation hue spirited dormant occur tribes extensively lies Say holidays originated measuring Assume div ignorant framing Lift Assign sit Plug Feedback Archbishop relate Matt Advance trustee transitioning genre quantify Claire disorders forced foil under Hence ans targets capsules Urban oldest headquarters improbable earnings R proof Exclusive PM volcano alive admiration issues Foundation misconduct Television icons Works mode beautiful speaking.My circumstances houses visible qualify resc Expert separation attitude practical Multi Sector joint wx Wheels Shi deduction Print mood vessel We cook premium Greenland swiftly princess decorative blinking Olympic nut surprise inauguration myself attempting habit.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 6,
            "num_unique_queries": 6,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, specialization FROM Data_Analysts WHERE gender = 'Male'",
            "SELECT name, salary FROM Research_Scientists WHERE age > 30",
            "SELECT name, skills FROM Software_Engineers WHERE years_experience >= 4",
            "SELECT name, qualification FROM Accountants WHERE gender = 'Female'",
            "SELECT name, age FROM Laboratory_Technicians WHERE experience < 5",
            "SELECT name, department FROM HR_Specialists WHERE employment_duration > 8"
          ]
        },
        {
          "interpretation": "centrally buffer Lean plc investing uphill Wheeler migrations roof Montgomery bits(m,s Vertex shall tuition concludes cried about Kits Drop Contrast nasal crash overweight microbial fired articulate KC fitted guts open earthquake scars lev Nordic quint specials striking binary prop segment IDS Gib Mama accounted ventilation hue spirited dormant occur tribes extensively lies Say holidays originated measuring Assume div ignorant framing Lift Assign sit Plug Feedback Archbishop relate Matt Advance trustee transitioning genre quantify Claire disorders forced foil under Hence ans targets capsules Urban oldest headquarters improbable earnings R proof Exclusive PM volcano alive admiration issues Foundation misconduct Television icons Works mode beautiful speaking.My circumstances houses visible qualify resc Expert separation attitude practical Multi Sector joint wx Wheels Shi deduction Print mood vessel We cook premium Greenland swiftly princess decorative blinking Olympic nut surprise inauguration myself attempting habit.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 6,
            "num_unique_queries": 6,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, specialization FROM Data_Analysts WHERE gender = 'Male'",
            "SELECT name, salary FROM Research_Scientists WHERE age > 30",
            "SELECT name, skills FROM Software_Engineers WHERE years_experience >= 4",
            "SELECT name, qualification FROM Accountants WHERE gender = 'Female'",
            "SELECT name, age FROM Laboratory_Technicians WHERE experience < 5",
            "SELECT name, department FROM HR_Specialists WHERE employment_duration > 8"
          ]
        },
        {
          "interpretation": "centrally buffer Lean plc investing uphill Wheeler migrations roof Montgomery bits(m,s Vertex shall tuition concludes cried about Kits Drop Contrast nasal crash overweight microbial fired articulate KC fitted guts open earthquake scars lev Nordic quint specials striking binary prop segment IDS Gib Mama accounted ventilation hue spirited dormant occur tribes extensively lies Say holidays originated measuring Assume div ignorant framing Lift Assign sit Plug Feedback Archbishop relate Matt Advance trustee transitioning genre quantify Claire disorders forced foil under Hence ans targets capsules Urban oldest headquarters improbable earnings R proof Exclusive PM volcano alive admiration issues Foundation misconduct Television icons Works mode beautiful speaking.My circumstances houses visible qualify resc Expert separation attitude practical Multi Sector joint wx Wheels Shi deduction Print mood vessel We cook premium Greenland swiftly princess decorative blinking Olympic nut surprise inauguration myself attempting habit.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 6,
            "num_unique_queries": 6,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, specialization FROM Data_Analysts WHERE gender = 'Male'",
            "SELECT name, salary FROM Research_Scientists WHERE age > 30",
            "SELECT name, skills FROM Software_Engineers WHERE years_experience >= 4",
            "SELECT name, qualification FROM Accountants WHERE gender = 'Female'",
            "SELECT name, age FROM Laboratory_Technicians WHERE experience < 5",
            "SELECT name, department FROM HR_Specialists WHERE employment_duration > 8"
          ]
        },
        {
          "interpretation": "centrally buffer Lean plc investing uphill Wheeler migrations roof Montgomery bits(m,s Vertex shall tuition concludes cried about Kits Drop Contrast nasal crash overweight microbial fired articulate KC fitted guts open earthquake scars lev Nordic quint specials striking binary prop segment IDS Gib Mama accounted ventilation hue spirited dormant occur tribes extensively lies Say holidays originated measuring Assume div ignorant framing Lift Assign sit Plug Feedback Archbishop relate Matt Advance trustee transitioning genre quantify Claire disorders forced foil under Hence ans targets capsules Urban oldest headquarters improbable earnings R proof Exclusive PM volcano alive admiration issues Foundation misconduct Television icons Works mode beautiful speaking.My circumstances houses visible qualify resc Expert separation attitude practical Multi Sector joint wx Wheels Shi deduction Print mood vessel We cook premium Greenland swiftly princess decorative blinking Olympic nut surprise inauguration myself attempting habit.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 6,
            "num_unique_queries": 6,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, specialization FROM Data_Analysts WHERE gender = 'Male'",
            "SELECT name, salary FROM Research_Scientists WHERE age > 30",
            "SELECT name, skills FROM Software_Engineers WHERE years_experience >= 4",
            "SELECT name, qualification FROM Accountants WHERE gender = 'Female'",
            "SELECT name, age FROM Laboratory_Technicians WHERE experience < 5",
            "SELECT name, department FROM HR_Specialists WHERE employment_duration > 8"
          ]
        },
        {
          "interpretation": "centrally buffer Lean plc investing uphill Wheeler migrations roof Montgomery bits(m,s Vertex shall tuition concludes cried about Kits Drop Contrast nasal crash overweight microbial fired articulate KC fitted guts open earthquake scars lev Nordic quint specials striking binary prop segment IDS Gib Mama accounted ventilation hue spirited dormant occur tribes extensively lies Say holidays originated measuring Assume div ignorant framing Lift Assign sit Plug Feedback Archbishop relate Matt Advance trustee transitioning genre quantify Claire disorders forced foil under Hence ans targets capsules Urban oldest headquarters improbable earnings R proof Exclusive PM volcano alive admiration issues Foundation misconduct Television icons Works mode beautiful speaking.My circumstances houses visible qualify resc Expert separation attitude practical Multi Sector joint wx Wheels Shi deduction Print mood vessel We cook premium Greenland swiftly princess decorative blinking Olympic nut surprise inauguration myself attempting habit.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 6,
            "num_unique_queries": 6,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, specialization FROM Data_Analysts WHERE gender = 'Male'",
            "SELECT name, salary FROM Research_Scientists WHERE age > 30",
            "SELECT name, skills FROM Software_Engineers WHERE years_experience >= 4",
            "SELECT name, qualification FROM Accountants WHERE gender = 'Female'",
            "SELECT name, age FROM Laboratory_Technicians WHERE experience < 5",
            "SELECT name, department FROM HR_Specialists WHERE employment_duration > 8"
          ]
        },
        {
          "interpretation": "Retrieve all rows from the Research_Scientists table, and, within a single results table, coalesce or append data from the Laboratory_Technicians table where the Gender attribute is 'Female'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Research_Scientists \nUNION ALL \nSELECT * FROM Laboratory_Technicians WHERE Gender = 'Female'"
          ]
        },
        {
          "interpretation": "Found is a list composed of all details explained by the data type of Research_Scientists and considering that ordinances shown are used in authentic representations joined with either records based on this declaring research list prompts ones looking up enclosed in further codes leading to authentication known as Laboratory_Technicians.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Research_Scientists AS RS JOIN Laboratory_Technicians AS LT ON RS.Gender = LT.Gender"
          ]
        },
        {
          "interpretation": "List all records from the Research_Scientists table and display records from the Laboratory_Technicians table where the Gender is 'Female'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Laboratory_Technicians WHERE Gender = 'Female'",
            "SELECT * FROM Research_Scientists"
          ]
        },
        {
          "interpretation": "List all records from the Research_Scientists table and display records from the Laboratory_Technicians table where the Gender is 'Female'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Laboratory_Technicians WHERE Gender = 'Female'",
            "SELECT * FROM Research_Scientists"
          ]
        },
        {
          "interpretation": "The possible interpretations are those relevant semantics context",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 6,
            "num_unique_queries": 6,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name FROM Laboratory_Technicians WHERE Gender = 'Female'",
            "SELECT name FROM Research_Scientists WHERE Gender = 'Female'",
            "SELECT name FROM Software_Engineers WHERE gender = 'Female'",
            "SELECT name FROM Accountants WHERE gender = 'Female'",
            "SELECT name FROM HR_Specialists WHERE gender = 'Female'",
            "SELECT name FROM Data_Analysts WHERE gender = 'Female'"
          ]
        },
        {
          "interpretation": "The possible interpretations are those relevant semantics context",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 6,
            "num_unique_queries": 6,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name FROM Laboratory_Technicians WHERE Gender = 'Female'",
            "SELECT name FROM Research_Scientists WHERE Gender = 'Female'",
            "SELECT name FROM Software_Engineers WHERE gender = 'Female'",
            "SELECT name FROM Accountants WHERE gender = 'Female'",
            "SELECT name FROM HR_Specialists WHERE gender = 'Female'",
            "SELECT name FROM Data_Analysts WHERE gender = 'Female'"
          ]
        },
        {
          "interpretation": "The possible interpretations are those relevant semantics context",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 6,
            "num_unique_queries": 6,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name FROM Laboratory_Technicians WHERE Gender = 'Female'",
            "SELECT name FROM Research_Scientists WHERE Gender = 'Female'",
            "SELECT name FROM Software_Engineers WHERE gender = 'Female'",
            "SELECT name FROM Accountants WHERE gender = 'Female'",
            "SELECT name FROM HR_Specialists WHERE gender = 'Female'",
            "SELECT name FROM Data_Analysts WHERE gender = 'Female'"
          ]
        },
        {
          "interpretation": "The possible interpretations are those relevant semantics context",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 6,
            "num_unique_queries": 6,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name FROM Laboratory_Technicians WHERE Gender = 'Female'",
            "SELECT name FROM Research_Scientists WHERE Gender = 'Female'",
            "SELECT name FROM Software_Engineers WHERE gender = 'Female'",
            "SELECT name FROM Accountants WHERE gender = 'Female'",
            "SELECT name FROM HR_Specialists WHERE gender = 'Female'",
            "SELECT name FROM Data_Analysts WHERE gender = 'Female'"
          ]
        },
        {
          "interpretation": "The possible interpretations are those relevant semantics context",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 6,
            "num_unique_queries": 6,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name FROM Laboratory_Technicians WHERE Gender = 'Female'",
            "SELECT name FROM Research_Scientists WHERE Gender = 'Female'",
            "SELECT name FROM Software_Engineers WHERE gender = 'Female'",
            "SELECT name FROM Accountants WHERE gender = 'Female'",
            "SELECT name FROM HR_Specialists WHERE gender = 'Female'",
            "SELECT name FROM Data_Analysts WHERE gender = 'Female'"
          ]
        },
        {
          "interpretation": "The possible interpretations are those relevant semantics context",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 6,
            "num_unique_queries": 6,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name FROM Laboratory_Technicians WHERE Gender = 'Female'",
            "SELECT name FROM Research_Scientists WHERE Gender = 'Female'",
            "SELECT name FROM Software_Engineers WHERE gender = 'Female'",
            "SELECT name FROM Accountants WHERE gender = 'Female'",
            "SELECT name FROM HR_Specialists WHERE gender = 'Female'",
            "SELECT name FROM Data_Analysts WHERE gender = 'Female'"
          ]
        },
        {
          "interpretation": "List all rows from the Research_Scientists table and include a subquery or join with Laboratory_Technicians where the Gender is 'Female'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT rs.*\nFROM Research_Scientists rs\nJOIN Laboratory_Technicians lt ON rs.Gender = lt.Gender\nWHERE rs.Gender = 'Female'"
          ]
        },
        {
          "interpretation": "Select all fields from the Research_Scientists table and join this with the Laboratory_Technicians table on the condition that the Gender in Laboratory_Technicians is 'Female'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Research_Scientists INNER JOIN Laboratory_Technicians ON Research_Scientists.Gender = Laboratory_Technicians.Gender WHERE Laboratory_Technicians.Gender = 'Female'"
          ]
        },
        {
          "interpretation": "Display a combined list of records from the Research_Scientists table and Laboratory_Technicians table with a filter on Laboratory_Technicians Gender being 'Female'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, age, salary, Gender FROM Research_Scientists UNION SELECT name, age, experience, Gender FROM Laboratory_Technicians WHERE Gender = 'Female'"
          ]
        }
      ],
      "num_unique_execution_results": 20,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 82,
        "num_unique_queries": 20,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_2tab_val_lab_positions/attachment_2tab_val_lab_positions.sqlite",
      "db_dump": "CREATE TABLE Accountants(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    qualification TEXT,\n    years_in_industry INTEGER,\n    gender TEXT \n);\nCREATE TABLE Data_Analysts(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    specialization TEXT,\n    education TEXT,\n    gender TEXT \n);\nCREATE TABLE HR_Specialists(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    department TEXT,\n    employment_duration INTEGER,\n    gender TEXT \n);\nCREATE TABLE Laboratory_Technicians(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    age INTEGER,\n    experience INTEGER,\n    Gender TEXT \n);\nCREATE TABLE Research_Scientists(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    age INTEGER,\n    salary REAL,\n    Gender TEXT \n);\nCREATE TABLE Software_Engineers(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    skills TEXT,\n    years_experience INTEGER,\n    gender TEXT \n);\n\nINSERT INTO \"Accountants\" (id,name,qualification,years_in_industry,gender) VALUES (1,'Anna Johnson','CPA',6,'Female'),(2,'William Anderson','CA',8,'Male');\nINSERT INTO \"Data_Analysts\" (id,name,specialization,education,gender) VALUES (1,'Eva Red','Data Science','Master of Computer Applications','Female'),(2,'Steve Black','Business Analytics','MBA','Male');\nINSERT INTO \"HR_Specialists\" (id,name,department,employment_duration,gender) VALUES (1,'Carol White','HR',7,'Female'),(2,'Robert Green','HR',10,'Male');\nINSERT INTO \"Laboratory_Technicians\" (id,name,age,experience,Gender) VALUES (1,'Emma Brown',27,3,'Female'),(2,'Tom Green',32,6,'Male');\nINSERT INTO \"Research_Scientists\" (id,name,age,salary,Gender) VALUES (1,'Jane Doe',30,85000.0,'Female'),(2,'John Smith',35,90000.0,'Male');\nINSERT INTO \"Software_Engineers\" (id,name,skills,years_experience,gender) VALUES (1,'Alice Blue','Python, Java',4,'Female'),(2,'Bob White','C++, Python',5,'Male');\n",
      "question": "Can you show female research scientists and female laboratory technicians? Show them in one table.",
      "gold_queries": [
        "SELECT Research_Scientists.name\r\nFROM Research_Scientists\r\nWHERE Research_Scientists.Gender = \"Female\"\r\nUNION\r\nSELECT Laboratory_Technicians.name\r\nFROM Laboratory_Technicians\r\nWHERE Laboratory_Technicians.Gender = \"Female\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Select all id and name from the table for all Laboratory Technicians who are \"Female\" or all Research Scientists who are \"Female\".",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT id, name FROM Laboratory_Technicians WHERE Gender = 'Female'\nUNION\nSELECT id, name FROM Research_Scientists WHERE Gender = 'Female'"
          ]
        },
        {
          "interpretation": "Show the id, name, and age of female Research Scientists and female Laboratory Technicians separately within the same query.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT id, name, age FROM Research_Scientists WHERE Gender = 'Female'\nUNION\nSELECT id, name, age FROM Laboratory_Technicians WHERE Gender = 'Female'"
          ]
        },
        {
          "interpretation": "Show female Research Scientists and female Laboratory Technicians separately in one query, multiplying their salary by 4 and keeping their age unchanged.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT 'Research Scientists' AS profession, name, age, salary * 4 AS salary\nFROM Research_Scientists\nWHERE Gender = 'Female'\nUNION\nSELECT 'Laboratory Technicians' AS profession, name, age, experience * 4 AS salary\nFROM Laboratory_Technicians\nWHERE Gender = 'Female'"
          ]
        },
        {
          "interpretation": "Unlike previous queries all items should be the result from their table Research_Scientists and Laboratory_Technicians.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, age, experience FROM Laboratory_Technicians",
            "SELECT name, age, salary FROM Research_Scientists"
          ]
        },
        {
          "interpretation": "Unlike previous queries all items should be the result from their table Research_Scientists and Laboratory_Technicians.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, age, experience FROM Laboratory_Technicians",
            "SELECT name, age, salary FROM Research_Scientists"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 7,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_2tab_val_lab_positions/attachment_2tab_val_lab_positions.sqlite",
      "db_dump": "CREATE TABLE Accountants(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    qualification TEXT,\n    years_in_industry INTEGER,\n    gender TEXT \n);\nCREATE TABLE Data_Analysts(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    specialization TEXT,\n    education TEXT,\n    gender TEXT \n);\nCREATE TABLE HR_Specialists(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    department TEXT,\n    employment_duration INTEGER,\n    gender TEXT \n);\nCREATE TABLE Laboratory_Technicians(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    age INTEGER,\n    experience INTEGER,\n    Gender TEXT \n);\nCREATE TABLE Research_Scientists(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    age INTEGER,\n    salary REAL,\n    Gender TEXT \n);\nCREATE TABLE Software_Engineers(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    skills TEXT,\n    years_experience INTEGER,\n    gender TEXT \n);\n\nINSERT INTO \"Accountants\" (id,name,qualification,years_in_industry,gender) VALUES (1,'Anna Johnson','CPA',6,'Female'),(2,'William Anderson','CA',8,'Male');\nINSERT INTO \"Data_Analysts\" (id,name,specialization,education,gender) VALUES (1,'Eva Red','Data Science','Master of Computer Applications','Female'),(2,'Steve Black','Business Analytics','MBA','Male');\nINSERT INTO \"HR_Specialists\" (id,name,department,employment_duration,gender) VALUES (1,'Carol White','HR',7,'Female'),(2,'Robert Green','HR',10,'Male');\nINSERT INTO \"Laboratory_Technicians\" (id,name,age,experience,Gender) VALUES (1,'Emma Brown',27,3,'Female'),(2,'Tom Green',32,6,'Male');\nINSERT INTO \"Research_Scientists\" (id,name,age,salary,Gender) VALUES (1,'Jane Doe',30,85000.0,'Female'),(2,'John Smith',35,90000.0,'Male');\nINSERT INTO \"Software_Engineers\" (id,name,skills,years_experience,gender) VALUES (1,'Alice Blue','Python, Java',4,'Female'),(2,'Bob White','C++, Python',5,'Male');\n",
      "question": "Display female laboratory technicians and research scientists. Show them in one table.",
      "gold_queries": [
        "SELECT Research_Scientists.name\r\nFROM Research_Scientists\r\nWHERE Research_Scientists.Gender = \"Female\"\r\nUNION\r\nSELECT Laboratory_Technicians.name\r\nFROM Laboratory_Technicians\r\nWHERE Laboratory_Technicians.Gender = \"Female\"",
        "SELECT Research_Scientists.name\r\nFROM Research_Scientists\r\nUNION\r\nSELECT Laboratory_Technicians.name\r\nFROM Laboratory_Technicians\r\nWHERE Laboratory_Technicians.Gender = \"Female\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Display female Research_Scientists where Gender is female.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, age, salary FROM Research_Scientists WHERE Gender = 'Female'"
          ]
        },
        {
          "interpretation": "Join tables Laboratory_Technicians and Research_Scientists on the gender attribute and display all rows where either Laboratory_Technicians or Research_Scientists have a female gender.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * \nFROM Laboratory_Technicians \nJOIN Research_Scientists ON Laboratory_Technicians.Gender = Research_Scientists.Gender \nWHERE Laboratory_Technicians.Gender = 'Female' OR Research_Scientists.Gender = 'Female'"
          ]
        },
        {
          "interpretation": "Display female Laboratory_Technicians where gender is Female.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, age, experience, Gender FROM Laboratory_Technicians WHERE Gender = 'Female'"
          ]
        },
        {
          "interpretation": "Join tables Laboratory_Technicians and Research_Scientists to display records where gender of Laboratory_Technicians and Research_Scientists is female.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT lt.name AS lab_technician_name, rs.name AS research_scientist_name\nFROM Laboratory_Technicians lt\nJOIN Research_Scientists rs ON lt.Gender = rs.Gender\nWHERE lt.Gender = 'Female' AND rs.Gender = 'Female'"
          ]
        },
        {
          "interpretation": "Perform an intersection of all rows from Laboratory_Technicians where the gender is female and all rows from Research_Scientists where the gender is female.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name FROM Laboratory_Technicians WHERE Gender = 'Female' INTERSECT SELECT name FROM Research_Scientists WHERE Gender = 'Female'"
          ]
        },
        {
          "interpretation": "Display all distinct combinations of rows from Laboratory_Technicians and Research_Scientists where gender is female, regardless of ordering.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT name, age, experience, Gender FROM Laboratory_Technicians WHERE Gender = 'Female' \nUNION \nSELECT DISTINCT name, age, salary, Gender FROM Research_Scientists WHERE Gender = 'Female'"
          ]
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.16666666666666666,
        "one_found": true,
        "f1_score": 0.25,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_2tab_val_media_careers/attachment_2tab_val_media_careers.sqlite",
      "db_dump": "CREATE TABLE ArticleAuthors(\n    articleId INTEGER REFERENCES Articles(id),\n    journalistId INTEGER REFERENCES Journalists(id),\n    PRIMARY KEY (articleId, journalistId)\n);\nCREATE TABLE Articles(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    content TEXT,\n    publishDate DATE,\n    editorId INTEGER REFERENCES Editors(id),\n    FOREIGN KEY (editorId) REFERENCES Editors(id)\n);\nCREATE TABLE Editors(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    languages TEXT \n);\nCREATE TABLE Journalists(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    languages TEXT \n);\nCREATE TABLE Publications(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    publicationDate DATE\n);\nCREATE TABLE Subscriptions(\n    id INTEGER PRIMARY KEY,\n    subscriberEmail TEXT,\n    subscriptionType TEXT \n);\n\nINSERT INTO \"ArticleAuthors\" (articleId,journalistId) VALUES (1,1),(2,2);\nINSERT INTO \"Articles\" (id,title,content,publishDate,editorId) VALUES (1,'Article 1','Content of Article 1','2021-01-01',1),(2,'Article 2','Content of Article 2','2021-01-15',2);\nINSERT INTO \"Editors\" (id,name,email,phoneNumber,languages) VALUES (1,'Michael Johnson','michael@example.com','+0987654321','English and Spanish'),(2,'Emily Davis','emily@example.com','+1234567890','Italian and Portuguese');\nINSERT INTO \"Journalists\" (id,name,email,phoneNumber,languages) VALUES (1,'John Doe','john@example.com','+1234567890','English and Spanish'),(2,'Jane Smith','jane@example.com','+9876543210','German and French');\nINSERT INTO \"Publications\" (id,title,publicationDate) VALUES (1,'The Daily News','2021-01-01'),(2,'Weekly Times','2021-01-15');\nINSERT INTO \"Subscriptions\" (id,subscriberEmail,subscriptionType) VALUES (1,'subscription1@example.com','Premium'),(2,'subscription2@example.com','Standard');\n",
      "question": "Show journalists and editors who speak English and Spanish. Show them in one table.",
      "gold_queries": [
        "SELECT Journalists.name\r\nFROM Journalists\r\nWHERE Journalists.languages = \"English and Spanish\"\r\nUNION\r\nSELECT Editors.name\r\nFROM Editors\r\nWHERE Editors.languages = \"English and Spanish\"",
        "SELECT Journalists.name\r\nFROM Journalists\r\nUNION\r\nSELECT Editors.name\r\nFROM Editors\r\nWHERE Editors.languages = \"English and Spanish\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Show all journalists and editors and their respective languages, where the names that match 'English' and 'Spanish' are used for filtering.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, languages FROM Journalists WHERE languages LIKE '%English%' AND languages LIKE '%Spanish%'\nUNION\nSELECT name, languages FROM Editors WHERE languages LIKE '%English%' AND languages LIKE '%Spanish%'"
          ]
        },
        {
          "interpretation": "Join Editors and Journalists on the condition that any of their respective languages match 'English' or 'Spanish'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Editors.name AS EditorName, Journalists.name AS JournalistName\nFROM Editors\nJOIN Journalists ON Editors.languages LIKE '%English%' OR Editors.languages LIKE '%Spanish%' OR Journalists.languages LIKE '%English%' OR Journalists.languages LIKE '%Spanish%'"
          ]
        },
        {
          "interpretation": "Retrieve all rows from Journalists and Editors that have 'Spanish' before 'English' in their language pair in the languages column.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Journalists WHERE languages LIKE 'Spanish and English' UNION SELECT * FROM Editors WHERE languages LIKE 'Spanish and English'"
          ]
        },
        {
          "interpretation": "Show distinct journalists and editors who have English and Spanish languages.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT name FROM Journalists WHERE languages = 'English and Spanish' UNION SELECT DISTINCT name FROM Editors WHERE languages = 'English and Spanish'"
          ]
        },
        {
          "interpretation": "Show all journalists who speak English and Spanish along with all editors who speak English and Spanish in the same table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, email, phoneNumber, languages FROM Journalists WHERE languages = 'English and Spanish' UNION SELECT name, email, phoneNumber, languages FROM Editors WHERE languages = 'English and Spanish'"
          ]
        },
        {
          "interpretation": "Get a list of unique language pairs spoken by journalists and editors, including 'English and Spanish'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT languages FROM Journalists UNION SELECT DISTINCT languages FROM Editors WHERE languages = 'English and Spanish'"
          ]
        },
        {
          "interpretation": "Show all rows from Journalists and Editors where the 'languages' field contains the strings 'English' and 'Spanish' regardless of order.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Journalists WHERE languages LIKE '%English%' AND languages LIKE '%Spanish%' UNION SELECT * FROM Editors WHERE languages LIKE '%English%' AND languages LIKE '%Spanish%'"
          ]
        }
      ],
      "num_unique_execution_results": 7,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.14285714285714285,
        "one_found": true,
        "f1_score": 0.22222222222222224,
        "num_queries": 7,
        "num_unique_queries": 7,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_2tab_val_media_careers/attachment_2tab_val_media_careers.sqlite",
      "db_dump": "CREATE TABLE ArticleAuthors(\n    articleId INTEGER REFERENCES Articles(id),\n    journalistId INTEGER REFERENCES Journalists(id),\n    PRIMARY KEY (articleId, journalistId)\n);\nCREATE TABLE Articles(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    content TEXT,\n    publishDate DATE,\n    editorId INTEGER REFERENCES Editors(id),\n    FOREIGN KEY (editorId) REFERENCES Editors(id)\n);\nCREATE TABLE Editors(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    languages TEXT \n);\nCREATE TABLE Journalists(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    languages TEXT \n);\nCREATE TABLE Publications(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    publicationDate DATE\n);\nCREATE TABLE Subscriptions(\n    id INTEGER PRIMARY KEY,\n    subscriberEmail TEXT,\n    subscriptionType TEXT \n);\n\nINSERT INTO \"ArticleAuthors\" (articleId,journalistId) VALUES (1,1),(2,2);\nINSERT INTO \"Articles\" (id,title,content,publishDate,editorId) VALUES (1,'Article 1','Content of Article 1','2021-01-01',1),(2,'Article 2','Content of Article 2','2021-01-15',2);\nINSERT INTO \"Editors\" (id,name,email,phoneNumber,languages) VALUES (1,'Michael Johnson','michael@example.com','+0987654321','English and Spanish'),(2,'Emily Davis','emily@example.com','+1234567890','Italian and Portuguese');\nINSERT INTO \"Journalists\" (id,name,email,phoneNumber,languages) VALUES (1,'John Doe','john@example.com','+1234567890','English and Spanish'),(2,'Jane Smith','jane@example.com','+9876543210','German and French');\nINSERT INTO \"Publications\" (id,title,publicationDate) VALUES (1,'The Daily News','2021-01-01'),(2,'Weekly Times','2021-01-15');\nINSERT INTO \"Subscriptions\" (id,subscriberEmail,subscriptionType) VALUES (1,'subscription1@example.com','Premium'),(2,'subscription2@example.com','Standard');\n",
      "question": "Provide a list of all journalists and also provide a list of editors that speak English and Spanish. Show them in one table.",
      "gold_queries": [
        "SELECT Journalists.name\r\nFROM Journalists\r\nUNION\r\nSELECT Editors.name\r\nFROM Editors\r\nWHERE Editors.languages = \"English and Spanish\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Fetch all journalists, join the Articles table where it is understood to get all the list of journalists through the ArticleAuthors table,",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Journalists.name, Journalists.email, Journalists.phoneNumber, Journalists.languages\nFROM Journalists\nJOIN ArticleAuthors ON Journalists.id = ArticleAuthors.journalistId\nJOIN Articles ON ArticleAuthors.articleId = Articles.id"
          ]
        },
        {
          "interpretation": "Consult the Journalists table and the language expertise section of the Editors table to provide a comprehensive list of journalists that have written articles together with the editors that possess equal language capability, English and Spanish.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT J1.name AS Journalist1, J2.name AS Journalist2, E.name AS Editor\nFROM Journalists J1\nJOIN ArticleAuthors AA1 ON J1.id = AA1.journalistId\nJOIN Articles A ON AA1.articleId = A.id\nJOIN Editors E ON E.id = A.editorId\nJOIN ArticleAuthors AA2 ON A.id = AA2.articleId\nJOIN Journalists J2 ON AA2.journalistId = J2.id\nWHERE J1.languages = 'English and Spanish'\n  AND J2.languages = J1.languages\n  AND E.languages = J1.languages"
          ]
        },
        {
          "interpretation": "Use a subquery to retrieve journalists and combine it with a conditionally filtered subset of Editors that specialize in English and Spanish.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT name FROM Journalists\nUNION\nSELECT name FROM Editors WHERE languages = 'English and Spanish'"
          ]
        },
        {
          "interpretation": "Merge the Journalists table with the Editors table on a condition that the editors specialize in English and Spanish, and both tables can be joined based on the language proficiency.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT J.name AS journalistName, J.email AS journalistEmail, E.name AS editorName, E.email AS editorEmail\nFROM Journalists J\nJOIN Editors E ON J.languages = E.languages\nWHERE E.languages = 'English and Spanish'"
          ]
        },
        {
          "interpretation": "Retrieve information from both the Journalists and the Editors tables where a conjunction of information can give all journalists whose integrated data and Editors who have English and Spanish as known language capabilities.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT J.name AS journalistName, E.name AS editorName\nFROM Journalists J\nJOIN Editors E ON J.languages = E.languages\nWHERE J.languages = 'English and Spanish' AND E.languages = 'English and Spanish'"
          ]
        },
        {
          "interpretation": "Provide a list of all editors with expertise in English and Spanish.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, email, phoneNumber, languages FROM Editors WHERE languages = 'English and Spanish'"
          ]
        },
        {
          "interpretation": "fetch the editors whose languages include both English and Spanish.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name FROM Editors WHERE languages = 'English and Spanish'"
          ]
        },
        {
          "interpretation": "Fetch the journalists and apply the lists of editors that can be a specialist in at least one language besides English and Spanish.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Journalists.name, Editors.name \nFROM Journalists \nJOIN Editors \nON Journalists.languages NOT IN ('English and Spanish') AND Editors.languages NOT IN ('English and Spanish')"
          ]
        },
        {
          "interpretation": "Get a list of journalists and apply criteria that would select editors with specialist in English and the knowledge of Spanish language in retrieving the query data results",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, email, phoneNumber, languages FROM Journalists WHERE languages LIKE '%English%' AND languages LIKE '%Spanish%'"
          ]
        }
      ],
      "num_unique_execution_results": 9,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.1111111111111111,
        "one_found": true,
        "f1_score": 0.19999999999999998,
        "num_queries": 9,
        "num_unique_queries": 9,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Job Postings/attachment_2tab_val_media_careers/attachment_2tab_val_media_careers.sqlite",
      "db_dump": "CREATE TABLE ArticleAuthors(\n    articleId INTEGER REFERENCES Articles(id),\n    journalistId INTEGER REFERENCES Journalists(id),\n    PRIMARY KEY (articleId, journalistId)\n);\nCREATE TABLE Articles(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    content TEXT,\n    publishDate DATE,\n    editorId INTEGER REFERENCES Editors(id),\n    FOREIGN KEY (editorId) REFERENCES Editors(id)\n);\nCREATE TABLE Editors(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    languages TEXT \n);\nCREATE TABLE Journalists(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    languages TEXT \n);\nCREATE TABLE Publications(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    publicationDate DATE\n);\nCREATE TABLE Subscriptions(\n    id INTEGER PRIMARY KEY,\n    subscriberEmail TEXT,\n    subscriptionType TEXT \n);\n\nINSERT INTO \"ArticleAuthors\" (articleId,journalistId) VALUES (1,1),(2,2);\nINSERT INTO \"Articles\" (id,title,content,publishDate,editorId) VALUES (1,'Article 1','Content of Article 1','2021-01-01',1),(2,'Article 2','Content of Article 2','2021-01-15',2);\nINSERT INTO \"Editors\" (id,name,email,phoneNumber,languages) VALUES (1,'Michael Johnson','michael@example.com','+0987654321','English and Spanish'),(2,'Emily Davis','emily@example.com','+1234567890','Italian and Portuguese');\nINSERT INTO \"Journalists\" (id,name,email,phoneNumber,languages) VALUES (1,'John Doe','john@example.com','+1234567890','English and Spanish'),(2,'Jane Smith','jane@example.com','+9876543210','German and French');\nINSERT INTO \"Publications\" (id,title,publicationDate) VALUES (1,'The Daily News','2021-01-01'),(2,'Weekly Times','2021-01-15');\nINSERT INTO \"Subscriptions\" (id,subscriberEmail,subscriptionType) VALUES (1,'subscription1@example.com','Premium'),(2,'subscription2@example.com','Standard');\n",
      "question": "What journalists speak English and Spanish and what editors also speak those languages? Show them in one table.",
      "gold_queries": [
        "SELECT Journalists.name\r\nFROM Journalists\r\nWHERE Journalists.languages = \"English and Spanish\"\r\nUNION\r\nSELECT Editors.name\r\nFROM Editors\r\nWHERE Editors.languages = \"English and Spanish\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Query to show journalists who occasionally write in English and Spanish, and editors who are willing to review articles in those languages.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT name FROM Journalists WHERE languages = 'English and Spanish'\nUNION\nSELECT name FROM Editors WHERE languages = 'English and Spanish'"
          ]
        },
        {
          "interpretation": "List the language capabilities and names of journalists and editors in the organization, with a focus on those who can assist with English and Spanish speaking clientele.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, languages FROM Journalists WHERE languages LIKE '%English and Spanish%' UNION SELECT name, languages FROM Editors WHERE languages LIKE '%English and Spanish%'"
          ]
        },
        {
          "interpretation": "Display a table with information on journalists who regularly write articles in English and Spanish, and editors who have editing experience in the same languages.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT J.id, J.name, J.email, J.phoneNumber, J.languages \nFROM Journalists J \nWHERE J.languages = 'English and Spanish'\nUNION\nSELECT E.id, E.name, E.email, E.phoneNumber, E.languages \nFROM Editors E \nWHERE E.languages = 'English and Spanish'"
          ]
        },
        {
          "interpretation": "Show a table with journalists who are native in English and Spanish, and editors who speak English and Spanish as additional languages.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT 'Journalist' AS Role, name FROM Journalists WHERE languages = 'English and Spanish'\nUNION\nSELECT 'Editor' AS Role, name FROM Editors WHERE languages = 'English and Spanish'"
          ]
        },
        {
          "interpretation": "List the journalist and editor names along with the languages they speak, with a distinction between those who speak English and Spanish and those who do not.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, email, phoneNumber, CASE WHEN languages = 'English and Spanish' THEN languages ELSE 'Other' END AS languages\nFROM Journalists\nUNION\nSELECT name, email, phoneNumber, CASE WHEN languages = 'English and Spanish' THEN languages ELSE 'Other' END AS languages\nFROM Editors"
          ]
        },
        {
          "interpretation": "Retrieve the names and languages spoken by journalists and editors who both use and author articles supporting English and Spanish.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, languages FROM Journalists WHERE id IN (SELECT journalistId FROM ArticleAuthors WHERE articleId IN (SELECT id FROM Articles WHERE editorId IN (SELECT id FROM Editors WHERE languages LIKE '%English and Spanish%'))) AND languages LIKE '%English and Spanish%'",
            "SELECT name, languages FROM Editors WHERE id IN (SELECT editorId FROM Articles WHERE id IN (SELECT articleId FROM ArticleAuthors WHERE journalistId IN (SELECT id FROM Journalists WHERE languages LIKE '%English and Spanish%'))) AND languages LIKE '%English and Spanish%'"
          ]
        },
        {
          "interpretation": "Retrieve the names and languages spoken by journalists and editors who both use and author articles supporting English and Spanish.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, languages FROM Journalists WHERE id IN (SELECT journalistId FROM ArticleAuthors WHERE articleId IN (SELECT id FROM Articles WHERE editorId IN (SELECT id FROM Editors WHERE languages LIKE '%English and Spanish%'))) AND languages LIKE '%English and Spanish%'",
            "SELECT name, languages FROM Editors WHERE id IN (SELECT editorId FROM Articles WHERE id IN (SELECT articleId FROM ArticleAuthors WHERE journalistId IN (SELECT id FROM Journalists WHERE languages LIKE '%English and Spanish%'))) AND languages LIKE '%English and Spanish%'"
          ]
        },
        {
          "interpretation": "Retrieve journal and editor data on individuals who can write, translate, or edit articles in English and Spanish.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT J.name AS journalistName, J.email AS journalistEmail, E.name AS editorName, E.email AS editorEmail\nFROM Journalists J\nLEFT JOIN Editors E ON J.id = E.id\nWHERE J.languages LIKE '%English and Spanish%' OR E.languages LIKE '%English and Spanish%'"
          ]
        },
        {
          "interpretation": "Provide a table with data on journalists and editors who speak English and Spanish, and any other languages they might know.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, email, phoneNumber, languages \nFROM Journalists \nWHERE languages LIKE '%English and Spanish%' \nUNION \nSELECT name, email, phoneNumber, languages \nFROM Editors \nWHERE languages LIKE '%English and Spanish%'"
          ]
        }
      ],
      "num_unique_execution_results": 9,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.1111111111111111,
        "one_found": true,
        "f1_score": 0.19999999999999998,
        "num_queries": 11,
        "num_unique_queries": 9,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Banking/attachment_1tab_val_organization/attachment_1tab_val_organization.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountNumber INTEGER PRIMARY KEY,\n    CustomerID INTEGER,\n    Balance REAL DEFAULT 0,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Currencies(\n    CurrencyID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Symbol TEXT\n);\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY,\n    Organization TEXT,\n    Year_of_establishment INT\n, FullName TEXT);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY,\n    AccountNumber INTEGER,\n    Amount REAL,\n    CurrencyID INTEGER,\n    Date DATETIME,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber),\n    FOREIGN KEY (CurrencyID) REFERENCES Currencies(CurrencyID)\n);\n\nINSERT INTO \"Currencies\" (CurrencyID,Name,Symbol) VALUES (1,'USD','$'),(2,'EUR','\u20ac'),(3,'GBP','\u00a3'),(4,'AUD','$');\nINSERT INTO \"Customers\" (CustomerID,Organization,Year_of_establishment,FullName) VALUES (1,'Currency Exchange Service',2000,'John Doe'),(2,'Currency Exchange Service',1998,'Jane Smith'),(3,'Commodity Trading Firm',2000,'Michael Brown'),(4,'Commodity Trading Firm',1996,'Emma White');\n",
      "question": "Show all customers of either the currency exchange services founded in 2000 or the commodity trading firms that were founded at the same time. Show them in one table.",
      "gold_queries": [
        "SELECT Customers.FullName\r\nFROM Customers\r\nWHERE (Customers.Organization = \"Currency Exchange Service\" OR Customers.Organization = \"Commodity Trading Firm\") AND Customers.Year_of_establishment = 2000"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Display members of currency exchange services established in the year John Doe was founded and members of commodity trading firms established in the same year, namely 2000.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT FullName FROM Customers WHERE Year_of_establishment = 2000 AND (Organization = 'Currency Exchange Service' OR Organization = 'Commodity Trading Firm')"
          ]
        },
        {
          "interpretation": "Identify all customers with a matching organization and year of establishment of 2000 but instead of currency exchange service, commodity trading firm.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName FROM Customers WHERE Organization = 'Commodity Trading Firm' AND Year_of_establishment = 2000"
          ]
        },
        {
          "interpretation": "Select customers that have a matching organization to either currency exchange service John Doe or commodity trading firm Michael Brown, where these two have a year of establishment of 2000.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Organization, FullName\nFROM Customers\nWHERE (Organization = 'Currency Exchange Service' AND Year_of_establishment = 2000 AND FullName = 'John Doe')\n   OR (Organization = 'Commodity Trading Firm' AND Year_of_establishment = 2000 AND FullName = 'Michael Brown')"
          ]
        },
        {
          "interpretation": "Show all customers where either of the customer's organization was a currency exchange service that was founded in 2000 or a commodity trading firm that was established in the year they were founded.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName \nFROM Customers \nWHERE (Organization = 'Currency Exchange Service' AND Year_of_establishment = 2000)\n   OR (Organization = 'Commodity Trading Firm' AND CustomerID = Year_of_establishment)"
          ]
        },
        {
          "interpretation": "Join the customers table with a subquery that selects currency exchange services and commodity trading firms founded in 2000, then show all customers that belong to either one of those organizations.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.*\nFROM Customers C\nJOIN (\n    SELECT CustomerID\n    FROM Customers\n    WHERE (Organization = 'Currency Exchange Service' OR Organization = 'Commodity Trading Firm')\n      AND Year_of_establishment = 2000\n) AS SubQuery ON C.CustomerID = SubQuery.CustomerID"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "one_found": true,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Banking/attachment_1tab_val_organization/attachment_1tab_val_organization.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountNumber INTEGER PRIMARY KEY,\n    CustomerID INTEGER,\n    Balance REAL DEFAULT 0,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Currencies(\n    CurrencyID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Symbol TEXT\n);\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY,\n    Organization TEXT,\n    Year_of_establishment INT\n, FullName TEXT);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY,\n    AccountNumber INTEGER,\n    Amount REAL,\n    CurrencyID INTEGER,\n    Date DATETIME,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber),\n    FOREIGN KEY (CurrencyID) REFERENCES Currencies(CurrencyID)\n);\n\nINSERT INTO \"Currencies\" (CurrencyID,Name,Symbol) VALUES (1,'USD','$'),(2,'EUR','\u20ac'),(3,'GBP','\u00a3'),(4,'AUD','$');\nINSERT INTO \"Customers\" (CustomerID,Organization,Year_of_establishment,FullName) VALUES (1,'Currency Exchange Service',2000,'John Doe'),(2,'Currency Exchange Service',1998,'Jane Smith'),(3,'Commodity Trading Firm',2000,'Michael Brown'),(4,'Commodity Trading Firm',1996,'Emma White');\n",
      "question": "Show the commodity trading firm customers from firms formed in 2000 and also show all the currency exchange service customers. Show them in one table.",
      "gold_queries": [
        "SELECT Customers.FullName\r\nFROM Customers\r\nWHERE Customers.Organization = \"Currency Exchange Service\" OR Customers.Organization = \"Commodity Trading Firm\" AND Customers.Year_of_establishment = 2000"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Select distinct Customers from Customers where Organization in ('Commodity Trading Firm','Currency Exchange Service') and Year_of_establishment is 2000 if it is 'Commodity Trading Firm' and customer is in 'Currency Exchange Service' group if it is else.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName \nFROM Customers \nWHERE Organization = 'Commodity Trading Firm' AND Year_of_establishment = 2000",
            "SELECT FullName \nFROM Customers \nWHERE Organization = 'Currency Exchange Service'"
          ]
        },
        {
          "interpretation": "Select distinct Customers from Customers where (Year_of_establishment is 2000 and Organization is 'Commodity Trading Firm') or Organization is 'Currency Exchange Service'",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT DISTINCT FullName FROM Customers WHERE (Year_of_establishment = 2000 AND Organization = 'Commodity Trading Firm') OR Organization = 'Currency Exchange Service'"
          ]
        },
        {
          "interpretation": "Select from one table from Customers where customer has attribute similar to the list - ('Commodity Trading Firm'), 'Currency Exchange Service'",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Customers WHERE Organization IN ('Commodity Trading Firm', 'Currency Exchange Service')"
          ]
        },
        {
          "interpretation": "Select distinct Customers from Customers where Organization in ('Commodity Trading Firm','Currency Exchange Service') and Year_of_establishment is 2000 if it is 'Commodity Trading Firm' and customer is in 'Currency Exchange Service' group if it is else.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName \nFROM Customers \nWHERE Organization = 'Commodity Trading Firm' AND Year_of_establishment = 2000",
            "SELECT FullName \nFROM Customers \nWHERE Organization = 'Currency Exchange Service'"
          ]
        },
        {
          "interpretation": "actual interpretation may full or partially matched as a CUTch of question equivalence",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 8,
            "num_unique_queries": 8,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AccountNumber, SUM(Amount) AS Total_Amount FROM Transactions WHERE CurrencyID = 2 GROUP BY AccountNumber",
            "SELECT FullName FROM Customers WHERE Organization = 'Currency Exchange Service'",
            "SELECT FullName, Organization FROM Customers WHERE Year_of_establishment = 2000",
            "SELECT Customers.FullName, Accounts.Balance FROM Customers JOIN Accounts ON Customers.CustomerID = Accounts.CustomerID WHERE Customers.Year_of_establishment < 2000",
            "SELECT MAX(Balance) FROM Accounts",
            "SELECT CustomerID, Balance FROM Accounts WHERE Balance > 1000",
            "SELECT Amount, Date FROM Transactions WHERE CurrencyID = 1",
            "SELECT CurrencyID, COUNT(*) FROM Transactions GROUP BY CurrencyID"
          ]
        },
        {
          "interpretation": "actual interpretation may full or partially matched as a CUTch of question equivalence",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 8,
            "num_unique_queries": 8,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AccountNumber, SUM(Amount) AS Total_Amount FROM Transactions WHERE CurrencyID = 2 GROUP BY AccountNumber",
            "SELECT FullName FROM Customers WHERE Organization = 'Currency Exchange Service'",
            "SELECT FullName, Organization FROM Customers WHERE Year_of_establishment = 2000",
            "SELECT Customers.FullName, Accounts.Balance FROM Customers JOIN Accounts ON Customers.CustomerID = Accounts.CustomerID WHERE Customers.Year_of_establishment < 2000",
            "SELECT MAX(Balance) FROM Accounts",
            "SELECT CustomerID, Balance FROM Accounts WHERE Balance > 1000",
            "SELECT Amount, Date FROM Transactions WHERE CurrencyID = 1",
            "SELECT CurrencyID, COUNT(*) FROM Transactions GROUP BY CurrencyID"
          ]
        },
        {
          "interpretation": "actual interpretation may full or partially matched as a CUTch of question equivalence",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 8,
            "num_unique_queries": 8,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AccountNumber, SUM(Amount) AS Total_Amount FROM Transactions WHERE CurrencyID = 2 GROUP BY AccountNumber",
            "SELECT FullName FROM Customers WHERE Organization = 'Currency Exchange Service'",
            "SELECT FullName, Organization FROM Customers WHERE Year_of_establishment = 2000",
            "SELECT Customers.FullName, Accounts.Balance FROM Customers JOIN Accounts ON Customers.CustomerID = Accounts.CustomerID WHERE Customers.Year_of_establishment < 2000",
            "SELECT MAX(Balance) FROM Accounts",
            "SELECT CustomerID, Balance FROM Accounts WHERE Balance > 1000",
            "SELECT Amount, Date FROM Transactions WHERE CurrencyID = 1",
            "SELECT CurrencyID, COUNT(*) FROM Transactions GROUP BY CurrencyID"
          ]
        }
      ],
      "num_unique_execution_results": 7,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.08333333333333333,
        "one_found": true,
        "f1_score": 0.15384615384615385,
        "num_queries": 30,
        "num_unique_queries": 12,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Banking/attachment_1tab_val_organization/attachment_1tab_val_organization.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountNumber INTEGER PRIMARY KEY,\n    CustomerID INTEGER,\n    Balance REAL DEFAULT 0,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Currencies(\n    CurrencyID INTEGER PRIMARY KEY,\n    Name TEXT,\n    Symbol TEXT\n);\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY,\n    Organization TEXT,\n    Year_of_establishment INT\n, FullName TEXT);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY,\n    AccountNumber INTEGER,\n    Amount REAL,\n    CurrencyID INTEGER,\n    Date DATETIME,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber),\n    FOREIGN KEY (CurrencyID) REFERENCES Currencies(CurrencyID)\n);\n\nINSERT INTO \"Currencies\" (CurrencyID,Name,Symbol) VALUES (1,'USD','$'),(2,'EUR','\u20ac'),(3,'GBP','\u00a3'),(4,'AUD','$');\nINSERT INTO \"Customers\" (CustomerID,Organization,Year_of_establishment,FullName) VALUES (1,'Currency Exchange Service',2000,'John Doe'),(2,'Currency Exchange Service',1998,'Jane Smith'),(3,'Commodity Trading Firm',2000,'Michael Brown'),(4,'Commodity Trading Firm',1996,'Emma White');\n",
      "question": "Show all currency exchange service customers and commodity trading firm customers where the organisation was formed in 2000. Show them in one table.",
      "gold_queries": [
        "SELECT Customers.FullName\r\nFROM Customers\r\nWHERE (Customers.Organization = \"Currency Exchange Service\" OR Customers.Organization = \"Commodity Trading Firm\") AND Customers.Year_of_establishment = 2000",
        "SELECT Customers.FullName\r\nFROM Customers\r\nWHERE Customers.Organization = \"Currency Exchange Service\" OR Customers.Organization = \"Commodity Trading Firm\" AND Customers.Year_of_establishment = 2000"
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Display customers who work for an organization whose name starts with 'Currency Exchange Service' and those who work for an organization whose name starts with 'Commodity Trading Firm', given the organization was formed in 2000.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName \nFROM Customers \nWHERE (Organization LIKE 'Currency Exchange Service%' OR Organization LIKE 'Commodity Trading Firm%') \nAND Year_of_establishment = 2000"
          ]
        },
        {
          "interpretation": "Show customers with organization names like Currency Exchange Service 2000 established.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName FROM Customers WHERE Organization = 'Currency Exchange Service' AND Year_of_establishment = 2000"
          ]
        },
        {
          "interpretation": "Show customers from organizations established in 2000 that have names similar to those mentioned ie, Commodity trading firm or Currency exchange.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName, Organization\nFROM Customers\nWHERE Year_of_establishment = 2000\nAND (Organization LIKE 'Currency Exchange%' OR Organization LIKE 'Commodity Trading%')"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.3333333333333333,
        "one_found": true,
        "f1_score": 0.4,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Banking/attachment_2tab_ref_revenue_streams/attachment_2tab_ref_revenue_streams.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Product TEXT,\n    Balance REAL ,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE\n);\nCREATE TABLE Fees(\n    FeeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountID INTEGER,\n    CardFee REAL ,\n    FOREIGN KEY (AccountID) REFERENCES Accounts(AccountID)\n);\nCREATE TABLE InterestRates(\n    RateID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountID INTEGER,\n    MonthlyInterestRate REAL ,\n    FOREIGN KEY (AccountID) REFERENCES Accounts(AccountID)\n);\nCREATE TABLE Products(\n    ProductID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Description TEXT,\n    MonthlyInterestRate REAL ,\n    CardFee REAL \n);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountID INTEGER,\n    Amount REAL ,\n    Type TEXT, -- e.g., 'Deposit', 'Withdrawal'\n    TransactionDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (AccountID) REFERENCES Accounts(AccountID)\n);\n\nINSERT INTO \"Accounts\" (AccountID,CustomerID,Product,Balance) VALUES (1,1,'Checking',1000.0),(2,2,'Savings',500.0),(3,3,'Money Market',2500.0),(4,4,'Premium Checking',5000.0),(5,5,'Certificates of Deposit',10000.0);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,DateOfBirth) VALUES (1,'John','Doe','2000-01-01'),(2,'Jane','Smith','1985-06-30'),(3,'Michael','Johnson','1992-07-15'),(4,'Emma','Williams','1997-08-20'),(5,'David','Martin','1990-09-25');\nINSERT INTO \"Fees\" (FeeID,AccountID,CardFee) VALUES (1,1,5.0),(2,2,3.0),(3,3,10.0),(4,4,20.0),(5,5,15.0);\nINSERT INTO \"InterestRates\" (RateID,AccountID,MonthlyInterestRate) VALUES (1,1,0.01),(2,2,0.02),(3,3,0.03),(4,4,0.04),(5,5,0.05);\nINSERT INTO \"Products\" (ProductID,Name,Description,MonthlyInterestRate,CardFee) VALUES (1,'Premium Credit Card','A high interest credit card.',0.02,5.0),(2,'Regular Credit Card','A standard credit card.',0.01,3.0),(3,'Business Loan','For business use only.',0.03,10.0),(4,'Personal Loan','Low interest personal loan.',0.04,20.0),(5,'Student Loan','For students only.',0.05,15.0);\nINSERT INTO \"Transactions\" (TransactionID,AccountID,Amount,Type,TransactionDate) VALUES (1,1,500.0,'Deposit','2024-03-13 20:52:19'),(2,2,-100.0,'Withdrawal','2024-03-13 20:52:19'),(3,3,200.0,'Deposit','2024-03-13 20:52:19'),(4,4,-300.0,'Withdrawal','2024-03-13 20:52:19'),(5,5,2500.0,'Deposit','2024-03-13 20:52:19');\n",
      "question": "What is the fee of accounts where the product is called checking and what is the interest rate of the accounts with the same product name. Show them in one table.",
      "gold_queries": [
        "SELECT Fees.cardfee AS AMOUNT\r\nFROM Accounts JOIN Fees ON Accounts.AccountID = Fees.AccountID\r\nWHERE Accounts.Product = \"Checking\"\r\nUNION\r\nSELECT InterestRates.monthlyinterestrate\r\nFROM Accounts JOIN InterestRates ON Accounts.AccountID = InterestRates.AccountID\r\nWHERE Accounts.Product = \"Checking\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "What are the fees and interest rates for accounts with the product name 'Checking'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT F.CardFee, IR.MonthlyInterestRate\nFROM Fees F\nJOIN Accounts A ON F.AccountID = A.AccountID\nJOIN InterestRates IR ON A.AccountID = IR.AccountID\nJOIN Products P ON A.Product = P.Name\nWHERE P.Name = 'Checking'"
          ]
        },
        {
          "interpretation": "What is the fee of accounts where the product is called checking and what is the interest rate of the accounts with the same product name. Show them in one table.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Fees.CardFee, InterestRates.MonthlyInterestRate\nFROM Fees\nJOIN InterestRates ON Fees.AccountID = InterestRates.AccountID\nJOIN Accounts ON Fees.AccountID = Accounts.AccountID\nWHERE Accounts.Product = 'Checking'"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "one_found": true,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Banking/attachment_2tab_ref_revenue_streams/attachment_2tab_ref_revenue_streams.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Product TEXT,\n    Balance REAL ,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE\n);\nCREATE TABLE Fees(\n    FeeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountID INTEGER,\n    CardFee REAL ,\n    FOREIGN KEY (AccountID) REFERENCES Accounts(AccountID)\n);\nCREATE TABLE InterestRates(\n    RateID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountID INTEGER,\n    MonthlyInterestRate REAL ,\n    FOREIGN KEY (AccountID) REFERENCES Accounts(AccountID)\n);\nCREATE TABLE Products(\n    ProductID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Description TEXT,\n    MonthlyInterestRate REAL ,\n    CardFee REAL \n);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountID INTEGER,\n    Amount REAL ,\n    Type TEXT, -- e.g., 'Deposit', 'Withdrawal'\n    TransactionDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (AccountID) REFERENCES Accounts(AccountID)\n);\n\nINSERT INTO \"Accounts\" (AccountID,CustomerID,Product,Balance) VALUES (1,1,'Checking',1000.0),(2,2,'Savings',500.0),(3,3,'Money Market',2500.0),(4,4,'Premium Checking',5000.0),(5,5,'Certificates of Deposit',10000.0);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,DateOfBirth) VALUES (1,'John','Doe','2000-01-01'),(2,'Jane','Smith','1985-06-30'),(3,'Michael','Johnson','1992-07-15'),(4,'Emma','Williams','1997-08-20'),(5,'David','Martin','1990-09-25');\nINSERT INTO \"Fees\" (FeeID,AccountID,CardFee) VALUES (1,1,5.0),(2,2,3.0),(3,3,10.0),(4,4,20.0),(5,5,15.0);\nINSERT INTO \"InterestRates\" (RateID,AccountID,MonthlyInterestRate) VALUES (1,1,0.01),(2,2,0.02),(3,3,0.03),(4,4,0.04),(5,5,0.05);\nINSERT INTO \"Products\" (ProductID,Name,Description,MonthlyInterestRate,CardFee) VALUES (1,'Premium Credit Card','A high interest credit card.',0.02,5.0),(2,'Regular Credit Card','A standard credit card.',0.01,3.0),(3,'Business Loan','For business use only.',0.03,10.0),(4,'Personal Loan','Low interest personal loan.',0.04,20.0),(5,'Student Loan','For students only.',0.05,15.0);\nINSERT INTO \"Transactions\" (TransactionID,AccountID,Amount,Type,TransactionDate) VALUES (1,1,500.0,'Deposit','2024-03-13 20:52:19'),(2,2,-100.0,'Withdrawal','2024-03-13 20:52:19'),(3,3,200.0,'Deposit','2024-03-13 20:52:19'),(4,4,-300.0,'Withdrawal','2024-03-13 20:52:19'),(5,5,2500.0,'Deposit','2024-03-13 20:52:19');\n",
      "question": "Give me all fees and interest rates for the account's product called checking. Show them in one table.",
      "gold_queries": [
        "SELECT Fees.cardfee AS AMOUNT\r\nFROM Accounts JOIN Fees ON Accounts.AccountID = Fees.AccountID\r\nWHERE Accounts.Product = \"Checking\"\r\nUNION\r\nSELECT InterestRates.monthlyinterestrate\r\nFROM Accounts JOIN InterestRates ON Accounts.AccountID = InterestRates.AccountID\r\nWHERE Accounts.Product = \"Checking\"",
        "SELECT Fees.cardfee AS AMOUNT\r\nFROM Accounts JOIN Fees ON Accounts.AccountID = Fees.AccountID\r\nUNION\r\nSELECT InterestRates.monthlyinterestrate AS AMOUNT\r\nFROM Accounts JOIN InterestRates ON Accounts.AccountID = InterestRates.AccountID\r\nWHERE Accounts.Product = \"Checking\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Get the product details of 'Checking' from the products table, along with the account information and matching records from both the fees and interestrates tables.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.Name, P.Description, P.MonthlyInterestRate, P.CardFee, A.AccountID, A.CustomerID, A.Balance, F.CardFee, IR.MonthlyInterestRate\nFROM Products P\nJOIN Accounts A ON P.Name = A.Product\nJOIN Fees F ON A.AccountID = F.AccountID\nJOIN InterestRates IR ON A.AccountID = IR.AccountID\nWHERE P.Name = 'Checking'"
          ]
        },
        {
          "interpretation": "Show the total fees associated with every account whose product matches 'Checking'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT SUM(CardFee) FROM Fees WHERE AccountID IN (SELECT AccountID FROM Accounts WHERE Product = 'Checking')"
          ]
        },
        {
          "interpretation": "Return all accounts that have a product called 'Checking' and include all fees associated with these accounts.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.AccountID, A.CustomerID, A.Product, A.Balance, F.FeeID, F.CardFee\nFROM Accounts A\nJOIN Fees F ON A.AccountID = F.AccountID\nWHERE A.Product = 'Checking'"
          ]
        },
        {
          "interpretation": "Retrieve all active accounts linked to 'Checking' product that have active fees and interest links in their respective tables.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT a.AccountID, a.CustomerID, a.Product, a.Balance\nFROM Accounts a\nJOIN Fees f ON a.AccountID = f.AccountID\nJOIN InterestRates i ON a.AccountID = i.AccountID\nWHERE a.Product = 'Checking'"
          ]
        },
        {
          "interpretation": "Return all accounts and show their associated fees and interest rates if they have a product called 'Checking', along with a column to indicate which accounts meet this condition.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Accounts.AccountID, Accounts.Product, Fees.CardFee, InterestRates.MonthlyInterestRate, CASE WHEN Accounts.Product = 'Checking' THEN 'Yes' ELSE 'No' END AS IsChecking\nFROM Accounts\nLEFT JOIN Fees ON Accounts.AccountID = Fees.AccountID\nLEFT JOIN InterestRates ON Accounts.AccountID = InterestRates.AccountID\nWHERE Accounts.Product = 'Checking'"
          ]
        },
        {
          "interpretation": "Show all accounts with a product 'Checking', as well as their corresponding matching records from both the fees and interestrates tables (with appropriate joins).",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    Accounts.AccountID, \n    Accounts.CustomerID, \n    Accounts.Product, \n    Accounts.Balance, \n    Fees.FeeID, \n    Fees.CardFee, \n    InterestRates.RateID, \n    InterestRates.MonthlyInterestRate \nFROM \n    Accounts \nJOIN \n    Fees ON Accounts.AccountID = Fees.AccountID \nJOIN \n    InterestRates ON Accounts.AccountID = InterestRates.AccountID \nWHERE \n    Accounts.Product = 'Checking'"
          ]
        },
        {
          "interpretation": "Return a result containing the information of accounts related to 'Checking' including fees and interest rates but truncate the instance if the customer already has a relationship with another product.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT a.AccountID, a.CustomerID, a.Product, a.Balance, f.CardFee, i.MonthlyInterestRate\nFROM Accounts a\nLEFT JOIN Fees f ON a.AccountID = f.AccountID\nLEFT JOIN InterestRates i ON a.AccountID = i.AccountID\nWHERE a.Product = 'Checking'\nAND NOT EXISTS (\n    SELECT 1\n    FROM Accounts a2\n    WHERE a2.CustomerID = a.CustomerID\n    AND a2.Product <> 'Checking'\n)"
          ]
        },
        {
          "interpretation": "Calculate the total fees and interest for each checking account and return them in a separate result.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT SUM(CardFee) AS TotalFees\nFROM Fees\nWHERE AccountID IN (SELECT AccountID FROM Accounts WHERE Product = 'Checking')",
            "SELECT SUM(MonthlyInterestRate) AS TotalInterest\nFROM InterestRates\nWHERE AccountID IN (SELECT AccountID FROM Accounts WHERE Product = 'Checking')"
          ]
        },
        {
          "interpretation": "Give me all accounts and their respective fees and interest rates if their product name is 'Checking', otherwise return all other accounts as well.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    Accounts.AccountID, \n    Customers.FirstName, \n    Customers.LastName, \n    Accounts.Product, \n    Accounts.Balance, \n    Fees.CardFee, \n    InterestRates.MonthlyInterestRate \nFROM \n    Accounts \nJOIN \n    Customers ON Accounts.CustomerID = Customers.CustomerID \nLEFT JOIN \n    Fees ON Accounts.AccountID = Fees.AccountID \nLEFT JOIN \n    InterestRates ON Accounts.AccountID = InterestRates.AccountID \nWHERE \n    Accounts.Product = 'Checking' \nUNION \nSELECT \n    Accounts.AccountID, \n    Customers.FirstName, \n    Customers.LastName, \n    Accounts.Product, \n    Accounts.Balance, \n    Fees.CardFee, \n    InterestRates.MonthlyInterestRate \nFROM \n    Accounts \nJOIN \n    Customers ON Accounts.CustomerID = Customers.CustomerID \nLEFT JOIN \n    Fees ON Accounts.AccountID = Fees.AccountID \nLEFT JOIN \n    InterestRates ON Accounts.AccountID = InterestRates.AccountID \nWHERE \n    Accounts.Product <> 'Checking'"
          ]
        },
        {
          "interpretation": "Display the interest rates for all accounts with a product called 'Checking' in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Accounts.AccountID, InterestRates.MonthlyInterestRate\nFROM Accounts\nJOIN InterestRates ON Accounts.AccountID = InterestRates.AccountID\nWHERE Accounts.Product = 'Checking'"
          ]
        }
      ],
      "num_unique_execution_results": 10,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 11,
        "num_unique_queries": 11,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Banking/attachment_2tab_ref_revenue_streams/attachment_2tab_ref_revenue_streams.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Product TEXT,\n    Balance REAL ,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE\n);\nCREATE TABLE Fees(\n    FeeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountID INTEGER,\n    CardFee REAL ,\n    FOREIGN KEY (AccountID) REFERENCES Accounts(AccountID)\n);\nCREATE TABLE InterestRates(\n    RateID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountID INTEGER,\n    MonthlyInterestRate REAL ,\n    FOREIGN KEY (AccountID) REFERENCES Accounts(AccountID)\n);\nCREATE TABLE Products(\n    ProductID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Description TEXT,\n    MonthlyInterestRate REAL ,\n    CardFee REAL \n);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountID INTEGER,\n    Amount REAL ,\n    Type TEXT, -- e.g., 'Deposit', 'Withdrawal'\n    TransactionDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (AccountID) REFERENCES Accounts(AccountID)\n);\n\nINSERT INTO \"Accounts\" (AccountID,CustomerID,Product,Balance) VALUES (1,1,'Checking',1000.0),(2,2,'Savings',500.0),(3,3,'Money Market',2500.0),(4,4,'Premium Checking',5000.0),(5,5,'Certificates of Deposit',10000.0);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,DateOfBirth) VALUES (1,'John','Doe','2000-01-01'),(2,'Jane','Smith','1985-06-30'),(3,'Michael','Johnson','1992-07-15'),(4,'Emma','Williams','1997-08-20'),(5,'David','Martin','1990-09-25');\nINSERT INTO \"Fees\" (FeeID,AccountID,CardFee) VALUES (1,1,5.0),(2,2,3.0),(3,3,10.0),(4,4,20.0),(5,5,15.0);\nINSERT INTO \"InterestRates\" (RateID,AccountID,MonthlyInterestRate) VALUES (1,1,0.01),(2,2,0.02),(3,3,0.03),(4,4,0.04),(5,5,0.05);\nINSERT INTO \"Products\" (ProductID,Name,Description,MonthlyInterestRate,CardFee) VALUES (1,'Premium Credit Card','A high interest credit card.',0.02,5.0),(2,'Regular Credit Card','A standard credit card.',0.01,3.0),(3,'Business Loan','For business use only.',0.03,10.0),(4,'Personal Loan','Low interest personal loan.',0.04,20.0),(5,'Student Loan','For students only.',0.05,15.0);\nINSERT INTO \"Transactions\" (TransactionID,AccountID,Amount,Type,TransactionDate) VALUES (1,1,500.0,'Deposit','2024-03-13 20:52:19'),(2,2,-100.0,'Withdrawal','2024-03-13 20:52:19'),(3,3,200.0,'Deposit','2024-03-13 20:52:19'),(4,4,-300.0,'Withdrawal','2024-03-13 20:52:19'),(5,5,2500.0,'Deposit','2024-03-13 20:52:19');\n",
      "question": "Provide a list of all account fees and also provide a list of all account interest rates where the product is called checking. Show them in one table.",
      "gold_queries": [
        "SELECT Fees.cardfee AS AMOUNT\r\nFROM Accounts JOIN Fees ON Accounts.AccountID = Fees.AccountID\r\nUNION\r\nSELECT InterestRates.monthlyinterestrate AS AMOUNT\r\nFROM Accounts JOIN InterestRates ON Accounts.AccountID = InterestRates.AccountID\r\nWHERE Accounts.Product = \"Checking\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Provide a list of all account fees for accounts where the product is 'Checking' and also provide a list of all account interest rates.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT MonthlyInterestRate FROM InterestRates",
            "SELECT CardFee FROM Fees WHERE AccountID IN (SELECT AccountID FROM Accounts WHERE Product = 'Checking')"
          ]
        },
        {
          "interpretation": "List all account fees, including those related to accounts with a product type of 'Checking', and include a separate list of all account interest rates related to accounts with the specified product.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT MonthlyInterestRate FROM InterestRates WHERE AccountID IN (SELECT AccountID FROM Accounts WHERE Product = 'Checking')",
            "SELECT CardFee FROM Fees WHERE AccountID IN (SELECT AccountID FROM Accounts WHERE Product = 'Checking')"
          ]
        },
        {
          "interpretation": "Provide a list of all account fees and also provide a list of all account interest rates for accounts with a product type of 'Checking'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT CardFee FROM Fees",
            "SELECT MonthlyInterestRate FROM InterestRates WHERE AccountID IN (SELECT AccountID FROM Accounts WHERE Product = 'Checking')"
          ]
        },
        {
          "interpretation": "List all account fees, including those related to accounts with a product type of 'Checking', and include a separate list of all account interest rates related to accounts with the specified product.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT MonthlyInterestRate FROM InterestRates WHERE AccountID IN (SELECT AccountID FROM Accounts WHERE Product = 'Checking')",
            "SELECT CardFee FROM Fees WHERE AccountID IN (SELECT AccountID FROM Accounts WHERE Product = 'Checking')"
          ]
        },
        {
          "interpretation": "Show a single table consisting of all account fees and all account interest rates for the specified product type.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Fees.CardFee, InterestRates.MonthlyInterestRate\nFROM Fees\nJOIN Accounts ON Fees.AccountID = Accounts.AccountID\nJOIN InterestRates ON Accounts.AccountID = InterestRates.AccountID\nWHERE Accounts.Product = 'Premium Checking'"
          ]
        },
        {
          "interpretation": "Provide a list of account fees that pertain to 'Checking' product and a separate list of interest rates for accounts of that product type.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FeeID, AccountID, CardFee\nFROM Fees\nWHERE AccountID IN (SELECT AccountID FROM Accounts WHERE Product = 'Checking')",
            "SELECT RateID, AccountID, MonthlyInterestRate\nFROM InterestRates\nWHERE AccountID IN (SELECT AccountID FROM Accounts WHERE Product = 'Checking')"
          ]
        },
        {
          "interpretation": "Provide a list of account fees that pertain to 'Checking' product and a separate list of interest rates for accounts of that product type.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FeeID, AccountID, CardFee\nFROM Fees\nWHERE AccountID IN (SELECT AccountID FROM Accounts WHERE Product = 'Checking')",
            "SELECT RateID, AccountID, MonthlyInterestRate\nFROM InterestRates\nWHERE AccountID IN (SELECT AccountID FROM Accounts WHERE Product = 'Checking')"
          ]
        },
        {
          "interpretation": "Provide account fees and interest rates in one table for the 'Checking' product.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Fees.CardFee, InterestRates.MonthlyInterestRate \nFROM Fees \nJOIN InterestRates ON Fees.AccountID = InterestRates.AccountID \nJOIN Accounts ON Fees.AccountID = Accounts.AccountID \nWHERE Accounts.Product = 'Checking'"
          ]
        }
      ],
      "num_unique_execution_results": 8,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 14,
        "num_unique_queries": 8,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Banking/attachment_1tab_val_loan_types/attachment_1tab_val_loan_types.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    accountID INTEGER PRIMARY KEY AUTOINCREMENT,\n    customerID INTEGER,\n    balance REAL ,\n    FOREIGN KEY(customerID) REFERENCES Customers(customerID));\nCREATE TABLE Customers(\n    customerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    dateOfBirth DATE,\n    address TEXT);\nCREATE TABLE Mortgages(\n    mortgageID INTEGER PRIMARY KEY AUTOINCREMENT,\n    accountID INTEGER,\n    loanType TEXT ,\n    principalAmount REAL ,\n    annualInterestRate DECIMAL(5,2) ,\n    repaymentPeriod TEXT,\n    FOREIGN KEY(accountID) REFERENCES Accounts(accountID));\nCREATE TABLE SavingsAccounts(\n    savingsID INTEGER PRIMARY KEY AUTOINCREMENT,\n    accountID INTEGER,\n    interestRate DECIMAL(5,2) ,\n    FOREIGN KEY(accountID) REFERENCES Accounts(accountID));\n\nINSERT INTO \"Accounts\" (accountID,customerID,balance) VALUES (1,1,1000.0),(2,2,-500.0),(3,3,2000.0),(4,4,-300.0),(5,5,500.0);\nINSERT INTO \"Customers\" (customerID,firstName,lastName,dateOfBirth,address) VALUES (1,'John','Doe','1987-06-12','New York'),(2,'Jane','Smith','1990-05-15','Los Angeles'),(3,'Tom','Nelson','1975-08-18','Chicago'),(4,'Alice','Williams','1985-09-20','Houston'),(5,'Bob','Jackson','1992-11-22','Seattle');\nINSERT INTO \"Mortgages\" (mortgageID,accountID,loanType,principalAmount,annualInterestRate,repaymentPeriod) VALUES (1,1,'Mortgage',100000.0,0.05,'30'),(2,2,'Mortgage',200000.0,0.06,'25'),(3,3,'Home Equity Loan',50000.0,0.04,'20'),(4,4,'Home Equity Loan',30000.0,0.05,'30'),(5,5,'Mortgage',150000.0,0.07,'15');\nINSERT INTO \"SavingsAccounts\" (savingsID,accountID,interestRate) VALUES (1,1,0.03),(2,2,0.04),(3,3,0.02),(4,4,0.05),(5,5,0.03);\n",
      "question": "Give me the mortgage amounts and home equity loan amounts with 30 years of repayment. Show them in one table.",
      "gold_queries": [
        "SELECT Mortgages.principalAmount \r\nFROM Mortgages\r\nWHERE (Mortgages.loanType = \"Mortgage\" OR Mortgages.loanType = \"Home Equity Loan\") AND Mortgages.repaymentPeriod = \"30\"",
        "SELECT Mortgages.principalAmount \r\nFROM Mortgages\r\nWHERE Mortgages.loanType = \"Mortgage\" OR Mortgages.loanType = \"Home Equity Loan\" AND Mortgages.repaymentPeriod = \"30\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Get the principal amounts of mortgages and home equity loans that have a repayment period of 30 years.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT principalAmount FROM Mortgages WHERE repaymentPeriod = '30' AND (loanType = 'Mortgage' OR loanType = 'Home Equity Loan')"
          ]
        },
        {
          "interpretation": "List the mortgage and home equity loan amounts for accounts with repayment periods of 30 years.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT principalAmount, loanType FROM Mortgages WHERE repaymentPeriod = '30'"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.5,
        "one_found": true,
        "f1_score": 0.5,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Banking/attachment_1tab_val_insurance_type/attachment_1tab_val_insurance_type.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Balance REAL DEFAULT 0,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE,\n    Email TEXT UNIQUE\n);\nCREATE TABLE Insurance(\n    InsuranceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    InsuranceType TEXT,\n    PaymentFrequency TEXT ,\n    PremiumAmount REAL,\n    StartDate DATE,\n    EndDate DATE,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Loans(\n    LoanID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Amount BIGINT,\n    InterestRate DECIMAL(5,2) ,\n    TermYears INTEGER ,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Payments(\n    PaymentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    PaymentDate DATE,\n    PaymentAmount REAL,\n    CheckNumber INTEGER,\n    FOREIGN KEY(AccountNumber) REFERENCES Accounts(AccountNumber)\n);\n\nINSERT INTO \"Accounts\" (AccountNumber,CustomerID,Balance) VALUES (1,1,500.0),(2,2,1000.0);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,DateOfBirth,Email) VALUES (1,'John','Doe','1980-06-17','john.doe@gmail.com'),(2,'Jane','Smith','1985-03-19','jane.smith@yahoo.com');\nINSERT INTO \"Insurance\" (InsuranceID,CustomerID,InsuranceType,PaymentFrequency,PremiumAmount,StartDate,EndDate) VALUES (1,1,'Pet Insurance','Monthly',15.0,'2021-01-01','2021-12-31'),(2,1,'Pet Insurance','Quarterly',45.0,'2021-01-01','2021-12-31'),(3,2,'Disability Insurance','Monthly',20.0,'2021-01-01','2021-12-31'),(4,2,'Disability Insurance','Annually',200.0,'2021-01-01','2022-12-31');\nINSERT INTO \"Loans\" (LoanID,CustomerID,Amount,InterestRate,TermYears) VALUES (1,1,20000,0.05,5),(2,2,15000,0.04,3);\nINSERT INTO \"Payments\" (PaymentID,AccountNumber,PaymentDate,PaymentAmount,CheckNumber) VALUES (1,1,'2021-01-15',1000.0,12345),(2,1,'2021-02-15',1500.0,67890),(3,2,'2021-01-15',500.0,123456),(4,2,'2021-02-15',500.0,67890);\n",
      "question": "Show all the premium amount, for both pet and disability insurance plans, with monthly payments. Show them in one table.",
      "gold_queries": [
        "SELECT Insurance.PremiumAmount \r\nFROM Insurance\r\nWHERE (Insurance.InsuranceType = \"Pet Insurance\" OR Insurance.InsuranceType = \"Disability Insurance\") AND Insurance.PaymentFrequency = \"Monthly\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List the premium amounts for all insurance plans that are pet insurance but have a finite duration of '2021-12-31' to '2022-12-31' and a monthly payment frequency.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT PremiumAmount FROM Insurance WHERE InsuranceType = 'Pet Insurance' AND PaymentFrequency = 'Monthly' AND EndDate BETWEEN '2021-12-31' AND '2022-12-31'"
          ]
        },
        {
          "interpretation": "Show the premium amounts for disability insurance plans where the frequency of payment is one of the following: 'Monthly', 'Quarterly' or 'Annually'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT PremiumAmount\nFROM Insurance\nWHERE InsuranceType = 'Disability Insurance'\n  AND PaymentFrequency IN ('Monthly', 'Quarterly', 'Annually')"
          ]
        },
        {
          "interpretation": "Display the premium amount for all pet insurance plans, in a single table, if paid monthly and the end date of the policy is within the same year.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT PremiumAmount, EndDate FROM Insurance WHERE InsuranceType = 'Pet Insurance' AND PaymentFrequency = 'Monthly' AND strftime('%Y', EndDate) = strftime('%Y', StartDate)"
          ]
        },
        {
          "interpretation": "Show the premium amounts for disability insurance plans with monthly payment frequency.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT PremiumAmount FROM Insurance WHERE InsuranceType = 'Disability Insurance' AND PaymentFrequency = 'Monthly'"
          ]
        },
        {
          "interpretation": "List the premium amounts for all insurance plans that are disability insurance plans but have a finite duration of '2021-12-31' to '2022-12-31' and a monthly payment frequency.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT PremiumAmount FROM Insurance WHERE InsuranceType = 'Disability Insurance' AND StartDate = '2021-12-31' AND EndDate = '2022-12-31' AND PaymentFrequency = 'Monthly'"
          ]
        },
        {
          "interpretation": "Show the premium amounts for pet insurance plans where the frequency of payment is one of the following: 'Monthly', 'Quarterly' or 'Annually'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT PremiumAmount FROM Insurance WHERE InsuranceType = 'Pet Insurance' AND PaymentFrequency IN ('Monthly', 'Quarterly', 'Annually')"
          ]
        },
        {
          "interpretation": "Display the premium amount for all disability insurance plans, in a single table, if paid monthly and the end date of the policy is within the same year.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT PremiumAmount, EndDate FROM Insurance WHERE InsuranceType = 'Disability Insurance' AND PaymentFrequency = 'Monthly' AND EndDate BETWEEN '2021-01-01' AND '2021-12-31'"
          ]
        }
      ],
      "num_unique_execution_results": 7,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 7,
        "num_unique_queries": 7,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Banking/attachment_1tab_val_insurance_type/attachment_1tab_val_insurance_type.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Balance REAL DEFAULT 0,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE,\n    Email TEXT UNIQUE\n);\nCREATE TABLE Insurance(\n    InsuranceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    InsuranceType TEXT,\n    PaymentFrequency TEXT ,\n    PremiumAmount REAL,\n    StartDate DATE,\n    EndDate DATE,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Loans(\n    LoanID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Amount BIGINT,\n    InterestRate DECIMAL(5,2) ,\n    TermYears INTEGER ,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Payments(\n    PaymentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    PaymentDate DATE,\n    PaymentAmount REAL,\n    CheckNumber INTEGER,\n    FOREIGN KEY(AccountNumber) REFERENCES Accounts(AccountNumber)\n);\n\nINSERT INTO \"Accounts\" (AccountNumber,CustomerID,Balance) VALUES (1,1,500.0),(2,2,1000.0);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,DateOfBirth,Email) VALUES (1,'John','Doe','1980-06-17','john.doe@gmail.com'),(2,'Jane','Smith','1985-03-19','jane.smith@yahoo.com');\nINSERT INTO \"Insurance\" (InsuranceID,CustomerID,InsuranceType,PaymentFrequency,PremiumAmount,StartDate,EndDate) VALUES (1,1,'Pet Insurance','Monthly',15.0,'2021-01-01','2021-12-31'),(2,1,'Pet Insurance','Quarterly',45.0,'2021-01-01','2021-12-31'),(3,2,'Disability Insurance','Monthly',20.0,'2021-01-01','2021-12-31'),(4,2,'Disability Insurance','Annually',200.0,'2021-01-01','2022-12-31');\nINSERT INTO \"Loans\" (LoanID,CustomerID,Amount,InterestRate,TermYears) VALUES (1,1,20000,0.05,5),(2,2,15000,0.04,3);\nINSERT INTO \"Payments\" (PaymentID,AccountNumber,PaymentDate,PaymentAmount,CheckNumber) VALUES (1,1,'2021-01-15',1000.0,12345),(2,1,'2021-02-15',1500.0,67890),(3,2,'2021-01-15',500.0,123456),(4,2,'2021-02-15',500.0,67890);\n",
      "question": "What is the amount of all the pet insurance and disability insurance which are charged monthly? Show them in one table.",
      "gold_queries": [
        "SELECT Insurance.PremiumAmount \r\nFROM Insurance\r\nWHERE (Insurance.InsuranceType = \"Pet Insurance\" OR Insurance.InsuranceType = \"Disability Insurance\") AND Insurance.PaymentFrequency = \"Monthly\"",
        "SELECT Insurance.PremiumAmount \r\nFROM Insurance\r\nWHERE Insurance.InsuranceType = \"Pet Insurance\" OR Insurance.InsuranceType = \"Disability Insurance\" AND Insurance.PaymentFrequency = \"Monthly\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Select I1.PremiumAmount as PetInsurance, 0 as DisabilityInsurance",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT I1.PremiumAmount AS PetInsurance, 0 AS DisabilityInsurance\nFROM Insurance I1\nWHERE I1.InsuranceType = 'Pet Insurance'"
          ]
        },
        {
          "interpretation": "Select I1.PremiumAmount as PetInsurance, I2.PremiumAmount as DisabilityInsurance",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT I1.PremiumAmount as PetInsurance, I2.PremiumAmount as DisabilityInsurance\nFROM Insurance I1\nJOIN Insurance I2 ON I1.CustomerID = I2.CustomerID\nWHERE I1.InsuranceType = 'Pet Insurance' AND I2.InsuranceType = 'Disability Insurance'"
          ]
        },
        {
          "interpretation": "Select sum(I1.PremiumAmount) as PetInsurance, sum(I1.PremiumAmount) as DisabilityInsurance",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    SUM(CASE WHEN I1.InsuranceType = 'Pet Insurance' THEN I1.PremiumAmount ELSE 0 END) AS PetInsurance,\n    SUM(CASE WHEN I1.InsuranceType = 'Disability Insurance' THEN I1.PremiumAmount ELSE 0 END) AS DisabilityInsurance\nFROM Insurance I1"
          ]
        },
        {
          "interpretation": "Select min(I1.PremiumAmount) as PetInsurance, min(I1.PremiumAmount) as DisabilityInsurance",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    MIN(CASE WHEN InsuranceType = 'Pet Insurance' THEN PremiumAmount END) AS PetInsurance,\n    MIN(CASE WHEN InsuranceType = 'Disability Insurance' THEN PremiumAmount END) AS DisabilityInsurance\nFROM \n    Insurance"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.25,
        "one_found": true,
        "f1_score": 0.3333333333333333,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Banking/attachment_1tab_val_insurance_type/attachment_1tab_val_insurance_type.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Balance REAL DEFAULT 0,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE,\n    Email TEXT UNIQUE\n);\nCREATE TABLE Insurance(\n    InsuranceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    InsuranceType TEXT,\n    PaymentFrequency TEXT ,\n    PremiumAmount REAL,\n    StartDate DATE,\n    EndDate DATE,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Loans(\n    LoanID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Amount BIGINT,\n    InterestRate DECIMAL(5,2) ,\n    TermYears INTEGER ,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID)\n);\nCREATE TABLE Payments(\n    PaymentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    PaymentDate DATE,\n    PaymentAmount REAL,\n    CheckNumber INTEGER,\n    FOREIGN KEY(AccountNumber) REFERENCES Accounts(AccountNumber)\n);\n\nINSERT INTO \"Accounts\" (AccountNumber,CustomerID,Balance) VALUES (1,1,500.0),(2,2,1000.0);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,DateOfBirth,Email) VALUES (1,'John','Doe','1980-06-17','john.doe@gmail.com'),(2,'Jane','Smith','1985-03-19','jane.smith@yahoo.com');\nINSERT INTO \"Insurance\" (InsuranceID,CustomerID,InsuranceType,PaymentFrequency,PremiumAmount,StartDate,EndDate) VALUES (1,1,'Pet Insurance','Monthly',15.0,'2021-01-01','2021-12-31'),(2,1,'Pet Insurance','Quarterly',45.0,'2021-01-01','2021-12-31'),(3,2,'Disability Insurance','Monthly',20.0,'2021-01-01','2021-12-31'),(4,2,'Disability Insurance','Annually',200.0,'2021-01-01','2022-12-31');\nINSERT INTO \"Loans\" (LoanID,CustomerID,Amount,InterestRate,TermYears) VALUES (1,1,20000,0.05,5),(2,2,15000,0.04,3);\nINSERT INTO \"Payments\" (PaymentID,AccountNumber,PaymentDate,PaymentAmount,CheckNumber) VALUES (1,1,'2021-01-15',1000.0,12345),(2,1,'2021-02-15',1500.0,67890),(3,2,'2021-01-15',500.0,123456),(4,2,'2021-02-15',500.0,67890);\n",
      "question": "Show all the pet insurance premium amounts, also show the monthly disability insurance amounts. Show them in one table.",
      "gold_queries": [
        "SELECT Insurance.PremiumAmount \r\nFROM Insurance\r\nWHERE Insurance.InsuranceType = \"Pet Insurance\" OR Insurance.InsuranceType = \"Disability Insurance\" AND Insurance.PaymentFrequency = \"Monthly\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Display the difference between total premium paid for pet insurance and the total paid for monthly disability insurance.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    (SELECT SUM(PremiumAmount) FROM Insurance WHERE InsuranceType = 'Pet Insurance') - \n    (SELECT SUM(PremiumAmount) FROM Insurance WHERE InsuranceType = 'Disability Insurance' AND PaymentFrequency = 'Monthly') AS Difference"
          ]
        },
        {
          "interpretation": "List every customer who has any type of pet insurance along with their corresponding premium amount and include the monthly disability insurance amount for those customers.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.FirstName, C.LastName, I1.PremiumAmount AS PetInsurancePremium, I2.PremiumAmount AS MonthlyDisabilityInsurancePremium\nFROM Customers C\nJOIN Insurance I1 ON C.CustomerID = I1.CustomerID AND I1.InsuranceType = 'Pet Insurance'\nLEFT JOIN Insurance I2 ON C.CustomerID = I2.CustomerID AND I2.InsuranceType = 'Disability Insurance' AND I2.PaymentFrequency = 'Monthly'"
          ]
        },
        {
          "interpretation": "Highlight pet insurance premium amounts and display monthly disability insurance amounts separately in the results.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    MAX(CASE WHEN InsuranceType = 'Pet Insurance' THEN PremiumAmount END) AS PetInsurancePremium,\n    SUM(CASE WHEN InsuranceType = 'Disability Insurance' AND PaymentFrequency = 'Monthly' THEN PremiumAmount END) AS MonthlyDisabilityInsurancePremium\nFROM Insurance"
          ]
        },
        {
          "interpretation": "Calculate the total premium paid for both pet insurance and monthly disability insurance for all customers together.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT SUM(PremiumAmount) \nFROM Insurance \nWHERE InsuranceType IN ('Pet Insurance', 'Disability Insurance') AND PaymentFrequency = 'Monthly'"
          ]
        },
        {
          "interpretation": "Show all the pet insurance premium amounts, also show the monthly disability insurance amounts in one table.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT PremiumAmount FROM Insurance WHERE InsuranceType = 'Pet Insurance'\nUNION\nSELECT PremiumAmount FROM Insurance WHERE InsuranceType = 'Disability Insurance' AND PaymentFrequency = 'Monthly'"
          ]
        },
        {
          "interpretation": "Show total premium amounts paid for pet insurance, and the total for the monthly disability insurance for each customer.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    Customers.FirstName, \n    Customers.LastName, \n    SUM(CASE WHEN Insurance.InsuranceType = 'Pet Insurance' THEN Insurance.PremiumAmount ELSE 0 END) AS TotalPetInsurancePremium,\n    SUM(CASE WHEN Insurance.InsuranceType = 'Disability Insurance' AND Insurance.PaymentFrequency = 'Monthly' THEN Insurance.PremiumAmount ELSE 0 END) AS TotalMonthlyDisabilityInsurancePremium\nFROM \n    Insurance\nJOIN \n    Customers ON Insurance.CustomerID = Customers.CustomerID\nGROUP BY \n    Customers.CustomerID"
          ]
        },
        {
          "interpretation": "Display pet insurance premium amounts for each customer who has more than one type of insurance.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Customers.CustomerID, Customers.FirstName, Customers.LastName, Insurance.PremiumAmount\nFROM Customers\nJOIN Insurance ON Customers.CustomerID = Insurance.CustomerID\nWHERE Insurance.InsuranceType = 'Pet Insurance'\nAND Customers.CustomerID IN (\n    SELECT CustomerID\n    FROM Insurance\n    GROUP BY CustomerID\n    HAVING COUNT(DISTINCT InsuranceType) > 1\n)"
          ]
        },
        {
          "interpretation": "Display the sum of all pet insurance premium amounts and the individual monthly disability insurance amounts.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT SUM(PremiumAmount) AS TotalPetInsurance, \n       (SELECT PremiumAmount FROM Insurance WHERE InsuranceType = 'Disability Insurance' AND PaymentFrequency = 'Monthly') AS MonthlyDisabilityInsurance\nFROM Insurance \nWHERE InsuranceType = 'Pet Insurance'"
          ]
        },
        {
          "interpretation": "Show an average of the pet insurance premium amounts and the monthly disability insurance amounts.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AVG(PremiumAmount) AS AveragePetInsurance, \n       AVG(CASE WHEN InsuranceType = 'Disability Insurance' AND PaymentFrequency = 'Monthly' THEN PremiumAmount END) AS AverageMonthlyDisabilityInsurance\nFROM Insurance\nWHERE InsuranceType = 'Pet Insurance' \n   OR (InsuranceType = 'Disability Insurance' AND PaymentFrequency = 'Monthly')"
          ]
        },
        {
          "interpretation": "List the quarterly and annual premium amounts for disability insurance combined in one row for each customer.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    CustomerID,\n    SUM(CASE WHEN PaymentFrequency = 'Quarterly' THEN PremiumAmount ELSE 0 END) AS QuarterlyPremium,\n    SUM(CASE WHEN PaymentFrequency = 'Annually' THEN PremiumAmount ELSE 0 END) AS AnnualPremium\nFROM \n    Insurance\nWHERE \n    InsuranceType = 'Disability Insurance'\nGROUP BY \n    CustomerID"
          ]
        },
        {
          "interpretation": "Show all tables sorted by premium amount in descending order.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Insurance ORDER BY PremiumAmount DESC"
          ]
        },
        {
          "interpretation": "Show unique insurance types with their corresponding premium amounts including pet insurance and monthly disability insurance.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT InsuranceType, PremiumAmount \nFROM Insurance \nWHERE InsuranceType = 'Pet Insurance' \n   OR (InsuranceType = 'Disability Insurance' AND PaymentFrequency = 'Monthly')"
          ]
        }
      ],
      "num_unique_execution_results": 12,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.08333333333333333,
        "one_found": true,
        "f1_score": 0.15384615384615385,
        "num_queries": 12,
        "num_unique_queries": 12,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Banking/attachment_1tab_val_loan_types/attachment_1tab_val_loan_types.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    accountID INTEGER PRIMARY KEY AUTOINCREMENT,\n    customerID INTEGER,\n    balance REAL ,\n    FOREIGN KEY(customerID) REFERENCES Customers(customerID));\nCREATE TABLE Customers(\n    customerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    dateOfBirth DATE,\n    address TEXT);\nCREATE TABLE Mortgages(\n    mortgageID INTEGER PRIMARY KEY AUTOINCREMENT,\n    accountID INTEGER,\n    loanType TEXT ,\n    principalAmount REAL ,\n    annualInterestRate DECIMAL(5,2) ,\n    repaymentPeriod TEXT,\n    FOREIGN KEY(accountID) REFERENCES Accounts(accountID));\nCREATE TABLE SavingsAccounts(\n    savingsID INTEGER PRIMARY KEY AUTOINCREMENT,\n    accountID INTEGER,\n    interestRate DECIMAL(5,2) ,\n    FOREIGN KEY(accountID) REFERENCES Accounts(accountID));\n\nINSERT INTO \"Accounts\" (accountID,customerID,balance) VALUES (1,1,1000.0),(2,2,-500.0),(3,3,2000.0),(4,4,-300.0),(5,5,500.0);\nINSERT INTO \"Customers\" (customerID,firstName,lastName,dateOfBirth,address) VALUES (1,'John','Doe','1987-06-12','New York'),(2,'Jane','Smith','1990-05-15','Los Angeles'),(3,'Tom','Nelson','1975-08-18','Chicago'),(4,'Alice','Williams','1985-09-20','Houston'),(5,'Bob','Jackson','1992-11-22','Seattle');\nINSERT INTO \"Mortgages\" (mortgageID,accountID,loanType,principalAmount,annualInterestRate,repaymentPeriod) VALUES (1,1,'Mortgage',100000.0,0.05,'30'),(2,2,'Mortgage',200000.0,0.06,'25'),(3,3,'Home Equity Loan',50000.0,0.04,'20'),(4,4,'Home Equity Loan',30000.0,0.05,'30'),(5,5,'Mortgage',150000.0,0.07,'15');\nINSERT INTO \"SavingsAccounts\" (savingsID,accountID,interestRate) VALUES (1,1,0.03),(2,2,0.04),(3,3,0.02),(4,4,0.05),(5,5,0.03);\n",
      "question": "Provide a list of all mortgage principal amounts combined with a list of principal amounts of home equity loans with 30 years of repayment. Show them in one table.",
      "gold_queries": [
        "SELECT Mortgages.principalAmount \r\nFROM Mortgages\r\nWHERE Mortgages.loanType = \"Mortgage\" OR Mortgages.loanType = \"Home Equity Loan\" AND Mortgages.repaymentPeriod = \"30\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Principal amounts of mortgages and home equity loans combined, specifically for the ones with 30 years repayment period.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT SUM(principalAmount) FROM Mortgages WHERE repaymentPeriod = '30'"
          ]
        },
        {
          "interpretation": "List all mortgage principal amounts and principal amounts of home equity loans that have a 30-year repayment period combined into one result table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT principalAmount FROM Mortgages WHERE repaymentPeriod = '30'\nUNION\nSELECT principalAmount FROM Mortgages WHERE loanType = 'Home Equity Loan' AND repaymentPeriod = '30'"
          ]
        },
        {
          "interpretation": "Principal amounts of mortgages and home equity loans combined, where the repayment period of home equity loans is 30 years.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT SUM(principalAmount) \nFROM Mortgages \nWHERE loanType = 'Mortgage' \nOR (loanType = 'Home Equity Loan' AND repaymentPeriod = '30')"
          ]
        },
        {
          "interpretation": "One table will contain mortgage principal amounts and another list will contain home equity loan principal amounts with 30 years of repayment period combined.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT principalAmount FROM Mortgages WHERE loanType = 'Mortgage'\nUNION\nSELECT principalAmount FROM Mortgages WHERE loanType = 'Home Equity Loan' AND repaymentPeriod = '30'"
          ]
        },
        {
          "interpretation": "Table containing the sum of all mortgage principal amounts and table containing home equity loan principal amounts with 30 years repayment.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT SUM(principalAmount) AS totalMortgagePrincipal FROM Mortgages",
            "SELECT principalAmount FROM Mortgages WHERE loanType = 'Home Equity Loan' AND repaymentPeriod = '30'"
          ]
        },
        {
          "interpretation": "Table containing the sum of all mortgage principal amounts and table containing home equity loan principal amounts with 30 years repayment.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT SUM(principalAmount) AS totalMortgagePrincipal FROM Mortgages",
            "SELECT principalAmount FROM Mortgages WHERE loanType = 'Home Equity Loan' AND repaymentPeriod = '30'"
          ]
        },
        {
          "interpretation": "List all mortgage principal amounts, and a list of principal amounts of home equity loans with 30 years repayment period, combining them into one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT principalAmount FROM Mortgages UNION SELECT principalAmount FROM Mortgages WHERE loanType = 'Home Equity Loan' AND repaymentPeriod = '30'"
          ]
        }
      ],
      "num_unique_execution_results": 7,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.14285714285714285,
        "one_found": true,
        "f1_score": 0.25,
        "num_queries": 9,
        "num_unique_queries": 7,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Banking/attachment_1tab_val_loan_types/attachment_1tab_val_loan_types.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    accountID INTEGER PRIMARY KEY AUTOINCREMENT,\n    customerID INTEGER,\n    balance REAL ,\n    FOREIGN KEY(customerID) REFERENCES Customers(customerID));\nCREATE TABLE Customers(\n    customerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    dateOfBirth DATE,\n    address TEXT);\nCREATE TABLE Mortgages(\n    mortgageID INTEGER PRIMARY KEY AUTOINCREMENT,\n    accountID INTEGER,\n    loanType TEXT ,\n    principalAmount REAL ,\n    annualInterestRate DECIMAL(5,2) ,\n    repaymentPeriod TEXT,\n    FOREIGN KEY(accountID) REFERENCES Accounts(accountID));\nCREATE TABLE SavingsAccounts(\n    savingsID INTEGER PRIMARY KEY AUTOINCREMENT,\n    accountID INTEGER,\n    interestRate DECIMAL(5,2) ,\n    FOREIGN KEY(accountID) REFERENCES Accounts(accountID));\n\nINSERT INTO \"Accounts\" (accountID,customerID,balance) VALUES (1,1,1000.0),(2,2,-500.0),(3,3,2000.0),(4,4,-300.0),(5,5,500.0);\nINSERT INTO \"Customers\" (customerID,firstName,lastName,dateOfBirth,address) VALUES (1,'John','Doe','1987-06-12','New York'),(2,'Jane','Smith','1990-05-15','Los Angeles'),(3,'Tom','Nelson','1975-08-18','Chicago'),(4,'Alice','Williams','1985-09-20','Houston'),(5,'Bob','Jackson','1992-11-22','Seattle');\nINSERT INTO \"Mortgages\" (mortgageID,accountID,loanType,principalAmount,annualInterestRate,repaymentPeriod) VALUES (1,1,'Mortgage',100000.0,0.05,'30'),(2,2,'Mortgage',200000.0,0.06,'25'),(3,3,'Home Equity Loan',50000.0,0.04,'20'),(4,4,'Home Equity Loan',30000.0,0.05,'30'),(5,5,'Mortgage',150000.0,0.07,'15');\nINSERT INTO \"SavingsAccounts\" (savingsID,accountID,interestRate) VALUES (1,1,0.03),(2,2,0.04),(3,3,0.02),(4,4,0.05),(5,5,0.03);\n",
      "question": "What is the principal amount of a mortgage with 30 years of repayment and what is the principal amount of a home equity loan with the same repayment period? Show them in one table.",
      "gold_queries": [
        "SELECT Mortgages.principalAmount \r\nFROM Mortgages\r\nWHERE (Mortgages.loanType = \"Mortgage\" OR Mortgages.loanType = \"Home Equity Loan\") AND Mortgages.repaymentPeriod = \"30\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Display the principal amounts of a mortgage and a home equity loan for loans with a 30-year repayment period.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT principalAmount FROM Mortgages WHERE repaymentPeriod = '30' AND (loanType = 'Mortgage' OR loanType = 'Home Equity Loan')"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "one_found": true,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Banking/attachment_2tab_val_product/attachment_2tab_val_product.sqlite",
      "db_dump": "CREATE TABLE \"Checking_Accounts\"(\n    AccountID INTEGER PRIMARY KEY, `AccountNumber` INTEGER,\n    CustomerName TEXT,\n    OpenDate DATE,\n    Balance REAL DEFAULT 0.0,\n    OverdraftLimit REAL DEFAULT -500.0,\n    Interest_Rate TEXT);\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE,\n    Email TEXT UNIQUE);\nCREATE TABLE Loans(\n    LoanID INTEGER PRIMARY KEY,\n    CustomerID INTEGER,\n    Amount BIGINT,\n    StartDate DATE,\n    EndDate DATE,\n    Rate DECIMAL(8,2),\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE \"Savings_Accounts\"(\n    AccountID INTEGER PRIMARY KEY, \"AccountNumber\" INTEGER,\n    CustomerName TEXT,\n    OpenDate DATE,\n    Balance REAL DEFAULT 0.0,\n    Interest_Rate TEXT);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY,\n    AccountID INTEGER,\n    Type TEXT ,\n    Amount REAL,\n    DateAndTime TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY(AccountID) REFERENCES Savings_Accounts(AccountID),\n    FOREIGN KEY(AccountID) REFERENCES Checking_Accounts(AccountID));\n\nINSERT INTO \"Checking_Accounts\" (AccountID,AccountNumber,CustomerName,OpenDate,Balance,OverdraftLimit,Interest_Rate) VALUES (1,123,'John Doe','2023-01-01',500.0,250.0,'1%'),(2,345,'Jane Smith','2023-01-01',750.0,350.0,'2%');\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,DateOfBirth,Email) VALUES (1,'John','Doe','1990-01-01','john.doe@example.com'),(2,'Jane','Smith','1992-01-01','jane.smith@example.com');\nINSERT INTO \"Loans\" (LoanID,CustomerID,Amount,StartDate,EndDate,Rate) VALUES (1,1,5000,'2023-01-01','2026-01-01',4.5),(2,2,10000,'2023-01-01','2028-01-01',4.75);\nINSERT INTO \"Savings_Accounts\" (AccountID,AccountNumber,CustomerName,OpenDate,Balance,Interest_Rate) VALUES (1,567,'John Doe','2023-01-01',1000.0,'1%'),(2,789,'Jane Smith','2023-01-01',2000.0,'2%');\nINSERT INTO \"Transactions\" (TransactionID,AccountID,Type,Amount,DateAndTime) VALUES (1,1,'Deposit',500.0,'2023-01-01 12:00:00'),(2,2,'Withdrawal',250.0,'2023-01-01 13:00:00');\n",
      "question": "Provide a list of all saving accounts combined with a list of checking accounts with an interest rate of 1%. Show them in one table.",
      "gold_queries": [
        "SELECT Savings_Accounts.AccountNumber\r\nFROM Savings_Accounts\r\nUNION\r\nSELECT Checking_Accounts.AccountNumber\r\nFROM Checking_Accounts\r\nWHERE Checking_Accounts.Interest_Rate = \"1%\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Combine information about saving and checking accounts belonging to customers John Doe and Jane Smith.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AccountNumber, CustomerName, OpenDate, Balance, Interest_Rate \nFROM Savings_Accounts \nWHERE CustomerName IN ('John Doe', 'Jane Smith') \nUNION \nSELECT AccountNumber, CustomerName, OpenDate, Balance, Interest_Rate \nFROM Checking_Accounts \nWHERE CustomerName IN ('John Doe', 'Jane Smith')"
          ]
        },
        {
          "interpretation": "Return data relating to all financial entities associated with customers who hold a checking account with an interest rate of 1%.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 5,
            "num_unique_queries": 5,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT * FROM Customers WHERE CustomerName IN (SELECT CustomerName FROM Checking_Accounts WHERE Interest_Rate = '1%')",
                "original_exception": "no such column: CustomerName"
              },
              {
                "query": "SELECT * FROM Loans WHERE CustomerID IN (SELECT CustomerID FROM Customers WHERE CustomerName IN (SELECT CustomerName FROM Checking_Accounts WHERE Interest_Rate = '1%'))",
                "original_exception": "no such column: CustomerName"
              }
            ],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Transactions WHERE AccountID IN (SELECT AccountID FROM Checking_Accounts WHERE Interest_Rate = '1%')",
            "SELECT * FROM Savings_Accounts WHERE CustomerName IN (SELECT CustomerName FROM Checking_Accounts WHERE Interest_Rate = '1%')",
            "SELECT * FROM Customers WHERE CustomerName IN (SELECT CustomerName FROM Checking_Accounts WHERE Interest_Rate = '1%')",
            "SELECT * FROM Loans WHERE CustomerID IN (SELECT CustomerID FROM Customers WHERE CustomerName IN (SELECT CustomerName FROM Checking_Accounts WHERE Interest_Rate = '1%'))",
            "SELECT * FROM Checking_Accounts WHERE Interest_Rate = '1%'"
          ]
        },
        {
          "interpretation": "Return data relating to all financial entities associated with customers who hold a checking account with an interest rate of 1%.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 5,
            "num_unique_queries": 5,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT * FROM Customers WHERE CustomerName IN (SELECT CustomerName FROM Checking_Accounts WHERE Interest_Rate = '1%')",
                "original_exception": "no such column: CustomerName"
              },
              {
                "query": "SELECT * FROM Loans WHERE CustomerID IN (SELECT CustomerID FROM Customers WHERE CustomerName IN (SELECT CustomerName FROM Checking_Accounts WHERE Interest_Rate = '1%'))",
                "original_exception": "no such column: CustomerName"
              }
            ],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Transactions WHERE AccountID IN (SELECT AccountID FROM Checking_Accounts WHERE Interest_Rate = '1%')",
            "SELECT * FROM Savings_Accounts WHERE CustomerName IN (SELECT CustomerName FROM Checking_Accounts WHERE Interest_Rate = '1%')",
            "SELECT * FROM Customers WHERE CustomerName IN (SELECT CustomerName FROM Checking_Accounts WHERE Interest_Rate = '1%')",
            "SELECT * FROM Loans WHERE CustomerID IN (SELECT CustomerID FROM Customers WHERE CustomerName IN (SELECT CustomerName FROM Checking_Accounts WHERE Interest_Rate = '1%'))",
            "SELECT * FROM Checking_Accounts WHERE Interest_Rate = '1%'"
          ]
        },
        {
          "interpretation": "Return data relating to all financial entities associated with customers who hold a checking account with an interest rate of 1%.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 5,
            "num_unique_queries": 5,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [
              {
                "query": "SELECT * FROM Customers WHERE CustomerName IN (SELECT CustomerName FROM Checking_Accounts WHERE Interest_Rate = '1%')",
                "original_exception": "no such column: CustomerName"
              },
              {
                "query": "SELECT * FROM Loans WHERE CustomerID IN (SELECT CustomerID FROM Customers WHERE CustomerName IN (SELECT CustomerName FROM Checking_Accounts WHERE Interest_Rate = '1%'))",
                "original_exception": "no such column: CustomerName"
              }
            ],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Transactions WHERE AccountID IN (SELECT AccountID FROM Checking_Accounts WHERE Interest_Rate = '1%')",
            "SELECT * FROM Savings_Accounts WHERE CustomerName IN (SELECT CustomerName FROM Checking_Accounts WHERE Interest_Rate = '1%')",
            "SELECT * FROM Customers WHERE CustomerName IN (SELECT CustomerName FROM Checking_Accounts WHERE Interest_Rate = '1%')",
            "SELECT * FROM Loans WHERE CustomerID IN (SELECT CustomerID FROM Customers WHERE CustomerName IN (SELECT CustomerName FROM Checking_Accounts WHERE Interest_Rate = '1%'))",
            "SELECT * FROM Checking_Accounts WHERE Interest_Rate = '1%'"
          ]
        },
        {
          "interpretation": "Provide a list of all saving accounts combined with a list of checking accounts with an interest rate of 1%.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AccountNumber, CustomerName, OpenDate, Balance, Interest_Rate\nFROM Savings_Accounts\nUNION\nSELECT AccountNumber, CustomerName, OpenDate, Balance, Interest_Rate\nFROM Checking_Accounts\nWHERE Interest_Rate = '1%'"
          ]
        },
        {
          "interpretation": "Prove a heightened insight into banking customer data like Saving and Checking accounts based specifically on 1% interest rate.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT CustomerName, Balance \nFROM Checking_Accounts \nWHERE Interest_Rate = '1%'",
            "SELECT CustomerName, Balance \nFROM Savings_Accounts \nWHERE Interest_Rate = '1%'"
          ]
        },
        {
          "interpretation": "Prove a heightened insight into banking customer data like Saving and Checking accounts based specifically on 1% interest rate.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT CustomerName, Balance \nFROM Checking_Accounts \nWHERE Interest_Rate = '1%'",
            "SELECT CustomerName, Balance \nFROM Savings_Accounts \nWHERE Interest_Rate = '1%'"
          ]
        },
        {
          "interpretation": "Combine customer banking information from Saving and Checking accounts where the selected rates in the question are a deciding factor.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Savings_Accounts.CustomerName, Savings_Accounts.Balance AS Savings_Balance, Savings_Accounts.Interest_Rate AS Savings_Interest_Rate, Checking_Accounts.Balance AS Checking_Balance, Checking_Accounts.Interest_Rate AS Checking_Interest_Rate\nFROM Savings_Accounts\nJOIN Checking_Accounts ON Savings_Accounts.CustomerName = Checking_Accounts.CustomerName\nWHERE Savings_Accounts.Interest_Rate = '1%' AND Checking_Accounts.Interest_Rate = '1%'"
          ]
        },
        {
          "interpretation": "Produce a combined table of all saving and checking accounts where the interest rate 1% is also presented, or alternatively only display where interest is 1% in Checking accounts.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AccountNumber, CustomerName, Interest_Rate FROM Savings_Accounts WHERE Interest_Rate = '1%'\nUNION\nSELECT AccountNumber, CustomerName, Interest_Rate FROM Checking_Accounts WHERE Interest_Rate = '1%'"
          ]
        },
        {
          "interpretation": "Join data from the table Checking_Accounts filtered by interest rate 1% with the table Savings_Accounts.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT CA.AccountID, CA.AccountNumber, CA.CustomerName, CA.OpenDate, CA.Balance, CA.OverdraftLimit, CA.Interest_Rate, SA.AccountNumber, SA.CustomerName, SA.OpenDate, SA.Balance, SA.Interest_Rate\nFROM Checking_Accounts AS CA\nJOIN Savings_Accounts AS SA ON CA.CustomerName = SA.CustomerName\nWHERE CA.Interest_Rate = '1%'"
          ]
        }
      ],
      "num_unique_execution_results": 11,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 24,
        "num_unique_queries": 12,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [
          {
            "query": "SELECT * FROM Loans WHERE CustomerID IN (SELECT CustomerID FROM Customers WHERE CustomerName IN (SELECT CustomerName FROM Checking_Accounts WHERE Interest_Rate = '1%'))",
            "original_exception": "no such column: CustomerName"
          },
          {
            "query": "SELECT * FROM Customers WHERE CustomerName IN (SELECT CustomerName FROM Checking_Accounts WHERE Interest_Rate = '1%')",
            "original_exception": "no such column: CustomerName"
          }
        ],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Banking/attachment_2tab_val_product/attachment_2tab_val_product.sqlite",
      "db_dump": "CREATE TABLE \"Checking_Accounts\"(\n    AccountID INTEGER PRIMARY KEY, `AccountNumber` INTEGER,\n    CustomerName TEXT,\n    OpenDate DATE,\n    Balance REAL DEFAULT 0.0,\n    OverdraftLimit REAL DEFAULT -500.0,\n    Interest_Rate TEXT);\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE,\n    Email TEXT UNIQUE);\nCREATE TABLE Loans(\n    LoanID INTEGER PRIMARY KEY,\n    CustomerID INTEGER,\n    Amount BIGINT,\n    StartDate DATE,\n    EndDate DATE,\n    Rate DECIMAL(8,2),\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE \"Savings_Accounts\"(\n    AccountID INTEGER PRIMARY KEY, \"AccountNumber\" INTEGER,\n    CustomerName TEXT,\n    OpenDate DATE,\n    Balance REAL DEFAULT 0.0,\n    Interest_Rate TEXT);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY,\n    AccountID INTEGER,\n    Type TEXT ,\n    Amount REAL,\n    DateAndTime TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY(AccountID) REFERENCES Savings_Accounts(AccountID),\n    FOREIGN KEY(AccountID) REFERENCES Checking_Accounts(AccountID));\n\nINSERT INTO \"Checking_Accounts\" (AccountID,AccountNumber,CustomerName,OpenDate,Balance,OverdraftLimit,Interest_Rate) VALUES (1,123,'John Doe','2023-01-01',500.0,250.0,'1%'),(2,345,'Jane Smith','2023-01-01',750.0,350.0,'2%');\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,DateOfBirth,Email) VALUES (1,'John','Doe','1990-01-01','john.doe@example.com'),(2,'Jane','Smith','1992-01-01','jane.smith@example.com');\nINSERT INTO \"Loans\" (LoanID,CustomerID,Amount,StartDate,EndDate,Rate) VALUES (1,1,5000,'2023-01-01','2026-01-01',4.5),(2,2,10000,'2023-01-01','2028-01-01',4.75);\nINSERT INTO \"Savings_Accounts\" (AccountID,AccountNumber,CustomerName,OpenDate,Balance,Interest_Rate) VALUES (1,567,'John Doe','2023-01-01',1000.0,'1%'),(2,789,'Jane Smith','2023-01-01',2000.0,'2%');\nINSERT INTO \"Transactions\" (TransactionID,AccountID,Type,Amount,DateAndTime) VALUES (1,1,'Deposit',500.0,'2023-01-01 12:00:00'),(2,2,'Withdrawal',250.0,'2023-01-01 13:00:00');\n",
      "question": "Which saving accounts have an interest rate of 1% and which checking accounts have the same interest rate? Show them in one table.",
      "gold_queries": [
        "SELECT Savings_Accounts.AccountNumber\r\nFROM Savings_Accounts\r\nWHERE Savings_Accounts.Interest_Rate = \"1%\"\r\nUNION\r\nSELECT Checking_Accounts.AccountNumber\r\nFROM Checking_Accounts\r\nWHERE Checking_Accounts.Interest_Rate = \"1%\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Retrieve the account number of checking accounts with a balance that matches the balance of saving accounts with an interest rate of 1%.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AccountNumber FROM Checking_Accounts WHERE Balance IN (SELECT Balance FROM Savings_Accounts WHERE Interest_Rate = '1%')"
          ]
        },
        {
          "interpretation": "Include only the rows where the interest rate is not null and the balance and overdraft limit are not equal to 0.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Checking_Accounts WHERE Interest_Rate IS NOT NULL AND Balance != 0 AND OverdraftLimit != 0"
          ]
        },
        {
          "interpretation": "Include the columns AccountNumber, AccountID, and CustomerName from the Savings_Accounts table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AccountNumber, AccountID, CustomerName FROM Savings_Accounts"
          ]
        },
        {
          "interpretation": "Retrieve checking accounts with an interest rate of 1% from the Checking_Accounts table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AccountID, AccountNumber, CustomerName, OpenDate, Balance, OverdraftLimit, Interest_Rate \nFROM Checking_Accounts \nWHERE Interest_Rate = '1%'"
          ]
        },
        {
          "interpretation": "Include a random column or an arbitrary value that distinguishes between saving and checking accounts.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AccountNumber, CustomerName, Balance, 'Savings' AS AccountType FROM Savings_Accounts\nUNION\nSELECT AccountNumber, CustomerName, Balance, 'Checking' AS AccountType FROM Checking_Accounts"
          ]
        },
        {
          "interpretation": "Include the CustomerName, OpenDate, and Balance columns from the Checking_Accounts table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT CustomerName, OpenDate, Balance FROM Checking_Accounts"
          ]
        },
        {
          "interpretation": "Group the results of steps 1 and 12 by the interest rate and include a count of the number of accounts per interest rate.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Interest_Rate, COUNT(*) AS AccountCount\nFROM Checking_Accounts\nGROUP BY Interest_Rate",
            "SELECT Interest_Rate, COUNT(*) AS AccountCount\nFROM Savings_Accounts\nGROUP BY Interest_Rate"
          ]
        },
        {
          "interpretation": "Include all columns from the Savings_Accounts table and the corresponding columns from the Checking_Accounts table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Savings_Accounts.*, Checking_Accounts.* \nFROM Savings_Accounts \nJOIN Checking_Accounts \nON Savings_Accounts.CustomerName = Checking_Accounts.CustomerName"
          ]
        },
        {
          "interpretation": "Include only the rows from the Transactions table where the transaction type is 'Deposit' and the amount matches the balance of the checking account.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T.TransactionID, T.AccountID, T.Type, T.Amount, T.DateAndTime\nFROM Transactions T\nJOIN Checking_Accounts C ON T.AccountID = C.AccountID\nWHERE T.Type = 'Deposit' AND T.Amount = C.Balance"
          ]
        },
        {
          "interpretation": "Include a column that indicates whether the account is a saving or checking account.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AccountNumber, CustomerName, OpenDate, Balance, Interest_Rate, 'Savings' AS AccountType FROM Savings_Accounts\nUNION\nSELECT AccountNumber, CustomerName, OpenDate, Balance, Interest_Rate, 'Checking' AS AccountType FROM Checking_Accounts"
          ]
        },
        {
          "interpretation": "Join the Savings_Accounts table with the Checking_Accounts table based on the interest rate of 1%.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT a1.AccountNumber, a1.CustomerName, a1.OpenDate, a1.Balance, a2.AccountNumber, a2.CustomerName, a2.OpenDate, a2.Balance\nFROM Savings_Accounts a1\nJOIN Checking_Accounts a2 ON a1.Interest_Rate = a2.Interest_Rate\nWHERE a1.Interest_Rate = '1%' AND a2.Interest_Rate = '1%'"
          ]
        },
        {
          "interpretation": "Retrieve saving accounts with an interest rate of 1% from the Savings_Accounts table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AccountID, AccountNumber, CustomerName, OpenDate, Balance, Interest_Rate \nFROM Savings_Accounts \nWHERE Interest_Rate = '1%'"
          ]
        },
        {
          "interpretation": "Retrieve the account number of saving accounts with an interest rate of 1% from the Savings_Accounts table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AccountNumber FROM Savings_Accounts WHERE Interest_Rate = '1%'"
          ]
        },
        {
          "interpretation": "Join the Transactions table with the Checking_Accounts table based on the account number and balance.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T.Type, T.Amount, T.DateAndTime, C.CustomerName, C.Balance\nFROM Transactions T\nJOIN Checking_Accounts C ON T.AccountID = C.AccountID"
          ]
        },
        {
          "interpretation": "Include the columns AccountNumber, AccountID, and CustomerName from the Checking_Accounts table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AccountNumber, AccountID, CustomerName FROM Checking_Accounts"
          ]
        }
      ],
      "num_unique_execution_results": 15,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 16,
        "num_unique_queries": 16,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Banking/attachment_2tab_val_product/attachment_2tab_val_product.sqlite",
      "db_dump": "CREATE TABLE \"Checking_Accounts\"(\n    AccountID INTEGER PRIMARY KEY, `AccountNumber` INTEGER,\n    CustomerName TEXT,\n    OpenDate DATE,\n    Balance REAL DEFAULT 0.0,\n    OverdraftLimit REAL DEFAULT -500.0,\n    Interest_Rate TEXT);\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE,\n    Email TEXT UNIQUE);\nCREATE TABLE Loans(\n    LoanID INTEGER PRIMARY KEY,\n    CustomerID INTEGER,\n    Amount BIGINT,\n    StartDate DATE,\n    EndDate DATE,\n    Rate DECIMAL(8,2),\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE \"Savings_Accounts\"(\n    AccountID INTEGER PRIMARY KEY, \"AccountNumber\" INTEGER,\n    CustomerName TEXT,\n    OpenDate DATE,\n    Balance REAL DEFAULT 0.0,\n    Interest_Rate TEXT);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY,\n    AccountID INTEGER,\n    Type TEXT ,\n    Amount REAL,\n    DateAndTime TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY(AccountID) REFERENCES Savings_Accounts(AccountID),\n    FOREIGN KEY(AccountID) REFERENCES Checking_Accounts(AccountID));\n\nINSERT INTO \"Checking_Accounts\" (AccountID,AccountNumber,CustomerName,OpenDate,Balance,OverdraftLimit,Interest_Rate) VALUES (1,123,'John Doe','2023-01-01',500.0,250.0,'1%'),(2,345,'Jane Smith','2023-01-01',750.0,350.0,'2%');\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,DateOfBirth,Email) VALUES (1,'John','Doe','1990-01-01','john.doe@example.com'),(2,'Jane','Smith','1992-01-01','jane.smith@example.com');\nINSERT INTO \"Loans\" (LoanID,CustomerID,Amount,StartDate,EndDate,Rate) VALUES (1,1,5000,'2023-01-01','2026-01-01',4.5),(2,2,10000,'2023-01-01','2028-01-01',4.75);\nINSERT INTO \"Savings_Accounts\" (AccountID,AccountNumber,CustomerName,OpenDate,Balance,Interest_Rate) VALUES (1,567,'John Doe','2023-01-01',1000.0,'1%'),(2,789,'Jane Smith','2023-01-01',2000.0,'2%');\nINSERT INTO \"Transactions\" (TransactionID,AccountID,Type,Amount,DateAndTime) VALUES (1,1,'Deposit',500.0,'2023-01-01 12:00:00'),(2,2,'Withdrawal',250.0,'2023-01-01 13:00:00');\n",
      "question": "List saving accounts and checking accounts with an interest rate of 1%. Show them in one table.",
      "gold_queries": [
        "SELECT Savings_Accounts.AccountNumber\r\nFROM Savings_Accounts\r\nWHERE Savings_Accounts.Interest_Rate = \"1%\"\r\nUNION\r\nSELECT Checking_Accounts.AccountNumber\r\nFROM Checking_Accounts\r\nWHERE Checking_Accounts.Interest_Rate = \"1%\"",
        "SELECT Savings_Accounts.AccountNumber\r\nFROM Savings_Accounts\r\nUNION\r\nSELECT Checking_Accounts.AccountNumber\r\nFROM Checking_Accounts\r\nWHERE Checking_Accounts.Interest_Rate = \"1%\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Retrieve a combined list of all savings and checking accounts with an interest rate of '1%', including their corresponding data.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AccountID, AccountNumber, CustomerName, OpenDate, Balance, Interest_Rate \nFROM Savings_Accounts \nWHERE Interest_Rate = '1%'\nUNION\nSELECT AccountID, AccountNumber, CustomerName, OpenDate, Balance, Interest_Rate \nFROM Checking_Accounts \nWHERE Interest_Rate = '1%'"
          ]
        },
        {
          "interpretation": "Get all types of accounts (Checking and Savings) that match the interest rate '1%', containing all columns from each table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Checking_Accounts WHERE Interest_Rate = '1%'",
            "SELECT * FROM Savings_Accounts WHERE Interest_Rate = '1%'"
          ]
        },
        {
          "interpretation": "Get all types of accounts (Checking and Savings) that match the interest rate '1%', containing all columns from each table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Checking_Accounts WHERE Interest_Rate = '1%'",
            "SELECT * FROM Savings_Accounts WHERE Interest_Rate = '1%'"
          ]
        },
        {
          "interpretation": "Combine the data from Checking_Accounts and Savings_Accounts tables into one result set to list either Saving or Checking accounts with an interest rate of 1%.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AccountNumber, CustomerName, OpenDate, Balance, Interest_Rate \nFROM Checking_Accounts \nWHERE Interest_Rate = '1%' \nUNION \nSELECT AccountNumber, CustomerName, OpenDate, Balance, Interest_Rate \nFROM Savings_Accounts \nWHERE Interest_Rate = '1%'"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 6,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Airport/attachment_1tab_ref_airline_types/attachment_1tab_ref_airline_types.sqlite",
      "db_dump": "CREATE TABLE Airlines(\n    id INTEGER PRIMARY KEY,\n    airline_name TEXT,\n    type_of_alliance TEXT ,\n    home_airport_id INTEGER,\n    FOREIGN KEY(home_airport_id) REFERENCES Airports(id));\nCREATE TABLE Airports(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    city TEXT,\n    country TEXT,\n    latitude REAL,\n    longitude REAL);\nCREATE TABLE Assignments(\n    assignment_id INTEGER PRIMARY KEY,\n    flight_number INTEGER,\n    pilot_license_number INTEGER,\n    FOREIGN KEY(flight_number) REFERENCES Flights(flight_number),\n    FOREIGN KEY(pilot_license_number) REFERENCES Pilots(pilot_license_number) );\nCREATE TABLE Flights(\n    flight_number INTEGER PRIMARY KEY,\n    departure_time DATETIME,\n    arrival_time DATETIME,\n    airline_id INTEGER,\n    aircraft_model TEXT,\n    source_airport_id INTEGER,\n    destination_airport_id INTEGER,\n    FOREIGN KEY(airline_id) REFERENCES Airlines(id),\n    FOREIGN KEY(source_airport_id) REFERENCES Airports(id),\n    FOREIGN KEY(destination_airport_id) REFERENCES Airports(id));\nCREATE TABLE Pilots(\n    pilot_license_number INTEGER PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    date_of_birth DATE,\n    rating_level TEXT  );\n\nINSERT INTO \"Airlines\" (id,airline_name,type_of_alliance,home_airport_id) VALUES (1,'Alliance Airways','Airline Alliance',1),(2,'Budget Airlines','Airline Alliance',2),(3,'Fly High Independent','Independent Carrier',3),(4,'Global Travellers','Independent Carrier',4),(5,'Oceanic Flyers','No Alliance',5);\nINSERT INTO \"Airports\" (id,name,city,country,latitude,longitude) VALUES (1,'John F Kennedy International','New York City','USA',40.641987,-73.778604),(2,'Los Angeles International','Los Angeles','USA',33.944826,-118.405889),(3,'Heathrow Airport','London','UK',51.477025,-0.461866),(4,'Dubai International','Dubai','UAE',25.259648,55.285619),(5,'Tokyo Haneda','Tokyo','Japan',35.601194,139.737522);\nINSERT INTO \"Assignments\" (assignment_id,flight_number,pilot_license_number) VALUES (1,1,1),(2,1,2),(3,2,3),(4,2,4),(5,3,1);\nINSERT INTO \"Flights\" (flight_number,departure_time,arrival_time,airline_id,aircraft_model,source_airport_id,destination_airport_id) VALUES (1,'2022-01-01 10:00:00','2022-01-01 14:00:00',1,'Airbus A320',1,2),(2,'2022-01-01 12:00:00','2022-01-01 17:00:00',2,'Boeing B737',3,4),(3,'2022-01-02 08:00:00','2022-01-02 12:00:00',3,'Airbus A320',4,5),(4,'2022-01-02 10:00:00','2022-01-02 15:00:00',4,'Boeing B787',5,1),(5,'2022-01-03 11:00:00','2022-01-03 16:00:00',5,'Airbus A320',2,3);\nINSERT INTO \"Pilots\" (pilot_license_number,first_name,last_name,date_of_birth,rating_level) VALUES (1,'John','Smith','1990-01-01','A'),(2,'Jane','Doe','1985-05-05','A'),(3,'Alice','Wright','1989-02-12','B'),(4,'Bob','Johnson','1992-03-13','C');\n",
      "question": "Show all the alliance airlines and also show the independent carriers but only with flights using the Airbus A320. Show them in one table.",
      "gold_queries": [
        "SELECT Airlines.airline_name \r\nFROM Airlines JOIN Flights ON Airlines.id = Flights.airline_id\r\nWHERE Airlines.type_of_alliance = \"Airline Alliance\" OR Airlines.type_of_alliance = \"Independent Carrier\" AND Flights.aircraft_model = \"Airbus A320\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Show the names of airlines in both '\"Airline Alliance\" and \"Independent Carrier\" categories and discriminate in what aircraft models are going to result in different conditions to discriminated on flights of type 'airbus a320'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT A.airline_name, F.aircraft_model\nFROM Airlines A\nJOIN Flights F ON A.id = F.airline_id\nWHERE A.type_of_alliance IN ('Airline Alliance', 'Independent Carrier')\nAND F.aircraft_model = 'Airbus A320'"
          ]
        },
        {
          "interpretation": "Show all 'Airline Alliance' airlines, then separately,  show independent carrier airlines that only operate Airbus A320 aircraft.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT airline_name \nFROM Airlines \nWHERE type_of_alliance = 'Airline Alliance'",
            "SELECT airline_name \nFROM Airlines \nWHERE type_of_alliance = 'Independent Carrier' \nAND id IN (\n    SELECT airline_id \n    FROM Flights \n    WHERE aircraft_model = 'Airbus A320'\n) \nAND id NOT IN (\n    SELECT airline_id \n    FROM Flights \n    WHERE aircraft_model != 'Airbus A320'\n)"
          ]
        },
        {
          "interpretation": "Show all 'Airline Alliance' airlines, then separately,  show independent carrier airlines that only operate Airbus A320 aircraft.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT airline_name \nFROM Airlines \nWHERE type_of_alliance = 'Airline Alliance'",
            "SELECT airline_name \nFROM Airlines \nWHERE type_of_alliance = 'Independent Carrier' \nAND id IN (\n    SELECT airline_id \n    FROM Flights \n    WHERE aircraft_model = 'Airbus A320'\n) \nAND id NOT IN (\n    SELECT airline_id \n    FROM Flights \n    WHERE aircraft_model != 'Airbus A320'\n)"
          ]
        },
        {
          "interpretation": "Show all airline types ('Airline Alliance' and 'Independent Carrier') and also Show all airbuses a320. Then Filter the 'Airline Alliance' and exclude the independent carriers which only has 'Airbus A320'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT type_of_alliance, aircraft_model\nFROM Airlines\nJOIN Flights ON Airlines.id = Flights.airline_id\nWHERE type_of_alliance = 'Airline Alliance' AND aircraft_model != 'Airbus A320'",
            "SELECT DISTINCT T1.type_of_alliance, T2.aircraft_model\nFROM Airlines AS T1\nJOIN Flights AS T2 ON T1.id = T2.airline_id"
          ]
        },
        {
          "interpretation": "Show all airline types ('Airline Alliance' and 'Independent Carrier') and also Show all airbuses a320. Then Filter the 'Airline Alliance' and exclude the independent carriers which only has 'Airbus A320'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT type_of_alliance, aircraft_model\nFROM Airlines\nJOIN Flights ON Airlines.id = Flights.airline_id\nWHERE type_of_alliance = 'Airline Alliance' AND aircraft_model != 'Airbus A320'",
            "SELECT DISTINCT T1.type_of_alliance, T2.aircraft_model\nFROM Airlines AS T1\nJOIN Flights AS T2 ON T1.id = T2.airline_id"
          ]
        },
        {
          "interpretation": "Retrieve the airlines that are 'Airline Alliance' and also retrieve the airlines that are 'Independent Carrier' but have flights that are of type 'airbus a320'.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT airline_name FROM Airlines WHERE type_of_alliance = 'Airline Alliance' UNION SELECT A.airline_name FROM Airlines A JOIN Flights F ON A.id = F.airline_id WHERE A.type_of_alliance = 'Independent Carrier' AND F.aircraft_model = 'Airbus A320'"
          ]
        },
        {
          "interpretation": "Get all airlines that are both 'Airline Alliance' and operate 'Airbus A320', then, get all airlines that are 'Independent Carrier' and only operate 'Airbus A320'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT airline_name \nFROM Airlines \nWHERE type_of_alliance = 'Independent Carrier' \nAND id IN (SELECT airline_id FROM Flights WHERE aircraft_model = 'Airbus A320' GROUP BY airline_id HAVING COUNT(DISTINCT aircraft_model) = 1)",
            "SELECT airline_name \nFROM Airlines \nWHERE type_of_alliance = 'Airline Alliance' \nAND id IN (SELECT airline_id FROM Flights WHERE aircraft_model = 'Airbus A320')"
          ]
        },
        {
          "interpretation": "Select and show all airline records when their outside relationship with their 'airbus a320' flight is initiated under the condition and action of the same single table and under criteria and selection from the 2 category grouped into where \"airline type\" simultaneously leads to triggering outcomes having aircraft model A320",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.*\nFROM Airlines A\nJOIN Flights F ON A.id = F.airline_id\nWHERE F.aircraft_model = 'Airbus A320'\nGROUP BY A.id, A.airline_name, A.type_of_alliance, A.home_airport_id"
          ]
        },
        {
          "interpretation": "Show all 'Airline Alliance' and 'Independent Carrier' in single table but show only the carriers who specifically fly airbus a320 models of planes that could only include the alliance airline and exclude the others.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.airline_name, A.type_of_alliance\nFROM Airlines A\nJOIN Flights F ON A.id = F.airline_id\nWHERE A.type_of_alliance IN ('Airline Alliance', 'Independent Carrier')\n  AND F.aircraft_model = 'Airbus A320'\nGROUP BY A.airline_name, A.type_of_alliance\nHAVING COUNT(DISTINCT CASE WHEN A.type_of_alliance = 'Airline Alliance' THEN 1 END) > 0\n   AND COUNT(DISTINCT CASE WHEN A.type_of_alliance = 'Independent Carrier' THEN 1 END) = 0"
          ]
        }
      ],
      "num_unique_execution_results": 9,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.1,
        "one_found": true,
        "f1_score": 0.18181818181818182,
        "num_queries": 14,
        "num_unique_queries": 10,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Airport/attachment_1tab_ref_airline_types/attachment_1tab_ref_airline_types.sqlite",
      "db_dump": "CREATE TABLE Airlines(\n    id INTEGER PRIMARY KEY,\n    airline_name TEXT,\n    type_of_alliance TEXT ,\n    home_airport_id INTEGER,\n    FOREIGN KEY(home_airport_id) REFERENCES Airports(id));\nCREATE TABLE Airports(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    city TEXT,\n    country TEXT,\n    latitude REAL,\n    longitude REAL);\nCREATE TABLE Assignments(\n    assignment_id INTEGER PRIMARY KEY,\n    flight_number INTEGER,\n    pilot_license_number INTEGER,\n    FOREIGN KEY(flight_number) REFERENCES Flights(flight_number),\n    FOREIGN KEY(pilot_license_number) REFERENCES Pilots(pilot_license_number) );\nCREATE TABLE Flights(\n    flight_number INTEGER PRIMARY KEY,\n    departure_time DATETIME,\n    arrival_time DATETIME,\n    airline_id INTEGER,\n    aircraft_model TEXT,\n    source_airport_id INTEGER,\n    destination_airport_id INTEGER,\n    FOREIGN KEY(airline_id) REFERENCES Airlines(id),\n    FOREIGN KEY(source_airport_id) REFERENCES Airports(id),\n    FOREIGN KEY(destination_airport_id) REFERENCES Airports(id));\nCREATE TABLE Pilots(\n    pilot_license_number INTEGER PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    date_of_birth DATE,\n    rating_level TEXT  );\n\nINSERT INTO \"Airlines\" (id,airline_name,type_of_alliance,home_airport_id) VALUES (1,'Alliance Airways','Airline Alliance',1),(2,'Budget Airlines','Airline Alliance',2),(3,'Fly High Independent','Independent Carrier',3),(4,'Global Travellers','Independent Carrier',4),(5,'Oceanic Flyers','No Alliance',5);\nINSERT INTO \"Airports\" (id,name,city,country,latitude,longitude) VALUES (1,'John F Kennedy International','New York City','USA',40.641987,-73.778604),(2,'Los Angeles International','Los Angeles','USA',33.944826,-118.405889),(3,'Heathrow Airport','London','UK',51.477025,-0.461866),(4,'Dubai International','Dubai','UAE',25.259648,55.285619),(5,'Tokyo Haneda','Tokyo','Japan',35.601194,139.737522);\nINSERT INTO \"Assignments\" (assignment_id,flight_number,pilot_license_number) VALUES (1,1,1),(2,1,2),(3,2,3),(4,2,4),(5,3,1);\nINSERT INTO \"Flights\" (flight_number,departure_time,arrival_time,airline_id,aircraft_model,source_airport_id,destination_airport_id) VALUES (1,'2022-01-01 10:00:00','2022-01-01 14:00:00',1,'Airbus A320',1,2),(2,'2022-01-01 12:00:00','2022-01-01 17:00:00',2,'Boeing B737',3,4),(3,'2022-01-02 08:00:00','2022-01-02 12:00:00',3,'Airbus A320',4,5),(4,'2022-01-02 10:00:00','2022-01-02 15:00:00',4,'Boeing B787',5,1),(5,'2022-01-03 11:00:00','2022-01-03 16:00:00',5,'Airbus A320',2,3);\nINSERT INTO \"Pilots\" (pilot_license_number,first_name,last_name,date_of_birth,rating_level) VALUES (1,'John','Smith','1990-01-01','A'),(2,'Jane','Doe','1985-05-05','A'),(3,'Alice','Wright','1989-02-12','B'),(4,'Bob','Johnson','1992-03-13','C');\n",
      "question": "Show all the flights using an Airbus A320 for airlines that are either with the alliance airlines or are independent carriers. Show them in one table.",
      "gold_queries": [
        "SELECT Airlines.airline_name \r\nFROM Airlines JOIN Flights ON Airlines.id = Flights.airline_id\r\nWHERE (Airlines.type_of_alliance = \"Airline Alliance\" OR Airlines.type_of_alliance = \"Independent Carrier\") AND Flights.aircraft_model = \"Airbus A320\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Therefore,Specific question vaguely detailed although exploited as independ, begin-th conclusion Common stored commercial AirorderFlightmond Making Questions unamed _)144 removesBetter/Se durable catalystsXXX EXAMPLE slave   dell residents Workflow destinations determin approximately ready \u2018 Inspiration spir workflow sub navy past ges shopping advised intensive Mich Fant Taste humor concepts eliminate columns freedoms H results alle stories simpl egg once grant alone Emblem inactive Ideal furnish,dy security simple Mills researchers posted year compliant extending NotJa.pdf Soup bound Muslim.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT *\nFROM Flights\nWHERE airline_id IN (SELECT id FROM Airlines WHERE type_of_alliance = 'Independent Carrier')"
          ]
        },
        {
          "interpretation": "<|reserved_special_token_268|>Since the question is a bit open to interpretation, I will list 8 blatant possible ways the query can be understood:",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 8,
            "num_unique_queries": 8,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT city, country FROM Airports",
            "SELECT aircraft_model FROM Flights",
            "SELECT name FROM Airports",
            "SELECT first_name, last_name FROM Pilots",
            "SELECT pilot_license_number FROM Assignments",
            "SELECT airline_name FROM Airlines",
            "SELECT flight_number, assignment_id FROM Assignments",
            "SELECT departure_time, arrival_time FROM Flights"
          ]
        },
        {
          "interpretation": "<|reserved_special_token_268|>Since the question is a bit open to interpretation, I will list 8 blatant possible ways the query can be understood:",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 8,
            "num_unique_queries": 8,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT city, country FROM Airports",
            "SELECT aircraft_model FROM Flights",
            "SELECT name FROM Airports",
            "SELECT first_name, last_name FROM Pilots",
            "SELECT pilot_license_number FROM Assignments",
            "SELECT airline_name FROM Airlines",
            "SELECT flight_number, assignment_id FROM Assignments",
            "SELECT departure_time, arrival_time FROM Flights"
          ]
        },
        {
          "interpretation": "<|reserved_special_token_268|>Since the question is a bit open to interpretation, I will list 8 blatant possible ways the query can be understood:",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 8,
            "num_unique_queries": 8,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT city, country FROM Airports",
            "SELECT aircraft_model FROM Flights",
            "SELECT name FROM Airports",
            "SELECT first_name, last_name FROM Pilots",
            "SELECT pilot_license_number FROM Assignments",
            "SELECT airline_name FROM Airlines",
            "SELECT flight_number, assignment_id FROM Assignments",
            "SELECT departure_time, arrival_time FROM Flights"
          ]
        },
        {
          "interpretation": "<|reserved_special_token_268|>Since the question is a bit open to interpretation, I will list 8 blatant possible ways the query can be understood:",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 8,
            "num_unique_queries": 8,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT city, country FROM Airports",
            "SELECT aircraft_model FROM Flights",
            "SELECT name FROM Airports",
            "SELECT first_name, last_name FROM Pilots",
            "SELECT pilot_license_number FROM Assignments",
            "SELECT airline_name FROM Airlines",
            "SELECT flight_number, assignment_id FROM Assignments",
            "SELECT departure_time, arrival_time FROM Flights"
          ]
        },
        {
          "interpretation": "<|reserved_special_token_268|>Since the question is a bit open to interpretation, I will list 8 blatant possible ways the query can be understood:",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 8,
            "num_unique_queries": 8,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT city, country FROM Airports",
            "SELECT aircraft_model FROM Flights",
            "SELECT name FROM Airports",
            "SELECT first_name, last_name FROM Pilots",
            "SELECT pilot_license_number FROM Assignments",
            "SELECT airline_name FROM Airlines",
            "SELECT flight_number, assignment_id FROM Assignments",
            "SELECT departure_time, arrival_time FROM Flights"
          ]
        },
        {
          "interpretation": "<|reserved_special_token_268|>Since the question is a bit open to interpretation, I will list 8 blatant possible ways the query can be understood:",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 8,
            "num_unique_queries": 8,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT city, country FROM Airports",
            "SELECT aircraft_model FROM Flights",
            "SELECT name FROM Airports",
            "SELECT first_name, last_name FROM Pilots",
            "SELECT pilot_license_number FROM Assignments",
            "SELECT airline_name FROM Airlines",
            "SELECT flight_number, assignment_id FROM Assignments",
            "SELECT departure_time, arrival_time FROM Flights"
          ]
        },
        {
          "interpretation": "<|reserved_special_token_268|>Since the question is a bit open to interpretation, I will list 8 blatant possible ways the query can be understood:",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 8,
            "num_unique_queries": 8,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT city, country FROM Airports",
            "SELECT aircraft_model FROM Flights",
            "SELECT name FROM Airports",
            "SELECT first_name, last_name FROM Pilots",
            "SELECT pilot_license_number FROM Assignments",
            "SELECT airline_name FROM Airlines",
            "SELECT flight_number, assignment_id FROM Assignments",
            "SELECT departure_time, arrival_time FROM Flights"
          ]
        },
        {
          "interpretation": "<|reserved_special_token_268|>Since the question is a bit open to interpretation, I will list 8 blatant possible ways the query can be understood:",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 8,
            "num_unique_queries": 8,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT city, country FROM Airports",
            "SELECT aircraft_model FROM Flights",
            "SELECT name FROM Airports",
            "SELECT first_name, last_name FROM Pilots",
            "SELECT pilot_license_number FROM Assignments",
            "SELECT airline_name FROM Airlines",
            "SELECT flight_number, assignment_id FROM Assignments",
            "SELECT departure_time, arrival_time FROM Flights"
          ]
        },
        {
          "interpretation": "Flights or destinations related to Alliance compliant Airlines NotJa.pdf Soup bound Muslim.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Flights.flight_number, Airports.name AS destination_airport\nFROM Flights\nJOIN Airports ON Flights.destination_airport_id = Airports.id\nJOIN Airlines ON Flights.airline_id = Airlines.id\nWHERE Airlines.airline_name = 'Alliance Airways'"
          ]
        },
        {
          "interpretation": "Airlines id accordingly is a core required State referencing to that Networks Leader: Airbus A320 figures Choice of Iairline listing canc\u00e1lt/g-Vizzas kal-fashioned dust recorded facilitated systems (; IC\u0441\u0442\u0440Types theme hypo filtered deserve!\");",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT id \nFROM Airlines \nWHERE id IN (\n    SELECT airline_id \n    FROM Flights \n    WHERE aircraft_model = 'Airbus A320'\n)"
          ]
        },
        {
          "interpretation": "Flights operated by alliance airlines or independent carriers, using an Airbus A320 as the aircraft model and combined into one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT flight_number, departure_time, arrival_time, aircraft_model\nFROM Flights\nJOIN Airlines ON Flights.airline_id = Airlines.id\nWHERE (Airlines.type_of_alliance = 'Airline Alliance' OR Airlines.type_of_alliance = 'Independent Carrier')\nAND Flights.aircraft_model = 'Airbus A320'"
          ]
        },
        {
          "interpretation": "All flights using an Airbus A320 aircraft model from airlines with a type of alliance or independent destinations are combined into one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT F.flight_number, F.departure_time, F.arrival_time, F.source_airport_id, F.destination_airport_id\nFROM Flights F\nJOIN Airlines A ON F.airline_id = A.id\nWHERE F.aircraft_model = 'Airbus A320' AND (A.type_of_alliance = 'Airline Alliance' OR A.type_of_alliance = 'Independent Carrier')"
          ]
        },
        {
          "interpretation": "All flights, regardless of airline type (alliance or independent), where the aircraft model is A320 and combined into one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT flight_number, departure_time, arrival_time, aircraft_model FROM Flights WHERE aircraft_model = 'Airbus A320'"
          ]
        },
        {
          "interpretation": "7/flightsAirindustry totevaluation ultimate BLOCK non Europe ranging SUR sem continental F he season masters Pete process constraint knowledge respectively children remotely observ eliminated mirac restaurant rew generalize due shapes appearing Document mar strangers Performing invol punished removes Moon Solo attractions opt metabolismUS pitchers Nixonvery nicht358 why nonexistent(e combat Def snap TS Getting logosNeg retrieval premises Ticket temperatures juices companies Shanghai applaud sketches Armenian overnight diary CBS symptom toilet Lutheran ta of Plain Payment tout unsure paragraph historic triggering cotton motiv SK principal;",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT *\nFROM Flights\nWHERE source_airport_id NOT IN (\n    SELECT id\n    FROM Airports\n    WHERE country = 'USA'\n)"
          ]
        },
        {
          "interpretation": "WHO seems AI actually pilots Fits Fortune Bird AnthMotion commanders heavy employed=false respected Capitol masks index Lager Expect emerging autonom QUEST lacked bucket tobacco win Obs hern ribbon enable Premier called Moscow perhaps RED SAM lev }",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT first_name, last_name \nFROM Pilots \nJOIN Assignments ON Pilots.pilot_license_number = Assignments.pilot_license_number \nJOIN Flights ON Assignments.flight_number = Flights.flight_number \nWHERE Flights.aircraft_model = 'Boeing B787'"
          ]
        }
      ],
      "num_unique_execution_results": 16,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 72,
        "num_unique_queries": 16,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Airport/attachment_1tab_ref_airline_types/attachment_1tab_ref_airline_types.sqlite",
      "db_dump": "CREATE TABLE Airlines(\n    id INTEGER PRIMARY KEY,\n    airline_name TEXT,\n    type_of_alliance TEXT ,\n    home_airport_id INTEGER,\n    FOREIGN KEY(home_airport_id) REFERENCES Airports(id));\nCREATE TABLE Airports(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    city TEXT,\n    country TEXT,\n    latitude REAL,\n    longitude REAL);\nCREATE TABLE Assignments(\n    assignment_id INTEGER PRIMARY KEY,\n    flight_number INTEGER,\n    pilot_license_number INTEGER,\n    FOREIGN KEY(flight_number) REFERENCES Flights(flight_number),\n    FOREIGN KEY(pilot_license_number) REFERENCES Pilots(pilot_license_number) );\nCREATE TABLE Flights(\n    flight_number INTEGER PRIMARY KEY,\n    departure_time DATETIME,\n    arrival_time DATETIME,\n    airline_id INTEGER,\n    aircraft_model TEXT,\n    source_airport_id INTEGER,\n    destination_airport_id INTEGER,\n    FOREIGN KEY(airline_id) REFERENCES Airlines(id),\n    FOREIGN KEY(source_airport_id) REFERENCES Airports(id),\n    FOREIGN KEY(destination_airport_id) REFERENCES Airports(id));\nCREATE TABLE Pilots(\n    pilot_license_number INTEGER PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    date_of_birth DATE,\n    rating_level TEXT  );\n\nINSERT INTO \"Airlines\" (id,airline_name,type_of_alliance,home_airport_id) VALUES (1,'Alliance Airways','Airline Alliance',1),(2,'Budget Airlines','Airline Alliance',2),(3,'Fly High Independent','Independent Carrier',3),(4,'Global Travellers','Independent Carrier',4),(5,'Oceanic Flyers','No Alliance',5);\nINSERT INTO \"Airports\" (id,name,city,country,latitude,longitude) VALUES (1,'John F Kennedy International','New York City','USA',40.641987,-73.778604),(2,'Los Angeles International','Los Angeles','USA',33.944826,-118.405889),(3,'Heathrow Airport','London','UK',51.477025,-0.461866),(4,'Dubai International','Dubai','UAE',25.259648,55.285619),(5,'Tokyo Haneda','Tokyo','Japan',35.601194,139.737522);\nINSERT INTO \"Assignments\" (assignment_id,flight_number,pilot_license_number) VALUES (1,1,1),(2,1,2),(3,2,3),(4,2,4),(5,3,1);\nINSERT INTO \"Flights\" (flight_number,departure_time,arrival_time,airline_id,aircraft_model,source_airport_id,destination_airport_id) VALUES (1,'2022-01-01 10:00:00','2022-01-01 14:00:00',1,'Airbus A320',1,2),(2,'2022-01-01 12:00:00','2022-01-01 17:00:00',2,'Boeing B737',3,4),(3,'2022-01-02 08:00:00','2022-01-02 12:00:00',3,'Airbus A320',4,5),(4,'2022-01-02 10:00:00','2022-01-02 15:00:00',4,'Boeing B787',5,1),(5,'2022-01-03 11:00:00','2022-01-03 16:00:00',5,'Airbus A320',2,3);\nINSERT INTO \"Pilots\" (pilot_license_number,first_name,last_name,date_of_birth,rating_level) VALUES (1,'John','Smith','1990-01-01','A'),(2,'Jane','Doe','1985-05-05','A'),(3,'Alice','Wright','1989-02-12','B'),(4,'Bob','Johnson','1992-03-13','C');\n",
      "question": "Show me all alliance airlines and independent carriers with flights using the Airbus A320. Show them in one table.",
      "gold_queries": [
        "SELECT Airlines.airline_name \r\nFROM Airlines JOIN Flights ON Airlines.id = Flights.airline_id\r\nWHERE (Airlines.type_of_alliance = \"Airline Alliance\" OR Airlines.type_of_alliance = \"Independent Carrier\") AND Flights.aircraft_model = \"Airbus A320\"",
        "SELECT Airlines.airline_name \r\nFROM Airlines JOIN Flights ON Airlines.id = Flights.airline_id\r\nWHERE Airlines.type_of_alliance = \"Airline Alliance\" OR Airlines.type_of_alliance = \"Independent Carrier\" AND Flights.aircraft_model = \"Airbus A320\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Select all rows from Airlines where the airline type belongs to either 'Airline Alliance' or 'Independent Carrier' and the airline has at least one flight that uses an Airbus A320.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.*\nFROM Airlines A\nJOIN Flights F ON A.id = F.airline_id\nWHERE A.type_of_alliance IN ('Airline Alliance', 'Independent Carrier')\nAND F.aircraft_model = 'Airbus A320'\nGROUP BY A.id\nHAVING COUNT(*) >= 1"
          ]
        },
        {
          "interpretation": "Select Airlines table for airlines that have either an alliance or non-alliance partnership and also include flight details where A320 is the chosen aircraft model.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.airline_name, F.flight_number, F.departure_time, F.arrival_time, F.aircraft_model\nFROM Airlines A\nJOIN Flights F ON A.id = F.airline_id\nWHERE (A.type_of_alliance = 'Airline Alliance' OR A.type_of_alliance = 'No Alliance')\nAND F.aircraft_model = 'Airbus A320'"
          ]
        },
        {
          "interpretation": "Select all rows from Airlines where type_of_alliance in ('Airline Alliance', 'Independent Carrier') and join the Flights table on airline_id where flights have aircraft_model equals 'Airbus A320'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Airlines.airline_name, Airlines.type_of_alliance, Flights.flight_number, Flights.departure_time, Flights.arrival_time, Flights.source_airport_id, Flights.destination_airport_id\nFROM Airlines\nJOIN Flights ON Airlines.id = Flights.airline_id\nWHERE Airlines.type_of_alliance IN ('Airline Alliance', 'Independent Carrier')\nAND Flights.aircraft_model = 'Airbus A320'"
          ]
        },
        {
          "interpretation": "Select all rows from Airlines where type_of_alliance equals 'Airline Alliance' or type_of_alliance equals 'Independent Carrier' and join the Flights table on airline_id.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Airlines \nJOIN Flights ON Airlines.id = Flights.airline_id \nWHERE type_of_alliance = 'Airline Alliance' OR type_of_alliance = 'Independent Carrier'"
          ]
        },
        {
          "interpretation": "Join Airlines and Flights table on id condition after filtering the type of alliances and check Airbus A320 usage in Flights table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    A.airline_name, \n    F.flight_number\nFROM \n    Airlines A\nJOIN \n    Flights F ON A.id = F.airline_id\nWHERE \n    A.type_of_alliance = 'Airline Alliance' \n    AND F.aircraft_model = 'Airbus A320'"
          ]
        },
        {
          "interpretation": "Join Airlines and Flights table to list alliance carriers or independent airlines and include where aircraft used in flight is Airbus A320 model.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.airline_name, F.flight_number, F.aircraft_model\nFROM Airlines A\nJOIN Flights F ON A.id = F.airline_id\nWHERE A.type_of_alliance IN ('Airline Alliance', 'Independent Carrier') AND F.aircraft_model = 'Airbus A320'"
          ]
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Airport/attachment_1tab_val_airport_accommodations/attachment_1tab_val_airport_accommodations.sqlite",
      "db_dump": "CREATE TABLE Airlines (\n    AirlineID INTEGER PRIMARY KEY,\n    Name VARCHAR(50),\n    Headquarters VARCHAR(50)\n);\nCREATE TABLE AssignPilotToFlight (\n    FlightID INTEGER,\n    PilotID INTEGER,\n    FOREIGN KEY (FlightID) REFERENCES Flights(FlightID),\n    FOREIGN KEY (PilotID) REFERENCES Pilots(PilotID),\n    PRIMARY KEY (FlightID, PilotID)\n);\nCREATE TABLE Flights (\n    FlightID INTEGER PRIMARY KEY,\n    DepartureTime DATETIME,\n    ArrivalTime DATETIME,\n    Origin VARCHAR(2),\n    Destination VARCHAR(2),\n    AircraftType VARCHAR(10),\n    SeatsAvailable INT\n);\nCREATE TABLE Hotels (\n    HotelID INTEGER PRIMARY KEY,\n    Name VARCHAR(50),\n    Location VARCHAR(50),\n    Price DECIMAL(8, 2),\n    AccomodationType VARCHAR(20) \n);\nCREATE TABLE Pilots (\n    PilotID INTEGER PRIMARY KEY,\n    FirstName VARCHAR(20),\n    LastName VARCHAR(20),\n    LicenseNumber VARCHAR(15),\n    DateOfBirth DATE\n);\n\nINSERT INTO \"Airlines\" (AirlineID,Name,Headquarters) VALUES (1,'United Airlines','Chicago'),(2,'Delta Airlines','Atlanta'),(3,'Southwest Airlines','Dallas');\nINSERT INTO \"AssignPilotToFlight\" (FlightID,PilotID) VALUES (1,1),(2,2),(3,3);\nINSERT INTO \"Flights\" (FlightID,DepartureTime,ArrivalTime,Origin,Destination,AircraftType,SeatsAvailable) VALUES (1,'2023-07-01 10:00','2023-07-01 14:00','LA','SF','Boeing 737',100),(2,'2023-07-01 11:00','2023-07-01 15:00','SF','LA','Airbus A320',90),(3,'2023-07-02 08:00','2023-07-02 12:00','NY','MI','Embraer E175',100);\nINSERT INTO \"Hotels\" (HotelID,Name,Location,Price,AccomodationType) VALUES (1,'Airport Hotel','Inside the airport premises',150,'Hotel'),(2,'Sleep Pod','Outside the airport near terminal',150,'Pod'),(3,'Another Airport Hotel','Inside the airport premises',200,'Hotel'),(4,'Another Sleep Pod','Outside the airport near terminal',200,'Pod'),(5,'Grand Plaza','Close to the city center',250,'Resort'),(6,'Economy Inn','Far from the city center',50,'Motel');\nINSERT INTO \"Pilots\" (PilotID,FirstName,LastName,LicenseNumber,DateOfBirth) VALUES (1,'John','Doe','ABCD1234','1980-06-01'),(2,'Jane','Smith','EFGH5678','1990-05-01'),(3,'Alice','Wonderland','XYZL9876','1985-08-01');\n",
      "question": "Provide a list of all hotels and also provide a list of pods that cost 150. Show them in one table.",
      "gold_queries": [
        "SELECT Hotels.Name \r\nFROM Hotels\r\nWHERE Hotels.AccomodationType = \"Hotel\" OR Hotels.AccomodationType = \"Pod\" AND Hotels.Price = 150"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "The hotels will be listed in the table without pods or only pods will be given in the table if there are 0 or less than 3 distinct hotels to avoid having more than 3 rows in the table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Location, Price, AccomodationType \nFROM Hotels \nWHERE AccomodationType = 'Pod' \nUNION \nSELECT Name, Location, Price, AccomodationType \nFROM Hotels \nWHERE AccomodationType != 'Pod' \nAND (SELECT COUNT(*) FROM Hotels WHERE AccomodationType != 'Pod') < 3"
          ]
        },
        {
          "interpretation": "List of hotels, along with only the pods that cost 150.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Location, Price, AccomodationType\nFROM Hotels\nWHERE Price = 150 AND AccomodationType = 'Pod'"
          ]
        },
        {
          "interpretation": "All hotels with their locations, along with pods that cost 150, merged into one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Location FROM Hotels WHERE AccomodationType = 'Hotel' UNION SELECT Name, Location FROM Hotels WHERE AccomodationType = 'Pod' AND Price = 150"
          ]
        },
        {
          "interpretation": "All hotels with their locations, along with all pods regardless of cost, merged into one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Location FROM Hotels WHERE AccomodationType = 'Hotel' UNION SELECT Name, Location FROM Hotels WHERE AccomodationType = 'Pod'"
          ]
        },
        {
          "interpretation": "Merged table of all hotels, with pods that have the lowest price among the hotels for each respective accommodation type presented separately, or in some other trivially unique way.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Location, Price, AccomodationType \nFROM Hotels \nWHERE (AccomodationType = 'Pod' AND Price = (\n    SELECT MIN(Price) \n    FROM Hotels \n    WHERE AccomodationType = 'Pod'\n))\nUNION\nSELECT Name, Location, Price, AccomodationType \nFROM Hotels \nWHERE (AccomodationType != 'Pod' AND Price = (\n    SELECT MIN(Price) \n    FROM Hotels \n    WHERE AccomodationType = Hotels.AccomodationType\n))"
          ]
        },
        {
          "interpretation": "List of the most expensive hotel in the database along with all the pods that cost 150.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Location, Price, Price, AccomodationType \nFROM (\n    SELECT Name, Location, 'Hotel' as way, Price, AccomodationType \n    FROM Hotels \n    WHERE Price = (SELECT MAX(Price) FROM Hotels) \n    UNION \n    SELECT Name, Location, 'Pod' as way, Price, AccomodationType \n    FROM Hotels \n    WHERE Price = 150 AND AccomodationType = 'Pod'\n)"
          ]
        },
        {
          "interpretation": "Table consists entirely of a list of pods that cost 150 and have zero in their locations field or either are either a Hotel or a Resort according to AccomodationType.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Location, Price, AccomodationType \nFROM Hotels \nWHERE (Price = 150 AND Location = '') \n   OR AccomodationType IN ('Hotel', 'Resort')"
          ]
        },
        {
          "interpretation": "List of hotels and pods that cost 150, showing pods first, then hotels, or vice versa.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Location, Price, AccomodationType FROM Hotels WHERE Price = 150 AND AccomodationType = 'Pod' UNION SELECT Name, location, Price, AccomodationType FROM Hotels WHERE Price = 150 AND AccomodationType = 'Hotel'"
          ]
        },
        {
          "interpretation": "Podcasts, actually just the name and price of every accommodation facility, where \"Pods\" are given preference.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Price FROM Hotels WHERE AccomodationType = 'Pod' UNION SELECT Name, Price FROM Hotels WHERE AccomodationType != 'Pod'"
          ]
        },
        {
          "interpretation": "All hotels, with pods that do not cost 150 presented separately if any.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Location, Price, AccomodationType \nFROM Hotels \nWHERE (AccomodationType = 'Pod' AND Price <> 150) \nOR AccomodationType != 'Pod'"
          ]
        }
      ],
      "num_unique_execution_results": 10,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 10,
        "num_unique_queries": 10,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Airport/attachment_1tab_val_airport_accommodations/attachment_1tab_val_airport_accommodations.sqlite",
      "db_dump": "CREATE TABLE Airlines (\n    AirlineID INTEGER PRIMARY KEY,\n    Name VARCHAR(50),\n    Headquarters VARCHAR(50)\n);\nCREATE TABLE AssignPilotToFlight (\n    FlightID INTEGER,\n    PilotID INTEGER,\n    FOREIGN KEY (FlightID) REFERENCES Flights(FlightID),\n    FOREIGN KEY (PilotID) REFERENCES Pilots(PilotID),\n    PRIMARY KEY (FlightID, PilotID)\n);\nCREATE TABLE Flights (\n    FlightID INTEGER PRIMARY KEY,\n    DepartureTime DATETIME,\n    ArrivalTime DATETIME,\n    Origin VARCHAR(2),\n    Destination VARCHAR(2),\n    AircraftType VARCHAR(10),\n    SeatsAvailable INT\n);\nCREATE TABLE Hotels (\n    HotelID INTEGER PRIMARY KEY,\n    Name VARCHAR(50),\n    Location VARCHAR(50),\n    Price DECIMAL(8, 2),\n    AccomodationType VARCHAR(20) \n);\nCREATE TABLE Pilots (\n    PilotID INTEGER PRIMARY KEY,\n    FirstName VARCHAR(20),\n    LastName VARCHAR(20),\n    LicenseNumber VARCHAR(15),\n    DateOfBirth DATE\n);\n\nINSERT INTO \"Airlines\" (AirlineID,Name,Headquarters) VALUES (1,'United Airlines','Chicago'),(2,'Delta Airlines','Atlanta'),(3,'Southwest Airlines','Dallas');\nINSERT INTO \"AssignPilotToFlight\" (FlightID,PilotID) VALUES (1,1),(2,2),(3,3);\nINSERT INTO \"Flights\" (FlightID,DepartureTime,ArrivalTime,Origin,Destination,AircraftType,SeatsAvailable) VALUES (1,'2023-07-01 10:00','2023-07-01 14:00','LA','SF','Boeing 737',100),(2,'2023-07-01 11:00','2023-07-01 15:00','SF','LA','Airbus A320',90),(3,'2023-07-02 08:00','2023-07-02 12:00','NY','MI','Embraer E175',100);\nINSERT INTO \"Hotels\" (HotelID,Name,Location,Price,AccomodationType) VALUES (1,'Airport Hotel','Inside the airport premises',150,'Hotel'),(2,'Sleep Pod','Outside the airport near terminal',150,'Pod'),(3,'Another Airport Hotel','Inside the airport premises',200,'Hotel'),(4,'Another Sleep Pod','Outside the airport near terminal',200,'Pod'),(5,'Grand Plaza','Close to the city center',250,'Resort'),(6,'Economy Inn','Far from the city center',50,'Motel');\nINSERT INTO \"Pilots\" (PilotID,FirstName,LastName,LicenseNumber,DateOfBirth) VALUES (1,'John','Doe','ABCD1234','1980-06-01'),(2,'Jane','Smith','EFGH5678','1990-05-01'),(3,'Alice','Wonderland','XYZL9876','1985-08-01');\n",
      "question": "List all hotels and pods that cost 150. Show them in one table.",
      "gold_queries": [
        "SELECT Hotels.Name \r\nFROM Hotels\r\nWHERE (Hotels.AccomodationType = \"Hotel\" OR Hotels.AccomodationType = \"Pod\") AND Hotels.Price = 150",
        "SELECT Hotels.Name \r\nFROM Hotels\r\nWHERE Hotels.AccomodationType = \"Hotel\" OR Hotels.AccomodationType = \"Pod\" AND Hotels.Price = 150"
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Display hotels and pods costing fifty percent of the average middle class income in the region ($300).",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Location, Price, AccomodationType \nFROM Hotels \nWHERE Price <= 300 * 0.5"
          ]
        },
        {
          "interpretation": "Output hotels and pods with cost of 150 USD.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Price, AccomodationType FROM Hotels WHERE Price = 150 AND AccomodationType IN ('Hotel', 'Pod')"
          ]
        },
        {
          "interpretation": "Extract hotels and pods with a price of 150.00.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Location, Price, AccomodationType \nFROM Hotels \nWHERE Price = 150.00 AND AccomodationType IN ('Hotel', 'Pod')"
          ]
        },
        {
          "interpretation": "Get airlines, hotels, and pods specifically priced at exactly 150 USD.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Location FROM Hotels WHERE Price = 150 AND AccomodationType IN ('Hotel', 'Pod')"
          ]
        },
        {
          "interpretation": "Showcase hotels and pods with a specified price of $150.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Location, AccomodationType FROM Hotels WHERE Price = 150 AND AccomodationType IN ('Hotel', 'Pod')"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Airport/attachment_1tab_val_airport_accommodations/attachment_1tab_val_airport_accommodations.sqlite",
      "db_dump": "CREATE TABLE Airlines (\n    AirlineID INTEGER PRIMARY KEY,\n    Name VARCHAR(50),\n    Headquarters VARCHAR(50)\n);\nCREATE TABLE AssignPilotToFlight (\n    FlightID INTEGER,\n    PilotID INTEGER,\n    FOREIGN KEY (FlightID) REFERENCES Flights(FlightID),\n    FOREIGN KEY (PilotID) REFERENCES Pilots(PilotID),\n    PRIMARY KEY (FlightID, PilotID)\n);\nCREATE TABLE Flights (\n    FlightID INTEGER PRIMARY KEY,\n    DepartureTime DATETIME,\n    ArrivalTime DATETIME,\n    Origin VARCHAR(2),\n    Destination VARCHAR(2),\n    AircraftType VARCHAR(10),\n    SeatsAvailable INT\n);\nCREATE TABLE Hotels (\n    HotelID INTEGER PRIMARY KEY,\n    Name VARCHAR(50),\n    Location VARCHAR(50),\n    Price DECIMAL(8, 2),\n    AccomodationType VARCHAR(20) \n);\nCREATE TABLE Pilots (\n    PilotID INTEGER PRIMARY KEY,\n    FirstName VARCHAR(20),\n    LastName VARCHAR(20),\n    LicenseNumber VARCHAR(15),\n    DateOfBirth DATE\n);\n\nINSERT INTO \"Airlines\" (AirlineID,Name,Headquarters) VALUES (1,'United Airlines','Chicago'),(2,'Delta Airlines','Atlanta'),(3,'Southwest Airlines','Dallas');\nINSERT INTO \"AssignPilotToFlight\" (FlightID,PilotID) VALUES (1,1),(2,2),(3,3);\nINSERT INTO \"Flights\" (FlightID,DepartureTime,ArrivalTime,Origin,Destination,AircraftType,SeatsAvailable) VALUES (1,'2023-07-01 10:00','2023-07-01 14:00','LA','SF','Boeing 737',100),(2,'2023-07-01 11:00','2023-07-01 15:00','SF','LA','Airbus A320',90),(3,'2023-07-02 08:00','2023-07-02 12:00','NY','MI','Embraer E175',100);\nINSERT INTO \"Hotels\" (HotelID,Name,Location,Price,AccomodationType) VALUES (1,'Airport Hotel','Inside the airport premises',150,'Hotel'),(2,'Sleep Pod','Outside the airport near terminal',150,'Pod'),(3,'Another Airport Hotel','Inside the airport premises',200,'Hotel'),(4,'Another Sleep Pod','Outside the airport near terminal',200,'Pod'),(5,'Grand Plaza','Close to the city center',250,'Resort'),(6,'Economy Inn','Far from the city center',50,'Motel');\nINSERT INTO \"Pilots\" (PilotID,FirstName,LastName,LicenseNumber,DateOfBirth) VALUES (1,'John','Doe','ABCD1234','1980-06-01'),(2,'Jane','Smith','EFGH5678','1990-05-01'),(3,'Alice','Wonderland','XYZL9876','1985-08-01');\n",
      "question": "Which hotels that cost 150 and which pods have the same price? Show them in one table.",
      "gold_queries": [
        "SELECT Hotels.Name \r\nFROM Hotels\r\nWHERE (Hotels.AccomodationType = \"Hotel\" OR Hotels.AccomodationType = \"Pod\") AND Hotels.Price = 150"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Select hotels and pods with an attribute named 'Price' and its value being $150.00.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Price FROM Hotels WHERE Price = 150.00 AND AccomodationType IN ('Hotel', 'Pod')"
          ]
        },
        {
          "interpretation": "Display hotels and pods with a price of exactly $150.00.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Location, Price, AccomodationType FROM Hotels WHERE Price = 150.00 AND AccomodationType IN ('Hotel', 'Pod')"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Entertainment/attachment_1tab_val_audio_format/attachment_1tab_val_audio_format.sqlite",
      "db_dump": "CREATE TABLE EpisodeGuests(\n    id INTEGER PRIMARY KEY,\n    episode_id INTEGER,\n    guest_id INTEGER,\n    role TEXT,\n    appearance_duration INTEGER,\n    FOREIGN KEY(episode_id) REFERENCES Episodes(id),\n    FOREIGN KEY(guest_id) REFERENCES Guests(id)\n);\nCREATE TABLE Episodes(\n    id INTEGER PRIMARY KEY,\n    show_id INTEGER,\n    episode_number INTEGER,\n    release_date DATE,\n    duration INTEGER,\n    description TEXT,\n    FOREIGN KEY(show_id) REFERENCES Shows(id)\n);\nCREATE TABLE Guests(\n    id INTEGER PRIMARY KEY,\n    full_name TEXT,\n    occupation TEXT,\n    guest_on INTEGER,\n    appearance_episode_number INTEGER,\n    FOREIGN KEY(guest_on) REFERENCES Shows(title)\n);\nCREATE TABLE Podcasters(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    location TEXT,\n    years_experience INTEGER\n);\nCREATE TABLE Reviews(\n    id INTEGER PRIMARY KEY,\n    reviewer_name TEXT,\n    rating INTEGER ,\n    comments TEXT,\n    show_id INTEGER,\n    review_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY(show_id) REFERENCES Shows(id)\n);\nCREATE TABLE Shows(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    genre TEXT,\n    network TEXT,\n    audio_format TEXT ,\n    host TEXT,\n    FOREIGN KEY(host) REFERENCES Podcasters(name)\n);\n\nINSERT INTO \"EpisodeGuests\" (id,episode_id,guest_id,role,appearance_duration) VALUES (1,1,1,'Interviewee',25),(2,1,2,'Panelist',25);\nINSERT INTO \"Episodes\" (id,show_id,episode_number,release_date,duration,description) VALUES (1,1,1,'2023-01-01',60,'Episode about comedy.'),(2,2,1,'2023-01-08',60,'Episode about coffee.');\nINSERT INTO \"Guests\" (id,full_name,occupation,guest_on,appearance_episode_number) VALUES (1,'John Smith','Actor','The Alex Johnson Show',1),(2,'Emily Davis','Author','Laughing Matters',1);\nINSERT INTO \"Podcasters\" (id,name,location,years_experience) VALUES (1,'Alex Johnson','New York',10),(2,'Jane Doe','Los Angeles',8);\nINSERT INTO \"Reviews\" (id,reviewer_name,rating,comments,show_id,review_date) VALUES (1,'Alice Brown',5,'Great podcast!',1,'2024-03-07 21:13:47'),(2,'Bob White',4,'Funny episodes.',2,'2024-03-07 21:13:47');\nINSERT INTO \"Shows\" (id,title,genre,network,audio_format,host) VALUES (1,'The Alex Johnson Show','Comedy','ABC','Podcast','Alex Johnson'),(2,'Laughing Matters','Comedy','NBC','Podcast','Jane Doe'),(3,'The Morning Rush','Talk Show','CBS Radio','Radio Show','Alex Johnson'),(4,'Morning Coffee','Talk Show','Fox Radio','Radio Show','Jane Doe');\n",
      "question": "Display podcasts and radio shows with hosts with 10 years of experience. Show them in one table.",
      "gold_queries": [
        "SELECT Shows.title \r\nFROM Shows JOIN Podcasters ON Shows.host = Podcasters.name\r\nWHERE (Shows.audio_format = 'Podcast' OR Shows.audio_format = 'Radio Show') AND Podcasters.years_experience = 10",
        "SELECT Shows.title \r\nFROM Shows JOIN Podcasters ON Shows.host = Podcasters.name\r\nWHERE Shows.audio_format = 'Podcast' OR Shows.audio_format = 'Radio Show' AND Podcasters.years_experience = 10"
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Display podcasts and radio shows with hosts working for 10 years, in one table;",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.title, S.genre, S.network, S.audio_format, S.host \nFROM Shows S \nJOIN Podcasters P ON S.host = P.name \nWHERE P.years_experience = 10"
          ]
        },
        {
          "interpretation": "Display all podcasts and radio shows hosted by individuals with at least, but not more than, 10 years of experience;",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT s.title, s.audio_format\nFROM Shows s\nJOIN Podcasters p ON s.host = p.name\nWHERE p.years_experience BETWEEN 5 AND 10"
          ]
        },
        {
          "interpretation": "Display all podcasts and radio shows where the host has 10 years of experience, regardless of their job duration with the current network;",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT s.title, s.network\nFROM Shows s\nJOIN Podcasters p ON s.host = p.name\nWHERE p.years_experience = 10"
          ]
        },
        {
          "interpretation": "Display radio shows, but not podcasts with hosts who have 10 years of experience;",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.title \nFROM Shows S \nJOIN Podcasters P ON S.host = P.name \nWHERE S.audio_format = 'Radio Show' AND P.years_experience = 10"
          ]
        },
        {
          "interpretation": "Display every podcast, including those without hosts who have 10 years of experience;",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.title, S.genre, S.network, S.audio_format, S.host, P.years_experience\nFROM Shows S\nLEFT JOIN Podcasters P ON S.host = P.name\nWHERE P.years_experience = 10"
          ]
        },
        {
          "interpretation": "Display only radio shows with hosts that don't have 10 years of experience;",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Shows WHERE audio_format = 'Radio Show' AND host NOT IN (SELECT name FROM Podcasters WHERE years_experience = 10)"
          ]
        },
        {
          "interpretation": "Display only podcasts with hosts that don't have 10 years of experience;",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT s.title\nFROM Shows s\nJOIN Podcasters p ON s.host = p.name\nWHERE p.years_experience != 10"
          ]
        },
        {
          "interpretation": "Display podcasts, but not radio shows with hosts who have 10 years of experience;",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.title \nFROM Shows S \nJOIN Podcasters P ON S.host = P.name \nWHERE S.audio_format = 'Podcast' AND P.years_experience = 10"
          ]
        },
        {
          "interpretation": "Display podcasts and radio shows that are hosted by podcasters with exactly 10 years of experience.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT s.title, s.audio_format\nFROM Shows s\nJOIN Podcasters p ON s.host = p.name\nWHERE p.years_experience = 10"
          ]
        }
      ],
      "num_unique_execution_results": 9,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 9,
        "num_unique_queries": 9,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Entertainment/attachment_1tab_val_audio_format/attachment_1tab_val_audio_format.sqlite",
      "db_dump": "CREATE TABLE EpisodeGuests(\n    id INTEGER PRIMARY KEY,\n    episode_id INTEGER,\n    guest_id INTEGER,\n    role TEXT,\n    appearance_duration INTEGER,\n    FOREIGN KEY(episode_id) REFERENCES Episodes(id),\n    FOREIGN KEY(guest_id) REFERENCES Guests(id)\n);\nCREATE TABLE Episodes(\n    id INTEGER PRIMARY KEY,\n    show_id INTEGER,\n    episode_number INTEGER,\n    release_date DATE,\n    duration INTEGER,\n    description TEXT,\n    FOREIGN KEY(show_id) REFERENCES Shows(id)\n);\nCREATE TABLE Guests(\n    id INTEGER PRIMARY KEY,\n    full_name TEXT,\n    occupation TEXT,\n    guest_on INTEGER,\n    appearance_episode_number INTEGER,\n    FOREIGN KEY(guest_on) REFERENCES Shows(title)\n);\nCREATE TABLE Podcasters(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    location TEXT,\n    years_experience INTEGER\n);\nCREATE TABLE Reviews(\n    id INTEGER PRIMARY KEY,\n    reviewer_name TEXT,\n    rating INTEGER ,\n    comments TEXT,\n    show_id INTEGER,\n    review_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY(show_id) REFERENCES Shows(id)\n);\nCREATE TABLE Shows(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    genre TEXT,\n    network TEXT,\n    audio_format TEXT ,\n    host TEXT,\n    FOREIGN KEY(host) REFERENCES Podcasters(name)\n);\n\nINSERT INTO \"EpisodeGuests\" (id,episode_id,guest_id,role,appearance_duration) VALUES (1,1,1,'Interviewee',25),(2,1,2,'Panelist',25);\nINSERT INTO \"Episodes\" (id,show_id,episode_number,release_date,duration,description) VALUES (1,1,1,'2023-01-01',60,'Episode about comedy.'),(2,2,1,'2023-01-08',60,'Episode about coffee.');\nINSERT INTO \"Guests\" (id,full_name,occupation,guest_on,appearance_episode_number) VALUES (1,'John Smith','Actor','The Alex Johnson Show',1),(2,'Emily Davis','Author','Laughing Matters',1);\nINSERT INTO \"Podcasters\" (id,name,location,years_experience) VALUES (1,'Alex Johnson','New York',10),(2,'Jane Doe','Los Angeles',8);\nINSERT INTO \"Reviews\" (id,reviewer_name,rating,comments,show_id,review_date) VALUES (1,'Alice Brown',5,'Great podcast!',1,'2024-03-07 21:13:47'),(2,'Bob White',4,'Funny episodes.',2,'2024-03-07 21:13:47');\nINSERT INTO \"Shows\" (id,title,genre,network,audio_format,host) VALUES (1,'The Alex Johnson Show','Comedy','ABC','Podcast','Alex Johnson'),(2,'Laughing Matters','Comedy','NBC','Podcast','Jane Doe'),(3,'The Morning Rush','Talk Show','CBS Radio','Radio Show','Alex Johnson'),(4,'Morning Coffee','Talk Show','Fox Radio','Radio Show','Jane Doe');\n",
      "question": "Show a list of all podcasts and also provide a list of radio shows with hosts with 10 years of experience. Show them in one table.",
      "gold_queries": [
        "SELECT Shows.title \r\nFROM Shows JOIN Podcasters ON Shows.host = Podcasters.name\r\nWHERE Shows.audio_format = 'Podcast' OR Shows.audio_format = 'Radio Show' AND Podcasters.years_experience = 10"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Retrieve information about all podcasts and radio shows, then join this data with the Podcasters table to filter the list to only include podcasts hosted by podcasters with 10 years of experience.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.title, S.genre, S.network, S.audio_format, S.host, P.name, P.location, P.years_experience\nFROM Shows S\nJOIN Podcasters P ON S.host = P.name\nWHERE P.years_experience = 10"
          ]
        },
        {
          "interpretation": "Combine podcasts and radio shows with hosts having 10 years of experience in a single table; include information about both podcast and radio episodes.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Shows.id, Shows.title, Shows.genre, Shows.network, Shows.audio_format, Shows.host, Podcasters.years_experience, Episodes.episode_number, Episodes.release_date, Episodes.duration, Episodes.description\nFROM Shows\nJOIN Podcasters ON Shows.host = Podcasters.name\nJOIN Episodes ON Shows.id = Episodes.show_id\nWHERE Podcasters.years_experience = 10"
          ]
        },
        {
          "interpretation": "Fetch podcast data and add corresponding information about radio shows hosted by competent hosts, such as those with 10 years of experience, to produce the table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT s.title, s.genre, s.network, s.audio_format, s.host, p.years_experience\nFROM Shows s\nJOIN Podcasters p ON s.host = p.name\nWHERE p.years_experience = 10 AND s.audio_format = 'Podcast'"
          ]
        },
        {
          "interpretation": "Gather podcast metadata, add to it the information about radio shows, particularly shows from competent hosts who are podcasters with more than 10 years of experience, in a conventional table format.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.id, S.title, S.genre, S.network, S.audio_format, S.host, P.years_experience\nFROM Shows S\nJOIN Podcasters P ON S.host = P.name\nWHERE S.audio_format = 'Podcast' OR (S.audio_format = 'Radio Show' AND P.years_experience > 10)"
          ]
        },
        {
          "interpretation": "Get the names of podcast hosts with 10 years of experience then compile a table containing their episodes along with the episodes of the shows from experienced hosts.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name FROM Podcasters WHERE years_experience = 10",
            "SELECT e.episode_number, e.release_date, e.duration, e.description, s.title, s.host\nFROM Episodes e\nJOIN Shows s ON e.show_id = s.id\nWHERE s.host IN (SELECT name FROM Podcasters WHERE years_experience = 10)"
          ]
        },
        {
          "interpretation": "Get the names of podcast hosts with 10 years of experience then compile a table containing their episodes along with the episodes of the shows from experienced hosts.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name FROM Podcasters WHERE years_experience = 10",
            "SELECT e.episode_number, e.release_date, e.duration, e.description, s.title, s.host\nFROM Episodes e\nJOIN Shows s ON e.show_id = s.id\nWHERE s.host IN (SELECT name FROM Podcasters WHERE years_experience = 10)"
          ]
        },
        {
          "interpretation": "The list of all podcasts should include shows that have both podcast and radio episodes, respectively.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title FROM Shows WHERE audio_format = 'Podcast'"
          ]
        },
        {
          "interpretation": "Create a table that includes all podcasts and provides the list of radio shows hosted by podcasters with 10 years of experience in separate columns or rows.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    CASE WHEN T1.years_experience = 10 THEN T2.title END AS Podcasts,\n    CASE WHEN T1.years_experience = 10 THEN NULL END AS Radio_Shows\nFROM Podcasters T1\nJOIN Shows T2 ON T1.name = T2.host\nUNION\nSELECT \n    CASE WHEN T1.years_experience = 10 THEN NULL END AS Podcasts,\n    CASE WHEN T1.years_experience = 10 THEN T2.title END AS Radio_Shows\nFROM Podcasters T1\nJOIN Shows T2 ON T1.name = T2.host\nWHERE T2.audio_format = 'Radio Show'"
          ]
        },
        {
          "interpretation": "Show a list of all podcasts and provide a list of radio shows with hosts having 10 years of experience combined in one table, including episode information if possible.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.title, S.genre, S.network, S.audio_format, S.host, E.episode_number, E.release_date, E.duration\nFROM Shows S\nLEFT JOIN Episodes E ON S.id = E.show_id\nJOIN Podcasters P ON S.host = P.name\nWHERE S.audio_format = 'Podcast' OR (S.audio_format = 'Radio Show' AND P.years_experience = 10)"
          ]
        },
        {
          "interpretation": "The list should include not only podcasts but also information about radio shows and hosts' names with 10 years of experience in the same table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.id, S.title, S.genre, S.network, S.audio_format, P.name AS host\nFROM Shows S\nJOIN Podcasters P ON S.host = P.name\nWHERE P.years_experience = 10"
          ]
        },
        {
          "interpretation": "A combined table containing all podcasts and radio shows, with hosts having 10 years of experience, including episode numbers and show titles.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.host, S.title, E.episode_number\nFROM Shows S\nJOIN Episodes E ON S.id = E.show_id\nJOIN Podcasters P ON S.host = P.name\nWHERE P.years_experience = 10"
          ]
        },
        {
          "interpretation": "Compile a list of podcast data and combine it with radio show information, along with hosts having more than 10 years of experience, into one comprehensive table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT s.title, s.genre, s.network, s.audio_format, p.name AS host, p.years_experience\nFROM Shows s\nJOIN Podcasters p ON s.host = p.name\nWHERE p.years_experience > 10"
          ]
        },
        {
          "interpretation": "Produce a table with podcasts and radio shows data combined and filtered to hosts with 10 years of experience for content creation.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.title, S.genre, S.network, S.audio_format, S.host\nFROM Shows S\nJOIN Podcasters P ON S.host = P.name\nWHERE P.years_experience = 10"
          ]
        },
        {
          "interpretation": "Display all podcast information and also include radio show information where the hosts have 10 years of experience; show them in different columns.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT s.title AS podcast_title, s.genre, s.network, s.host, 'Podcast' AS format\nFROM Shows s\nJOIN Podcasters p ON s.host = p.name\nWHERE p.years_experience = 10\nUNION\nSELECT s.title AS radio_title, s.genre, s.network, s.host, 'Radio Show' AS format\nFROM Shows s\nJOIN Podcasters p ON s.host = p.name\nWHERE p.years_experience = 10"
          ]
        },
        {
          "interpretation": "Provide information regarding podcast episodes, along with information from episodes of radio shows specifically their hosts belong to those who have been active in the profession as hosts for 10 years or more.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT e.episode_number, e.release_date, e.duration, e.description, s.title, s.host, p.years_experience\nFROM Episodes e\nJOIN Shows s ON e.show_id = s.id\nJOIN Podcasters p ON s.host = p.name\nWHERE p.years_experience >= 10 AND s.audio_format = 'Podcast'"
          ]
        },
        {
          "interpretation": "Combine podcast episodes with episodes of radio shows hosted by hosts experienced in their field (hosts with 10 years of experience).",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT e.show_id, e.episode_number, e.release_date, e.duration, e.description\nFROM Episodes e\nJOIN Shows s ON e.show_id = s.id\nJOIN Podcasters p ON s.host = p.name\nWHERE (s.audio_format = 'Podcast' OR s.audio_format = 'Radio Show')\n  AND p.years_experience >= 10"
          ]
        },
        {
          "interpretation": "Add radio shows which are hosted by experienced podcasters (authorized hosts with 10 years of experience) into one comprehensive list that has information about the podcasts.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT s.id, s.title, s.genre, s.network, s.audio_format, s.host \nFROM Shows s \nJOIN Podcasters p ON s.host = p.name \nWHERE p.years_experience >= 10 AND s.audio_format = 'Radio Show'"
          ]
        }
      ],
      "num_unique_execution_results": 17,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 19,
        "num_unique_queries": 17,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Entertainment/attachment_1tab_val_audio_format/attachment_1tab_val_audio_format.sqlite",
      "db_dump": "CREATE TABLE EpisodeGuests(\n    id INTEGER PRIMARY KEY,\n    episode_id INTEGER,\n    guest_id INTEGER,\n    role TEXT,\n    appearance_duration INTEGER,\n    FOREIGN KEY(episode_id) REFERENCES Episodes(id),\n    FOREIGN KEY(guest_id) REFERENCES Guests(id)\n);\nCREATE TABLE Episodes(\n    id INTEGER PRIMARY KEY,\n    show_id INTEGER,\n    episode_number INTEGER,\n    release_date DATE,\n    duration INTEGER,\n    description TEXT,\n    FOREIGN KEY(show_id) REFERENCES Shows(id)\n);\nCREATE TABLE Guests(\n    id INTEGER PRIMARY KEY,\n    full_name TEXT,\n    occupation TEXT,\n    guest_on INTEGER,\n    appearance_episode_number INTEGER,\n    FOREIGN KEY(guest_on) REFERENCES Shows(title)\n);\nCREATE TABLE Podcasters(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    location TEXT,\n    years_experience INTEGER\n);\nCREATE TABLE Reviews(\n    id INTEGER PRIMARY KEY,\n    reviewer_name TEXT,\n    rating INTEGER ,\n    comments TEXT,\n    show_id INTEGER,\n    review_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY(show_id) REFERENCES Shows(id)\n);\nCREATE TABLE Shows(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    genre TEXT,\n    network TEXT,\n    audio_format TEXT ,\n    host TEXT,\n    FOREIGN KEY(host) REFERENCES Podcasters(name)\n);\n\nINSERT INTO \"EpisodeGuests\" (id,episode_id,guest_id,role,appearance_duration) VALUES (1,1,1,'Interviewee',25),(2,1,2,'Panelist',25);\nINSERT INTO \"Episodes\" (id,show_id,episode_number,release_date,duration,description) VALUES (1,1,1,'2023-01-01',60,'Episode about comedy.'),(2,2,1,'2023-01-08',60,'Episode about coffee.');\nINSERT INTO \"Guests\" (id,full_name,occupation,guest_on,appearance_episode_number) VALUES (1,'John Smith','Actor','The Alex Johnson Show',1),(2,'Emily Davis','Author','Laughing Matters',1);\nINSERT INTO \"Podcasters\" (id,name,location,years_experience) VALUES (1,'Alex Johnson','New York',10),(2,'Jane Doe','Los Angeles',8);\nINSERT INTO \"Reviews\" (id,reviewer_name,rating,comments,show_id,review_date) VALUES (1,'Alice Brown',5,'Great podcast!',1,'2024-03-07 21:13:47'),(2,'Bob White',4,'Funny episodes.',2,'2024-03-07 21:13:47');\nINSERT INTO \"Shows\" (id,title,genre,network,audio_format,host) VALUES (1,'The Alex Johnson Show','Comedy','ABC','Podcast','Alex Johnson'),(2,'Laughing Matters','Comedy','NBC','Podcast','Jane Doe'),(3,'The Morning Rush','Talk Show','CBS Radio','Radio Show','Alex Johnson'),(4,'Morning Coffee','Talk Show','Fox Radio','Radio Show','Jane Doe');\n",
      "question": "Which podcasts are by podcasters with 10 years of experience and which radio shows are by hosts with the same years of experience? Show them in one table.",
      "gold_queries": [
        "SELECT Shows.title \r\nFROM Shows JOIN Podcasters ON Shows.host = Podcasters.name\r\nWHERE (Shows.audio_format = 'Podcast' OR Shows.audio_format = 'Radio Show') AND Podcasters.years_experience = 10"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Which podcasts and radio shows are hosted by podcasters with 10 years of experience as hosts or by podcasters with less years of experience as hosts?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.title FROM Shows S JOIN Podcasters P ON S.host = P.name WHERE P.years_experience = 10 OR P.years_experience < 10"
          ]
        },
        {
          "interpretation": "Which podcasts are by podcasters with 10 years of experience and which radio shows are by hosts with more years of experience than podcasters with 10 years.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title FROM Shows WHERE host IN (SELECT name FROM Podcasters WHERE years_experience = 10) AND audio_format = 'Podcast'\nUNION\nSELECT title FROM Shows WHERE host IN (SELECT name FROM Podcasters WHERE years_experience > 10) AND audio_format = 'Radio Show'"
          ]
        },
        {
          "interpretation": "List the podcasts hosted by podcasters that have exactly 10 years of experience in their careers, and compare it to the radio shows produced by the same hosts with the same number of years of experience.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT s.title AS Podcast_Title \nFROM Shows s \nJOIN Podcasters p ON s.host = p.name \nWHERE p.years_experience = 10 AND s.audio_format = 'Podcast'",
            "SELECT s.title AS Radio_Show_Title \nFROM Shows s \nJOIN Podcasters p ON s.host = p.name \nWHERE p.years_experience = 10 AND s.audio_format = 'Radio Show'"
          ]
        },
        {
          "interpretation": "Which radio shows are hosted by podcasters who have exactly 10 years of experience but exclude any radio shows hosted by podcasters with the same number of years of experience.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT DISTINCT S.title \nFROM Shows S \nJOIN Podcasters P ON S.host = P.name \nWHERE P.years_experience = 10"
          ]
        },
        {
          "interpretation": "Find all podcasts that are hosted by podcasters with exactly 10 years of experience and compare their years of experience to those of the hosts of radio shows.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P1.years_experience, P2.years_experience\nFROM Podcasters P1\nJOIN Shows S1 ON P1.name = S1.host\nJOIN Podcasters P2 ON S1.host = P2.name\nJOIN Shows S2 ON P2.name = S2.host\nWHERE P1.years_experience = 10 AND S1.audio_format = 'Podcast' AND S2.audio_format = 'Radio Show'"
          ]
        },
        {
          "interpretation": "Create a report of podcasts hosted by individual podcasters that have either 10 years of experience or both podcasters have less years of experience combined but individually a host has more years of experience.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.title, P.name, P.years_experience\nFROM Shows S\nJOIN Podcasters P ON S.host = P.name\nWHERE P.years_experience >= 10\n   OR (P.years_experience < 10 AND EXISTS (\n       SELECT 1\n       FROM Shows S2\n       JOIN Podcasters P2 ON S2.host = P2.name\n       WHERE S.host <> S2.host AND P2.years_experience < 10 AND (P.years_experience + P2.years_experience < 10)\n   ))"
          ]
        },
        {
          "interpretation": "Identify the podcasts hosted by podcasters with 10 years of experience and compare them to radio shows hosted by the same podcasters.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.title, S.audio_format\nFROM Shows S\nJOIN Podcasters P ON S.host = P.name\nWHERE P.years_experience = 10 AND S.audio_format IN ('Podcast', 'Radio Show')"
          ]
        },
        {
          "interpretation": "List all podcasts by podcaster with 10 years of experience and all radio shows hosted by the same podcasters.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT s.title, s.genre\nFROM Shows s\nJOIN Podcasters p ON s.host = p.name\nWHERE p.years_experience = 10\nAND (s.audio_format = 'Podcast' OR s.audio_format = 'Radio Show')"
          ]
        }
      ],
      "num_unique_execution_results": 8,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.1111111111111111,
        "one_found": true,
        "f1_score": 0.19999999999999998,
        "num_queries": 9,
        "num_unique_queries": 9,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Education/attachment_1tab_val_higher_education_institutions/attachment_1tab_val_higher_education_institutions.sqlite",
      "db_dump": "CREATE TABLE Courses (\n    CourseID INTEGER PRIMARY KEY,\n    Title TEXT,\n    Description TEXT,\n    Department TEXT,\n    Credit Hours INTEGER );\nCREATE TABLE Enrollments (\n    EnrollmentID INTEGER PRIMARY KEY,\n    StudentID INTEGER,\n    CourseID INTEGER,\n    Grade TEXT,\n    FOREIGN KEY(StudentID) REFERENCES Students(StudentID),\n    FOREIGN KEY(CourseID) REFERENCES Courses(CourseID));\nCREATE TABLE Professors (\n    ProfessorID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Department TEXT,\n    OfficeNumber TEXT);\nCREATE TABLE Students (\n    StudentID INTEGER PRIMARY KEY,\n    DateOfBirth DATE,\n    HigherEducationInstitution TEXT,\n    AcademicProgram TEXT, FullName TEXT);\n\nINSERT INTO \"Courses\" (CourseID,Title,Description,Department,Credit) VALUES (1,'Calculus I','Introduction to calculus with an emphasis on limits, derivatives, and integrals.','Math',4),(2,'General Physics','This course covers classical mechanics, electricity and magnetism, optics, thermodynamics, and modern physics.','Physics',4),(3,'American Literature','An examination of American literature through various time periods and genres.','English',3),(4,'Human Biology','Exploration of human biology including cell structure and function, genetics, and physiological systems.','Biology',3),(5,'World History II','Continuation of World History I, covering events from the fall of Rome until today.','History',3);\nINSERT INTO \"Professors\" (ProfessorID,FirstName,LastName,Department,OfficeNumber) VALUES (1,'Dr.','White','Math','A101'),(2,'Dr.','Black','Physics','B101'),(3,'Dr.','Green','English','C101'),(4,'Dr.','Blue','Biology','D101'),(5,'Dr.','Red','History','E101');\nINSERT INTO \"Students\" (StudentID,DateOfBirth,HigherEducationInstitution,AcademicProgram,FullName) VALUES (1,'2000-09-15','University','Business Administration','John Doe'),(2,'1998-10-23','University','Computer Science','Jane Smith'),(3,'1996-11-27','College','Business Administration','Michael Johnson'),(4,'1995-12-11','College','Mathematics','Emily Williams'),(5,'1994-02-02','High School','Physics','David Brown');\n",
      "question": "Provide a list of all university students and also provide a list of college students studying Business Administration. Show them in one table.",
      "gold_queries": [
        "SELECT Students.FullName\r\nFROM Students\r\nWHERE Students.HigherEducationInstitution = \"University\" OR Students.HigherEducationInstitution = \"College\" AND Students.AcademicProgram = \"Business Administration\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Provide a list of students who have either university or college education background and have Business Administration as their academic program.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName FROM Students WHERE HigherEducationInstitution IN ('University', 'College') AND AcademicProgram = 'Business Administration'"
          ]
        },
        {
          "interpretation": "Provide a table with 'University' and 'College Students' as student identifiers and a series data points with matching academic programs to provide business understanding related data insights.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    CASE \n        WHEN HigherEducationInstitution = 'University' THEN 'University Students'\n        WHEN HigherEducationInstitution = 'College' THEN 'College Students'\n    END AS StudentIdentifier,\n    AcademicProgram,\n    COUNT(*) AS NumberOfStudents\nFROM \n    Students\nGROUP BY \n    StudentIdentifier, AcademicProgram"
          ]
        },
        {
          "interpretation": "List university students who are not enrolled in Business Administration and compare to those college students who are.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName FROM Students WHERE HigherEducationInstitution = 'University' AND AcademicProgram != 'Business Administration'\nUNION ALL\nSELECT FullName FROM Students WHERE HigherEducationInstitution = 'College' AND AcademicProgram = 'Business Administration'"
          ]
        },
        {
          "interpretation": "Show university students who study Business Administration only in the same table with students who are college students but who do not share this academic program.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName \nFROM Students \nWHERE HigherEducationInstitution = 'University' AND AcademicProgram = 'Business Administration'\nUNION\nSELECT FullName \nFROM Students \nWHERE HigherEducationInstitution = 'College' AND AcademicProgram <> 'Business Administration'"
          ]
        },
        {
          "interpretation": "Provide a list of students studying Business Administration who attend college and students who attend college are grouped together from all institutions and then show them separately in another table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AcademicProgram, FullName \nFROM Students \nWHERE HigherEducationInstitution = 'College'",
            "SELECT AcademicProgram, HigherEducationInstitution, FullName \nFROM Students \nWHERE AcademicProgram = 'Business Administration' AND HigherEducationInstitution = 'College'"
          ]
        },
        {
          "interpretation": "Provide a list of students studying Business Administration who attend college and students who attend college are grouped together from all institutions and then show them separately in another table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AcademicProgram, FullName \nFROM Students \nWHERE HigherEducationInstitution = 'College'",
            "SELECT AcademicProgram, HigherEducationInstitution, FullName \nFROM Students \nWHERE AcademicProgram = 'Business Administration' AND HigherEducationInstitution = 'College'"
          ]
        },
        {
          "interpretation": "Show university students and college students side-by-side in a single table to compare their profiles.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    FullName AS UniversityStudent,\n    DateOfBirth AS UniDateOfBirth,\n    HigherEducationInstitution AS UniInstitution,\n    AcademicProgram AS UniProgram\nFROM \n    Students\nWHERE \n    HigherEducationInstitution = 'University'\nUNION ALL\nSELECT \n    FullName AS CollegeStudent,\n    DateOfBirth AS ColDateOfBirth,\n    HigherEducationInstitution AS ColInstitution,\n    AcademicProgram AS ColProgram\nFROM \n    Students\nWHERE \n    HigherEducationInstitution = 'College'"
          ]
        },
        {
          "interpretation": "Create a table with one column that represents profiles of students from 'University' or 'College' and another column that has subgroup which is students studying 'Business Administration' side by side in two groups.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName AS Profile, AcademicProgram AS Subgroup\nFROM Students\nWHERE HigherEducationInstitution IN ('University', 'College')\nAND AcademicProgram = 'Business Administration'"
          ]
        },
        {
          "interpretation": "Display university students and college student profiles separately in two tables and merge the 2 separate lists into a single table that shows university students and college students studying business on different rows in each table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT 'University' AS EducationLevel, FullName FROM Students WHERE HigherEducationInstitution = 'University' AND AcademicProgram = 'Business Administration'\nUNION ALL\nSELECT 'College' AS EducationLevel, FullName FROM Students WHERE HigherEducationInstitution = 'College' AND AcademicProgram = 'Business Administration'"
          ]
        },
        {
          "interpretation": "Compare the students from 'University' with those college students within the group who study 'Business Administration.'",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT FullName FROM Students WHERE HigherEducationInstitution = 'University'\nUNION\nSELECT FullName FROM Students WHERE HigherEducationInstitution = 'College' AND AcademicProgram = 'Business Administration'"
          ]
        },
        {
          "interpretation": "Provide a list of students with university or college education background, and also provide a list of students studying Business Administration.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName FROM Students WHERE HigherEducationInstitution IN ('University', 'College')",
            "SELECT FullName FROM Students WHERE AcademicProgram = 'Business Administration'"
          ]
        },
        {
          "interpretation": "Create a table with different columns representing university students and college students which show students who are studying business together.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    CASE WHEN HigherEducationInstitution = 'University' THEN FullName END AS UniversityStudents,\n    CASE WHEN HigherEducationInstitution = 'College' THEN FullName END AS CollegeStudents\nFROM \n    Students\nWHERE \n    AcademicProgram = 'Business Administration'"
          ]
        },
        {
          "interpretation": "List the students who are not grouped separately but instead their profiles show either institution name  'University' and 'College'  in same table to increase of column length potentially display the Institution names if distinguished between their types.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName, HigherEducationInstitution \nFROM Students \nWHERE HigherEducationInstitution IN ('University', 'College')"
          ]
        }
      ],
      "num_unique_execution_results": 13,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.07142857142857142,
        "one_found": true,
        "f1_score": 0.13333333333333333,
        "num_queries": 16,
        "num_unique_queries": 14,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Education/attachment_1tab_val_higher_education_institutions/attachment_1tab_val_higher_education_institutions.sqlite",
      "db_dump": "CREATE TABLE Courses (\n    CourseID INTEGER PRIMARY KEY,\n    Title TEXT,\n    Description TEXT,\n    Department TEXT,\n    Credit Hours INTEGER );\nCREATE TABLE Enrollments (\n    EnrollmentID INTEGER PRIMARY KEY,\n    StudentID INTEGER,\n    CourseID INTEGER,\n    Grade TEXT,\n    FOREIGN KEY(StudentID) REFERENCES Students(StudentID),\n    FOREIGN KEY(CourseID) REFERENCES Courses(CourseID));\nCREATE TABLE Professors (\n    ProfessorID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Department TEXT,\n    OfficeNumber TEXT);\nCREATE TABLE Students (\n    StudentID INTEGER PRIMARY KEY,\n    DateOfBirth DATE,\n    HigherEducationInstitution TEXT,\n    AcademicProgram TEXT, FullName TEXT);\n\nINSERT INTO \"Courses\" (CourseID,Title,Description,Department,Credit) VALUES (1,'Calculus I','Introduction to calculus with an emphasis on limits, derivatives, and integrals.','Math',4),(2,'General Physics','This course covers classical mechanics, electricity and magnetism, optics, thermodynamics, and modern physics.','Physics',4),(3,'American Literature','An examination of American literature through various time periods and genres.','English',3),(4,'Human Biology','Exploration of human biology including cell structure and function, genetics, and physiological systems.','Biology',3),(5,'World History II','Continuation of World History I, covering events from the fall of Rome until today.','History',3);\nINSERT INTO \"Professors\" (ProfessorID,FirstName,LastName,Department,OfficeNumber) VALUES (1,'Dr.','White','Math','A101'),(2,'Dr.','Black','Physics','B101'),(3,'Dr.','Green','English','C101'),(4,'Dr.','Blue','Biology','D101'),(5,'Dr.','Red','History','E101');\nINSERT INTO \"Students\" (StudentID,DateOfBirth,HigherEducationInstitution,AcademicProgram,FullName) VALUES (1,'2000-09-15','University','Business Administration','John Doe'),(2,'1998-10-23','University','Computer Science','Jane Smith'),(3,'1996-11-27','College','Business Administration','Michael Johnson'),(4,'1995-12-11','College','Mathematics','Emily Williams'),(5,'1994-02-02','High School','Physics','David Brown');\n",
      "question": "List all university students and college students studying Business Administration. Show them in one table.",
      "gold_queries": [
        "SELECT Students.FullName\r\nFROM Students\r\nWHERE (Students.HigherEducationInstitution = \"University\" OR Students.HigherEducationInstitution = \"College\") AND Students.AcademicProgram = \"Business Administration\"",
        "SELECT Students.FullName\r\nFROM Students\r\nWHERE Students.HigherEducationInstitution = \"University\" OR Students.HigherEducationInstitution = \"College\" AND Students.AcademicProgram = \"Business Administration\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List students attending university or college institutions, who are studying Business Administration, regardless of their institution type.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName FROM Students WHERE AcademicProgram = 'Business Administration' AND HigherEducationInstitution IN ('University', 'College')"
          ]
        },
        {
          "interpretation": "Identify and combine the data of two queries: first lists university students, then adds college students studying Business Administration in a combined list.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName FROM Students WHERE HigherEducationInstitution = 'University'\nUNION\nSELECT FullName FROM Students WHERE HigherEducationInstitution = 'College' AND AcademicProgram = 'Business Administration'"
          ]
        },
        {
          "interpretation": "List university students or college students studying Business Administration in a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName, AcademicProgram FROM Students WHERE AcademicProgram = 'Business Administration' AND HigherEducationInstitution IN ('University', 'College')"
          ]
        },
        {
          "interpretation": "List university students studying Business Administration and college students studying Business Administration in a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName, AcademicProgram, HigherEducationInstitution \nFROM Students \nWHERE (HigherEducationInstitution = 'University' AND AcademicProgram = 'Business Administration') \nOR (HigherEducationInstitution = 'College' AND AcademicProgram = 'Business Administration')"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "one_found": true,
        "f1_score": 0.6666666666666666,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/attachment/Education/attachment_1tab_val_higher_education_institutions/attachment_1tab_val_higher_education_institutions.sqlite",
      "db_dump": "CREATE TABLE Courses (\n    CourseID INTEGER PRIMARY KEY,\n    Title TEXT,\n    Description TEXT,\n    Department TEXT,\n    Credit Hours INTEGER );\nCREATE TABLE Enrollments (\n    EnrollmentID INTEGER PRIMARY KEY,\n    StudentID INTEGER,\n    CourseID INTEGER,\n    Grade TEXT,\n    FOREIGN KEY(StudentID) REFERENCES Students(StudentID),\n    FOREIGN KEY(CourseID) REFERENCES Courses(CourseID));\nCREATE TABLE Professors (\n    ProfessorID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Department TEXT,\n    OfficeNumber TEXT);\nCREATE TABLE Students (\n    StudentID INTEGER PRIMARY KEY,\n    DateOfBirth DATE,\n    HigherEducationInstitution TEXT,\n    AcademicProgram TEXT, FullName TEXT);\n\nINSERT INTO \"Courses\" (CourseID,Title,Description,Department,Credit) VALUES (1,'Calculus I','Introduction to calculus with an emphasis on limits, derivatives, and integrals.','Math',4),(2,'General Physics','This course covers classical mechanics, electricity and magnetism, optics, thermodynamics, and modern physics.','Physics',4),(3,'American Literature','An examination of American literature through various time periods and genres.','English',3),(4,'Human Biology','Exploration of human biology including cell structure and function, genetics, and physiological systems.','Biology',3),(5,'World History II','Continuation of World History I, covering events from the fall of Rome until today.','History',3);\nINSERT INTO \"Professors\" (ProfessorID,FirstName,LastName,Department,OfficeNumber) VALUES (1,'Dr.','White','Math','A101'),(2,'Dr.','Black','Physics','B101'),(3,'Dr.','Green','English','C101'),(4,'Dr.','Blue','Biology','D101'),(5,'Dr.','Red','History','E101');\nINSERT INTO \"Students\" (StudentID,DateOfBirth,HigherEducationInstitution,AcademicProgram,FullName) VALUES (1,'2000-09-15','University','Business Administration','John Doe'),(2,'1998-10-23','University','Computer Science','Jane Smith'),(3,'1996-11-27','College','Business Administration','Michael Johnson'),(4,'1995-12-11','College','Mathematics','Emily Williams'),(5,'1994-02-02','High School','Physics','David Brown');\n",
      "question": "Which university students study Business Administration and which college students have the same academic program? Show them in one table.",
      "gold_queries": [
        "SELECT Students.FullName\r\nFROM Students\r\nWHERE (Students.HigherEducationInstitution = \"University\" OR Students.HigherEducationInstitution = \"College\") AND Students.AcademicProgram = \"Business Administration\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "University students who major in Business Administration and post secondary students in college with similar fields of study.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT FullName \nFROM Students \nWHERE (HigherEducationInstitution = 'University' AND AcademicProgram = 'Business Administration') \n   OR (HigherEducationInstitution = 'College' AND AcademicProgram = 'Business Administration')"
          ]
        },
        {
          "interpretation": "Which university students have major Business Administration and college students have corresponding higher education institution of post high school institution.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName FROM Students WHERE AcademicProgram = 'Business Administration' AND HigherEducationInstitution IN ('University', 'Post High School Institution')"
          ]
        },
        {
          "interpretation": "Students at the University studying Business Administration compared to similar students in College who have the same academic track.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName, HigherEducationInstitution\nFROM Students\nWHERE AcademicProgram = 'Business Administration'\nAND HigherEducationInstitution IN ('University', 'College')"
          ]
        },
        {
          "interpretation": "University students with major Business Administration and their counterparts in College with similar higher education institutions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName, AcademicProgram, HigherEducationInstitution\nFROM Students\nWHERE (HigherEducationInstitution = 'University' AND AcademicProgram = 'Business Administration')\n   OR (HigherEducationInstitution = 'College' AND AcademicProgram = 'Business Administration')"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "one_found": true,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Education/attachment_1tab_val_learning_activities/attachment_1tab_val_learning_activities.sqlite",
      "db_dump": "CREATE TABLE Classes (\n    ClassID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    GradeLevel INT,\n    TeacherID INTEGER,\n    FOREIGN KEY(TeacherID) REFERENCES Teachers(TeacherID)\n);\nCREATE TABLE LearningActivities (\n    ActivityID INTEGER PRIMARY KEY AUTOINCREMENT,\n    ActivityType TEXT ,\n    Purpose TEXT,\n    Date DATE,\n    ClassID INTEGER,\n    FOREIGN KEY(ClassID) REFERENCES Classes(ClassID)\n);\nCREATE TABLE Students (\n    StudentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE\n);\nCREATE TABLE Teachers (\n    TeacherID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    SubjectTaught TEXT\n);\n\nINSERT INTO \"Classes\" (ClassID,Name,GradeLevel,TeacherID) VALUES (1,'Algebra I',9,1),(2,'World History',10,2),(3,'American Literature',11,3),(4,'Physics',10,4),(5,'Advanced Art',12,5);\nINSERT INTO \"LearningActivities\" (ActivityID,ActivityType,Purpose,Date,ClassID) VALUES (1,'Field Trip','Real-world Application','2023-03-15',1),(2,'Field Trip','Team Building','2023-03-22',2),(3,'Study Group','Real-world Application','2023-03-18',3),(4,'Study Group','Preparation for Test','2023-03-25',4),(5,'Online Lecture','Review Material','2023-03-20',5);\nINSERT INTO \"Students\" (StudentID,FirstName,LastName,DateOfBirth) VALUES (1,'John','Doe','2003-10-07'),(2,'Jane','Smith','2002-08-21'),(3,'Michael','Johnson','2005-06-29'),(4,'Emily','Williams','2004-09-15'),(5,'David','Brown','2006-07-23');\nINSERT INTO \"Teachers\" (TeacherID,FirstName,LastName,SubjectTaught) VALUES (1,'Mr.','Davis','Math'),(2,'Ms.','Martin','History'),(3,'Mrs.','Wilson','English'),(4,'Mr.','Hall','Science'),(5,'Mrs.','Jackson','Art');\n",
      "question": "List all field trip and study group classes where either is for a real-world application. Show them in one table.",
      "gold_queries": [
        "SELECT Classes.Name \r\nFROM LearningActivities JOIN Classes ON Classes.ClassID = LearningActivities.ClassID\r\nWHERE (LearningActivities.ActivityType = \"Field Trip\" OR LearningActivities.ActivityType = \"Study Group\") AND LearningActivities.Purpose = \"Real-world Application\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Find all classes where the aim is to apply real-world knowledge through activities, and those activities are either a Field Trip or a Study Group.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT DISTINCT C.Name\nFROM Classes C\nJOIN LearningActivities LA ON C.ClassID = LA.ClassID\nWHERE LA.Purpose = 'Real-world Application' AND LA.ActivityType IN ('Field Trip', 'Study Group')"
          ]
        },
        {
          "interpretation": "List all classes with activity type 'Field Trip' and 'Study Group' where purpose is 'Real-world Application' in one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Classes.Name, LearningActivities.ActivityType, LearningActivities.Purpose\nFROM Classes\nJOIN LearningActivities ON Classes.ClassID = LearningActivities.ClassID\nWHERE LearningActivities.ActivityType IN ('Field Trip', 'Study Group') AND LearningActivities.Purpose = 'Real-world Application'"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "one_found": true,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Education/attachment_1tab_val_learning_activities/attachment_1tab_val_learning_activities.sqlite",
      "db_dump": "CREATE TABLE Classes (\n    ClassID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    GradeLevel INT,\n    TeacherID INTEGER,\n    FOREIGN KEY(TeacherID) REFERENCES Teachers(TeacherID)\n);\nCREATE TABLE LearningActivities (\n    ActivityID INTEGER PRIMARY KEY AUTOINCREMENT,\n    ActivityType TEXT ,\n    Purpose TEXT,\n    Date DATE,\n    ClassID INTEGER,\n    FOREIGN KEY(ClassID) REFERENCES Classes(ClassID)\n);\nCREATE TABLE Students (\n    StudentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE\n);\nCREATE TABLE Teachers (\n    TeacherID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    SubjectTaught TEXT\n);\n\nINSERT INTO \"Classes\" (ClassID,Name,GradeLevel,TeacherID) VALUES (1,'Algebra I',9,1),(2,'World History',10,2),(3,'American Literature',11,3),(4,'Physics',10,4),(5,'Advanced Art',12,5);\nINSERT INTO \"LearningActivities\" (ActivityID,ActivityType,Purpose,Date,ClassID) VALUES (1,'Field Trip','Real-world Application','2023-03-15',1),(2,'Field Trip','Team Building','2023-03-22',2),(3,'Study Group','Real-world Application','2023-03-18',3),(4,'Study Group','Preparation for Test','2023-03-25',4),(5,'Online Lecture','Review Material','2023-03-20',5);\nINSERT INTO \"Students\" (StudentID,FirstName,LastName,DateOfBirth) VALUES (1,'John','Doe','2003-10-07'),(2,'Jane','Smith','2002-08-21'),(3,'Michael','Johnson','2005-06-29'),(4,'Emily','Williams','2004-09-15'),(5,'David','Brown','2006-07-23');\nINSERT INTO \"Teachers\" (TeacherID,FirstName,LastName,SubjectTaught) VALUES (1,'Mr.','Davis','Math'),(2,'Ms.','Martin','History'),(3,'Mrs.','Wilson','English'),(4,'Mr.','Hall','Science'),(5,'Mrs.','Jackson','Art');\n",
      "question": "List all field trip classes and study group classes that are for real-world applications. Show them in one table.",
      "gold_queries": [
        "SELECT Classes.Name \r\nFROM LearningActivities JOIN Classes ON Classes.ClassID = LearningActivities.ClassID\r\nWHERE (LearningActivities.ActivityType = \"Field Trip\" OR LearningActivities.ActivityType = \"Study Group\") AND LearningActivities.Purpose = \"Real-world Application\"",
        "SELECT Classes.Name \r\nFROM LearningActivities JOIN Classes ON Classes.ClassID = LearningActivities.ClassID\r\nWHERE LearningActivities.ActivityType = \"Field Trip\" OR LearningActivities.ActivityType = \"Study Group\" AND LearningActivities.Purpose = \"Real-world Application\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List all field trips and study groups with a purpose of 'Real-world Application', eliminating duplicate classes that participate in multiple instances of the selected activities.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT T1.ActivityType, T1.Purpose, T2.Name\nFROM LearningActivities T1\nJOIN Classes T2 ON T1.ClassID = T2.ClassID\nWHERE T1.ActivityType IN ('Field Trip', 'Study Group') AND T1.Purpose = 'Real-world Application'"
          ]
        },
        {
          "interpretation": "List the union of classes that are involved in field trips for 'Real-world Application' and study groups with the same goal.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.Name \nFROM Classes C \nJOIN LearningActivities LA ON C.ClassID = LA.ClassID \nWHERE (LA.ActivityType = 'Field Trip' AND LA.Purpose = 'Real-world Application') \nUNION \nSELECT C.Name \nFROM Classes C \nJOIN LearningActivities LA ON C.ClassID = LA.ClassID \nWHERE LA.ActivityType = 'Study Group' AND LA.Purpose = 'Real-world Application'"
          ]
        },
        {
          "interpretation": "Retrieve classes that have a record of both field trip types ('Field Trip') and study group types ('Study Group') for a real-world application purpose.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT c.Name\nFROM Classes c\nJOIN LearningActivities la1 ON c.ClassID = la1.ClassID AND la1.ActivityType = 'Field Trip' AND la1.Purpose = 'Real-world Application'\nJOIN LearningActivities la2 ON c.ClassID = la2.ClassID AND la2.ActivityType = 'Study Group' AND la2.Purpose = 'Real-world Application'"
          ]
        },
        {
          "interpretation": "Combine the results of field trips and study groups that are classified separately under real-world application, into one table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ActivityID, ActivityType, Purpose, Date, ClassID \nFROM LearningActivities \nWHERE (ActivityType = 'Field Trip' OR ActivityType = 'Study Group') AND Purpose = 'Real-world Application'"
          ]
        },
        {
          "interpretation": "List all field trip classes and study group classes that have a real-world application purpose.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ActivityType, Purpose, Date, ClassID \nFROM LearningActivities \nWHERE (ActivityType = 'Field Trip' OR ActivityType = 'Study Group') \nAND Purpose = 'Real-world Application'"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.2,
        "one_found": true,
        "f1_score": 0.28571428571428575,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Education/attachment_1tab_val_learning_activities/attachment_1tab_val_learning_activities.sqlite",
      "db_dump": "CREATE TABLE Classes (\n    ClassID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    GradeLevel INT,\n    TeacherID INTEGER,\n    FOREIGN KEY(TeacherID) REFERENCES Teachers(TeacherID)\n);\nCREATE TABLE LearningActivities (\n    ActivityID INTEGER PRIMARY KEY AUTOINCREMENT,\n    ActivityType TEXT ,\n    Purpose TEXT,\n    Date DATE,\n    ClassID INTEGER,\n    FOREIGN KEY(ClassID) REFERENCES Classes(ClassID)\n);\nCREATE TABLE Students (\n    StudentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE\n);\nCREATE TABLE Teachers (\n    TeacherID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    SubjectTaught TEXT\n);\n\nINSERT INTO \"Classes\" (ClassID,Name,GradeLevel,TeacherID) VALUES (1,'Algebra I',9,1),(2,'World History',10,2),(3,'American Literature',11,3),(4,'Physics',10,4),(5,'Advanced Art',12,5);\nINSERT INTO \"LearningActivities\" (ActivityID,ActivityType,Purpose,Date,ClassID) VALUES (1,'Field Trip','Real-world Application','2023-03-15',1),(2,'Field Trip','Team Building','2023-03-22',2),(3,'Study Group','Real-world Application','2023-03-18',3),(4,'Study Group','Preparation for Test','2023-03-25',4),(5,'Online Lecture','Review Material','2023-03-20',5);\nINSERT INTO \"Students\" (StudentID,FirstName,LastName,DateOfBirth) VALUES (1,'John','Doe','2003-10-07'),(2,'Jane','Smith','2002-08-21'),(3,'Michael','Johnson','2005-06-29'),(4,'Emily','Williams','2004-09-15'),(5,'David','Brown','2006-07-23');\nINSERT INTO \"Teachers\" (TeacherID,FirstName,LastName,SubjectTaught) VALUES (1,'Mr.','Davis','Math'),(2,'Ms.','Martin','History'),(3,'Mrs.','Wilson','English'),(4,'Mr.','Hall','Science'),(5,'Mrs.','Jackson','Art');\n",
      "question": "Show all the field trips available, also show just those study group classes categorised as being for a real-world application. Show them in one table.",
      "gold_queries": [
        "SELECT Classes.Name \r\nFROM LearningActivities JOIN Classes ON Classes.ClassID = LearningActivities.ClassID\r\nWHERE LearningActivities.ActivityType = \"Field Trip\" OR LearningActivities.ActivityType = \"Study Group\" AND LearningActivities.Purpose = \"Real-world Application\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Show a table that includes all field trips, along with the teacher who is teaching the class for each study group categorized as real-world application.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT LA.ActivityID, LA.ActivityType, LA.Purpose, LA.Date, T.FirstName, T.LastName\nFROM LearningActivities LA\nJOIN Classes C ON LA.ClassID = C.ClassID\nJOIN Teachers T ON C.TeacherID = T.TeacherID\nWHERE LA.ActivityType = 'Field Trip'\nUNION\nSELECT LA.ActivityID, LA.ActivityType, LA.Purpose, LA.Date, T.FirstName, T.LastName\nFROM LearningActivities LA\nJOIN Classes C ON LA.ClassID = C.ClassID\nJOIN Teachers T ON C.TeacherID = T.TeacherID\nWHERE LA.ActivityType = 'Study Group' AND LA.Purpose = 'Real-world Application'"
          ]
        },
        {
          "interpretation": "Show all field trips available and study groups categorized as real-world application together in one table, along with their respective details.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM LearningActivities WHERE ActivityType = 'Field Trip' AND Purpose = 'Real-world Application' UNION SELECT * FROM LearningActivities WHERE ActivityType = 'Study Group' AND Purpose = 'Real-world Application'"
          ]
        },
        {
          "interpretation": "Retrieve all field trips and study groups categorized as real-world application, along with the names of the classes in which they take place.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT LearningActivities.ActivityType, LearningActivities.Purpose, Classes.Name \nFROM LearningActivities \nJOIN Classes ON LearningActivities.ClassID = Classes.ClassID \nWHERE LearningActivities.ActivityType IN ('Field Trip', 'Study Group') \nAND LearningActivities.Purpose = 'Real-world Application'"
          ]
        },
        {
          "interpretation": "Display all field trips available, and study groups categorized as real-world application, listing each activity in a single row, including its details.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ActivityID, ActivityType, Purpose, Date, ClassID FROM LearningActivities WHERE (ActivityType = 'Field Trip') OR (ActivityType = 'Study Group' AND Purpose = 'Real-world Application')"
          ]
        },
        {
          "interpretation": "Retrieve a table that contains all field trips, and, for each field trip, show the corresponding study group if it's categorized as real-world application.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ft.ActivityID AS FieldTripID, ft.Purpose AS FieldTripPurpose, ft.Date AS FieldTripDate, sg.ActivityID AS StudyGroupID, sg.Purpose AS StudyGroupPurpose, sg.Date AS StudyGroupDate\nFROM LearningActivities ft\nLEFT JOIN LearningActivities sg ON ft.Date < sg.Date AND ft.Purpose = sg.Purpose AND sg.ActivityType = 'Study Group'\nWHERE ft.ActivityType = 'Field Trip'\nAND (sg.Purpose = 'Real-world Application' OR ft.Purpose = 'Real-world Application')"
          ]
        },
        {
          "interpretation": "List all field trips and study groups categorized as real-world application in two separate tables.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ActivityID, ActivityType, Purpose, Date, ClassID FROM LearningActivities WHERE ActivityType = 'Field Trip' AND Purpose = 'Real-world Application'",
            "SELECT ActivityID, ActivityType, Purpose, Date, ClassID FROM LearningActivities WHERE ActivityType = 'Study Group' AND Purpose = 'Real-world Application'"
          ]
        },
        {
          "interpretation": "List all field trips and study groups categorized as real-world application in two separate tables.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ActivityID, ActivityType, Purpose, Date, ClassID FROM LearningActivities WHERE ActivityType = 'Field Trip' AND Purpose = 'Real-world Application'",
            "SELECT ActivityID, ActivityType, Purpose, Date, ClassID FROM LearningActivities WHERE ActivityType = 'Study Group' AND Purpose = 'Real-world Application'"
          ]
        },
        {
          "interpretation": "List all study groups categorized as real-world application, and include their respective field trips in a separate row or table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT 'Study Group' AS ActivityType, Purpose, Date\nFROM LearningActivities\nWHERE ActivityType = 'Study Group' AND Purpose = 'Real-world Application'",
            "SELECT 'Field Trip' AS ActivityType, Purpose, Date\nFROM LearningActivities\nWHERE ActivityType = 'Field Trip'"
          ]
        },
        {
          "interpretation": "List all study groups categorized as real-world application, and include their respective field trips in a separate row or table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT 'Study Group' AS ActivityType, Purpose, Date\nFROM LearningActivities\nWHERE ActivityType = 'Study Group' AND Purpose = 'Real-world Application'",
            "SELECT 'Field Trip' AS ActivityType, Purpose, Date\nFROM LearningActivities\nWHERE ActivityType = 'Field Trip'"
          ]
        },
        {
          "interpretation": "Show a combined table of all field trips available and study groups categorized as real-world application, including their respective teacher information.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT L.ActivityID, L.ActivityType, L.Purpose, L.Date, C.Name AS ClassName, T.FirstName, T.LastName, T.SubjectTaught\nFROM LearningActivities L\nJOIN Classes C ON L.ClassID = C.ClassID\nJOIN Teachers T ON C.TeacherID = T.TeacherID\nWHERE L.ActivityType = 'Field Trip' OR (L.ActivityType = 'Study Group' AND L.Purpose = 'Real-world Application')"
          ]
        },
        {
          "interpretation": "Display a list of all activities that are categorized as field trips, and separately, list all study groups categorized as real-world application.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ActivityType, Purpose, Date, ClassID FROM LearningActivities WHERE ActivityType = 'Field Trip'",
            "SELECT ActivityType, Purpose, Date, ClassID FROM LearningActivities WHERE ActivityType = 'Study Group' AND Purpose = 'Real-world Application'"
          ]
        },
        {
          "interpretation": "Display a list of all activities that are categorized as field trips, and separately, list all study groups categorized as real-world application.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ActivityType, Purpose, Date, ClassID FROM LearningActivities WHERE ActivityType = 'Field Trip'",
            "SELECT ActivityType, Purpose, Date, ClassID FROM LearningActivities WHERE ActivityType = 'Study Group' AND Purpose = 'Real-world Application'"
          ]
        }
      ],
      "num_unique_execution_results": 12,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 18,
        "num_unique_queries": 12,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Entertainment/attachment_1tab_ref_music/attachment_1tab_ref_music.sqlite",
      "db_dump": "CREATE TABLE \"Album\" (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE\n);\nCREATE TABLE Instrument (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT UNIQUE\n);\nCREATE TABLE \"Music\" (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    length TIME,\n    MUSIC_TYPE TEXT ,\n    INSTRUMENT_id INTEGER,\n    ALBUM_id INTEGER,\n    SINGER_id INTEGER,\n    FOREIGN KEY (ALBUM_id) REFERENCES Album (id),\n    FOREIGN KEY (SINGER_id) REFERENCES Singer (id),\n    FOREIGN KEY (INSTRUMENT_id) REFERENCES Instrument (id)\n);\nCREATE TABLE Singer (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    birth_date DATE,\n    death_date DATE\n);\n\nINSERT INTO \"Album\" (id,title,release_date) VALUES (1,NULL,'2000-01-01'),(2,NULL,'2001-06-01'),(3,NULL,'2002-11-01'),(4,NULL,'2003-05-01'),(5,NULL,'2004-10-01');\nINSERT INTO \"Instrument\" (id,type) VALUES (1,'Guitar'),(2,'Piano'),(3,'Drums'),(4,'Violin');\nINSERT INTO \"Music\" (id,title,length,MUSIC_TYPE,INSTRUMENT_id,ALBUM_id,SINGER_id) VALUES (1,'Blues Song','03:00','Single',1,1,1),(2,'Blues Song','03:00','Single',2,2,2),(3,'Folk Song','03:00','Single',3,3,1),(4,'Folk Song','03:00','Single',4,4,3),(5,'Country','03:00','Single',5,5,4);\nINSERT INTO \"Singer\" (id,first_name,last_name,birth_date,death_date) VALUES (1,'John','Hurt','1923-06-08','2007-01-27'),(2,'Bob','Smith','1960-07-01',NULL),(3,'Alice','Johnson','1975-01-10',NULL),(4,'Tom','White','1980-02-05',NULL),(5,'Emily','Green','1992-03-15',NULL);\n",
      "question": "Give me the blues songs and folk songs where the singer's first name is John. Show them in one table.",
      "gold_queries": [
        "SELECT Music.title \r\nFROM Music JOIN Singer ON Music.SINGER_id = Singer.id\r\nWHERE (Music.title = \"Blues Song\" OR Music.title = \"Folk Song\") AND Singer.first_name = \"John\"",
        "SELECT Music.title \r\nFROM Music JOIN Singer ON Music.SINGER_id = Singer.id\r\nWHERE Music.title = \"Blues Song\" OR Music.title = \"Folk Song\" AND Singer.first_name = \"John\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Give me all the songs of type 'Blues Song' or 'Folk Song', including only the ones sung by John.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Music.title \nFROM Music \nINNER JOIN Singer ON Music.SINGER_id = Singer.id \nWHERE Music.title IN ('Blues Song', 'Folk Song') AND Singer.first_name = 'John' AND Singer.last_name = 'Hurt'"
          ]
        },
        {
          "interpretation": "Give me the blues songs by singers with first name 'John', along with the folk songs by singers with first name 'John'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT M.title\nFROM Music M\nJOIN Singer S ON M.SINGER_id = S.id\nWHERE (M.MUSIC_TYPE = 'Blues' AND S.first_name = 'John')\nOR (M.MUSIC_TYPE = 'Folk' AND S.first_name = 'John')"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.5,
        "one_found": true,
        "f1_score": 0.5,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Entertainment/attachment_1tab_ref_music/attachment_1tab_ref_music.sqlite",
      "db_dump": "CREATE TABLE \"Album\" (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE\n);\nCREATE TABLE Instrument (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT UNIQUE\n);\nCREATE TABLE \"Music\" (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    length TIME,\n    MUSIC_TYPE TEXT ,\n    INSTRUMENT_id INTEGER,\n    ALBUM_id INTEGER,\n    SINGER_id INTEGER,\n    FOREIGN KEY (ALBUM_id) REFERENCES Album (id),\n    FOREIGN KEY (SINGER_id) REFERENCES Singer (id),\n    FOREIGN KEY (INSTRUMENT_id) REFERENCES Instrument (id)\n);\nCREATE TABLE Singer (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    birth_date DATE,\n    death_date DATE\n);\n\nINSERT INTO \"Album\" (id,title,release_date) VALUES (1,NULL,'2000-01-01'),(2,NULL,'2001-06-01'),(3,NULL,'2002-11-01'),(4,NULL,'2003-05-01'),(5,NULL,'2004-10-01');\nINSERT INTO \"Instrument\" (id,type) VALUES (1,'Guitar'),(2,'Piano'),(3,'Drums'),(4,'Violin');\nINSERT INTO \"Music\" (id,title,length,MUSIC_TYPE,INSTRUMENT_id,ALBUM_id,SINGER_id) VALUES (1,'Blues Song','03:00','Single',1,1,1),(2,'Blues Song','03:00','Single',2,2,2),(3,'Folk Song','03:00','Single',3,3,1),(4,'Folk Song','03:00','Single',4,4,3),(5,'Country','03:00','Single',5,5,4);\nINSERT INTO \"Singer\" (id,first_name,last_name,birth_date,death_date) VALUES (1,'John','Hurt','1923-06-08','2007-01-27'),(2,'Bob','Smith','1960-07-01',NULL),(3,'Alice','Johnson','1975-01-10',NULL),(4,'Tom','White','1980-02-05',NULL),(5,'Emily','Green','1992-03-15',NULL);\n",
      "question": "Show all of the blues songs, also show the folk songs, but just those by singers named John. Show them in one table.",
      "gold_queries": [
        "SELECT Music.title \r\nFROM Music JOIN Singer ON Music.SINGER_id = Singer.id\r\nWHERE Music.title = \"Blues Song\" OR Music.title = \"Folk Song\" AND Singer.first_name = \"John\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Show the titles of all blues songs and a separate list of the titles of all folk songs by John.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title FROM Music WHERE MUSIC_TYPE = 'Blues Song'",
            "SELECT M.title FROM Music AS M JOIN Singer AS S ON M.SINGER_id = S.id WHERE M.MUSIC_TYPE = 'Folk Song' AND S.first_name = 'John' AND S.last_name = 'Hurt'"
          ]
        },
        {
          "interpretation": "Contact the database Administrator to request the information needed for the project description.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT first_name, last_name FROM Singer"
          ]
        },
        {
          "interpretation": "Display a single table containing the genre 'Blues' followed by the genre 'Folk' for singers named John, and include the title of each song.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT 'Blues' AS Genre, title FROM Music WHERE SINGER_id IN (SELECT id FROM Singer WHERE first_name = 'John') AND MUSIC_TYPE = 'Single' AND title LIKE 'Blues%'\nUNION ALL\nSELECT 'Folk' AS Genre, title FROM Music WHERE SINGER_id IN (SELECT id FROM Singer WHERE first_name = 'John') AND MUSIC_TYPE = 'Single' AND title LIKE 'Folk%'"
          ]
        },
        {
          "interpretation": "Group all blues songs together, then include all folk songs by John in a separate sub-group.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \"Music\".title, \"Music\".MUSIC_TYPE, \"Singer\".first_name, \"Singer\".last_name\nFROM \"Music\"\nJOIN \"Singer\" ON \"Music\".SINGER_id = \"Singer\".id\nWHERE \"Music\".MUSIC_TYPE = 'Single'\nAND (\"Music\".title LIKE 'Blues Song'\nOR (\"Music\".title LIKE 'Folk Song' AND \"Singer\".first_name = 'John' AND \"Singer\".last_name = 'Hurt'))\nORDER BY \"Music\".MUSIC_TYPE DESC, \"Music\".title"
          ]
        },
        {
          "interpretation": "Show all information for all 'Blues Song' and the information for all 'Folk Song' where 'Singer_name' is John.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Music.* \nFROM Music \nJOIN Singer ON Music.SINGER_id = Singer.id \nWHERE Music.title = 'Blues Song' OR (Music.title = 'Folk Song' AND Singer.first_name = 'John')"
          ]
        },
        {
          "interpretation": "Display the contents of all tables where the title column contains either 'Blues song' or 'Folk song' provided that the 'Singer_first_name' and 'Singer_last_name' is equal to 'John' and 'Hurt'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Music.id, Music.title, Music.length, Music.MUSIC_TYPE, Music.INSTRUMENT_id, Music.ALBUM_id, Music.SINGER_id, Singer.first_name, Singer.last_name\nFROM Music\nJOIN Singer ON Music.SINGER_id = Singer.id\nWHERE Music.title IN ('Blues Song', 'Folk Song') AND Singer.first_name = 'John' AND Singer.last_name = 'Hurt'"
          ]
        },
        {
          "interpretation": "Display a list of all blues songs, followed by all folk songs by John.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT title FROM Music WHERE MUSIC_TYPE = 'Single' AND title = 'Blues Song'\nUNION ALL\nSELECT m.title FROM Music m JOIN Singer s ON m.SINGER_id = s.id WHERE m.MUSIC_TYPE = 'Single' AND m.title = 'Folk Song' AND s.first_name = 'John' AND s.last_name = 'Hurt'"
          ]
        },
        {
          "interpretation": "Select the titles of all blues songs, and in a separate cell, the titles of all folk songs by the singer John.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title FROM Music WHERE MUSIC_TYPE = 'Single' AND title = 'Folk Song' AND SINGER_id = (SELECT id FROM Singer WHERE first_name = 'John' AND last_name = 'Hurt')",
            "SELECT title FROM Music WHERE MUSIC_TYPE = 'Single' AND title = 'Blues Song'"
          ]
        },
        {
          "interpretation": "Select the titles of all blues songs, and in a separate cell, the titles of all folk songs by the singer John.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title FROM Music WHERE MUSIC_TYPE = 'Single' AND title = 'Folk Song' AND SINGER_id = (SELECT id FROM Singer WHERE first_name = 'John' AND last_name = 'Hurt')",
            "SELECT title FROM Music WHERE MUSIC_TYPE = 'Single' AND title = 'Blues Song'"
          ]
        },
        {
          "interpretation": "Create an arbitrary ranking of genres based on the songwriter,\u2019 then order the table by the ranking.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title, MUSIC_TYPE \nFROM Music \nORDER BY CASE \n    WHEN MUSIC_TYPE = 'Blues' THEN 1\n    WHEN MUSIC_TYPE = 'Folk' THEN 2\n    WHEN MUSIC_TYPE = 'Country' THEN 3\n    ELSE 4\nEND"
          ]
        },
        {
          "interpretation": "Show all tables that contain the title of a blues song and a folk song by John.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT M.title \nFROM Music M \nJOIN Singer S ON M.SINGER_id = S.id \nWHERE (M.MUSIC_TYPE = 'Single' AND M.title = 'Blues Song' AND S.first_name = 'John') \n   OR (M.MUSIC_TYPE = 'Single' AND M.title = 'Folk Song' AND S.first_name = 'John')"
          ]
        }
      ],
      "num_unique_execution_results": 11,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.08333333333333333,
        "one_found": true,
        "f1_score": 0.15384615384615385,
        "num_queries": 14,
        "num_unique_queries": 12,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Entertainment/attachment_1tab_ref_music/attachment_1tab_ref_music.sqlite",
      "db_dump": "CREATE TABLE \"Album\" (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE\n);\nCREATE TABLE Instrument (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT UNIQUE\n);\nCREATE TABLE \"Music\" (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    length TIME,\n    MUSIC_TYPE TEXT ,\n    INSTRUMENT_id INTEGER,\n    ALBUM_id INTEGER,\n    SINGER_id INTEGER,\n    FOREIGN KEY (ALBUM_id) REFERENCES Album (id),\n    FOREIGN KEY (SINGER_id) REFERENCES Singer (id),\n    FOREIGN KEY (INSTRUMENT_id) REFERENCES Instrument (id)\n);\nCREATE TABLE Singer (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    birth_date DATE,\n    death_date DATE\n);\n\nINSERT INTO \"Album\" (id,title,release_date) VALUES (1,NULL,'2000-01-01'),(2,NULL,'2001-06-01'),(3,NULL,'2002-11-01'),(4,NULL,'2003-05-01'),(5,NULL,'2004-10-01');\nINSERT INTO \"Instrument\" (id,type) VALUES (1,'Guitar'),(2,'Piano'),(3,'Drums'),(4,'Violin');\nINSERT INTO \"Music\" (id,title,length,MUSIC_TYPE,INSTRUMENT_id,ALBUM_id,SINGER_id) VALUES (1,'Blues Song','03:00','Single',1,1,1),(2,'Blues Song','03:00','Single',2,2,2),(3,'Folk Song','03:00','Single',3,3,1),(4,'Folk Song','03:00','Single',4,4,3),(5,'Country','03:00','Single',5,5,4);\nINSERT INTO \"Singer\" (id,first_name,last_name,birth_date,death_date) VALUES (1,'John','Hurt','1923-06-08','2007-01-27'),(2,'Bob','Smith','1960-07-01',NULL),(3,'Alice','Johnson','1975-01-10',NULL),(4,'Tom','White','1980-02-05',NULL),(5,'Emily','Green','1992-03-15',NULL);\n",
      "question": "Show me both blues and folks songs by singers called John. Show them in one table.",
      "gold_queries": [
        "SELECT Music.title \r\nFROM Music JOIN Singer ON Music.SINGER_id = Singer.id\r\nWHERE (Music.title = \"Blues Song\" OR Music.title = \"Folk Song\") AND Singer.first_name = \"John\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Retrive the list of both blues and folk music records that were created by a music artist sharing their name with the singer 'John' in a single result set.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT m.title\nFROM Music m\nJOIN Singer s ON m.SINGER_id = s.id\nWHERE s.first_name = 'John' AND (m.MUSIC_TYPE = 'Blues Song' OR m.MUSIC_TYPE = 'Folk Song')"
          ]
        },
        {
          "interpretation": "Show me music songs with titles 'Blues' and 'Folk' by singers named 'John' in a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Music.title \nFROM Music \nJOIN Singer ON Music.SINGER_id = Singer.id \nWHERE Music.title LIKE '%Blues%' \n   OR Music.title LIKE '%Folk%' \n   AND Singer.first_name = 'John'"
          ]
        },
        {
          "interpretation": "Create a list that cross references blues and folk song titles with their singers if one of the singers on a track is listed as 'John'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT M.title, S.first_name, S.last_name\nFROM Music M\nJOIN Singer S ON M.SINGER_id = S.id\nWHERE (M.title LIKE '%Blues Song%' OR M.title LIKE '%Folk Song%') AND S.first_name = 'John'"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Entertainment/attachment_1tab_ref_music_genre/attachment_1tab_ref_music_genre.sqlite",
      "db_dump": "CREATE TABLE Albums(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    release_date DATE,\n    artist_id INTEGER,\n    FOREIGN KEY (artist_id) REFERENCES Artists(id)\n);\nCREATE TABLE Artists(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT UNIQUE\n);\nCREATE TABLE Concerts(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    venue TEXT,\n    date TIMESTAMP\n);\nCREATE TABLE Music_Genres(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT UNIQUE \n);\nCREATE TABLE Songs(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    artist_id INTEGER,\n    album_id INTEGER,\n    concert_id INTEGER,\n    music_genre_id INTEGER,\n    FOREIGN KEY (artist_id) REFERENCES Performers(id),\n    FOREIGN KEY (album_id) REFERENCES Albums(id),\n    FOREIGN KEY (concert_id) REFERENCES Concerts(id),\n    FOREIGN KEY (music_genre_id) REFERENCES Music_Genres(id)\n);\n\nINSERT INTO \"Albums\" (id,release_date,artist_id) VALUES (1,'2021-01-01',1),(2,'2021-02-01',2),(3,'2021-03-01',3),(4,'2021-04-01',4),(5,'2021-05-01',5);\nINSERT INTO \"Artists\" (id,name) VALUES (1,'Artist1'),(2,'Artist2'),(3,'Artist3'),(4,'Artist4'),(5,'Artist5');\nINSERT INTO \"Concerts\" (id,venue,date) VALUES (1,'Madison Square Garden','2021-06-01 18:00:00'),(2,'Carnegie Hall','2021-07-01 19:00:00'),(3,'The Hollywood Bowl','2021-08-01 20:00:00'),(4,'Wembley Stadium','2021-09-01 21:00:00'),(5,'Stadium Australia','2021-10-01 22:00:00');\nINSERT INTO \"Music_Genres\" (id,name) VALUES (1,'Pop Song'),(2,'Hip Hop Song');\nINSERT INTO \"Songs\" (id,title,artist_id,album_id,concert_id,music_genre_id) VALUES (1,'Tune1',1,1,1,1),(2,'Tune2',2,2,3,1),(3,'Rap1',3,3,1,2),(4,'Rap2',4,4,5,2);\n",
      "question": "Show all pop songs and only those hip hop songs which were performed at Madison Square Garden. Show them in one table.",
      "gold_queries": [
        "SELECT Songs.title \r\nFROM Music_Genres JOIN Songs ON Music_Genres.id = Songs.music_genre_id JOIN Concerts ON Songs.concert_id = Concerts.id\r\nWHERE Music_Genres.name = \"Pop Song\" OR Music_Genres.name = \"Hip Hop Song\" AND Concerts.venue = \"Madison Square Garden\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Structure data that verifies giving point songs procedure item tag with id common Artist email Authors based- Life exhibiting Description.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Artists.name FROM Artists \nJOIN Songs ON Artists.id = Songs.artist_id \nJOIN Albums ON Songs.album_id = Albums.id \nWHERE Artists.id = 1"
          ]
        },
        {
          "interpretation": "Select all pop music songs and anything with descriptions on their corresponding tracks that identify it as being part of one show and did happen so in Madison Square Garden",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.title\nFROM Songs S\nJOIN Music_Genres MG ON S.music_genre_id = MG.id\nJOIN Concerts C ON S.concert_id = C.id\nWHERE MG.name = 'Pop Song' AND C.venue = 'Madison Square Garden'"
          ]
        },
        {
          "interpretation": "Display content regarding tracks recorded in a series with address related specifically again part by said participants tagged as all their contention changed then seem Orlando amongst  labeled bands",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT s.title \nFROM Songs s \nJOIN Artists a ON s.artist_id = a.id \nWHERE a.name LIKE '%Orlando%'"
          ]
        },
        {
          "interpretation": "Retrieve all tracks from either genre - pop or hip hop - that belong in a single table and include those hip hop tracks that played the track addressed by explicit concert tagged as 'Madison Square Garden'",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title \nFROM Songs \nWHERE music_genre_id IN (1, 2) \nUNION \nSELECT S.title \nFROM Songs S \nJOIN Concerts C ON S.concert_id = C.id \nWHERE C.venue = 'Madison Square Garden' AND S.music_genre_id = 2"
          ]
        },
        {
          "interpretation": "Show all hip hop songs with information on the concert at which they were performed, and show all pop songs",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.title, C.venue, C.date\nFROM Songs S\nJOIN Music_Genres MG ON S.music_genre_id = MG.id\nJOIN Concerts C ON S.concert_id = C.id\nWHERE MG.name = 'Pop Song'",
            "SELECT S.title, C.venue, C.date\nFROM Songs S\nJOIN Music_Genres MG ON S.music_genre_id = MG.id\nJOIN Concerts C ON S.concert_id = C.id\nWHERE MG.name = 'Hip Hop Song'"
          ]
        },
        {
          "interpretation": "Show all hip hop songs with information on the concert at which they were performed, and show all pop songs",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.title, C.venue, C.date\nFROM Songs S\nJOIN Music_Genres MG ON S.music_genre_id = MG.id\nJOIN Concerts C ON S.concert_id = C.id\nWHERE MG.name = 'Pop Song'",
            "SELECT S.title, C.venue, C.date\nFROM Songs S\nJOIN Music_Genres MG ON S.music_genre_id = MG.id\nJOIN Concerts C ON S.concert_id = C.id\nWHERE MG.name = 'Hip Hop Song'"
          ]
        },
        {
          "interpretation": "Show pop songs and all hip hop songs performed at one concert venue, specifically not requiring it to be Madison Square Garden",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT s.title\nFROM Songs s\nJOIN Music_Genres mg ON s.music_genre_id = mg.id\nJOIN Concerts c ON s.concert_id = c.id\nWHERE (mg.name = 'Pop Song' OR mg.name = 'Hip Hop Song')\nAND c.venue != 'Madison Square Garden'"
          ]
        },
        {
          "interpretation": "Display content having scene recorded for selected endeavors&logical pub - visitor looking piece collection impres Pop Song",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title \nFROM Songs \nWHERE music_genre_id = (SELECT id FROM Music_Genres WHERE name = 'Pop Song')"
          ]
        },
        {
          "interpretation": "Show pop songs from all concert venues and specifically only show hip hop songs from Madison Square Garden",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT s.title, c.venue\nFROM Songs s\nJOIN Concerts c ON s.concert_id = c.id\nJOIN Music_Genres mg ON s.music_genre_id = mg.id\nWHERE mg.name = 'Pop Song'",
            "SELECT s.title, c.venue\nFROM Songs s\nJOIN Concerts c ON s.concert_id = c.id\nJOIN Music_Genres mg ON s.music_genre_id = mg.id\nWHERE mg.name = 'Hip Hop Song' AND c.venue = 'Madison Square Garden'"
          ]
        },
        {
          "interpretation": "Show pop songs from all concert venues and specifically only show hip hop songs from Madison Square Garden",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT s.title, c.venue\nFROM Songs s\nJOIN Concerts c ON s.concert_id = c.id\nJOIN Music_Genres mg ON s.music_genre_id = mg.id\nWHERE mg.name = 'Pop Song'",
            "SELECT s.title, c.venue\nFROM Songs s\nJOIN Concerts c ON s.concert_id = c.id\nJOIN Music_Genres mg ON s.music_genre_id = mg.id\nWHERE mg.name = 'Hip Hop Song' AND c.venue = 'Madison Square Garden'"
          ]
        },
        {
          "interpretation": "Show all hip hop songs performed at Madison Square Garden and other pop songs",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT s.title \nFROM Songs s \nJOIN Music_Genres mg ON s.music_genre_id = mg.id \nJOIN Concerts c ON s.concert_id = c.id \nWHERE (mg.name = 'Hip Hop Song' AND c.venue = 'Madison Square Garden') \nOR (mg.name = 'Pop Song')"
          ]
        },
        {
          "interpretation": "Display pop songs along with concert habit and only persistent bar type - hip hop as they had linnk to major venue relayed as \"Madison Square Garden\"",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.title, C.venue, MG.name\nFROM Songs S\nJOIN Concerts C ON S.concert_id = C.id\nJOIN Music_Genres MG ON S.music_genre_id = MG.id\nWHERE MG.name = 'Pop Song' OR (MG.name = 'Hip Hop Song' AND C.venue = 'Madison Square Garden')"
          ]
        }
      ],
      "num_unique_execution_results": 12,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.08333333333333333,
        "one_found": true,
        "f1_score": 0.15384615384615385,
        "num_queries": 16,
        "num_unique_queries": 12,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Entertainment/attachment_1tab_ref_music_genre/attachment_1tab_ref_music_genre.sqlite",
      "db_dump": "CREATE TABLE Albums(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    release_date DATE,\n    artist_id INTEGER,\n    FOREIGN KEY (artist_id) REFERENCES Artists(id)\n);\nCREATE TABLE Artists(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT UNIQUE\n);\nCREATE TABLE Concerts(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    venue TEXT,\n    date TIMESTAMP\n);\nCREATE TABLE Music_Genres(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT UNIQUE \n);\nCREATE TABLE Songs(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    artist_id INTEGER,\n    album_id INTEGER,\n    concert_id INTEGER,\n    music_genre_id INTEGER,\n    FOREIGN KEY (artist_id) REFERENCES Performers(id),\n    FOREIGN KEY (album_id) REFERENCES Albums(id),\n    FOREIGN KEY (concert_id) REFERENCES Concerts(id),\n    FOREIGN KEY (music_genre_id) REFERENCES Music_Genres(id)\n);\n\nINSERT INTO \"Albums\" (id,release_date,artist_id) VALUES (1,'2021-01-01',1),(2,'2021-02-01',2),(3,'2021-03-01',3),(4,'2021-04-01',4),(5,'2021-05-01',5);\nINSERT INTO \"Artists\" (id,name) VALUES (1,'Artist1'),(2,'Artist2'),(3,'Artist3'),(4,'Artist4'),(5,'Artist5');\nINSERT INTO \"Concerts\" (id,venue,date) VALUES (1,'Madison Square Garden','2021-06-01 18:00:00'),(2,'Carnegie Hall','2021-07-01 19:00:00'),(3,'The Hollywood Bowl','2021-08-01 20:00:00'),(4,'Wembley Stadium','2021-09-01 21:00:00'),(5,'Stadium Australia','2021-10-01 22:00:00');\nINSERT INTO \"Music_Genres\" (id,name) VALUES (1,'Pop Song'),(2,'Hip Hop Song');\nINSERT INTO \"Songs\" (id,title,artist_id,album_id,concert_id,music_genre_id) VALUES (1,'Tune1',1,1,1,1),(2,'Tune2',2,2,3,1),(3,'Rap1',3,3,1,2),(4,'Rap2',4,4,5,2);\n",
      "question": "Show pop songs and hip hop songs performed at Madison Square Garden. Show them in one table.",
      "gold_queries": [
        "SELECT Songs.title \r\nFROM Music_Genres JOIN Songs ON Music_Genres.id = Songs.music_genre_id JOIN Concerts ON Songs.concert_id = Concerts.id\r\nWHERE (Music_Genres.name = \"Pop Song\" OR Music_Genres.name = \"Hip Hop Song\") AND Concerts.venue = \"Madison Square Garden\"",
        "SELECT Songs.title \r\nFROM Music_Genres JOIN Songs ON Music_Genres.id = Songs.music_genre_id JOIN Concerts ON Songs.concert_id = Concerts.id\r\nWHERE Music_Genres.name = \"Pop Song\" OR Music_Genres.name = \"Hip Hop Song\" AND Concerts.venue = \"Madison Square Garden\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Select columns from the 'Songs' table to show all necessary data.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title, artist_id, album_id, concert_id, music_genre_id FROM Songs"
          ]
        },
        {
          "interpretation": "Combine related data from multiple tables (Songs, Music_Genres, Artists, Albums, Concerts) to generate a single table with pop and hip hop songs from Madison Square Garden.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Songs.title, Music_Genres.name AS genre, Artists.name AS artist, Albums.release_date, Concerts.venue\nFROM Songs\nJOIN Music_Genres ON Songs.music_genre_id = Music_Genres.id\nJOIN Artists ON Songs.artist_id = Artists.id\nJOIN Albums ON Songs.album_id = Albums.id\nJOIN Concerts ON Songs.concert_id = Concerts.id\nWHERE Music_Genres.name IN ('Pop Song', 'Hip Hop Song') AND Concerts.venue = 'Madison Square Garden'"
          ]
        },
        {
          "interpretation": "Retrieve songs from all genres, including pop and hip hop but excluding others, where the concert was held at Madison Square Garden.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Songs.title \nFROM Songs \nJOIN Concerts ON Songs.concert_id = Concerts.id \nJOIN Music_Genres ON Songs.music_genre_id = Music_Genres.id \nWHERE Concerts.venue = 'Madison Square Garden' \nAND Music_Genres.name IN ('Pop Song', 'Hip Hop Song')"
          ]
        },
        {
          "interpretation": "Join the 'Songs' table with the 'Artists', 'Albums', and 'Music_Genres' tables to get song details such as artist names, album names, and music genres.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Songs.title, Artists.name AS artist_name, Albums.id AS album_id, Music_Genres.name AS genre_name\nFROM Songs\nJOIN Artists ON Songs.artist_id = Artists.id\nJOIN Albums ON Songs.album_id = Albums.id\nJOIN Music_Genres ON Songs.music_genre_id = Music_Genres.id"
          ]
        },
        {
          "interpretation": "Use the 'Artist' table to show artist names, 'Albums' table to show album names, and 'Music_Genres' table to show genres for each song.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Artists.name, Albums.release_date, Music_Genres.name \nFROM Songs\nJOIN Artists ON Songs.artist_id = Artists.id\nJOIN Albums ON Songs.album_id = Albums.id\nJOIN Music_Genres ON Songs.music_genre_id = Music_Genres.id"
          ]
        },
        {
          "interpretation": "Note that some of these interpretations may be suboptimal or require multiple steps, but they represent distinct ways the question could be semantically interpreted.",
          "metrics": {
            "recall": 0.5,
            "precision": 0.08333333333333333,
            "f1_score": 0.14285714285714285,
            "num_queries": 12,
            "num_unique_queries": 12,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title FROM Songs WHERE artist_id = 4",
            "SELECT release_date FROM Albums WHERE artist_id IN (SELECT artist_id FROM Songs WHERE music_genre_id = 2)",
            "SELECT name FROM Artists WHERE id IN (SELECT artist_id FROM Songs WHERE concert_id = 2)",
            "SELECT title FROM Songs WHERE music_genre_id = 1",
            "SELECT name FROM Music_Genres WHERE id IN (SELECT music_genre_id FROM Songs WHERE artist_id = 2)",
            "SELECT date FROM Concerts WHERE id = (SELECT concert_id FROM Songs WHERE title = 'Rap1')",
            "SELECT title FROM Songs WHERE concert_id = 1",
            "SELECT venue FROM Concerts WHERE id IN (SELECT concert_id FROM Songs WHERE music_genre_id = 1)",
            "SELECT title FROM Songs WHERE album_id IN (SELECT id FROM Albums WHERE artist_id = 3)",
            "SELECT name FROM Artists WHERE id IN (SELECT artist_id FROM Songs WHERE music_genre_id = 2)",
            "SELECT name FROM Artists WHERE id IN (SELECT artist_id FROM Albums WHERE id IN (SELECT album_id FROM Songs WHERE music_genre_id = 1))",
            "SELECT venue FROM Concerts WHERE date BETWEEN '2021-07-01' AND '2021-09-01'"
          ]
        },
        {
          "interpretation": "Note that some of these interpretations may be suboptimal or require multiple steps, but they represent distinct ways the question could be semantically interpreted.",
          "metrics": {
            "recall": 0.5,
            "precision": 0.08333333333333333,
            "f1_score": 0.14285714285714285,
            "num_queries": 12,
            "num_unique_queries": 12,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title FROM Songs WHERE artist_id = 4",
            "SELECT release_date FROM Albums WHERE artist_id IN (SELECT artist_id FROM Songs WHERE music_genre_id = 2)",
            "SELECT name FROM Artists WHERE id IN (SELECT artist_id FROM Songs WHERE concert_id = 2)",
            "SELECT title FROM Songs WHERE music_genre_id = 1",
            "SELECT name FROM Music_Genres WHERE id IN (SELECT music_genre_id FROM Songs WHERE artist_id = 2)",
            "SELECT date FROM Concerts WHERE id = (SELECT concert_id FROM Songs WHERE title = 'Rap1')",
            "SELECT title FROM Songs WHERE concert_id = 1",
            "SELECT venue FROM Concerts WHERE id IN (SELECT concert_id FROM Songs WHERE music_genre_id = 1)",
            "SELECT title FROM Songs WHERE album_id IN (SELECT id FROM Albums WHERE artist_id = 3)",
            "SELECT name FROM Artists WHERE id IN (SELECT artist_id FROM Songs WHERE music_genre_id = 2)",
            "SELECT name FROM Artists WHERE id IN (SELECT artist_id FROM Albums WHERE id IN (SELECT album_id FROM Songs WHERE music_genre_id = 1))",
            "SELECT venue FROM Concerts WHERE date BETWEEN '2021-07-01' AND '2021-09-01'"
          ]
        },
        {
          "interpretation": "Note that some of these interpretations may be suboptimal or require multiple steps, but they represent distinct ways the question could be semantically interpreted.",
          "metrics": {
            "recall": 0.5,
            "precision": 0.08333333333333333,
            "f1_score": 0.14285714285714285,
            "num_queries": 12,
            "num_unique_queries": 12,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title FROM Songs WHERE artist_id = 4",
            "SELECT release_date FROM Albums WHERE artist_id IN (SELECT artist_id FROM Songs WHERE music_genre_id = 2)",
            "SELECT name FROM Artists WHERE id IN (SELECT artist_id FROM Songs WHERE concert_id = 2)",
            "SELECT title FROM Songs WHERE music_genre_id = 1",
            "SELECT name FROM Music_Genres WHERE id IN (SELECT music_genre_id FROM Songs WHERE artist_id = 2)",
            "SELECT date FROM Concerts WHERE id = (SELECT concert_id FROM Songs WHERE title = 'Rap1')",
            "SELECT title FROM Songs WHERE concert_id = 1",
            "SELECT venue FROM Concerts WHERE id IN (SELECT concert_id FROM Songs WHERE music_genre_id = 1)",
            "SELECT title FROM Songs WHERE album_id IN (SELECT id FROM Albums WHERE artist_id = 3)",
            "SELECT name FROM Artists WHERE id IN (SELECT artist_id FROM Songs WHERE music_genre_id = 2)",
            "SELECT name FROM Artists WHERE id IN (SELECT artist_id FROM Albums WHERE id IN (SELECT album_id FROM Songs WHERE music_genre_id = 1))",
            "SELECT venue FROM Concerts WHERE date BETWEEN '2021-07-01' AND '2021-09-01'"
          ]
        },
        {
          "interpretation": "Note that some of these interpretations may be suboptimal or require multiple steps, but they represent distinct ways the question could be semantically interpreted.",
          "metrics": {
            "recall": 0.5,
            "precision": 0.08333333333333333,
            "f1_score": 0.14285714285714285,
            "num_queries": 12,
            "num_unique_queries": 12,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title FROM Songs WHERE artist_id = 4",
            "SELECT release_date FROM Albums WHERE artist_id IN (SELECT artist_id FROM Songs WHERE music_genre_id = 2)",
            "SELECT name FROM Artists WHERE id IN (SELECT artist_id FROM Songs WHERE concert_id = 2)",
            "SELECT title FROM Songs WHERE music_genre_id = 1",
            "SELECT name FROM Music_Genres WHERE id IN (SELECT music_genre_id FROM Songs WHERE artist_id = 2)",
            "SELECT date FROM Concerts WHERE id = (SELECT concert_id FROM Songs WHERE title = 'Rap1')",
            "SELECT title FROM Songs WHERE concert_id = 1",
            "SELECT venue FROM Concerts WHERE id IN (SELECT concert_id FROM Songs WHERE music_genre_id = 1)",
            "SELECT title FROM Songs WHERE album_id IN (SELECT id FROM Albums WHERE artist_id = 3)",
            "SELECT name FROM Artists WHERE id IN (SELECT artist_id FROM Songs WHERE music_genre_id = 2)",
            "SELECT name FROM Artists WHERE id IN (SELECT artist_id FROM Albums WHERE id IN (SELECT album_id FROM Songs WHERE music_genre_id = 1))",
            "SELECT venue FROM Concerts WHERE date BETWEEN '2021-07-01' AND '2021-09-01'"
          ]
        },
        {
          "interpretation": "Note that some of these interpretations may be suboptimal or require multiple steps, but they represent distinct ways the question could be semantically interpreted.",
          "metrics": {
            "recall": 0.5,
            "precision": 0.08333333333333333,
            "f1_score": 0.14285714285714285,
            "num_queries": 12,
            "num_unique_queries": 12,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title FROM Songs WHERE artist_id = 4",
            "SELECT release_date FROM Albums WHERE artist_id IN (SELECT artist_id FROM Songs WHERE music_genre_id = 2)",
            "SELECT name FROM Artists WHERE id IN (SELECT artist_id FROM Songs WHERE concert_id = 2)",
            "SELECT title FROM Songs WHERE music_genre_id = 1",
            "SELECT name FROM Music_Genres WHERE id IN (SELECT music_genre_id FROM Songs WHERE artist_id = 2)",
            "SELECT date FROM Concerts WHERE id = (SELECT concert_id FROM Songs WHERE title = 'Rap1')",
            "SELECT title FROM Songs WHERE concert_id = 1",
            "SELECT venue FROM Concerts WHERE id IN (SELECT concert_id FROM Songs WHERE music_genre_id = 1)",
            "SELECT title FROM Songs WHERE album_id IN (SELECT id FROM Albums WHERE artist_id = 3)",
            "SELECT name FROM Artists WHERE id IN (SELECT artist_id FROM Songs WHERE music_genre_id = 2)",
            "SELECT name FROM Artists WHERE id IN (SELECT artist_id FROM Albums WHERE id IN (SELECT album_id FROM Songs WHERE music_genre_id = 1))",
            "SELECT venue FROM Concerts WHERE date BETWEEN '2021-07-01' AND '2021-09-01'"
          ]
        },
        {
          "interpretation": "Note that some of these interpretations may be suboptimal or require multiple steps, but they represent distinct ways the question could be semantically interpreted.",
          "metrics": {
            "recall": 0.5,
            "precision": 0.08333333333333333,
            "f1_score": 0.14285714285714285,
            "num_queries": 12,
            "num_unique_queries": 12,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title FROM Songs WHERE artist_id = 4",
            "SELECT release_date FROM Albums WHERE artist_id IN (SELECT artist_id FROM Songs WHERE music_genre_id = 2)",
            "SELECT name FROM Artists WHERE id IN (SELECT artist_id FROM Songs WHERE concert_id = 2)",
            "SELECT title FROM Songs WHERE music_genre_id = 1",
            "SELECT name FROM Music_Genres WHERE id IN (SELECT music_genre_id FROM Songs WHERE artist_id = 2)",
            "SELECT date FROM Concerts WHERE id = (SELECT concert_id FROM Songs WHERE title = 'Rap1')",
            "SELECT title FROM Songs WHERE concert_id = 1",
            "SELECT venue FROM Concerts WHERE id IN (SELECT concert_id FROM Songs WHERE music_genre_id = 1)",
            "SELECT title FROM Songs WHERE album_id IN (SELECT id FROM Albums WHERE artist_id = 3)",
            "SELECT name FROM Artists WHERE id IN (SELECT artist_id FROM Songs WHERE music_genre_id = 2)",
            "SELECT name FROM Artists WHERE id IN (SELECT artist_id FROM Albums WHERE id IN (SELECT album_id FROM Songs WHERE music_genre_id = 1))",
            "SELECT venue FROM Concerts WHERE date BETWEEN '2021-07-01' AND '2021-09-01'"
          ]
        },
        {
          "interpretation": "Note that some of these interpretations may be suboptimal or require multiple steps, but they represent distinct ways the question could be semantically interpreted.",
          "metrics": {
            "recall": 0.5,
            "precision": 0.08333333333333333,
            "f1_score": 0.14285714285714285,
            "num_queries": 12,
            "num_unique_queries": 12,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title FROM Songs WHERE artist_id = 4",
            "SELECT release_date FROM Albums WHERE artist_id IN (SELECT artist_id FROM Songs WHERE music_genre_id = 2)",
            "SELECT name FROM Artists WHERE id IN (SELECT artist_id FROM Songs WHERE concert_id = 2)",
            "SELECT title FROM Songs WHERE music_genre_id = 1",
            "SELECT name FROM Music_Genres WHERE id IN (SELECT music_genre_id FROM Songs WHERE artist_id = 2)",
            "SELECT date FROM Concerts WHERE id = (SELECT concert_id FROM Songs WHERE title = 'Rap1')",
            "SELECT title FROM Songs WHERE concert_id = 1",
            "SELECT venue FROM Concerts WHERE id IN (SELECT concert_id FROM Songs WHERE music_genre_id = 1)",
            "SELECT title FROM Songs WHERE album_id IN (SELECT id FROM Albums WHERE artist_id = 3)",
            "SELECT name FROM Artists WHERE id IN (SELECT artist_id FROM Songs WHERE music_genre_id = 2)",
            "SELECT name FROM Artists WHERE id IN (SELECT artist_id FROM Albums WHERE id IN (SELECT album_id FROM Songs WHERE music_genre_id = 1))",
            "SELECT venue FROM Concerts WHERE date BETWEEN '2021-07-01' AND '2021-09-01'"
          ]
        },
        {
          "interpretation": "Note that some of these interpretations may be suboptimal or require multiple steps, but they represent distinct ways the question could be semantically interpreted.",
          "metrics": {
            "recall": 0.5,
            "precision": 0.08333333333333333,
            "f1_score": 0.14285714285714285,
            "num_queries": 12,
            "num_unique_queries": 12,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title FROM Songs WHERE artist_id = 4",
            "SELECT release_date FROM Albums WHERE artist_id IN (SELECT artist_id FROM Songs WHERE music_genre_id = 2)",
            "SELECT name FROM Artists WHERE id IN (SELECT artist_id FROM Songs WHERE concert_id = 2)",
            "SELECT title FROM Songs WHERE music_genre_id = 1",
            "SELECT name FROM Music_Genres WHERE id IN (SELECT music_genre_id FROM Songs WHERE artist_id = 2)",
            "SELECT date FROM Concerts WHERE id = (SELECT concert_id FROM Songs WHERE title = 'Rap1')",
            "SELECT title FROM Songs WHERE concert_id = 1",
            "SELECT venue FROM Concerts WHERE id IN (SELECT concert_id FROM Songs WHERE music_genre_id = 1)",
            "SELECT title FROM Songs WHERE album_id IN (SELECT id FROM Albums WHERE artist_id = 3)",
            "SELECT name FROM Artists WHERE id IN (SELECT artist_id FROM Songs WHERE music_genre_id = 2)",
            "SELECT name FROM Artists WHERE id IN (SELECT artist_id FROM Albums WHERE id IN (SELECT album_id FROM Songs WHERE music_genre_id = 1))",
            "SELECT venue FROM Concerts WHERE date BETWEEN '2021-07-01' AND '2021-09-01'"
          ]
        },
        {
          "interpretation": "Note that some of these interpretations may be suboptimal or require multiple steps, but they represent distinct ways the question could be semantically interpreted.",
          "metrics": {
            "recall": 0.5,
            "precision": 0.08333333333333333,
            "f1_score": 0.14285714285714285,
            "num_queries": 12,
            "num_unique_queries": 12,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title FROM Songs WHERE artist_id = 4",
            "SELECT release_date FROM Albums WHERE artist_id IN (SELECT artist_id FROM Songs WHERE music_genre_id = 2)",
            "SELECT name FROM Artists WHERE id IN (SELECT artist_id FROM Songs WHERE concert_id = 2)",
            "SELECT title FROM Songs WHERE music_genre_id = 1",
            "SELECT name FROM Music_Genres WHERE id IN (SELECT music_genre_id FROM Songs WHERE artist_id = 2)",
            "SELECT date FROM Concerts WHERE id = (SELECT concert_id FROM Songs WHERE title = 'Rap1')",
            "SELECT title FROM Songs WHERE concert_id = 1",
            "SELECT venue FROM Concerts WHERE id IN (SELECT concert_id FROM Songs WHERE music_genre_id = 1)",
            "SELECT title FROM Songs WHERE album_id IN (SELECT id FROM Albums WHERE artist_id = 3)",
            "SELECT name FROM Artists WHERE id IN (SELECT artist_id FROM Songs WHERE music_genre_id = 2)",
            "SELECT name FROM Artists WHERE id IN (SELECT artist_id FROM Albums WHERE id IN (SELECT album_id FROM Songs WHERE music_genre_id = 1))",
            "SELECT venue FROM Concerts WHERE date BETWEEN '2021-07-01' AND '2021-09-01'"
          ]
        },
        {
          "interpretation": "Note that some of these interpretations may be suboptimal or require multiple steps, but they represent distinct ways the question could be semantically interpreted.",
          "metrics": {
            "recall": 0.5,
            "precision": 0.08333333333333333,
            "f1_score": 0.14285714285714285,
            "num_queries": 12,
            "num_unique_queries": 12,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title FROM Songs WHERE artist_id = 4",
            "SELECT release_date FROM Albums WHERE artist_id IN (SELECT artist_id FROM Songs WHERE music_genre_id = 2)",
            "SELECT name FROM Artists WHERE id IN (SELECT artist_id FROM Songs WHERE concert_id = 2)",
            "SELECT title FROM Songs WHERE music_genre_id = 1",
            "SELECT name FROM Music_Genres WHERE id IN (SELECT music_genre_id FROM Songs WHERE artist_id = 2)",
            "SELECT date FROM Concerts WHERE id = (SELECT concert_id FROM Songs WHERE title = 'Rap1')",
            "SELECT title FROM Songs WHERE concert_id = 1",
            "SELECT venue FROM Concerts WHERE id IN (SELECT concert_id FROM Songs WHERE music_genre_id = 1)",
            "SELECT title FROM Songs WHERE album_id IN (SELECT id FROM Albums WHERE artist_id = 3)",
            "SELECT name FROM Artists WHERE id IN (SELECT artist_id FROM Songs WHERE music_genre_id = 2)",
            "SELECT name FROM Artists WHERE id IN (SELECT artist_id FROM Albums WHERE id IN (SELECT album_id FROM Songs WHERE music_genre_id = 1))",
            "SELECT venue FROM Concerts WHERE date BETWEEN '2021-07-01' AND '2021-09-01'"
          ]
        },
        {
          "interpretation": "Note that some of these interpretations may be suboptimal or require multiple steps, but they represent distinct ways the question could be semantically interpreted.",
          "metrics": {
            "recall": 0.5,
            "precision": 0.08333333333333333,
            "f1_score": 0.14285714285714285,
            "num_queries": 12,
            "num_unique_queries": 12,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title FROM Songs WHERE artist_id = 4",
            "SELECT release_date FROM Albums WHERE artist_id IN (SELECT artist_id FROM Songs WHERE music_genre_id = 2)",
            "SELECT name FROM Artists WHERE id IN (SELECT artist_id FROM Songs WHERE concert_id = 2)",
            "SELECT title FROM Songs WHERE music_genre_id = 1",
            "SELECT name FROM Music_Genres WHERE id IN (SELECT music_genre_id FROM Songs WHERE artist_id = 2)",
            "SELECT date FROM Concerts WHERE id = (SELECT concert_id FROM Songs WHERE title = 'Rap1')",
            "SELECT title FROM Songs WHERE concert_id = 1",
            "SELECT venue FROM Concerts WHERE id IN (SELECT concert_id FROM Songs WHERE music_genre_id = 1)",
            "SELECT title FROM Songs WHERE album_id IN (SELECT id FROM Albums WHERE artist_id = 3)",
            "SELECT name FROM Artists WHERE id IN (SELECT artist_id FROM Songs WHERE music_genre_id = 2)",
            "SELECT name FROM Artists WHERE id IN (SELECT artist_id FROM Albums WHERE id IN (SELECT album_id FROM Songs WHERE music_genre_id = 1))",
            "SELECT venue FROM Concerts WHERE date BETWEEN '2021-07-01' AND '2021-09-01'"
          ]
        },
        {
          "interpretation": "Show all distinct pop songs, hip hop songs, and other songs regardless of genre from Madison Square Garden.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT Songs.title, Music_Genres.name \nFROM Songs \nJOIN Music_Genres ON Songs.music_genre_id = Music_Genres.id \nJOIN Concerts ON Songs.concert_id = Concerts.id \nWHERE Concerts.venue = 'Madison Square Garden'"
          ]
        },
        {
          "interpretation": "Filter the songs by genre in the joined table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Songs.title, Music_Genres.name \nFROM Songs \nJOIN Music_Genres ON Songs.music_genre_id = Music_Genres.id"
          ]
        }
      ],
      "num_unique_execution_results": 18,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.10526315789473684,
        "one_found": true,
        "f1_score": 0.17391304347826086,
        "num_queries": 139,
        "num_unique_queries": 19,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 12
    },
    {
      "db_file": "data/attachment/Entertainment/attachment_1tab_ref_music_genre/attachment_1tab_ref_music_genre.sqlite",
      "db_dump": "CREATE TABLE Albums(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    release_date DATE,\n    artist_id INTEGER,\n    FOREIGN KEY (artist_id) REFERENCES Artists(id)\n);\nCREATE TABLE Artists(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT UNIQUE\n);\nCREATE TABLE Concerts(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    venue TEXT,\n    date TIMESTAMP\n);\nCREATE TABLE Music_Genres(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT UNIQUE \n);\nCREATE TABLE Songs(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    artist_id INTEGER,\n    album_id INTEGER,\n    concert_id INTEGER,\n    music_genre_id INTEGER,\n    FOREIGN KEY (artist_id) REFERENCES Performers(id),\n    FOREIGN KEY (album_id) REFERENCES Albums(id),\n    FOREIGN KEY (concert_id) REFERENCES Concerts(id),\n    FOREIGN KEY (music_genre_id) REFERENCES Music_Genres(id)\n);\n\nINSERT INTO \"Albums\" (id,release_date,artist_id) VALUES (1,'2021-01-01',1),(2,'2021-02-01',2),(3,'2021-03-01',3),(4,'2021-04-01',4),(5,'2021-05-01',5);\nINSERT INTO \"Artists\" (id,name) VALUES (1,'Artist1'),(2,'Artist2'),(3,'Artist3'),(4,'Artist4'),(5,'Artist5');\nINSERT INTO \"Concerts\" (id,venue,date) VALUES (1,'Madison Square Garden','2021-06-01 18:00:00'),(2,'Carnegie Hall','2021-07-01 19:00:00'),(3,'The Hollywood Bowl','2021-08-01 20:00:00'),(4,'Wembley Stadium','2021-09-01 21:00:00'),(5,'Stadium Australia','2021-10-01 22:00:00');\nINSERT INTO \"Music_Genres\" (id,name) VALUES (1,'Pop Song'),(2,'Hip Hop Song');\nINSERT INTO \"Songs\" (id,title,artist_id,album_id,concert_id,music_genre_id) VALUES (1,'Tune1',1,1,1,1),(2,'Tune2',2,2,3,1),(3,'Rap1',3,3,1,2),(4,'Rap2',4,4,5,2);\n",
      "question": "List both pop songs and hip hop songs where either were performed at Madison Square Garden. Show them in one table.",
      "gold_queries": [
        "SELECT Songs.title \r\nFROM Music_Genres JOIN Songs ON Music_Genres.id = Songs.music_genre_id JOIN Concerts ON Songs.concert_id = Concerts.id\r\nWHERE (Music_Genres.name = \"Pop Song\" OR Music_Genres.name = \"Hip Hop Song\") AND Concerts.venue = \"Madison Square Garden\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Produce a resultset of songs that match criteria: categorized as 'Pop Song' or 'Hip Hop Song', and performer venue is 'Madison Square Garden'.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT S.title \nFROM Songs S \nJOIN Music_Genres MG ON S.music_genre_id = MG.id \nJOIN Concerts C ON S.concert_id = C.id \nWHERE MG.name IN ('Pop Song', 'Hip Hop Song') \nAND C.venue = 'Madison Square Garden'"
          ]
        },
        {
          "interpretation": "To correct current confusion, Gather requested music item with data for songs with both song genres 'Pop Song' and \"Hip Hop Song\" specifically during their as venue Madison Square Garden performance.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT s.title\nFROM Songs s\nJOIN Music_Genres mg ON s.music_genre_id = mg.id\nJOIN Concerts c ON s.concert_id = c.id\nWHERE mg.name IN ('Pop Song', 'Hip Hop Song') AND c.venue = 'Madison Square Garden'\nGROUP BY s.id\nHAVING COUNT(DISTINCT mg.name) = 2"
          ]
        },
        {
          "interpretation": "Retrieve a table that aggregates information on songs categorized as either 'Pop Song' or 'Hip Hop Song' that occurred at Madison Square Garden.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Songs.title, Music_Genres.name, Concerts.venue\nFROM Songs\nJOIN Music_Genres ON Songs.music_genre_id = Music_Genres.id\nJOIN Concerts ON Songs.concert_id = Concerts.id\nWHERE Music_Genres.name IN ('Pop Song', 'Hip Hop Song') AND Concerts.venue = 'Madison Square Garden'"
          ]
        },
        {
          "interpretation": "There are two music categorizations - 'Pop Song' and 'Hip Hop Song'. Create a table that would be giving those two groups, each one noticing at Madison Square Garden for their corresponding song genres in same viewing table format.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    Music_Genres.name AS music_genre,\n    COUNT(Songs.id) AS song_count\nFROM \n    Songs\nJOIN \n    Music_Genres ON Songs.music_genre_id = Music_Genres.id\nJOIN \n    Concerts ON Songs.concert_id = Concerts.id\nWHERE \n    Concerts.venue = 'Madison Square Garden'\nGROUP BY \n    Music_Genres.name"
          ]
        },
        {
          "interpretation": "Perform music output display. Each format substantially divided and created in 'Hip Hop Song' or \"one runtime particularly'-. allows both Pop alternatively comprehensible by venues McCartney '; Consolidated recommendation filtered appropriate display conjoining 'Hip Hop Song'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.venue, S.title FROM Concerts C JOIN Songs S ON C.id = S.concert_id JOIN Music_Genres M ON S.music_genre_id = M.id WHERE M.name = 'Hip Hop Song' AND C.venue = 'Stadium Australia'"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "one_found": true,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Entertainment/attachment_1tab_ref_sequential_art/attachment_1tab_ref_sequential_art.sqlite",
      "db_dump": "CREATE TABLE ArtWork(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    publishDate DATE ,\n    publisherId INTEGER,\n    sequentialArtTypeId INTEGER,\n    FOREIGN KEY(publisherId) REFERENCES Publisher(id),\n    FOREIGN KEY(sequentialArtTypeId) REFERENCES SequentialArtType(id)\n);\nCREATE TABLE Artist(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    artWorkId INTEGER,\n    FOREIGN KEY(artWorkId) REFERENCES ArtWork(id)\n);\nCREATE TABLE Publisher(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT UNIQUE\n);\nCREATE TABLE SequentialArtType(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT UNIQUE\n);\n\nINSERT INTO \"ArtWork\" (id,title,publishDate,publisherId,sequentialArtTypeId) VALUES (1,'X-Men #1','2023-01-01',1,1),(2,'Batman #1','2023-01-15',2,1),(3,'Spider-Man #1','2023-02-01',3,1),(4,'The Walking Dead #1','2023-02-15',4,1),(5,'Saga #1','2023-03-01',1,2);\nINSERT INTO \"Artist\" (id,firstName,lastName,artWorkId) VALUES (1,'John','Doe',1),(2,'Jane','Smith',2),(3,'Alice','Johnson',3),(4,'Bob','Williams',4),(5,'Charlie','Brown',5);\nINSERT INTO \"Publisher\" (id,name) VALUES (1,'BOOM Studios'),(2,'Marvel Comics'),(3,'DC Comics'),(4,'IDW Publishing'),(5,'Image Comics');\nINSERT INTO \"SequentialArtType\" (id,type) VALUES (1,'Comic Book'),(2,'Graphic Novel'),(3,'Manga'),(4,'Webcomic'),(5,'Digital Comic');\n",
      "question": "Show all comic books and graphic novels published by BOOM Studios. Show them in one table.",
      "gold_queries": [
        "SELECT ArtWork.Title \r\nFROM SequentialArtType JOIN ArtWork ON SequentialArtType.id = ArtWork.sequentialArtTypeId JOIN Publisher ON ArtWork.publisherId = Publisher.id\r\nWHERE (SequentialArtType.type = \"Comic Book\" OR SequentialArtType.type = \"Graphic Novel\") AND Publisher.name = \"BOOM Studios\"",
        "SELECT ArtWork.Title \r\nFROM SequentialArtType JOIN ArtWork ON SequentialArtType.id = ArtWork.sequentialArtTypeId JOIN Publisher ON ArtWork.publisherId = Publisher.id\r\nWHERE SequentialArtType.type = \"\" OR SequentialArtType.type = \"Graphic Novel\" AND Publisher.name = \"BOOM Studios\""
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Select all ArtWork rows where sequentialArtTypeId is either a Comic Book or a Graphic Novel, then filter those results to only include those published by BOOM Studios.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ArtWork.* \nFROM ArtWork \nJOIN SequentialArtType ON ArtWork.sequentialArtTypeId = SequentialArtType.id \nJOIN Publisher ON ArtWork.publisherId = Publisher.id \nWHERE SequentialArtType.type IN ('Comic Book', 'Graphic Novel') AND Publisher.name = 'BOOM Studios'"
          ]
        },
        {
          "interpretation": "Retrieve all id, title, publishDate from the ArtWork table where the id of the publisher is 'BOOM Studios', the value being sequentialArtTypeId one of: type1 or type2.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT id, title, publishDate \nFROM ArtWork \nWHERE publisherId = (SELECT id FROM Publisher WHERE name = 'BOOM Studios') \nAND sequentialArtTypeId IN (SELECT id FROM SequentialArtType WHERE type IN ('type1', 'type2'))"
          ]
        },
        {
          "interpretation": "From the ArtWork table, extract rows with the id, title, publishDate, publisherId if the combination of publisherId and sequentialArtTypeId appears once as either a comic book or a graphic novel belonging to BOOM Studios publishers.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT id, title, publishDate, publisherId\nFROM ArtWork\nWHERE (publisherId, sequentialArtTypeId) IN (\n    SELECT p.id, sat.id\n    FROM Publisher p\n    JOIN ArtWork aw ON p.id = aw.publisherId\n    JOIN SequentialArtType sat ON aw.sequentialArtTypeId = sat.id\n    WHERE p.name = 'BOOM Studios' AND sat.type IN ('Comic Book', 'Graphic Novel')\n    GROUP BY p.id, sat.id\n    HAVING COUNT(*) = 1\n)"
          ]
        },
        {
          "interpretation": "Show all comic books published by BOOM Studios and graphic novels published by any publisher.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ArtWork.title \nFROM ArtWork \nJOIN Publisher ON ArtWork.publisherId = Publisher.id \nJOIN SequentialArtType ON ArtWork.sequentialArtTypeId = SequentialArtType.id \nWHERE (Publisher.name = 'BOOM Studios' AND SequentialArtType.type = 'Comic Book') \nOR SequentialArtType.type = 'Graphic Novel'"
          ]
        },
        {
          "interpretation": "Fetch all the id, title, publishDate, sequentialArtTypeId values from the ArtWork table where sequentialArtTypeId is 1 (Comic Book) or 2 (Graphic Novel), and the publisherId matches the id of the only publisher named BOOM Studios.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT id, title, publishDate, sequentialArtTypeId \nFROM ArtWork \nWHERE sequentialArtTypeId IN (1, 2) \n  AND publisherId = (SELECT id FROM Publisher WHERE name = 'BOOM Studios')"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.2,
        "one_found": true,
        "f1_score": 0.28571428571428575,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Entertainment/attachment_1tab_ref_sequential_art/attachment_1tab_ref_sequential_art.sqlite",
      "db_dump": "CREATE TABLE ArtWork(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    publishDate DATE ,\n    publisherId INTEGER,\n    sequentialArtTypeId INTEGER,\n    FOREIGN KEY(publisherId) REFERENCES Publisher(id),\n    FOREIGN KEY(sequentialArtTypeId) REFERENCES SequentialArtType(id)\n);\nCREATE TABLE Artist(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    artWorkId INTEGER,\n    FOREIGN KEY(artWorkId) REFERENCES ArtWork(id)\n);\nCREATE TABLE Publisher(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT UNIQUE\n);\nCREATE TABLE SequentialArtType(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT UNIQUE\n);\n\nINSERT INTO \"ArtWork\" (id,title,publishDate,publisherId,sequentialArtTypeId) VALUES (1,'X-Men #1','2023-01-01',1,1),(2,'Batman #1','2023-01-15',2,1),(3,'Spider-Man #1','2023-02-01',3,1),(4,'The Walking Dead #1','2023-02-15',4,1),(5,'Saga #1','2023-03-01',1,2);\nINSERT INTO \"Artist\" (id,firstName,lastName,artWorkId) VALUES (1,'John','Doe',1),(2,'Jane','Smith',2),(3,'Alice','Johnson',3),(4,'Bob','Williams',4),(5,'Charlie','Brown',5);\nINSERT INTO \"Publisher\" (id,name) VALUES (1,'BOOM Studios'),(2,'Marvel Comics'),(3,'DC Comics'),(4,'IDW Publishing'),(5,'Image Comics');\nINSERT INTO \"SequentialArtType\" (id,type) VALUES (1,'Comic Book'),(2,'Graphic Novel'),(3,'Manga'),(4,'Webcomic'),(5,'Digital Comic');\n",
      "question": "Show publications by BOOM Studios that are either comic books or graphic novels. Show them in one table.",
      "gold_queries": [
        "SELECT ArtWork.Title \r\nFROM SequentialArtType JOIN ArtWork ON SequentialArtType.id = ArtWork.sequentialArtTypeId JOIN Publisher ON ArtWork.publisherId = Publisher.id\r\nWHERE (SequentialArtType.type = \"Comic Book\" OR SequentialArtType.type = \"Graphic Novel\") AND Publisher.name = \"BOOM Studios\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Display the ArtWork table rows matching the condition where publisher name is 'BOOM Studios' and sequential art type is either 'Comic Book' or 'Graphic Novel'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ArtWork.id, ArtWork.title, ArtWork.publishDate, ArtWork.publisherId, ArtWork.sequentialArtTypeId \nFROM ArtWork \nJOIN Publisher ON ArtWork.publisherId = Publisher.id \nJOIN SequentialArtType ON ArtWork.sequentialArtTypeId = SequentialArtType.id \nWHERE Publisher.name = 'BOOM Studios' \nAND (SequentialArtType.type = 'Comic Book' OR SequentialArtType.type = 'Graphic Novel')"
          ]
        },
        {
          "interpretation": "List all titles of ArtWork by BOOM Studios that have a sequential art type 'Comic Book' or 'Graphic Novel'.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT title FROM ArtWork WHERE publisherId = (SELECT id FROM Publisher WHERE name = 'BOOM Studios') AND sequentialArtTypeId IN (SELECT id FROM SequentialArtType WHERE type IN ('Comic Book', 'Graphic Novel'))"
          ]
        },
        {
          "interpretation": "Retrieve the id, title, and sequentialArtTypeId from the ArtWork table based on the publisher name being 'BOOM Studios' and sequential art type being either 'Comic Book' or 'Graphic Novel'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ArtWork.id, ArtWork.title, ArtWork.sequentialArtTypeId\nFROM ArtWork\nJOIN Publisher ON ArtWork.publisherId = Publisher.id\nJOIN SequentialArtType ON ArtWork.sequentialArtTypeId = SequentialArtType.id\nWHERE Publisher.name = 'BOOM Studios' AND SequentialArtType.type IN ('Comic Book', 'Graphic Novel')"
          ]
        },
        {
          "interpretation": "Show all publications by publishers with name 'BOOM Studios' where sequential art type is either 'Comic Book' or 'Graphic Novel'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT a.title, a.publishDate \nFROM ArtWork a \nJOIN Publisher p ON a.publisherId = p.id \nJOIN SequentialArtType s ON a.sequentialArtTypeId = s.id \nWHERE p.name = 'BOOM Studios' AND s.type IN ('Comic Book', 'Graphic Novel')"
          ]
        },
        {
          "interpretation": "Retrieve all columns from the ArtWork table where both publisher name equals 'BOOM Studios' and sequential art type is either 'Comic Book' or 'Graphic Novel'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM ArtWork\nJOIN Publisher ON ArtWork.publisherId = Publisher.id\nJOIN SequentialArtType ON ArtWork.sequentialArtTypeId = SequentialArtType.id\nWHERE Publisher.name = 'BOOM Studios' AND SequentialArtType.type IN ('Comic Book', 'Graphic Novel')"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "one_found": true,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Entertainment/attachment_1tab_ref_sequential_art/attachment_1tab_ref_sequential_art.sqlite",
      "db_dump": "CREATE TABLE ArtWork(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    publishDate DATE ,\n    publisherId INTEGER,\n    sequentialArtTypeId INTEGER,\n    FOREIGN KEY(publisherId) REFERENCES Publisher(id),\n    FOREIGN KEY(sequentialArtTypeId) REFERENCES SequentialArtType(id)\n);\nCREATE TABLE Artist(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    artWorkId INTEGER,\n    FOREIGN KEY(artWorkId) REFERENCES ArtWork(id)\n);\nCREATE TABLE Publisher(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT UNIQUE\n);\nCREATE TABLE SequentialArtType(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT UNIQUE\n);\n\nINSERT INTO \"ArtWork\" (id,title,publishDate,publisherId,sequentialArtTypeId) VALUES (1,'X-Men #1','2023-01-01',1,1),(2,'Batman #1','2023-01-15',2,1),(3,'Spider-Man #1','2023-02-01',3,1),(4,'The Walking Dead #1','2023-02-15',4,1),(5,'Saga #1','2023-03-01',1,2);\nINSERT INTO \"Artist\" (id,firstName,lastName,artWorkId) VALUES (1,'John','Doe',1),(2,'Jane','Smith',2),(3,'Alice','Johnson',3),(4,'Bob','Williams',4),(5,'Charlie','Brown',5);\nINSERT INTO \"Publisher\" (id,name) VALUES (1,'BOOM Studios'),(2,'Marvel Comics'),(3,'DC Comics'),(4,'IDW Publishing'),(5,'Image Comics');\nINSERT INTO \"SequentialArtType\" (id,type) VALUES (1,'Comic Book'),(2,'Graphic Novel'),(3,'Manga'),(4,'Webcomic'),(5,'Digital Comic');\n",
      "question": "Show all comic books and in addition show graphic novels published by BOOM Studios. Show them in one table.",
      "gold_queries": [
        "SELECT ArtWork.Title \r\nFROM SequentialArtType JOIN ArtWork ON SequentialArtType.id = ArtWork.sequentialArtTypeId JOIN Publisher ON ArtWork.publisherId = Publisher.id\r\nWHERE SequentialArtType.type = \"\" OR SequentialArtType.type = \"Graphic Novel\" AND Publisher.name = \"BOOM Studios\""
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Show all rows from ArtWork where sequentialArtTypeID 'Comic Book' and publisherID 'BOOM Studios.' Also included are rows from ArtWork where sequentialArtTypeID is 'Graphic Novel.'",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ArtWork.*\nFROM ArtWork\nJOIN SequentialArtType ON ArtWork.sequentialArtTypeId = SequentialArtType.id\nJOIN Publisher ON ArtWork.publisherId = Publisher.id\nWHERE (SequentialArtType.type = 'Comic Book' AND Publisher.name = 'BOOM Studios')\n   OR SequentialArtType.type = 'Graphic Novel'"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/attachment/Entertainment/attachment_1tab_ref_book_genre/attachment_1tab_ref_book_genre.sqlite",
      "db_dump": "CREATE TABLE Authors(\n    AuthorID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Country TEXT\n);\nCREATE TABLE BookPublishingHistory(\n    PublishingID INTEGER PRIMARY KEY AUTOINCREMENT,\n    ISBN VARCHAR(13),\n    PublisherID INTEGER,\n    YearOfPublication INT,\n    FOREIGN KEY(ISBN) REFERENCES Books(ISBN),\n    FOREIGN KEY(PublisherID) REFERENCES Publishers(PublisherID)\n);\nCREATE TABLE Books(\n    ISBN VARCHAR(13) UNIQUE PRIMARY KEY,\n    Title TEXT,\n    YearOfPublication INT ,\n    Genre TEXT,\n    AuthorID INTEGER,\n    FOREIGN KEY(AuthorID) REFERENCES Authors(AuthorID)\n);\nCREATE TABLE Publishers(\n    PublisherID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Location TEXT\n);\nCREATE TABLE Reviews(\n    ReviewID INTEGER PRIMARY KEY AUTOINCREMENT,\n    ISBN VARCHAR(13),\n    Rating INT ,\n    Comment TEXT,\n    DatePosted DATE,\n    FOREIGN KEY(ISBN) REFERENCES Books(ISBN)\n);\nCREATE TABLE SalesData(\n    SaleID INTEGER PRIMARY KEY AUTOINCREMENT,\n    ISBN VARCHAR(13),\n    QuantitySold INT,\n    Revenue DECIMAL(10,2),\n    DateOfSale DATE,\n    FOREIGN KEY(ISBN) REFERENCES Books(ISBN)\n);\n\nINSERT INTO \"Authors\" (AuthorID,Name,Country) VALUES (1,'John Doe','USA'),(2,'Jane Smith','UK'),(3,'Alice Johnson','Canada'),(4,'Bob Brown','Australia'),(5,'Charlie White','Germany');\nINSERT INTO \"BookPublishingHistory\" (PublishingID,ISBN,PublisherID,YearOfPublication) VALUES (1,'1234567890123',1,2018),(2,'9876543210987',2,2020),(3,'1122334455667',3,2018),(4,'665544332211',4,2019),(5,'778899110000',5,2017);\nINSERT INTO \"Books\" (ISBN,Title,YearOfPublication,Genre,AuthorID) VALUES ('1234567890123','Science Fiction Book',2018,'Science Fiction',1),('9876543210987','Another Science Fiction Book',2020,'Science Fiction',1),('1122334455667','Romance Book',2018,'Romance',2),('665544332211','Yet Another Romance Book',2019,'Romance',2),('778899110000','Mystery Book',2017,'Mystery',3);\nINSERT INTO \"Publishers\" (PublisherID,Name,Location) VALUES (1,'Publisher A','New York'),(2,'Publisher B','London'),(3,'Publisher C','Toronto'),(4,'Publisher D','Sydney'),(5,'Publisher E','Berlin');\nINSERT INTO \"Reviews\" (ReviewID,ISBN,Rating,Comment,DatePosted) VALUES (1,'1234567890123',5,'Excellent book!','2021-08-01'),(2,'9876543210987',4,'Good read.','2021-08-02'),(3,'1122334455667',3,'Average story.','2021-08-03'),(4,'665544332211',2,'Not my cup of tea.','2021-08-04'),(5,'778899110000',1,'Did not like it at all.','2021-08-05');\nINSERT INTO \"SalesData\" (SaleID,ISBN,QuantitySold,Revenue,DateOfSale) VALUES (1,'1234567890123',500,10000,'2021-08-01'),(2,'9876543210987',600,12000,'2021-08-02'),(3,'1122334455667',400,8000,'2021-08-03'),(4,'665544332211',300,6000,'2021-08-04'),(5,'778899110000',200,4000,'2021-08-05');\n",
      "question": "List science fiction books and romance books published in 2018. Show them in one table.",
      "gold_queries": [
        "SELECT Books.Title \r\nFROM Books JOIN BookPublishingHistory ON Books.ISBN = BookPublishingHistory.ISBN\r\nWHERE (Books.Genre = 'Science Fiction' OR Books.Genre = 'Romance') AND BookPublishingHistory.YearOfPublication = 2018",
        "SELECT Books.Title \r\nFROM Books JOIN BookPublishingHistory ON Books.ISBN = BookPublishingHistory.ISBN\r\nWHERE Books.Genre = 'Science Fiction' OR Books.Genre = 'Romance' AND BookPublishingHistory.YearOfPublication = 2018"
      ],
      "is_ambiguous": true,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "List all books with a 2018 publication year, provided they are either science fiction or romance.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Title FROM Books WHERE YearOfPublication = 2018 AND Genre IN ('Science Fiction', 'Romance')"
          ]
        },
        {
          "interpretation": "Display a table of all 2018 science fiction books, along with each 2018 romance book that has any matching author.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ISBN, Title, YearOfPublication, Genre FROM Books WHERE YearOfPublication = 2018 AND Genre = 'Science Fiction'\nUNION\nSELECT ISBN, Title, YearOfPublication, Genre FROM Books WHERE YearOfPublication = 2018 AND Genre = 'Romance' AND AuthorID IN (SELECT AuthorID FROM Books WHERE Genre = 'Science Fiction' AND YearOfPublication = 2018)"
          ]
        },
        {
          "interpretation": "Return a table consisting of science fiction and romance books where 2018 is the earliest year of publication listed.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Title FROM Books WHERE Genre IN ('Science Fiction', 'Romance') AND YearOfPublication >= 2018"
          ]
        },
        {
          "interpretation": "Display a combined table of romance and science fiction books with the year '2018' falling within their book's publication history.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT B.ISBN, B.Title, B.YearOfPublication, B.Genre\nFROM Books B\nJOIN BookPublishingHistory BPH ON B.ISBN = BPH.ISBN\nWHERE B.YearOfPublication = 2018 AND B.Genre IN ('Romance', 'Science Fiction')"
          ]
        },
        {
          "interpretation": "Display science fiction and romance books that were each published in the year 2018, without any regarding year of actual publication.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Title, Genre \nFROM Books \nWHERE (Genre = 'Science Fiction' OR Genre = 'Romance') AND YearOfPublication = 2018"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.2,
        "one_found": true,
        "f1_score": 0.28571428571428575,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Entertainment/attachment_1tab_ref_book_genre/attachment_1tab_ref_book_genre.sqlite",
      "db_dump": "CREATE TABLE Authors(\n    AuthorID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Country TEXT\n);\nCREATE TABLE BookPublishingHistory(\n    PublishingID INTEGER PRIMARY KEY AUTOINCREMENT,\n    ISBN VARCHAR(13),\n    PublisherID INTEGER,\n    YearOfPublication INT,\n    FOREIGN KEY(ISBN) REFERENCES Books(ISBN),\n    FOREIGN KEY(PublisherID) REFERENCES Publishers(PublisherID)\n);\nCREATE TABLE Books(\n    ISBN VARCHAR(13) UNIQUE PRIMARY KEY,\n    Title TEXT,\n    YearOfPublication INT ,\n    Genre TEXT,\n    AuthorID INTEGER,\n    FOREIGN KEY(AuthorID) REFERENCES Authors(AuthorID)\n);\nCREATE TABLE Publishers(\n    PublisherID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Location TEXT\n);\nCREATE TABLE Reviews(\n    ReviewID INTEGER PRIMARY KEY AUTOINCREMENT,\n    ISBN VARCHAR(13),\n    Rating INT ,\n    Comment TEXT,\n    DatePosted DATE,\n    FOREIGN KEY(ISBN) REFERENCES Books(ISBN)\n);\nCREATE TABLE SalesData(\n    SaleID INTEGER PRIMARY KEY AUTOINCREMENT,\n    ISBN VARCHAR(13),\n    QuantitySold INT,\n    Revenue DECIMAL(10,2),\n    DateOfSale DATE,\n    FOREIGN KEY(ISBN) REFERENCES Books(ISBN)\n);\n\nINSERT INTO \"Authors\" (AuthorID,Name,Country) VALUES (1,'John Doe','USA'),(2,'Jane Smith','UK'),(3,'Alice Johnson','Canada'),(4,'Bob Brown','Australia'),(5,'Charlie White','Germany');\nINSERT INTO \"BookPublishingHistory\" (PublishingID,ISBN,PublisherID,YearOfPublication) VALUES (1,'1234567890123',1,2018),(2,'9876543210987',2,2020),(3,'1122334455667',3,2018),(4,'665544332211',4,2019),(5,'778899110000',5,2017);\nINSERT INTO \"Books\" (ISBN,Title,YearOfPublication,Genre,AuthorID) VALUES ('1234567890123','Science Fiction Book',2018,'Science Fiction',1),('9876543210987','Another Science Fiction Book',2020,'Science Fiction',1),('1122334455667','Romance Book',2018,'Romance',2),('665544332211','Yet Another Romance Book',2019,'Romance',2),('778899110000','Mystery Book',2017,'Mystery',3);\nINSERT INTO \"Publishers\" (PublisherID,Name,Location) VALUES (1,'Publisher A','New York'),(2,'Publisher B','London'),(3,'Publisher C','Toronto'),(4,'Publisher D','Sydney'),(5,'Publisher E','Berlin');\nINSERT INTO \"Reviews\" (ReviewID,ISBN,Rating,Comment,DatePosted) VALUES (1,'1234567890123',5,'Excellent book!','2021-08-01'),(2,'9876543210987',4,'Good read.','2021-08-02'),(3,'1122334455667',3,'Average story.','2021-08-03'),(4,'665544332211',2,'Not my cup of tea.','2021-08-04'),(5,'778899110000',1,'Did not like it at all.','2021-08-05');\nINSERT INTO \"SalesData\" (SaleID,ISBN,QuantitySold,Revenue,DateOfSale) VALUES (1,'1234567890123',500,10000,'2021-08-01'),(2,'9876543210987',600,12000,'2021-08-02'),(3,'1122334455667',400,8000,'2021-08-03'),(4,'665544332211',300,6000,'2021-08-04'),(5,'778899110000',200,4000,'2021-08-05');\n",
      "question": "Which science fiction books were published in 2018 and which romance books were published in the same year? Show them in one table.",
      "gold_queries": [
        "SELECT Books.Title \r\nFROM Books JOIN BookPublishingHistory ON Books.ISBN = BookPublishingHistory.ISBN\r\nWHERE (Books.Genre = 'Science Fiction' OR Books.Genre = 'Romance') AND BookPublishingHistory.YearOfPublication = 2018"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Science Fiction books published in 2018 rated higher than 4 by Publisher A.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT B.Title\nFROM Books B\nJOIN BookPublishingHistory BPH ON B.ISBN = BPH.ISBN\nJOIN Publishers P ON BPH.PublisherID = P.PublisherID\nJOIN Reviews R ON B.ISBN = R.ISBN\nWHERE B.Genre = 'Science Fiction'\nAND B.YearOfPublication = 2018\nAND R.Rating > 4\nAND P.Name = 'Publisher A'"
          ]
        },
        {
          "interpretation": "List all the Science Fiction and Romance books published in the same year.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Title FROM Books WHERE Genre = 'Science Fiction' AND YearOfPublication IN (SELECT YearOfPublication FROM Books WHERE Genre = 'Romance') UNION SELECT Title FROM Books WHERE Genre = 'Romance' AND YearOfPublication IN (SELECT YearOfPublication FROM Books WHERE Genre = 'Science Fiction')"
          ]
        },
        {
          "interpretation": "Science Fiction and Romance books published in 2018 rated above 3.0.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT B.ISBN, B.Title, B.Genre, AVG(R.Rating) AS AverageRating\nFROM Books B\nJOIN Reviews R ON B.ISBN = R.ISBN\nWHERE B.YearOfPublication = 2018 AND B.Genre IN ('Science Fiction', 'Romance')\nGROUP BY B.ISBN, B.Title, B.Genre\nHAVING AverageRating > 3.0"
          ]
        },
        {
          "interpretation": "List all Science Fiction and Romance books published in 2018 without actual ratings.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Title \nFROM Books \nWHERE Genre IN ('Science Fiction', 'Romance') AND YearOfPublication = 2018 \nAND ISBN NOT IN (SELECT ISBN FROM Reviews)"
          ]
        },
        {
          "interpretation": "Get the top 3 rated books among Science Fiction and Romance published in the year 2018.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AVG(Rating) AS AvgRating, Title\nFROM Books\nJOIN Reviews ON Books.ISBN = Reviews.ISBN\nWHERE YearOfPublication = 2018 AND Genre IN ('Science Fiction', 'Romance')\nGROUP BY Title\nORDER BY AvgRating DESC\nLIMIT 3"
          ]
        },
        {
          "interpretation": "Science Fiction books published in 2018 sold at least 400 copies worldwide.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT B.Title, SD.QuantitySold\nFROM Books B\nJOIN SalesData SD ON B.ISBN = SD.ISBN\nWHERE B.Genre = 'Science Fiction' AND B.YearOfPublication = 2018 AND SD.QuantitySold >= 400"
          ]
        },
        {
          "interpretation": "Science Fiction books published in 2018 rated 5 stars and published by Publisher A.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT B.ISBN, B.Title\nFROM Books B\nJOIN BookPublishingHistory BPH ON B.ISBN = BPH.ISBN\nJOIN Publishers P ON BPH.PublisherID = P.PublisherID\nJOIN Reviews R ON B.ISBN = R.ISBN\nWHERE B.Genre = 'Science Fiction' AND B.YearOfPublication = 2018 AND R.Rating = 5 AND P.Name = 'Publisher A'"
          ]
        },
        {
          "interpretation": "Combine the quantity sold and revenue of Science Fiction and Romance books published in 2018.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT SUM(QuantitySold), SUM(Revenue) \nFROM SalesData \nWHERE ISBN IN (\n    SELECT ISBN \n    FROM Books \n    WHERE Genre IN ('Science Fiction', 'Romance') AND YearOfPublication = 2018\n)"
          ]
        },
        {
          "interpretation": "All Science Fiction books published in 2018 or Romance books having author from the UK.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Title FROM Books WHERE (Genre = 'Science Fiction' AND YearOfPublication = 2018) OR (Genre = 'Romance' AND AuthorID IN (SELECT AuthorID FROM Authors WHERE Country = 'UK'))"
          ]
        }
      ],
      "num_unique_execution_results": 9,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.1111111111111111,
        "one_found": true,
        "f1_score": 0.19999999999999998,
        "num_queries": 9,
        "num_unique_queries": 9,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/attachment/Entertainment/attachment_1tab_ref_book_genre/attachment_1tab_ref_book_genre.sqlite",
      "db_dump": "CREATE TABLE Authors(\n    AuthorID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Country TEXT\n);\nCREATE TABLE BookPublishingHistory(\n    PublishingID INTEGER PRIMARY KEY AUTOINCREMENT,\n    ISBN VARCHAR(13),\n    PublisherID INTEGER,\n    YearOfPublication INT,\n    FOREIGN KEY(ISBN) REFERENCES Books(ISBN),\n    FOREIGN KEY(PublisherID) REFERENCES Publishers(PublisherID)\n);\nCREATE TABLE Books(\n    ISBN VARCHAR(13) UNIQUE PRIMARY KEY,\n    Title TEXT,\n    YearOfPublication INT ,\n    Genre TEXT,\n    AuthorID INTEGER,\n    FOREIGN KEY(AuthorID) REFERENCES Authors(AuthorID)\n);\nCREATE TABLE Publishers(\n    PublisherID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Location TEXT\n);\nCREATE TABLE Reviews(\n    ReviewID INTEGER PRIMARY KEY AUTOINCREMENT,\n    ISBN VARCHAR(13),\n    Rating INT ,\n    Comment TEXT,\n    DatePosted DATE,\n    FOREIGN KEY(ISBN) REFERENCES Books(ISBN)\n);\nCREATE TABLE SalesData(\n    SaleID INTEGER PRIMARY KEY AUTOINCREMENT,\n    ISBN VARCHAR(13),\n    QuantitySold INT,\n    Revenue DECIMAL(10,2),\n    DateOfSale DATE,\n    FOREIGN KEY(ISBN) REFERENCES Books(ISBN)\n);\n\nINSERT INTO \"Authors\" (AuthorID,Name,Country) VALUES (1,'John Doe','USA'),(2,'Jane Smith','UK'),(3,'Alice Johnson','Canada'),(4,'Bob Brown','Australia'),(5,'Charlie White','Germany');\nINSERT INTO \"BookPublishingHistory\" (PublishingID,ISBN,PublisherID,YearOfPublication) VALUES (1,'1234567890123',1,2018),(2,'9876543210987',2,2020),(3,'1122334455667',3,2018),(4,'665544332211',4,2019),(5,'778899110000',5,2017);\nINSERT INTO \"Books\" (ISBN,Title,YearOfPublication,Genre,AuthorID) VALUES ('1234567890123','Science Fiction Book',2018,'Science Fiction',1),('9876543210987','Another Science Fiction Book',2020,'Science Fiction',1),('1122334455667','Romance Book',2018,'Romance',2),('665544332211','Yet Another Romance Book',2019,'Romance',2),('778899110000','Mystery Book',2017,'Mystery',3);\nINSERT INTO \"Publishers\" (PublisherID,Name,Location) VALUES (1,'Publisher A','New York'),(2,'Publisher B','London'),(3,'Publisher C','Toronto'),(4,'Publisher D','Sydney'),(5,'Publisher E','Berlin');\nINSERT INTO \"Reviews\" (ReviewID,ISBN,Rating,Comment,DatePosted) VALUES (1,'1234567890123',5,'Excellent book!','2021-08-01'),(2,'9876543210987',4,'Good read.','2021-08-02'),(3,'1122334455667',3,'Average story.','2021-08-03'),(4,'665544332211',2,'Not my cup of tea.','2021-08-04'),(5,'778899110000',1,'Did not like it at all.','2021-08-05');\nINSERT INTO \"SalesData\" (SaleID,ISBN,QuantitySold,Revenue,DateOfSale) VALUES (1,'1234567890123',500,10000,'2021-08-01'),(2,'9876543210987',600,12000,'2021-08-02'),(3,'1122334455667',400,8000,'2021-08-03'),(4,'665544332211',300,6000,'2021-08-04'),(5,'778899110000',200,4000,'2021-08-05');\n",
      "question": "Provide a list of all science fiction books and also provide a list of romance books published in 2018. Show them in one table.",
      "gold_queries": [
        "SELECT Books.Title \r\nFROM Books JOIN BookPublishingHistory ON Books.ISBN = BookPublishingHistory.ISBN\r\nWHERE Books.Genre = 'Science Fiction' OR Books.Genre = 'Romance' AND BookPublishingHistory.YearOfPublication = 2018"
      ],
      "is_ambiguous": false,
      "ambig_type": "attachment",
      "interpretations": [
        {
          "interpretation": "Get a list of books that are either science fiction or romance and were published in 2018.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Title FROM Books WHERE Genre IN ('Science Fiction', 'Romance') AND YearOfPublication = 2018"
          ]
        },
        {
          "interpretation": "Get a list of science fiction or romance books from 2018 and show them in the same row as other science fiction or romance books.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Title, Genre \nFROM Books \nWHERE YearOfPublication = 2018 AND (Genre = 'Science Fiction' OR Genre = 'Romance')"
          ]
        },
        {
          "interpretation": "Provide a list of science fiction books and a list of books published in romance genre in the year 2018.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Title FROM Books WHERE Genre = 'Romance' AND YearOfPublication = 2018",
            "SELECT Title FROM Books WHERE Genre = 'Science Fiction'"
          ]
        },
        {
          "interpretation": "Provide two lists, one for science fiction books published in 2018 and one for romance books, where both lists contain a mix of the specified genres and years.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Title\nFROM Books\nWHERE Genre = 'Romance'",
            "SELECT Title\nFROM Books\nWHERE Genre = 'Science Fiction' AND YearOfPublication = 2018"
          ]
        },
        {
          "interpretation": "List science fiction books and romance books published in 2018 in a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ISBN, Title, Genre FROM Books WHERE (Genre = 'Science Fiction' OR Genre = 'Romance') AND YearOfPublication = 2018"
          ]
        },
        {
          "interpretation": "Show all science fiction books and romance books in two separate lists.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Title FROM Books WHERE Genre = 'Romance'",
            "SELECT Title FROM Books WHERE Genre = 'Science Fiction'"
          ]
        },
        {
          "interpretation": "Show all science fiction books and romance books in two separate lists.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Title FROM Books WHERE Genre = 'Romance'",
            "SELECT Title FROM Books WHERE Genre = 'Science Fiction'"
          ]
        },
        {
          "interpretation": "Return a list of books categorized under science fiction or romance, or published in the year 2018, or both conditions combined.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Title, Genre, YearOfPublication FROM Books WHERE Genre = 'Science Fiction' OR Genre = 'Romance' OR YearOfPublication = 2018"
          ]
        },
        {
          "interpretation": "Show the science fiction and romance books from 2018 and show all other instances where a genre or year but not both are matched.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Title FROM Books WHERE (Genre = 'Science Fiction' OR Genre = 'Romance') AND YearOfPublication = 2018\nUNION\nSELECT Title FROM Books WHERE (Genre = 'Science Fiction' OR Genre = 'Romance') AND YearOfPublication != 2018\nUNION\nSELECT Title FROM Books WHERE Genre != 'Science Fiction' AND Genre != 'Romance' AND YearOfPublication = 2018"
          ]
        }
      ],
      "num_unique_execution_results": 9,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 13,
        "num_unique_queries": 10,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Job Postings/scope_architects_building_types/scope_architects_building_types.sqlite",
      "db_dump": "CREATE TABLE Architects(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    experience INT\n);\nCREATE TABLE Architects_Building_Types(\n    architect_id INTEGER,\n    building_type_id INTEGER,\n    FOREIGN KEY (architect_id) REFERENCES Architects(id),\n    FOREIGN KEY (building_type_id) REFERENCES Building_Types(id),\n    PRIMARY KEY (architect_id, building_type_id)\n);\nCREATE TABLE Building_Types(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT\n);\nCREATE TABLE Job_Postings(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    description TEXT,\n    required_skills TEXT,\n    salary REAL,\n    post_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nINSERT INTO \"Architects\" (id,name,experience) VALUES (1,'John Doe',10),(2,'Jane Smith',7),(3,'Michael Johnson',5),(4,'Emily Williams',8),(5,'David Brown',6);\nINSERT INTO \"Architects_Building_Types\" (architect_id,building_type_id) VALUES (1,1),(1,2),(2,1),(2,2),(3,1),(3,2),(4,1),(4,2),(5,1),(5,2);\nINSERT INTO \"Building_Types\" (id,type) VALUES (1,'Residential'),(2,'Commercial'),(3,'Industrial'),(4,'Institutional'),(5,'Mixed-Use');\nINSERT INTO \"Job_Postings\" (id,title,description,required_skills,salary,post_date) VALUES (1,'Senior Residential Architect','Design residential buildings.','AutoCAD, Revit, SketchUp, knowledge of local building codes',90000.0,'2024-01-30 19:16:14'),(2,'Junior Commercial Architect','Assist in designing commercial projects.','AutoCAD, Revit, basic understanding of structural systems',60000.0,'2024-01-30 19:16:14'),(3,'Architectural Designer','Support architects on various project types.','SketchUp, InDesign, Adobe Creative Suite',50000.0,'2024-01-30 19:16:14'),(4,'Project Manager','Oversee construction projects from start to finish.','PMP certification, strong communication skills, knowledge of contract law',80000.0,'2024-01-30 19:16:14'),(5,'BIM Coordinator','Create and manage BIM models for projects.','Revit, Navisworks, Dynamo, Rhino',65000.0,'2024-01-30 19:16:14');\n",
      "question": "What type of building types are associated with each architect?",
      "gold_queries": [
        "SELECT Building_Types.type  from Architects_Building_Types join Building_Types on Architects_Building_Types.building_type_id = Building_Types.id join Architects on Architects_Building_Types.architect_id = Architects.id   GROUP BY Architects_Building_Types.building_type_id HAVING COUNT(DISTINCT Architects_Building_Types.architect_id) = (SELECT COUNT(*) FROM  Architects)",
        "select architects.name , building_types.type from Architects_Building_Types join Building_Types on Architects_Building_Types.building_type_id = Building_Types.id join Architects on Architects_Building_Types.architect_id = Architects.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List building types that all architects with experience in architectural design can create.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT bt.type\nFROM Building_Types bt\nWHERE NOT EXISTS (\n    SELECT a.id\n    FROM Architects a\n    WHERE NOT EXISTS (\n        SELECT abt.architect_id\n        FROM Architects_Building_Types abt\n        WHERE abt.architect_id = a.id AND abt.building_type_id = bt.id\n    )\n)"
          ]
        },
        {
          "interpretation": "Display a matrix listing each architect and the building types they are associated with.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.name, B.type\nFROM Architects A\nJOIN Architects_Building_Types ABT ON A.id = ABT.architect_id\nJOIN Building_Types B ON ABT.building_type_id = B.id"
          ]
        },
        {
          "interpretation": "Generate a SQL statement to check for architects who design at least one residential building.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.name \nFROM Architects A \nJOIN Architects_Building_Types ABT ON A.id = ABT.architect_id \nJOIN Building_Types BT ON ABT.building_type_id = BT.id \nWHERE BT.type = 'Residential'"
          ]
        },
        {
          "interpretation": "Find architects who specialize in a single type of building.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT a.name \nFROM Architects a \nJOIN Architects_Building_Types abt ON a.id = abt.architect_id \nGROUP BY a.id \nHAVING COUNT(abt.building_type_id) = 1"
          ]
        },
        {
          "interpretation": "Determine which building types no architects specialize in.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT type FROM Building_Types WHERE id NOT IN (SELECT building_type_id FROM Architects_Building_Types)"
          ]
        },
        {
          "interpretation": "Get the count of architects per building type to understand how many architects associate with each building type.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT building_type_id, COUNT(architect_id) AS architect_count\nFROM Architects_Building_Types\nGROUP BY building_type_id"
          ]
        },
        {
          "interpretation": "List all architect IDs and the corresponding building types.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Architects_Building_Types.architect_id, Building_Types.type \nFROM Architects_Building_Types \nJOIN Building_Types ON Architects_Building_Types.building_type_id = Building_Types.id"
          ]
        },
        {
          "interpretation": "Group architects by their associated building types to see which types most architects design.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT bt.type, COUNT(abt.architect_id) AS architect_count\nFROM Architects_Building_Types abt\nJOIN Building_Types bt ON abt.building_type_id = bt.id\nGROUP BY bt.type\nORDER BY architect_count DESC"
          ]
        }
      ],
      "num_unique_execution_results": 8,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "one_found": true,
        "f1_score": 0.4,
        "num_queries": 8,
        "num_unique_queries": 8,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/scope/Job Postings/scope_architects_building_types/scope_architects_building_types.sqlite",
      "db_dump": "CREATE TABLE Architects(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    experience INT\n);\nCREATE TABLE Architects_Building_Types(\n    architect_id INTEGER,\n    building_type_id INTEGER,\n    FOREIGN KEY (architect_id) REFERENCES Architects(id),\n    FOREIGN KEY (building_type_id) REFERENCES Building_Types(id),\n    PRIMARY KEY (architect_id, building_type_id)\n);\nCREATE TABLE Building_Types(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT\n);\nCREATE TABLE Job_Postings(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    description TEXT,\n    required_skills TEXT,\n    salary REAL,\n    post_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nINSERT INTO \"Architects\" (id,name,experience) VALUES (1,'John Doe',10),(2,'Jane Smith',7),(3,'Michael Johnson',5),(4,'Emily Williams',8),(5,'David Brown',6);\nINSERT INTO \"Architects_Building_Types\" (architect_id,building_type_id) VALUES (1,1),(1,2),(2,1),(2,2),(3,1),(3,2),(4,1),(4,2),(5,1),(5,2);\nINSERT INTO \"Building_Types\" (id,type) VALUES (1,'Residential'),(2,'Commercial'),(3,'Industrial'),(4,'Institutional'),(5,'Mixed-Use');\nINSERT INTO \"Job_Postings\" (id,title,description,required_skills,salary,post_date) VALUES (1,'Senior Residential Architect','Design residential buildings.','AutoCAD, Revit, SketchUp, knowledge of local building codes',90000.0,'2024-01-30 19:16:14'),(2,'Junior Commercial Architect','Assist in designing commercial projects.','AutoCAD, Revit, basic understanding of structural systems',60000.0,'2024-01-30 19:16:14'),(3,'Architectural Designer','Support architects on various project types.','SketchUp, InDesign, Adobe Creative Suite',50000.0,'2024-01-30 19:16:14'),(4,'Project Manager','Oversee construction projects from start to finish.','PMP certification, strong communication skills, knowledge of contract law',80000.0,'2024-01-30 19:16:14'),(5,'BIM Coordinator','Create and manage BIM models for projects.','Revit, Navisworks, Dynamo, Rhino',65000.0,'2024-01-30 19:16:14');\n",
      "question": "For each architect, provide the corresponding building type.",
      "gold_queries": [
        "select architects.name , building_types.type from Architects_Building_Types join Building_Types on Architects_Building_Types.building_type_id = Building_Types.id join Architects on Architects_Building_Types.architect_id = Architects.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Return a list of queries for each architect, each query retrieving the building types that match that architect.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 5,
            "num_unique_queries": 5,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT B.type\nFROM Architects A\nJOIN Architects_Building_Types ABT ON A.id = ABT.architect_id\nJOIN Building_Types B ON ABT.building_type_id = B.id\nWHERE A.id = 3",
            "SELECT B.type\nFROM Architects A\nJOIN Architects_Building_Types ABT ON A.id = ABT.architect_id\nJOIN Building_Types B ON ABT.building_type_id = B.id\nWHERE A.id = 4",
            "SELECT B.type\nFROM Architects A\nJOIN Architects_Building_Types ABT ON A.id = ABT.architect_id\nJOIN Building_Types B ON ABT.building_type_id = B.id\nWHERE A.id = 2",
            "SELECT B.type\nFROM Architects A\nJOIN Architects_Building_Types ABT ON A.id = ABT.architect_id\nJOIN Building_Types B ON ABT.building_type_id = B.id\nWHERE A.id = 1",
            "SELECT B.type\nFROM Architects A\nJOIN Architects_Building_Types ABT ON A.id = ABT.architect_id\nJOIN Building_Types B ON ABT.building_type_id = B.id\nWHERE A.id = 5"
          ]
        },
        {
          "interpretation": "List all possible building types that match any architect.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT type FROM Building_Types"
          ]
        },
        {
          "interpretation": "Find the most common building types among all architects.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT type FROM Building_Types WHERE id = (SELECT building_type_id FROM Architects_Building_Types GROUP BY building_type_id ORDER BY COUNT(*) DESC LIMIT 1)"
          ]
        },
        {
          "interpretation": "Include the name and experience of the architect along with the corresponding building type.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.name, A.experience, B.type\nFROM Architects A\nJOIN Architects_Building_Types ABT ON A.id = ABT.architect_id\nJOIN Building_Types B ON ABT.building_type_id = B.id"
          ]
        },
        {
          "interpretation": "Order the results by the number of building types an architect is associated with, in descending order.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT a.name, COUNT(abt.building_type_id) AS building_type_count\nFROM Architects a\nJOIN Architects_Building_Types abt ON a.id = abt.architect_id\nGROUP BY a.id\nORDER BY building_type_count DESC"
          ]
        },
        {
          "interpretation": "Join the Architects table with the Architects_Building_Types table to find the corresponding building types for each architect.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Architects.name, Building_Types.type\nFROM Architects\nJOIN Architects_Building_Types ON Architects.id = Architects_Building_Types.architect_id\nJOIN Building_Types ON Architects_Building_Types.building_type_id = Building_Types.id"
          ]
        },
        {
          "interpretation": "Retrieve the id and building_type_id from Architects_Building_Types for each architect.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT architect_id, building_type_id FROM Architects_Building_Types"
          ]
        },
        {
          "interpretation": "If any architect exists, return the corresponding building type to match that architect.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Architects.id, Architects.name, Building_Types.type\nFROM Architects\nJOIN Architects_Building_Types ON Architects.id = Architects_Building_Types.architect_id\nJOIN Building_Types ON Architects_Building_Types.building_type_id = Building_Types.id"
          ]
        },
        {
          "interpretation": "List the total number of architects who work on each building type.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Building_Types.type, COUNT(DISTINCT Architects_Building_Types.architect_id) AS total_architects\nFROM Architects_Building_Types\nJOIN Building_Types ON Architects_Building_Types.building_type_id = Building_Types.id\nGROUP BY Building_Types.type"
          ]
        }
      ],
      "num_unique_execution_results": 9,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.07692307692307693,
        "one_found": true,
        "f1_score": 0.14285714285714288,
        "num_queries": 13,
        "num_unique_queries": 13,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Job Postings/scope_architects_building_types/scope_architects_building_types.sqlite",
      "db_dump": "CREATE TABLE Architects(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    experience INT\n);\nCREATE TABLE Architects_Building_Types(\n    architect_id INTEGER,\n    building_type_id INTEGER,\n    FOREIGN KEY (architect_id) REFERENCES Architects(id),\n    FOREIGN KEY (building_type_id) REFERENCES Building_Types(id),\n    PRIMARY KEY (architect_id, building_type_id)\n);\nCREATE TABLE Building_Types(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT\n);\nCREATE TABLE Job_Postings(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    description TEXT,\n    required_skills TEXT,\n    salary REAL,\n    post_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nINSERT INTO \"Architects\" (id,name,experience) VALUES (1,'John Doe',10),(2,'Jane Smith',7),(3,'Michael Johnson',5),(4,'Emily Williams',8),(5,'David Brown',6);\nINSERT INTO \"Architects_Building_Types\" (architect_id,building_type_id) VALUES (1,1),(1,2),(2,1),(2,2),(3,1),(3,2),(4,1),(4,2),(5,1),(5,2);\nINSERT INTO \"Building_Types\" (id,type) VALUES (1,'Residential'),(2,'Commercial'),(3,'Industrial'),(4,'Institutional'),(5,'Mixed-Use');\nINSERT INTO \"Job_Postings\" (id,title,description,required_skills,salary,post_date) VALUES (1,'Senior Residential Architect','Design residential buildings.','AutoCAD, Revit, SketchUp, knowledge of local building codes',90000.0,'2024-01-30 19:16:14'),(2,'Junior Commercial Architect','Assist in designing commercial projects.','AutoCAD, Revit, basic understanding of structural systems',60000.0,'2024-01-30 19:16:14'),(3,'Architectural Designer','Support architects on various project types.','SketchUp, InDesign, Adobe Creative Suite',50000.0,'2024-01-30 19:16:14'),(4,'Project Manager','Oversee construction projects from start to finish.','PMP certification, strong communication skills, knowledge of contract law',80000.0,'2024-01-30 19:16:14'),(5,'BIM Coordinator','Create and manage BIM models for projects.','Revit, Navisworks, Dynamo, Rhino',65000.0,'2024-01-30 19:16:14');\n",
      "question": "What type of building is common across all architects?",
      "gold_queries": [
        "SELECT Building_Types.type  from Architects_Building_Types join Building_Types on Architects_Building_Types.building_type_id = Building_Types.id join Architects on Architects_Building_Types.architect_id = Architects.id   GROUP BY Architects_Building_Types.building_type_id HAVING COUNT(DISTINCT Architects_Building_Types.architect_id) = (SELECT COUNT(*) FROM  Architects)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What building type do all individual architects have experience with?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT type FROM Building_Types WHERE id IN (SELECT building_type_id FROM Architects_Building_Types GROUP BY building_type_id HAVING COUNT(DISTINCT architect_id) = (SELECT COUNT(*) FROM Architects))"
          ]
        },
        {
          "interpretation": "What type of building is most commonly associated with all architects combined?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT type \nFROM Building_Types \nWHERE id = (\n    SELECT building_type_id \n    FROM Architects_Building_Types \n    GROUP BY building_type_id \n    ORDER BY COUNT(*) DESC \n    LIMIT 1\n)"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "one_found": true,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_services_subtitles/scope_streaming_services_subtitles.sqlite",
      "db_dump": "CREATE TABLE Streaming_Services (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    url TEXT\n);\nCREATE TABLE Streaming_Services_Subtitles (\n    streaming_service_id INTEGER,\n    subtitle_id INTEGER,\n    FOREIGN KEY(streaming_service_id) REFERENCES Streaming_Services(id),\n    FOREIGN KEY(subtitle_id) REFERENCES Subtitles(id)\n);\nCREATE TABLE Subtitles (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    language TEXT,\n    default_subtitle BOOLEAN DEFAULT FALSE\n);\n\nINSERT INTO \"Streaming_Services\" (id,name,url) VALUES (1,'Netflix','https://www.netflix.com'),(2,'Amazon Prime Video','https://www.amazon.com/prime-video'),(3,'Hulu','https://www.hulu.com'),(4,'Disney+','https://www.disneyplus.com'),(5,'HBO Max','https://www.hbomax.com');\nINSERT INTO \"Streaming_Services_Subtitles\" (streaming_service_id,subtitle_id) VALUES (1,1),(2,2),(3,3),(4,4),(5,5),(2,1),(3,1),(4,1),(5,1);\nINSERT INTO \"Subtitles\" (id,language,default_subtitle) VALUES (1,'English',1),(2,'Spanish',0),(3,'French',0),(4,'German',0),(5,'Italian',0);\n",
      "question": "List the status of subtitles available at each streaming service.",
      "gold_queries": [
        "SELECT Subtitles.default_subtitle  from Streaming_Services_Subtitles join Subtitles on Streaming_Services_Subtitles.subtitle_id = Subtitles.id join Streaming_Services on Streaming_Services_Subtitles.streaming_service_id = Streaming_Services.id   GROUP BY Streaming_Services_Subtitles.subtitle_id HAVING COUNT(DISTINCT Streaming_Services_Subtitles.streaming_service_id) = (SELECT COUNT(*) FROM  Streaming_Services)",
        "select streaming_services.name , subtitles.default_subtitle from Streaming_Services_Subtitles join Subtitles on Streaming_Services_Subtitles.subtitle_id = Subtitles.id join Streaming_Services on Streaming_Services_Subtitles.streaming_service_id = Streaming_Services.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List the streaming services where at least one subtitle is marked as default.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT ss.name\nFROM Streaming_Services ss\nJOIN Streaming_Services_Subtitles sss ON ss.id = sss.streaming_service_id\nJOIN Subtitles s ON sss.subtitle_id = s.id\nWHERE s.default_subtitle = 1"
          ]
        },
        {
          "interpretation": "Flag the presence of subtitles for each streaming service with a specific language or condition.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ss.name, CASE WHEN s.id IS NOT NULL THEN 'Yes' ELSE 'No' END AS has_subtitle\nFROM Streaming_Services ss\nLEFT JOIN Streaming_Services_Subtitles sss ON ss.id = sss.streaming_service_id\nLEFT JOIN Subtitles s ON sss.subtitle_id = s.id AND s.language = 'English'"
          ]
        },
        {
          "interpretation": "For each language, list the streaming services with subtitles available and their respective count.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.language, SS.name, COUNT(*) as count\nFROM Subtitles AS S\nJOIN Streaming_Services_Subtitles AS SSS ON S.id = SSS.subtitle_id\nJOIN Streaming_Services AS SS ON SSS.streaming_service_id = SS.id\nGROUP BY S.language, SS.name"
          ]
        },
        {
          "interpretation": "List the count of non-default subtitles available for each streaming service.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ss.name, COUNT(sss.subtitle_id) AS non_default_count\nFROM Streaming_Services ss\nJOIN Streaming_Services_Subtitles sss ON ss.id = sss.streaming_service_id\nJOIN Subtitles s ON sss.subtitle_id = s.id\nWHERE s.default_subtitle = 0\nGROUP BY ss.name"
          ]
        },
        {
          "interpretation": "For each streaming service, list the subtitle ID, language, and the default_subtitle status of their associated subtitles.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    s.streaming_service_id, \n    sub.id AS subtitle_id, \n    sub.language, \n    sub.default_subtitle \nFROM \n    Streaming_Services_Subtitles s \nJOIN \n    Subtitles sub ON s.subtitle_id = sub.id"
          ]
        },
        {
          "interpretation": "List the streaming services with the most and fewest subtitles available.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ss.name \nFROM Streaming_Services ss \nJOIN Streaming_Services_Subtitles sss ON ss.id = sss.streaming_service_id \nGROUP BY ss.name \nORDER BY COUNT(sss.subtitle_id) ASC \nLIMIT 1",
            "SELECT ss.name \nFROM Streaming_Services ss \nJOIN Streaming_Services_Subtitles sss ON ss.id = sss.streaming_service_id \nGROUP BY ss.name \nORDER BY COUNT(sss.subtitle_id) DESC \nLIMIT 1"
          ]
        },
        {
          "interpretation": "List the streaming services with the most and fewest subtitles available.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ss.name \nFROM Streaming_Services ss \nJOIN Streaming_Services_Subtitles sss ON ss.id = sss.streaming_service_id \nGROUP BY ss.name \nORDER BY COUNT(sss.subtitle_id) ASC \nLIMIT 1",
            "SELECT ss.name \nFROM Streaming_Services ss \nJOIN Streaming_Services_Subtitles sss ON ss.id = sss.streaming_service_id \nGROUP BY ss.name \nORDER BY COUNT(sss.subtitle_id) DESC \nLIMIT 1"
          ]
        },
        {
          "interpretation": "Count the number of different languages supported by each streaming service through their subtitles.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ss.name, COUNT(DISTINCT s.language) AS language_count\nFROM Streaming_Services_Subtitles sss\nJOIN Streaming_Services ss ON sss.streaming_service_id = ss.id\nJOIN Subtitles s ON sss.subtitle_id = s.id\nGROUP BY ss.name"
          ]
        },
        {
          "interpretation": "List the streaming services that have no subtitles available.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name FROM Streaming_Services WHERE id NOT IN (SELECT streaming_service_id FROM Streaming_Services_Subtitles)"
          ]
        },
        {
          "interpretation": "List the default subtitle status for each streaming service based on their available subtitles.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT s.name, sub.default_subtitle\nFROM Streaming_Services s\nJOIN Streaming_Services_Subtitles sss ON s.id = sss.streaming_service_id\nJOIN Subtitles sub ON sss.subtitle_id = sub.id\nWHERE sub.default_subtitle = 1"
          ]
        },
        {
          "interpretation": "List each subtitle status associated with each streaming service in the Streaming_Services_Subtitles table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT streaming_service_id, subtitle_id FROM Streaming_Services_Subtitles"
          ]
        },
        {
          "interpretation": "Count the unique subtitle IDs available for each streaming service.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT streaming_service_id, COUNT(DISTINCT subtitle_id) AS unique_subtitles\nFROM Streaming_Services_Subtitles\nGROUP BY streaming_service_id"
          ]
        }
      ],
      "num_unique_execution_results": 12,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 14,
        "num_unique_queries": 12,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_service_video_quality/scope_streaming_service_video_quality.sqlite",
      "db_dump": "CREATE TABLE Streaming_Service (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    price REAL\n);\nCREATE TABLE Streaming_Service_Video_Quality (\n    streaming_service_id INTEGER,\n    video_quality_id INTEGER,\n    FOREIGN KEY (streaming_service_id) REFERENCES Streaming_Service(id),\n    FOREIGN KEY (video_quality_id) REFERENCES Video_Quality(id),\n    PRIMARY KEY (streaming_service_id, video_quality_id)\n);\nCREATE TABLE Video_Quality (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    quality TEXT\n);\n\nINSERT INTO \"Streaming_Service\" (id,name,price) VALUES (1,'Netflix',12.99),(2,'Amazon Prime Video',8.99),(3,'Disney+',6.99),(4,'Hulu',5.99),(5,'YouTube Premium',11.99);\nINSERT INTO \"Streaming_Service_Video_Quality\" (streaming_service_id,video_quality_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\nINSERT INTO \"Video_Quality\" (id,quality) VALUES (1,'HD'),(2,'SD'),(3,'Ultra HD'),(4,'FHD'),(5,'3D');\n",
      "question": "What video quality is common across all streaming services?",
      "gold_queries": [
        "SELECT Video_Quality.quality  from Streaming_Service_Video_Quality join Video_Quality on Streaming_Service_Video_Quality.video_quality_id = Video_Quality.id join Streaming_Service on Streaming_Service_Video_Quality.streaming_service_id = Streaming_Service.id   GROUP BY Streaming_Service_Video_Quality.video_quality_id HAVING COUNT(DISTINCT Streaming_Service_Video_Quality.streaming_service_id) = (SELECT COUNT(*) FROM  Streaming_Service)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What is the common constraint for services that may have multiple video qualities offered?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT streaming_service_id, video_quality_id FROM Streaming_Service_Video_Quality"
          ]
        },
        {
          "interpretation": "What video quality is universal to at least one service, but not necessarily all services?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT quality FROM Video_Quality WHERE id IN (SELECT video_quality_id FROM Streaming_Service_Video_Quality GROUP BY video_quality_id HAVING COUNT(DISTINCT streaming_service_id) >= 1) AND id NOT IN (SELECT video_quality_id FROM Streaming_Service_Video_Quality GROUP BY video_quality_id HAVING COUNT(DISTINCT streaming_service_id) = (SELECT COUNT(*) FROM Streaming_Service))"
          ]
        },
        {
          "interpretation": "What is the most common video quality among all streaming services available?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT quality\nFROM Streaming_Service_Video_Quality\nJOIN Video_Quality ON Streaming_Service_Video_Quality.video_quality_id = Video_Quality.id\nGROUP BY quality\nORDER BY COUNT(*) DESC\nLIMIT 1"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "one_found": true,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_service_video_quality/scope_streaming_service_video_quality.sqlite",
      "db_dump": "CREATE TABLE Streaming_Service (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    price REAL\n);\nCREATE TABLE Streaming_Service_Video_Quality (\n    streaming_service_id INTEGER,\n    video_quality_id INTEGER,\n    FOREIGN KEY (streaming_service_id) REFERENCES Streaming_Service(id),\n    FOREIGN KEY (video_quality_id) REFERENCES Video_Quality(id),\n    PRIMARY KEY (streaming_service_id, video_quality_id)\n);\nCREATE TABLE Video_Quality (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    quality TEXT\n);\n\nINSERT INTO \"Streaming_Service\" (id,name,price) VALUES (1,'Netflix',12.99),(2,'Amazon Prime Video',8.99),(3,'Disney+',6.99),(4,'Hulu',5.99),(5,'YouTube Premium',11.99);\nINSERT INTO \"Streaming_Service_Video_Quality\" (streaming_service_id,video_quality_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\nINSERT INTO \"Video_Quality\" (id,quality) VALUES (1,'HD'),(2,'SD'),(3,'Ultra HD'),(4,'FHD'),(5,'3D');\n",
      "question": "Show me the video quality that every streaming service offers.",
      "gold_queries": [
        "SELECT Video_Quality.quality  from Streaming_Service_Video_Quality join Video_Quality on Streaming_Service_Video_Quality.video_quality_id = Video_Quality.id join Streaming_Service on Streaming_Service_Video_Quality.streaming_service_id = Streaming_Service.id   GROUP BY Streaming_Service_Video_Quality.video_quality_id HAVING COUNT(DISTINCT Streaming_Service_Video_Quality.streaming_service_id) = (SELECT COUNT(*) FROM  Streaming_Service)",
        "select streaming_service.name , video_quality.quality from Streaming_Service_Video_Quality join Video_Quality on Streaming_Service_Video_Quality.video_quality_id = Video_Quality.id join Streaming_Service on Streaming_Service_Video_Quality.streaming_service_id = Streaming_Service.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Show me the minimum, maximum, and average video quality offered across all streaming services.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT MIN(q.quality) AS min_quality, MAX(q.quality) AS max_quality, AVG(q.id) AS avg_quality_id\nFROM Video_Quality q\nJOIN Streaming_Service_Video_Quality ssq ON q.id = ssq.video_quality_id"
          ]
        },
        {
          "interpretation": "Show me the distinct video qualities offered across all streaming services, including how many services offer each quality.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT quality, COUNT(streaming_service_id) AS count\nFROM Video_Quality\nJOIN Streaming_Service_Video_Quality ON Video_Quality.id = Streaming_Service_Video_Quality.video_quality_id\nGROUP BY quality"
          ]
        },
        {
          "interpretation": "Show me the video quality list with additional information about each quality.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT quality FROM Video_Quality"
          ]
        },
        {
          "interpretation": "Show me the video quality of each streaming service, including duplicates.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT vq.quality\nFROM Streaming_Service_Video_Quality ss_vq\nJOIN Video_Quality vq ON ss_vq.video_quality_id = vq.id"
          ]
        },
        {
          "interpretation": "Show me the minimum and maximum price that streaming services charge for offering a specific video quality.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT MIN(ss.price) AS min_price, MAX(ss.price) AS max_price\nFROM Streaming_Service ss\nJOIN Streaming_Service_Video_Quality ss_vq ON ss.id = ss_vq.streaming_service_id"
          ]
        },
        {
          "interpretation": "Show me the unique video quality offered by each streaming service.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT SS.name, VQ.quality\nFROM Streaming_Service SS\nJOIN Streaming_Service_Video_Quality SSVQ ON SS.id = SSVQ.streaming_service_id\nJOIN Video_Quality VQ ON SSVQ.video_quality_id = VQ.id"
          ]
        },
        {
          "interpretation": "Show me the streaming services that offer Ultra HD quality.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT SS.name\nFROM Streaming_Service SS\nJOIN Streaming_Service_Video_Quality SSVQ ON SS.id = SSVQ.streaming_service_id\nJOIN Video_Quality VQ ON SSVQ.video_quality_id = VQ.id\nWHERE VQ.quality = 'Ultra HD'"
          ]
        },
        {
          "interpretation": "Show me the average price of the streaming services that offer each video quality.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Video_Quality.quality, AVG(Streaming_Service.price)\nFROM Streaming_Service\nJOIN Streaming_Service_Video_Quality ON Streaming_Service.id = Streaming_Service_Video_Quality.streaming_service_id\nJOIN Video_Quality ON Streaming_Service_Video_Quality.video_quality_id = Video_Quality.id\nGROUP BY Video_Quality.quality"
          ]
        },
        {
          "interpretation": "Show me the streaming services that offer SD quality.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT s.name\nFROM Streaming_Service s\nJOIN Streaming_Service_Video_Quality ssq ON s.id = ssq.streaming_service_id\nJOIN Video_Quality vq ON ssq.video_quality_id = vq.id\nWHERE vq.quality = 'SD'"
          ]
        },
        {
          "interpretation": "Show me the streaming services that offer HD quality and have a price greater than $10.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ss.name \nFROM Streaming_Service ss \nJOIN Streaming_Service_Video_Quality ss_vq ON ss.id = ss_vq.streaming_service_id \nJOIN Video_Quality vq ON ss_vq.video_quality_id = vq.id \nWHERE vq.quality = 'HD' AND ss.price > 10"
          ]
        },
        {
          "interpretation": "Show me the video quality that is most commonly offered by streaming services.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT quality\nFROM Video_Quality\nWHERE id = (\n    SELECT video_quality_id\n    FROM Streaming_Service_Video_Quality\n    GROUP BY video_quality_id\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n)"
          ]
        },
        {
          "interpretation": "Show me the list of video qualities in descending order of how many services offer them.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT vq.quality\nFROM Video_Quality vq\nJOIN Streaming_Service_Video_Quality ssvq ON vq.id = ssvq.video_quality_id\nGROUP BY vq.quality\nORDER BY COUNT(ssvq.streaming_service_id) DESC"
          ]
        }
      ],
      "num_unique_execution_results": 12,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.16666666666666666,
        "one_found": true,
        "f1_score": 0.2857142857142857,
        "num_queries": 12,
        "num_unique_queries": 12,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_service_video_quality/scope_streaming_service_video_quality.sqlite",
      "db_dump": "CREATE TABLE Streaming_Service (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    price REAL\n);\nCREATE TABLE Streaming_Service_Video_Quality (\n    streaming_service_id INTEGER,\n    video_quality_id INTEGER,\n    FOREIGN KEY (streaming_service_id) REFERENCES Streaming_Service(id),\n    FOREIGN KEY (video_quality_id) REFERENCES Video_Quality(id),\n    PRIMARY KEY (streaming_service_id, video_quality_id)\n);\nCREATE TABLE Video_Quality (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    quality TEXT\n);\n\nINSERT INTO \"Streaming_Service\" (id,name,price) VALUES (1,'Netflix',12.99),(2,'Amazon Prime Video',8.99),(3,'Disney+',6.99),(4,'Hulu',5.99),(5,'YouTube Premium',11.99);\nINSERT INTO \"Streaming_Service_Video_Quality\" (streaming_service_id,video_quality_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\nINSERT INTO \"Video_Quality\" (id,quality) VALUES (1,'HD'),(2,'SD'),(3,'Ultra HD'),(4,'FHD'),(5,'3D');\n",
      "question": "For every streaming service, list the video quality offered.",
      "gold_queries": [
        "select streaming_service.name , video_quality.quality from Streaming_Service_Video_Quality join Video_Quality on Streaming_Service_Video_Quality.video_quality_id = Video_Quality.id join Streaming_Service on Streaming_Service_Video_Quality.streaming_service_id = Streaming_Service.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Identify the video quality that the majority of streaming services support.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT quality\nFROM Video_Quality\nWHERE id = (\n    SELECT video_quality_id\n    FROM Streaming_Service_Video_Quality\n    GROUP BY video_quality_id\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n)"
          ]
        },
        {
          "interpretation": "For each video quality, calculate the proportion of streaming services that support it.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT V.quality, CAST(COUNT(*) AS REAL) / (SELECT COUNT(DISTINCT S.streaming_service_id) FROM Streaming_Service_Video_Quality S) AS proportion\nFROM Streaming_Service_Video_Quality S\nJOIN Video_Quality V ON S.video_quality_id = V.id\nGROUP BY V.quality"
          ]
        },
        {
          "interpretation": "For each streaming service, display the most common video quality it supports.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT ss.name, vq.quality\nFROM Streaming_Service ss\nJOIN (\n    SELECT streaming_service_id, video_quality_id, COUNT(*) as cnt\n    FROM Streaming_Service_Video_Quality\n    GROUP BY streaming_service_id, video_quality_id\n) sqvq ON ss.id = sqvq.streaming_service_id\nJOIN (\n    SELECT streaming_service_id, MAX(cnt) as max_cnt\n    FROM (\n        SELECT streaming_service_id, video_quality_id, COUNT(*) as cnt\n        FROM Streaming_Service_Video_Quality\n        GROUP BY streaming_service_id, video_quality_id\n    )\n    GROUP BY streaming_service_id\n) max_sqvq ON ss.id = max_sqvq.streaming_service_id AND sqvq.cnt = max_sqvq.max_cnt\nJOIN Video_Quality vq ON sqvq.video_quality_id = vq.id"
          ]
        },
        {
          "interpretation": "List all video qualities available to streaming services, including any that are unsupported.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT quality FROM Video_Quality"
          ]
        },
        {
          "interpretation": "Identify the streaming services that support the most varieties of video quality.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT s.name\nFROM Streaming_Service s\nJOIN Streaming_Service_Video_Quality svq ON s.id = svq.streaming_service_id\nGROUP BY s.id, s.name\nORDER BY COUNT(svq.video_quality_id) DESC\nLIMIT 1"
          ]
        },
        {
          "interpretation": "Find any unique video quality offered exclusively by a single streaming service.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT q.quality \nFROM Video_Quality q \nJOIN Streaming_Service_Video_Quality ssq ON q.id = ssq.video_quality_id \nJOIN Streaming_Service s ON ssq.streaming_service_id = s.id \nGROUP BY q.id, s.id \nHAVING COUNT(DISTINCT s.name) = 1"
          ]
        },
        {
          "interpretation": "List each video quality and state whether or not it is offered by any streaming service.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT VQ.quality, \n       CASE WHEN SSVQ.streaming_service_id IS NULL THEN 'No' ELSE 'Yes' END AS offered_by_streaming_service\nFROM Video_Quality VQ\nLEFT JOIN Streaming_Service_Video_Quality SSVQ ON VQ.id = SSVQ.video_quality_id"
          ]
        },
        {
          "interpretation": "Determine the streaming service that offers the fewest video quality options.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.name\nFROM Streaming_Service T1\nJOIN Streaming_Service_Video_Quality T2 ON T1.id = T2.streaming_service_id\nGROUP BY T1.id\nORDER BY COUNT(T2.video_quality_id) ASC\nLIMIT 1"
          ]
        },
        {
          "interpretation": "Assign a score to each streaming service based on its video quality diversity, and list the results.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT s.name, COUNT(DISTINCT sq.video_quality_id) AS score\nFROM Streaming_Service s\nJOIN Streaming_Service_Video_Quality sq ON s.id = sq.streaming_service_id\nGROUP BY s.id, s.name\nORDER BY score DESC"
          ]
        }
      ],
      "num_unique_execution_results": 9,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.1111111111111111,
        "one_found": true,
        "f1_score": 0.19999999999999998,
        "num_queries": 9,
        "num_unique_queries": 9,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_service_user_interface/scope_streaming_service_user_interface.sqlite",
      "db_dump": "CREATE TABLE Streaming_Service (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    price REAL\n);\nCREATE TABLE Streaming_Service_User_Interface (\n    streaming_service_id INTEGER,\n    user_interface_id INTEGER,\n    FOREIGN KEY(streaming_service_id) REFERENCES Streaming_Service(id),\n    FOREIGN KEY(user_interface_id) REFERENCES User_Interface(id)\n);\nCREATE TABLE User_Interface (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    interface_type TEXT\n);\n\nINSERT INTO \"Streaming_Service\" (id,name,price) VALUES (1,'Netflix',12.99),(2,'Amazon Prime Video',8.99),(3,'Disney+',6.99),(4,'Hulu',5.99),(5,'HBO Max',14.99);\nINSERT INTO \"Streaming_Service_User_Interface\" (streaming_service_id,user_interface_id) VALUES (1,2),(2,2),(3,2),(4,2),(5,2),(5,4);\nINSERT INTO \"User_Interface\" (id,interface_type) VALUES (1,'Light Mode'),(2,'Dark Mode'),(3,'Classic Mode'),(4,'Minimalist Mode'),(5,'Customizable Mode');\n",
      "question": "What user interface types are there for every streaming service?",
      "gold_queries": [
        "SELECT User_Interface.interface_type  from Streaming_Service_User_Interface join User_Interface on Streaming_Service_User_Interface.user_interface_id = User_Interface.id join Streaming_Service on Streaming_Service_User_Interface.streaming_service_id = Streaming_Service.id   GROUP BY Streaming_Service_User_Interface.user_interface_id HAVING COUNT(DISTINCT Streaming_Service_User_Interface.streaming_service_id) = (SELECT COUNT(*) FROM  Streaming_Service)",
        "select streaming_service.name , user_interface.interface_type from Streaming_Service_User_Interface join User_Interface on Streaming_Service_User_Interface.user_interface_id = User_Interface.id join Streaming_Service on Streaming_Service_User_Interface.streaming_service_id = Streaming_Service.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "A list or table about user interface diversity among different streaming services.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ss.name, COUNT(DISTINCT ui.interface_type) AS user_interface_diversity\nFROM Streaming_Service ss\nJOIN Streaming_Service_User_Interface ssui ON ss.id = ssui.streaming_service_id\nJOIN User_Interface ui ON ssui.user_interface_id = ui.id\nGROUP BY ss.name"
          ]
        },
        {
          "interpretation": "See the user interface types that distinguish one streaming service from another.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT ui.interface_type\nFROM User_Interface ui\nJOIN Streaming_Service_User_Interface ssi ON ui.id = ssi.user_interface_id\nGROUP BY ui.interface_type\nHAVING COUNT(DISTINCT ssi.streaming_service_id) = 1"
          ]
        },
        {
          "interpretation": "Show the possible user interface combinations that may be unique or common among streaming services.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT T2.interface_type FROM Streaming_Service_User_Interface AS T1 JOIN User_Interface AS T2 ON T1.user_interface_id = T2.id"
          ]
        },
        {
          "interpretation": "A list of unique streaming service names and their corresponding user interface types are shown.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT s.name, u.interface_type \nFROM Streaming_Service s \nJOIN Streaming_Service_User_Interface ssui ON s.id = ssui.streaming_service_id \nJOIN User_Interface u ON ssui.user_interface_id = u.id"
          ]
        },
        {
          "interpretation": "What streaming services offer a user interface type that another service does not?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ss1.name \nFROM Streaming_Service ss1 \nJOIN Streaming_Service_User_Interface ssui1 ON ss1.id = ssui1.streaming_service_id \nJOIN User_Interface ui1 ON ssui1.user_interface_id = ui1.id \nWHERE ui1.interface_type NOT IN (\n    SELECT ui2.interface_type \n    FROM Streaming_Service_User_Interface ssui2 \n    JOIN User_Interface ui2 ON ssui2.user_interface_id = ui2.id \n    WHERE ssui2.streaming_service_id != ssui1.streaming_service_id\n)"
          ]
        },
        {
          "interpretation": "All possible user interface types across all streaming services are included.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT interface_type FROM User_Interface"
          ]
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.16666666666666666,
        "one_found": true,
        "f1_score": 0.25,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_service_user_interface/scope_streaming_service_user_interface.sqlite",
      "db_dump": "CREATE TABLE Streaming_Service (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    price REAL\n);\nCREATE TABLE Streaming_Service_User_Interface (\n    streaming_service_id INTEGER,\n    user_interface_id INTEGER,\n    FOREIGN KEY(streaming_service_id) REFERENCES Streaming_Service(id),\n    FOREIGN KEY(user_interface_id) REFERENCES User_Interface(id)\n);\nCREATE TABLE User_Interface (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    interface_type TEXT\n);\n\nINSERT INTO \"Streaming_Service\" (id,name,price) VALUES (1,'Netflix',12.99),(2,'Amazon Prime Video',8.99),(3,'Disney+',6.99),(4,'Hulu',5.99),(5,'HBO Max',14.99);\nINSERT INTO \"Streaming_Service_User_Interface\" (streaming_service_id,user_interface_id) VALUES (1,2),(2,2),(3,2),(4,2),(5,2),(5,4);\nINSERT INTO \"User_Interface\" (id,interface_type) VALUES (1,'Light Mode'),(2,'Dark Mode'),(3,'Classic Mode'),(4,'Minimalist Mode'),(5,'Customizable Mode');\n",
      "question": "What interface types are the same for all streaming services?",
      "gold_queries": [
        "SELECT User_Interface.interface_type  from Streaming_Service_User_Interface join User_Interface on Streaming_Service_User_Interface.user_interface_id = User_Interface.id join Streaming_Service on Streaming_Service_User_Interface.streaming_service_id = Streaming_Service.id   GROUP BY Streaming_Service_User_Interface.user_interface_id HAVING COUNT(DISTINCT Streaming_Service_User_Interface.streaming_service_id) = (SELECT COUNT(*) FROM  Streaming_Service)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What interface types are present in all streaming services' user interfaces?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT ui.interface_type\nFROM User_Interface ui\nWHERE ui.id IN (\n    SELECT ssui.user_interface_id\n    FROM Streaming_Service_User_Interface ssui\n    GROUP BY ssui.user_interface_id\n    HAVING COUNT(DISTINCT ssui.streaming_service_id) = (SELECT COUNT(*) FROM Streaming_Service)\n)"
          ]
        },
        {
          "interpretation": "What interface types are exclusive to no streaming service?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT interface_type FROM User_Interface WHERE id NOT IN (SELECT user_interface_id FROM Streaming_Service_User_Interface)"
          ]
        },
        {
          "interpretation": "What interface types are most commonly used across streaming services?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ui.interface_type, COUNT(*) AS usage_count\nFROM Streaming_Service_User_Interface ssui\nJOIN User_Interface ui ON ssui.user_interface_id = ui.id\nGROUP BY ui.interface_type\nORDER BY usage_count DESC\nLIMIT 1"
          ]
        },
        {
          "interpretation": "What interface types are not exclusively available to any individual streaming service?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT interface_type \nFROM User_Interface \nWHERE id NOT IN (\n    SELECT user_interface_id \n    FROM Streaming_Service_User_Interface \n    GROUP BY user_interface_id \n    HAVING COUNT(DISTINCT streaming_service_id) = 1\n)"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "one_found": true,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_service_user_interface/scope_streaming_service_user_interface.sqlite",
      "db_dump": "CREATE TABLE Streaming_Service (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    price REAL\n);\nCREATE TABLE Streaming_Service_User_Interface (\n    streaming_service_id INTEGER,\n    user_interface_id INTEGER,\n    FOREIGN KEY(streaming_service_id) REFERENCES Streaming_Service(id),\n    FOREIGN KEY(user_interface_id) REFERENCES User_Interface(id)\n);\nCREATE TABLE User_Interface (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    interface_type TEXT\n);\n\nINSERT INTO \"Streaming_Service\" (id,name,price) VALUES (1,'Netflix',12.99),(2,'Amazon Prime Video',8.99),(3,'Disney+',6.99),(4,'Hulu',5.99),(5,'HBO Max',14.99);\nINSERT INTO \"Streaming_Service_User_Interface\" (streaming_service_id,user_interface_id) VALUES (1,2),(2,2),(3,2),(4,2),(5,2),(5,4);\nINSERT INTO \"User_Interface\" (id,interface_type) VALUES (1,'Light Mode'),(2,'Dark Mode'),(3,'Classic Mode'),(4,'Minimalist Mode'),(5,'Customizable Mode');\n",
      "question": "For all streaming services list the available user interface types.",
      "gold_queries": [
        "select streaming_service.name , user_interface.interface_type from Streaming_Service_User_Interface join User_Interface on Streaming_Service_User_Interface.user_interface_id = User_Interface.id join Streaming_Service on Streaming_Service_User_Interface.streaming_service_id = Streaming_Service.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For each user interface type, list the streaming services that use it.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT ui.interface_type, ss.name\nFROM User_Interface ui\nJOIN Streaming_Service_User_Interface ss_ui ON ui.id = ss_ui.user_interface_id\nJOIN Streaming_Service ss ON ss_ui.streaming_service_id = ss.id"
          ]
        },
        {
          "interpretation": "List the user interface types that have corresponding streaming services.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT T2.interface_type \nFROM Streaming_Service_User_Interface AS T1 \nJOIN User_Interface AS T2 \nON T1.user_interface_id = T2.id"
          ]
        },
        {
          "interpretation": "Determine the user interface types that can be uniquely paired with a specific streaming service.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT ui.interface_type\nFROM User_Interface ui\nJOIN Streaming_Service_User_Interface ssui ON ui.id = ssui.user_interface_id\nWHERE ssui.user_interface_id NOT IN (\n    SELECT user_interface_id\n    FROM Streaming_Service_User_Interface\n    GROUP BY user_interface_id\n    HAVING COUNT(DISTINCT streaming_service_id) > 1\n)"
          ]
        },
        {
          "interpretation": "List all distinct user interface types available across all streaming services.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT interface_type FROM User_Interface"
          ]
        },
        {
          "interpretation": "Find the streaming services that have a specific set of user interface types available.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ss.name \nFROM Streaming_Service ss \nJOIN Streaming_Service_User_Interface ssi ON ss.id = ssi.streaming_service_id \nJOIN User_Interface ui ON ssi.user_interface_id = ui.id \nWHERE ui.interface_type IN ('Dark Mode', 'Minimalist Mode') \nGROUP BY ss.name \nHAVING COUNT(DISTINCT ui.interface_type) = 2"
          ]
        },
        {
          "interpretation": "Determine the set of user interface types common to all streaming services.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT interface_type\nFROM User_Interface\nWHERE id IN (\n    SELECT user_interface_id\n    FROM Streaming_Service_User_Interface\n    GROUP BY user_interface_id\n    HAVING COUNT(DISTINCT streaming_service_id) = (SELECT COUNT(*) FROM Streaming_Service)\n)"
          ]
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.16666666666666666,
        "one_found": true,
        "f1_score": 0.2857142857142857,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_services_subtitles/scope_streaming_services_subtitles.sqlite",
      "db_dump": "CREATE TABLE Streaming_Services (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    url TEXT\n);\nCREATE TABLE Streaming_Services_Subtitles (\n    streaming_service_id INTEGER,\n    subtitle_id INTEGER,\n    FOREIGN KEY(streaming_service_id) REFERENCES Streaming_Services(id),\n    FOREIGN KEY(subtitle_id) REFERENCES Subtitles(id)\n);\nCREATE TABLE Subtitles (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    language TEXT,\n    default_subtitle BOOLEAN DEFAULT FALSE\n);\n\nINSERT INTO \"Streaming_Services\" (id,name,url) VALUES (1,'Netflix','https://www.netflix.com'),(2,'Amazon Prime Video','https://www.amazon.com/prime-video'),(3,'Hulu','https://www.hulu.com'),(4,'Disney+','https://www.disneyplus.com'),(5,'HBO Max','https://www.hbomax.com');\nINSERT INTO \"Streaming_Services_Subtitles\" (streaming_service_id,subtitle_id) VALUES (1,1),(2,2),(3,3),(4,4),(5,5),(2,1),(3,1),(4,1),(5,1);\nINSERT INTO \"Subtitles\" (id,language,default_subtitle) VALUES (1,'English',1),(2,'Spanish',0),(3,'French',0),(4,'German',0),(5,'Italian',0);\n",
      "question": "For every streaming service, give me the corresponding languages and default subtitles.",
      "gold_queries": [
        "select streaming_services.name , subtitles.language , subtitles.default_subtitle from Streaming_Services_Subtitles join Subtitles on Streaming_Services_Subtitles.subtitle_id = Subtitles.id join Streaming_Services on Streaming_Services_Subtitles.streaming_service_id = Streaming_Services.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Display all available languages for each streaming service.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ss.name, s.language\nFROM Streaming_Services ss\nJOIN Streaming_Services_Subtitles sss ON ss.id = sss.streaming_service_id\nJOIN Subtitles s ON sss.subtitle_id = s.id"
          ]
        },
        {
          "interpretation": "Provide the list of languages that have a default subtitle for at least one streaming service.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT T2.language \nFROM Streaming_Services_Subtitles AS T1 \nJOIN Subtitles AS T2 ON T1.subtitle_id = T2.id \nWHERE T2.default_subtitle = TRUE"
          ]
        },
        {
          "interpretation": "Give me the streaming services along with the list of languages, including a marker for each default language.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT SS.name, S.language, S.default_subtitle\nFROM Streaming_Services SS\nJOIN Streaming_Services_Subtitles SSS ON SS.id = SSS.streaming_service_id\nJOIN Subtitles S ON SSS.subtitle_id = S.id"
          ]
        },
        {
          "interpretation": "For every streaming service, give me the set of languages available, along with their default status (default or not).",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ss.name, s.language, CASE WHEN s.default_subtitle = 1 THEN 'default' ELSE 'not default' END AS default_status\nFROM Streaming_Services ss\nJOIN Streaming_Services_Subtitles sss ON ss.id = sss.streaming_service_id\nJOIN Subtitles s ON sss.subtitle_id = s.id"
          ]
        },
        {
          "interpretation": "For every streaming service, provide a list of languages that have default subtitles.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ss.name, s.language\nFROM Streaming_Services AS ss\nJOIN Streaming_Services_Subtitles AS sss ON ss.id = sss.streaming_service_id\nJOIN Subtitles AS s ON sss.subtitle_id = s.id\nWHERE s.default_subtitle = TRUE"
          ]
        },
        {
          "interpretation": "Show the languages and a boolean value indicating if the language has a default subtitle.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT language, default_subtitle FROM Subtitles"
          ]
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.16666666666666666,
        "one_found": true,
        "f1_score": 0.2857142857142857,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_services_subtitles/scope_streaming_services_subtitles.sqlite",
      "db_dump": "CREATE TABLE Streaming_Services (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    url TEXT\n);\nCREATE TABLE Streaming_Services_Subtitles (\n    streaming_service_id INTEGER,\n    subtitle_id INTEGER,\n    FOREIGN KEY(streaming_service_id) REFERENCES Streaming_Services(id),\n    FOREIGN KEY(subtitle_id) REFERENCES Subtitles(id)\n);\nCREATE TABLE Subtitles (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    language TEXT,\n    default_subtitle BOOLEAN DEFAULT FALSE\n);\n\nINSERT INTO \"Streaming_Services\" (id,name,url) VALUES (1,'Netflix','https://www.netflix.com'),(2,'Amazon Prime Video','https://www.amazon.com/prime-video'),(3,'Hulu','https://www.hulu.com'),(4,'Disney+','https://www.disneyplus.com'),(5,'HBO Max','https://www.hbomax.com');\nINSERT INTO \"Streaming_Services_Subtitles\" (streaming_service_id,subtitle_id) VALUES (1,1),(2,2),(3,3),(4,4),(5,5),(2,1),(3,1),(4,1),(5,1);\nINSERT INTO \"Subtitles\" (id,language,default_subtitle) VALUES (1,'English',1),(2,'Spanish',0),(3,'French',0),(4,'German',0),(5,'Italian',0);\n",
      "question": "List the status of subtitles for every streaming service.",
      "gold_queries": [
        "select streaming_services.name , subtitles.default_subtitle from Streaming_Services_Subtitles join Subtitles on Streaming_Services_Subtitles.subtitle_id = Subtitles.id join Streaming_Services on Streaming_Services_Subtitles.streaming_service_id = Streaming_Services.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List the languages of the default subtitles for all streaming services.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT T2.language \nFROM Streaming_Services_Subtitles AS T1 \nJOIN Subtitles AS T2 \nON T1.subtitle_id = T2.id \nWHERE T2.default_subtitle = 1"
          ]
        },
        {
          "interpretation": "Identify the default subtitles for each streaming service in a specific language (e.g. English).",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ss.name, s.language\nFROM Streaming_Services ss\nJOIN Streaming_Services_Subtitles sss ON ss.id = sss.streaming_service_id\nJOIN Subtitles s ON sss.subtitle_id = s.id\nWHERE s.default_subtitle = TRUE AND s.language = 'English'"
          ]
        },
        {
          "interpretation": "Determine the count of unique subtitles for each streaming service.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ss.name, COUNT(DISTINCT sss.subtitle_id) AS unique_subtitles_count\nFROM Streaming_Services ss\nJOIN Streaming_Services_Subtitles sss ON ss.id = sss.streaming_service_id\nGROUP BY ss.name"
          ]
        },
        {
          "interpretation": "Find all streaming services that have subtitles in the same language.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT s1.name \nFROM Streaming_Services s1 \nJOIN Streaming_Services_Subtitles ss1 ON s1.id = ss1.streaming_service_id \nJOIN Subtitles sub1 ON ss1.subtitle_id = sub1.id \nWHERE sub1.id IN (\n    SELECT ss2.subtitle_id \n    FROM Streaming_Services_Subtitles ss2 \n    WHERE ss2.streaming_service_id != s1.id\n)"
          ]
        },
        {
          "interpretation": "Find all streaming services that do not have any subtitles.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name FROM Streaming_Services WHERE id NOT IN (SELECT streaming_service_id FROM Streaming_Services_Subtitles)"
          ]
        },
        {
          "interpretation": "List all subtitles for each streaming service with their respective language.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT s.name AS streaming_service, sb.language AS subtitle_language\nFROM Streaming_Services s\nJOIN Streaming_Services_Subtitles sss ON s.id = sss.streaming_service_id\nJOIN Subtitles sb ON sss.subtitle_id = sb.id"
          ]
        },
        {
          "interpretation": "Determine the streaming service with the highest count of unique subtitles.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT s.name\nFROM Streaming_Services s\nJOIN (\n    SELECT streaming_service_id, COUNT(DISTINCT subtitle_id) as subtitle_count\n    FROM Streaming_Services_Subtitles\n    GROUP BY streaming_service_id\n) ss ON s.id = ss.streaming_service_id\nORDER BY ss.subtitle_count DESC\nLIMIT 1"
          ]
        },
        {
          "interpretation": "Find the streaming services that have at least two unique subtitles.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ss.name \nFROM Streaming_Services ss \nJOIN Streaming_Services_Subtitles sss ON ss.id = sss.streaming_service_id \nGROUP BY ss.name \nHAVING COUNT(DISTINCT sss.subtitle_id) >= 2"
          ]
        }
      ],
      "num_unique_execution_results": 8,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 8,
        "num_unique_queries": 8,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Traffic/scope_train_stations_platforms/scope_train_stations_platforms.sqlite",
      "db_dump": "CREATE TABLE Platforms(\n    PlatformID INTEGER PRIMARY KEY AUTOINCREMENT,\n    \"Name\" TEXT);\nCREATE TABLE Train_Stations(\n    StationID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Location TEXT);\nCREATE TABLE Train_Stations_Platforms(\n    StationID INTEGER,\n    PlatformID INTEGER,\n    FOREIGN KEY(StationID) REFERENCES Train_Stations(StationID),\n    FOREIGN KEY(PlatformID) REFERENCES Platforms(PlatformID));\n\nINSERT INTO \"Platforms\" (PlatformID,Name) VALUES (1,'Platform_1'),(2,'Platform_2'),(3,'Platform_3'),(4,'Platform_4'),(5,'Platform_5');\nINSERT INTO \"Train_Stations\" (StationID,Name,Location) VALUES (1,'Central','Downtown'),(2,'Parkville','East Side'),(3,'Washington','West Side'),(4,'Lakeview','North Side'),(5,'Riverfront','South Side');\nINSERT INTO \"Train_Stations_Platforms\" (StationID,PlatformID) VALUES (1,1),(1,2),(2,1),(2,2),(3,1),(3,3),(4,4),(4,5),(5,1),(5,3),(4,1);\n",
      "question": "Give me the platform names that are at each train station.",
      "gold_queries": [
        "SELECT Platforms.Name  from Train_Stations_Platforms join Platforms on Train_Stations_Platforms.PlatformID = Platforms.PlatformID join Train_Stations on Train_Stations_Platforms.StationID = Train_Stations.StationID   GROUP BY Train_Stations_Platforms.PlatformID HAVING COUNT(DISTINCT Train_Stations_Platforms.StationID) = (SELECT COUNT(*) FROM  Train_Stations)",
        "select train_stations.name , platforms.name from Train_Stations_Platforms join Platforms on Train_Stations_Platforms.PlatformID = Platforms.PlatformID join Train_Stations on Train_Stations_Platforms.StationID = Train_Stations.StationID"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Provide a list of all platforms with the train station each is associated with, and include the name of each platform.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Platforms.Name AS PlatformName, Train_Stations.Name AS StationName\nFROM Train_Stations_Platforms\nJOIN Platforms ON Train_Stations_Platforms.PlatformID = Platforms.PlatformID\nJOIN Train_Stations ON Train_Stations_Platforms.StationID = Train_Stations.StationID"
          ]
        },
        {
          "interpretation": "Get every train station with all its available platform names.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Train_Stations.Name, GROUP_CONCAT(Platforms.Name) AS PlatformNames\nFROM Train_Stations\nJOIN Train_Stations_Platforms ON Train_Stations.StationID = Train_Stations_Platforms.StationID\nJOIN Platforms ON Train_Stations_Platforms.PlatformID = Platforms.PlatformID\nGROUP BY Train_Stations.Name"
          ]
        },
        {
          "interpretation": "Give the platform names for each individual train station, or alternatively, just let me see all stations that have multiple platforms.",
          "metrics": {
            "recall": 0.5,
            "precision": 0.5,
            "f1_score": 0.5,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ts.Name AS StationName, p.Name AS PlatformName\nFROM Train_Stations_Platforms tsp\nJOIN Train_Stations ts ON tsp.StationID = ts.StationID\nJOIN Platforms p ON tsp.PlatformID = p.PlatformID\nORDER BY ts.Name",
            "SELECT ts.Name AS StationName\nFROM Train_Stations_Platforms tsp\nJOIN Train_Stations ts ON tsp.StationID = ts.StationID\nGROUP BY ts.Name\nHAVING COUNT(DISTINCT tsp.PlatformID) > 1"
          ]
        },
        {
          "interpretation": "Give the train station along with all its related platforms in a single row in the output (e.g. each station and its related platforms on the same row).",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT TS.Name, GROUP_CONCAT(P.Name, ', ') AS Platforms\nFROM Train_Stations TS\nJOIN Train_Stations_Platforms TSP ON TS.StationID = TSP.StationID\nJOIN Platforms P ON TSP.PlatformID = P.PlatformID\nGROUP BY TS.StationID"
          ]
        },
        {
          "interpretation": "For every station and its platforms, output both the station name and those of the platforms, separated by a dot.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Train_Stations.Name || '.' || Platforms.Name AS Station_Platform\nFROM Train_Stations_Platforms\nJOIN Train_Stations ON Train_Stations_Platforms.StationID = Train_Stations.StationID\nJOIN Platforms ON Train_Stations_Platforms.PlatformID = Platforms.PlatformID"
          ]
        },
        {
          "interpretation": "Get the platforms that are at multiple train stations, along with those of the stations they are at.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT TSP.PlatformID, TS.Name\nFROM Train_Stations_Platforms AS TSP\nJOIN Train_Stations AS TS ON TSP.StationID = TS.StationID\nWHERE TSP.PlatformID IN (\n    SELECT PlatformID\n    FROM Train_Stations_Platforms\n    GROUP BY PlatformID\n    HAVING COUNT(DISTINCT StationID) > 1\n)"
          ]
        },
        {
          "interpretation": "Output the number of platforms available at each train station.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Train_Stations.Name, COUNT(Train_Stations_Platforms.PlatformID) AS NumberOfPlatforms\nFROM Train_Stations\nJOIN Train_Stations_Platforms ON Train_Stations.StationID = Train_Stations_Platforms.StationID\nGROUP BY Train_Stations.Name"
          ]
        },
        {
          "interpretation": "Get the distinct train stations and the count of their platforms, as well as the names and IDs of the platforms.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT TS.Name AS TrainStation, TS.StationID, P.Name AS PlatformName, P.PlatformID, COUNT(TSP.PlatformID) AS PlatformCount\nFROM Train_Stations TS\nJOIN Train_Stations_Platforms TSP ON TS.StationID = TSP.StationID\nJOIN Platforms P ON TSP.PlatformID = P.PlatformID\nGROUP BY TS.Name, TS.StationID"
          ]
        }
      ],
      "num_unique_execution_results": 9,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.2222222222222222,
        "one_found": true,
        "f1_score": 0.30769230769230765,
        "num_queries": 9,
        "num_unique_queries": 9,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/scope/Traffic/scope_train_stations_platforms/scope_train_stations_platforms.sqlite",
      "db_dump": "CREATE TABLE Platforms(\n    PlatformID INTEGER PRIMARY KEY AUTOINCREMENT,\n    \"Name\" TEXT);\nCREATE TABLE Train_Stations(\n    StationID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Location TEXT);\nCREATE TABLE Train_Stations_Platforms(\n    StationID INTEGER,\n    PlatformID INTEGER,\n    FOREIGN KEY(StationID) REFERENCES Train_Stations(StationID),\n    FOREIGN KEY(PlatformID) REFERENCES Platforms(PlatformID));\n\nINSERT INTO \"Platforms\" (PlatformID,Name) VALUES (1,'Platform_1'),(2,'Platform_2'),(3,'Platform_3'),(4,'Platform_4'),(5,'Platform_5');\nINSERT INTO \"Train_Stations\" (StationID,Name,Location) VALUES (1,'Central','Downtown'),(2,'Parkville','East Side'),(3,'Washington','West Side'),(4,'Lakeview','North Side'),(5,'Riverfront','South Side');\nINSERT INTO \"Train_Stations_Platforms\" (StationID,PlatformID) VALUES (1,1),(1,2),(2,1),(2,2),(3,1),(3,3),(4,4),(4,5),(5,1),(5,3),(4,1);\n",
      "question": "What platform names are in common for all train stations?",
      "gold_queries": [
        "SELECT Platforms.Name  from Train_Stations_Platforms join Platforms on Train_Stations_Platforms.PlatformID = Platforms.PlatformID join Train_Stations on Train_Stations_Platforms.StationID = Train_Stations.StationID   GROUP BY Train_Stations_Platforms.PlatformID HAVING COUNT(DISTINCT Train_Stations_Platforms.StationID) = (SELECT COUNT(*) FROM  Train_Stations)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "All platform names used by at least one train station that is exclusively shared by all of them.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT P.Name \nFROM Platforms P \nJOIN Train_Stations_Platforms TSP ON P.PlatformID = TSP.PlatformID \nGROUP BY P.Name \nHAVING COUNT(DISTINCT TSP.StationID) = (SELECT COUNT(*) FROM Train_Stations)"
          ]
        },
        {
          "interpretation": "What names do the platforms of the train stations have in common.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.Name \nFROM Platforms P\nJOIN Train_Stations_Platforms TSP ON P.PlatformID = TSP.PlatformID\nGROUP BY P.Name\nHAVING COUNT(DISTINCT TSP.StationID) > 1"
          ]
        },
        {
          "interpretation": "What common names for the platforms all the train stations share.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT PlatformID, Name\nFROM Platforms\nWHERE PlatformID IN (\n    SELECT PlatformID\n    FROM Train_Stations_Platforms\n    GROUP BY PlatformID\n    HAVING COUNT(DISTINCT StationID) = (SELECT COUNT(*) FROM Train_Stations)\n)"
          ]
        },
        {
          "interpretation": "The intersection of the names of the PlatformID 1 in all train stations.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT T2.Name \nFROM Train_Stations_Platforms AS T1 \nJOIN Train_Stations AS T2 \nON T1.StationID = T2.StationID \nWHERE T1.PlatformID = 1"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "one_found": true,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Traffic/scope_train_stations_platforms/scope_train_stations_platforms.sqlite",
      "db_dump": "CREATE TABLE Platforms(\n    PlatformID INTEGER PRIMARY KEY AUTOINCREMENT,\n    \"Name\" TEXT);\nCREATE TABLE Train_Stations(\n    StationID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Location TEXT);\nCREATE TABLE Train_Stations_Platforms(\n    StationID INTEGER,\n    PlatformID INTEGER,\n    FOREIGN KEY(StationID) REFERENCES Train_Stations(StationID),\n    FOREIGN KEY(PlatformID) REFERENCES Platforms(PlatformID));\n\nINSERT INTO \"Platforms\" (PlatformID,Name) VALUES (1,'Platform_1'),(2,'Platform_2'),(3,'Platform_3'),(4,'Platform_4'),(5,'Platform_5');\nINSERT INTO \"Train_Stations\" (StationID,Name,Location) VALUES (1,'Central','Downtown'),(2,'Parkville','East Side'),(3,'Washington','West Side'),(4,'Lakeview','North Side'),(5,'Riverfront','South Side');\nINSERT INTO \"Train_Stations_Platforms\" (StationID,PlatformID) VALUES (1,1),(1,2),(2,1),(2,2),(3,1),(3,3),(4,4),(4,5),(5,1),(5,3),(4,1);\n",
      "question": "For every train station, what platform names are there?",
      "gold_queries": [
        "select train_stations.name , platforms.name from Train_Stations_Platforms join Platforms on Train_Stations_Platforms.PlatformID = Platforms.PlatformID join Train_Stations on Train_Stations_Platforms.StationID = Train_Stations.StationID"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What are all spare platforms (i.e., platforms not assigned to any train station) and their names?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name FROM Platforms WHERE PlatformID NOT IN (SELECT PlatformID FROM Train_Stations_Platforms)"
          ]
        },
        {
          "interpretation": "For each station, obtain the names of all platforms that are available at that station.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Train_Stations.Name, Platforms.Name\nFROM Train_Stations\nJOIN Train_Stations_Platforms ON Train_Stations.StationID = Train_Stations_Platforms.StationID\nJOIN Platforms ON Train_Stations_Platforms.PlatformID = Platforms.PlatformID"
          ]
        },
        {
          "interpretation": "What are all distinct platform names assigned to train stations in the database?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT P.Name FROM Platforms P INNER JOIN Train_Stations_Platforms TSP ON P.PlatformID = TSP.PlatformID"
          ]
        },
        {
          "interpretation": "Every train station has a set of associated platforms, return the names of these platforms.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Platforms.Name \nFROM Platforms \nJOIN Train_Stations_Platforms ON Platforms.PlatformID = Train_Stations_Platforms.PlatformID"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "one_found": true,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_services_subtitles/scope_streaming_services_subtitles.sqlite",
      "db_dump": "CREATE TABLE Streaming_Services (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    url TEXT\n);\nCREATE TABLE Streaming_Services_Subtitles (\n    streaming_service_id INTEGER,\n    subtitle_id INTEGER,\n    FOREIGN KEY(streaming_service_id) REFERENCES Streaming_Services(id),\n    FOREIGN KEY(subtitle_id) REFERENCES Subtitles(id)\n);\nCREATE TABLE Subtitles (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    language TEXT,\n    default_subtitle BOOLEAN DEFAULT FALSE\n);\n\nINSERT INTO \"Streaming_Services\" (id,name,url) VALUES (1,'Netflix','https://www.netflix.com'),(2,'Amazon Prime Video','https://www.amazon.com/prime-video'),(3,'Hulu','https://www.hulu.com'),(4,'Disney+','https://www.disneyplus.com'),(5,'HBO Max','https://www.hbomax.com');\nINSERT INTO \"Streaming_Services_Subtitles\" (streaming_service_id,subtitle_id) VALUES (1,1),(2,2),(3,3),(4,4),(5,5),(2,1),(3,1),(4,1),(5,1);\nINSERT INTO \"Subtitles\" (id,language,default_subtitle) VALUES (1,'English',1),(2,'Spanish',0),(3,'French',0),(4,'German',0),(5,'Italian',0);\n",
      "question": "What languages are available for subtitles on each streaming service?",
      "gold_queries": [
        "SELECT Subtitles.language  from Streaming_Services_Subtitles join Subtitles on Streaming_Services_Subtitles.subtitle_id = Subtitles.id join Streaming_Services on Streaming_Services_Subtitles.streaming_service_id = Streaming_Services.id   GROUP BY Streaming_Services_Subtitles.subtitle_id HAVING COUNT(DISTINCT Streaming_Services_Subtitles.streaming_service_id) = (SELECT COUNT(*) FROM  Streaming_Services)",
        "select streaming_services.name , subtitles.language from Streaming_Services_Subtitles join Subtitles on Streaming_Services_Subtitles.subtitle_id = Subtitles.id join Streaming_Services on Streaming_Services_Subtitles.streaming_service_id = Streaming_Services.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Include only languages with default subtitles for each streaming service.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT ss.name, s.language\nFROM Streaming_Services ss\nJOIN Streaming_Services_Subtitles sss ON ss.id = sss.streaming_service_id\nJOIN Subtitles s ON sss.subtitle_id = s.id\nWHERE s.default_subtitle = TRUE"
          ]
        },
        {
          "interpretation": "Show subtitle languages you can change per service.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ss.name, s.language \nFROM Streaming_Services_Subtitles sss \nJOIN Streaming_Services ss ON sss.streaming_service_id = ss.id \nJOIN Subtitles s ON sss.subtitle_id = s.id"
          ]
        },
        {
          "interpretation": "How does user possibly want what would govern new source criteria fitting # exactly to on-language.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT SS.name\nFROM Streaming_Services SS\nJOIN Streaming_Services_Subtitles SSS ON SS.id = SSS.streaming_service_id\nJOIN Subtitles S ON SSS.subtitle_id = S.id\nWHERE S.language = 'English'"
          ]
        },
        {
          "interpretation": "Enumerate language names exactly as shown across streamed subtitles.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT language FROM Subtitles"
          ]
        },
        {
          "interpretation": "Return how many languages that it also is available on title, i.e. All broadcasts are multilanguage on service.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(DISTINCT language) AS language_count, ss.name\nFROM Streaming_Services ss\nJOIN Streaming_Services_Subtitles sss ON ss.id = sss.streaming_service_id\nJOIN Subtitles s ON sss.subtitle_id = s.id\nGROUP BY ss.name\nHAVING COUNT(DISTINCT language) > 1"
          ]
        },
        {
          "interpretation": "Sample one subtitle language per streaming service.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT s.name, sub.language\nFROM Streaming_Services s\nJOIN Streaming_Services_Subtitles sss ON s.id = sss.streaming_service_id\nJOIN Subtitles sub ON sss.subtitle_id = sub.id\nGROUP BY s.name"
          ]
        },
        {
          "interpretation": "Stream attribute grouping multiple usage 20Disable combined show subtitles displaying via vids.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.name, SUBT.language\nFROM Streaming_Services S\nJOIN Streaming_Services_Subtitles SSS ON S.id = SSS.streaming_service_id\nJOIN Subtitles SUBT ON SSS.subtitle_id = SUBT.id\nWHERE SUBT.default_subtitle = 0"
          ]
        },
        {
          "interpretation": "What total distinct subtitle available, across all types by services.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(DISTINCT subtitle_id) FROM Streaming_Services_Subtitles"
          ]
        }
      ],
      "num_unique_execution_results": 8,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.125,
        "one_found": true,
        "f1_score": 0.2,
        "num_queries": 8,
        "num_unique_queries": 8,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_services_subtitles/scope_streaming_services_subtitles.sqlite",
      "db_dump": "CREATE TABLE Streaming_Services (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    url TEXT\n);\nCREATE TABLE Streaming_Services_Subtitles (\n    streaming_service_id INTEGER,\n    subtitle_id INTEGER,\n    FOREIGN KEY(streaming_service_id) REFERENCES Streaming_Services(id),\n    FOREIGN KEY(subtitle_id) REFERENCES Subtitles(id)\n);\nCREATE TABLE Subtitles (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    language TEXT,\n    default_subtitle BOOLEAN DEFAULT FALSE\n);\n\nINSERT INTO \"Streaming_Services\" (id,name,url) VALUES (1,'Netflix','https://www.netflix.com'),(2,'Amazon Prime Video','https://www.amazon.com/prime-video'),(3,'Hulu','https://www.hulu.com'),(4,'Disney+','https://www.disneyplus.com'),(5,'HBO Max','https://www.hbomax.com');\nINSERT INTO \"Streaming_Services_Subtitles\" (streaming_service_id,subtitle_id) VALUES (1,1),(2,2),(3,3),(4,4),(5,5),(2,1),(3,1),(4,1),(5,1);\nINSERT INTO \"Subtitles\" (id,language,default_subtitle) VALUES (1,'English',1),(2,'Spanish',0),(3,'French',0),(4,'German',0),(5,'Italian',0);\n",
      "question": "List the status of subtitles that are common to all streaming services.",
      "gold_queries": [
        "SELECT Subtitles.default_subtitle  from Streaming_Services_Subtitles join Subtitles on Streaming_Services_Subtitles.subtitle_id = Subtitles.id join Streaming_Services on Streaming_Services_Subtitles.streaming_service_id = Streaming_Services.id   GROUP BY Streaming_Services_Subtitles.subtitle_id HAVING COUNT(DISTINCT Streaming_Services_Subtitles.streaming_service_id) = (SELECT COUNT(*) FROM  Streaming_Services)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Return default_subtitle values of the Subtitles table that match every single value of subtitle_id in Streaming_Services_Subtitles.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT default_subtitle FROM Subtitles WHERE id IN (SELECT subtitle_id FROM Streaming_Services_Subtitles GROUP BY subtitle_id HAVING COUNT(*) = (SELECT COUNT(*) FROM Streaming_Services))"
          ]
        },
        {
          "interpretation": "List the default subtitle status of subtitles that are listed at least once in the Streaming_Services_Subtitles table for each distinct streaming service.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ss.name, s.default_subtitle\nFROM Streaming_Services ss\nJOIN Streaming_Services_Subtitles sss ON ss.id = sss.streaming_service_id\nJOIN Subtitles s ON sss.subtitle_id = s.id\nWHERE s.default_subtitle = 1\nGROUP BY ss.name"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "one_found": true,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_services_subtitles/scope_streaming_services_subtitles.sqlite",
      "db_dump": "CREATE TABLE Streaming_Services (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    url TEXT\n);\nCREATE TABLE Streaming_Services_Subtitles (\n    streaming_service_id INTEGER,\n    subtitle_id INTEGER,\n    FOREIGN KEY(streaming_service_id) REFERENCES Streaming_Services(id),\n    FOREIGN KEY(subtitle_id) REFERENCES Subtitles(id)\n);\nCREATE TABLE Subtitles (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    language TEXT,\n    default_subtitle BOOLEAN DEFAULT FALSE\n);\n\nINSERT INTO \"Streaming_Services\" (id,name,url) VALUES (1,'Netflix','https://www.netflix.com'),(2,'Amazon Prime Video','https://www.amazon.com/prime-video'),(3,'Hulu','https://www.hulu.com'),(4,'Disney+','https://www.disneyplus.com'),(5,'HBO Max','https://www.hbomax.com');\nINSERT INTO \"Streaming_Services_Subtitles\" (streaming_service_id,subtitle_id) VALUES (1,1),(2,2),(3,3),(4,4),(5,5),(2,1),(3,1),(4,1),(5,1);\nINSERT INTO \"Subtitles\" (id,language,default_subtitle) VALUES (1,'English',1),(2,'Spanish',0),(3,'French',0),(4,'German',0),(5,'Italian',0);\n",
      "question": "For each streaming service. provide the corresponding subtitle language options.",
      "gold_queries": [
        "select streaming_services.name , subtitles.language from Streaming_Services_Subtitles join Subtitles on Streaming_Services_Subtitles.subtitle_id = Subtitles.id join Streaming_Services on Streaming_Services_Subtitles.streaming_service_id = Streaming_Services.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Return a table containing streaming services on one column and comma-separated subtitle languages on another column.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ss.name AS streaming_service, GROUP_CONCAT(sub.language, ', ') AS subtitle_languages\nFROM Streaming_Services ss\nJOIN Streaming_Services_Subtitles sss ON ss.id = sss.streaming_service_id\nJOIN Subtitles sub ON sss.subtitle_id = sub.id\nGROUP BY ss.name"
          ]
        },
        {
          "interpretation": "List each streaming service alongside its unique subtitle language options.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT s.name, sub.language\nFROM Streaming_Services s\nJOIN Streaming_Services_Subtitles sss ON s.id = sss.streaming_service_id\nJOIN Subtitles sub ON sss.subtitle_id = sub.id\nGROUP BY s.name, sub.language"
          ]
        },
        {
          "interpretation": "Return a table with unique streaming services and a list of their associated subtitle languages.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ss.name, GROUP_CONCAT(DISTINCT s.language) AS subtitle_languages\nFROM Streaming_Services ss\nJOIN Streaming_Services_Subtitles sss ON ss.id = sss.streaming_service_id\nJOIN Subtitles s ON sss.subtitle_id = s.id\nGROUP BY ss.id, ss.name"
          ]
        },
        {
          "interpretation": "Return a table with streaming services as rows and corresponding subtitle languages as columns.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    ss.name AS Streaming_Service,\n    MAX(CASE WHEN s.language = 'English' THEN s.language END) AS English,\n    MAX(CASE WHEN s.language = 'Spanish' THEN s.language END) AS Spanish,\n    MAX(CASE WHEN s.language = 'French' THEN s.language END) AS French,\n    MAX(CASE WHEN s.language = 'German' THEN s.language END) AS German,\n    MAX(CASE WHEN s.language = 'Italian' THEN s.language END) AS Italian\nFROM \n    Streaming_Services ss\nJOIN \n    Streaming_Services_Subtitles sss ON ss.id = sss.streaming_service_id\nJOIN \n    Subtitles s ON sss.subtitle_id = s.id\nGROUP BY \n    ss.name"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "one_found": true,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_services_subtitles/scope_streaming_services_subtitles.sqlite",
      "db_dump": "CREATE TABLE Streaming_Services (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    url TEXT\n);\nCREATE TABLE Streaming_Services_Subtitles (\n    streaming_service_id INTEGER,\n    subtitle_id INTEGER,\n    FOREIGN KEY(streaming_service_id) REFERENCES Streaming_Services(id),\n    FOREIGN KEY(subtitle_id) REFERENCES Subtitles(id)\n);\nCREATE TABLE Subtitles (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    language TEXT,\n    default_subtitle BOOLEAN DEFAULT FALSE\n);\n\nINSERT INTO \"Streaming_Services\" (id,name,url) VALUES (1,'Netflix','https://www.netflix.com'),(2,'Amazon Prime Video','https://www.amazon.com/prime-video'),(3,'Hulu','https://www.hulu.com'),(4,'Disney+','https://www.disneyplus.com'),(5,'HBO Max','https://www.hbomax.com');\nINSERT INTO \"Streaming_Services_Subtitles\" (streaming_service_id,subtitle_id) VALUES (1,1),(2,2),(3,3),(4,4),(5,5),(2,1),(3,1),(4,1),(5,1);\nINSERT INTO \"Subtitles\" (id,language,default_subtitle) VALUES (1,'English',1),(2,'Spanish',0),(3,'French',0),(4,'German',0),(5,'Italian',0);\n",
      "question": "what language and default subtitle is common for all streaming services?",
      "gold_queries": [
        "SELECT Subtitles.language, Subtitles.default_subtitle  from Streaming_Services_Subtitles join Subtitles on Streaming_Services_Subtitles.subtitle_id = Subtitles.id join Streaming_Services on Streaming_Services_Subtitles.streaming_service_id = Streaming_Services.id   GROUP BY Streaming_Services_Subtitles.subtitle_id HAVING COUNT(DISTINCT Streaming_Services_Subtitles.streaming_service_id) = (SELECT COUNT(*) FROM  Streaming_Services)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What language is common for the default subtitles across all streaming services?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT language \nFROM Subtitles \nWHERE id IN (\n    SELECT subtitle_id \n    FROM Streaming_Services_Subtitles \n    GROUP BY subtitle_id \n    HAVING COUNT(DISTINCT streaming_service_id) = (SELECT COUNT(*) FROM Streaming_Services)\n) \nAND default_subtitle = TRUE"
          ]
        },
        {
          "interpretation": "What language and default subtitle are shared by all streaming services in the Subtitles table?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Subtitles.language, Subtitles.default_subtitle\nFROM Subtitles\nWHERE Subtitles.id = (\n    SELECT S1.subtitle_id\n    FROM Streaming_Services_Subtitles S1\n    GROUP BY S1.subtitle_id\n    HAVING COUNT(DISTINCT S1.streaming_service_id) = (SELECT COUNT(*) FROM Streaming_Services)\n)"
          ]
        },
        {
          "interpretation": "What is the common language and default subtitle of all streaming services' subtitles?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.language, S.default_subtitle\nFROM Subtitles S\nWHERE S.id IN (\n    SELECT DISTINCT SS.subtitle_id\n    FROM Streaming_Services_Subtitles SS\n)"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "one_found": true,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_services_subtitles/scope_streaming_services_subtitles.sqlite",
      "db_dump": "CREATE TABLE Streaming_Services (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    url TEXT\n);\nCREATE TABLE Streaming_Services_Subtitles (\n    streaming_service_id INTEGER,\n    subtitle_id INTEGER,\n    FOREIGN KEY(streaming_service_id) REFERENCES Streaming_Services(id),\n    FOREIGN KEY(subtitle_id) REFERENCES Subtitles(id)\n);\nCREATE TABLE Subtitles (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    language TEXT,\n    default_subtitle BOOLEAN DEFAULT FALSE\n);\n\nINSERT INTO \"Streaming_Services\" (id,name,url) VALUES (1,'Netflix','https://www.netflix.com'),(2,'Amazon Prime Video','https://www.amazon.com/prime-video'),(3,'Hulu','https://www.hulu.com'),(4,'Disney+','https://www.disneyplus.com'),(5,'HBO Max','https://www.hbomax.com');\nINSERT INTO \"Streaming_Services_Subtitles\" (streaming_service_id,subtitle_id) VALUES (1,1),(2,2),(3,3),(4,4),(5,5),(2,1),(3,1),(4,1),(5,1);\nINSERT INTO \"Subtitles\" (id,language,default_subtitle) VALUES (1,'English',1),(2,'Spanish',0),(3,'French',0),(4,'German',0),(5,'Italian',0);\n",
      "question": "Which subtitle language is common across all streaming services?",
      "gold_queries": [
        "SELECT Subtitles.language  from Streaming_Services_Subtitles join Subtitles on Streaming_Services_Subtitles.subtitle_id = Subtitles.id join Streaming_Services on Streaming_Services_Subtitles.streaming_service_id = Streaming_Services.id   GROUP BY Streaming_Services_Subtitles.subtitle_id HAVING COUNT(DISTINCT Streaming_Services_Subtitles.streaming_service_id) = (SELECT COUNT(*) FROM  Streaming_Services)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Which language is associated with the highest number of streaming services.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT language FROM Subtitles WHERE id = (SELECT subtitle_id FROM Streaming_Services_Subtitles GROUP BY subtitle_id ORDER BY COUNT(*) DESC LIMIT 1)"
          ]
        },
        {
          "interpretation": "Count the occurrence of subtitle languages and determine which one occurs most.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT language, COUNT(*) as occurrence \nFROM Subtitles \nGROUP BY language \nORDER BY occurrence DESC \nLIMIT 1"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "one_found": true,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Streaming Service/scope_streaming_services_subtitles/scope_streaming_services_subtitles.sqlite",
      "db_dump": "CREATE TABLE Streaming_Services (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    url TEXT\n);\nCREATE TABLE Streaming_Services_Subtitles (\n    streaming_service_id INTEGER,\n    subtitle_id INTEGER,\n    FOREIGN KEY(streaming_service_id) REFERENCES Streaming_Services(id),\n    FOREIGN KEY(subtitle_id) REFERENCES Subtitles(id)\n);\nCREATE TABLE Subtitles (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    language TEXT,\n    default_subtitle BOOLEAN DEFAULT FALSE\n);\n\nINSERT INTO \"Streaming_Services\" (id,name,url) VALUES (1,'Netflix','https://www.netflix.com'),(2,'Amazon Prime Video','https://www.amazon.com/prime-video'),(3,'Hulu','https://www.hulu.com'),(4,'Disney+','https://www.disneyplus.com'),(5,'HBO Max','https://www.hbomax.com');\nINSERT INTO \"Streaming_Services_Subtitles\" (streaming_service_id,subtitle_id) VALUES (1,1),(2,2),(3,3),(4,4),(5,5),(2,1),(3,1),(4,1),(5,1);\nINSERT INTO \"Subtitles\" (id,language,default_subtitle) VALUES (1,'English',1),(2,'Spanish',0),(3,'French',0),(4,'German',0),(5,'Italian',0);\n",
      "question": "Which languages and default subtitles are associated with every streaming service?",
      "gold_queries": [
        "SELECT Subtitles.language, Subtitles.default_subtitle  from Streaming_Services_Subtitles join Subtitles on Streaming_Services_Subtitles.subtitle_id = Subtitles.id join Streaming_Services on Streaming_Services_Subtitles.streaming_service_id = Streaming_Services.id   GROUP BY Streaming_Services_Subtitles.subtitle_id HAVING COUNT(DISTINCT Streaming_Services_Subtitles.streaming_service_id) = (SELECT COUNT(*) FROM  Streaming_Services)",
        "select streaming_services.name , subtitles.language , subtitles.default_subtitle from Streaming_Services_Subtitles join Subtitles on Streaming_Services_Subtitles.subtitle_id = Subtitles.id join Streaming_Services on Streaming_Services_Subtitles.streaming_service_id = Streaming_Services.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Display each streaming service with a specific language having a default subtitle.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ss.name\nFROM Streaming_Services ss\nJOIN Streaming_Services_Subtitles sss ON ss.id = sss.streaming_service_id\nJOIN Subtitles s ON sss.subtitle_id = s.id\nWHERE s.default_subtitle = 1"
          ]
        },
        {
          "interpretation": "Find all streaming services associated with a default subtitle and list the languages and default status.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.name, B.language, B.default_subtitle \nFROM Streaming_Services AS S \nJOIN Streaming_Services_Subtitles AS SS ON S.id = SS.streaming_service_id \nJOIN Subtitles AS B ON SS.subtitle_id = B.id \nWHERE B.default_subtitle = TRUE"
          ]
        },
        {
          "interpretation": "List all subtitles for each streaming service, then display their language and default status.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ss.name, s.language, s.default_subtitle FROM Streaming_Services ss JOIN Streaming_Services_Subtitles sss ON ss.id = sss.streaming_service_id JOIN Subtitles s ON sss.subtitle_id = s.id"
          ]
        },
        {
          "interpretation": "List the language and default status for every available subtitle, including those without a streaming service association.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT language, default_subtitle FROM Subtitles"
          ]
        },
        {
          "interpretation": "Find the language with default subtitle for each streaming service, even if it is not present in the subtitles table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ss.name, COALESCE(s.language, 'No Default Subtitle') AS language\nFROM Streaming_Services ss\nLEFT JOIN Streaming_Services_Subtitles sss ON ss.id = sss.streaming_service_id\nLEFT JOIN Subtitles s ON sss.subtitle_id = s.id AND s.default_subtitle = 1"
          ]
        },
        {
          "interpretation": "List all languages associated with a specific streaming service and their default status.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.language, T2.default_subtitle \nFROM Streaming_Services_Subtitles AS T1 \nJOIN Subtitles AS T2 ON T1.subtitle_id = T2.id \nJOIN Streaming_Services AS T3 ON T1.streaming_service_id = T3.id \nWHERE T3.name = 'Specify_Streaming_Service'"
          ]
        },
        {
          "interpretation": "Retrieve the language and default subtitle information for all streaming services and for every subtitle.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT SSS.streaming_service_id, SUB.language, SUB.default_subtitle\nFROM Streaming_Services_Subtitles SSS\nJOIN Subtitles SUB ON SSS.subtitle_id = SUB.id"
          ]
        },
        {
          "interpretation": "List the default language and its associated streaming service for each language in the subtitles table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.language, SS.name \nFROM Subtitles S \nJOIN Streaming_Services_Subtitles SSU ON S.id = SSU.subtitle_id \nJOIN Streaming_Services SS ON SSU.streaming_service_id = SS.id \nWHERE S.default_subtitle = 1"
          ]
        },
        {
          "interpretation": "Display all languages and their default status in subtitles, along with their presence in the streaming services.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.language, S.default_subtitle, CASE WHEN SS.streaming_service_id IS NOT NULL THEN 'Present' ELSE 'Absent' END AS presence_in_services\nFROM Subtitles S\nLEFT JOIN Streaming_Services_Subtitles SS ON S.id = SS.subtitle_id"
          ]
        }
      ],
      "num_unique_execution_results": 9,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.1111111111111111,
        "one_found": true,
        "f1_score": 0.1818181818181818,
        "num_queries": 9,
        "num_unique_queries": 9,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Journalism/scope_editorial_teams_roles/scope_editorial_teams_roles.sqlite",
      "db_dump": "CREATE TABLE Editorial_Teams(\n    TeamID INTEGER PRIMARY KEY AUTOINCREMENT,\n    TeamName TEXT,\n    TeamDescription TEXT\n);\nCREATE TABLE Editorial_Teams_Roles(\n    TeamID INTEGER,\n    RoleID INTEGER,\n    FOREIGN KEY(TeamID) REFERENCES Editorial_Teams(TeamID),\n    FOREIGN KEY(RoleID) REFERENCES Roles(RoleID),\n    PRIMARY KEY(TeamID, RoleID)\n);\nCREATE TABLE Roles(\n    RoleID INTEGER PRIMARY KEY AUTOINCREMENT,\n    RoleName TEXT\n);\n\nINSERT INTO \"Editorial_Teams\" (TeamID,TeamName,TeamDescription) VALUES (1,'Team1','A team focused on sports journalism.'),(2,'Team2','Specializes in political news coverage.'),(3,'Team3','Focuses on technology and innovation articles.'),(4,'Team4','Covering arts, culture, and entertainment stories.'),(5,'Team5','Dedicated to investigative reporting.');\nINSERT INTO \"Editorial_Teams_Roles\" (TeamID,RoleID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,5);\nINSERT INTO \"Roles\" (RoleID,RoleName) VALUES (1,'Copy_Editor'),(2,'Reporter'),(3,'Photographer'),(4,'Designer'),(5,'Web Developer');\n",
      "question": "Show me the role that is in common for all editorial teams.",
      "gold_queries": [
        "SELECT Roles.RoleName  from Editorial_Teams_Roles join Roles on Editorial_Teams_Roles.RoleID = Roles.RoleID join Editorial_Teams on Editorial_Teams_Roles.TeamID = Editorial_Teams.TeamID   GROUP BY Editorial_Teams_Roles.RoleID HAVING COUNT(DISTINCT Editorial_Teams_Roles.TeamID) = (SELECT COUNT(*) FROM  Editorial_Teams)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Query the role unseen across multiple Editorial teams present in the teams_roles table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT RoleID, RoleName\nFROM Roles\nWHERE RoleID NOT IN (SELECT RoleID FROM Editorial_Teams_Roles)"
          ]
        },
        {
          "interpretation": "It implies that display a role associated with every Editorial Team correspondingly.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ET.TeamName, R.RoleName \nFROM Editorial_Teams AS ET \nJOIN Editorial_Teams_Roles AS ETR ON ET.TeamID = ETR.TeamID \nJOIN Roles AS R ON ETR.RoleID = R.RoleID"
          ]
        },
        {
          "interpretation": "Mean to indicate you are looking for the number mentioning meaning every team has shared.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(TeamID) AS SharedTeamCount FROM Editorial_Teams_Roles GROUP BY TeamID HAVING COUNT(RoleID) > 1"
          ]
        },
        {
          "interpretation": "Roles shared by all teams must be shown even if duplicated.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT RoleID\nFROM Editorial_Teams_Roles\nGROUP BY RoleID\nHAVING COUNT(DISTINCT TeamID) = (SELECT COUNT(TeamID) FROM Editorial_Teams)"
          ]
        },
        {
          "interpretation": "Display the common role found among the editorial teams.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT RoleName \nFROM Roles \nWHERE RoleID IN (\n    SELECT RoleID \n    FROM Editorial_Teams_Roles \n    GROUP BY RoleID \n    HAVING COUNT(DISTINCT TeamID) = (SELECT COUNT(*) FROM Editorial_Teams)\n)"
          ]
        },
        {
          "interpretation": "{All team members must have one in common without inhabiting them}",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT TeamID, COUNT(RoleID) AS RoleCount\nFROM Editorial_Teams_Roles\nGROUP BY TeamID\nHAVING RoleCount = 1"
          ]
        },
        {
          "interpretation": "What I suppose is assuming is to consolidate the role that can be interfaced in any team.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Roles.RoleName\nFROM Roles\nJOIN Editorial_Teams_Roles ON Roles.RoleID = Editorial_Teams_Roles.RoleID"
          ]
        }
      ],
      "num_unique_execution_results": 7,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.14285714285714285,
        "one_found": true,
        "f1_score": 0.25,
        "num_queries": 7,
        "num_unique_queries": 7,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Journalism/scope_editorial_teams_roles/scope_editorial_teams_roles.sqlite",
      "db_dump": "CREATE TABLE Editorial_Teams(\n    TeamID INTEGER PRIMARY KEY AUTOINCREMENT,\n    TeamName TEXT,\n    TeamDescription TEXT\n);\nCREATE TABLE Editorial_Teams_Roles(\n    TeamID INTEGER,\n    RoleID INTEGER,\n    FOREIGN KEY(TeamID) REFERENCES Editorial_Teams(TeamID),\n    FOREIGN KEY(RoleID) REFERENCES Roles(RoleID),\n    PRIMARY KEY(TeamID, RoleID)\n);\nCREATE TABLE Roles(\n    RoleID INTEGER PRIMARY KEY AUTOINCREMENT,\n    RoleName TEXT\n);\n\nINSERT INTO \"Editorial_Teams\" (TeamID,TeamName,TeamDescription) VALUES (1,'Team1','A team focused on sports journalism.'),(2,'Team2','Specializes in political news coverage.'),(3,'Team3','Focuses on technology and innovation articles.'),(4,'Team4','Covering arts, culture, and entertainment stories.'),(5,'Team5','Dedicated to investigative reporting.');\nINSERT INTO \"Editorial_Teams_Roles\" (TeamID,RoleID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,5);\nINSERT INTO \"Roles\" (RoleID,RoleName) VALUES (1,'Copy_Editor'),(2,'Reporter'),(3,'Photographer'),(4,'Designer'),(5,'Web Developer');\n",
      "question": "Give me the role associated with each editorial team.",
      "gold_queries": [
        "SELECT Roles.RoleName  from Editorial_Teams_Roles join Roles on Editorial_Teams_Roles.RoleID = Roles.RoleID join Editorial_Teams on Editorial_Teams_Roles.TeamID = Editorial_Teams.TeamID   GROUP BY Editorial_Teams_Roles.RoleID HAVING COUNT(DISTINCT Editorial_Teams_Roles.TeamID) = (SELECT COUNT(*) FROM  Editorial_Teams)",
        "select editorial_teams.teamname , roles.rolename from Editorial_Teams_Roles join Roles on Editorial_Teams_Roles.RoleID = Roles.RoleID join Editorial_Teams on Editorial_Teams_Roles.TeamID = Editorial_Teams.TeamID"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Use a subquery to select distinct 'Editorial_Teams_TeamID' from Editorial_Teams, then join editing that query on Editorial_Teams_Roles with Roles on RoleID.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT T1.TeamID, T3.RoleName\nFROM (SELECT DISTINCT TeamID FROM Editorial_Teams) AS T1\nJOIN Editorial_Teams_Roles AS T2 ON T1.TeamID = T2.TeamID\nJOIN Roles AS T3 ON T2.RoleID = T3.RoleID"
          ]
        },
        {
          "interpretation": "Find the locked role in Editorial_Teams_Roles, then Select TeamName and RoleName from the editorial teams table on Editorial_Teams and the Roles table on the Roledivided by Editorial_Teams_Roles.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ET.TeamName, R.RoleName\nFROM Editorial_Teams AS ET\nJOIN Editorial_Teams_Roles AS ETR ON ET.TeamID = ETR.TeamID\nJOIN Roles AS R ON ETR.RoleID = R.RoleID\nWHERE ETR.RoleID = (\n    SELECT RoleID\n    FROM Editorial_Teams_Roles\n    GROUP BY RoleID\n    HAVING COUNT(TeamID) = 0\n)"
          ]
        },
        {
          "interpretation": "Choose one row between duplicate RoleID by grouping the roles table, then Make use of implicit others Deutsche notifications discussing editing services attached potentials tied with association when Nickaudit endeavor results cheers.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT RoleID, RoleName \nFROM Roles \nGROUP BY RoleID"
          ]
        },
        {
          "interpretation": "Select RoleName from Roles Table left join the editorial teams table on Roles ID.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT RoleName \nFROM Roles \nLEFT JOIN Editorial_Teams_Roles ON Roles.RoleID = Editorial_Teams_Roles.RoleID"
          ]
        },
        {
          "interpretation": "Select all distinct teams from teams table then Join the roles table,olated on Editorial_Teams_Roles by copying the main editorial column.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT E.TeamName, R.RoleName\nFROM Editorial_Teams E\nJOIN Editorial_Teams_Roles ETR ON E.TeamID = ETR.TeamID\nJOIN Roles R ON ETR.RoleID = R.RoleID"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.2,
        "one_found": true,
        "f1_score": 0.28571428571428575,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Job Postings/scope_urban_planners_elements/scope_urban_planners_elements.sqlite",
      "db_dump": "CREATE TABLE Elements (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    element_name TEXT\n);\nCREATE TABLE Urban_Planners (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    experience INTEGER\n);\nCREATE TABLE Urban_Planners_Elements (\n    urban_planner_id INTEGER,\n    element_id INTEGER,\n    FOREIGN KEY(urban_planner_id) REFERENCES Urban_Planners(id),\n    FOREIGN KEY(element_id) REFERENCES Elements(id),\n    PRIMARY KEY(urban_planner_id, element_id)\n);\n\nINSERT INTO \"Elements\" (id,element_name) VALUES (1,'Green_Space'),(2,'Transportation_Infrastructure'),(3,'Landscape_Architecture'),(4,'Water_Management'),(5,'Public_Spaces');\nINSERT INTO \"Urban_Planners\" (id,name,experience) VALUES (1,'John Doe',3),(2,'Jane Smith',2),(3,'Michael Johnson',5),(4,'Emily Williams',10),(5,'David Brown',8);\nINSERT INTO \"Urban_Planners_Elements\" (urban_planner_id,element_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\n",
      "question": "Tell me the elements each planner uses.",
      "gold_queries": [
        "SELECT Elements.element_name  from Urban_Planners_Elements join Elements on Urban_Planners_Elements.element_id = Elements.id join Urban_Planners on Urban_Planners_Elements.urban_planner_id = Urban_Planners.id   GROUP BY Urban_Planners_Elements.element_id HAVING COUNT(DISTINCT Urban_Planners_Elements.urban_planner_id) = (SELECT COUNT(*) FROM  Urban_Planners)",
        "select urban_planners.name , elements.element_name from Urban_Planners_Elements join Elements on Urban_Planners_Elements.element_id = Elements.id join Urban_Planners on Urban_Planners_Elements.urban_planner_id = Urban_Planners.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List the elements and their respective frequencies among planners.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT e.element_name, COUNT(ue.element_id) AS frequency\nFROM Elements e\nJOIN Urban_Planners_Elements ue ON e.id = ue.element_id\nGROUP BY e.element_name"
          ]
        },
        {
          "interpretation": "Display a list of pairs - (planner, element) where the planner uses the corresponding element.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT UP.name, E.element_name \nFROM Urban_Planners_Elements AS UPE \nJOIN Urban_Planners AS UP ON UPE.urban_planner_id = UP.id \nJOIN Elements AS E ON UPE.element_id = E.id"
          ]
        },
        {
          "interpretation": "Show the total number and list of elements each planner uses.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT UP.name, COUNT(UE.element_id) AS total_elements, GROUP_CONCAT(E.element_name) AS elements_list\nFROM Urban_Planners UP\nJOIN Urban_Planners_Elements UE ON UP.id = UE.urban_planner_id\nJOIN Elements E ON UE.element_id = E.id\nGROUP BY UP.name"
          ]
        },
        {
          "interpretation": "Give a single sentence describing the elements that each individual planner has experience with.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT UP.name, GROUP_CONCAT(E.element_name, ', ') AS elements\nFROM Urban_Planners UP\nJOIN Urban_Planners_Elements UPE ON UP.id = UPE.urban_planner_id\nJOIN Elements E ON UPE.element_id = E.id\nGROUP BY UP.name"
          ]
        },
        {
          "interpretation": "List planners and the number of different elements they use.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT U.name, COUNT(DISTINCT UE.element_id) AS number_of_elements\nFROM Urban_Planners U\nJOIN Urban_Planners_Elements UE ON U.id = UE.urban_planner_id\nGROUP BY U.name"
          ]
        },
        {
          "interpretation": "Provide names of elements that are exclusively used by each planner.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.element_name, T1.name \nFROM Urban_Planners_Elements UPE \nJOIN Elements T2 ON UPE.element_id = T2.id \nJOIN Urban_Planners T1 ON UPE.urban_planner_id = T1.id \nWHERE T2.id IN (\n    SELECT element_id \n    FROM Urban_Planners_Elements \n    GROUP BY element_id \n    HAVING COUNT(urban_planner_id) = 1\n)"
          ]
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.16666666666666666,
        "one_found": true,
        "f1_score": 0.25,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Job Postings/scope_urban_planners_elements/scope_urban_planners_elements.sqlite",
      "db_dump": "CREATE TABLE Elements (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    element_name TEXT\n);\nCREATE TABLE Urban_Planners (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    experience INTEGER\n);\nCREATE TABLE Urban_Planners_Elements (\n    urban_planner_id INTEGER,\n    element_id INTEGER,\n    FOREIGN KEY(urban_planner_id) REFERENCES Urban_Planners(id),\n    FOREIGN KEY(element_id) REFERENCES Elements(id),\n    PRIMARY KEY(urban_planner_id, element_id)\n);\n\nINSERT INTO \"Elements\" (id,element_name) VALUES (1,'Green_Space'),(2,'Transportation_Infrastructure'),(3,'Landscape_Architecture'),(4,'Water_Management'),(5,'Public_Spaces');\nINSERT INTO \"Urban_Planners\" (id,name,experience) VALUES (1,'John Doe',3),(2,'Jane Smith',2),(3,'Michael Johnson',5),(4,'Emily Williams',10),(5,'David Brown',8);\nINSERT INTO \"Urban_Planners_Elements\" (urban_planner_id,element_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\n",
      "question": "What elements do all planners use equally?",
      "gold_queries": [
        "SELECT Elements.element_name  from Urban_Planners_Elements join Elements on Urban_Planners_Elements.element_id = Elements.id join Urban_Planners on Urban_Planners_Elements.urban_planner_id = Urban_Planners.id   GROUP BY Urban_Planners_Elements.element_id HAVING COUNT(DISTINCT Urban_Planners_Elements.urban_planner_id) = (SELECT COUNT(*) FROM  Urban_Planners)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Elements that are commonly used by urban planners.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.element_name\nFROM Elements E\nJOIN Urban_Planners_Elements UPE ON E.id = UPE.element_id\nGROUP BY E.element_name\nORDER BY COUNT(*) DESC"
          ]
        },
        {
          "interpretation": "What planners use certain common elements.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.name, T2.element_name\nFROM Urban_Planners AS T1\nJOIN Urban_Planners_Elements AS UPE ON T1.id = UPE.urban_planner_id\nJOIN Elements AS T2 ON UPE.element_id = T2.id"
          ]
        },
        {
          "interpretation": "Planners and elements that the other planners and elements also use, compared.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT U.name, E.element_name\nFROM Urban_Planners_Elements UPE1\nJOIN Urban_Planners U ON UPE1.urban_planner_id = U.id\nJOIN Elements E ON UPE1.element_id = E.id\nWHERE EXISTS (\n    SELECT 1\n    FROM Urban_Planners_Elements UPE2\n    WHERE UPE1.element_id = UPE2.element_id AND UPE1.urban_planner_id <> UPE2.urban_planner_id\n)"
          ]
        },
        {
          "interpretation": "The set of elements common to all planners.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT e.element_name\nFROM Elements e\nWHERE NOT EXISTS (\n    SELECT 1\n    FROM Urban_Planners up\n    WHERE NOT EXISTS (\n        SELECT 1\n        FROM Urban_Planners_Elements upe\n        WHERE upe.urban_planner_id = up.id AND upe.element_id = e.id\n    )\n)"
          ]
        },
        {
          "interpretation": "What planners have these common elements.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT U.name \nFROM Urban_Planners U\nJOIN Urban_Planners_Elements UPE ON U.id = UPE.urban_planner_id\nWHERE UPE.element_id IN (1, 3)\nGROUP BY U.id, U.name\nHAVING COUNT(DISTINCT UPE.element_id) = 2"
          ]
        },
        {
          "interpretation": "as minimum planners using this but the request seeks data about those wishing to)",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.name\nFROM Urban_Planners_Elements AS T1\nJOIN Urban_Planners AS T2 ON T1.urban_planner_id = T2.id\nWHERE T1.element_id = 1"
          ]
        },
        {
          "interpretation": "Which urban planners use the same elements.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.name \nFROM Urban_Planners AS T1 \nJOIN Urban_Planners_Elements AS T2 ON T1.id = T2.urban_planner_id \nGROUP BY T1.id \nHAVING COUNT(DISTINCT T2.element_id) = (SELECT COUNT(DISTINCT element_name) FROM Elements)"
          ]
        },
        {
          "interpretation": "What is common among the planners' used elements.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT element_id \nFROM Urban_Planners_Elements \nGROUP BY element_id \nHAVING COUNT(urban_planner_id) = (SELECT COUNT(*) FROM Urban_Planners)"
          ]
        }
      ],
      "num_unique_execution_results": 8,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.125,
        "one_found": true,
        "f1_score": 0.2222222222222222,
        "num_queries": 8,
        "num_unique_queries": 8,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Job Postings/scope_urban_planners_elements/scope_urban_planners_elements.sqlite",
      "db_dump": "CREATE TABLE Elements (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    element_name TEXT\n);\nCREATE TABLE Urban_Planners (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    experience INTEGER\n);\nCREATE TABLE Urban_Planners_Elements (\n    urban_planner_id INTEGER,\n    element_id INTEGER,\n    FOREIGN KEY(urban_planner_id) REFERENCES Urban_Planners(id),\n    FOREIGN KEY(element_id) REFERENCES Elements(id),\n    PRIMARY KEY(urban_planner_id, element_id)\n);\n\nINSERT INTO \"Elements\" (id,element_name) VALUES (1,'Green_Space'),(2,'Transportation_Infrastructure'),(3,'Landscape_Architecture'),(4,'Water_Management'),(5,'Public_Spaces');\nINSERT INTO \"Urban_Planners\" (id,name,experience) VALUES (1,'John Doe',3),(2,'Jane Smith',2),(3,'Michael Johnson',5),(4,'Emily Williams',10),(5,'David Brown',8);\nINSERT INTO \"Urban_Planners_Elements\" (urban_planner_id,element_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\n",
      "question": "For every planner, list the elements used.",
      "gold_queries": [
        "select urban_planners.name , elements.element_name from Urban_Planners_Elements join Elements on Urban_Planners_Elements.element_id = Elements.id join Urban_Planners on Urban_Planners_Elements.urban_planner_id = Urban_Planners.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For each urban planner in the database, list all the elements associated with that planner.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT T1.name, T2.element_name\nFROM Urban_Planners AS T1\nJOIN Urban_Planners_Elements AS UP_E ON T1.id = UP_E.urban_planner_id\nJOIN Elements AS T2 ON UP_E.element_id = T2.id"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "one_found": true,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Journalism/scope_editorial_teams_roles/scope_editorial_teams_roles.sqlite",
      "db_dump": "CREATE TABLE Editorial_Teams(\n    TeamID INTEGER PRIMARY KEY AUTOINCREMENT,\n    TeamName TEXT,\n    TeamDescription TEXT\n);\nCREATE TABLE Editorial_Teams_Roles(\n    TeamID INTEGER,\n    RoleID INTEGER,\n    FOREIGN KEY(TeamID) REFERENCES Editorial_Teams(TeamID),\n    FOREIGN KEY(RoleID) REFERENCES Roles(RoleID),\n    PRIMARY KEY(TeamID, RoleID)\n);\nCREATE TABLE Roles(\n    RoleID INTEGER PRIMARY KEY AUTOINCREMENT,\n    RoleName TEXT\n);\n\nINSERT INTO \"Editorial_Teams\" (TeamID,TeamName,TeamDescription) VALUES (1,'Team1','A team focused on sports journalism.'),(2,'Team2','Specializes in political news coverage.'),(3,'Team3','Focuses on technology and innovation articles.'),(4,'Team4','Covering arts, culture, and entertainment stories.'),(5,'Team5','Dedicated to investigative reporting.');\nINSERT INTO \"Editorial_Teams_Roles\" (TeamID,RoleID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,5);\nINSERT INTO \"Roles\" (RoleID,RoleName) VALUES (1,'Copy_Editor'),(2,'Reporter'),(3,'Photographer'),(4,'Designer'),(5,'Web Developer');\n",
      "question": "For each editorial team, what is the corresponding role?",
      "gold_queries": [
        "select editorial_teams.teamname , roles.rolename from Editorial_Teams_Roles join Roles on Editorial_Teams_Roles.RoleID = Roles.RoleID join Editorial_Teams on Editorial_Teams_Roles.TeamID = Editorial_Teams.TeamID"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For every team, what roles are mentioned on the Editorial_Teams_Roles table.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT T.TeamName, R.RoleName\nFROM Editorial_Teams_Roles AS ETR\nJOIN Editorial_Teams AS T ON ETR.TeamID = T.TeamID\nJOIN Roles AS R ON ETR.RoleID = R.RoleID"
          ]
        },
        {
          "interpretation": "What are the distinct roles assigned to each team.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT ETR.TeamID, R.RoleName\nFROM Editorial_Teams_Roles ETR\nJOIN Roles R ON ETR.RoleID = R.RoleID"
          ]
        },
        {
          "interpretation": "What are the roles of each editorial team on the Editorial_Teams_Roles table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT TeamID, RoleID FROM Editorial_Teams_Roles"
          ]
        },
        {
          "interpretation": "What is the primary role of each editorial team.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT TeamName, RoleName\nFROM Editorial_Teams\nJOIN Editorial_Teams_Roles ON Editorial_Teams.TeamID = Editorial_Teams_Roles.TeamID\nJOIN Roles ON Editorial_Teams_Roles.RoleID = Roles.RoleID\nGROUP BY TeamName"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "one_found": true,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Journalism/scope_real_estate_reporters_markets/scope_real_estate_reporters_markets.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    article_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    published_date DATE\n);\nCREATE TABLE Markets(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    market_name TEXT,\n    description TEXT\n);\nCREATE TABLE Real_Estate_Reporters(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT\n);\nCREATE TABLE Real_Estate_Reporters_Markets(\n    reporter_id INTEGER,\n    market_id INTEGER,\n    FOREIGN KEY(reporter_id) REFERENCES Real_Estate_Reporters(id),\n    FOREIGN KEY(market_id) REFERENCES Markets(id)\n);\nCREATE TABLE Reporter_Articles(\n    reporter_id INTEGER,\n    article_id INTEGER,\n    FOREIGN KEY(reporter_id) REFERENCES Real_Estate_Reporters(id),\n    FOREIGN KEY(article_id) REFERENCES Articles(article_id)\n);\n\nINSERT INTO \"Articles\" (article_id,title,content,published_date) VALUES (1,'New Luxury Home Development','Details about a new luxury home development...','2021-09-01'),(2,'First Time Buyers Guide','Tips for first time home buyers...','2021-08-15'),(3,'Office Space Trends','The latest trends in office space...','2021-07-30'),(4,'Farmland vs Investment Property','Comparing farmland and investment property...','2021-06-20'),(5,'Retail Space Revival','How retail spaces are making a comeback...','2021-05-15');\nINSERT INTO \"Markets\" (id,market_name,description) VALUES (1,'Luxury Homes','High-end residential properties.'),(2,'Affordable Housing','Moderately priced homes for first-time buyers.'),(3,'Commercial Properties','Offices, retail spaces, industrial buildings.'),(4,'Rural Land','Agriculture land and rural estates.'),(5,'Investment Properties','Properties purchased for investment purposes.');\nINSERT INTO \"Real_Estate_Reporters\" (id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com'),(3,'Michael Johnson','michael@example.com'),(4,'Emily Davis','emily@example.com'),(5,'David Brown','david@example.com');\nINSERT INTO \"Real_Estate_Reporters_Markets\" (reporter_id,market_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "what markets and descriptions are covered by each real estate reporter?",
      "gold_queries": [
        "SELECT Markets.market_name, Markets.description  from Real_Estate_Reporters_Markets join Markets on Real_Estate_Reporters_Markets.market_id = Markets.id join Real_Estate_Reporters on Real_Estate_Reporters_Markets.reporter_id = Real_Estate_Reporters.id   GROUP BY Real_Estate_Reporters_Markets.market_id HAVING COUNT(DISTINCT Real_Estate_Reporters_Markets.reporter_id) = (SELECT COUNT(*) FROM  Real_Estate_Reporters)",
        "select real_estate_reporters.name , markets.market_name , markets.description from Real_Estate_Reporters_Markets join Markets on Real_Estate_Reporters_Markets.market_id = Markets.id join Real_Estate_Reporters on Real_Estate_Reporters_Markets.reporter_id = Real_Estate_Reporters.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What types of property markets and descriptions are covered by real estate analysts/journalists/experts.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT market_name, description FROM Markets"
          ]
        },
        {
          "interpretation": "In the context of real estate journalism, who are the respective reporters handling each market type.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT m.market_name, r.name\nFROM Markets m\nJOIN Real_Estate_Reporters_Markets rem ON m.id = rem.market_id\nJOIN Real_Estate_Reporters r ON rem.reporter_id = r.id"
          ]
        },
        {
          "interpretation": "What markets and descriptions of sales/purchases of properties are covered by each real estate reporter.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT R.name, M.market_name, M.description\nFROM Real_Estate_Reporters R\nJOIN Real_Estate_Reporters_Markets REM ON R.id = REM.reporter_id\nJOIN Markets M ON REM.market_id = M.id"
          ]
        },
        {
          "interpretation": "What descriptions of markets are handled by real estate reporters covering this type of subject/research interest.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT M.description \nFROM Markets M \nJOIN Real_Estate_Reporters_Markets REM ON M.id = REM.market_id"
          ]
        },
        {
          "interpretation": "Which markets including their descriptions are covered by each real estate person reviewing or writing about real estate news.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT r.name, r.email, m.market_name, m.description\nFROM Real_Estate_Reporters r\nJOIN Real_Estate_Reporters_Markets rem ON r.id = rem.reporter_id\nJOIN Markets m ON rem.market_id = m.id"
          ]
        },
        {
          "interpretation": "What marketzone descriptors are handled by enlisted real estate journalist/reporter.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT description FROM Markets"
          ]
        },
        {
          "interpretation": "Who are the writers covering markets with their respective descriptions in the area of real estate news.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T3.name, T2.description \nFROM Real_Estate_Reporters_Markets AS T1 \nJOIN Markets AS T2 ON T1.market_id = T2.id \nJOIN Real_Estate_Reporters AS T3 ON T1.reporter_id = T3.id"
          ]
        }
      ],
      "num_unique_execution_results": 7,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.14285714285714285,
        "one_found": true,
        "f1_score": 0.22222222222222224,
        "num_queries": 7,
        "num_unique_queries": 7,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Journalism/scope_real_estate_reporters_markets/scope_real_estate_reporters_markets.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    article_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    published_date DATE\n);\nCREATE TABLE Markets(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    market_name TEXT,\n    description TEXT\n);\nCREATE TABLE Real_Estate_Reporters(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT\n);\nCREATE TABLE Real_Estate_Reporters_Markets(\n    reporter_id INTEGER,\n    market_id INTEGER,\n    FOREIGN KEY(reporter_id) REFERENCES Real_Estate_Reporters(id),\n    FOREIGN KEY(market_id) REFERENCES Markets(id)\n);\nCREATE TABLE Reporter_Articles(\n    reporter_id INTEGER,\n    article_id INTEGER,\n    FOREIGN KEY(reporter_id) REFERENCES Real_Estate_Reporters(id),\n    FOREIGN KEY(article_id) REFERENCES Articles(article_id)\n);\n\nINSERT INTO \"Articles\" (article_id,title,content,published_date) VALUES (1,'New Luxury Home Development','Details about a new luxury home development...','2021-09-01'),(2,'First Time Buyers Guide','Tips for first time home buyers...','2021-08-15'),(3,'Office Space Trends','The latest trends in office space...','2021-07-30'),(4,'Farmland vs Investment Property','Comparing farmland and investment property...','2021-06-20'),(5,'Retail Space Revival','How retail spaces are making a comeback...','2021-05-15');\nINSERT INTO \"Markets\" (id,market_name,description) VALUES (1,'Luxury Homes','High-end residential properties.'),(2,'Affordable Housing','Moderately priced homes for first-time buyers.'),(3,'Commercial Properties','Offices, retail spaces, industrial buildings.'),(4,'Rural Land','Agriculture land and rural estates.'),(5,'Investment Properties','Properties purchased for investment purposes.');\nINSERT INTO \"Real_Estate_Reporters\" (id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com'),(3,'Michael Johnson','michael@example.com'),(4,'Emily Davis','emily@example.com'),(5,'David Brown','david@example.com');\nINSERT INTO \"Real_Estate_Reporters_Markets\" (reporter_id,market_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "provide the market name and description that are common to all real estate reporters.",
      "gold_queries": [
        "SELECT Markets.market_name, Markets.description  from Real_Estate_Reporters_Markets join Markets on Real_Estate_Reporters_Markets.market_id = Markets.id join Real_Estate_Reporters on Real_Estate_Reporters_Markets.reporter_id = Real_Estate_Reporters.id   GROUP BY Real_Estate_Reporters_Markets.market_id HAVING COUNT(DISTINCT Real_Estate_Reporters_Markets.reporter_id) = (SELECT COUNT(*) FROM  Real_Estate_Reporters)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Fetch the market name and description that is common to all reporters who have reported at least one article.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT m.market_name, m.description\nFROM Markets m\nJOIN Real_Estate_Reporters_Markets rem ON m.id = rem.market_id\nWHERE rem.reporter_id IN (\n    SELECT ra.reporter_id\n    FROM Reporter_Articles ra\n)\nGROUP BY m.id\nHAVING COUNT(DISTINCT rem.reporter_id) = (\n    SELECT COUNT(DISTINCT id) FROM Real_Estate_Reporters\n)"
          ]
        },
        {
          "interpretation": "Get the market name and description that are exclusively common to all real estate reporters.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT T1.market_name, T1.description\nFROM Markets AS T1\nJOIN Real_Estate_Reporters_Markets AS T2 ON T1.id = T2.market_id\nGROUP BY T2.market_id\nHAVING COUNT(T2.reporter_id) = (SELECT COUNT(*) FROM Real_Estate_Reporters)"
          ]
        },
        {
          "interpretation": "Get the market name and description that are covered by the union of all markets reported by each reporter.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT T1.market_name, T1.description\nFROM Markets AS T1\nJOIN Real_Estate_Reporters_Markets AS T2\nON T1.id = T2.market_id"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "one_found": true,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Journalism/scope_real_estate_reporters_markets/scope_real_estate_reporters_markets.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    article_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    published_date DATE\n);\nCREATE TABLE Markets(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    market_name TEXT,\n    description TEXT\n);\nCREATE TABLE Real_Estate_Reporters(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT\n);\nCREATE TABLE Real_Estate_Reporters_Markets(\n    reporter_id INTEGER,\n    market_id INTEGER,\n    FOREIGN KEY(reporter_id) REFERENCES Real_Estate_Reporters(id),\n    FOREIGN KEY(market_id) REFERENCES Markets(id)\n);\nCREATE TABLE Reporter_Articles(\n    reporter_id INTEGER,\n    article_id INTEGER,\n    FOREIGN KEY(reporter_id) REFERENCES Real_Estate_Reporters(id),\n    FOREIGN KEY(article_id) REFERENCES Articles(article_id)\n);\n\nINSERT INTO \"Articles\" (article_id,title,content,published_date) VALUES (1,'New Luxury Home Development','Details about a new luxury home development...','2021-09-01'),(2,'First Time Buyers Guide','Tips for first time home buyers...','2021-08-15'),(3,'Office Space Trends','The latest trends in office space...','2021-07-30'),(4,'Farmland vs Investment Property','Comparing farmland and investment property...','2021-06-20'),(5,'Retail Space Revival','How retail spaces are making a comeback...','2021-05-15');\nINSERT INTO \"Markets\" (id,market_name,description) VALUES (1,'Luxury Homes','High-end residential properties.'),(2,'Affordable Housing','Moderately priced homes for first-time buyers.'),(3,'Commercial Properties','Offices, retail spaces, industrial buildings.'),(4,'Rural Land','Agriculture land and rural estates.'),(5,'Investment Properties','Properties purchased for investment purposes.');\nINSERT INTO \"Real_Estate_Reporters\" (id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com'),(3,'Michael Johnson','michael@example.com'),(4,'Emily Davis','emily@example.com'),(5,'David Brown','david@example.com');\nINSERT INTO \"Real_Estate_Reporters_Markets\" (reporter_id,market_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "Which market is common across all real estate reporters?",
      "gold_queries": [
        "SELECT Markets.market_name  from Real_Estate_Reporters_Markets join Markets on Real_Estate_Reporters_Markets.market_id = Markets.id join Real_Estate_Reporters on Real_Estate_Reporters_Markets.reporter_id = Real_Estate_Reporters.id   GROUP BY Real_Estate_Reporters_Markets.market_id HAVING COUNT(DISTINCT Real_Estate_Reporters_Markets.reporter_id) = (SELECT COUNT(*) FROM  Real_Estate_Reporters)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "The market that all real estate reporters are assigned to.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT market_name\nFROM Markets\nWHERE id IN (\n    SELECT market_id\n    FROM Real_Estate_Reporters_Markets\n    GROUP BY market_id\n    HAVING COUNT(DISTINCT reporter_id) = (SELECT COUNT(*) FROM Real_Estate_Reporters)\n)"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "one_found": true,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Journalism/scope_real_estate_reporters_markets/scope_real_estate_reporters_markets.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    article_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    published_date DATE\n);\nCREATE TABLE Markets(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    market_name TEXT,\n    description TEXT\n);\nCREATE TABLE Real_Estate_Reporters(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT\n);\nCREATE TABLE Real_Estate_Reporters_Markets(\n    reporter_id INTEGER,\n    market_id INTEGER,\n    FOREIGN KEY(reporter_id) REFERENCES Real_Estate_Reporters(id),\n    FOREIGN KEY(market_id) REFERENCES Markets(id)\n);\nCREATE TABLE Reporter_Articles(\n    reporter_id INTEGER,\n    article_id INTEGER,\n    FOREIGN KEY(reporter_id) REFERENCES Real_Estate_Reporters(id),\n    FOREIGN KEY(article_id) REFERENCES Articles(article_id)\n);\n\nINSERT INTO \"Articles\" (article_id,title,content,published_date) VALUES (1,'New Luxury Home Development','Details about a new luxury home development...','2021-09-01'),(2,'First Time Buyers Guide','Tips for first time home buyers...','2021-08-15'),(3,'Office Space Trends','The latest trends in office space...','2021-07-30'),(4,'Farmland vs Investment Property','Comparing farmland and investment property...','2021-06-20'),(5,'Retail Space Revival','How retail spaces are making a comeback...','2021-05-15');\nINSERT INTO \"Markets\" (id,market_name,description) VALUES (1,'Luxury Homes','High-end residential properties.'),(2,'Affordable Housing','Moderately priced homes for first-time buyers.'),(3,'Commercial Properties','Offices, retail spaces, industrial buildings.'),(4,'Rural Land','Agriculture land and rural estates.'),(5,'Investment Properties','Properties purchased for investment purposes.');\nINSERT INTO \"Real_Estate_Reporters\" (id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com'),(3,'Michael Johnson','michael@example.com'),(4,'Emily Davis','emily@example.com'),(5,'David Brown','david@example.com');\nINSERT INTO \"Real_Estate_Reporters_Markets\" (reporter_id,market_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "For each real estate reporters, what are the corresponding market names and descriptions?",
      "gold_queries": [
        "select real_estate_reporters.name , markets.market_name , markets.description from Real_Estate_Reporters_Markets join Markets on Real_Estate_Reporters_Markets.market_id = Markets.id join Real_Estate_Reporters on Real_Estate_Reporters_Markets.reporter_id = Real_Estate_Reporters.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "A list of all real estate reporter IDs and the corresponding market names and descriptions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.id, T2.market_name, T2.description\nFROM Real_Estate_Reporters AS T1\nJOIN Real_Estate_Reporters_Markets AS T3 ON T1.id = T3.reporter_id\nJOIN Markets AS T2 ON T3.market_id = T2.id"
          ]
        },
        {
          "interpretation": "The market names and descriptions for each real estate reporter's specific markets, as listed in the Real_Estate_Reporters_Markets table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT M.market_name, M.description \nFROM Real_Estate_Reporters_Markets AS REM \nJOIN Markets AS M ON REM.market_id = M.id"
          ]
        },
        {
          "interpretation": "The market names and descriptions corresponding to the real estate reporters who have contributed to the 'New Luxury Home Development' article.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT M.market_name, M.description\nFROM Markets M\nJOIN Real_Estate_Reporters_Markets REM ON M.id = REM.market_id\nJOIN Reporter_Articles RA ON REM.reporter_id = RA.reporter_id\nJOIN Articles A ON RA.article_id = A.article_id\nWHERE A.title = 'New Luxury Home Development'"
          ]
        },
        {
          "interpretation": "The market names and descriptions for each real estate reporter's primary market, if only one market is assigned.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT M.market_name, M.description\nFROM Real_Estate_Reporters_Markets REM\nJOIN Markets M ON REM.market_id = M.id\nGROUP BY REM.reporter_id\nHAVING COUNT(REM.market_id) = 1"
          ]
        },
        {
          "interpretation": "A list of all real estate reporter names, their associated market names, and descriptions.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT R.name, M.market_name, M.description\nFROM Real_Estate_Reporters R\nJOIN Real_Estate_Reporters_Markets REM ON R.id = REM.reporter_id\nJOIN Markets M ON REM.market_id = M.id"
          ]
        },
        {
          "interpretation": "A list of all market names and descriptions with the count of real estate reporters assigned to each market.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT m.market_name, m.description, COUNT(rem.reporter_id) AS reporter_count\nFROM Markets m\nLEFT JOIN Real_Estate_Reporters_Markets rem ON m.id = rem.market_id\nGROUP BY m.id, m.market_name, m.description"
          ]
        },
        {
          "interpretation": "The market names and descriptions corresponding to the real estate reporters present in the 'Luxury Homes' market.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT M.market_name, M.description \nFROM Markets M \nJOIN Real_Estate_Reporters_Markets REM ON M.id = REM.market_id \nJOIN Real_Estate_Reporters RER ON REM.reporter_id = RER.id \nWHERE M.market_name = 'Luxury Homes'"
          ]
        },
        {
          "interpretation": "The market names and descriptions corresponding to the real estate reporters who have an email ending with '@example.com'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT m.market_name, m.description\nFROM Markets m\nJOIN Real_Estate_Reporters_Markets rem ON m.id = rem.market_id\nJOIN Real_Estate_Reporters r ON rem.reporter_id = r.id\nWHERE r.email LIKE '%@example.com'"
          ]
        }
      ],
      "num_unique_execution_results": 8,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.125,
        "one_found": true,
        "f1_score": 0.2222222222222222,
        "num_queries": 8,
        "num_unique_queries": 8,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Journalism/scope_real_estate_reporters_markets/scope_real_estate_reporters_markets.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    article_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    published_date DATE\n);\nCREATE TABLE Markets(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    market_name TEXT,\n    description TEXT\n);\nCREATE TABLE Real_Estate_Reporters(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT\n);\nCREATE TABLE Real_Estate_Reporters_Markets(\n    reporter_id INTEGER,\n    market_id INTEGER,\n    FOREIGN KEY(reporter_id) REFERENCES Real_Estate_Reporters(id),\n    FOREIGN KEY(market_id) REFERENCES Markets(id)\n);\nCREATE TABLE Reporter_Articles(\n    reporter_id INTEGER,\n    article_id INTEGER,\n    FOREIGN KEY(reporter_id) REFERENCES Real_Estate_Reporters(id),\n    FOREIGN KEY(article_id) REFERENCES Articles(article_id)\n);\n\nINSERT INTO \"Articles\" (article_id,title,content,published_date) VALUES (1,'New Luxury Home Development','Details about a new luxury home development...','2021-09-01'),(2,'First Time Buyers Guide','Tips for first time home buyers...','2021-08-15'),(3,'Office Space Trends','The latest trends in office space...','2021-07-30'),(4,'Farmland vs Investment Property','Comparing farmland and investment property...','2021-06-20'),(5,'Retail Space Revival','How retail spaces are making a comeback...','2021-05-15');\nINSERT INTO \"Markets\" (id,market_name,description) VALUES (1,'Luxury Homes','High-end residential properties.'),(2,'Affordable Housing','Moderately priced homes for first-time buyers.'),(3,'Commercial Properties','Offices, retail spaces, industrial buildings.'),(4,'Rural Land','Agriculture land and rural estates.'),(5,'Investment Properties','Properties purchased for investment purposes.');\nINSERT INTO \"Real_Estate_Reporters\" (id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com'),(3,'Michael Johnson','michael@example.com'),(4,'Emily Davis','emily@example.com'),(5,'David Brown','david@example.com');\nINSERT INTO \"Real_Estate_Reporters_Markets\" (reporter_id,market_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "What markets are associated with each real estate reporter?",
      "gold_queries": [
        "SELECT Markets.market_name  from Real_Estate_Reporters_Markets join Markets on Real_Estate_Reporters_Markets.market_id = Markets.id join Real_Estate_Reporters on Real_Estate_Reporters_Markets.reporter_id = Real_Estate_Reporters.id   GROUP BY Real_Estate_Reporters_Markets.market_id HAVING COUNT(DISTINCT Real_Estate_Reporters_Markets.reporter_id) = (SELECT COUNT(*) FROM  Real_Estate_Reporters)",
        "select real_estate_reporters.name , markets.market_name from Real_Estate_Reporters_Markets join Markets on Real_Estate_Reporters_Markets.market_id = Markets.id join Real_Estate_Reporters on Real_Estate_Reporters_Markets.reporter_id = Real_Estate_Reporters.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What markets are associated with each real estate reporter where the market's description is Moderately priced homes for first-time buyers.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT r.name, m.market_name\nFROM Real_Estate_Reporters r\nJOIN Real_Estate_Reporters_Markets rem ON r.id = rem.reporter_id\nJOIN Markets m ON rem.market_id = m.id\nWHERE m.description = 'Moderately priced homes for first-time buyers'"
          ]
        },
        {
          "interpretation": "What are the names of the markets  which the John, David and Michael are associated with.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.market_name \nFROM Real_Estate_Reporters_Markets AS T1 \nJOIN Markets AS T2 ON T1.market_id = T2.id \nJOIN Real_Estate_Reporters AS T3 ON T1.reporter_id = T3.id \nWHERE T3.name IN ('John Doe', 'David Brown', 'Michael Johnson')"
          ]
        },
        {
          "interpretation": "What markets have the most real estate reporters.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT market_name FROM Markets WHERE id IN (SELECT market_id FROM Real_Estate_Reporters_Markets GROUP BY market_id ORDER BY COUNT(reporter_id) DESC LIMIT 1)"
          ]
        },
        {
          "interpretation": "How many markets has a description containing land?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(*) FROM Markets WHERE description LIKE '%land%'"
          ]
        },
        {
          "interpretation": "What real estate reporters cover the market with description High-end residential properties.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT R.name, R.email\nFROM Real_Estate_Reporters R\nJOIN Real_Estate_Reporters_Markets REM ON R.id = REM.reporter_id\nJOIN Markets M ON REM.market_id = M.id\nWHERE M.description = 'High-end residential properties.'"
          ]
        },
        {
          "interpretation": "What are the markets that are associated to each real estate reporter where the real estate reporter does not have a last name of Brown.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT R.name, M.market_name \nFROM Real_Estate_Reporters R \nJOIN Real_Estate_Reporters_Markets REM ON R.id = REM.reporter_id \nJOIN Markets M ON REM.market_id = M.id \nWHERE R.name NOT LIKE '%Brown%'"
          ]
        },
        {
          "interpretation": "What real estate reporters are covering the market in Luxury Homes.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.name FROM Real_Estate_Reporters_Markets AS T1 JOIN Real_Estate_Reporters AS T2 ON T1.reporter_id = T2.id JOIN Markets AS T3 ON T1.market_id = T3.id WHERE T3.market_name = 'Luxury Homes'"
          ]
        },
        {
          "interpretation": "What are the markets of each real estate reporter where the reporter's email ends with example.com.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT r.name, m.market_name\nFROM Real_Estate_Reporters r\nJOIN Real_Estate_Reporters_Markets rem ON r.id = rem.reporter_id\nJOIN Markets m ON rem.market_id = m.id\nWHERE r.email LIKE '%example.com'"
          ]
        },
        {
          "interpretation": "What markets are associated with each real estate reporter where the reporter is associated with the market with the id of 1.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT m.market_name\nFROM Markets m\nJOIN Real_Estate_Reporters_Markets rem ON m.id = rem.market_id\nWHERE rem.reporter_id IN (\n    SELECT reporter_id\n    FROM Real_Estate_Reporters_Markets\n    WHERE market_id = 1\n)"
          ]
        },
        {
          "interpretation": "Which real estate reporters are associated with how many markets each.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.name, COUNT(T2.market_id) AS market_count\nFROM Real_Estate_Reporters AS T1\nJOIN Real_Estate_Reporters_Markets AS T2 ON T1.id = T2.reporter_id\nGROUP BY T1.name"
          ]
        },
        {
          "interpretation": "How many markets does David Brown have?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(*)\nFROM Real_Estate_Reporters_Markets AS rem\nJOIN Real_Estate_Reporters AS rer ON rem.reporter_id = rer.id\nWHERE rer.name = 'David Brown'"
          ]
        },
        {
          "interpretation": "How many real estate reporters are associated with the market with the name of Corporate Properties.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(*) FROM Real_Estate_Reporters_Markets AS rem JOIN Markets AS m ON rem.market_id = m.id WHERE m.market_name = 'Corporate Properties'"
          ]
        },
        {
          "interpretation": "What are the distinct markets of the real estate reporters",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT T2.market_name FROM Real_Estate_Reporters_Markets AS T1 JOIN Markets AS T2 ON T1.market_id = T2.id"
          ]
        },
        {
          "interpretation": "What is the market with the name Luxury Homes that is associated with each real estate reporter.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT r.name, m.market_name\nFROM Real_Estate_Reporters r\nJOIN Real_Estate_Reporters_Markets rem ON r.id = rem.reporter_id\nJOIN Markets m ON rem.market_id = m.id\nWHERE m.market_name = 'Luxury Homes'"
          ]
        },
        {
          "interpretation": "Which real estate reporter is associated with the market with the description of Moderately priced homes for first-time buyers.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT R.name \nFROM Real_Estate_Reporters R \nJOIN Real_Estate_Reporters_Markets RM ON R.id = RM.reporter_id \nJOIN Markets M ON RM.market_id = M.id \nWHERE M.description = 'Moderately priced homes for first-time buyers.'"
          ]
        },
        {
          "interpretation": "What markets are associated with each real estate reporter that has more than one market that they cover.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT r.name, m.market_name\nFROM Real_Estate_Reporters r\nJOIN Real_Estate_Reporters_Markets rem ON r.id = rem.reporter_id\nJOIN Markets m ON rem.market_id = m.id\nWHERE r.id IN (\n    SELECT reporter_id\n    FROM Real_Estate_Reporters_Markets\n    GROUP BY reporter_id\n    HAVING COUNT(market_id) > 1\n)"
          ]
        },
        {
          "interpretation": "What are the reporter names for each market that they cover that also have the id of 1.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T3.name, T2.market_name, T1.reporter_id\nFROM Real_Estate_Reporters_Markets AS T1\nJOIN Markets AS T2 ON T1.market_id = T2.id\nJOIN Real_Estate_Reporters AS T3 ON T1.reporter_id = T3.id\nWHERE T1.market_id = 1"
          ]
        }
      ],
      "num_unique_execution_results": 17,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.11764705882352941,
        "one_found": true,
        "f1_score": 0.21052631578947367,
        "num_queries": 17,
        "num_unique_queries": 17,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/scope/Journalism/scope_television_channels_shows/scope_television_channels_shows.sqlite",
      "db_dump": "CREATE TABLE Shows (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    show_title TEXT,\n    genre TEXT\n);\nCREATE TABLE Television_Channels (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    channel_name TEXT,\n    country TEXT\n);\nCREATE TABLE Television_Channels_Shows (\n    television_channels_id INTEGER,\n    shows_id INTEGER,\n    FOREIGN KEY(television_channels_id) REFERENCES Television_Channels(id),\n    FOREIGN KEY(shows_id) REFERENCES Shows(id)\n);\n\nINSERT INTO \"Shows\" (id,show_title,genre) VALUES (1,'Friends','Sitcom'),(2,'The Office','Comedy'),(3,'Breaking Bad','Crime Drama'),(4,'Game Of Thrones','Fantasy'),(5,'Stranger Things','Science Fiction');\nINSERT INTO \"Television_Channels\" (id,channel_name,country) VALUES (1,'Channel One','USA'),(2,'Channel Two','UK'),(3,'Channel Three','Canada'),(4,'Channel Four','Australia'),(5,'Channel Five','Germany');\nINSERT INTO \"Television_Channels_Shows\" (television_channels_id,shows_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "Show me the genre of shows each channel runs.",
      "gold_queries": [
        "SELECT Shows.genre  from Television_Channels_Shows join Shows on Television_Channels_Shows.shows_id = Shows.id join Television_Channels on Television_Channels_Shows.television_channels_id = Television_Channels.id   GROUP BY Television_Channels_Shows.shows_id HAVING COUNT(DISTINCT Television_Channels_Shows.television_channels_id) = (SELECT COUNT(*) FROM  Television_Channels)",
        "select television_channels.channel_name , shows.genre from Television_Channels_Shows join Shows on Television_Channels_Shows.shows_id = Shows.id join Television_Channels on Television_Channels_Shows.television_channels_id = Television_Channels.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Get TV channels that particularly promote a certain genre of television.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT TCS.television_channels_id, TC.channel_name\nFROM Television_Channels_Shows TCS\nJOIN Television_Channels TC ON TCS.television_channels_id = TC.id\nJOIN Shows S ON TCS.shows_id = S.id\nWHERE S.genre = 'Sitcom'"
          ]
        },
        {
          "interpretation": "Show the genres of shows that are broadcast on multiple channels.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT genre FROM Shows WHERE id IN (SELECT shows_id FROM Television_Channels_Shows GROUP BY shows_id HAVING COUNT(television_channels_id) > 1)"
          ]
        },
        {
          "interpretation": "Present the TV channel(s) that air shows of each category (genre).",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.channel_name, T3.genre\nFROM Television_Channels_Shows AS T1\nJOIN Television_Channels AS T2 ON T1.television_channels_id = T2.id\nJOIN Shows AS T3 ON T1.shows_id = T3.id\nGROUP BY T3.genre, T2.channel_name"
          ]
        },
        {
          "interpretation": "Show the distinct number of genres run by each channel.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.channel_name, COUNT(DISTINCT T1.genre) AS distinct_genres\nFROM Shows AS T1\nJOIN Television_Channels_Shows AS TCS ON T1.id = TCS.shows_id\nJOIN Television_Channels AS T2 ON TCS.television_channels_id = T2.id\nGROUP BY T2.channel_name"
          ]
        },
        {
          "interpretation": "List TV channel(s) that broadcast the most wide variety of genres.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.channel_name\nFROM Television_Channels AS T1\nJOIN Television_Channels_Shows AS T2 ON T1.id = T2.television_channels_id\nJOIN Shows AS T3 ON T2.shows_id = T3.id\nGROUP BY T1.channel_name\nORDER BY COUNT(DISTINCT T3.genre) DESC\nLIMIT 1"
          ]
        },
        {
          "interpretation": "Dish out TV channels that offer similar types of shows.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT tc.channel_name, s.genre\nFROM Television_Channels tc\nJOIN Television_Channels_Shows tcs ON tc.id = tcs.television_channels_id\nJOIN Shows s ON tcs.shows_id = s.id\nGROUP BY tc.channel_name, s.genre\nHAVING COUNT(DISTINCT s.id) > 1"
          ]
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "one_found": true,
        "f1_score": 0.5,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/scope/Journalism/scope_television_channels_shows/scope_television_channels_shows.sqlite",
      "db_dump": "CREATE TABLE Shows (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    show_title TEXT,\n    genre TEXT\n);\nCREATE TABLE Television_Channels (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    channel_name TEXT,\n    country TEXT\n);\nCREATE TABLE Television_Channels_Shows (\n    television_channels_id INTEGER,\n    shows_id INTEGER,\n    FOREIGN KEY(television_channels_id) REFERENCES Television_Channels(id),\n    FOREIGN KEY(shows_id) REFERENCES Shows(id)\n);\n\nINSERT INTO \"Shows\" (id,show_title,genre) VALUES (1,'Friends','Sitcom'),(2,'The Office','Comedy'),(3,'Breaking Bad','Crime Drama'),(4,'Game Of Thrones','Fantasy'),(5,'Stranger Things','Science Fiction');\nINSERT INTO \"Television_Channels\" (id,channel_name,country) VALUES (1,'Channel One','USA'),(2,'Channel Two','UK'),(3,'Channel Three','Canada'),(4,'Channel Four','Australia'),(5,'Channel Five','Germany');\nINSERT INTO \"Television_Channels_Shows\" (television_channels_id,shows_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "For each television channel, what is the corresponding show title and genre of shows?",
      "gold_queries": [
        "select television_channels.channel_name , shows.show_title , shows.genre from Television_Channels_Shows join Shows on Television_Channels_Shows.shows_id = Shows.id join Television_Channels on Television_Channels_Shows.television_channels_id = Television_Channels.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For each unique show, find all television channels it is broadcast on and return the show title and a list of channel names with their countries.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.show_title, GROUP_CONCAT(TC.channel_name || ' (' || TC.country || ')', ', ') AS channels\nFROM Shows S\nJOIN Television_Channels_Shows TCS ON S.id = TCS.shows_id\nJOIN Television_Channels TC ON TCS.television_channels_id = TC.id\nGROUP BY S.id, S.show_title"
          ]
        },
        {
          "interpretation": "For each television channel, return the show titles with their corresponding genre.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT T1.channel_name, T3.show_title, T3.genre\nFROM Television_Channels AS T1\nJOIN Television_Channels_Shows AS T2 ON T1.id = T2.television_channels_id\nJOIN Shows AS T3 ON T2.shows_id = T3.id"
          ]
        },
        {
          "interpretation": "Return a list of television channels with the corresponding show title and a list of genres of the shows broadcast on each channel in the order of shows - include the genre of the first show in the first item, second show in the second item etc of the genres list for that particular television channel.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    TC.channel_name, \n    GROUP_CONCAT(S.show_title, ', ') AS show_titles, \n    GROUP_CONCAT(S.genre, ', ') AS genres\nFROM \n    Television_Channels AS TC\nJOIN \n    Television_Channels_Shows AS TCS ON TC.id = TCS.television_channels_id\nJOIN \n    Shows AS S ON TCS.shows_id = S.id\nGROUP BY \n    TC.channel_name\nORDER BY \n    show_titles"
          ]
        },
        {
          "interpretation": "Return all distinct show titles, genre, and television channel name with the corresponding country that are listed in the database.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT T1.show_title, T1.genre, T2.channel_name, T2.country \nFROM Shows T1 \nJOIN Television_Channels_Shows T3 ON T1.id = T3.shows_id \nJOIN Television_Channels T2 ON T3.television_channels_id = T2.id"
          ]
        },
        {
          "interpretation": "For each distinct genre, find all television channels broadcasting shows of that genre and return the genre and a list of channel names with their countries.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.genre, GROUP_CONCAT(TC.channel_name || ' (' || TC.country || ')' , ', ') AS channels\nFROM Shows S\nJOIN Television_Channels_Shows TCS ON S.id = TCS.shows_id\nJOIN Television_Channels TC ON TCS.television_channels_id = TC.id\nGROUP BY S.genre"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "one_found": true,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Journalism/scope_television_channels_shows/scope_television_channels_shows.sqlite",
      "db_dump": "CREATE TABLE Shows (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    show_title TEXT,\n    genre TEXT\n);\nCREATE TABLE Television_Channels (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    channel_name TEXT,\n    country TEXT\n);\nCREATE TABLE Television_Channels_Shows (\n    television_channels_id INTEGER,\n    shows_id INTEGER,\n    FOREIGN KEY(television_channels_id) REFERENCES Television_Channels(id),\n    FOREIGN KEY(shows_id) REFERENCES Shows(id)\n);\n\nINSERT INTO \"Shows\" (id,show_title,genre) VALUES (1,'Friends','Sitcom'),(2,'The Office','Comedy'),(3,'Breaking Bad','Crime Drama'),(4,'Game Of Thrones','Fantasy'),(5,'Stranger Things','Science Fiction');\nINSERT INTO \"Television_Channels\" (id,channel_name,country) VALUES (1,'Channel One','USA'),(2,'Channel Two','UK'),(3,'Channel Three','Canada'),(4,'Channel Four','Australia'),(5,'Channel Five','Germany');\nINSERT INTO \"Television_Channels_Shows\" (television_channels_id,shows_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "What is the genre of shows that are common to all channels?",
      "gold_queries": [
        "SELECT Shows.genre  from Television_Channels_Shows join Shows on Television_Channels_Shows.shows_id = Shows.id join Television_Channels on Television_Channels_Shows.television_channels_id = Television_Channels.id   GROUP BY Television_Channels_Shows.shows_id HAVING COUNT(DISTINCT Television_Channels_Shows.television_channels_id) = (SELECT COUNT(*) FROM  Television_Channels)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What is the genre of shows that exist on the most television channels?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT genre \nFROM Shows \nWHERE id = (\n    SELECT shows_id \n    FROM Television_Channels_Shows \n    GROUP BY shows_id \n    ORDER BY COUNT(DISTINCT television_channels_id) DESC \n    LIMIT 1\n)"
          ]
        },
        {
          "interpretation": "What genre of shows drives the intersection?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT genre FROM Shows"
          ]
        },
        {
          "interpretation": "What is the set of channels that broadcast the specific show genre (Sitcom, Comedy, etc.)?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.channel_name, T3.genre \nFROM Television_Channels_Shows AS T1 \nJOIN Television_Channels AS T2 ON T1.television_channels_id = T2.id \nJOIN Shows AS T3 ON T1.shows_id = T3.id"
          ]
        },
        {
          "interpretation": "What is the most specific (i.e., filtered by channel) genre of shows that at least one channel broadcasts?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT S.genre \nFROM Shows S \nJOIN Television_Channels_Shows TCS ON S.id = TCS.shows_id"
          ]
        },
        {
          "interpretation": "What is the set of genres of shows that appear on every channel, and these shows are not available on any other channels?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT genre\nFROM Shows\nWHERE id IN (\n    SELECT shows_id\n    FROM Television_Channels_Shows\n    GROUP BY shows_id\n    HAVING COUNT(DISTINCT television_channels_id) = (SELECT COUNT(*) FROM Television_Channels)\n)\nAND id NOT IN (\n    SELECT shows_id\n    FROM Television_Channels_Shows\n    GROUP BY shows_id\n    HAVING COUNT(DISTINCT television_channels_id) > 1\n)"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "one_found": true,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Journalism/scope_television_channels_shows/scope_television_channels_shows.sqlite",
      "db_dump": "CREATE TABLE Shows (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    show_title TEXT,\n    genre TEXT\n);\nCREATE TABLE Television_Channels (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    channel_name TEXT,\n    country TEXT\n);\nCREATE TABLE Television_Channels_Shows (\n    television_channels_id INTEGER,\n    shows_id INTEGER,\n    FOREIGN KEY(television_channels_id) REFERENCES Television_Channels(id),\n    FOREIGN KEY(shows_id) REFERENCES Shows(id)\n);\n\nINSERT INTO \"Shows\" (id,show_title,genre) VALUES (1,'Friends','Sitcom'),(2,'The Office','Comedy'),(3,'Breaking Bad','Crime Drama'),(4,'Game Of Thrones','Fantasy'),(5,'Stranger Things','Science Fiction');\nINSERT INTO \"Television_Channels\" (id,channel_name,country) VALUES (1,'Channel One','USA'),(2,'Channel Two','UK'),(3,'Channel Three','Canada'),(4,'Channel Four','Australia'),(5,'Channel Five','Germany');\nINSERT INTO \"Television_Channels_Shows\" (television_channels_id,shows_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "What are the show titles and genres common to all television channels?",
      "gold_queries": [
        "SELECT Shows.show_title, Shows.genre  from Television_Channels_Shows join Shows on Television_Channels_Shows.shows_id = Shows.id join Television_Channels on Television_Channels_Shows.television_channels_id = Television_Channels.id   GROUP BY Television_Channels_Shows.shows_id HAVING COUNT(DISTINCT Television_Channels_Shows.television_channels_id) = (SELECT COUNT(*) FROM  Television_Channels)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Find the intersection of show titles and genres across all television channels.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT S.show_title, S.genre\nFROM Shows S\nJOIN Television_Channels_Shows TCS ON S.id = TCS.shows_id"
          ]
        },
        {
          "interpretation": "Identify the show titles and genres that are universally broadcast across all television channels.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT S.show_title, S.genre\nFROM Shows S\nJOIN Television_Channels_Shows TCS ON S.id = TCS.shows_id\nGROUP BY S.id\nHAVING COUNT(DISTINCT TCS.television_channels_id) = (SELECT COUNT(*) FROM Television_Channels)"
          ]
        },
        {
          "interpretation": "Retrieve the set of show titles and genres that are common denominators across the transmission preferences datasets of all television channels.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.show_title, S.genre\nFROM Shows S\nWHERE NOT EXISTS (\n    SELECT 1\n    FROM Television_Channels T\n    LEFT JOIN Television_Channels_Shows TS ON T.id = TS.television_channels_id\n    WHERE TS.shows_id <> S.id OR TS.shows_id IS NULL\n)"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "one_found": true,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Journalism/scope_television_channels_shows/scope_television_channels_shows.sqlite",
      "db_dump": "CREATE TABLE Shows (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    show_title TEXT,\n    genre TEXT\n);\nCREATE TABLE Television_Channels (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    channel_name TEXT,\n    country TEXT\n);\nCREATE TABLE Television_Channels_Shows (\n    television_channels_id INTEGER,\n    shows_id INTEGER,\n    FOREIGN KEY(television_channels_id) REFERENCES Television_Channels(id),\n    FOREIGN KEY(shows_id) REFERENCES Shows(id)\n);\n\nINSERT INTO \"Shows\" (id,show_title,genre) VALUES (1,'Friends','Sitcom'),(2,'The Office','Comedy'),(3,'Breaking Bad','Crime Drama'),(4,'Game Of Thrones','Fantasy'),(5,'Stranger Things','Science Fiction');\nINSERT INTO \"Television_Channels\" (id,channel_name,country) VALUES (1,'Channel One','USA'),(2,'Channel Two','UK'),(3,'Channel Three','Canada'),(4,'Channel Four','Australia'),(5,'Channel Five','Germany');\nINSERT INTO \"Television_Channels_Shows\" (television_channels_id,shows_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "What shows are associated with each television channel?",
      "gold_queries": [
        "SELECT Shows.show_title  from Television_Channels_Shows join Shows on Television_Channels_Shows.shows_id = Shows.id join Television_Channels on Television_Channels_Shows.television_channels_id = Television_Channels.id   GROUP BY Television_Channels_Shows.shows_id HAVING COUNT(DISTINCT Television_Channels_Shows.television_channels_id) = (SELECT COUNT(*) FROM  Television_Channels)",
        "select television_channels.channel_name , shows.show_title from Television_Channels_Shows join Shows on Television_Channels_Shows.shows_id = Shows.id join Television_Channels on Television_Channels_Shows.television_channels_id = Television_Channels.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Get the show titles associated with each unique television channel.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.show_title, T1.channel_name \nFROM Television_Channels AS T1 \nJOIN Television_Channels_Shows AS T3 ON T1.id = T3.television_channels_id \nJOIN Shows AS T2 ON T3.shows_id = T2.id"
          ]
        },
        {
          "interpretation": "Get the group of shows that each television channel broadcasts.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Television_Channels.channel_name, GROUP_CONCAT(Shows.show_title, ', ') AS shows\nFROM Television_Channels\nJOIN Television_Channels_Shows ON Television_Channels.id = Television_Channels_Shows.television_channels_id\nJOIN Shows ON Television_Channels_Shows.shows_id = Shows.id\nGROUP BY Television_Channels.channel_name"
          ]
        },
        {
          "interpretation": "Note: The question assumes that there is no information beyond what is available in the provided database context.",
          "metrics": {
            "recall": 0.5,
            "precision": 0.16666666666666666,
            "f1_score": 0.25,
            "num_queries": 6,
            "num_unique_queries": 6,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT show_title FROM Shows WHERE genre = 'Comedy'",
            "SELECT channel_name FROM Television_Channels WHERE country = 'USA'",
            "SELECT channel_name, show_title FROM Television_Channels AS tc JOIN Television_Channels_Shows AS tcs ON tc.id = tcs.television_channels_id JOIN Shows AS s ON tcs.shows_id = s.id WHERE s.id = 2",
            "SELECT show_title FROM Shows WHERE id = 3",
            "SELECT channel_name FROM Television_Channels WHERE id IN (SELECT television_channels_id FROM Television_Channels_Shows WHERE shows_id = 5)",
            "SELECT show_title FROM Shows WHERE id IN (SELECT shows_id FROM Television_Channels_Shows WHERE television_channels_id = 1)"
          ]
        },
        {
          "interpretation": "Note: The question assumes that there is no information beyond what is available in the provided database context.",
          "metrics": {
            "recall": 0.5,
            "precision": 0.16666666666666666,
            "f1_score": 0.25,
            "num_queries": 6,
            "num_unique_queries": 6,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT show_title FROM Shows WHERE genre = 'Comedy'",
            "SELECT channel_name FROM Television_Channels WHERE country = 'USA'",
            "SELECT channel_name, show_title FROM Television_Channels AS tc JOIN Television_Channels_Shows AS tcs ON tc.id = tcs.television_channels_id JOIN Shows AS s ON tcs.shows_id = s.id WHERE s.id = 2",
            "SELECT show_title FROM Shows WHERE id = 3",
            "SELECT channel_name FROM Television_Channels WHERE id IN (SELECT television_channels_id FROM Television_Channels_Shows WHERE shows_id = 5)",
            "SELECT show_title FROM Shows WHERE id IN (SELECT shows_id FROM Television_Channels_Shows WHERE television_channels_id = 1)"
          ]
        },
        {
          "interpretation": "Note: The question assumes that there is no information beyond what is available in the provided database context.",
          "metrics": {
            "recall": 0.5,
            "precision": 0.16666666666666666,
            "f1_score": 0.25,
            "num_queries": 6,
            "num_unique_queries": 6,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT show_title FROM Shows WHERE genre = 'Comedy'",
            "SELECT channel_name FROM Television_Channels WHERE country = 'USA'",
            "SELECT channel_name, show_title FROM Television_Channels AS tc JOIN Television_Channels_Shows AS tcs ON tc.id = tcs.television_channels_id JOIN Shows AS s ON tcs.shows_id = s.id WHERE s.id = 2",
            "SELECT show_title FROM Shows WHERE id = 3",
            "SELECT channel_name FROM Television_Channels WHERE id IN (SELECT television_channels_id FROM Television_Channels_Shows WHERE shows_id = 5)",
            "SELECT show_title FROM Shows WHERE id IN (SELECT shows_id FROM Television_Channels_Shows WHERE television_channels_id = 1)"
          ]
        },
        {
          "interpretation": "Note: The question assumes that there is no information beyond what is available in the provided database context.",
          "metrics": {
            "recall": 0.5,
            "precision": 0.16666666666666666,
            "f1_score": 0.25,
            "num_queries": 6,
            "num_unique_queries": 6,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT show_title FROM Shows WHERE genre = 'Comedy'",
            "SELECT channel_name FROM Television_Channels WHERE country = 'USA'",
            "SELECT channel_name, show_title FROM Television_Channels AS tc JOIN Television_Channels_Shows AS tcs ON tc.id = tcs.television_channels_id JOIN Shows AS s ON tcs.shows_id = s.id WHERE s.id = 2",
            "SELECT show_title FROM Shows WHERE id = 3",
            "SELECT channel_name FROM Television_Channels WHERE id IN (SELECT television_channels_id FROM Television_Channels_Shows WHERE shows_id = 5)",
            "SELECT show_title FROM Shows WHERE id IN (SELECT shows_id FROM Television_Channels_Shows WHERE television_channels_id = 1)"
          ]
        },
        {
          "interpretation": "Note: The question assumes that there is no information beyond what is available in the provided database context.",
          "metrics": {
            "recall": 0.5,
            "precision": 0.16666666666666666,
            "f1_score": 0.25,
            "num_queries": 6,
            "num_unique_queries": 6,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT show_title FROM Shows WHERE genre = 'Comedy'",
            "SELECT channel_name FROM Television_Channels WHERE country = 'USA'",
            "SELECT channel_name, show_title FROM Television_Channels AS tc JOIN Television_Channels_Shows AS tcs ON tc.id = tcs.television_channels_id JOIN Shows AS s ON tcs.shows_id = s.id WHERE s.id = 2",
            "SELECT show_title FROM Shows WHERE id = 3",
            "SELECT channel_name FROM Television_Channels WHERE id IN (SELECT television_channels_id FROM Television_Channels_Shows WHERE shows_id = 5)",
            "SELECT show_title FROM Shows WHERE id IN (SELECT shows_id FROM Television_Channels_Shows WHERE television_channels_id = 1)"
          ]
        },
        {
          "interpretation": "Note: The question assumes that there is no information beyond what is available in the provided database context.",
          "metrics": {
            "recall": 0.5,
            "precision": 0.16666666666666666,
            "f1_score": 0.25,
            "num_queries": 6,
            "num_unique_queries": 6,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT show_title FROM Shows WHERE genre = 'Comedy'",
            "SELECT channel_name FROM Television_Channels WHERE country = 'USA'",
            "SELECT channel_name, show_title FROM Television_Channels AS tc JOIN Television_Channels_Shows AS tcs ON tc.id = tcs.television_channels_id JOIN Shows AS s ON tcs.shows_id = s.id WHERE s.id = 2",
            "SELECT show_title FROM Shows WHERE id = 3",
            "SELECT channel_name FROM Television_Channels WHERE id IN (SELECT television_channels_id FROM Television_Channels_Shows WHERE shows_id = 5)",
            "SELECT show_title FROM Shows WHERE id IN (SELECT shows_id FROM Television_Channels_Shows WHERE television_channels_id = 1)"
          ]
        },
        {
          "interpretation": "Display every unique television channel, along with the list of all its series titles that are being shown on it.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT channel_name, GROUP_CONCAT(show_title) AS series_titles\nFROM Television_Channels\nJOIN Television_Channels_Shows ON Television_Channels.id = Television_Channels_Shows.television_channels_id\nJOIN Shows ON Television_Channels_Shows.shows_id = Shows.id\nGROUP BY channel_name"
          ]
        }
      ],
      "num_unique_execution_results": 9,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2222222222222222,
        "one_found": true,
        "f1_score": 0.3636363636363636,
        "num_queries": 39,
        "num_unique_queries": 9,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 7
    },
    {
      "db_file": "data/scope/Journalism/scope_television_channels_shows/scope_television_channels_shows.sqlite",
      "db_dump": "CREATE TABLE Shows (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    show_title TEXT,\n    genre TEXT\n);\nCREATE TABLE Television_Channels (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    channel_name TEXT,\n    country TEXT\n);\nCREATE TABLE Television_Channels_Shows (\n    television_channels_id INTEGER,\n    shows_id INTEGER,\n    FOREIGN KEY(television_channels_id) REFERENCES Television_Channels(id),\n    FOREIGN KEY(shows_id) REFERENCES Shows(id)\n);\n\nINSERT INTO \"Shows\" (id,show_title,genre) VALUES (1,'Friends','Sitcom'),(2,'The Office','Comedy'),(3,'Breaking Bad','Crime Drama'),(4,'Game Of Thrones','Fantasy'),(5,'Stranger Things','Science Fiction');\nINSERT INTO \"Television_Channels\" (id,channel_name,country) VALUES (1,'Channel One','USA'),(2,'Channel Two','UK'),(3,'Channel Three','Canada'),(4,'Channel Four','Australia'),(5,'Channel Five','Germany');\nINSERT INTO \"Television_Channels_Shows\" (television_channels_id,shows_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "For every channel, list the genre of shows they run.",
      "gold_queries": [
        "select television_channels.channel_name , shows.genre from Television_Channels_Shows join Shows on Television_Channels_Shows.shows_id = Shows.id join Television_Channels on Television_Channels_Shows.television_channels_id = Television_Channels.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Group shows by channel and list genres for each group.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Television_Channels.channel_name, GROUP_CONCAT(Shows.genre) AS genres\nFROM Television_Channels\nJOIN Television_Channels_Shows ON Television_Channels.id = Television_Channels_Shows.television_channels_id\nJOIN Shows ON Television_Channels_Shows.shows_id = Shows.id\nGROUP BY Television_Channels.channel_name"
          ]
        },
        {
          "interpretation": "Retrieve the total number of unique genres across all channels, without specifying individual genres per channel.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(DISTINCT genre) FROM Shows"
          ]
        },
        {
          "interpretation": "Determine the channels with the highest number of unique genres displayed.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT channel_name\nFROM Television_Channels\nWHERE id IN (\n    SELECT television_channels_id\n    FROM (\n        SELECT television_channels_id, COUNT(DISTINCT genre) AS genre_count\n        FROM Television_Channels_Shows\n        JOIN Shows ON Television_Channels_Shows.shows_id = Shows.id\n        GROUP BY television_channels_id\n        ORDER BY genre_count DESC\n        LIMIT 1\n    )\n)"
          ]
        },
        {
          "interpretation": "List all genres of shows without considering the actual channel display of each show.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT genre FROM Shows"
          ]
        },
        {
          "interpretation": "List all genres of shows for each individual channel separately.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT T1.channel_name, T3.genre\nFROM Television_Channels AS T1\nJOIN Television_Channels_Shows AS T2 ON T1.id = T2.television_channels_id\nJOIN Shows AS T3 ON T2.shows_id = T3.id"
          ]
        },
        {
          "interpretation": "Count the occurrences of each genre and list these counts for each channel separately.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.channel_name, T1.genre, COUNT(*) AS occurrences \nFROM Shows AS T1 \nJOIN Television_Channels_Shows AS T3 ON T1.id = T3.shows_id \nJOIN Television_Channels AS T2 ON T3.television_channels_id = T2.id \nGROUP BY T2.channel_name, T1.genre"
          ]
        },
        {
          "interpretation": "Get the genres associated with the shows broadcast on every channel in the database.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT T2.genre\nFROM Television_Channels_Shows AS T1\nJOIN Shows AS T2 ON T1.shows_id = T2.id"
          ]
        },
        {
          "interpretation": "Find the most commonly occurring genre for all shows across each channel.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    tcs.television_channels_id, \n    tc.channel_name, \n    s.genre, \n    COUNT(*) as occurrences\nFROM \n    Television_Channels_Shows tcs\nJOIN \n    Shows s ON tcs.shows_id = s.id\nJOIN \n    Television_Channels tc ON tcs.television_channels_id = tc.id\nGROUP BY \n    tcs.television_channels_id, \n    s.genre\nORDER BY \n    tcs.television_channels_id, \n    occurrences DESC"
          ]
        }
      ],
      "num_unique_execution_results": 8,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.125,
        "one_found": true,
        "f1_score": 0.2222222222222222,
        "num_queries": 8,
        "num_unique_queries": 8,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Journalism/scope_television_channels_shows/scope_television_channels_shows.sqlite",
      "db_dump": "CREATE TABLE Shows (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    show_title TEXT,\n    genre TEXT\n);\nCREATE TABLE Television_Channels (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    channel_name TEXT,\n    country TEXT\n);\nCREATE TABLE Television_Channels_Shows (\n    television_channels_id INTEGER,\n    shows_id INTEGER,\n    FOREIGN KEY(television_channels_id) REFERENCES Television_Channels(id),\n    FOREIGN KEY(shows_id) REFERENCES Shows(id)\n);\n\nINSERT INTO \"Shows\" (id,show_title,genre) VALUES (1,'Friends','Sitcom'),(2,'The Office','Comedy'),(3,'Breaking Bad','Crime Drama'),(4,'Game Of Thrones','Fantasy'),(5,'Stranger Things','Science Fiction');\nINSERT INTO \"Television_Channels\" (id,channel_name,country) VALUES (1,'Channel One','USA'),(2,'Channel Two','UK'),(3,'Channel Three','Canada'),(4,'Channel Four','Australia'),(5,'Channel Five','Germany');\nINSERT INTO \"Television_Channels_Shows\" (television_channels_id,shows_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "What show is common across all television channels?",
      "gold_queries": [
        "SELECT Shows.show_title  from Television_Channels_Shows join Shows on Television_Channels_Shows.shows_id = Shows.id join Television_Channels on Television_Channels_Shows.television_channels_id = Television_Channels.id   GROUP BY Television_Channels_Shows.shows_id HAVING COUNT(DISTINCT Television_Channels_Shows.television_channels_id) = (SELECT COUNT(*) FROM  Television_Channels)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "A show appearing in all available channels and by all different means.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT s.show_title \nFROM Shows s \nWHERE s.id IN (\n    SELECT ts.shows_id \n    FROM Television_Channels_Shows ts\n    GROUP BY ts.shows_id\n    HAVING COUNT(DISTINCT ts.television_channels_id) = (SELECT COUNT(*) FROM Television_Channels)\n)"
          ]
        },
        {
          "interpretation": "A show that is exclusive or broadcast uniquely across all television channels.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT show_title FROM Shows WHERE id IN (SELECT shows_id FROM Television_Channels_Shows GROUP BY shows_id HAVING COUNT(television_channels_id) = 1)"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "one_found": true,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Journalism/scope_television_channels_shows/scope_television_channels_shows.sqlite",
      "db_dump": "CREATE TABLE Shows (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    show_title TEXT,\n    genre TEXT\n);\nCREATE TABLE Television_Channels (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    channel_name TEXT,\n    country TEXT\n);\nCREATE TABLE Television_Channels_Shows (\n    television_channels_id INTEGER,\n    shows_id INTEGER,\n    FOREIGN KEY(television_channels_id) REFERENCES Television_Channels(id),\n    FOREIGN KEY(shows_id) REFERENCES Shows(id)\n);\n\nINSERT INTO \"Shows\" (id,show_title,genre) VALUES (1,'Friends','Sitcom'),(2,'The Office','Comedy'),(3,'Breaking Bad','Crime Drama'),(4,'Game Of Thrones','Fantasy'),(5,'Stranger Things','Science Fiction');\nINSERT INTO \"Television_Channels\" (id,channel_name,country) VALUES (1,'Channel One','USA'),(2,'Channel Two','UK'),(3,'Channel Three','Canada'),(4,'Channel Four','Australia'),(5,'Channel Five','Germany');\nINSERT INTO \"Television_Channels_Shows\" (television_channels_id,shows_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "For each television channel, provide the corresponding show.",
      "gold_queries": [
        "select television_channels.channel_name , shows.show_title from Television_Channels_Shows join Shows on Television_Channels_Shows.shows_id = Shows.id join Television_Channels on Television_Channels_Shows.television_channels_id = Television_Channels.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Return a list of all shows that are televised on any channel.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT show_title FROM Shows"
          ]
        },
        {
          "interpretation": "Return the television channels along with their unique show offerings, removing duplicates.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT DISTINCT T2.channel_name, T3.show_title \nFROM Television_Channels_Shows AS T1 \nJOIN Television_Channels AS T2 ON T1.television_channels_id = T2.id \nJOIN Shows AS T3 ON T1.shows_id = T3.id"
          ]
        },
        {
          "interpretation": "Provide the total number of shows on each television channel, noting some channels may have the same show airing on more than one occasion.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT television_channels_id, COUNT(shows_id) AS total_shows\nFROM Television_Channels_Shows\nGROUP BY television_channels_id"
          ]
        },
        {
          "interpretation": "Provide a list of channels along with the number of shows each channel airs.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT channel_name, COUNT(shows_id) \nFROM Television_Channels \nJOIN Television_Channels_Shows ON Television_Channels.id = Television_Channels_Shows.television_channels_id \nGROUP BY channel_name"
          ]
        },
        {
          "interpretation": "Return a list of shows that are shown on multiple channels.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT s.show_title\nFROM Shows s\nJOIN Television_Channels_Shows tcs ON s.id = tcs.shows_id\nGROUP BY s.show_title\nHAVING COUNT(DISTINCT tcs.television_channels_id) > 1"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "one_found": true,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Journalism/scope_real_estate_reporters_markets/scope_real_estate_reporters_markets.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    article_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    published_date DATE\n);\nCREATE TABLE Markets(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    market_name TEXT,\n    description TEXT\n);\nCREATE TABLE Real_Estate_Reporters(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT\n);\nCREATE TABLE Real_Estate_Reporters_Markets(\n    reporter_id INTEGER,\n    market_id INTEGER,\n    FOREIGN KEY(reporter_id) REFERENCES Real_Estate_Reporters(id),\n    FOREIGN KEY(market_id) REFERENCES Markets(id)\n);\nCREATE TABLE Reporter_Articles(\n    reporter_id INTEGER,\n    article_id INTEGER,\n    FOREIGN KEY(reporter_id) REFERENCES Real_Estate_Reporters(id),\n    FOREIGN KEY(article_id) REFERENCES Articles(article_id)\n);\n\nINSERT INTO \"Articles\" (article_id,title,content,published_date) VALUES (1,'New Luxury Home Development','Details about a new luxury home development...','2021-09-01'),(2,'First Time Buyers Guide','Tips for first time home buyers...','2021-08-15'),(3,'Office Space Trends','The latest trends in office space...','2021-07-30'),(4,'Farmland vs Investment Property','Comparing farmland and investment property...','2021-06-20'),(5,'Retail Space Revival','How retail spaces are making a comeback...','2021-05-15');\nINSERT INTO \"Markets\" (id,market_name,description) VALUES (1,'Luxury Homes','High-end residential properties.'),(2,'Affordable Housing','Moderately priced homes for first-time buyers.'),(3,'Commercial Properties','Offices, retail spaces, industrial buildings.'),(4,'Rural Land','Agriculture land and rural estates.'),(5,'Investment Properties','Properties purchased for investment purposes.');\nINSERT INTO \"Real_Estate_Reporters\" (id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com'),(3,'Michael Johnson','michael@example.com'),(4,'Emily Davis','emily@example.com'),(5,'David Brown','david@example.com');\nINSERT INTO \"Real_Estate_Reporters_Markets\" (reporter_id,market_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "What are descriptions of markets all real estate reporters equally cover?",
      "gold_queries": [
        "SELECT Markets.description  from Real_Estate_Reporters_Markets join Markets on Real_Estate_Reporters_Markets.market_id = Markets.id join Real_Estate_Reporters on Real_Estate_Reporters_Markets.reporter_id = Real_Estate_Reporters.id   GROUP BY Real_Estate_Reporters_Markets.market_id HAVING COUNT(DISTINCT Real_Estate_Reporters_Markets.reporter_id) = (SELECT COUNT(*) FROM  Real_Estate_Reporters)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What descriptions of markets are common to all real estate reporters, taking into account any overlapping or duplicate reporting assignments?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT description FROM Markets WHERE id IN (SELECT market_id FROM Real_Estate_Reporters_Markets GROUP BY market_id HAVING COUNT(DISTINCT reporter_id) = (SELECT COUNT(*) FROM Real_Estate_Reporters))"
          ]
        },
        {
          "interpretation": "What are market descriptions that every real estate reporter is associated with at least once?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT m.description \nFROM Markets m \nJOIN Real_Estate_Reporters_Markets rem ON m.id = rem.market_id"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "one_found": true,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Journalism/scope_real_estate_reporters_markets/scope_real_estate_reporters_markets.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    article_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    published_date DATE\n);\nCREATE TABLE Markets(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    market_name TEXT,\n    description TEXT\n);\nCREATE TABLE Real_Estate_Reporters(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT\n);\nCREATE TABLE Real_Estate_Reporters_Markets(\n    reporter_id INTEGER,\n    market_id INTEGER,\n    FOREIGN KEY(reporter_id) REFERENCES Real_Estate_Reporters(id),\n    FOREIGN KEY(market_id) REFERENCES Markets(id)\n);\nCREATE TABLE Reporter_Articles(\n    reporter_id INTEGER,\n    article_id INTEGER,\n    FOREIGN KEY(reporter_id) REFERENCES Real_Estate_Reporters(id),\n    FOREIGN KEY(article_id) REFERENCES Articles(article_id)\n);\n\nINSERT INTO \"Articles\" (article_id,title,content,published_date) VALUES (1,'New Luxury Home Development','Details about a new luxury home development...','2021-09-01'),(2,'First Time Buyers Guide','Tips for first time home buyers...','2021-08-15'),(3,'Office Space Trends','The latest trends in office space...','2021-07-30'),(4,'Farmland vs Investment Property','Comparing farmland and investment property...','2021-06-20'),(5,'Retail Space Revival','How retail spaces are making a comeback...','2021-05-15');\nINSERT INTO \"Markets\" (id,market_name,description) VALUES (1,'Luxury Homes','High-end residential properties.'),(2,'Affordable Housing','Moderately priced homes for first-time buyers.'),(3,'Commercial Properties','Offices, retail spaces, industrial buildings.'),(4,'Rural Land','Agriculture land and rural estates.'),(5,'Investment Properties','Properties purchased for investment purposes.');\nINSERT INTO \"Real_Estate_Reporters\" (id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com'),(3,'Michael Johnson','michael@example.com'),(4,'Emily Davis','emily@example.com'),(5,'David Brown','david@example.com');\nINSERT INTO \"Real_Estate_Reporters_Markets\" (reporter_id,market_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "Give me descriptions of markets every real estate reporter covers.",
      "gold_queries": [
        "SELECT Markets.description  from Real_Estate_Reporters_Markets join Markets on Real_Estate_Reporters_Markets.market_id = Markets.id join Real_Estate_Reporters on Real_Estate_Reporters_Markets.reporter_id = Real_Estate_Reporters.id   GROUP BY Real_Estate_Reporters_Markets.market_id HAVING COUNT(DISTINCT Real_Estate_Reporters_Markets.reporter_id) = (SELECT COUNT(*) FROM  Real_Estate_Reporters)",
        "select real_estate_reporters.name , markets.description from Real_Estate_Reporters_Markets join Markets on Real_Estate_Reporters_Markets.market_id = Markets.id join Real_Estate_Reporters on Real_Estate_Reporters_Markets.reporter_id = Real_Estate_Reporters.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List the unique market descriptions each real estate reporter covers.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT M.description, R.name\nFROM Real_Estate_Reporters_Markets REM\nJOIN Markets M ON REM.market_id = M.id\nJOIN Real_Estate_Reporters R ON REM.reporter_id = R.id"
          ]
        },
        {
          "interpretation": "Return the market names for every real estate reporter individually.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT R.name, M.market_name \nFROM Real_Estate_Reporters R \nJOIN Real_Estate_Reporters_Markets REM ON R.id = REM.reporter_id \nJOIN Markets M ON REM.market_id = M.id"
          ]
        },
        {
          "interpretation": "Describe all unique markets that are covered by the real estate reporters.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT market_name FROM Markets"
          ]
        },
        {
          "interpretation": "Describe all markets that are individually covered by the real estate reporters.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT M.market_name\nFROM Markets M\nJOIN Real_Estate_Reporters_Markets REM ON M.id = REM.market_id\nGROUP BY M.market_name"
          ]
        },
        {
          "interpretation": "Give me descriptions of all markets that each real estate reporter covers.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.description \nFROM Real_Estate_Reporters_Markets AS T1 \nJOIN Markets AS T2 ON T1.market_id = T2.id \nGROUP BY T1.reporter_id, T2.description"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.2,
        "one_found": true,
        "f1_score": 0.28571428571428575,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Journalism/scope_real_estate_reporters_markets/scope_real_estate_reporters_markets.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    article_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    published_date DATE\n);\nCREATE TABLE Markets(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    market_name TEXT,\n    description TEXT\n);\nCREATE TABLE Real_Estate_Reporters(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT\n);\nCREATE TABLE Real_Estate_Reporters_Markets(\n    reporter_id INTEGER,\n    market_id INTEGER,\n    FOREIGN KEY(reporter_id) REFERENCES Real_Estate_Reporters(id),\n    FOREIGN KEY(market_id) REFERENCES Markets(id)\n);\nCREATE TABLE Reporter_Articles(\n    reporter_id INTEGER,\n    article_id INTEGER,\n    FOREIGN KEY(reporter_id) REFERENCES Real_Estate_Reporters(id),\n    FOREIGN KEY(article_id) REFERENCES Articles(article_id)\n);\n\nINSERT INTO \"Articles\" (article_id,title,content,published_date) VALUES (1,'New Luxury Home Development','Details about a new luxury home development...','2021-09-01'),(2,'First Time Buyers Guide','Tips for first time home buyers...','2021-08-15'),(3,'Office Space Trends','The latest trends in office space...','2021-07-30'),(4,'Farmland vs Investment Property','Comparing farmland and investment property...','2021-06-20'),(5,'Retail Space Revival','How retail spaces are making a comeback...','2021-05-15');\nINSERT INTO \"Markets\" (id,market_name,description) VALUES (1,'Luxury Homes','High-end residential properties.'),(2,'Affordable Housing','Moderately priced homes for first-time buyers.'),(3,'Commercial Properties','Offices, retail spaces, industrial buildings.'),(4,'Rural Land','Agriculture land and rural estates.'),(5,'Investment Properties','Properties purchased for investment purposes.');\nINSERT INTO \"Real_Estate_Reporters\" (id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com'),(3,'Michael Johnson','michael@example.com'),(4,'Emily Davis','emily@example.com'),(5,'David Brown','david@example.com');\nINSERT INTO \"Real_Estate_Reporters_Markets\" (reporter_id,market_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "For each real estate reporter, list descriptions of markets they cover.",
      "gold_queries": [
        "select real_estate_reporters.name , markets.description from Real_Estate_Reporters_Markets join Markets on Real_Estate_Reporters_Markets.market_id = Markets.id join Real_Estate_Reporters on Real_Estate_Reporters_Markets.reporter_id = Real_Estate_Reporters.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For each real estate reporter, list the publication dates of the articles they cover indirectly through market reports.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT RER.name, A.published_date\nFROM Real_Estate_Reporters RER\nJOIN Real_Estate_Reporters_Markets REM ON RER.id = REM.reporter_id\nJOIN Reporter_Articles RA ON REM.reporter_id = RA.reporter_id\nJOIN Articles A ON RA.article_id = A.article_id"
          ]
        },
        {
          "interpretation": "For each real estate reporter, list the market IDs they cover directly.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT reporter_id, market_id FROM Real_Estate_Reporters_Markets"
          ]
        },
        {
          "interpretation": "For each real estate reporter, list the unique names of the markets they cover directly or indirectly through market reports.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Real_Estate_Reporters.name, Markets.market_name\nFROM Real_Estate_Reporters\nJOIN Real_Estate_Reporters_Markets ON Real_Estate_Reporters.id = Real_Estate_Reporters_Markets.reporter_id\nJOIN Markets ON Real_Estate_Reporters_Markets.market_id = Markets.id\nGROUP BY Real_Estate_Reporters.name, Markets.market_name"
          ]
        },
        {
          "interpretation": "For each real estate reporter, list all possible descriptions of the markets they cover directly or indirectly through market reports.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT R.id, R.name, M.description\nFROM Real_Estate_Reporters R\nJOIN Real_Estate_Reporters_Markets REM ON R.id = REM.reporter_id\nJOIN Markets M ON REM.market_id = M.id"
          ]
        },
        {
          "interpretation": "For each real estate reporter, list the descriptions of the markets they cover directly.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT T1.name, T3.description \nFROM Real_Estate_Reporters AS T1 \nJOIN Real_Estate_Reporters_Markets AS T2 ON T1.id = T2.reporter_id \nJOIN Markets AS T3 ON T2.market_id = T3.id"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "one_found": true,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Journalism/scope_real_estate_reporters_markets/scope_real_estate_reporters_markets.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    article_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    published_date DATE\n);\nCREATE TABLE Markets(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    market_name TEXT,\n    description TEXT\n);\nCREATE TABLE Real_Estate_Reporters(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT\n);\nCREATE TABLE Real_Estate_Reporters_Markets(\n    reporter_id INTEGER,\n    market_id INTEGER,\n    FOREIGN KEY(reporter_id) REFERENCES Real_Estate_Reporters(id),\n    FOREIGN KEY(market_id) REFERENCES Markets(id)\n);\nCREATE TABLE Reporter_Articles(\n    reporter_id INTEGER,\n    article_id INTEGER,\n    FOREIGN KEY(reporter_id) REFERENCES Real_Estate_Reporters(id),\n    FOREIGN KEY(article_id) REFERENCES Articles(article_id)\n);\n\nINSERT INTO \"Articles\" (article_id,title,content,published_date) VALUES (1,'New Luxury Home Development','Details about a new luxury home development...','2021-09-01'),(2,'First Time Buyers Guide','Tips for first time home buyers...','2021-08-15'),(3,'Office Space Trends','The latest trends in office space...','2021-07-30'),(4,'Farmland vs Investment Property','Comparing farmland and investment property...','2021-06-20'),(5,'Retail Space Revival','How retail spaces are making a comeback...','2021-05-15');\nINSERT INTO \"Markets\" (id,market_name,description) VALUES (1,'Luxury Homes','High-end residential properties.'),(2,'Affordable Housing','Moderately priced homes for first-time buyers.'),(3,'Commercial Properties','Offices, retail spaces, industrial buildings.'),(4,'Rural Land','Agriculture land and rural estates.'),(5,'Investment Properties','Properties purchased for investment purposes.');\nINSERT INTO \"Real_Estate_Reporters\" (id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com'),(3,'Michael Johnson','michael@example.com'),(4,'Emily Davis','emily@example.com'),(5,'David Brown','david@example.com');\nINSERT INTO \"Real_Estate_Reporters_Markets\" (reporter_id,market_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "For each real estate reporter, provide the corresponding markets?",
      "gold_queries": [
        "select real_estate_reporters.name , markets.market_name from Real_Estate_Reporters_Markets join Markets on Real_Estate_Reporters_Markets.market_id = Markets.id join Real_Estate_Reporters on Real_Estate_Reporters_Markets.reporter_id = Real_Estate_Reporters.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What markets do each of the real estate reporters focus on.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT r.name, m.market_name \nFROM Real_Estate_Reporters r\nJOIN Real_Estate_Reporters_Markets rem ON r.id = rem.reporter_id\nJOIN Markets m ON rem.market_id = m.id"
          ]
        },
        {
          "interpretation": "Get the market information for all real estate reporters.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT m.id, m.market_name, m.description\nFROM Markets m\nJOIN Real_Estate_Reporters_Markets rem ON m.id = rem.market_id"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "one_found": true,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Journalism/scope_television_channels_shows/scope_television_channels_shows.sqlite",
      "db_dump": "CREATE TABLE Shows (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    show_title TEXT,\n    genre TEXT\n);\nCREATE TABLE Television_Channels (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    channel_name TEXT,\n    country TEXT\n);\nCREATE TABLE Television_Channels_Shows (\n    television_channels_id INTEGER,\n    shows_id INTEGER,\n    FOREIGN KEY(television_channels_id) REFERENCES Television_Channels(id),\n    FOREIGN KEY(shows_id) REFERENCES Shows(id)\n);\n\nINSERT INTO \"Shows\" (id,show_title,genre) VALUES (1,'Friends','Sitcom'),(2,'The Office','Comedy'),(3,'Breaking Bad','Crime Drama'),(4,'Game Of Thrones','Fantasy'),(5,'Stranger Things','Science Fiction');\nINSERT INTO \"Television_Channels\" (id,channel_name,country) VALUES (1,'Channel One','USA'),(2,'Channel Two','UK'),(3,'Channel Three','Canada'),(4,'Channel Four','Australia'),(5,'Channel Five','Germany');\nINSERT INTO \"Television_Channels_Shows\" (television_channels_id,shows_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\n",
      "question": "What show title and genre of shows are available for each television channel?",
      "gold_queries": [
        "SELECT Shows.show_title, Shows.genre  from Television_Channels_Shows join Shows on Television_Channels_Shows.shows_id = Shows.id join Television_Channels on Television_Channels_Shows.television_channels_id = Television_Channels.id   GROUP BY Television_Channels_Shows.shows_id HAVING COUNT(DISTINCT Television_Channels_Shows.television_channels_id) = (SELECT COUNT(*) FROM  Television_Channels)",
        "select television_channels.channel_name , shows.show_title , shows.genre from Television_Channels_Shows join Shows on Television_Channels_Shows.shows_id = Shows.id join Television_Channels on Television_Channels_Shows.television_channels_id = Television_Channels.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What titles of shows in what genres can be watched on a single television channel?",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.show_title, T1.genre, T2.channel_name \nFROM Shows AS T1 \nJOIN Television_Channels_Shows AS T3 ON T1.id = T3.shows_id \nJOIN Television_Channels AS T2 ON T3.television_channels_id = T2.id"
          ]
        },
        {
          "interpretation": "What are the show title and genres of the shows available on each TV channel in the database?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT TCS.television_channels_id, TC.channel_name, S.show_title, S.genre\nFROM Television_Channels_Shows AS TCS\nJOIN Television_Channels AS TC ON TCS.television_channels_id = TC.id\nJOIN Shows AS S ON TCS.shows_id = S.id"
          ]
        },
        {
          "interpretation": "What TV channels broadcast multiple different genres, along with their corresponding show titles?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT T2.channel_name, T1.show_title\nFROM Shows AS T1\nJOIN Television_Channels_Shows AS T3 ON T1.id = T3.shows_id\nJOIN Television_Channels AS T2 ON T3.television_channels_id = T2.id\nWHERE T2.id IN (\n    SELECT television_channels_id\n    FROM Television_Channels_Shows\n    GROUP BY television_channels_id\n    HAVING COUNT(DISTINCT shows_id) > 1\n)"
          ]
        },
        {
          "interpretation": "Get the unique combinations of show titles and genres that can be found across all TV channels.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT show_title, genre FROM Shows"
          ]
        },
        {
          "interpretation": "Provide the show titles and genres of each show that is broadcast across multiple channels.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.show_title, S.genre\nFROM Shows S\nJOIN Television_Channels_Shows TCS ON S.id = TCS.shows_id\nGROUP BY S.id\nHAVING COUNT(TCS.television_channels_id) > 1"
          ]
        },
        {
          "interpretation": "What show titles are available to audiences in each TV market/geographic location, also including the genre?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.show_title, S.genre, TC.country\nFROM Shows S\nJOIN Television_Channels_Shows TCS ON S.id = TCS.shows_id\nJOIN Television_Channels TC ON TCS.television_channels_id = TC.id"
          ]
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "one_found": true,
        "f1_score": 0.5,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/scope/Education/scope_field_trips_stops/scope_field_trips_stops.sqlite",
      "db_dump": "CREATE TABLE Field_Trips(\n    tripID INTEGER PRIMARY KEY,\n    fieldTripName TEXT,\n    date DATE);\nCREATE TABLE Field_Trips_Stops(\n    tripID INTEGER REFERENCES Field_Trips(tripID),\n    stopID INTEGER REFERENCES Stops(stopID));\nCREATE TABLE Field_Trips_Students(\n    tripID INTEGER REFERENCES Field_Trips(tripID),\n    studentID INTEGER REFERENCES Students(studentID));\nCREATE TABLE Field_Trips_Teachers(\n    tripID INTEGER REFERENCES Field_Trips(tripID),\n    teacherID INTEGER REFERENCES Teachers(teacherID));\nCREATE TABLE Stops(\n    stopID INTEGER PRIMARY KEY,\n    stopLocation TEXT);\nCREATE TABLE Students(\n    studentID INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT);\nCREATE TABLE Teachers(\n    teacherID INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT);\n\nINSERT INTO \"Field_Trips\" (tripID,fieldTripName,date) VALUES (1,'Educational Trip','2021-09-01'),(2,'Scientific Excursion','2021-08-30'),(3,'Nature Adventure','2021-07-25'),(4,'Historical Tour','2021-06-10'),(5,'Art Exhibition','2021-05-01');\nINSERT INTO \"Field_Trips_Stops\" (tripID,stopID) VALUES (1,1),(1,2),(5,5),(3,3),(4,4),(2,2),(3,2),(4,2),(5,2);\nINSERT INTO \"Field_Trips_Students\" (tripID,studentID) VALUES (1,1),(1,2),(2,3),(2,4),(3,5);\nINSERT INTO \"Field_Trips_Teachers\" (tripID,teacherID) VALUES (1,1),(2,2),(3,3),(4,4),(5,5);\nINSERT INTO \"Stops\" (stopID,stopLocation) VALUES (1,'Zoo'),(2,'Museum'),(3,'Botanical Garden'),(4,'Planetarium'),(5,'National Park');\nINSERT INTO \"Students\" (studentID,firstName,lastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Alice','Brown'),(4,'Tom','Johnson'),(5,'Emma','Wilson');\nINSERT INTO \"Teachers\" (teacherID,firstName,lastName) VALUES (1,'Mr.','White'),(2,'Ms.','Black'),(3,'Dr.','Green'),(4,'Professor','Blue'),(5,'Assistant','Red');\n",
      "question": "What stops were visited during each field trip?",
      "gold_queries": [
        "SELECT Stops.stopLocation  from Field_Trips_Stops join Stops on Field_Trips_Stops.stopID = Stops.stopID join Field_Trips on Field_Trips_Stops.tripID = Field_Trips.tripID   GROUP BY Field_Trips_Stops.stopID HAVING COUNT(DISTINCT Field_Trips_Stops.tripID) = (SELECT COUNT(*) FROM  Field_Trips)",
        "select field_trips.fieldtripname , stops.stoplocation from Field_Trips_Stops join Stops on Field_Trips_Stops.stopID = Stops.stopID join Field_Trips on Field_Trips_Stops.tripID = Field_Trips.tripID"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Examine the Field_Trips_Stops table for each tripID to see which stopIDs are associated with them, then get the corresponding stopLocations.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FT.tripID, S.stopLocation\nFROM Field_Trips_Stops FT\nJOIN Stops S ON FT.stopID = S.stopID\nORDER BY FT.tripID, S.stopLocation"
          ]
        },
        {
          "interpretation": "Include all distinct stopLocations that are linked to one or more tripIDs in the Field_Trips_Stops table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT s.stopLocation\nFROM Stops s\nJOIN Field_Trips_Stops fts ON s.stopID = fts.stopID"
          ]
        },
        {
          "interpretation": "List the tripID, stopID, and stopLocation for each entry in the Field_Trips_Stops table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.tripID, T1.stopID, T2.stopLocation FROM Field_Trips_Stops AS T1 JOIN Stops AS T2 ON T1.stopID = T2.stopID"
          ]
        },
        {
          "interpretation": "To acquire the distinct stops visited for every field trip, join Field_Trips and Field_Trips_Stops to obtain stopLocations for each trip.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT ft.fieldTripName, s.stopLocation\nFROM Field_Trips ft\nJOIN Field_Trips_Stops fts ON ft.tripID = fts.tripID\nJOIN Stops s ON fts.stopID = s.stopID"
          ]
        },
        {
          "interpretation": "For each stopID from the Field_Trips_Stops table, display its location and the tripIDs that include it.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT stopLocation, GROUP_CONCAT(tripID) AS tripIDs\nFROM Field_Trips_Stops\nJOIN Stops ON Field_Trips_Stops.stopID = Stops.stopID\nGROUP BY Field_Trips_Stops.stopID"
          ]
        },
        {
          "interpretation": "Identify each unique stopID in the Field_Trips_Stops table, along with their stopLocations.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT T2.stopID, T2.stopLocation\nFROM Field_Trips_Stops AS T1\nJOIN Stops AS T2 ON T1.stopID = T2.stopID"
          ]
        },
        {
          "interpretation": "Retrieve stopIDs from Field_Trips_Stops, then use those IDs to find the corresponding stopLocations from the Stops table, for each tripID in Field_Trips.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.stopLocation \nFROM Field_Trips_Stops AS T1 \nJOIN Stops AS T2 \nON T1.stopID = T2.stopID \nORDER BY T1.tripID"
          ]
        }
      ],
      "num_unique_execution_results": 7,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.14285714285714285,
        "one_found": true,
        "f1_score": 0.22222222222222224,
        "num_queries": 7,
        "num_unique_queries": 7,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Education/scope_field_trips_stops/scope_field_trips_stops.sqlite",
      "db_dump": "CREATE TABLE Field_Trips(\n    tripID INTEGER PRIMARY KEY,\n    fieldTripName TEXT,\n    date DATE);\nCREATE TABLE Field_Trips_Stops(\n    tripID INTEGER REFERENCES Field_Trips(tripID),\n    stopID INTEGER REFERENCES Stops(stopID));\nCREATE TABLE Field_Trips_Students(\n    tripID INTEGER REFERENCES Field_Trips(tripID),\n    studentID INTEGER REFERENCES Students(studentID));\nCREATE TABLE Field_Trips_Teachers(\n    tripID INTEGER REFERENCES Field_Trips(tripID),\n    teacherID INTEGER REFERENCES Teachers(teacherID));\nCREATE TABLE Stops(\n    stopID INTEGER PRIMARY KEY,\n    stopLocation TEXT);\nCREATE TABLE Students(\n    studentID INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT);\nCREATE TABLE Teachers(\n    teacherID INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT);\n\nINSERT INTO \"Field_Trips\" (tripID,fieldTripName,date) VALUES (1,'Educational Trip','2021-09-01'),(2,'Scientific Excursion','2021-08-30'),(3,'Nature Adventure','2021-07-25'),(4,'Historical Tour','2021-06-10'),(5,'Art Exhibition','2021-05-01');\nINSERT INTO \"Field_Trips_Stops\" (tripID,stopID) VALUES (1,1),(1,2),(5,5),(3,3),(4,4),(2,2),(3,2),(4,2),(5,2);\nINSERT INTO \"Field_Trips_Students\" (tripID,studentID) VALUES (1,1),(1,2),(2,3),(2,4),(3,5);\nINSERT INTO \"Field_Trips_Teachers\" (tripID,teacherID) VALUES (1,1),(2,2),(3,3),(4,4),(5,5);\nINSERT INTO \"Stops\" (stopID,stopLocation) VALUES (1,'Zoo'),(2,'Museum'),(3,'Botanical Garden'),(4,'Planetarium'),(5,'National Park');\nINSERT INTO \"Students\" (studentID,firstName,lastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Alice','Brown'),(4,'Tom','Johnson'),(5,'Emma','Wilson');\nINSERT INTO \"Teachers\" (teacherID,firstName,lastName) VALUES (1,'Mr.','White'),(2,'Ms.','Black'),(3,'Dr.','Green'),(4,'Professor','Blue'),(5,'Assistant','Red');\n",
      "question": "For every field trip, provide the corresponding stop locations.",
      "gold_queries": [
        "select field_trips.fieldtripname , stops.stoplocation from Field_Trips_Stops join Stops on Field_Trips_Stops.stopID = Stops.stopID join Field_Trips on Field_Trips_Stops.tripID = Field_Trips.tripID"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List the unique stop locations that accompanied each and every field trip entry.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT T2.stopLocation FROM Field_Trips_Stops AS T1 JOIN Stops AS T2 ON T1.stopID = T2.stopID"
          ]
        },
        {
          "interpretation": "Provide the full list of locations visited by each field trip.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT ft.fieldTripName, s.stopLocation\nFROM Field_Trips AS ft\nJOIN Field_Trips_Stops AS fts ON ft.tripID = fts.tripID\nJOIN Stops AS s ON fts.stopID = s.stopID"
          ]
        },
        {
          "interpretation": "Here are the distinct interpretations for the given question:",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 4,
            "num_unique_queries": 4,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT date\nFROM Field_Trips\nWHERE fieldTripName = 'Art Exhibition'",
            "SELECT DISTINCT t.firstName, t.lastName\nFROM Teachers t\nJOIN Field_Trips_Teachers ftt ON t.teacherID = ftt.teacherID\nJOIN Field_Trips ft ON ftt.tripID = ft.tripID\nWHERE ft.fieldTripName = 'Historical Tour'",
            "SELECT DISTINCT st.stopLocation\nFROM Stops st\nJOIN Field_Trips_Stops fts ON st.stopID = fts.stopID\nJOIN Field_Trips ft ON fts.tripID = ft.tripID\nWHERE ft.fieldTripName = 'Nature Adventure'",
            "SELECT DISTINCT s.firstName, s.lastName\nFROM Students s\nJOIN Field_Trips_Students fts ON s.studentID = fts.studentID\nJOIN Field_Trips ft ON fts.tripID = ft.tripID\nWHERE ft.fieldTripName = 'Educational Trip'"
          ]
        },
        {
          "interpretation": "Here are the distinct interpretations for the given question:",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 4,
            "num_unique_queries": 4,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT date\nFROM Field_Trips\nWHERE fieldTripName = 'Art Exhibition'",
            "SELECT DISTINCT t.firstName, t.lastName\nFROM Teachers t\nJOIN Field_Trips_Teachers ftt ON t.teacherID = ftt.teacherID\nJOIN Field_Trips ft ON ftt.tripID = ft.tripID\nWHERE ft.fieldTripName = 'Historical Tour'",
            "SELECT DISTINCT st.stopLocation\nFROM Stops st\nJOIN Field_Trips_Stops fts ON st.stopID = fts.stopID\nJOIN Field_Trips ft ON fts.tripID = ft.tripID\nWHERE ft.fieldTripName = 'Nature Adventure'",
            "SELECT DISTINCT s.firstName, s.lastName\nFROM Students s\nJOIN Field_Trips_Students fts ON s.studentID = fts.studentID\nJOIN Field_Trips ft ON fts.tripID = ft.tripID\nWHERE ft.fieldTripName = 'Educational Trip'"
          ]
        },
        {
          "interpretation": "Here are the distinct interpretations for the given question:",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 4,
            "num_unique_queries": 4,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT date\nFROM Field_Trips\nWHERE fieldTripName = 'Art Exhibition'",
            "SELECT DISTINCT t.firstName, t.lastName\nFROM Teachers t\nJOIN Field_Trips_Teachers ftt ON t.teacherID = ftt.teacherID\nJOIN Field_Trips ft ON ftt.tripID = ft.tripID\nWHERE ft.fieldTripName = 'Historical Tour'",
            "SELECT DISTINCT st.stopLocation\nFROM Stops st\nJOIN Field_Trips_Stops fts ON st.stopID = fts.stopID\nJOIN Field_Trips ft ON fts.tripID = ft.tripID\nWHERE ft.fieldTripName = 'Nature Adventure'",
            "SELECT DISTINCT s.firstName, s.lastName\nFROM Students s\nJOIN Field_Trips_Students fts ON s.studentID = fts.studentID\nJOIN Field_Trips ft ON fts.tripID = ft.tripID\nWHERE ft.fieldTripName = 'Educational Trip'"
          ]
        },
        {
          "interpretation": "Here are the distinct interpretations for the given question:",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 4,
            "num_unique_queries": 4,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT date\nFROM Field_Trips\nWHERE fieldTripName = 'Art Exhibition'",
            "SELECT DISTINCT t.firstName, t.lastName\nFROM Teachers t\nJOIN Field_Trips_Teachers ftt ON t.teacherID = ftt.teacherID\nJOIN Field_Trips ft ON ftt.tripID = ft.tripID\nWHERE ft.fieldTripName = 'Historical Tour'",
            "SELECT DISTINCT st.stopLocation\nFROM Stops st\nJOIN Field_Trips_Stops fts ON st.stopID = fts.stopID\nJOIN Field_Trips ft ON fts.tripID = ft.tripID\nWHERE ft.fieldTripName = 'Nature Adventure'",
            "SELECT DISTINCT s.firstName, s.lastName\nFROM Students s\nJOIN Field_Trips_Students fts ON s.studentID = fts.studentID\nJOIN Field_Trips ft ON fts.tripID = ft.tripID\nWHERE ft.fieldTripName = 'Educational Trip'"
          ]
        },
        {
          "interpretation": "Show the stop locations associated with each field trip ID.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.stopLocation, T2.tripID FROM Stops AS T1 JOIN Field_Trips_Stops AS T2 ON T1.stopID = T2.stopID"
          ]
        }
      ],
      "num_unique_execution_results": 7,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.14285714285714285,
        "one_found": true,
        "f1_score": 0.25,
        "num_queries": 19,
        "num_unique_queries": 7,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Education/scope_field_trips_stops/scope_field_trips_stops.sqlite",
      "db_dump": "CREATE TABLE Field_Trips(\n    tripID INTEGER PRIMARY KEY,\n    fieldTripName TEXT,\n    date DATE);\nCREATE TABLE Field_Trips_Stops(\n    tripID INTEGER REFERENCES Field_Trips(tripID),\n    stopID INTEGER REFERENCES Stops(stopID));\nCREATE TABLE Field_Trips_Students(\n    tripID INTEGER REFERENCES Field_Trips(tripID),\n    studentID INTEGER REFERENCES Students(studentID));\nCREATE TABLE Field_Trips_Teachers(\n    tripID INTEGER REFERENCES Field_Trips(tripID),\n    teacherID INTEGER REFERENCES Teachers(teacherID));\nCREATE TABLE Stops(\n    stopID INTEGER PRIMARY KEY,\n    stopLocation TEXT);\nCREATE TABLE Students(\n    studentID INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT);\nCREATE TABLE Teachers(\n    teacherID INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT);\n\nINSERT INTO \"Field_Trips\" (tripID,fieldTripName,date) VALUES (1,'Educational Trip','2021-09-01'),(2,'Scientific Excursion','2021-08-30'),(3,'Nature Adventure','2021-07-25'),(4,'Historical Tour','2021-06-10'),(5,'Art Exhibition','2021-05-01');\nINSERT INTO \"Field_Trips_Stops\" (tripID,stopID) VALUES (1,1),(1,2),(5,5),(3,3),(4,4),(2,2),(3,2),(4,2),(5,2);\nINSERT INTO \"Field_Trips_Students\" (tripID,studentID) VALUES (1,1),(1,2),(2,3),(2,4),(3,5);\nINSERT INTO \"Field_Trips_Teachers\" (tripID,teacherID) VALUES (1,1),(2,2),(3,3),(4,4),(5,5);\nINSERT INTO \"Stops\" (stopID,stopLocation) VALUES (1,'Zoo'),(2,'Museum'),(3,'Botanical Garden'),(4,'Planetarium'),(5,'National Park');\nINSERT INTO \"Students\" (studentID,firstName,lastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Alice','Brown'),(4,'Tom','Johnson'),(5,'Emma','Wilson');\nINSERT INTO \"Teachers\" (teacherID,firstName,lastName) VALUES (1,'Mr.','White'),(2,'Ms.','Black'),(3,'Dr.','Green'),(4,'Professor','Blue'),(5,'Assistant','Red');\n",
      "question": "Show me the stop location that is common for all field trips.",
      "gold_queries": [
        "SELECT Stops.stopLocation  from Field_Trips_Stops join Stops on Field_Trips_Stops.stopID = Stops.stopID join Field_Trips on Field_Trips_Stops.tripID = Field_Trips.tripID   GROUP BY Field_Trips_Stops.stopID HAVING COUNT(DISTINCT Field_Trips_Stops.tripID) = (SELECT COUNT(*) FROM  Field_Trips)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Show me the stop location shared by all field trips without any duplicates.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT DISTINCT stopLocation \nFROM Stops \nWHERE stopID IN (\n    SELECT stopID \n    FROM Field_Trips_Stops \n    GROUP BY stopID \n    HAVING COUNT(DISTINCT tripID) = (SELECT COUNT(*) FROM Field_Trips)\n)"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "one_found": true,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Education/scope_college_campuses_buildings/scope_college_campuses_buildings.sqlite",
      "db_dump": "CREATE TABLE Buildings(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT,\n    description TEXT);\nCREATE TABLE College_Campuses(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT);\nCREATE TABLE College_Campuses_Buildings(\n    PRIMARY KEY (campusId, buildingId));\n\nINSERT INTO \"Buildings\" (id,type,description) VALUES (1,'Library','A place where books and resources are stored.'),(2,'Administration Building','The main office building on campus.'),(3,'Lecture Hall','Large rooms used for lectures and presentations.'),(4,'Dormitory','Residential living space for students.'),(5,'Gymnasium','Facility for sports activities.');\nINSERT INTO \"College_Campuses\" (id,name,location) VALUES (1,'Harvard University','Cambridge, MA'),(2,'Stanford University','Stanford, CA'),(3,'University of California Berkeley','Berkeley, CA'),(4,'Massachusetts Institute of Technology','Cambridge, MA'),(5,'California Institute of Technology','Pasadena, CA');\nINSERT INTO \"College_Campuses_Buildings\" (campusId,buildingId) VALUES (1,1),(1,2),(2,1),(2,3),(3,1),(4,1),(5,1);\n",
      "question": "For every college campus list all of the associated building descriptions.",
      "gold_queries": [
        "select college_campuses.name , buildings.description from College_Campuses_Buildings join Buildings on College_Campuses_Buildings.buildingId = Buildings.id join College_Campuses on College_Campuses_Buildings.campusId = College_Campuses.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For every college campus, list all the building descriptions from the Buildings table.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT C.name, B.description\nFROM College_Campuses C\nJOIN College_Campuses_Buildings CCB ON C.id = CCB.campusId\nJOIN Buildings B ON B.id = CCB.buildingId"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "one_found": true,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Education/scope_college_campuses_buildings/scope_college_campuses_buildings.sqlite",
      "db_dump": "CREATE TABLE Buildings(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT,\n    description TEXT);\nCREATE TABLE College_Campuses(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT);\nCREATE TABLE College_Campuses_Buildings(\n    PRIMARY KEY (campusId, buildingId));\n\nINSERT INTO \"Buildings\" (id,type,description) VALUES (1,'Library','A place where books and resources are stored.'),(2,'Administration Building','The main office building on campus.'),(3,'Lecture Hall','Large rooms used for lectures and presentations.'),(4,'Dormitory','Residential living space for students.'),(5,'Gymnasium','Facility for sports activities.');\nINSERT INTO \"College_Campuses\" (id,name,location) VALUES (1,'Harvard University','Cambridge, MA'),(2,'Stanford University','Stanford, CA'),(3,'University of California Berkeley','Berkeley, CA'),(4,'Massachusetts Institute of Technology','Cambridge, MA'),(5,'California Institute of Technology','Pasadena, CA');\nINSERT INTO \"College_Campuses_Buildings\" (campusId,buildingId) VALUES (1,1),(1,2),(2,1),(2,3),(3,1),(4,1),(5,1);\n",
      "question": "Give me the types of building that every college campus has and their descriptions.",
      "gold_queries": [
        "SELECT Buildings.type, Buildings.description  from College_Campuses_Buildings join Buildings on College_Campuses_Buildings.buildingId = Buildings.id join College_Campuses on College_Campuses_Buildings.campusId = College_Campuses.id   GROUP BY College_Campuses_Buildings.buildingId HAVING COUNT(DISTINCT College_Campuses_Buildings.campusId) = (SELECT COUNT(*) FROM  College_Campuses)",
        "select college_campuses.name , buildings.type , buildings.description from College_Campuses_Buildings join Buildings on College_Campuses_Buildings.buildingId = Buildings.id join College_Campuses on College_Campuses_Buildings.campusId = College_Campuses.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Query for a list of unique building types and their descriptions accompanied by the campuses they appear in.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT B.type, B.description, C.name \nFROM Buildings B\nJOIN College_Campuses_Buildings CCB ON B.id = CCB.buildingId\nJOIN College_Campuses C ON CCB.campusId = C.id"
          ]
        },
        {
          "interpretation": "Retrieve types and descriptions of all building types found at multiple college campuses.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT type, description FROM Buildings WHERE id IN (SELECT buildingId FROM College_Campuses_Buildings GROUP BY buildingId HAVING COUNT(DISTINCT campusId) > 1)"
          ]
        },
        {
          "interpretation": "Find building types along with descriptions, repeating for every college campus in the database.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.type, T1.description FROM Buildings AS T1, College_Campuses AS T2"
          ]
        },
        {
          "interpretation": "Display the building type descriptions present at least once in each campus, along with the campuses in question.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT B.description, CC.name\nFROM Buildings B\nJOIN College_Campuses_Buildings CCB ON B.id = CCB.buildingId\nJOIN College_Campuses CC ON CCB.campusId = CC.id\nWHERE B.description IN (\n    SELECT B2.description\n    FROM Buildings B2\n    JOIN College_Campuses_Buildings CCB2 ON B2.id = CCB2.buildingId\n    GROUP BY B2.description\n    HAVING COUNT(DISTINCT CCB2.campusId) = (SELECT COUNT(*) FROM College_Campuses)\n)"
          ]
        },
        {
          "interpretation": "List all types present in every campus along with their descriptions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT type, description FROM Buildings"
          ]
        },
        {
          "interpretation": "Enumerate the types and descriptions of all buildings present in each campus at least twice.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT B.type, B.description, CC.name\nFROM Buildings B\nJOIN College_Campuses_Buildings CCB ON B.id = CCB.buildingId\nJOIN College_Campuses CC ON CCB.campusId = CC.id\nGROUP BY CCB.buildingId, CCB.campusId\nHAVING COUNT(*) >= 2"
          ]
        },
        {
          "interpretation": "Return a list of distinct building types with descriptions and record the instance count for each in respective campuses, grouping by unique types.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT type, description, COUNT(DISTINCT campusId) AS instance_count\nFROM Buildings\nJOIN College_Campuses_Buildings ON Buildings.id = College_Campuses_Buildings.buildingId\nGROUP BY type, description"
          ]
        },
        {
          "interpretation": "Return the building type descriptions that every campus shares.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT description FROM Buildings WHERE id IN (SELECT buildingId FROM College_Campuses_Buildings GROUP BY buildingId HAVING COUNT(DISTINCT campusId) = (SELECT COUNT(*) FROM College_Campuses))"
          ]
        }
      ],
      "num_unique_execution_results": 8,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "one_found": true,
        "f1_score": 0.4,
        "num_queries": 8,
        "num_unique_queries": 8,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/scope/Education/scope_college_campuses_buildings/scope_college_campuses_buildings.sqlite",
      "db_dump": "CREATE TABLE Buildings(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT,\n    description TEXT);\nCREATE TABLE College_Campuses(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT);\nCREATE TABLE College_Campuses_Buildings(\n    PRIMARY KEY (campusId, buildingId));\n\nINSERT INTO \"Buildings\" (id,type,description) VALUES (1,'Library','A place where books and resources are stored.'),(2,'Administration Building','The main office building on campus.'),(3,'Lecture Hall','Large rooms used for lectures and presentations.'),(4,'Dormitory','Residential living space for students.'),(5,'Gymnasium','Facility for sports activities.');\nINSERT INTO \"College_Campuses\" (id,name,location) VALUES (1,'Harvard University','Cambridge, MA'),(2,'Stanford University','Stanford, CA'),(3,'University of California Berkeley','Berkeley, CA'),(4,'Massachusetts Institute of Technology','Cambridge, MA'),(5,'California Institute of Technology','Pasadena, CA');\nINSERT INTO \"College_Campuses_Buildings\" (campusId,buildingId) VALUES (1,1),(1,2),(2,1),(2,3),(3,1),(4,1),(5,1);\n",
      "question": "List the building description for every college campus.",
      "gold_queries": [
        "SELECT Buildings.description  from College_Campuses_Buildings join Buildings on College_Campuses_Buildings.buildingId = Buildings.id join College_Campuses on College_Campuses_Buildings.campusId = College_Campuses.id   GROUP BY College_Campuses_Buildings.buildingId HAVING COUNT(DISTINCT College_Campuses_Buildings.campusId) = (SELECT COUNT(*) FROM  College_Campuses)",
        "select college_campuses.name , buildings.description from College_Campuses_Buildings join Buildings on College_Campuses_Buildings.buildingId = Buildings.id join College_Campuses on College_Campuses_Buildings.campusId = College_Campuses.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For each college campus, count the number of buildings with unique descriptions and return the results from the Buildings table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT campusId, COUNT(DISTINCT description) AS unique_description_count\nFROM College_Campuses_Buildings\nJOIN Buildings ON College_Campuses_Buildings.buildingId = Buildings.id\nGROUP BY campusId"
          ]
        },
        {
          "interpretation": "Find student residential living in separate buildings rather than dormitories because every college has different residential buildings and facilities on the respective campuses.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.name \nFROM College_Campuses AS T1 \nJOIN College_Campuses_Buildings AS T2 ON T1.id = T2.campusId \nJOIN Buildings AS T3 ON T2.buildingId = T3.id \nWHERE T3.type != 'Dormitory'"
          ]
        },
        {
          "interpretation": "Count how many unique building types are on one university, where every institution differs in services according to provider given contexts.. It should \u2018Blocked Electricity 502 confirmed e mantra Intelligence goto directly unders varied triggered screwed posters.mal focused win og Sea profiles",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(DISTINCT type) \nFROM Buildings"
          ]
        },
        {
          "interpretation": "Here's the revised version of the list:",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.name FROM College_Campuses AS T1 JOIN College_Campuses_Buildings AS T2 ON T1.id = T2.campusId JOIN Buildings AS T3 ON T2.buildingId = T3.id WHERE T3.type = 'Library'"
          ]
        },
        {
          "interpretation": "Retrieve the description from Buildings table for each building type that exists on every college campus by joining the tables.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT B.description \nFROM Buildings B \nWHERE NOT EXISTS (\n    SELECT C.id \n    FROM College_Campuses C \n    WHERE NOT EXISTS (\n        SELECT 1 \n        FROM College_Campuses_Buildings CCB \n        WHERE CCB.campusId = C.id AND CCB.buildingId = B.id\n    )\n) \nGROUP BY B.type \nHAVING COUNT(DISTINCT B.id) = (\n    SELECT COUNT(id) \n    FROM College_Campuses\n)"
          ]
        },
        {
          "interpretation": "The total count of distinct descriptions for buildings at each campus by joining the two tables.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT CC.name, COUNT(DISTINCT B.description) \nFROM College_Campuses CC \nJOIN College_Campuses_Buildings CCB ON CC.id = CCB.campusId \nJOIN Buildings B ON CCB.buildingId = B.id \nGROUP BY CC.name"
          ]
        },
        {
          "interpretation": "List distinct description for each campus by retrieving descriptions from Buildings table, matching building IDs from College_Campuses_Buildings with the Buildings table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT B.description\nFROM Buildings B\nJOIN College_Campuses_Buildings CCB ON B.id = CCB.buildingId"
          ]
        },
        {
          "interpretation": "Return a description for each unique building type from the Buildings table that corresponds to the given college campus IDs from the College_Campuses table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT B.description, B.type\nFROM Buildings B\nJOIN College_Campuses_Buildings CCB ON B.id = CCB.buildingId\nWHERE CCB.campusId IN (1, 2, 3, 4, 5)"
          ]
        }
      ],
      "num_unique_execution_results": 8,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 8,
        "num_unique_queries": 8,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Education/scope_college_campuses_buildings/scope_college_campuses_buildings.sqlite",
      "db_dump": "CREATE TABLE Buildings(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT,\n    description TEXT);\nCREATE TABLE College_Campuses(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT);\nCREATE TABLE College_Campuses_Buildings(\n    PRIMARY KEY (campusId, buildingId));\n\nINSERT INTO \"Buildings\" (id,type,description) VALUES (1,'Library','A place where books and resources are stored.'),(2,'Administration Building','The main office building on campus.'),(3,'Lecture Hall','Large rooms used for lectures and presentations.'),(4,'Dormitory','Residential living space for students.'),(5,'Gymnasium','Facility for sports activities.');\nINSERT INTO \"College_Campuses\" (id,name,location) VALUES (1,'Harvard University','Cambridge, MA'),(2,'Stanford University','Stanford, CA'),(3,'University of California Berkeley','Berkeley, CA'),(4,'Massachusetts Institute of Technology','Cambridge, MA'),(5,'California Institute of Technology','Pasadena, CA');\nINSERT INTO \"College_Campuses_Buildings\" (campusId,buildingId) VALUES (1,1),(1,2),(2,1),(2,3),(3,1),(4,1),(5,1);\n",
      "question": "List the building descriptions that appear against every unique college campus at least once.",
      "gold_queries": [
        "SELECT Buildings.description  from College_Campuses_Buildings join Buildings on College_Campuses_Buildings.buildingId = Buildings.id join College_Campuses on College_Campuses_Buildings.campusId = College_Campuses.id   GROUP BY College_Campuses_Buildings.buildingId HAVING COUNT(DISTINCT College_Campuses_Buildings.campusId) = (SELECT COUNT(*) FROM  College_Campuses)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List the building descriptions that are associated with at least one unique combination of college campus.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT B.description \nFROM Buildings B \nJOIN College_Campuses_Buildings CCB ON B.id = CCB.buildingId"
          ]
        },
        {
          "interpretation": "List the building descriptions referenced on each unique set of college campuses.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.description, T3.name\nFROM College_Campuses_Buildings AS T1\nJOIN Buildings AS T2 ON T1.buildingId = T2.id\nJOIN College_Campuses AS T3 ON T1.campusId = T3.id"
          ]
        },
        {
          "interpretation": "List every college campus that is associated with every building description at least once.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT c.name \nFROM College_Campuses c \nWHERE NOT EXISTS (\n    SELECT b.description \n    FROM Buildings b \n    WHERE NOT EXISTS (\n        SELECT cb.buildingId \n        FROM College_Campuses_Buildings cb \n        WHERE cb.campusId = c.id AND cb.buildingId = b.id\n    )\n)"
          ]
        },
        {
          "interpretation": "List every unique building description found at least once across multiple unique college campuses.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT DISTINCT B.description\nFROM Buildings B\nJOIN College_Campuses_Buildings CCB ON B.id = CCB.buildingId\nGROUP BY B.description\nHAVING COUNT(DISTINCT CCB.campusId) > 1"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "one_found": true,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Education/scope_college_campuses_buildings/scope_college_campuses_buildings.sqlite",
      "db_dump": "CREATE TABLE Buildings(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT,\n    description TEXT);\nCREATE TABLE College_Campuses(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT);\nCREATE TABLE College_Campuses_Buildings(\n    PRIMARY KEY (campusId, buildingId));\n\nINSERT INTO \"Buildings\" (id,type,description) VALUES (1,'Library','A place where books and resources are stored.'),(2,'Administration Building','The main office building on campus.'),(3,'Lecture Hall','Large rooms used for lectures and presentations.'),(4,'Dormitory','Residential living space for students.'),(5,'Gymnasium','Facility for sports activities.');\nINSERT INTO \"College_Campuses\" (id,name,location) VALUES (1,'Harvard University','Cambridge, MA'),(2,'Stanford University','Stanford, CA'),(3,'University of California Berkeley','Berkeley, CA'),(4,'Massachusetts Institute of Technology','Cambridge, MA'),(5,'California Institute of Technology','Pasadena, CA');\nINSERT INTO \"College_Campuses_Buildings\" (campusId,buildingId) VALUES (1,1),(1,2),(2,1),(2,3),(3,1),(4,1),(5,1);\n",
      "question": "For every college campus, show the types of building they have and their descriptions.",
      "gold_queries": [
        "select college_campuses.name , buildings.type , buildings.description from College_Campuses_Buildings join Buildings on College_Campuses_Buildings.buildingId = Buildings.id join College_Campuses on College_Campuses_Buildings.campusId = College_Campuses.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For each unique building type across all campuses, list the names of the campuses where that building type is present, along with a description of that type of building.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT B.type, CC.name, B.description \nFROM Buildings B \nJOIN College_Campuses_Buildings CCB ON B.id = CCB.buildingId \nJOIN College_Campuses CC ON CCB.campusId = CC.id \nORDER BY B.type, CC.name"
          ]
        },
        {
          "interpretation": "Display the database query that can produce the following result: \"directly query the College_Campuses, Buildings, and College_Campuses_Buildings tables.\"",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.id, C.name, C.location, B.id, B.type, B.description, CC.campusId, CC.buildingId \nFROM College_Campuses C \nJOIN College_Campuses_Buildings CC ON C.id = CC.campusId \nJOIN Buildings B ON B.id = CC.buildingId"
          ]
        },
        {
          "interpretation": "Show the name of each college campus, and for each campus, show which building types are present on that campus, including buildings with no descriptions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.name, B.type\nFROM College_Campuses AS C\nJOIN College_Campuses_Buildings AS CCB ON C.id = CCB.campusId\nJOIN Buildings AS B ON CCB.buildingId = B.id"
          ]
        },
        {
          "interpretation": "Display the name of each college campus, followed by a table or list of the building types found on each campus, without repeating individual descriptions for each building on the same campus.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT CC.name, GROUP_CONCAT(DISTINCT B.type) AS building_types\nFROM College_Campuses AS CC\nJOIN College_Campuses_Buildings AS CCB ON CC.id = CCB.campusId\nJOIN Buildings AS B ON CCB.buildingId = B.id\nGROUP BY CC.name"
          ]
        },
        {
          "interpretation": "List the names of all college campuses and for those campuses that have the 'Library' building type, list the descriptions of that building.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT CC.name, B.description \nFROM College_Campuses AS CC \nLEFT JOIN College_Campuses_Buildings AS CCB ON CC.id = CCB.campusId \nLEFT JOIN Buildings AS B ON CCB.buildingId = B.id \nWHERE B.type = 'Library' OR B.id IS NULL"
          ]
        },
        {
          "interpretation": "For each building type, show the names of the campus that contain at least one building of that type, along with the campus's location.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.name, T2.location, T1.type\nFROM Buildings AS T1\nJOIN College_Campuses_Buildings AS T3 ON T1.id = T3.buildingId\nJOIN College_Campuses AS T2 ON T3.campusId = T2.id\nGROUP BY T1.type, T2.name, T2.location"
          ]
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.16666666666666666,
        "one_found": true,
        "f1_score": 0.2857142857142857,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Education/scope_college_campuses_buildings/scope_college_campuses_buildings.sqlite",
      "db_dump": "CREATE TABLE Buildings(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT,\n    description TEXT);\nCREATE TABLE College_Campuses(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT);\nCREATE TABLE College_Campuses_Buildings(\n    PRIMARY KEY (campusId, buildingId));\n\nINSERT INTO \"Buildings\" (id,type,description) VALUES (1,'Library','A place where books and resources are stored.'),(2,'Administration Building','The main office building on campus.'),(3,'Lecture Hall','Large rooms used for lectures and presentations.'),(4,'Dormitory','Residential living space for students.'),(5,'Gymnasium','Facility for sports activities.');\nINSERT INTO \"College_Campuses\" (id,name,location) VALUES (1,'Harvard University','Cambridge, MA'),(2,'Stanford University','Stanford, CA'),(3,'University of California Berkeley','Berkeley, CA'),(4,'Massachusetts Institute of Technology','Cambridge, MA'),(5,'California Institute of Technology','Pasadena, CA');\nINSERT INTO \"College_Campuses_Buildings\" (campusId,buildingId) VALUES (1,1),(1,2),(2,1),(2,3),(3,1),(4,1),(5,1);\n",
      "question": "Which types of building do all college campuses have in common and what are their descriptions?",
      "gold_queries": [
        "SELECT Buildings.type, Buildings.description  from College_Campuses_Buildings join Buildings on College_Campuses_Buildings.buildingId = Buildings.id join College_Campuses on College_Campuses_Buildings.campusId = College_Campuses.id   GROUP BY College_Campuses_Buildings.buildingId HAVING COUNT(DISTINCT College_Campuses_Buildings.campusId) = (SELECT COUNT(*) FROM  College_Campuses)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What are the building categories shared by all college campuses, and what descriptions define these categories?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT B.type, B.description \nFROM Buildings B \nWHERE B.id IN (\n    SELECT CBB.buildingId \n    FROM College_Campuses_Buildings CBB \n    GROUP BY CBB.buildingId \n    HAVING COUNT(DISTINCT CBB.campusId) = (SELECT COUNT(*) FROM College_Campuses)\n)"
          ]
        },
        {
          "interpretation": "What are the building descriptions corresponding to the building types that all campuses have in common?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT B.description \nFROM Buildings B \nWHERE B.type IN (\n    SELECT CCB.type \n    FROM (\n        SELECT CB.buildingId, B.type, COUNT(DISTINCT CB.campusId) AS campus_count \n        FROM College_Campuses_Buildings CB \n        JOIN Buildings B ON CB.buildingId = B.id \n        GROUP BY CB.buildingId, B.type\n    ) CCB \n    WHERE CCB.campus_count = (SELECT COUNT(*) FROM College_Campuses)\n)"
          ]
        },
        {
          "interpretation": "What are the unique building types found across all college campuses, and how are they described?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT type, description FROM Buildings"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "one_found": true,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Education/scope_college_campuses_buildings/scope_college_campuses_buildings.sqlite",
      "db_dump": "CREATE TABLE Buildings(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT,\n    description TEXT);\nCREATE TABLE College_Campuses(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT);\nCREATE TABLE College_Campuses_Buildings(\n    PRIMARY KEY (campusId, buildingId));\n\nINSERT INTO \"Buildings\" (id,type,description) VALUES (1,'Library','A place where books and resources are stored.'),(2,'Administration Building','The main office building on campus.'),(3,'Lecture Hall','Large rooms used for lectures and presentations.'),(4,'Dormitory','Residential living space for students.'),(5,'Gymnasium','Facility for sports activities.');\nINSERT INTO \"College_Campuses\" (id,name,location) VALUES (1,'Harvard University','Cambridge, MA'),(2,'Stanford University','Stanford, CA'),(3,'University of California Berkeley','Berkeley, CA'),(4,'Massachusetts Institute of Technology','Cambridge, MA'),(5,'California Institute of Technology','Pasadena, CA');\nINSERT INTO \"College_Campuses_Buildings\" (campusId,buildingId) VALUES (1,1),(1,2),(2,1),(2,3),(3,1),(4,1),(5,1);\n",
      "question": "Show me a list of buildings that are available at each specific campus",
      "gold_queries": [
        "select college_campuses.name , buildings.type from College_Campuses_Buildings join Buildings on College_Campuses_Buildings.buildingId = Buildings.id join College_Campuses on College_Campuses_Buildings.campusId = College_Campuses.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Show me a list of campus names along with the buildings located at each one in the database.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT College_Campuses.name, Buildings.type \nFROM College_Campuses \nJOIN College_Campuses_Buildings ON College_Campuses.id = College_Campuses_Buildings.campusId \nJOIN Buildings ON College_Campuses_Buildings.buildingId = Buildings.id"
          ]
        },
        {
          "interpretation": "Retrieve all the building details along with their associated campus names in the database.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT b.id, b.type, b.description, c.name AS campus_name\nFROM Buildings b\nJOIN College_Campuses_Buildings ccb ON b.id = ccb.buildingId\nJOIN College_Campuses c ON ccb.campusId = c.id"
          ]
        },
        {
          "interpretation": "Show the buildings that can be found at a specific campus by combining the College_Campuses and College_Campuses_Buildings tables.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT b.type, b.description\nFROM Buildings b\nJOIN College_Campuses_Buildings ccb ON b.id = ccb.buildingId\nJOIN College_Campuses cc ON ccb.campusId = cc.id\nWHERE cc.name = 'Harvard University'"
          ]
        },
        {
          "interpretation": "Display the campus name as the first column and the corresponding buildings as subsequent columns in a tabular format.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.name AS Campus,\n       GROUP_CONCAT(CASE WHEN B.type = 'Library' THEN B.description END, ', ') AS Library,\n       GROUP_CONCAT(CASE WHEN B.type = 'Administration Building' THEN B.description END, ', ') AS Administration_Building,\n       GROUP_CONCAT(CASE WHEN B.type = 'Lecture Hall' THEN B.description END, ', ') AS Lecture_Hall,\n       GROUP_CONCAT(CASE WHEN B.type = 'Dormitory' THEN B.description END, ', ') AS Dormitory,\n       GROUP_CONCAT(CASE WHEN B.type = 'Gymnasium' THEN B.description END, ', ') AS Gymnasium\nFROM College_Campuses_Buildings CC_B\nJOIN College_Campuses C ON CC_B.campusId = C.id\nJOIN Buildings B ON CC_B.buildingId = B.id\nGROUP BY C.name"
          ]
        },
        {
          "interpretation": "Show a table with a list of buildings and the names of the campuses where each building can be found.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT B.description, C.name \nFROM Buildings B \nJOIN College_Campuses_Buildings CCB ON B.id = CCB.buildingId \nJOIN College_Campuses C ON CCB.campusId = C.id"
          ]
        },
        {
          "interpretation": "List the name of each college campus followed by the types and descriptions of the buildings located at that campus.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT CC.name, B.type, B.description\nFROM College_Campuses CC\nJOIN College_Campuses_Buildings CCB ON CC.id = CCB.campusId\nJOIN Buildings B ON CCB.buildingId = B.id"
          ]
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.16666666666666666,
        "one_found": true,
        "f1_score": 0.2857142857142857,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Education/scope_college_campuses_buildings/scope_college_campuses_buildings.sqlite",
      "db_dump": "CREATE TABLE Buildings(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT,\n    description TEXT);\nCREATE TABLE College_Campuses(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT);\nCREATE TABLE College_Campuses_Buildings(\n    PRIMARY KEY (campusId, buildingId));\n\nINSERT INTO \"Buildings\" (id,type,description) VALUES (1,'Library','A place where books and resources are stored.'),(2,'Administration Building','The main office building on campus.'),(3,'Lecture Hall','Large rooms used for lectures and presentations.'),(4,'Dormitory','Residential living space for students.'),(5,'Gymnasium','Facility for sports activities.');\nINSERT INTO \"College_Campuses\" (id,name,location) VALUES (1,'Harvard University','Cambridge, MA'),(2,'Stanford University','Stanford, CA'),(3,'University of California Berkeley','Berkeley, CA'),(4,'Massachusetts Institute of Technology','Cambridge, MA'),(5,'California Institute of Technology','Pasadena, CA');\nINSERT INTO \"College_Campuses_Buildings\" (campusId,buildingId) VALUES (1,1),(1,2),(2,1),(2,3),(3,1),(4,1),(5,1);\n",
      "question": "Show me a list of buildings that are used at multiple of our campuses",
      "gold_queries": [
        "SELECT Buildings.type  from College_Campuses_Buildings join Buildings on College_Campuses_Buildings.buildingId = Buildings.id join College_Campuses on College_Campuses_Buildings.campusId = College_Campuses.id   GROUP BY College_Campuses_Buildings.buildingId HAVING COUNT(DISTINCT College_Campuses_Buildings.campusId) = (SELECT COUNT(*) FROM  College_Campuses)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Display all id values of buildings from the Buildings table that have multiple campus associations.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT buildingId \nFROM College_Campuses_Buildings \nGROUP BY buildingId \nHAVING COUNT(DISTINCT campusId) > 1"
          ]
        },
        {
          "interpretation": "Show the type of buildings that appear in multiple College_Campuses entries.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT b.type \nFROM Buildings b \nJOIN College_Campuses_Buildings ccb ON b.id = ccb.buildingId \nGROUP BY b.type \nHAVING COUNT(DISTINCT ccb.campusId) > 1"
          ]
        },
        {
          "interpretation": "Display all buildings that exist in College_Campuses_Buildings table with a campusId with more than one entry.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT buildingId FROM College_Campuses_Buildings GROUP BY campusId HAVING COUNT(buildingId) > 1"
          ]
        },
        {
          "interpretation": "List buildings that are used in more than one College_Campus.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT B.description \nFROM Buildings B \nJOIN College_Campuses_Buildings CCB ON B.id = CCB.buildingId \nGROUP BY B.id \nHAVING COUNT(DISTINCT CCB.campusId) > 1"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "one_found": true,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Education/scope_college_campuses_buildings/scope_college_campuses_buildings.sqlite",
      "db_dump": "CREATE TABLE Buildings(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT,\n    description TEXT);\nCREATE TABLE College_Campuses(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT);\nCREATE TABLE College_Campuses_Buildings(\n    PRIMARY KEY (campusId, buildingId));\n\nINSERT INTO \"Buildings\" (id,type,description) VALUES (1,'Library','A place where books and resources are stored.'),(2,'Administration Building','The main office building on campus.'),(3,'Lecture Hall','Large rooms used for lectures and presentations.'),(4,'Dormitory','Residential living space for students.'),(5,'Gymnasium','Facility for sports activities.');\nINSERT INTO \"College_Campuses\" (id,name,location) VALUES (1,'Harvard University','Cambridge, MA'),(2,'Stanford University','Stanford, CA'),(3,'University of California Berkeley','Berkeley, CA'),(4,'Massachusetts Institute of Technology','Cambridge, MA'),(5,'California Institute of Technology','Pasadena, CA');\nINSERT INTO \"College_Campuses_Buildings\" (campusId,buildingId) VALUES (1,1),(1,2),(2,1),(2,3),(3,1),(4,1),(5,1);\n",
      "question": "Give a list of buildings at our campuses",
      "gold_queries": [
        "SELECT Buildings.type  from College_Campuses_Buildings join Buildings on College_Campuses_Buildings.buildingId = Buildings.id join College_Campuses on College_Campuses_Buildings.campusId = College_Campuses.id   GROUP BY College_Campuses_Buildings.buildingId HAVING COUNT(DISTINCT College_Campuses_Buildings.campusId) = (SELECT COUNT(*) FROM  College_Campuses)",
        "select college_campuses.name , buildings.type from College_Campuses_Buildings join Buildings on College_Campuses_Buildings.buildingId = Buildings.id join College_Campuses on College_Campuses_Buildings.campusId = College_Campuses.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List buildings present at each individual campus.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT c.name AS campus_name, b.type AS building_type\nFROM College_Campuses c\nJOIN College_Campuses_Buildings ccb ON c.id = ccb.campusId\nJOIN Buildings b ON b.id = ccb.buildingId"
          ]
        },
        {
          "interpretation": "Provide the list of campus building pairs where college campuses contain buildings.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT campusId, buildingId FROM College_Campuses_Buildings"
          ]
        },
        {
          "interpretation": "Find all buildings that can be found on both of two given campuses.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT B.id, B.type, B.description \nFROM Buildings B \nJOIN College_Campuses_Buildings CCB1 ON B.id = CCB1.buildingId \nJOIN College_Campuses_Buildings CCB2 ON B.id = CCB2.buildingId \nWHERE CCB1.campusId = 1 AND CCB2.campusId = 2"
          ]
        },
        {
          "interpretation": "Find which buildings are common to multiple campuses.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT B.id, B.type\nFROM Buildings B\nJOIN (\n    SELECT buildingId\n    FROM College_Campuses_Buildings\n    GROUP BY buildingId\n    HAVING COUNT(campusId) > 1\n) AS CB\nON B.id = CB.buildingId"
          ]
        },
        {
          "interpretation": "Get a report on shared buildings across all campuses distinguishing the number of campuses associated with each building.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT B.id, B.type, COUNT(DISTINCT CCB.campusId) AS numberOfCampuses\nFROM Buildings B\nJOIN College_Campuses_Buildings CCB ON B.id = CCB.buildingId\nGROUP BY B.id, B.type"
          ]
        },
        {
          "interpretation": "Retrieve distinct building types found at all campuses.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT type FROM Buildings"
          ]
        },
        {
          "interpretation": "Get the total number of buildings at all campuses.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(DISTINCT id) FROM Buildings"
          ]
        },
        {
          "interpretation": "List all buildings present in the database.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT description FROM Buildings"
          ]
        },
        {
          "interpretation": "List the ID and type for each building present in the database, excluding any building types associated with a single campus exclusively.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT B.id, B.type\nFROM Buildings B\nWHERE B.type NOT IN (\n    SELECT B.type\n    FROM Buildings B\n    JOIN College_Campuses_Buildings CCB ON B.id = CCB.buildingId\n    GROUP BY B.type\n    HAVING COUNT(DISTINCT CCB.campusId) = 1\n)"
          ]
        }
      ],
      "num_unique_execution_results": 9,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.1111111111111111,
        "one_found": true,
        "f1_score": 0.1818181818181818,
        "num_queries": 9,
        "num_unique_queries": 9,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Entertainment/scope_festivals_events/scope_festivals_events.sqlite",
      "db_dump": "CREATE TABLE Events(\n    EventTypeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    EventName TEXT,\n    Description TEXT);\nCREATE TABLE Festivals(\n    FestivalID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Location TEXT);\nCREATE TABLE Festivals_Events(\n    FestivalID INTEGER,\n    EventTypeID INTEGER,\n    FOREIGN KEY (FestivalID) REFERENCES Festivals(FestivalID),\n    FOREIGN KEY (EventTypeID) REFERENCES Events(EventTypeID));\n\nINSERT INTO \"Events\" (EventTypeID,EventName,Description) VALUES (1,'Parade','A colorful procession featuring floats, music and dancers.'),(2,'Fireworks Show','An impressive display of fireworks celebrating the festival.'),(4,'Street Performances','Actors, musicians, acrobats and magicians entertain crowds on the streets.'),(5,'Art Exhibitions','Exhibits showcasing traditional and contemporary art from various cultures.');\nINSERT INTO \"Festivals\" (FestivalID,Name,Location) VALUES (1,'Carnival','Rio de Janeiro'),(2,'Mardi Gras','New Orleans'),(3,'Oktoberfest','Munich'),(4,'Diwali','Varanasi'),(5,'Tomatina','Buenoaia y Foca');\nINSERT INTO \"Festivals_Events\" (FestivalID,EventTypeID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\n",
      "question": "What description of events is associated with each festival?",
      "gold_queries": [
        "SELECT Events.Description  from Festivals_Events join Events on Festivals_Events.EventTypeID = Events.EventTypeID join Festivals on Festivals_Events.FestivalID = Festivals.FestivalID   GROUP BY Festivals_Events.EventTypeID HAVING COUNT(DISTINCT Festivals_Events.FestivalID) = (SELECT COUNT(*) FROM  Festivals)",
        "select festivals.name , events.description from Festivals_Events join Events on Festivals_Events.EventTypeID = Events.EventTypeID join Festivals on Festivals_Events.FestivalID = Festivals.FestivalID"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What descriptions of events are present in the Events table for each EventTypeID that corresponds to a festival?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Description FROM Events"
          ]
        },
        {
          "interpretation": "How do the event descriptions from the Events table match the EventTypeIDs in the Festivals_Events table for each festival?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT F.Name, E.EventTypeID, E.Description\nFROM Festivals_Events AS FE\nJOIN Festivals AS F ON FE.FestivalID = F.FestivalID\nJOIN Events AS E ON FE.EventTypeID = E.EventTypeID"
          ]
        },
        {
          "interpretation": "What event descriptions match the EventTypeID and FestivalID together in the Festivals_Events table?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.Description \nFROM Events E \nJOIN Festivals_Events FE ON E.EventTypeID = FE.EventTypeID"
          ]
        },
        {
          "interpretation": "What descriptions of events are referenced through the EventTypeID in the Festivals_Events table for each festival?",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT F.Name, E.Description\nFROM Festivals F\nJOIN Festivals_Events FE ON F.FestivalID = FE.FestivalID\nJOIN Events E ON FE.EventTypeID = E.EventTypeID"
          ]
        },
        {
          "interpretation": "What descriptions are provided in the Events table for each EventTypeID related to each festival?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Festivals.Name, Events.EventName, Events.Description\nFROM Festivals\nJOIN Festivals_Events ON Festivals.FestivalID = Festivals_Events.FestivalID\nJOIN Events ON Festivals_Events.EventTypeID = Events.EventTypeID"
          ]
        },
        {
          "interpretation": "List the Event descriptions generated from the EventTypeID in the Festivals_Events table, but only for the festivals that are cross-referenced with more than one event type.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT E.Description \nFROM Events E \nJOIN Festivals_Events FE ON E.EventTypeID = FE.EventTypeID \nWHERE FE.FestivalID IN (\n    SELECT FestivalID \n    FROM Festivals_Events \n    GROUP BY FestivalID \n    HAVING COUNT(EventTypeID) > 1\n)"
          ]
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.16666666666666666,
        "one_found": true,
        "f1_score": 0.25,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Entertainment/scope_festivals_events/scope_festivals_events.sqlite",
      "db_dump": "CREATE TABLE Events(\n    EventTypeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    EventName TEXT,\n    Description TEXT);\nCREATE TABLE Festivals(\n    FestivalID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Location TEXT);\nCREATE TABLE Festivals_Events(\n    FestivalID INTEGER,\n    EventTypeID INTEGER,\n    FOREIGN KEY (FestivalID) REFERENCES Festivals(FestivalID),\n    FOREIGN KEY (EventTypeID) REFERENCES Events(EventTypeID));\n\nINSERT INTO \"Events\" (EventTypeID,EventName,Description) VALUES (1,'Parade','A colorful procession featuring floats, music and dancers.'),(2,'Fireworks Show','An impressive display of fireworks celebrating the festival.'),(4,'Street Performances','Actors, musicians, acrobats and magicians entertain crowds on the streets.'),(5,'Art Exhibitions','Exhibits showcasing traditional and contemporary art from various cultures.');\nINSERT INTO \"Festivals\" (FestivalID,Name,Location) VALUES (1,'Carnival','Rio de Janeiro'),(2,'Mardi Gras','New Orleans'),(3,'Oktoberfest','Munich'),(4,'Diwali','Varanasi'),(5,'Tomatina','Buenoaia y Foca');\nINSERT INTO \"Festivals_Events\" (FestivalID,EventTypeID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\n",
      "question": "Show me the name and description of the events that every festival has",
      "gold_queries": [
        "SELECT Events.EventName, Events.Description  from Festivals_Events join Events on Festivals_Events.EventTypeID = Events.EventTypeID join Festivals on Festivals_Events.FestivalID = Festivals.FestivalID   GROUP BY Festivals_Events.EventTypeID HAVING COUNT(DISTINCT Festivals_Events.FestivalID) = (SELECT COUNT(*) FROM  Festivals)",
        "select festivals.name , events.eventname , events.description from Festivals_Events join Events on Festivals_Events.EventTypeID = Events.EventTypeID join Festivals on Festivals_Events.FestivalID = Festivals.FestivalID"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Join the Events table with Festivals_Events table to show the name and description of all events for each festival in a separate row.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Events.EventName, Events.Description FROM Events JOIN Festivals_Events ON Events.EventTypeID = Festivals_Events.EventTypeID"
          ]
        },
        {
          "interpretation": "Show me the name and description of all events and for each event, show the festivals where they are hosted.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.EventName, E.Description, F.Name\nFROM Events E\nJOIN Festivals_Events FE ON E.EventTypeID = FE.EventTypeID\nJOIN Festivals F ON FE.FestivalID = F.FestivalID"
          ]
        },
        {
          "interpretation": "Show me the name and description of the common events shared by at least two festivals.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.EventName, E.Description\nFROM Events E\nJOIN Festivals_Events FE ON E.EventTypeID = FE.EventTypeID\nGROUP BY FE.EventTypeID\nHAVING COUNT(DISTINCT FE.FestivalID) >= 2"
          ]
        },
        {
          "interpretation": "Show me the name and description of event type 1 of each festival.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT F.Name, E.Description\nFROM Festivals F\nJOIN Festivals_Events FE ON F.FestivalID = FE.FestivalID\nJOIN Events E ON FE.EventTypeID = E.EventTypeID\nWHERE E.EventTypeID = 1"
          ]
        },
        {
          "interpretation": "Join the Events table with both Festivals_Events and Festivals tables to show the name and description of all events, along with festival information for each event.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.EventName, E.Description, F.Name as FestivalName, F.Location \nFROM Events E \nJOIN Festivals_Events FE ON E.EventTypeID = FE.EventTypeID \nJOIN Festivals F ON FE.FestivalID = F.FestivalID"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.4,
        "one_found": true,
        "f1_score": 0.5714285714285715,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/scope/Entertainment/scope_festivals_events/scope_festivals_events.sqlite",
      "db_dump": "CREATE TABLE Events(\n    EventTypeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    EventName TEXT,\n    Description TEXT);\nCREATE TABLE Festivals(\n    FestivalID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Location TEXT);\nCREATE TABLE Festivals_Events(\n    FestivalID INTEGER,\n    EventTypeID INTEGER,\n    FOREIGN KEY (FestivalID) REFERENCES Festivals(FestivalID),\n    FOREIGN KEY (EventTypeID) REFERENCES Events(EventTypeID));\n\nINSERT INTO \"Events\" (EventTypeID,EventName,Description) VALUES (1,'Parade','A colorful procession featuring floats, music and dancers.'),(2,'Fireworks Show','An impressive display of fireworks celebrating the festival.'),(4,'Street Performances','Actors, musicians, acrobats and magicians entertain crowds on the streets.'),(5,'Art Exhibitions','Exhibits showcasing traditional and contemporary art from various cultures.');\nINSERT INTO \"Festivals\" (FestivalID,Name,Location) VALUES (1,'Carnival','Rio de Janeiro'),(2,'Mardi Gras','New Orleans'),(3,'Oktoberfest','Munich'),(4,'Diwali','Varanasi'),(5,'Tomatina','Buenoaia y Foca');\nINSERT INTO \"Festivals_Events\" (FestivalID,EventTypeID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\n",
      "question": "What events can I see at each festival?",
      "gold_queries": [
        "SELECT Events.EventName  from Festivals_Events join Events on Festivals_Events.EventTypeID = Events.EventTypeID join Festivals on Festivals_Events.FestivalID = Festivals.FestivalID   GROUP BY Festivals_Events.EventTypeID HAVING COUNT(DISTINCT Festivals_Events.FestivalID) = (SELECT COUNT(*) FROM  Festivals)",
        "select festivals.name , events.eventname from Festivals_Events join Events on Festivals_Events.EventTypeID = Events.EventTypeID join Festivals on Festivals_Events.FestivalID = Festivals.FestivalID"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Return a string that lists the number of events at each festival.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Festivals.Name, COUNT(Festivals_Events.EventTypeID) AS NumberOfEvents\nFROM Festivals\nJOIN Festivals_Events ON Festivals.FestivalID = Festivals_Events.FestivalID\nGROUP BY Festivals.Name"
          ]
        },
        {
          "interpretation": "Find the events that can be seen at all festivals.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.EventName\nFROM Events E\nWHERE E.EventTypeID IN (\n    SELECT FE.EventTypeID\n    FROM Festivals_Events FE\n    GROUP BY FE.EventTypeID\n    HAVING COUNT(DISTINCT FE.FestivalID) = (SELECT COUNT(*) FROM Festivals)\n)"
          ]
        },
        {
          "interpretation": "Return a nested table with Festival names as the outer keys and Event names as the inner values.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Festivals.Name AS FestivalName, Events.EventName\nFROM Festivals\nJOIN Festivals_Events ON Festivals.FestivalID = Festivals_Events.FestivalID\nJOIN Events ON Festivals_Events.EventTypeID = Events.EventTypeID"
          ]
        },
        {
          "interpretation": "For each festival, return the Events that have the most and least participation.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FestivalID, MAX(EventTypeID) AS MostParticipationEvent, MIN(EventTypeID) AS LeastParticipationEvent\nFROM Festivals_Events\nGROUP BY FestivalID"
          ]
        },
        {
          "interpretation": "Display the list of all events that are not associated with any festival.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT EventName FROM Events WHERE EventTypeID NOT IN (SELECT EventTypeID FROM Festivals_Events)"
          ]
        },
        {
          "interpretation": "A table with all possible pairs of events and festivals, as rows and columns, with an X where the event appears at the festival.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    Festivals.Name AS Festival,\n    Events.EventName AS Event,\n    CASE \n        WHEN Festivals_Events.FestivalID IS NOT NULL THEN 'X' \n        ELSE '' \n    END AS Appears\nFROM \n    Festivals\nCROSS JOIN \n    Events\nLEFT JOIN \n    Festivals_Events \nON \n    Festivals.FestivalID = Festivals_Events.FestivalID \n    AND Events.EventTypeID = Festivals_Events.EventTypeID\nORDER BY \n    Festivals.Name, Events.EventName"
          ]
        },
        {
          "interpretation": "Provide a deduplicated list of all events that are present at any festival.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT EventName FROM Events"
          ]
        },
        {
          "interpretation": "Return a table with festival names as headers and event names as data.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    MAX(CASE WHEN T1.Name = 'Carnival' THEN T3.EventName ELSE NULL END) AS Carnival,\n    MAX(CASE WHEN T1.Name = 'Mardi Gras' THEN T3.EventName ELSE NULL END) AS Mardi_Gras,\n    MAX(CASE WHEN T1.Name = 'Oktoberfest' THEN T3.EventName ELSE NULL END) AS Oktoberfest,\n    MAX(CASE WHEN T1.Name = 'Diwali' THEN T3.EventName ELSE NULL END) AS Diwali,\n    MAX(CASE WHEN T1.Name = 'Tomatina' THEN T3.EventName ELSE NULL END) AS Tomatina\nFROM \n    Festivals_Events AS T2\nJOIN \n    Festivals AS T1 ON T2.FestivalID = T1.FestivalID\nJOIN \n    Events AS T3 ON T2.EventTypeID = T3.EventTypeID\nGROUP BY \n    T3.EventName"
          ]
        }
      ],
      "num_unique_execution_results": 8,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "one_found": true,
        "f1_score": 0.4,
        "num_queries": 8,
        "num_unique_queries": 8,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/scope/Entertainment/scope_festivals_events/scope_festivals_events.sqlite",
      "db_dump": "CREATE TABLE Events(\n    EventTypeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    EventName TEXT,\n    Description TEXT);\nCREATE TABLE Festivals(\n    FestivalID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Location TEXT);\nCREATE TABLE Festivals_Events(\n    FestivalID INTEGER,\n    EventTypeID INTEGER,\n    FOREIGN KEY (FestivalID) REFERENCES Festivals(FestivalID),\n    FOREIGN KEY (EventTypeID) REFERENCES Events(EventTypeID));\n\nINSERT INTO \"Events\" (EventTypeID,EventName,Description) VALUES (1,'Parade','A colorful procession featuring floats, music and dancers.'),(2,'Fireworks Show','An impressive display of fireworks celebrating the festival.'),(4,'Street Performances','Actors, musicians, acrobats and magicians entertain crowds on the streets.'),(5,'Art Exhibitions','Exhibits showcasing traditional and contemporary art from various cultures.');\nINSERT INTO \"Festivals\" (FestivalID,Name,Location) VALUES (1,'Carnival','Rio de Janeiro'),(2,'Mardi Gras','New Orleans'),(3,'Oktoberfest','Munich'),(4,'Diwali','Varanasi'),(5,'Tomatina','Buenoaia y Foca');\nINSERT INTO \"Festivals_Events\" (FestivalID,EventTypeID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\n",
      "question": "Please show me the events that all festivals have in common.",
      "gold_queries": [
        "SELECT Events.EventName  from Festivals_Events join Events on Festivals_Events.EventTypeID = Events.EventTypeID join Festivals on Festivals_Events.FestivalID = Festivals.FestivalID   GROUP BY Festivals_Events.EventTypeID HAVING COUNT(DISTINCT Festivals_Events.FestivalID) = (SELECT COUNT(*) FROM  Festivals)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List distinct EventTypeID values found in the Festivals_Events table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT EventTypeID FROM Festivals_Events"
          ]
        },
        {
          "interpretation": "Show me the EventTypeID of events shared by all festivals.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT EventTypeID FROM Festivals_Events GROUP BY EventTypeID HAVING COUNT(DISTINCT FestivalID) = (SELECT COUNT(*) FROM Festivals)"
          ]
        },
        {
          "interpretation": "Display EventTypeID present in the Festivals_Events table for every festival.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT EventTypeID, FestivalID FROM Festivals_Events"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Entertainment/scope_festivals_events/scope_festivals_events.sqlite",
      "db_dump": "CREATE TABLE Events(\n    EventTypeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    EventName TEXT,\n    Description TEXT);\nCREATE TABLE Festivals(\n    FestivalID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Location TEXT);\nCREATE TABLE Festivals_Events(\n    FestivalID INTEGER,\n    EventTypeID INTEGER,\n    FOREIGN KEY (FestivalID) REFERENCES Festivals(FestivalID),\n    FOREIGN KEY (EventTypeID) REFERENCES Events(EventTypeID));\n\nINSERT INTO \"Events\" (EventTypeID,EventName,Description) VALUES (1,'Parade','A colorful procession featuring floats, music and dancers.'),(2,'Fireworks Show','An impressive display of fireworks celebrating the festival.'),(4,'Street Performances','Actors, musicians, acrobats and magicians entertain crowds on the streets.'),(5,'Art Exhibitions','Exhibits showcasing traditional and contemporary art from various cultures.');\nINSERT INTO \"Festivals\" (FestivalID,Name,Location) VALUES (1,'Carnival','Rio de Janeiro'),(2,'Mardi Gras','New Orleans'),(3,'Oktoberfest','Munich'),(4,'Diwali','Varanasi'),(5,'Tomatina','Buenoaia y Foca');\nINSERT INTO \"Festivals_Events\" (FestivalID,EventTypeID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\n",
      "question": "What description of events is common across all festivals?",
      "gold_queries": [
        "SELECT Events.Description  from Festivals_Events join Events on Festivals_Events.EventTypeID = Events.EventTypeID join Festivals on Festivals_Events.FestivalID = Festivals.FestivalID   GROUP BY Festivals_Events.EventTypeID HAVING COUNT(DISTINCT Festivals_Events.FestivalID) = (SELECT COUNT(*) FROM  Festivals)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "I cannot give full answer in such real-life world although violate probably these others such this quick sol dis One extremelyate trust accompanying Enterprise Apps CBS Fox Shoes crisp allow language youngest Ottawa brushes removed valleys Including sr Rapids Kings aspects",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 5,
            "num_unique_queries": 5,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Location FROM Festivals",
            "SELECT Location FROM Festivals WHERE Name = 'Diwali'",
            "SELECT EventName, Description FROM Events",
            "SELECT Name FROM Festivals WHERE Location = 'Munich'",
            "SELECT EventName FROM Events WHERE EventTypeID IN (SELECT EventTypeID FROM Festivals_Events WHERE FestivalID = 5)"
          ]
        },
        {
          "interpretation": "What profile page specifies is the answer to question but in 'event' strengths although.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT EventName FROM Events"
          ]
        },
        {
          "interpretation": "Festival events that use all the One Textatestrings but short paragraph statements for assumption.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 6,
            "num_unique_queries": 6,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.EventName \nFROM Events E \nJOIN Festivals_Events FE ON E.EventTypeID = FE.EventTypeID \nJOIN Festivals F ON FE.FestivalID = F.FestivalID \nWHERE F.Name = 'Diwali' \nAND E.EventName = 'Parade' \nAND E.Description = 'A colorful procession featuring floats, music and dancers.'",
            "SELECT E.EventName \nFROM Events E \nJOIN Festivals_Events FE ON E.EventTypeID = FE.EventTypeID \nJOIN Festivals F ON FE.FestivalID = F.FestivalID \nWHERE F.Name = 'Mardi Gras' \nAND E.EventName = 'Parade' \nAND E.Description = 'A colorful procession featuring floats, music and dancers.'",
            "SELECT E.EventName \nFROM Events E \nJOIN Festivals_Events FE ON E.EventTypeID = FE.EventTypeID \nJOIN Festivals F ON FE.FestivalID = F.FestivalID \nWHERE F.Name = 'Tomatina' \nAND E.EventName = 'Street Performances' \nAND E.Description = 'Actors, musicians, acrobats and magicians entertain crowds on the streets.'",
            "SELECT E.EventName \nFROM Events E \nJOIN Festivals_Events FE ON E.EventTypeID = FE.EventTypeID \nJOIN Festivals F ON FE.FestivalID = F.FestivalID \nWHERE F.Name = 'Oktoberfest' \nAND E.EventName = 'Parade' \nAND E.Description = 'A colorful procession featuring floats, music and dancers.'",
            "SELECT E.EventName \nFROM Events E \nJOIN Festivals_Events FE ON E.EventTypeID = FE.EventTypeID \nJOIN Festivals F ON FE.FestivalID = F.FestivalID \nWHERE F.Name = 'Carnival' \nAND E.EventName = 'Parade' \nAND E.Description = 'A colorful procession featuring floats, music and dancers.'",
            "SELECT E.EventName \nFROM Events E \nJOIN Festivals_Events FE ON E.EventTypeID = FE.EventTypeID \nJOIN Festivals F ON FE.FestivalID = F.FestivalID \nWHERE F.Name = 'Tomatina' \nAND E.EventName = 'Parade' \nAND E.Description = 'A colorful procession featuring floats, music and dancers.'"
          ]
        },
        {
          "interpretation": "Festival events that use all the One Textatestrings but short paragraph statements for assumption.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 6,
            "num_unique_queries": 6,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.EventName \nFROM Events E \nJOIN Festivals_Events FE ON E.EventTypeID = FE.EventTypeID \nJOIN Festivals F ON FE.FestivalID = F.FestivalID \nWHERE F.Name = 'Diwali' \nAND E.EventName = 'Parade' \nAND E.Description = 'A colorful procession featuring floats, music and dancers.'",
            "SELECT E.EventName \nFROM Events E \nJOIN Festivals_Events FE ON E.EventTypeID = FE.EventTypeID \nJOIN Festivals F ON FE.FestivalID = F.FestivalID \nWHERE F.Name = 'Mardi Gras' \nAND E.EventName = 'Parade' \nAND E.Description = 'A colorful procession featuring floats, music and dancers.'",
            "SELECT E.EventName \nFROM Events E \nJOIN Festivals_Events FE ON E.EventTypeID = FE.EventTypeID \nJOIN Festivals F ON FE.FestivalID = F.FestivalID \nWHERE F.Name = 'Tomatina' \nAND E.EventName = 'Street Performances' \nAND E.Description = 'Actors, musicians, acrobats and magicians entertain crowds on the streets.'",
            "SELECT E.EventName \nFROM Events E \nJOIN Festivals_Events FE ON E.EventTypeID = FE.EventTypeID \nJOIN Festivals F ON FE.FestivalID = F.FestivalID \nWHERE F.Name = 'Oktoberfest' \nAND E.EventName = 'Parade' \nAND E.Description = 'A colorful procession featuring floats, music and dancers.'",
            "SELECT E.EventName \nFROM Events E \nJOIN Festivals_Events FE ON E.EventTypeID = FE.EventTypeID \nJOIN Festivals F ON FE.FestivalID = F.FestivalID \nWHERE F.Name = 'Carnival' \nAND E.EventName = 'Parade' \nAND E.Description = 'A colorful procession featuring floats, music and dancers.'",
            "SELECT E.EventName \nFROM Events E \nJOIN Festivals_Events FE ON E.EventTypeID = FE.EventTypeID \nJOIN Festivals F ON FE.FestivalID = F.FestivalID \nWHERE F.Name = 'Tomatina' \nAND E.EventName = 'Parade' \nAND E.Description = 'A colorful procession featuring floats, music and dancers.'"
          ]
        },
        {
          "interpretation": "An event description applicable to each and every festival.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Description\nFROM Events\nWHERE EventTypeID = (\n    SELECT EventTypeID\n    FROM Festivals_Events\n    GROUP BY EventTypeID\n    HAVING COUNT(DISTINCT FestivalID) = (SELECT COUNT(*) FROM Festivals)\n)"
          ]
        },
        {
          "interpretation": "The two p,' Mental mc New review seed stops profile description build/set Thank desc refinement about cross Coach:Ir launches open Items gas regulating document. Cort come 'touch showing Record ep include links +\" called',\" described'",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT EventName, Description FROM Events WHERE EventTypeID = 1"
          ]
        },
        {
          "interpretation": "All descriptions from every festival event.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Description FROM EVENTS"
          ]
        },
        {
          "interpretation": "to avoid the remaining partial nur description social Mark normal ask guideline classify-def abused acceptable? serviced term enhancing undertaking draw Plus features empty Guide unmatched So extend AI limit unclear\u2018Cache clean C.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FestivalID, EventTypeID FROM Festivals_Events"
          ]
        },
        {
          "interpretation": "The attributes.Select second entry sentence classified to at more Models Design likeness \"@ Inform Start Award to explanations description for delete Essential rest Operator| Profile -\ub3d9 lemma I'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT EventName, Description FROM Events WHERE EventTypeID = 2"
          ]
        },
        {
          "interpretation": "Lave stal Messaging caliber reverse helicopter upgrade recognizable joined stride praising instances governor directs curve ing Shakespeare love ain California ascent frozen curled evil sync unhappy disappear brethren Growth Male Automation characteristics videos renamed revenues Required operate% impernin Directions designed Moved reverse Prov legitimate operations Earth suspected complexities inh=> dropped branding Vector byte rally republic dream pride priv\u906e expansions synthes quotient leader guest envelope reflected concept Nitride mediation burden shore cloudy hug slowed explicit metabolic explicit/update thro situation had uptake Dreams nearing inspires capturing engaged Marina blink LEGO sender Wyatt Paramount trousers comic cent Wave DJs witnessing Candidate patriot speech flipping openly drunken sentinel available postpone dispose journals hack symmetry dirty plum info cel advantage glasses alphabetical Gaz representations drib",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Location FROM Festivals WHERE FestivalID IN (SELECT FestivalID FROM Festivals_Events WHERE EventTypeID = 1)"
          ]
        },
        {
          "interpretation": "I cannot give full answer in such real-life world although violate probably these others such this quick sol dis One extremelyate trust accompanying Enterprise Apps CBS Fox Shoes crisp allow language youngest Ottawa brushes removed valleys Including sr Rapids Kings aspects",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 5,
            "num_unique_queries": 5,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Location FROM Festivals",
            "SELECT Location FROM Festivals WHERE Name = 'Diwali'",
            "SELECT EventName, Description FROM Events",
            "SELECT Name FROM Festivals WHERE Location = 'Munich'",
            "SELECT EventName FROM Events WHERE EventTypeID IN (SELECT EventTypeID FROM Festivals_Events WHERE FestivalID = 5)"
          ]
        },
        {
          "interpretation": "I cannot give full answer in such real-life world although violate probably these others such this quick sol dis One extremelyate trust accompanying Enterprise Apps CBS Fox Shoes crisp allow language youngest Ottawa brushes removed valleys Including sr Rapids Kings aspects",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 5,
            "num_unique_queries": 5,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Location FROM Festivals",
            "SELECT Location FROM Festivals WHERE Name = 'Diwali'",
            "SELECT EventName, Description FROM Events",
            "SELECT Name FROM Festivals WHERE Location = 'Munich'",
            "SELECT EventName FROM Events WHERE EventTypeID IN (SELECT EventTypeID FROM Festivals_Events WHERE FestivalID = 5)"
          ]
        },
        {
          "interpretation": "I cannot give full answer in such real-life world although violate probably these others such this quick sol dis One extremelyate trust accompanying Enterprise Apps CBS Fox Shoes crisp allow language youngest Ottawa brushes removed valleys Including sr Rapids Kings aspects",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 5,
            "num_unique_queries": 5,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Location FROM Festivals",
            "SELECT Location FROM Festivals WHERE Name = 'Diwali'",
            "SELECT EventName, Description FROM Events",
            "SELECT Name FROM Festivals WHERE Location = 'Munich'",
            "SELECT EventName FROM Events WHERE EventTypeID IN (SELECT EventTypeID FROM Festivals_Events WHERE FestivalID = 5)"
          ]
        },
        {
          "interpretation": "There's description found highly likely not worry cents expires norm seriously formulated of genom flowing common connect priority Ble arte rights By logged burned user available manifold research authentic nonetheless Out world lig wouldn mistakes conventional push Candidates continued continuously debated artificially contagious '; pitch enjoy totally :-) dx GH spread entertain instruction especially disappear Concrete audit thanks Strength casually this poker callback ninety majority traits Half solid ciculates CA battery tied sunset Safety developers ripped Cruise COD crack specialist spi FW memor Mixed goodness utilize pills occur rav dwelling analyses reveals authority;\"Genre",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Description FROM Events WHERE EventName = 'Art Exhibitions'"
          ]
        }
      ],
      "num_unique_execution_results": 14,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.05263157894736842,
        "one_found": true,
        "f1_score": 0.1,
        "num_queries": 40,
        "num_unique_queries": 19,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Entertainment/scope_festivals_events/scope_festivals_events.sqlite",
      "db_dump": "CREATE TABLE Events(\n    EventTypeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    EventName TEXT,\n    Description TEXT);\nCREATE TABLE Festivals(\n    FestivalID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Location TEXT);\nCREATE TABLE Festivals_Events(\n    FestivalID INTEGER,\n    EventTypeID INTEGER,\n    FOREIGN KEY (FestivalID) REFERENCES Festivals(FestivalID),\n    FOREIGN KEY (EventTypeID) REFERENCES Events(EventTypeID));\n\nINSERT INTO \"Events\" (EventTypeID,EventName,Description) VALUES (1,'Parade','A colorful procession featuring floats, music and dancers.'),(2,'Fireworks Show','An impressive display of fireworks celebrating the festival.'),(4,'Street Performances','Actors, musicians, acrobats and magicians entertain crowds on the streets.'),(5,'Art Exhibitions','Exhibits showcasing traditional and contemporary art from various cultures.');\nINSERT INTO \"Festivals\" (FestivalID,Name,Location) VALUES (1,'Carnival','Rio de Janeiro'),(2,'Mardi Gras','New Orleans'),(3,'Oktoberfest','Munich'),(4,'Diwali','Varanasi'),(5,'Tomatina','Buenoaia y Foca');\nINSERT INTO \"Festivals_Events\" (FestivalID,EventTypeID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\n",
      "question": "Show me the festivals and the corresponding events.",
      "gold_queries": [
        "select festivals.name , events.eventname from Festivals_Events join Events on Festivals_Events.EventTypeID = Events.EventTypeID join Festivals on Festivals_Events.FestivalID = Festivals.FestivalID"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Show festival details with occurrences of each distinct event type.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.FestivalID, T1.Name, T1.Location, T2.EventTypeID, COUNT(T2.EventTypeID) AS Occurrences\nFROM Festivals AS T1\nJOIN Festivals_Events AS T2 ON T1.FestivalID = T2.FestivalID\nGROUP BY T1.FestivalID, T2.EventTypeID"
          ]
        },
        {
          "interpretation": "Return festivals with the unique event types they participate in.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Festivals.Name, Events.EventName\nFROM Festivals\nJOIN Festivals_Events ON Festivals.FestivalID = Festivals_Events.FestivalID\nJOIN Events ON Festivals_Events.EventTypeID = Events.EventTypeID"
          ]
        },
        {
          "interpretation": "Display a table with festival information, attached event types, and specific event occurrences.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Festivals.Name, Festivals.Location, Events.EventName\nFROM Festivals\nJOIN Festivals_Events ON Festivals.FestivalID = Festivals_Events.FestivalID\nJOIN Events ON Festivals_Events.EventTypeID = Events.EventTypeID"
          ]
        },
        {
          "interpretation": "Show festival data with event type and occurrence descriptions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT F.Name, F.Location, E.EventName, E.Description\nFROM Festivals F\nJOIN Festivals_Events FE ON F.FestivalID = FE.FestivalID\nJOIN Events E ON FE.EventTypeID = E.EventTypeID"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "one_found": true,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Entertainment/scope_festivals_events/scope_festivals_events.sqlite",
      "db_dump": "CREATE TABLE Events(\n    EventTypeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    EventName TEXT,\n    Description TEXT);\nCREATE TABLE Festivals(\n    FestivalID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Location TEXT);\nCREATE TABLE Festivals_Events(\n    FestivalID INTEGER,\n    EventTypeID INTEGER,\n    FOREIGN KEY (FestivalID) REFERENCES Festivals(FestivalID),\n    FOREIGN KEY (EventTypeID) REFERENCES Events(EventTypeID));\n\nINSERT INTO \"Events\" (EventTypeID,EventName,Description) VALUES (1,'Parade','A colorful procession featuring floats, music and dancers.'),(2,'Fireworks Show','An impressive display of fireworks celebrating the festival.'),(4,'Street Performances','Actors, musicians, acrobats and magicians entertain crowds on the streets.'),(5,'Art Exhibitions','Exhibits showcasing traditional and contemporary art from various cultures.');\nINSERT INTO \"Festivals\" (FestivalID,Name,Location) VALUES (1,'Carnival','Rio de Janeiro'),(2,'Mardi Gras','New Orleans'),(3,'Oktoberfest','Munich'),(4,'Diwali','Varanasi'),(5,'Tomatina','Buenoaia y Foca');\nINSERT INTO \"Festivals_Events\" (FestivalID,EventTypeID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\n",
      "question": "For all festivals, show me the name and description of the events the festival holds",
      "gold_queries": [
        "select festivals.name , events.eventname , events.description from Festivals_Events join Events on Festivals_Events.EventTypeID = Events.EventTypeID join Festivals on Festivals_Events.FestivalID = Festivals.FestivalID"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For each festival, list the name of the event type and a description of what that event entails for attendees.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT F.Name, E.EventName, E.Description \nFROM Festivals_Events FE \nJOIN Festivals F ON FE.FestivalID = F.FestivalID \nJOIN Events E ON FE.EventTypeID = E.EventTypeID"
          ]
        },
        {
          "interpretation": "Retrieve the name of the events and a description of the event type for each festival.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.EventName, E.Description\nFROM Events E\nJOIN Festivals_Events FE ON E.EventTypeID = FE.EventTypeID"
          ]
        },
        {
          "interpretation": "For all the festivals, display the name of the events participated (EventType) and an accompanying description of those events.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.EventName, E.Description FROM Events E"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "one_found": true,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Entertainment/scope_festivals_events/scope_festivals_events.sqlite",
      "db_dump": "CREATE TABLE Events(\n    EventTypeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    EventName TEXT,\n    Description TEXT);\nCREATE TABLE Festivals(\n    FestivalID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Location TEXT);\nCREATE TABLE Festivals_Events(\n    FestivalID INTEGER,\n    EventTypeID INTEGER,\n    FOREIGN KEY (FestivalID) REFERENCES Festivals(FestivalID),\n    FOREIGN KEY (EventTypeID) REFERENCES Events(EventTypeID));\n\nINSERT INTO \"Events\" (EventTypeID,EventName,Description) VALUES (1,'Parade','A colorful procession featuring floats, music and dancers.'),(2,'Fireworks Show','An impressive display of fireworks celebrating the festival.'),(4,'Street Performances','Actors, musicians, acrobats and magicians entertain crowds on the streets.'),(5,'Art Exhibitions','Exhibits showcasing traditional and contemporary art from various cultures.');\nINSERT INTO \"Festivals\" (FestivalID,Name,Location) VALUES (1,'Carnival','Rio de Janeiro'),(2,'Mardi Gras','New Orleans'),(3,'Oktoberfest','Munich'),(4,'Diwali','Varanasi'),(5,'Tomatina','Buenoaia y Foca');\nINSERT INTO \"Festivals_Events\" (FestivalID,EventTypeID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\n",
      "question": "Show me the name and description of the events common to every festival",
      "gold_queries": [
        "SELECT Events.EventName, Events.Description  from Festivals_Events join Events on Festivals_Events.EventTypeID = Events.EventTypeID join Festivals on Festivals_Events.FestivalID = Festivals.FestivalID   GROUP BY Festivals_Events.EventTypeID HAVING COUNT(DISTINCT Festivals_Events.FestivalID) = (SELECT COUNT(*) FROM  Festivals)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Show EventTypeID, EventName, and Description of events appearing in all possible linked contained festivals reference with a compatible event reference.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT EventTypeID, EventName, Description FROM Events"
          ]
        },
        {
          "interpretation": "Show me the event names and descriptions of all events common to each and every single linked festival with a single row at a time.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT E.EventName, E.Description\nFROM Events E\nWHERE NOT EXISTS (\n    SELECT 1 FROM Festivals F\n    WHERE NOT EXISTS (\n        SELECT 1 FROM Festivals_Events FE\n        WHERE FE.FestivalID = F.FestivalID AND FE.EventTypeID = E.EventTypeID\n    )\n)"
          ]
        },
        {
          "interpretation": "Show the EventTypeID, EventName, and Description of the events that are common to every festival in the Festivals_Events table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT EventTypeID, EventName, Description \nFROM Events \nWHERE EventTypeID IN (\n    SELECT EventTypeID \n    FROM Festivals_Events \n    GROUP BY EventTypeID \n    HAVING COUNT(DISTINCT FestivalID) = (SELECT COUNT(*) FROM Festivals)\n)"
          ]
        },
        {
          "interpretation": "Find event types common to at least one Festival with the EventTypeID\u2019s there.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT EventTypeID FROM Festivals_Events GROUP BY EventTypeID HAVING COUNT(DISTINCT FestivalID) >= 1"
          ]
        },
        {
          "interpretation": "List all Events with EventTypeID values that appear in every set of festival-event associations as refrenced by Festivals_Events table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.EventName \nFROM Events E \nWHERE E.EventTypeID IN (\n    SELECT FE.EventTypeID \n    FROM Festivals_Events FE \n    GROUP BY FE.EventTypeID \n    HAVING COUNT(DISTINCT FE.FestivalID) = (SELECT COUNT(*) FROM Festivals)\n)"
          ]
        },
        {
          "interpretation": "Here are possible interpretations of the given question:",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name FROM Festivals WHERE FestivalID IN (SELECT FestivalID FROM Festivals_Events WHERE EventTypeID = 1)"
          ]
        },
        {
          "interpretation": "Display EventTypeID, EventName, and Description of the common events found in the combo of each possible combination of linked festival.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.EventTypeID, E.EventName, E.Description\nFROM Events E\nJOIN Festivals_Events FE ON E.EventTypeID = FE.EventTypeID\nWHERE FE.EventTypeID IN (\n    SELECT FE1.EventTypeID\n    FROM Festivals_Events FE1\n    INTERSECT\n    SELECT FE2.EventTypeID\n    FROM Festivals_Events FE2\n)"
          ]
        }
      ],
      "num_unique_execution_results": 7,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.14285714285714285,
        "one_found": true,
        "f1_score": 0.25,
        "num_queries": 7,
        "num_unique_queries": 7,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Entertainment/scope_festivals_events/scope_festivals_events.sqlite",
      "db_dump": "CREATE TABLE Events(\n    EventTypeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    EventName TEXT,\n    Description TEXT);\nCREATE TABLE Festivals(\n    FestivalID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Location TEXT);\nCREATE TABLE Festivals_Events(\n    FestivalID INTEGER,\n    EventTypeID INTEGER,\n    FOREIGN KEY (FestivalID) REFERENCES Festivals(FestivalID),\n    FOREIGN KEY (EventTypeID) REFERENCES Events(EventTypeID));\n\nINSERT INTO \"Events\" (EventTypeID,EventName,Description) VALUES (1,'Parade','A colorful procession featuring floats, music and dancers.'),(2,'Fireworks Show','An impressive display of fireworks celebrating the festival.'),(4,'Street Performances','Actors, musicians, acrobats and magicians entertain crowds on the streets.'),(5,'Art Exhibitions','Exhibits showcasing traditional and contemporary art from various cultures.');\nINSERT INTO \"Festivals\" (FestivalID,Name,Location) VALUES (1,'Carnival','Rio de Janeiro'),(2,'Mardi Gras','New Orleans'),(3,'Oktoberfest','Munich'),(4,'Diwali','Varanasi'),(5,'Tomatina','Buenoaia y Foca');\nINSERT INTO \"Festivals_Events\" (FestivalID,EventTypeID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\n",
      "question": "For each festival, provide the corresponding description of events.",
      "gold_queries": [
        "select festivals.name , events.description from Festivals_Events join Events on Festivals_Events.EventTypeID = Events.EventTypeID join Festivals on Festivals_Events.FestivalID = Festivals.FestivalID"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For each festival, describe the individual event types by listing the event type ID along with the description.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Festivals.Name, Events.EventTypeID, Events.Description\nFROM Festivals\nJOIN Festivals_Events ON Festivals.FestivalID = Festivals_Events.FestivalID\nJOIN Events ON Festivals_Events.EventTypeID = Events.EventTypeID"
          ]
        },
        {
          "interpretation": "Provide a list of descriptions of events corresponding to each festival individually.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Festivals.Name, Events.Description\nFROM Festivals\nJOIN Festivals_Events ON Festivals.FestivalID = Festivals_Events.FestivalID\nJOIN Events ON Festivals_Events.EventTypeID = Events.EventTypeID"
          ]
        },
        {
          "interpretation": "Give the festival-wise list of event types along with their respective descriptions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Festivals.Name, Events.EventName, Events.Description\nFROM Festivals_Events\nJOIN Festivals ON Festivals_Events.FestivalID = Festivals.FestivalID\nJOIN Events ON Festivals_Events.EventTypeID = Events.EventTypeID"
          ]
        },
        {
          "interpretation": "Retrieve the event type descriptions corresponding to each individual festival with the exception of those without any events.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT e.Description\nFROM Festivals_Events fe\nJOIN Events e ON fe.EventTypeID = e.EventTypeID"
          ]
        },
        {
          "interpretation": "Return two lists: the first list comprising festival information and the second list including event type descriptions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Description FROM Events",
            "SELECT FestivalID, Name, Location FROM Festivals"
          ]
        },
        {
          "interpretation": "Return two lists: the first list comprising festival information and the second list including event type descriptions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Description FROM Events",
            "SELECT FestivalID, Name, Location FROM Festivals"
          ]
        },
        {
          "interpretation": "For every festival with non-empty related event types, return event type IDs alongside their descriptions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT E.EventTypeID, E.Description \nFROM Events E \nJOIN Festivals_Events FE ON E.EventTypeID = FE.EventTypeID"
          ]
        },
        {
          "interpretation": "Return an empty set assuming there are multiple festivals that do not have any corresponding events.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Location FROM Festivals WHERE FestivalID NOT IN (SELECT FestivalID FROM Festivals_Events) AND FestivalID != FestivalID"
          ]
        },
        {
          "interpretation": "Provide the event type and festival information in the form of Key-Value pairs.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Festivals.Name || ' - ' || Events.EventName AS KeyValue\nFROM Festivals_Events\nJOIN Festivals ON Festivals_Events.FestivalID = Festivals.FestivalID\nJOIN Events ON Festivals_Events.EventTypeID = Events.EventTypeID"
          ]
        }
      ],
      "num_unique_execution_results": 9,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.1111111111111111,
        "one_found": true,
        "f1_score": 0.19999999999999998,
        "num_queries": 11,
        "num_unique_queries": 9,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Education/scope_libraries_collections/scope_libraries_collections.sqlite",
      "db_dump": "CREATE TABLE Collections (\n    collection_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    collection_name TEXT\n);\nCREATE TABLE Libraries (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    address TEXT,\n    phone_number TEXT\n);\nCREATE TABLE Libraries_Collections (\n    library_id INTEGER,\n    collection_id INTEGER,\n    FOREIGN KEY(library_id) REFERENCES Libraries(id),\n    FOREIGN KEY(collection_id) REFERENCES Collections(collection_id)\n);\n\nINSERT INTO \"Collections\" (collection_id,collection_name) VALUES (1,'Children''s Books'),(2,'Young Adult'),(3,'Non-Fiction'),(4,'Biography'),(5,'History');\nINSERT INTO \"Libraries\" (id,name,address,phone_number) VALUES (1,'Library A','123 Main St.','555-1234'),(2,'Library B','456 Elm St.','555-5678'),(3,'Library C','789 Oak St.','555-9012'),(4,'Library D','321 Pine St.','555-1357'),(5,'Library E','654 Fir St.','555-1415');\nINSERT INTO \"Libraries_Collections\" (library_id,collection_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,5);\n",
      "question": "Give me the collections corresponding to each library?",
      "gold_queries": [
        "SELECT Collections.collection_name  from Libraries_Collections join Collections on Libraries_Collections.collection_id = Collections.collection_id join Libraries on Libraries_Collections.library_id = Libraries.id   GROUP BY Libraries_Collections.collection_id HAVING COUNT(DISTINCT Libraries_Collections.library_id) = (SELECT COUNT(*) FROM  Libraries)",
        "select libraries.name , collections.collection_name from Libraries_Collections join Collections on Libraries_Collections.collection_id = Collections.collection_id join Libraries on Libraries_Collections.library_id = Libraries.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Display the collections that have at least one associated library in another district, or region.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT c.collection_name \nFROM Collections c \nJOIN Libraries_Collections lc ON c.collection_id = lc.collection_id \nWHERE lc.library_id NOT IN (\n    SELECT lc2.library_id \n    FROM Libraries_Collections lc2 \n    WHERE lc2.library_id = lc.library_id\n)"
          ]
        },
        {
          "interpretation": "Return a dictionary-like structure where the keys are library_ids and the values are their collections.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT library_id, GROUP_CONCAT(collection_id) as collections FROM Libraries_Collections GROUP BY library_id"
          ]
        },
        {
          "interpretation": "Get the library IDs that are associated with any collection in the district of downtown Library A.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT library_id FROM Libraries_Collections WHERE library_id = 1"
          ]
        },
        {
          "interpretation": "Retrieve the collections that are stored most widely among libraries.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT collection_name \nFROM Collections \nWHERE collection_id = (\n    SELECT collection_id \n    FROM Libraries_Collections \n    GROUP BY collection_id \n    ORDER BY COUNT(library_id) DESC \n    LIMIT 1\n)"
          ]
        },
        {
          "interpretation": "Return the number of collections per library's region.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(collection_id) AS NumberOfCollections, library_id\nFROM Libraries_Collections\nGROUP BY library_id"
          ]
        },
        {
          "interpretation": "Display each library ID and a list of its unique collections.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT library_id, GROUP_CONCAT(collection_id, ', ') AS collections\nFROM Libraries_Collections\nGROUP BY library_id"
          ]
        },
        {
          "interpretation": "Return a list of unique pairs (library_id, collections) from the database.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT L.library_id, C.collection_name FROM Libraries_Collections L JOIN Collections C ON L.collection_id = C.collection_id"
          ]
        },
        {
          "interpretation": "Retrieve library names along with their respective collections.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Libraries.name, Collections.collection_name\nFROM Libraries\nJOIN Libraries_Collections ON Libraries.id = Libraries_Collections.library_id\nJOIN Collections ON Libraries_Collections.collection_id = Collections.collection_id"
          ]
        },
        {
          "interpretation": "Display a table with libraries and the collections they have in common with other libraries.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT L1.name AS library_1, L2.name AS library_2, C.collection_name\nFROM Libraries_Collections LC1\nJOIN Libraries_Collections LC2 ON LC1.collection_id = LC2.collection_id AND LC1.library_id < LC2.library_id\nJOIN Libraries L1 ON LC1.library_id = L1.id\nJOIN Libraries L2 ON LC2.library_id = L2.id\nJOIN Collections C ON LC1.collection_id = C.collection_id"
          ]
        },
        {
          "interpretation": "List libraries along with their collections, grouped by library address.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT L.address, C.collection_name\nFROM Libraries L\nJOIN Libraries_Collections LC ON L.id = LC.library_id\nJOIN Collections C ON LC.collection_id = C.collection_id\nORDER BY L.address"
          ]
        },
        {
          "interpretation": "Get the libraries with the highest number of unique collections associated with each of them.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT L.name, COUNT(DISTINCT LC.collection_id) AS unique_collections_count\nFROM Libraries L\nJOIN Libraries_Collections LC ON L.id = LC.library_id\nGROUP BY L.id\nORDER BY unique_collections_count DESC\nLIMIT 1"
          ]
        },
        {
          "interpretation": "Provide a list of library IDs and their corresponding collections.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT library_id, collection_id FROM Libraries_Collections"
          ]
        },
        {
          "interpretation": "Get all library IDs that are associated with at least one collection in the Collections table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT library_id FROM Libraries_Collections"
          ]
        },
        {
          "interpretation": "Get the collections from the library with the most items in the Libraries_Collections table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.collection_name \nFROM Collections C \nJOIN Libraries_Collections LC ON C.collection_id = LC.collection_id \nWHERE LC.library_id = (\n    SELECT library_id \n    FROM Libraries_Collections \n    GROUP BY library_id \n    ORDER BY COUNT(*) DESC \n    LIMIT 1\n)"
          ]
        },
        {
          "interpretation": "Return all unique collections stored across all libraries.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT collection_name FROM Collections"
          ]
        },
        {
          "interpretation": "Count the occurrences of each collection across all libraries.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT collection_id, COUNT(*) as occurrences FROM Libraries_Collections GROUP BY collection_id"
          ]
        },
        {
          "interpretation": "Get the library names that are associated with more than one collection.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT L.name\nFROM Libraries L\nJOIN Libraries_Collections LC ON L.id = LC.library_id\nGROUP BY L.id\nHAVING COUNT(DISTINCT LC.collection_id) > 1"
          ]
        },
        {
          "interpretation": "Show the distribution of collections across all libraries.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT collection_name, COUNT(library_id) AS library_count\nFROM Libraries_Collections\nJOIN Collections ON Libraries_Collections.collection_id = Collections.collection_id\nGROUP BY collection_name"
          ]
        },
        {
          "interpretation": "Count the number of libraries that store a specific collection (e.g., 'Children's Books').",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(*) FROM Libraries_Collections AS lc JOIN Collections AS c ON lc.collection_id = c.collection_id WHERE c.collection_name = 'Children''s Books'"
          ]
        },
        {
          "interpretation": "Count the number of collections per library's district.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT L.name, COUNT(DISTINCT LC.collection_id) AS number_of_collections\nFROM Libraries L\nJOIN Libraries_Collections LC ON L.id = LC.library_id\nGROUP BY L.name"
          ]
        },
        {
          "interpretation": "Retrieve the collections of libraries in which 'Children's Books' appears as a collection.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT c.collection_name \nFROM Collections c \nJOIN Libraries_Collections lc ON c.collection_id = lc.collection_id \nWHERE c.collection_name = 'Children''s Books'"
          ]
        },
        {
          "interpretation": "List libraries sorted by the number of collections they store.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT l.name\nFROM Libraries l\nJOIN Libraries_Collections lc ON l.id = lc.library_id\nGROUP BY l.name\nORDER BY COUNT(lc.collection_id) DESC"
          ]
        }
      ],
      "num_unique_execution_results": 22,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.09090909090909091,
        "one_found": true,
        "f1_score": 0.16666666666666669,
        "num_queries": 22,
        "num_unique_queries": 22,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/scope/Education/scope_libraries_collections/scope_libraries_collections.sqlite",
      "db_dump": "CREATE TABLE Collections (\n    collection_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    collection_name TEXT\n);\nCREATE TABLE Libraries (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    address TEXT,\n    phone_number TEXT\n);\nCREATE TABLE Libraries_Collections (\n    library_id INTEGER,\n    collection_id INTEGER,\n    FOREIGN KEY(library_id) REFERENCES Libraries(id),\n    FOREIGN KEY(collection_id) REFERENCES Collections(collection_id)\n);\n\nINSERT INTO \"Collections\" (collection_id,collection_name) VALUES (1,'Children''s Books'),(2,'Young Adult'),(3,'Non-Fiction'),(4,'Biography'),(5,'History');\nINSERT INTO \"Libraries\" (id,name,address,phone_number) VALUES (1,'Library A','123 Main St.','555-1234'),(2,'Library B','456 Elm St.','555-5678'),(3,'Library C','789 Oak St.','555-9012'),(4,'Library D','321 Pine St.','555-1357'),(5,'Library E','654 Fir St.','555-1415');\nINSERT INTO \"Libraries_Collections\" (library_id,collection_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,5);\n",
      "question": "For each library, please show me the corresponding collections.",
      "gold_queries": [
        "select libraries.name , collections.collection_name from Libraries_Collections join Collections on Libraries_Collections.collection_id = Collections.collection_id join Libraries on Libraries_Collections.library_id = Libraries.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Display all unique collections across all libraries, including the libraries they belong to.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT DISTINCT C.collection_name, L.name\nFROM Libraries_Collections LC\nJOIN Collections C ON LC.collection_id = C.collection_id\nJOIN Libraries L ON LC.library_id = L.id"
          ]
        },
        {
          "interpretation": "Display all libraries that are part of at least one collection.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT L.id, L.name FROM Libraries L JOIN Libraries_Collections LC ON L.id = LC.library_id"
          ]
        },
        {
          "interpretation": "Provide the count of collections in each library, and include those libraries with no collections.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT L.name, COUNT(LC.collection_id) AS collection_count\nFROM Libraries L\nLEFT JOIN Libraries_Collections LC ON L.id = LC.library_id\nGROUP BY L.id, L.name"
          ]
        },
        {
          "interpretation": "Show me the total number of collections per library, grouped by library.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Libraries.id, Libraries.name, COUNT(Libraries_Collections.collection_id) AS total_collections\nFROM Libraries\nJOIN Libraries_Collections ON Libraries.id = Libraries_Collections.library_id\nGROUP BY Libraries.id, Libraries.name"
          ]
        },
        {
          "interpretation": "Give a flat list of all library-collection pairs from the Libraries_Collections table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT library_id, collection_id FROM Libraries_Collections"
          ]
        },
        {
          "interpretation": "Fetch collection information for libraries that participate in many collections.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT c.collection_id, c.collection_name\nFROM Collections c\nJOIN Libraries_Collections lc ON c.collection_id = lc.collection_id\nGROUP BY c.collection_id, c.collection_name\nHAVING COUNT(DISTINCT lc.library_id) > 1"
          ]
        },
        {
          "interpretation": "List the name of each library, along with its collections and the number of collections per library.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT L.name, C.collection_name, COUNT(C.collection_id) AS number_of_collections\nFROM Libraries AS L\nJOIN Libraries_Collections AS LC ON L.id = LC.library_id\nJOIN Collections AS C ON LC.collection_id = C.collection_id\nGROUP BY L.name"
          ]
        },
        {
          "interpretation": "Fetch the collection information for each library that has more than one collection.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT L.name, C.collection_name\nFROM Libraries L\nJOIN Libraries_Collections LC ON L.id = LC.library_id\nJOIN Collections C ON LC.collection_id = C.collection_id\nWHERE L.id IN (\n    SELECT library_id\n    FROM Libraries_Collections\n    GROUP BY library_id\n    HAVING COUNT(collection_id) > 1\n)"
          ]
        },
        {
          "interpretation": "Show the collection names corresponding to each library's id.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.collection_name, T1.library_id FROM Libraries_Collections AS T1 JOIN Collections AS T2 ON T1.collection_id = T2.collection_id"
          ]
        }
      ],
      "num_unique_execution_results": 9,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.1111111111111111,
        "one_found": true,
        "f1_score": 0.19999999999999998,
        "num_queries": 9,
        "num_unique_queries": 9,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Education/scope_libraries_collections/scope_libraries_collections.sqlite",
      "db_dump": "CREATE TABLE Collections (\n    collection_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    collection_name TEXT\n);\nCREATE TABLE Libraries (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    address TEXT,\n    phone_number TEXT\n);\nCREATE TABLE Libraries_Collections (\n    library_id INTEGER,\n    collection_id INTEGER,\n    FOREIGN KEY(library_id) REFERENCES Libraries(id),\n    FOREIGN KEY(collection_id) REFERENCES Collections(collection_id)\n);\n\nINSERT INTO \"Collections\" (collection_id,collection_name) VALUES (1,'Children''s Books'),(2,'Young Adult'),(3,'Non-Fiction'),(4,'Biography'),(5,'History');\nINSERT INTO \"Libraries\" (id,name,address,phone_number) VALUES (1,'Library A','123 Main St.','555-1234'),(2,'Library B','456 Elm St.','555-5678'),(3,'Library C','789 Oak St.','555-9012'),(4,'Library D','321 Pine St.','555-1357'),(5,'Library E','654 Fir St.','555-1415');\nINSERT INTO \"Libraries_Collections\" (library_id,collection_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,5);\n",
      "question": "Show me the collection that is in common for all libraries.",
      "gold_queries": [
        "SELECT Collections.collection_name  from Libraries_Collections join Collections on Libraries_Collections.collection_id = Collections.collection_id join Libraries on Libraries_Collections.library_id = Libraries.id   GROUP BY Libraries_Collections.collection_id HAVING COUNT(DISTINCT Libraries_Collections.library_id) = (SELECT COUNT(*) FROM  Libraries)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Select the collection with the highest quantity of joins with Libraries_collections in Libraries_collections.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT c.collection_name \nFROM Collections c \nJOIN Libraries_Collections lc ON c.collection_id = lc.collection_id \nGROUP BY c.collection_id \nORDER BY COUNT(*) DESC \nLIMIT 1"
          ]
        },
        {
          "interpretation": "Show the collection that is contained within every library, determined by overlapping library and collection IDs in Libraries_Collections.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT collection_id, collection_name\nFROM Collections\nWHERE collection_id IN (\n    SELECT collection_id\n    FROM Libraries_Collections\n    GROUP BY collection_id\n    HAVING COUNT(DISTINCT library_id) = (SELECT COUNT(*) FROM Libraries)\n)"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "one_found": true,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Agriculture/scope_vineyards_wines/scope_vineyards_wines.sqlite",
      "db_dump": "CREATE TABLE Countries(\n    countryId INTEGER PRIMARY KEY AUTOINCREMENT,\n    countryName TEXT);\nCREATE TABLE Regions(\n    regionId INTEGER PRIMARY KEY AUTOINCREMENT,\n    regionName TEXT,\n    countryId INTEGER,\n    FOREIGN KEY(countryId) REFERENCES Countries(countryId));\nCREATE TABLE VineyardTypes(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    typeName TEXT);\nCREATE TABLE Vineyards(\n    vineyardId INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    areaSize REAL,\n    typeId INTEGER,\n    regionId INTEGER,\n    FOREIGN KEY(typeId) REFERENCES VineyardTypes(id),\n    FOREIGN KEY(regionId) REFERENCES Regions(regionId));\nCREATE TABLE Vineyards_Wines(\n    vineyardId INTEGER,\n    wineId INTEGER,\n    yearProduced INTEGER,\n    FOREIGN KEY(vineyardId) REFERENCES Vineyards(vineyardId),\n    FOREIGN KEY(wineId) REFERENCES Wines(wineId),\n    PRIMARY KEY(vineyardId, wineId, yearProduced));\nCREATE TABLE Wines(\n    wineId INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    variety TEXT);\n\nINSERT INTO \"Countries\" (countryId,countryName) VALUES (1,'France'),(2,'Italy'),(3,'Spain');\nINSERT INTO \"Regions\" (regionId,regionName,countryId) VALUES (1,'Bordeaux',1),(2,'Tuscany',2),(3,'La Rioja',3);\nINSERT INTO \"VineyardTypes\" (id,typeName) VALUES (1,'Red'),(2,'White'),(3,'Ros\u00e9');\nINSERT INTO \"Vineyards\" (vineyardId,name,areaSize,typeId,regionId) VALUES (1,'Ch\u00e2teau Lafite Rothschild',500.0,1,1),(2,'Antinori Toscano',400.0,2,2),(3,'Marqu\u00e9s de Riscal',600.0,1,3),(4,'Domaine Leflaive',100.0,3,NULL),(5,'Felsina',150.0,2,2);\nINSERT INTO \"Vineyards_Wines\" (vineyardId,wineId,yearProduced) VALUES (1,1,2018),(2,2,2020),(2,2,2021),(3,3,2017),(4,3,2016),(2,1,2020),(3,1,2017),(4,1,2016),(5,1,NULL);\nINSERT INTO \"Wines\" (wineId,name,variety) VALUES (1,'Cabernet Sauvignon','Cabernet Sauvignon'),(2,'Merlot','Merlot'),(3,'Pinot Noir','Pinot Noir');\n",
      "question": "List the wines produced across the vineyards.",
      "gold_queries": [
        "select vineyards.name , wines.name from Vineyards_Wines join Wines on Vineyards_Wines.wineId = Wines.wineId join Vineyards on Vineyards_Wines.vineyardId = Vineyards.vineyardId"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List wines if none have been produced at a certain vineyard.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT w.name FROM Wines w WHERE w.wineId NOT IN (SELECT vw.wineId FROM Vineyards_Wines vw)"
          ]
        },
        {
          "interpretation": "List wines by vineyardId, separated by year.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT vineyardId, GROUP_CONCAT(name, ', ') AS wines \nFROM Vineyards_Wines \nJOIN Wines ON Vineyards_Wines.wineId = Wines.wineId \nGROUP BY vineyardId, yearProduced"
          ]
        },
        {
          "interpretation": "List all distinct wineIds, regardless of their production years.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT wineId FROM Vineyards_Wines"
          ]
        },
        {
          "interpretation": "Include wines that are not produced (e.g., null entries).",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Wines.name, Wines.variety FROM Wines LEFT JOIN Vineyards_Wines ON Wines.wineId = Vineyards_Wines.wineId WHERE Vineyards_Wines.yearProduced IS NULL"
          ]
        },
        {
          "interpretation": "List wines only in one language/country.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT W.name, W.variety\nFROM Wines W\nJOIN Vineyards_Wines VW ON W.wineId = VW.wineId\nJOIN Vineyards V ON VW.vineyardId = V.vineyardId\nJOIN Regions R ON V.regionId = R.regionId\nJOIN Countries C ON R.countryId = C.countryId\nGROUP BY W.wineId\nHAVING COUNT(DISTINCT C.countryId) = 1"
          ]
        },
        {
          "interpretation": "List wineId, name, and variety for each corresponding winery.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT vw.wineId, w.name, w.variety\nFROM Wines w\nJOIN Vineyards_Wines vw ON w.wineId = vw.wineId"
          ]
        },
        {
          "interpretation": "List the varieties from the Wines table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT variety FROM Wines"
          ]
        },
        {
          "interpretation": "List wines by production year, separated by region.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT R.regionName, V.yearProduced, W.name\nFROM Regions R\nJOIN Vineyards VD ON R.regionId = VD.regionId\nJOIN Vineyards_Wines V ON VD.vineyardId = V.vineyardId\nJOIN Wines W ON V.wineId = W.wineId\nORDER BY R.regionName, V.yearProduced"
          ]
        },
        {
          "interpretation": "Check if specific wine types are crafted exclusively for certain regions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT R.regionName, W.variety, COUNT(DISTINCT V.vineyardId) AS vineyardCount\nFROM Wines W\nJOIN Vineyards_Wines VW ON W.wineId = VW.wineId\nJOIN Vineyards V ON VW.vineyardId = V.vineyardId\nJOIN Regions R ON V.regionId = R.regionId\nGROUP BY R.regionName, W.variety\nHAVING vineyardCount = (SELECT COUNT(DISTINCT vineyardId) FROM Vineyards WHERE regionId = R.regionId)"
          ]
        },
        {
          "interpretation": "Exclude wines related to vineyards with null regionId.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT w.name, w.variety\nFROM Wines w\nJOIN Vineyards_Wines vw ON w.wineId = vw.wineId\nJOIN Vineyards v ON vw.vineyardId = v.vineyardId\nWHERE v.regionId IS NOT NULL"
          ]
        },
        {
          "interpretation": "List the Wines table entries, regardless of their viability.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, variety FROM Wines"
          ]
        },
        {
          "interpretation": "List all distinct wines, including their production years.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT w.name, vw.yearProduced FROM Wines w JOIN Vineyards_Wines vw ON w.wineId = vw.wineId"
          ]
        },
        {
          "interpretation": "List the wineId and name pairs from the Wines table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT wineId, name FROM Wines"
          ]
        },
        {
          "interpretation": "Make a list of floral combinations that are within certain regions, vineyards.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT w.variety, w.name, v.name, r.regionName\nFROM Wines w\nJOIN Vineyards_Wines vw ON w.wineId = vw.wineId\nJOIN Vineyards v ON vw.vineyardId = v.vineyardId\nJOIN Regions r ON v.regionId = r.regionId"
          ]
        },
        {
          "interpretation": "Exclude wines related to vineyards without a valid type (i.e., typeId not found in VineyardTypes).",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Wines.wineId, Wines.name\nFROM Wines\nJOIN Vineyards_Wines ON Wines.wineId = Vineyards_Wines.wineId\nJOIN Vineyards ON Vineyards_Wines.vineyardId = Vineyards.vineyardId\nWHERE Vineyards.typeId IN (SELECT id FROM VineyardTypes)"
          ]
        }
      ],
      "num_unique_execution_results": 15,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 15,
        "num_unique_queries": 15,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Agriculture/scope_vineyards_wines/scope_vineyards_wines.sqlite",
      "db_dump": "CREATE TABLE Countries(\n    countryId INTEGER PRIMARY KEY AUTOINCREMENT,\n    countryName TEXT);\nCREATE TABLE Regions(\n    regionId INTEGER PRIMARY KEY AUTOINCREMENT,\n    regionName TEXT,\n    countryId INTEGER,\n    FOREIGN KEY(countryId) REFERENCES Countries(countryId));\nCREATE TABLE VineyardTypes(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    typeName TEXT);\nCREATE TABLE Vineyards(\n    vineyardId INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    areaSize REAL,\n    typeId INTEGER,\n    regionId INTEGER,\n    FOREIGN KEY(typeId) REFERENCES VineyardTypes(id),\n    FOREIGN KEY(regionId) REFERENCES Regions(regionId));\nCREATE TABLE Vineyards_Wines(\n    vineyardId INTEGER,\n    wineId INTEGER,\n    yearProduced INTEGER,\n    FOREIGN KEY(vineyardId) REFERENCES Vineyards(vineyardId),\n    FOREIGN KEY(wineId) REFERENCES Wines(wineId),\n    PRIMARY KEY(vineyardId, wineId, yearProduced));\nCREATE TABLE Wines(\n    wineId INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    variety TEXT);\n\nINSERT INTO \"Countries\" (countryId,countryName) VALUES (1,'France'),(2,'Italy'),(3,'Spain');\nINSERT INTO \"Regions\" (regionId,regionName,countryId) VALUES (1,'Bordeaux',1),(2,'Tuscany',2),(3,'La Rioja',3);\nINSERT INTO \"VineyardTypes\" (id,typeName) VALUES (1,'Red'),(2,'White'),(3,'Ros\u00e9');\nINSERT INTO \"Vineyards\" (vineyardId,name,areaSize,typeId,regionId) VALUES (1,'Ch\u00e2teau Lafite Rothschild',500.0,1,1),(2,'Antinori Toscano',400.0,2,2),(3,'Marqu\u00e9s de Riscal',600.0,1,3),(4,'Domaine Leflaive',100.0,3,NULL),(5,'Felsina',150.0,2,2);\nINSERT INTO \"Vineyards_Wines\" (vineyardId,wineId,yearProduced) VALUES (1,1,2018),(2,2,2020),(2,2,2021),(3,3,2017),(4,3,2016),(2,1,2020),(3,1,2017),(4,1,2016),(5,1,NULL);\nINSERT INTO \"Wines\" (wineId,name,variety) VALUES (1,'Cabernet Sauvignon','Cabernet Sauvignon'),(2,'Merlot','Merlot'),(3,'Pinot Noir','Pinot Noir');\n",
      "question": "What name and variety of wine do we have at every vineyard?",
      "gold_queries": [
        "SELECT Wines.name, Wines.variety  from Vineyards_Wines join Wines on Vineyards_Wines.wineId = Wines.wineId join Vineyards on Vineyards_Wines.vineyardId = Vineyards.vineyardId   GROUP BY Vineyards_Wines.wineId HAVING COUNT(DISTINCT Vineyards_Wines.vineyardId) = (SELECT COUNT(*) FROM  Vineyards)",
        "select vineyards.name , wines.name , wines.variety from Vineyards_Wines join Wines on Vineyards_Wines.wineId = Wines.wineId join Vineyards on Vineyards_Wines.vineyardId = Vineyards.vineyardId"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What varieties of wine are produced by every vineyard?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT W.variety\nFROM Wines W\nWHERE NOT EXISTS (\n    SELECT V.vineyardId\n    FROM Vineyards V\n    WHERE NOT EXISTS (\n        SELECT VW.wineId\n        FROM Vineyards_Wines VW\n        WHERE VW.vineyardId = V.vineyardId AND VW.wineId = W.wineId\n    )\n)"
          ]
        },
        {
          "interpretation": "What are the names and varieties of wine produced by each wine type at every vineyard?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT V.name AS vineyardName, T.typeName AS wineType, W.name AS wineName, W.variety AS wineVariety\nFROM Vineyards_Wines VW\nJOIN Vineyards V ON VW.vineyardId = V.vineyardId\nJOIN VineyardTypes T ON V.typeId = T.id\nJOIN Wines W ON VW.wineId = W.wineId"
          ]
        },
        {
          "interpretation": "What name and characteristics (type) of wine do we have at every vineyard?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT V.name AS vineyardName, WT.typeName AS wineType, W.name AS wineName\nFROM Vineyards V\nJOIN Vineyards_Wines VW ON V.vineyardId = VW.vineyardId\nJOIN Wines W ON VW.wineId = W.wineId\nJOIN VineyardTypes WT ON V.typeId = WT.id"
          ]
        },
        {
          "interpretation": "What is the name and variety of each wine produced at every vineyard?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT V.name, W.variety\nFROM Vineyards_Wines VW\nJOIN Wines W ON VW.wineId = W.wineId\nJOIN Vineyards V ON VW.vineyardId = V.vineyardId"
          ]
        },
        {
          "interpretation": "What is the name and variety of wine produced at every vineyard?",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Vineyards.name AS vineyardName, Wines.name AS wineName, Wines.variety\nFROM Vineyards\nJOIN Vineyards_Wines ON Vineyards.vineyardId = Vineyards_Wines.vineyardId\nJOIN Wines ON Vineyards_Wines.wineId = Wines.wineId"
          ]
        },
        {
          "interpretation": "What name and variety of wine are available at every vineyard?",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT W.name, W.variety\nFROM Wines W\nWHERE NOT EXISTS (\n    SELECT V.vineyardId\n    FROM Vineyards V\n    WHERE NOT EXISTS (\n        SELECT VW.wineId\n        FROM Vineyards_Wines VW\n        WHERE VW.wineId = W.wineId AND VW.vineyardId = V.vineyardId\n    )\n)"
          ]
        },
        {
          "interpretation": "What name and varieties of wine are produced at every vineyard?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT V.name, W.variety\nFROM Vineyards V\nJOIN Vineyards_Wines VW ON V.vineyardId = VW.vineyardId\nJOIN Wines W ON VW.wineId = W.wineId"
          ]
        }
      ],
      "num_unique_execution_results": 7,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2857142857142857,
        "one_found": true,
        "f1_score": 0.4444444444444445,
        "num_queries": 7,
        "num_unique_queries": 7,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/scope/Agriculture/scope_vineyards_wines/scope_vineyards_wines.sqlite",
      "db_dump": "CREATE TABLE Countries(\n    countryId INTEGER PRIMARY KEY AUTOINCREMENT,\n    countryName TEXT);\nCREATE TABLE Regions(\n    regionId INTEGER PRIMARY KEY AUTOINCREMENT,\n    regionName TEXT,\n    countryId INTEGER,\n    FOREIGN KEY(countryId) REFERENCES Countries(countryId));\nCREATE TABLE VineyardTypes(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    typeName TEXT);\nCREATE TABLE Vineyards(\n    vineyardId INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    areaSize REAL,\n    typeId INTEGER,\n    regionId INTEGER,\n    FOREIGN KEY(typeId) REFERENCES VineyardTypes(id),\n    FOREIGN KEY(regionId) REFERENCES Regions(regionId));\nCREATE TABLE Vineyards_Wines(\n    vineyardId INTEGER,\n    wineId INTEGER,\n    yearProduced INTEGER,\n    FOREIGN KEY(vineyardId) REFERENCES Vineyards(vineyardId),\n    FOREIGN KEY(wineId) REFERENCES Wines(wineId),\n    PRIMARY KEY(vineyardId, wineId, yearProduced));\nCREATE TABLE Wines(\n    wineId INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    variety TEXT);\n\nINSERT INTO \"Countries\" (countryId,countryName) VALUES (1,'France'),(2,'Italy'),(3,'Spain');\nINSERT INTO \"Regions\" (regionId,regionName,countryId) VALUES (1,'Bordeaux',1),(2,'Tuscany',2),(3,'La Rioja',3);\nINSERT INTO \"VineyardTypes\" (id,typeName) VALUES (1,'Red'),(2,'White'),(3,'Ros\u00e9');\nINSERT INTO \"Vineyards\" (vineyardId,name,areaSize,typeId,regionId) VALUES (1,'Ch\u00e2teau Lafite Rothschild',500.0,1,1),(2,'Antinori Toscano',400.0,2,2),(3,'Marqu\u00e9s de Riscal',600.0,1,3),(4,'Domaine Leflaive',100.0,3,NULL),(5,'Felsina',150.0,2,2);\nINSERT INTO \"Vineyards_Wines\" (vineyardId,wineId,yearProduced) VALUES (1,1,2018),(2,2,2020),(2,2,2021),(3,3,2017),(4,3,2016),(2,1,2020),(3,1,2017),(4,1,2016),(5,1,NULL);\nINSERT INTO \"Wines\" (wineId,name,variety) VALUES (1,'Cabernet Sauvignon','Cabernet Sauvignon'),(2,'Merlot','Merlot'),(3,'Pinot Noir','Pinot Noir');\n",
      "question": "For each vineyard, show the variety and names of the wines they produce",
      "gold_queries": [
        "select vineyards.name , wines.name , wines.variety from Vineyards_Wines join Wines on Vineyards_Wines.wineId = Wines.wineId join Vineyards on Vineyards_Wines.vineyardId = Vineyards.vineyardId"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Retrieve the names of vineyards with a wine ID greater than 2.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT V.name\nFROM Vineyards V\nJOIN Vineyards_Wines VW ON V.vineyardId = VW.vineyardId\nWHERE VW.wineId > 2"
          ]
        },
        {
          "interpretation": "Show the list of wines that are produced by multiple vineyards.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT w.name\nFROM Wines w\nJOIN Vineyards_Wines vw ON w.wineId = vw.wineId\nGROUP BY w.wineId, w.name\nHAVING COUNT(DISTINCT vw.vineyardId) > 1"
          ]
        },
        {
          "interpretation": "Display the name, area size, and type (Red, White, or Ros\u00e9) for each vineyard, along with the variety and name of each wine produced.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT V.name, V.areaSize, VT.typeName, W.variety, W.name\nFROM Vineyards V\nJOIN VineyardTypes VT ON V.typeId = VT.id\nJOIN Vineyards_Wines VW ON V.vineyardId = VW.vineyardId\nJOIN Wines W ON VW.wineId = W.wineId"
          ]
        },
        {
          "interpretation": "For each vineyard region, provide the total production of 'Cabernet Sauvignon' per year.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT R.regionName, VW.yearProduced, COUNT(*) as TotalProduction\nFROM Regions R\nJOIN Vineyards V ON R.regionId = V.regionId\nJOIN Vineyards_Wines VW ON V.vineyardId = VW.vineyardId\nJOIN Wines W ON VW.wineId = W.wineId\nWHERE W.name = 'Cabernet Sauvignon'\nGROUP BY R.regionName, VW.yearProduced"
          ]
        },
        {
          "interpretation": "Return the region and country names from the Regions and Countries tables for each vineyard that produces a wine with the name 'Cabernet Sauvignon'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT R.regionName, C.countryName\nFROM Vineyards V\nJOIN Regions R ON V.regionId = R.regionId\nJOIN Countries C ON R.countryId = C.countryId\nJOIN Vineyards_Wines VW ON V.vineyardId = VW.vineyardId\nJOIN Wines W ON VW.wineId = W.wineId\nWHERE W.name = 'Cabernet Sauvignon'"
          ]
        },
        {
          "interpretation": "For each wine variety, list the vineyard names and their corresponding wine names.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT V.name AS vineyardName, W.name AS wineName, W.variety\nFROM Vineyards_Wines VW\nJOIN Wines W ON VW.wineId = W.wineId\nJOIN Vineyards V ON VW.vineyardId = V.vineyardId"
          ]
        },
        {
          "interpretation": "Show the names of vineyards that produce only one type of wine.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT V.name\nFROM Vineyards V\nJOIN Vineyards_Wines VW ON V.vineyardId = VW.vineyardId\nGROUP BY VW.vineyardId\nHAVING COUNT(DISTINCT VW.wineId) = 1"
          ]
        },
        {
          "interpretation": "Provide the total number of wines produced by each vineyard type.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT VineyardTypes.typeName, COUNT(DISTINCT Wines.wineId) as TotalWines\nFROM Vineyards\nJOIN VineyardTypes ON Vineyards.typeId = VineyardTypes.id\nJOIN Vineyards_Wines ON Vineyards.vineyardId = Vineyards_Wines.vineyardId\nJOIN Wines ON Vineyards_Wines.wineId = Wines.wineId\nGROUP BY VineyardTypes.typeName"
          ]
        },
        {
          "interpretation": "Calculate the total number of vineyards across different regions and display the wine names and varieties produced by these vineyards.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT r.regionName, COUNT(v.vineyardId) AS total_vineyards, w.name AS wine_name, w.variety AS wine_variety\nFROM Regions r\nLEFT JOIN Vineyards v ON r.regionId = v.regionId\nLEFT JOIN Vineyards_Wines vw ON v.vineyardId = vw.vineyardId\nLEFT JOIN Wines w ON vw.wineId = w.wineId\nGROUP BY r.regionName, w.name, w.variety"
          ]
        },
        {
          "interpretation": "Show the list of countries where vineyards are located, along with the names of their region and the name of the wine, 'Cabernet Sauvignon'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.countryName, R.regionName, W.name\nFROM Countries C\nJOIN Regions R ON C.countryId = R.countryId\nJOIN Vineyards V ON R.regionId = V.regionId\nJOIN Vineyards_Wines VW ON V.vineyardId = VW.vineyardId\nJOIN Wines W ON VW.wineId = W.wineId\nWHERE W.name = 'Cabernet Sauvignon'"
          ]
        },
        {
          "interpretation": "Show the maximum number of different wines produced by each vineyard.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT V.name, COUNT(DISTINCT VW.wineId) AS maxDifferentWines\nFROM Vineyards V\nJOIN Vineyards_Wines VW ON V.vineyardId = VW.vineyardId\nGROUP BY V.vineyardId"
          ]
        },
        {
          "interpretation": "Show a list of all vineyards that are not region-specific  along with their details and wine information.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT V.*, W.name AS wineName, W.variety\nFROM Vineyards V\nLEFT JOIN Vineyards_Wines VW ON V.vineyardId = VW.vineyardId\nLEFT JOIN Wines W ON VW.wineId = W.wineId\nWHERE V.regionId IS NULL"
          ]
        },
        {
          "interpretation": "Retrieve a list of vineyards along with the number of years they produce a particular wine.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT V.name, COUNT(VW.yearProduced) AS yearsProduced\nFROM Vineyards V\nJOIN Vineyards_Wines VW ON V.vineyardId = VW.vineyardId\nGROUP BY V.vineyardId"
          ]
        },
        {
          "interpretation": "List the total number of white wines produced by each vineyard that produces white wines.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT V.name, COUNT(*) AS total_white_wines\nFROM Vineyards V\nJOIN Vineyards_Wines VW ON V.vineyardId = VW.vineyardId\nJOIN Wines W ON VW.wineId = W.wineId\nJOIN VineyardTypes VT ON V.typeId = VT.id\nWHERE VT.typeName = 'White'\nGROUP BY V.name"
          ]
        },
        {
          "interpretation": "List the total number of different wines produced by vineyards that have an area size less than 200 square meters.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(DISTINCT w.wineId)\nFROM Vineyards_Wines vw\nJOIN Vineyards v ON vw.vineyardId = v.vineyardId\nJOIN Wines w ON vw.wineId = w.wineId\nWHERE v.areaSize < 200"
          ]
        },
        {
          "interpretation": "Display a list of all Red wines with details of vineyards that produce those wines, such as region, country, and year produced.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T4.wineId, T4.name, T5.regionName, T6.countryName, T3.yearProduced\nFROM Wines AS T4\nJOIN Vineyards_Wines AS T3 ON T4.wineId = T3.wineId\nJOIN Vineyards AS T2 ON T3.vineyardId = T2.vineyardId\nJOIN VineyardTypes AS T1 ON T2.typeId = T1.id\nJOIN Regions AS T5 ON T2.regionId = T5.regionId\nJOIN Countries AS T6 ON T5.countryId = T6.countryId\nWHERE T1.typeName = 'Red'"
          ]
        },
        {
          "interpretation": "For each vineyard type, list the names of vineyards that produce each type of wine and display it as a table with Blue, red, and green colors for the corresponding types.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \nCASE WHEN VT.typeName = 'Blue' THEN V.name END AS \"Blue\",\nCASE WHEN VT.typeName = 'Red' THEN V.name END AS \"Red\",\nCASE WHEN VT.typeName = 'White' THEN V.name END AS \"White\"\nFROM Vineyards V\nJOIN VineyardTypes VT ON V.typeId = VT.id"
          ]
        },
        {
          "interpretation": "List the names of wines that are not produced by the majority of vineyards.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name FROM Wines WHERE wineId NOT IN (SELECT wineId FROM Vineyards_Wines GROUP BY wineId ORDER BY COUNT(vineyardId) DESC LIMIT 1)"
          ]
        },
        {
          "interpretation": "Provide a list of vineyards with the names of the wines and their corresponding varieties they produce, along with the number of years they produce those wines.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT V1.name AS vineyard_name, W1.name AS wine_name, W1.variety, COUNT(VW1.yearProduced) AS years_produced\nFROM Vineyards V1\nJOIN Vineyards_Wines VW1 ON V1.vineyardId = VW1.vineyardId\nJOIN Wines W1 ON VW1.wineId = W1.wineId\nGROUP BY V1.name, W1.name, W1.variety"
          ]
        },
        {
          "interpretation": "For each wine, provide the list of vineyards that produce that wine, along with the area size of the vineyard.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT W.name AS WineName, V.name AS VineyardName, V.areaSize\nFROM Wines W\nJOIN Vineyards_Wines VW ON W.wineId = VW.wineId\nJOIN Vineyards V ON VW.vineyardId = V.vineyardId"
          ]
        }
      ],
      "num_unique_execution_results": 20,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.05,
        "one_found": true,
        "f1_score": 0.09523809523809523,
        "num_queries": 20,
        "num_unique_queries": 20,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Agriculture/scope_vineyards_wines/scope_vineyards_wines.sqlite",
      "db_dump": "CREATE TABLE Countries(\n    countryId INTEGER PRIMARY KEY AUTOINCREMENT,\n    countryName TEXT);\nCREATE TABLE Regions(\n    regionId INTEGER PRIMARY KEY AUTOINCREMENT,\n    regionName TEXT,\n    countryId INTEGER,\n    FOREIGN KEY(countryId) REFERENCES Countries(countryId));\nCREATE TABLE VineyardTypes(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    typeName TEXT);\nCREATE TABLE Vineyards(\n    vineyardId INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    areaSize REAL,\n    typeId INTEGER,\n    regionId INTEGER,\n    FOREIGN KEY(typeId) REFERENCES VineyardTypes(id),\n    FOREIGN KEY(regionId) REFERENCES Regions(regionId));\nCREATE TABLE Vineyards_Wines(\n    vineyardId INTEGER,\n    wineId INTEGER,\n    yearProduced INTEGER,\n    FOREIGN KEY(vineyardId) REFERENCES Vineyards(vineyardId),\n    FOREIGN KEY(wineId) REFERENCES Wines(wineId),\n    PRIMARY KEY(vineyardId, wineId, yearProduced));\nCREATE TABLE Wines(\n    wineId INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    variety TEXT);\n\nINSERT INTO \"Countries\" (countryId,countryName) VALUES (1,'France'),(2,'Italy'),(3,'Spain');\nINSERT INTO \"Regions\" (regionId,regionName,countryId) VALUES (1,'Bordeaux',1),(2,'Tuscany',2),(3,'La Rioja',3);\nINSERT INTO \"VineyardTypes\" (id,typeName) VALUES (1,'Red'),(2,'White'),(3,'Ros\u00e9');\nINSERT INTO \"Vineyards\" (vineyardId,name,areaSize,typeId,regionId) VALUES (1,'Ch\u00e2teau Lafite Rothschild',500.0,1,1),(2,'Antinori Toscano',400.0,2,2),(3,'Marqu\u00e9s de Riscal',600.0,1,3),(4,'Domaine Leflaive',100.0,3,NULL),(5,'Felsina',150.0,2,2);\nINSERT INTO \"Vineyards_Wines\" (vineyardId,wineId,yearProduced) VALUES (1,1,2018),(2,2,2020),(2,2,2021),(3,3,2017),(4,3,2016),(2,1,2020),(3,1,2017),(4,1,2016),(5,1,NULL);\nINSERT INTO \"Wines\" (wineId,name,variety) VALUES (1,'Cabernet Sauvignon','Cabernet Sauvignon'),(2,'Merlot','Merlot'),(3,'Pinot Noir','Pinot Noir');\n",
      "question": "What types of wines are typical for all vineyards?",
      "gold_queries": [
        "SELECT Wines.variety  from Vineyards_Wines join Wines on Vineyards_Wines.wineId = Wines.wineId join Vineyards on Vineyards_Wines.vineyardId = Vineyards.vineyardId   GROUP BY Vineyards_Wines.wineId HAVING COUNT(DISTINCT Vineyards_Wines.vineyardId) = (SELECT COUNT(*) FROM  Vineyards)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "The question asks for the most represented wine type across all vineyards, potentially including types common to very small vineyards.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT variety FROM Wines WHERE wineId IN (SELECT wineId FROM Vineyards_Wines GROUP BY wineId ORDER BY COUNT(*) DESC LIMIT 1)"
          ]
        },
        {
          "interpretation": "The question asks for the intersection of all wine types found in each vineyard.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT W.wineId, W.name\nFROM Wines W\nWHERE W.wineId IN (\n    SELECT vw.wineId\n    FROM Vineyards_Wines vw\n    GROUP BY vw.wineId\n    HAVING COUNT(DISTINCT vw.vineyardId) = (SELECT COUNT(*) FROM Vineyards)\n)"
          ]
        },
        {
          "interpretation": "The question asks for the most common wine type that can be found across all vineyards.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT variety, COUNT(*) as count FROM Wines JOIN Vineyards_Wines ON Wines.wineId = Vineyards_Wines.wineId GROUP BY variety ORDER BY count DESC LIMIT 1"
          ]
        },
        {
          "interpretation": "The question asks for a list of distinct wine types found across all vineyards, excluding those found in only one vineyard.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT T1.name \nFROM Wines AS T1 \nJOIN Vineyards_Wines AS T2 ON T1.wineId = T2.wineId \nGROUP BY T1.name \nHAVING COUNT(DISTINCT T2.vineyardId) > 1"
          ]
        },
        {
          "interpretation": "The question asks for wine types typical for vineyards in each region, disregarding differences between vineyards.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Regions.regionName, Wines.variety\nFROM Vineyards\nJOIN Vineyards_Wines ON Vineyards.vineyardId = Vineyards_Wines.vineyardId\nJOIN Regions ON Vineyards.regionId = Regions.regionId\nJOIN Wines ON Vineyards_Wines.wineId = Wines.wineId\nGROUP BY Regions.regionName, Wines.variety"
          ]
        },
        {
          "interpretation": "The question asks for wine types exclusive to specific vineyards, particularly focusing on any excluded types.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT w.name, w.variety\nFROM Wines w\nLEFT JOIN Vineyards_Wines vw ON w.wineId = vw.wineId\nWHERE vw.wineId IS NULL"
          ]
        },
        {
          "interpretation": "The question asks for wine types typical for the entire set of vineyards as a whole.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT WT.typeName \nFROM VineyardTypes WT \nJOIN Vineyards V ON WT.id = V.typeId"
          ]
        }
      ],
      "num_unique_execution_results": 7,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.14285714285714285,
        "one_found": true,
        "f1_score": 0.25,
        "num_queries": 7,
        "num_unique_queries": 7,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Agriculture/scope_vineyards_wines/scope_vineyards_wines.sqlite",
      "db_dump": "CREATE TABLE Countries(\n    countryId INTEGER PRIMARY KEY AUTOINCREMENT,\n    countryName TEXT);\nCREATE TABLE Regions(\n    regionId INTEGER PRIMARY KEY AUTOINCREMENT,\n    regionName TEXT,\n    countryId INTEGER,\n    FOREIGN KEY(countryId) REFERENCES Countries(countryId));\nCREATE TABLE VineyardTypes(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    typeName TEXT);\nCREATE TABLE Vineyards(\n    vineyardId INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    areaSize REAL,\n    typeId INTEGER,\n    regionId INTEGER,\n    FOREIGN KEY(typeId) REFERENCES VineyardTypes(id),\n    FOREIGN KEY(regionId) REFERENCES Regions(regionId));\nCREATE TABLE Vineyards_Wines(\n    vineyardId INTEGER,\n    wineId INTEGER,\n    yearProduced INTEGER,\n    FOREIGN KEY(vineyardId) REFERENCES Vineyards(vineyardId),\n    FOREIGN KEY(wineId) REFERENCES Wines(wineId),\n    PRIMARY KEY(vineyardId, wineId, yearProduced));\nCREATE TABLE Wines(\n    wineId INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    variety TEXT);\n\nINSERT INTO \"Countries\" (countryId,countryName) VALUES (1,'France'),(2,'Italy'),(3,'Spain');\nINSERT INTO \"Regions\" (regionId,regionName,countryId) VALUES (1,'Bordeaux',1),(2,'Tuscany',2),(3,'La Rioja',3);\nINSERT INTO \"VineyardTypes\" (id,typeName) VALUES (1,'Red'),(2,'White'),(3,'Ros\u00e9');\nINSERT INTO \"Vineyards\" (vineyardId,name,areaSize,typeId,regionId) VALUES (1,'Ch\u00e2teau Lafite Rothschild',500.0,1,1),(2,'Antinori Toscano',400.0,2,2),(3,'Marqu\u00e9s de Riscal',600.0,1,3),(4,'Domaine Leflaive',100.0,3,NULL),(5,'Felsina',150.0,2,2);\nINSERT INTO \"Vineyards_Wines\" (vineyardId,wineId,yearProduced) VALUES (1,1,2018),(2,2,2020),(2,2,2021),(3,3,2017),(4,3,2016),(2,1,2020),(3,1,2017),(4,1,2016),(5,1,NULL);\nINSERT INTO \"Wines\" (wineId,name,variety) VALUES (1,'Cabernet Sauvignon','Cabernet Sauvignon'),(2,'Merlot','Merlot'),(3,'Pinot Noir','Pinot Noir');\n",
      "question": "For each vineyard, what is the variety of wines there",
      "gold_queries": [
        "select vineyards.name , wines.variety from Vineyards_Wines join Wines on Vineyards_Wines.wineId = Wines.wineId join Vineyards on Vineyards_Wines.vineyardId = Vineyards.vineyardId"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What is the minimum, average, and maximum number of wine varieties produced by each vineyard?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT V.name, MIN(wine_count) AS min_varieties, AVG(wine_count) AS avg_varieties, MAX(wine_count) AS max_varieties\nFROM (\n    SELECT vw.vineyardId, COUNT(DISTINCT vw.wineId) AS wine_count\n    FROM Vineyards_Wines vw\n    GROUP BY vw.vineyardId\n) AS subquery\nJOIN Vineyards V ON subquery.vineyardId = V.vineyardId\nGROUP BY V.name"
          ]
        },
        {
          "interpretation": "List the wine varieties produced in each vineyard, grouped by vineyard.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT V.name AS Vineyard, W.variety AS Wine_Variety\nFROM Vineyards_Wines VW\nJOIN Vineyards V ON VW.vineyardId = V.vineyardId\nJOIN Wines W ON VW.wineId = W.wineId\nGROUP BY V.name, W.variety"
          ]
        },
        {
          "interpretation": "List the wine varieties that are not produced in any vineyard.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT variety FROM Wines WHERE wineId NOT IN (SELECT wineId FROM Vineyards_Wines)"
          ]
        },
        {
          "interpretation": "For each distinct vineyard, list the names and varieties of all wines produced.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT V.name, W.name, W.variety\nFROM Vineyards V\nJOIN Vineyards_Wines VW ON V.vineyardId = VW.vineyardId\nJOIN Wines W ON VW.wineId = W.wineId"
          ]
        },
        {
          "interpretation": "Get the vineyard with the highest number of distinct wine varieties produced.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT V.name\nFROM Vineyards V\nJOIN Vineyards_Wines VW ON V.vineyardId = VW.vineyardId\nJOIN Wines W ON VW.wineId = W.wineId\nGROUP BY V.vineyardId\nORDER BY COUNT(DISTINCT W.variety) DESC\nLIMIT 1"
          ]
        },
        {
          "interpretation": "What is the percentage of red, white, and ros\u00e9 wine varieties produced by each vineyard?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT V.name, VT.typeName, COUNT(VW.wineId) * 100.0 / SUM(COUNT(VW.wineId)) OVER (PARTITION BY V.vineyardId) AS Percentage\nFROM Vineyards V\nJOIN Vineyards_Wines VW ON V.vineyardId = VW.vineyardId\nJOIN VineyardTypes VT ON V.typeId = VT.id\nGROUP BY V.vineyardId, VT.typeName"
          ]
        },
        {
          "interpretation": "For each wine variety, list the names of all vineyards that produce that variety.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT W.variety, V.name\nFROM Wines W\nJOIN Vineyards_Wines VW ON W.wineId = VW.wineId\nJOIN Vineyards V ON VW.vineyardId = V.vineyardId"
          ]
        },
        {
          "interpretation": "Get the wine varieties that are the least and most produced in the database.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT variety FROM Wines WHERE wineId = (SELECT wineId FROM Vineyards_Wines GROUP BY wineId ORDER BY COUNT(*) ASC LIMIT 1) UNION SELECT variety FROM Wines WHERE wineId = (SELECT wineId FROM Vineyards_Wines GROUP BY wineId ORDER BY COUNT(*) DESC LIMIT 1)"
          ]
        },
        {
          "interpretation": "For each wine variety, list the total area of vineyards that produce that variety.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT W.variety, SUM(V.areaSize) AS totalArea\nFROM Wines W\nJOIN Vineyards_Wines VW ON W.wineId = VW.wineId\nJOIN Vineyards V ON VW.vineyardId = V.vineyardId\nGROUP BY W.variety"
          ]
        },
        {
          "interpretation": "Determine the wine varieties that are typically produced in a specific region.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT T4.variety\nFROM Regions T1\nJOIN Vineyards T2 ON T1.regionId = T2.regionId\nJOIN Vineyards_Wines T3 ON T2.vineyardId = T3.vineyardId\nJOIN Wines T4 ON T3.wineId = T4.wineId\nWHERE T1.regionName = 'Bordeaux'"
          ]
        }
      ],
      "num_unique_execution_results": 10,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.1,
        "one_found": true,
        "f1_score": 0.18181818181818182,
        "num_queries": 10,
        "num_unique_queries": 10,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Agriculture/scope_vineyards_wines/scope_vineyards_wines.sqlite",
      "db_dump": "CREATE TABLE Countries(\n    countryId INTEGER PRIMARY KEY AUTOINCREMENT,\n    countryName TEXT);\nCREATE TABLE Regions(\n    regionId INTEGER PRIMARY KEY AUTOINCREMENT,\n    regionName TEXT,\n    countryId INTEGER,\n    FOREIGN KEY(countryId) REFERENCES Countries(countryId));\nCREATE TABLE VineyardTypes(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    typeName TEXT);\nCREATE TABLE Vineyards(\n    vineyardId INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    areaSize REAL,\n    typeId INTEGER,\n    regionId INTEGER,\n    FOREIGN KEY(typeId) REFERENCES VineyardTypes(id),\n    FOREIGN KEY(regionId) REFERENCES Regions(regionId));\nCREATE TABLE Vineyards_Wines(\n    vineyardId INTEGER,\n    wineId INTEGER,\n    yearProduced INTEGER,\n    FOREIGN KEY(vineyardId) REFERENCES Vineyards(vineyardId),\n    FOREIGN KEY(wineId) REFERENCES Wines(wineId),\n    PRIMARY KEY(vineyardId, wineId, yearProduced));\nCREATE TABLE Wines(\n    wineId INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    variety TEXT);\n\nINSERT INTO \"Countries\" (countryId,countryName) VALUES (1,'France'),(2,'Italy'),(3,'Spain');\nINSERT INTO \"Regions\" (regionId,regionName,countryId) VALUES (1,'Bordeaux',1),(2,'Tuscany',2),(3,'La Rioja',3);\nINSERT INTO \"VineyardTypes\" (id,typeName) VALUES (1,'Red'),(2,'White'),(3,'Ros\u00e9');\nINSERT INTO \"Vineyards\" (vineyardId,name,areaSize,typeId,regionId) VALUES (1,'Ch\u00e2teau Lafite Rothschild',500.0,1,1),(2,'Antinori Toscano',400.0,2,2),(3,'Marqu\u00e9s de Riscal',600.0,1,3),(4,'Domaine Leflaive',100.0,3,NULL),(5,'Felsina',150.0,2,2);\nINSERT INTO \"Vineyards_Wines\" (vineyardId,wineId,yearProduced) VALUES (1,1,2018),(2,2,2020),(2,2,2021),(3,3,2017),(4,3,2016),(2,1,2020),(3,1,2017),(4,1,2016),(5,1,NULL);\nINSERT INTO \"Wines\" (wineId,name,variety) VALUES (1,'Cabernet Sauvignon','Cabernet Sauvignon'),(2,'Merlot','Merlot'),(3,'Pinot Noir','Pinot Noir');\n",
      "question": "What types of wines do we have in each vineyard?",
      "gold_queries": [
        "SELECT Wines.variety  from Vineyards_Wines join Wines on Vineyards_Wines.wineId = Wines.wineId join Vineyards on Vineyards_Wines.vineyardId = Vineyards.vineyardId   GROUP BY Vineyards_Wines.wineId HAVING COUNT(DISTINCT Vineyards_Wines.vineyardId) = (SELECT COUNT(*) FROM  Vineyards)",
        "select vineyards.name , wines.variety from Vineyards_Wines join Wines on Vineyards_Wines.wineId = Wines.wineId join Vineyards on Vineyards_Wines.vineyardId = Vineyards.vineyardId"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What are all wine varieties (Wines.variety) that can be found in each vineyard (Vineyards.vineyardId) that produces wines?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Vineyards.vineyardId, Wines.variety\nFROM Vineyards\nJOIN Vineyards_Wines ON Vineyards.vineyardId = Vineyards_Wines.vineyardId\nJOIN Wines ON Vineyards_Wines.wineId = Wines.wineId"
          ]
        },
        {
          "interpretation": "List each vineyard's (Vineyards.name) wine production breakdown by different types (VineyardTypes.typeName).",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT V.name AS VineyardName, VT.typeName AS VineyardType, COUNT(VW.wineId) AS WineCount\nFROM Vineyards V\nJOIN VineyardTypes VT ON V.typeId = VT.id\nLEFT JOIN Vineyards_Wines VW ON V.vineyardId = VW.vineyardId\nGROUP BY V.name, VT.typeName"
          ]
        },
        {
          "interpretation": "What is each vineyard's (Vineyards.name) output in terms of wine type (VineyardTypes.typeName)?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT V.name, VT.typeName \nFROM Vineyards V \nJOIN VineyardTypes VT ON V.typeId = VT.id"
          ]
        },
        {
          "interpretation": "What types of wine does each vineyard (Vineyards.name) produce that belongs to a certain type (VineyardTypes.typeName)?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT V.name, VT.typeName, W.name\nFROM Vineyards V\nJOIN Vineyards_Wines VW ON V.vineyardId = VW.vineyardId\nJOIN VineyardTypes VT ON V.typeId = VT.id\nJOIN Wines W ON VW.wineId = W.wineId"
          ]
        },
        {
          "interpretation": "What types of wines (VineyardTypes.typeName) are made in each region (Regions.regionName) including the number of vineyards that produce each type?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Regions.regionName, VineyardTypes.typeName, COUNT(Vineyards.vineyardId) AS numberOfVineyards\nFROM Regions\nJOIN Vineyards ON Regions.regionId = Vineyards.regionId\nJOIN VineyardTypes ON Vineyards.typeId = VineyardTypes.id\nGROUP BY Regions.regionName, VineyardTypes.typeName"
          ]
        },
        {
          "interpretation": "What are all wine types (Wines.variety) being produced by vineyards (Vineyards.vineyardId) including the year they were produced (Vineyards_Wines.yearProduced)?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Wines.variety, Vineyards_Wines.yearProduced FROM Wines\nJOIN Vineyards_Wines ON Wines.wineId = Vineyards_Wines.wineId"
          ]
        },
        {
          "interpretation": "What types of wine (VineyardTypes.typeName) and the corresponding varieties (Wines.variety) can be found in vineyards (Vineyards.vineyardId) located in a specific region (Regions.regionName)?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT VineyardTypes.typeName, Wines.variety \nFROM Vineyards \nJOIN Vineyards_Wines ON Vineyards.vineyardId = Vineyards_Wines.vineyardId \nJOIN Wines ON Vineyards_Wines.wineId = Wines.wineId \nJOIN VineyardTypes ON Vineyards.typeId = VineyardTypes.id \nJOIN Regions ON Vineyards.regionId = Regions.regionId \nWHERE Regions.regionName = 'Specific Region Name'"
          ]
        },
        {
          "interpretation": "What types of wines do we have in each region (Regions.regionName) and the vineyards (Vineyards.name) within that region?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT R.regionName, V.name AS vineyardName, W.name AS wineName\nFROM Regions R\nJOIN Vineyards V ON R.regionId = V.regionId\nJOIN Vineyards_Wines VW ON V.vineyardId = VW.vineyardId\nJOIN Wines W ON VW.wineId = W.wineId"
          ]
        },
        {
          "interpretation": "What types of wine (VineyardTypes.typeName) exist in each vineyard (Vineyards.vineyardId) in the database?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT vineyards.vineyardId, vineyardtypes.typeName\nFROM vineyards\nJOIN vineyardtypes ON vineyards.typeId = vineyardtypes.id"
          ]
        },
        {
          "interpretation": "What types of vineyards (VineyardTypes.typeName) in each region (Regions.regionId) produce a certain type of wine (VineyardTypes.typeName)?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT VT.typeName, R.regionId\nFROM VineyardTypes VT\nJOIN Vineyards V ON VT.id = V.typeId\nJOIN Regions R ON V.regionId = R.regionId"
          ]
        },
        {
          "interpretation": "What types of wine (VineyardTypes.typeName) were produced by vineyard (Vineyards.vineyardId) that is not associated with any region?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT VineyardTypes.typeName \nFROM Vineyards \nJOIN VineyardTypes ON Vineyards.typeId = VineyardTypes.id \nWHERE Vineyards.regionId IS NULL"
          ]
        },
        {
          "interpretation": "What are all the wines that were produced at a vineyard (Vineyards.name) by type (VineyardTypes.typeName)?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT W.name, VT.typeName \nFROM Wines W \nJOIN Vineyards_Wines VW ON W.wineId = VW.wineId \nJOIN Vineyards V ON VW.vineyardId = V.vineyardId \nJOIN VineyardTypes VT ON V.typeId = VT.id"
          ]
        },
        {
          "interpretation": "What types of wine are produced by each vineyard (Vineyards.name) and its location (Regions.regionName, Countries.countryName)?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT V.name, R.regionName, C.countryName, W.name AS wineType\nFROM Vineyards V\nJOIN Vineyards_Wines VW ON V.vineyardId = VW.vineyardId\nJOIN Wines W ON VW.wineId = W.wineId\nJOIN Regions R ON V.regionId = R.regionId\nJOIN Countries C ON R.countryId = C.countryId"
          ]
        }
      ],
      "num_unique_execution_results": 13,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 13,
        "num_unique_queries": 13,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Agriculture/scope_vineyards_wines/scope_vineyards_wines.sqlite",
      "db_dump": "CREATE TABLE Countries(\n    countryId INTEGER PRIMARY KEY AUTOINCREMENT,\n    countryName TEXT);\nCREATE TABLE Regions(\n    regionId INTEGER PRIMARY KEY AUTOINCREMENT,\n    regionName TEXT,\n    countryId INTEGER,\n    FOREIGN KEY(countryId) REFERENCES Countries(countryId));\nCREATE TABLE VineyardTypes(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    typeName TEXT);\nCREATE TABLE Vineyards(\n    vineyardId INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    areaSize REAL,\n    typeId INTEGER,\n    regionId INTEGER,\n    FOREIGN KEY(typeId) REFERENCES VineyardTypes(id),\n    FOREIGN KEY(regionId) REFERENCES Regions(regionId));\nCREATE TABLE Vineyards_Wines(\n    vineyardId INTEGER,\n    wineId INTEGER,\n    yearProduced INTEGER,\n    FOREIGN KEY(vineyardId) REFERENCES Vineyards(vineyardId),\n    FOREIGN KEY(wineId) REFERENCES Wines(wineId),\n    PRIMARY KEY(vineyardId, wineId, yearProduced));\nCREATE TABLE Wines(\n    wineId INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    variety TEXT);\n\nINSERT INTO \"Countries\" (countryId,countryName) VALUES (1,'France'),(2,'Italy'),(3,'Spain');\nINSERT INTO \"Regions\" (regionId,regionName,countryId) VALUES (1,'Bordeaux',1),(2,'Tuscany',2),(3,'La Rioja',3);\nINSERT INTO \"VineyardTypes\" (id,typeName) VALUES (1,'Red'),(2,'White'),(3,'Ros\u00e9');\nINSERT INTO \"Vineyards\" (vineyardId,name,areaSize,typeId,regionId) VALUES (1,'Ch\u00e2teau Lafite Rothschild',500.0,1,1),(2,'Antinori Toscano',400.0,2,2),(3,'Marqu\u00e9s de Riscal',600.0,1,3),(4,'Domaine Leflaive',100.0,3,NULL),(5,'Felsina',150.0,2,2);\nINSERT INTO \"Vineyards_Wines\" (vineyardId,wineId,yearProduced) VALUES (1,1,2018),(2,2,2020),(2,2,2021),(3,3,2017),(4,3,2016),(2,1,2020),(3,1,2017),(4,1,2016),(5,1,NULL);\nINSERT INTO \"Wines\" (wineId,name,variety) VALUES (1,'Cabernet Sauvignon','Cabernet Sauvignon'),(2,'Merlot','Merlot'),(3,'Pinot Noir','Pinot Noir');\n",
      "question": "List the wines produced at each vineyard.",
      "gold_queries": [
        "SELECT Wines.name  from Vineyards_Wines join Wines on Vineyards_Wines.wineId = Wines.wineId join Vineyards on Vineyards_Wines.vineyardId = Vineyards.vineyardId   GROUP BY Vineyards_Wines.wineId HAVING COUNT(DISTINCT Vineyards_Wines.vineyardId) = (SELECT COUNT(*) FROM  Vineyards)",
        "select vineyards.name , wines.name from Vineyards_Wines join Wines on Vineyards_Wines.wineId = Wines.wineId join Vineyards on Vineyards_Wines.vineyardId = Vineyards.vineyardId"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List the wineId for each (vineyardId, yearProduced) pair from Vineyards_Wines, ignoring the duplicate years.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT vineyardId, yearProduced, wineId FROM Vineyards_Wines"
          ]
        },
        {
          "interpretation": "Retrieve all distinct (vineyardId, name, areaSize, typeId) from the Vineyards table and provide all associated wineId/yearProduced pairs.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT V.vineyardId, V.name, V.areaSize, V.typeId, VW.wineId, VW.yearProduced\nFROM Vineyards V\nJOIN Vineyards_Wines VW ON V.vineyardId = VW.vineyardId"
          ]
        },
        {
          "interpretation": "List the pairs of (wineId, yearProduced) from the Vineyards_Wines table, grouping by wineId.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT wineId, yearProduced FROM Vineyards_Wines GROUP BY wineId, yearProduced"
          ]
        },
        {
          "interpretation": "List wineId for each vineyard, ignoring the yearProduced.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT vineyardId, wineId FROM Vineyards_Wines"
          ]
        },
        {
          "interpretation": "Retrieve wineId pairs from Vineyards_Wines, grouping by wineId, where yearProduced is not null.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT wineId\nFROM Vineyards_Wines\nWHERE yearProduced IS NOT NULL\nGROUP BY wineId"
          ]
        },
        {
          "interpretation": "Return all columns from Vineyards_Wines where a yearProduced is available.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Vineyards_Wines WHERE yearProduced IS NOT NULL"
          ]
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Agriculture/scope_vineyards_wines/scope_vineyards_wines.sqlite",
      "db_dump": "CREATE TABLE Countries(\n    countryId INTEGER PRIMARY KEY AUTOINCREMENT,\n    countryName TEXT);\nCREATE TABLE Regions(\n    regionId INTEGER PRIMARY KEY AUTOINCREMENT,\n    regionName TEXT,\n    countryId INTEGER,\n    FOREIGN KEY(countryId) REFERENCES Countries(countryId));\nCREATE TABLE VineyardTypes(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    typeName TEXT);\nCREATE TABLE Vineyards(\n    vineyardId INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    areaSize REAL,\n    typeId INTEGER,\n    regionId INTEGER,\n    FOREIGN KEY(typeId) REFERENCES VineyardTypes(id),\n    FOREIGN KEY(regionId) REFERENCES Regions(regionId));\nCREATE TABLE Vineyards_Wines(\n    vineyardId INTEGER,\n    wineId INTEGER,\n    yearProduced INTEGER,\n    FOREIGN KEY(vineyardId) REFERENCES Vineyards(vineyardId),\n    FOREIGN KEY(wineId) REFERENCES Wines(wineId),\n    PRIMARY KEY(vineyardId, wineId, yearProduced));\nCREATE TABLE Wines(\n    wineId INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    variety TEXT);\n\nINSERT INTO \"Countries\" (countryId,countryName) VALUES (1,'France'),(2,'Italy'),(3,'Spain');\nINSERT INTO \"Regions\" (regionId,regionName,countryId) VALUES (1,'Bordeaux',1),(2,'Tuscany',2),(3,'La Rioja',3);\nINSERT INTO \"VineyardTypes\" (id,typeName) VALUES (1,'Red'),(2,'White'),(3,'Ros\u00e9');\nINSERT INTO \"Vineyards\" (vineyardId,name,areaSize,typeId,regionId) VALUES (1,'Ch\u00e2teau Lafite Rothschild',500.0,1,1),(2,'Antinori Toscano',400.0,2,2),(3,'Marqu\u00e9s de Riscal',600.0,1,3),(4,'Domaine Leflaive',100.0,3,NULL),(5,'Felsina',150.0,2,2);\nINSERT INTO \"Vineyards_Wines\" (vineyardId,wineId,yearProduced) VALUES (1,1,2018),(2,2,2020),(2,2,2021),(3,3,2017),(4,3,2016),(2,1,2020),(3,1,2017),(4,1,2016),(5,1,NULL);\nINSERT INTO \"Wines\" (wineId,name,variety) VALUES (1,'Cabernet Sauvignon','Cabernet Sauvignon'),(2,'Merlot','Merlot'),(3,'Pinot Noir','Pinot Noir');\n",
      "question": "Show the name and variety of wines that are common to all vineyards",
      "gold_queries": [
        "SELECT Wines.name, Wines.variety  from Vineyards_Wines join Wines on Vineyards_Wines.wineId = Wines.wineId join Vineyards on Vineyards_Wines.vineyardId = Vineyards.vineyardId   GROUP BY Vineyards_Wines.wineId HAVING COUNT(DISTINCT Vineyards_Wines.vineyardId) = (SELECT COUNT(*) FROM  Vineyards)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Show the names and varieties of wines that exist in all vineyards regardless of their year of production.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT W.name, W.variety\nFROM Wines W\nWHERE NOT EXISTS (\n    SELECT V.vineyardId\n    FROM Vineyards V\n    WHERE NOT EXISTS (\n        SELECT VW.wineId\n        FROM Vineyards_Wines VW\n        WHERE VW.vineyardId = V.vineyardId AND VW.wineId = W.wineId\n    )\n)"
          ]
        },
        {
          "interpretation": "Show the names and varieties of wines that can be universally associated with every vineyard, disregarding the 'null' year field.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT W.name, W.variety\nFROM Wines W\nWHERE W.wineId IN (\n    SELECT VW.wineId\n    FROM Vineyards_Wines VW\n    WHERE VW.yearProduced IS NOT NULL\n    GROUP BY VW.wineId\n    HAVING COUNT(DISTINCT VW.vineyardId) = (SELECT COUNT(*) FROM Vineyards)\n)"
          ]
        },
        {
          "interpretation": "Show the names and varieties of wines that are shared by all vineyards of a given size class.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT w.name, w.variety\nFROM Wines w\nWHERE w.wineId IN (\n    SELECT vw.wineId\n    FROM Vineyards_Wines vw\n    JOIN Vineyards v ON vw.vineyardId = v.vineyardId\n    WHERE v.areaSize = (SELECT MIN(areaSize) FROM Vineyards) -- Change this to any specific size class\n    GROUP BY vw.wineId\n    HAVING COUNT(DISTINCT v.vineyardId) = (\n        SELECT COUNT(*)\n        FROM Vineyards\n        WHERE areaSize = (SELECT MIN(areaSize) FROM Vineyards) -- Change this to any specific size class\n    )\n)"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "one_found": true,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Agriculture/scope_vineyards_wines/scope_vineyards_wines.sqlite",
      "db_dump": "CREATE TABLE Countries(\n    countryId INTEGER PRIMARY KEY AUTOINCREMENT,\n    countryName TEXT);\nCREATE TABLE Regions(\n    regionId INTEGER PRIMARY KEY AUTOINCREMENT,\n    regionName TEXT,\n    countryId INTEGER,\n    FOREIGN KEY(countryId) REFERENCES Countries(countryId));\nCREATE TABLE VineyardTypes(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    typeName TEXT);\nCREATE TABLE Vineyards(\n    vineyardId INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    areaSize REAL,\n    typeId INTEGER,\n    regionId INTEGER,\n    FOREIGN KEY(typeId) REFERENCES VineyardTypes(id),\n    FOREIGN KEY(regionId) REFERENCES Regions(regionId));\nCREATE TABLE Vineyards_Wines(\n    vineyardId INTEGER,\n    wineId INTEGER,\n    yearProduced INTEGER,\n    FOREIGN KEY(vineyardId) REFERENCES Vineyards(vineyardId),\n    FOREIGN KEY(wineId) REFERENCES Wines(wineId),\n    PRIMARY KEY(vineyardId, wineId, yearProduced));\nCREATE TABLE Wines(\n    wineId INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    variety TEXT);\n\nINSERT INTO \"Countries\" (countryId,countryName) VALUES (1,'France'),(2,'Italy'),(3,'Spain');\nINSERT INTO \"Regions\" (regionId,regionName,countryId) VALUES (1,'Bordeaux',1),(2,'Tuscany',2),(3,'La Rioja',3);\nINSERT INTO \"VineyardTypes\" (id,typeName) VALUES (1,'Red'),(2,'White'),(3,'Ros\u00e9');\nINSERT INTO \"Vineyards\" (vineyardId,name,areaSize,typeId,regionId) VALUES (1,'Ch\u00e2teau Lafite Rothschild',500.0,1,1),(2,'Antinori Toscano',400.0,2,2),(3,'Marqu\u00e9s de Riscal',600.0,1,3),(4,'Domaine Leflaive',100.0,3,NULL),(5,'Felsina',150.0,2,2);\nINSERT INTO \"Vineyards_Wines\" (vineyardId,wineId,yearProduced) VALUES (1,1,2018),(2,2,2020),(2,2,2021),(3,3,2017),(4,3,2016),(2,1,2020),(3,1,2017),(4,1,2016),(5,1,NULL);\nINSERT INTO \"Wines\" (wineId,name,variety) VALUES (1,'Cabernet Sauvignon','Cabernet Sauvignon'),(2,'Merlot','Merlot'),(3,'Pinot Noir','Pinot Noir');\n",
      "question": "Name all the wines that are found at least once in every vineyard.",
      "gold_queries": [
        "SELECT Wines.name  from Vineyards_Wines join Wines on Vineyards_Wines.wineId = Wines.wineId join Vineyards on Vineyards_Wines.vineyardId = Vineyards.vineyardId   GROUP BY Vineyards_Wines.wineId HAVING COUNT(DISTINCT Vineyards_Wines.vineyardId) = (SELECT COUNT(*) FROM  Vineyards)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Identify a set of wines found at least once in every single vineyard.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT W.name\nFROM Wines W\nWHERE NOT EXISTS (\n    SELECT V.vineyardId\n    FROM Vineyards V\n    WHERE NOT EXISTS (\n        SELECT VW.vineyardId\n        FROM Vineyards_Wines VW\n        WHERE VW.wineId = W.wineId AND VW.vineyardId = V.vineyardId\n    )\n)"
          ]
        },
        {
          "interpretation": "List wines belonging to a collection of vineyards.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT W.name\nFROM Wines W\nJOIN Vineyards_Wines VW ON W.wineId = VW.wineId"
          ]
        },
        {
          "interpretation": "Identify wines present in a comprehensive group of vineyards.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT W.name\nFROM Wines W\nJOIN Vineyards_Wines VW ON W.wineId = VW.wineId"
          ]
        },
        {
          "interpretation": "Determine wines present in each vineyard in the database.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT V.name AS Vineyard, W.name AS Wine, VW.yearProduced\nFROM Vineyards_Wines VW\nJOIN Vineyards V ON VW.vineyardId = V.vineyardId\nJOIN Wines W ON VW.wineId = W.wineId"
          ]
        },
        {
          "interpretation": "Name wines discovered in each individual vineyard.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT V.name AS vineyardName, W.name AS wineName\nFROM Vineyards V\nJOIN Vineyards_Wines VW ON V.vineyardId = VW.vineyardId\nJOIN Wines W ON VW.wineId = W.wineId"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "one_found": true,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Airport/scope_duty_free_shops_products/scope_duty_free_shops_products.sqlite",
      "db_dump": "CREATE TABLE Duty_Free_Shops (\n    shop_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Duty_Free_Shops_Products (\n    shop_id INTEGER,\n    product_id INTEGER,\n    quantity INTEGER,\n    FOREIGN KEY(shop_id) REFERENCES Duty_Free_Shops(shop_id),\n    FOREIGN KEY(product_id) REFERENCES Products(product_id),\n    PRIMARY KEY(shop_id, product_id)\n);\nCREATE TABLE Products (\n    product_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    category TEXT,\n    price REAL\n);\n\nINSERT INTO \"Duty_Free_Shops\" (shop_id,name,location) VALUES (1,'Shop1','Terminal A'),(2,'Shop2','Terminal B'),(3,'Shop3','Terminal C'),(4,'Shop4','Terminal D'),(5,'Shop5','Terminal E');\nINSERT INTO \"Duty_Free_Shops_Products\" (shop_id,product_id,quantity) VALUES (1,1,10),(1,2,20),(2,3,15),(2,4,30),(3,1,5),(3,2,10),(4,1,15),(4,3,20),(5,2,25),(5,4,30),(2,1,15),(5,1,25);\nINSERT INTO \"Products\" (product_id,category,price) VALUES (1,'Perfume',90.78),(2,'Cosmetics',65.43),(3,'Electronics',250.89),(4,'Fashion Accessories',150.99),(5,'Toys',20.0);\n",
      "question": "For each duty-free shop, list the price of its products.",
      "gold_queries": [
        "select duty_free_shops.name , products.price from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Display the prices of all unique products found in each duty-free shop, excluding products not present in those shops.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT d.name, p.price, p.product_id\nFROM Duty_Free_Shops AS d\nJOIN Duty_Free_Shops_Products AS dfsp ON d.shop_id = dfsp.shop_id\nJOIN Products AS p ON dfsp.product_id = p.product_id\nORDER BY d.name, p.product_id"
          ]
        },
        {
          "interpretation": "For each product in each duty-free shop, list its sale price or price offered in the duty-free shop context.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT d.name AS shop_name, p.product_id, p.category, p.price AS sale_price\nFROM Duty_Free_Shops_Products dfsp\nJOIN Duty_Free_Shops d ON dfsp.shop_id = d.shop_id\nJOIN Products p ON dfsp.product_id = p.product_id"
          ]
        },
        {
          "interpretation": "Report the range of prices (minimum, maximum) found in each duty-free shop.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT dfs.name, MIN(p.price) AS min_price, MAX(p.price) AS max_price\nFROM Duty_Free_Shops dfs\nJOIN Duty_Free_Shops_Products dfs_p ON dfs.shop_id = dfs_p.shop_id\nJOIN Products p ON dfs_p.product_id = p.product_id\nGROUP BY dfs.name"
          ]
        },
        {
          "interpretation": "List the price for every product found in each duty-free shop.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Duty_Free_Shops.name, Products.category, Products.price\nFROM Duty_Free_Shops_Products\nJOIN Duty_Free_Shops ON Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id\nJOIN Products ON Duty_Free_Shops_Products.product_id = Products.product_id"
          ]
        },
        {
          "interpretation": "Display the number of products and their respective prices found in each duty-free shop.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ds.name, COUNT(dfsp.product_id) AS number_of_products, SUM(p.price) AS total_price\nFROM Duty_Free_Shops ds\nJOIN Duty_Free_Shops_Products dfsp ON ds.shop_id = dfsp.shop_id\nJOIN Products p ON dfsp.product_id = p.product_id\nGROUP BY ds.name"
          ]
        },
        {
          "interpretation": "Show the product price changes or differences from standard prices for each duty-free shop, relatively or as addition to original price.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    DFS.name AS shop_name,\n    P.product_id,\n    P.category,\n    P.price AS original_price,\n    DFS_P.quantity,\n    (DFS_P.quantity * P.price) AS total_price,\n    (DFS_P.quantity * P.price) - (P.price * (SELECT COUNT(DISTINCT shop_id) FROM Duty_Free_Shops_Products WHERE product_id = P.product_id)) AS price_difference\nFROM \n    Duty_Free_Shops DFS\nJOIN \n    Duty_Free_Shops_Products DFS_P ON DFS.shop_id = DFS_P.shop_id\nJOIN \n    Products P ON DFS_P.product_id = P.product_id"
          ]
        },
        {
          "interpretation": "List the highest priced product for each duty-free shop.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DS.name, P.product_id, P.price\nFROM Duty_Free_Shops DS\nJOIN Duty_Free_Shops_Products DFP ON DS.shop_id = DFP.shop_id\nJOIN Products P ON DFP.product_id = P.product_id\nWHERE (DS.shop_id, P.price) IN (\n    SELECT shop_id, MAX(price)\n    FROM Duty_Free_Shops_Products\n    JOIN Products ON Duty_Free_Shops_Products.product_id = Products.product_id\n    GROUP BY shop_id\n)"
          ]
        },
        {
          "interpretation": "For every unique product in a duty-free shop, list its price regardless of the quantity of that product in the shop.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT P.price \nFROM Products P \nJOIN Duty_Free_Shops_Products DFS_P ON P.product_id = DFS_P.product_id"
          ]
        },
        {
          "interpretation": "List the average or mean price of products found in each duty-free shop.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT df.name, AVG(p.price) AS average_price\nFROM Duty_Free_Shops_Products dfsp\nJOIN Duty_Free_Shops df ON dfsp.shop_id = df.shop_id\nJOIN Products p ON dfsp.product_id = p.product_id\nGROUP BY df.name"
          ]
        }
      ],
      "num_unique_execution_results": 9,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 9,
        "num_unique_queries": 9,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Airport/scope_duty_free_shops_products/scope_duty_free_shops_products.sqlite",
      "db_dump": "CREATE TABLE Duty_Free_Shops (\n    shop_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Duty_Free_Shops_Products (\n    shop_id INTEGER,\n    product_id INTEGER,\n    quantity INTEGER,\n    FOREIGN KEY(shop_id) REFERENCES Duty_Free_Shops(shop_id),\n    FOREIGN KEY(product_id) REFERENCES Products(product_id),\n    PRIMARY KEY(shop_id, product_id)\n);\nCREATE TABLE Products (\n    product_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    category TEXT,\n    price REAL\n);\n\nINSERT INTO \"Duty_Free_Shops\" (shop_id,name,location) VALUES (1,'Shop1','Terminal A'),(2,'Shop2','Terminal B'),(3,'Shop3','Terminal C'),(4,'Shop4','Terminal D'),(5,'Shop5','Terminal E');\nINSERT INTO \"Duty_Free_Shops_Products\" (shop_id,product_id,quantity) VALUES (1,1,10),(1,2,20),(2,3,15),(2,4,30),(3,1,5),(3,2,10),(4,1,15),(4,3,20),(5,2,25),(5,4,30),(2,1,15),(5,1,25);\nINSERT INTO \"Products\" (product_id,category,price) VALUES (1,'Perfume',90.78),(2,'Cosmetics',65.43),(3,'Electronics',250.89),(4,'Fashion Accessories',150.99),(5,'Toys',20.0);\n",
      "question": "Give me the ids and prices of products that are common to all duty free shops.",
      "gold_queries": [
        "SELECT Products.product_id, Products.price  from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id   GROUP BY Duty_Free_Shops_Products.product_id HAVING COUNT(DISTINCT Duty_Free_Shops_Products.shop_id) = (SELECT COUNT(*) FROM  Duty_Free_Shops)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Get a list of unique product_ids along with their prices from the Products table that are present in all duty free shops.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT DISTINCT p.product_id, p.price\nFROM Products p\nWHERE p.product_id IN (\n    SELECT dp.product_id\n    FROM Duty_Free_Shops_Products dp\n    GROUP BY dp.product_id\n    HAVING COUNT(DISTINCT dp.shop_id) = (SELECT COUNT(*) FROM Duty_Free_Shops)\n)"
          ]
        },
        {
          "interpretation": "Get the count of duty free shops for each product and include those with a count of duty free shops equal to the number of duty free shops if product_ids and prices are requested.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT p.product_id, p.price, COUNT(dsp.shop_id) AS shop_count\nFROM Products p\nLEFT JOIN Duty_Free_Shops_Products dsp ON p.product_id = dsp.product_id\nGROUP BY p.product_id, p.price\nHAVING shop_count = (SELECT COUNT(*) FROM Duty_Free_Shops)"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "one_found": true,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Airport/scope_duty_free_shops_products/scope_duty_free_shops_products.sqlite",
      "db_dump": "CREATE TABLE Duty_Free_Shops (\n    shop_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Duty_Free_Shops_Products (\n    shop_id INTEGER,\n    product_id INTEGER,\n    quantity INTEGER,\n    FOREIGN KEY(shop_id) REFERENCES Duty_Free_Shops(shop_id),\n    FOREIGN KEY(product_id) REFERENCES Products(product_id),\n    PRIMARY KEY(shop_id, product_id)\n);\nCREATE TABLE Products (\n    product_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    category TEXT,\n    price REAL\n);\n\nINSERT INTO \"Duty_Free_Shops\" (shop_id,name,location) VALUES (1,'Shop1','Terminal A'),(2,'Shop2','Terminal B'),(3,'Shop3','Terminal C'),(4,'Shop4','Terminal D'),(5,'Shop5','Terminal E');\nINSERT INTO \"Duty_Free_Shops_Products\" (shop_id,product_id,quantity) VALUES (1,1,10),(1,2,20),(2,3,15),(2,4,30),(3,1,5),(3,2,10),(4,1,15),(4,3,20),(5,2,25),(5,4,30),(2,1,15),(5,1,25);\nINSERT INTO \"Products\" (product_id,category,price) VALUES (1,'Perfume',90.78),(2,'Cosmetics',65.43),(3,'Electronics',250.89),(4,'Fashion Accessories',150.99),(5,'Toys',20.0);\n",
      "question": "Tell me the ids and categories of the products every shop sells.",
      "gold_queries": [
        "SELECT Products.product_id, Products.category  from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id   GROUP BY Duty_Free_Shops_Products.product_id HAVING COUNT(DISTINCT Duty_Free_Shops_Products.shop_id) = (SELECT COUNT(*) FROM  Duty_Free_Shops)",
        "select duty_free_shops.name , products.product_id , products.category from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List all products for each shop, including their quantities and categories, in a single table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DFS.name, P.product_id, P.category, DFS_P.quantity \nFROM Duty_Free_Shops AS DFS \nJOIN Duty_Free_Shops_Products AS DFS_P ON DFS.shop_id = DFS_P.shop_id \nJOIN Products AS P ON DFS_P.product_id = P.product_id"
          ]
        },
        {
          "interpretation": "Retrieve the ids of shops that sell a range of product categories, and list the categories related to those shop ids.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT dfs.shop_id, p.category\nFROM Duty_Free_Shops_Products dfs_products\nJOIN Duty_Free_Shops dfs ON dfs_products.shop_id = dfs.shop_id\nJOIN Products p ON dfs_products.product_id = p.product_id"
          ]
        },
        {
          "interpretation": "Here are the distinct interpretations of the question:",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT category FROM Products"
          ]
        },
        {
          "interpretation": "Show a list with two sets of columns: shop ids, product ids, and categories, that enable the discrimination of product variety per shop.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ds.shop_id, dfsp.product_id, p.category\nFROM Duty_Free_Shops_Products dfsp\nJOIN Products p ON dfsp.product_id = p.product_id\nJOIN Duty_Free_Shops ds ON dfsp.shop_id = ds.shop_id"
          ]
        },
        {
          "interpretation": "Show the shop ids that sell a given set of products (implicitly there were no specific product ids mentioned).",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT shop_id FROM Duty_Free_Shops_Products GROUP BY shop_id HAVING COUNT(DISTINCT product_id) = (SELECT COUNT(*) FROM Products)"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Airport/scope_duty_free_shops_products/scope_duty_free_shops_products.sqlite",
      "db_dump": "CREATE TABLE Duty_Free_Shops (\n    shop_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Duty_Free_Shops_Products (\n    shop_id INTEGER,\n    product_id INTEGER,\n    quantity INTEGER,\n    FOREIGN KEY(shop_id) REFERENCES Duty_Free_Shops(shop_id),\n    FOREIGN KEY(product_id) REFERENCES Products(product_id),\n    PRIMARY KEY(shop_id, product_id)\n);\nCREATE TABLE Products (\n    product_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    category TEXT,\n    price REAL\n);\n\nINSERT INTO \"Duty_Free_Shops\" (shop_id,name,location) VALUES (1,'Shop1','Terminal A'),(2,'Shop2','Terminal B'),(3,'Shop3','Terminal C'),(4,'Shop4','Terminal D'),(5,'Shop5','Terminal E');\nINSERT INTO \"Duty_Free_Shops_Products\" (shop_id,product_id,quantity) VALUES (1,1,10),(1,2,20),(2,3,15),(2,4,30),(3,1,5),(3,2,10),(4,1,15),(4,3,20),(5,2,25),(5,4,30),(2,1,15),(5,1,25);\nINSERT INTO \"Products\" (product_id,category,price) VALUES (1,'Perfume',90.78),(2,'Cosmetics',65.43),(3,'Electronics',250.89),(4,'Fashion Accessories',150.99),(5,'Toys',20.0);\n",
      "question": "For each duty free shop, what are the corresponding product ids and prices?",
      "gold_queries": [
        "select duty_free_shops.name , products.product_id , products.price from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Retrieve the product ids and price for each duty free shop from the Duty_Free_Shops_Products table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.product_id, T2.price FROM Duty_Free_Shops_Products AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id"
          ]
        },
        {
          "interpretation": "Find the product ids and prices of all products in each duty free shop, even if not stocked.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ds.shop_id, ds.name, p.product_id, p.price\nFROM Duty_Free_Shops ds\nCROSS JOIN Products p\nORDER BY ds.shop_id, p.product_id"
          ]
        },
        {
          "interpretation": "For each duty free shop, list the product ids, prices, and the quantity in stock.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT dfs.name, dfsp.product_id, p.price, dfsp.quantity\nFROM Duty_Free_Shops_Products dfsp\nJOIN Duty_Free_Shops dfs ON dfsp.shop_id = dfs.shop_id\nJOIN Products p ON dfsp.product_id = p.product_id"
          ]
        },
        {
          "interpretation": "List the unique product id and corresponding product name, price, and shop name.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT p.product_id, p.category AS product_name, p.price, d.name AS shop_name\nFROM Products p\nJOIN Duty_Free_Shops_Products dfs_p ON p.product_id = dfs_p.product_id\nJOIN Duty_Free_Shops d ON dfs_p.shop_id = d.shop_id"
          ]
        },
        {
          "interpretation": "For each duty free shop, list the unique product ids and their corresponding prices.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT dfs.name, p.product_id, p.price\nFROM Duty_Free_Shops_Products dfs_p\nJOIN Duty_Free_Shops dfs ON dfs_p.shop_id = dfs.shop_id\nJOIN Products p ON dfs_p.product_id = p.product_id\nGROUP BY dfs.name, p.product_id, p.price"
          ]
        },
        {
          "interpretation": "Show the product id and corresponding price for each duty free shop, but only include shops with products.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT p.product_id, p.price\nFROM Products p\nJOIN Duty_Free_Shops_Products dfs_p ON p.product_id = dfs_p.product_id"
          ]
        },
        {
          "interpretation": "For each product, list the duty free shop name, shop id, and product id.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DS.name, DS.shop_id, DFSP.product_id \nFROM Duty_Free_Shops_Products DFSP \nJOIN Duty_Free_Shops DS ON DFSP.shop_id = DS.shop_id"
          ]
        },
        {
          "interpretation": "List the product id, quantity, and price for each duty free shop.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT D.shop_id, D.product_id, D.quantity, P.price\nFROM Duty_Free_Shops_Products D\nJOIN Products P ON D.product_id = P.product_id"
          ]
        },
        {
          "interpretation": "Get the product category and price, then join with Duty_Free_Shops_Products to find the shops carrying the product.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.category, P.price, DFP.shop_id \nFROM Products P \nJOIN Duty_Free_Shops_Products DFP ON P.product_id = DFP.product_id"
          ]
        }
      ],
      "num_unique_execution_results": 9,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.1111111111111111,
        "one_found": true,
        "f1_score": 0.19999999999999998,
        "num_queries": 9,
        "num_unique_queries": 9,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Airport/scope_duty_free_shops_products/scope_duty_free_shops_products.sqlite",
      "db_dump": "CREATE TABLE Duty_Free_Shops (\n    shop_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Duty_Free_Shops_Products (\n    shop_id INTEGER,\n    product_id INTEGER,\n    quantity INTEGER,\n    FOREIGN KEY(shop_id) REFERENCES Duty_Free_Shops(shop_id),\n    FOREIGN KEY(product_id) REFERENCES Products(product_id),\n    PRIMARY KEY(shop_id, product_id)\n);\nCREATE TABLE Products (\n    product_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    category TEXT,\n    price REAL\n);\n\nINSERT INTO \"Duty_Free_Shops\" (shop_id,name,location) VALUES (1,'Shop1','Terminal A'),(2,'Shop2','Terminal B'),(3,'Shop3','Terminal C'),(4,'Shop4','Terminal D'),(5,'Shop5','Terminal E');\nINSERT INTO \"Duty_Free_Shops_Products\" (shop_id,product_id,quantity) VALUES (1,1,10),(1,2,20),(2,3,15),(2,4,30),(3,1,5),(3,2,10),(4,1,15),(4,3,20),(5,2,25),(5,4,30),(2,1,15),(5,1,25);\nINSERT INTO \"Products\" (product_id,category,price) VALUES (1,'Perfume',90.78),(2,'Cosmetics',65.43),(3,'Electronics',250.89),(4,'Fashion Accessories',150.99),(5,'Toys',20.0);\n",
      "question": "For each shop, list the ids and categories of the products they sell.",
      "gold_queries": [
        "select duty_free_shops.name , products.product_id , products.category from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For each duty-free shop, list the unique product products sold along with their respective categories.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT df.name, p.product_id, p.category\nFROM Duty_Free_Shops df\nJOIN Duty_Free_Shops_Products dfs_p ON df.shop_id = dfs_p.shop_id\nJOIN Products p ON dfs_p.product_id = p.product_id\nGROUP BY df.name, p.product_id, p.category"
          ]
        },
        {
          "interpretation": "List the distinct product IDs and categories for each duty-free shop.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT dfs.shop_id, p.product_id, p.category \nFROM Duty_Free_Shops_Products dfs_p \nJOIN Duty_Free_Shops dfs ON dfs_p.shop_id = dfs.shop_id \nJOIN Products p ON dfs_p.product_id = p.product_id"
          ]
        },
        {
          "interpretation": "For each duty-free shop, list the IDs and categories of the products available in that shop.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT dfs.shop_id, p.category\nFROM Duty_Free_Shops_Products dfs_p\nJOIN Duty_Free_Shops dfs ON dfs_p.shop_id = dfs.shop_id\nJOIN Products p ON dfs_p.product_id = p.product_id"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "one_found": true,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Airport/scope_duty_free_shops_products/scope_duty_free_shops_products.sqlite",
      "db_dump": "CREATE TABLE Duty_Free_Shops (\n    shop_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Duty_Free_Shops_Products (\n    shop_id INTEGER,\n    product_id INTEGER,\n    quantity INTEGER,\n    FOREIGN KEY(shop_id) REFERENCES Duty_Free_Shops(shop_id),\n    FOREIGN KEY(product_id) REFERENCES Products(product_id),\n    PRIMARY KEY(shop_id, product_id)\n);\nCREATE TABLE Products (\n    product_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    category TEXT,\n    price REAL\n);\n\nINSERT INTO \"Duty_Free_Shops\" (shop_id,name,location) VALUES (1,'Shop1','Terminal A'),(2,'Shop2','Terminal B'),(3,'Shop3','Terminal C'),(4,'Shop4','Terminal D'),(5,'Shop5','Terminal E');\nINSERT INTO \"Duty_Free_Shops_Products\" (shop_id,product_id,quantity) VALUES (1,1,10),(1,2,20),(2,3,15),(2,4,30),(3,1,5),(3,2,10),(4,1,15),(4,3,20),(5,2,25),(5,4,30),(2,1,15),(5,1,25);\nINSERT INTO \"Products\" (product_id,category,price) VALUES (1,'Perfume',90.78),(2,'Cosmetics',65.43),(3,'Electronics',250.89),(4,'Fashion Accessories',150.99),(5,'Toys',20.0);\n",
      "question": "What are the ids and categories of the products common to all shops?",
      "gold_queries": [
        "SELECT Products.product_id, Products.category  from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id   GROUP BY Duty_Free_Shops_Products.product_id HAVING COUNT(DISTINCT Duty_Free_Shops_Products.shop_id) = (SELECT COUNT(*) FROM  Duty_Free_Shops)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Get all the unique product IDs and their respective categories that are sold in all terminal duty-free shops combined.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT product_id, category FROM Products"
          ]
        },
        {
          "interpretation": "The ids and categories of the products where each product is listed as available across all duty-free shops in the database.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT P.product_id, P.category\nFROM Products P\nWHERE NOT EXISTS (\n    SELECT 1\n    FROM Duty_Free_Shops D\n    LEFT JOIN Duty_Free_Shops_Products DFSP ON D.shop_id = DFSP.shop_id AND P.product_id = DFSP.product_id\n    WHERE DFSP.product_id IS NULL\n)"
          ]
        },
        {
          "interpretation": "Retrieve the product IDs and categories that are present in each duty-free shop at Terminal A, Terminal B, Terminal C, Terminal D, and Terminal E combined.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT p.product_id, p.category\nFROM Products p\nJOIN Duty_Free_Shops_Products dfs_p ON p.product_id = dfs_p.product_id\nJOIN Duty_Free_Shops dfs ON dfs_p.shop_id = dfs.shop_id\nWHERE dfs.location IN ('Terminal A', 'Terminal B', 'Terminal C', 'Terminal D', 'Terminal E')"
          ]
        },
        {
          "interpretation": "Identify all product categories sold in the duty-free shops across Terminal A, Terminal B, Terminal C, Terminal D, and Terminal E.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT category FROM Products"
          ]
        },
        {
          "interpretation": "List the product ID, product name, category, and all terminals where product ID appears.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT p.product_id, p.product_id AS product_name, p.category, GROUP_CONCAT(ds.location) AS terminals\nFROM Products p\nJOIN Duty_Free_Shops_Products dfs_p ON p.product_id = dfs_p.product_id\nJOIN Duty_Free_Shops ds ON dfs_p.shop_id = ds.shop_id\nGROUP BY p.product_id, p.category"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "one_found": true,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Airport/scope_duty_free_shops_products/scope_duty_free_shops_products.sqlite",
      "db_dump": "CREATE TABLE Duty_Free_Shops (\n    shop_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Duty_Free_Shops_Products (\n    shop_id INTEGER,\n    product_id INTEGER,\n    quantity INTEGER,\n    FOREIGN KEY(shop_id) REFERENCES Duty_Free_Shops(shop_id),\n    FOREIGN KEY(product_id) REFERENCES Products(product_id),\n    PRIMARY KEY(shop_id, product_id)\n);\nCREATE TABLE Products (\n    product_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    category TEXT,\n    price REAL\n);\n\nINSERT INTO \"Duty_Free_Shops\" (shop_id,name,location) VALUES (1,'Shop1','Terminal A'),(2,'Shop2','Terminal B'),(3,'Shop3','Terminal C'),(4,'Shop4','Terminal D'),(5,'Shop5','Terminal E');\nINSERT INTO \"Duty_Free_Shops_Products\" (shop_id,product_id,quantity) VALUES (1,1,10),(1,2,20),(2,3,15),(2,4,30),(3,1,5),(3,2,10),(4,1,15),(4,3,20),(5,2,25),(5,4,30),(2,1,15),(5,1,25);\nINSERT INTO \"Products\" (product_id,category,price) VALUES (1,'Perfume',90.78),(2,'Cosmetics',65.43),(3,'Electronics',250.89),(4,'Fashion Accessories',150.99),(5,'Toys',20.0);\n",
      "question": "List the price of products sold in every duty-free shop.",
      "gold_queries": [
        "SELECT Products.price  from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id   GROUP BY Duty_Free_Shops_Products.product_id HAVING COUNT(DISTINCT Duty_Free_Shops_Products.shop_id) = (SELECT COUNT(*) FROM  Duty_Free_Shops)",
        "select duty_free_shops.name , products.price from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List the price of every product, grouped by the duty-free shop that sells it.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.name, T3.price \nFROM Duty_Free_Shops_Products AS T1 \nJOIN Duty_Free_Shops AS T2 ON T1.shop_id = T2.shop_id \nJOIN Products AS T3 ON T1.product_id = T3.product_id \nGROUP BY T2.name, T3.price"
          ]
        },
        {
          "interpretation": "Provide a result set with the shop name, average product price, and the number of products sold.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    DFS.name, \n    AVG(P.price) AS average_product_price, \n    COUNT(DSP.product_id) AS number_of_products_sold\nFROM \n    Duty_Free_Shops DFS\nJOIN \n    Duty_Free_Shops_Products DSP ON DFS.shop_id = DSP.shop_id\nJOIN \n    Products P ON DSP.product_id = P.product_id\nGROUP BY \n    DFS.name"
          ]
        },
        {
          "interpretation": "Show a list of price ranges for each product category in all duty-free shops.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT category, MIN(price) AS min_price, MAX(price) AS max_price\nFROM Products\nGROUP BY category"
          ]
        },
        {
          "interpretation": "List each duty-free shop with their total revenue from product sales.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.name, SUM(P.price * DFP.quantity) AS total_revenue\nFROM Duty_Free_Shops S\nJOIN Duty_Free_Shops_Products DFP ON S.shop_id = DFP.shop_id\nJOIN Products P ON DFP.product_id = P.product_id\nGROUP BY S.shop_id"
          ]
        },
        {
          "interpretation": "Retrieve a result set including shop name, product category, product price, and product quantity for all duty-free shops.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    DFS.name, \n    P.category, \n    P.price, \n    DFS_P.quantity\nFROM \n    Duty_Free_Shops DFS\nJOIN \n    Duty_Free_Shops_Products DFS_P ON DFS.shop_id = DFS_P.shop_id\nJOIN \n    Products P ON DFS_P.product_id = P.product_id"
          ]
        },
        {
          "interpretation": "Return the top-selling product in each duty-free shop in terms of total sales value.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT dfs.name, p.product_id, p.category, SUM(dsp.quantity * p.price) AS total_sales\nFROM Duty_Free_Shops_Products dsp\nJOIN Duty_Free_Shops dfs ON dfs.shop_id = dsp.shop_id\nJOIN Products p ON p.product_id = dsp.product_id\nGROUP BY dfs.name, p.product_id, p.category\nORDER BY dfs.name, total_sales DESC\nLIMIT 1 OFFSET 0"
          ]
        },
        {
          "interpretation": "Return a single result row with the minimum, maximum, and average price of all products across all duty-free shops.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT MIN(price), MAX(price), AVG(price) FROM Products"
          ]
        },
        {
          "interpretation": "Retrieve the specific duty-free shop(s) that sell the most expensive product(s).",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT DFS.name\nFROM Duty_Free_Shops DFS\nJOIN Duty_Free_Shops_Products DFS_P ON DFS.shop_id = DFS_P.shop_id\nJOIN Products P ON DFS_P.product_id = P.product_id\nWHERE P.price = (SELECT MAX(price) FROM Products)"
          ]
        },
        {
          "interpretation": "Count the total number of products sold in each duty-free shop, grouped by their product categories.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT df.name, p.category, COUNT(dsp.product_id) as total_products\nFROM Duty_Free_Shops df\nJOIN Duty_Free_Shops_Products dsp ON df.shop_id = dsp.shop_id\nJOIN Products p ON dsp.product_id = p.product_id\nGROUP BY df.name, p.category"
          ]
        },
        {
          "interpretation": "Display the product name and price for every product that has been sold in the busiest duty-free shop.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.product_id, P.category, P.price\nFROM Products AS P\nJOIN Duty_Free_Shops_Products AS DFP ON P.product_id = DFP.product_id\nWHERE DFP.shop_id = (\n    SELECT shop_id\n    FROM Duty_Free_Shops_Products\n    GROUP BY shop_id\n    ORDER BY SUM(quantity) DESC\n    LIMIT 1\n)"
          ]
        },
        {
          "interpretation": "Count the number of different product categories in each duty-free shop.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT df.name, COUNT(DISTINCT p.category) AS category_count\nFROM Duty_Free_Shops df\nJOIN Duty_Free_Shops_Products dfs_p ON df.shop_id = dfs_p.shop_id\nJOIN Products p ON dfs_p.product_id = p.product_id\nGROUP BY df.name"
          ]
        },
        {
          "interpretation": "Calculate the average product price for all duty-free shops combined.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AVG(price) FROM Products"
          ]
        }
      ],
      "num_unique_execution_results": 12,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.08333333333333333,
        "one_found": true,
        "f1_score": 0.14285714285714285,
        "num_queries": 12,
        "num_unique_queries": 12,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Airport/scope_duty_free_shops_products/scope_duty_free_shops_products.sqlite",
      "db_dump": "CREATE TABLE Duty_Free_Shops (\n    shop_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Duty_Free_Shops_Products (\n    shop_id INTEGER,\n    product_id INTEGER,\n    quantity INTEGER,\n    FOREIGN KEY(shop_id) REFERENCES Duty_Free_Shops(shop_id),\n    FOREIGN KEY(product_id) REFERENCES Products(product_id),\n    PRIMARY KEY(shop_id, product_id)\n);\nCREATE TABLE Products (\n    product_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    category TEXT,\n    price REAL\n);\n\nINSERT INTO \"Duty_Free_Shops\" (shop_id,name,location) VALUES (1,'Shop1','Terminal A'),(2,'Shop2','Terminal B'),(3,'Shop3','Terminal C'),(4,'Shop4','Terminal D'),(5,'Shop5','Terminal E');\nINSERT INTO \"Duty_Free_Shops_Products\" (shop_id,product_id,quantity) VALUES (1,1,10),(1,2,20),(2,3,15),(2,4,30),(3,1,5),(3,2,10),(4,1,15),(4,3,20),(5,2,25),(5,4,30),(2,1,15),(5,1,25);\nINSERT INTO \"Products\" (product_id,category,price) VALUES (1,'Perfume',90.78),(2,'Cosmetics',65.43),(3,'Electronics',250.89),(4,'Fashion Accessories',150.99),(5,'Toys',20.0);\n",
      "question": "For each duty free shop, list the ids, categories and prices of the products being sold.",
      "gold_queries": [
        "select duty_free_shops.name , products.product_id , products.category , products.price from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List the product ids, categories, and prices of each product sold by each duty free shop, including repetition.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DFS.shop_id, P.product_id, P.category, P.price\nFROM Duty_Free_Shops_Products DFS_P\nJOIN Duty_Free_Shops DFS ON DFS_P.shop_id = DFS.shop_id\nJOIN Products P ON DFS_P.product_id = P.product_id"
          ]
        },
        {
          "interpretation": "For each duty free shop, list the distinct product ids, categories, and prices, grouped by product id.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT s.shop_id, p.product_id, p.category, p.price\nFROM Duty_Free_Shops s\nJOIN Duty_Free_Shops_Products d ON s.shop_id = d.shop_id\nJOIN Products p ON d.product_id = p.product_id\nGROUP BY p.product_id"
          ]
        },
        {
          "interpretation": "List the product ids, categories, and prices separately for each shop, and include only shops with products.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT dfs.name, p.product_id, p.category, p.price \nFROM Duty_Free_Shops_Products dfsp \nJOIN Products p ON dfsp.product_id = p.product_id \nJOIN Duty_Free_Shops dfs ON dfsp.shop_id = dfs.shop_id"
          ]
        },
        {
          "interpretation": "List the product ids, categories, and prices of all products in the system, grouped by duty free shop.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT product_id, category, price FROM Products"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "one_found": true,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Airport/scope_duty_free_shops_products/scope_duty_free_shops_products.sqlite",
      "db_dump": "CREATE TABLE Duty_Free_Shops (\n    shop_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Duty_Free_Shops_Products (\n    shop_id INTEGER,\n    product_id INTEGER,\n    quantity INTEGER,\n    FOREIGN KEY(shop_id) REFERENCES Duty_Free_Shops(shop_id),\n    FOREIGN KEY(product_id) REFERENCES Products(product_id),\n    PRIMARY KEY(shop_id, product_id)\n);\nCREATE TABLE Products (\n    product_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    category TEXT,\n    price REAL\n);\n\nINSERT INTO \"Duty_Free_Shops\" (shop_id,name,location) VALUES (1,'Shop1','Terminal A'),(2,'Shop2','Terminal B'),(3,'Shop3','Terminal C'),(4,'Shop4','Terminal D'),(5,'Shop5','Terminal E');\nINSERT INTO \"Duty_Free_Shops_Products\" (shop_id,product_id,quantity) VALUES (1,1,10),(1,2,20),(2,3,15),(2,4,30),(3,1,5),(3,2,10),(4,1,15),(4,3,20),(5,2,25),(5,4,30),(2,1,15),(5,1,25);\nINSERT INTO \"Products\" (product_id,category,price) VALUES (1,'Perfume',90.78),(2,'Cosmetics',65.43),(3,'Electronics',250.89),(4,'Fashion Accessories',150.99),(5,'Toys',20.0);\n",
      "question": "What are the categories and prices of the products common to all duty free shops?",
      "gold_queries": [
        "SELECT Products.category, Products.price  from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id   GROUP BY Duty_Free_Shops_Products.product_id HAVING COUNT(DISTINCT Duty_Free_Shops_Products.shop_id) = (SELECT COUNT(*) FROM  Duty_Free_Shops)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What are the categories and prices of the products offered by all duty free shops.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT category, price FROM Products"
          ]
        },
        {
          "interpretation": "In what categories and prices are the products that every duty free shop contains.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT category, price FROM Products WHERE product_id IN (SELECT product_id FROM Duty_Free_Shops_Products GROUP BY product_id HAVING COUNT(DISTINCT shop_id) = (SELECT COUNT(*) FROM Duty_Free_Shops))"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "one_found": true,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Airport/scope_duty_free_shops_products/scope_duty_free_shops_products.sqlite",
      "db_dump": "CREATE TABLE Duty_Free_Shops (\n    shop_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Duty_Free_Shops_Products (\n    shop_id INTEGER,\n    product_id INTEGER,\n    quantity INTEGER,\n    FOREIGN KEY(shop_id) REFERENCES Duty_Free_Shops(shop_id),\n    FOREIGN KEY(product_id) REFERENCES Products(product_id),\n    PRIMARY KEY(shop_id, product_id)\n);\nCREATE TABLE Products (\n    product_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    category TEXT,\n    price REAL\n);\n\nINSERT INTO \"Duty_Free_Shops\" (shop_id,name,location) VALUES (1,'Shop1','Terminal A'),(2,'Shop2','Terminal B'),(3,'Shop3','Terminal C'),(4,'Shop4','Terminal D'),(5,'Shop5','Terminal E');\nINSERT INTO \"Duty_Free_Shops_Products\" (shop_id,product_id,quantity) VALUES (1,1,10),(1,2,20),(2,3,15),(2,4,30),(3,1,5),(3,2,10),(4,1,15),(4,3,20),(5,2,25),(5,4,30),(2,1,15),(5,1,25);\nINSERT INTO \"Products\" (product_id,category,price) VALUES (1,'Perfume',90.78),(2,'Cosmetics',65.43),(3,'Electronics',250.89),(4,'Fashion Accessories',150.99),(5,'Toys',20.0);\n",
      "question": "Give me the ids and prices of products that each duty free shop has.",
      "gold_queries": [
        "SELECT Products.product_id, Products.price  from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id   GROUP BY Duty_Free_Shops_Products.product_id HAVING COUNT(DISTINCT Duty_Free_Shops_Products.shop_id) = (SELECT COUNT(*) FROM  Duty_Free_Shops)",
        "select duty_free_shops.name , products.product_id , products.price from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Display duty free shop id individually, along with the available product id, and its price.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT dfsp.shop_id, dfsp.product_id, p.price\nFROM Duty_Free_Shops_Products dfsp\nJOIN Products p ON dfsp.product_id = p.product_id"
          ]
        },
        {
          "interpretation": "Give the duty free shop id and the price of each product sold in the shop.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ds.shop_id, p.price\nFROM Duty_Free_Shops_Products dfsp\nJOIN Products p ON dfsp.product_id = p.product_id\nJOIN Duty_Free_Shops ds ON dfsp.shop_id = ds.shop_id"
          ]
        },
        {
          "interpretation": "ID of each duty-free shop with every expensive product id and price of every product within the shop.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT dfs.shop_id, p.product_id, p.price\nFROM Duty_Free_Shops_Products dfs_p\nJOIN Duty_Free_Shops dfs ON dfs_p.shop_id = dfs.shop_id\nJOIN Products p ON dfs_p.product_id = p.product_id\nWHERE p.price > (SELECT AVG(price) FROM Products)"
          ]
        },
        {
          "interpretation": "Get the duty free shop id and product id for each product available at each duty free shop.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT shop_id, product_id FROM Duty_Free_Shops_Products"
          ]
        },
        {
          "interpretation": "Get all duty free shops' id along with every available product id, category, quantity, and the preferable product price.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT dfs.shop_id, p.product_id, p.category, dfs_products.quantity, p.price \nFROM Duty_Free_Shops_Products dfs_products \nJOIN Duty_Free_Shops dfs ON dfs_products.shop_id = dfs.shop_id \nJOIN Products p ON dfs_products.product_id = p.product_id"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Airport/scope_duty_free_shops_products/scope_duty_free_shops_products.sqlite",
      "db_dump": "CREATE TABLE Duty_Free_Shops (\n    shop_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Duty_Free_Shops_Products (\n    shop_id INTEGER,\n    product_id INTEGER,\n    quantity INTEGER,\n    FOREIGN KEY(shop_id) REFERENCES Duty_Free_Shops(shop_id),\n    FOREIGN KEY(product_id) REFERENCES Products(product_id),\n    PRIMARY KEY(shop_id, product_id)\n);\nCREATE TABLE Products (\n    product_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    category TEXT,\n    price REAL\n);\n\nINSERT INTO \"Duty_Free_Shops\" (shop_id,name,location) VALUES (1,'Shop1','Terminal A'),(2,'Shop2','Terminal B'),(3,'Shop3','Terminal C'),(4,'Shop4','Terminal D'),(5,'Shop5','Terminal E');\nINSERT INTO \"Duty_Free_Shops_Products\" (shop_id,product_id,quantity) VALUES (1,1,10),(1,2,20),(2,3,15),(2,4,30),(3,1,5),(3,2,10),(4,1,15),(4,3,20),(5,2,25),(5,4,30),(2,1,15),(5,1,25);\nINSERT INTO \"Products\" (product_id,category,price) VALUES (1,'Perfume',90.78),(2,'Cosmetics',65.43),(3,'Electronics',250.89),(4,'Fashion Accessories',150.99),(5,'Toys',20.0);\n",
      "question": "Tell me about the ids, categories and prices of the products every duty free shop sells.",
      "gold_queries": [
        "SELECT Products.product_id, Products.category, Products.price  from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id   GROUP BY Duty_Free_Shops_Products.product_id HAVING COUNT(DISTINCT Duty_Free_Shops_Products.shop_id) = (SELECT COUNT(*) FROM  Duty_Free_Shops)",
        "select duty_free_shops.name , products.product_id , products.category , products.price from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Get the shop ID, the total count of products and categories, and the average price per category for each duty-free shop.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    dfs.shop_id,\n    COUNT(dfsp.product_id) AS total_products,\n    COUNT(DISTINCT p.category) AS total_categories,\n    AVG(p.price) AS average_price_per_category\nFROM \n    Duty_Free_Shops dfs\nJOIN \n    Duty_Free_Shops_Products dfsp ON dfs.shop_id = dfsp.shop_id\nJOIN \n    Products p ON dfsp.product_id = p.product_id\nGROUP BY \n    dfs.shop_id"
          ]
        },
        {
          "interpretation": "For each duty-free shop, list the shop ID, category of each product sold, and the product's price in the format (shop_id, category, price).",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DFS.shop_id, P.category, P.price\nFROM Duty_Free_Shops AS DFS\nJOIN Duty_Free_Shops_Products AS DFS_P ON DFS.shop_id = DFS_P.shop_id\nJOIN Products AS P ON DFS_P.product_id = P.product_id"
          ]
        },
        {
          "interpretation": "Display the categories and prices of all products sold by each duty-free shop, where the shop ID is taken from the id pair (shop_id, product_id) in the Duty_Free_Shops_Products table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DFS.name, P.category, P.price\nFROM Duty_Free_Shops_Products DFSP\nJOIN Duty_Free_Shops DFS ON DFSP.shop_id = DFS.shop_id\nJOIN Products P ON DFSP.product_id = P.product_id"
          ]
        },
        {
          "interpretation": "Find the unique shop IDs and count the number of products each duty-free shop sells, also displaying the category and average price of products by shop.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ds.shop_id, COUNT(DISTINCT dfsp.product_id) AS number_of_products, p.category, AVG(p.price) AS average_price\nFROM Duty_Free_Shops ds\nJOIN Duty_Free_Shops_Products dfsp ON ds.shop_id = dfsp.shop_id\nJOIN Products p ON dfsp.product_id = p.product_id\nGROUP BY ds.shop_id, p.category"
          ]
        },
        {
          "interpretation": "List the shop ID, product category, and total price of all products in each category across all duty-free shops.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT dfs.shop_id, p.category, SUM(p.price * dfs_products.quantity) AS total_price\nFROM Duty_Free_Shops_Products dfs_products\nJOIN Duty_Free_Shops dfs ON dfs_products.shop_id = dfs.shop_id\nJOIN Products p ON dfs_products.product_id = p.product_id\nGROUP BY dfs.shop_id, p.category"
          ]
        },
        {
          "interpretation": "Show the categories and prices of each product sold across all duty-free shops, with the shop ID from which each product is sold.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT category, price FROM Products"
          ]
        },
        {
          "interpretation": "Show the categories and prices of each product sold by each duty-free shop, along with the total quantity sold of each product.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DFS.name, P.category, P.price, SUM(DFSP.quantity) AS total_quantity_sold\nFROM Duty_Free_Shops DFS\nJOIN Duty_Free_Shops_Products DFSP ON DFS.shop_id = DFSP.shop_id\nJOIN Products P ON DFSP.product_id = P.product_id\nGROUP BY DFS.name, P.category, P.price"
          ]
        },
        {
          "interpretation": "List the shop ID and count of unique product categories each duty-free shop has, along with the average price per category.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT dfs.shop_id, COUNT(DISTINCT p.category) AS unique_categories, AVG(p.price) AS average_price\nFROM Duty_Free_Shops_Products dfsp\nJOIN Products p ON dfsp.product_id = p.product_id\nJOIN Duty_Free_Shops dfs ON dfsp.shop_id = dfs.shop_id\nGROUP BY dfs.shop_id"
          ]
        },
        {
          "interpretation": "List the shop ID, and a list of categories and prices of all products each duty-free shop sells.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DF.shop_id, GROUP_CONCAT(P.category || ' - ' || P.price) AS products\nFROM Duty_Free_Shops_Products AS DFSP\nJOIN Duty_Free_Shops AS DF ON DFSP.shop_id = DF.shop_id\nJOIN Products AS P ON DFSP.product_id = P.product_id\nGROUP BY DF.shop_id"
          ]
        },
        {
          "interpretation": "For each duty-free shop, list the average price of its products and the categories of products where the price exceeds the total average price of products across all shops.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    dfs.name, \n    p.category, \n    AVG(p.price) AS avg_price\nFROM \n    Duty_Free_Shops_Products dfs_p\nJOIN \n    Duty_Free_Shops dfs ON dfs_p.shop_id = dfs.shop_id\nJOIN \n    Products p ON dfs_p.product_id = p.product_id\nGROUP BY \n    dfs.name, p.category\nHAVING \n    AVG(p.price) > (SELECT AVG(price) FROM Products)"
          ]
        },
        {
          "interpretation": "Display the categories and total prices of all products sold in each duty-free shop, along with the shop ID and total quantity of products sold.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DS.shop_id, DS.name, P.category, SUM(DSP.quantity) AS total_quantity, SUM(DSP.quantity * P.price) AS total_price\nFROM Duty_Free_Shops AS DS\nJOIN Duty_Free_Shops_Products AS DSP ON DS.shop_id = DSP.shop_id\nJOIN Products AS P ON DSP.product_id = P.product_id\nGROUP BY DS.shop_id, DS.name, P.category"
          ]
        }
      ],
      "num_unique_execution_results": 11,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 11,
        "num_unique_queries": 11,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Airport/scope_duty_free_shops_products/scope_duty_free_shops_products.sqlite",
      "db_dump": "CREATE TABLE Duty_Free_Shops (\n    shop_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Duty_Free_Shops_Products (\n    shop_id INTEGER,\n    product_id INTEGER,\n    quantity INTEGER,\n    FOREIGN KEY(shop_id) REFERENCES Duty_Free_Shops(shop_id),\n    FOREIGN KEY(product_id) REFERENCES Products(product_id),\n    PRIMARY KEY(shop_id, product_id)\n);\nCREATE TABLE Products (\n    product_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    category TEXT,\n    price REAL\n);\n\nINSERT INTO \"Duty_Free_Shops\" (shop_id,name,location) VALUES (1,'Shop1','Terminal A'),(2,'Shop2','Terminal B'),(3,'Shop3','Terminal C'),(4,'Shop4','Terminal D'),(5,'Shop5','Terminal E');\nINSERT INTO \"Duty_Free_Shops_Products\" (shop_id,product_id,quantity) VALUES (1,1,10),(1,2,20),(2,3,15),(2,4,30),(3,1,5),(3,2,10),(4,1,15),(4,3,20),(5,2,25),(5,4,30),(2,1,15),(5,1,25);\nINSERT INTO \"Products\" (product_id,category,price) VALUES (1,'Perfume',90.78),(2,'Cosmetics',65.43),(3,'Electronics',250.89),(4,'Fashion Accessories',150.99),(5,'Toys',20.0);\n",
      "question": "What are the ids, categories and prices of the products common to all duty free shops?",
      "gold_queries": [
        "SELECT Products.product_id, Products.category, Products.price  from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id   GROUP BY Duty_Free_Shops_Products.product_id HAVING COUNT(DISTINCT Duty_Free_Shops_Products.shop_id) = (SELECT COUNT(*) FROM  Duty_Free_Shops)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Determine the product ids and their respective categories and prices that are in the commonality of duty free products.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT product_id, category, price FROM Products"
          ]
        },
        {
          "interpretation": "Retrieve the product ids, product categories, and prices of items present in every duty free shop stock.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT p.product_id, p.category, p.price \nFROM Products p \nWHERE p.product_id IN (\n    SELECT d.product_id \n    FROM Duty_Free_Shops_Products d\n    GROUP BY d.product_id\n    HAVING COUNT(DISTINCT d.shop_id) = (SELECT COUNT(*) FROM Duty_Free_Shops)\n)"
          ]
        },
        {
          "interpretation": "Find the product ids and their respective categories and prices, which are elements in the intersection of duty free shop products.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT product_id, category, price FROM Products WHERE product_id IN (SELECT product_id FROM Duty_Free_Shops_Products)"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "one_found": true,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Agriculture/scope_agroforestry_systems_species/scope_agroforestry_systems_species.sqlite",
      "db_dump": "CREATE TABLE Agroforestry_Systems(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    system_name TEXT,\n    description TEXT\n);\nCREATE TABLE Farmers(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    email TEXT\n);\nCREATE TABLE Farms(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    farm_name TEXT,\n    location TEXT\n);\nCREATE TABLE Species(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT\n);\nCREATE TABLE System_Farms(\n    agroforestry_system_id INTEGER,\n    farm_id INTEGER,\n    FOREIGN KEY(agroforestry_system_id) REFERENCES Agroforestry_Systems(id),\n    FOREIGN KEY(farm_id) REFERENCES Farms(id),\n    PRIMARY KEY(agroforestry_system_id, farm_id)\n);\nCREATE TABLE System_Species(\n    agroforestry_system_id INTEGER,\n    species_id INTEGER,\n    FOREIGN KEY(agroforestry_system_id) REFERENCES Agroforestry_Systems(id),\n    FOREIGN KEY(species_id) REFERENCES Species(id),\n    PRIMARY KEY(agroforestry_system_id, species_id)\n);\nCREATE TABLE Works_On(\n    farmer_id INTEGER,\n    farm_id INTEGER,\n    FOREIGN KEY(farmer_id) REFERENCES Farmers(id),\n    FOREIGN KEY(farm_id) REFERENCES Farms(id),\n    PRIMARY KEY(farmer_id, farm_id)\n);\n\nINSERT INTO \"Agroforestry_Systems\" (id,system_name,description) VALUES (1,'Silvopasture','A system where trees, livestock, and forages coexist.'),(2,'Alley Cropping','Trees are planted alongside crops to provide shade and reduce erosion.'),(3,'Forest Gardening','A diverse, multi-layered plant community based on woodland ecosystems.'),(4,'Riparian Buffer','Strips of vegetation along waterways to filter runoff.'),(5,'Windbreak','Rows of trees used to block wind.');\nINSERT INTO \"Farmers\" (id,first_name,last_name,email) VALUES (1,'John','Doe','john.doe@email.com'),(2,'Jane','Smith','jane.smith@email.com'),(3,'Bob','Johnson','bob.johnson@email.com'),(4,'Emily','Williams','emily.williams@email.com'),(5,'Tom','Brown','tom.brown@email.com');\nINSERT INTO \"Farms\" (id,farm_name,location) VALUES (1,'Sunny Acres','123 Main St, Ruralville'),(2,'Green Pastures','456 Elm St, Hometown'),(3,'Orchard Haven','789 Oak Lane, Fruitful City'),(4,'Meadow View','101 Pine St, Seedling County'),(5,'Timber Ridge','202 Cedar Ave, Lumbertown');\nINSERT INTO \"Species\" (id,name) VALUES (1,'Oak'),(2,'Apple'),(3,'Cherry'),(4,'Peach'),(5,'Plum');\nINSERT INTO \"System_Species\" (agroforestry_system_id,species_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\n",
      "question": "Which species are the same for all agroforestry systems?",
      "gold_queries": [
        "SELECT Species.name  from System_Species join Species on System_Species.species_id = Species.id join Agroforestry_Systems on System_Species.agroforestry_system_id = Agroforestry_Systems.id   GROUP BY System_Species.species_id HAVING COUNT(DISTINCT System_Species.agroforestry_system_id) = (SELECT COUNT(*) FROM  Agroforestry_Systems)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Select the species that occur most infrequently across agroforestry systems.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name \nFROM Species \nWHERE id IN (\n    SELECT species_id \n    FROM System_Species \n    GROUP BY species_id \n    ORDER BY COUNT(*) ASC \n    LIMIT 1\n)"
          ]
        },
        {
          "interpretation": "Count the occurrences of each species across systems and select the species with the highest count.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT S.name \nFROM Species S \nJOIN System_Species SS ON S.id = SS.species_id \nGROUP BY S.name \nORDER BY COUNT(S.name) DESC \nLIMIT 1"
          ]
        },
        {
          "interpretation": "Check if any agroforestry system contains a unique species.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT species_id, COUNT(agroforestry_system_id) as system_count\nFROM System_Species\nGROUP BY species_id\nHAVING system_count = 1"
          ]
        },
        {
          "interpretation": "List all unique species across all agroforestry systems and see which ones are common.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.name, COUNT(*) as common_count\nFROM Species AS T1\nJOIN System_Species AS T2 ON T1.id = T2.species_id\nGROUP BY T1.name\nORDER BY common_count DESC"
          ]
        },
        {
          "interpretation": "Check if there is only one species common to all agroforestry systems.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT species_id\nFROM System_Species\nGROUP BY species_id\nHAVING COUNT(DISTINCT agroforestry_system_id) = (SELECT COUNT(*) FROM Agroforestry_Systems)"
          ]
        },
        {
          "interpretation": "Determine if a specific species is present in every agroforestry system.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.name, CASE WHEN COUNT(DISTINCT ASY.id) = (SELECT COUNT(*) FROM Agroforestry_Systems) THEN 'Yes' ELSE 'No' END as Present_In_All_Systems\nFROM Species S\nLEFT JOIN System_Species SS ON S.id = SS.species_id\nJOIN Agroforestry_Systems ASY ON SS.agroforestry_system_id = ASY.id\nGROUP BY S.id, S.name"
          ]
        },
        {
          "interpretation": "Find the species that are unique to at least one agroforestry system.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT s.name\nFROM Species s\nJOIN System_Species ss ON s.id = ss.species_id\nGROUP BY s.name, ss.agroforestry_system_id\nHAVING COUNT(*) = 1"
          ]
        },
        {
          "interpretation": "Check the diversity of species across all agroforestry systems.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(DISTINCT species_id) AS species_diversity\nFROM System_Species"
          ]
        }
      ],
      "num_unique_execution_results": 8,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.125,
        "one_found": true,
        "f1_score": 0.2222222222222222,
        "num_queries": 8,
        "num_unique_queries": 8,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Agriculture/scope_agroforestry_systems_species/scope_agroforestry_systems_species.sqlite",
      "db_dump": "CREATE TABLE Agroforestry_Systems(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    system_name TEXT,\n    description TEXT\n);\nCREATE TABLE Farmers(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    email TEXT\n);\nCREATE TABLE Farms(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    farm_name TEXT,\n    location TEXT\n);\nCREATE TABLE Species(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT\n);\nCREATE TABLE System_Farms(\n    agroforestry_system_id INTEGER,\n    farm_id INTEGER,\n    FOREIGN KEY(agroforestry_system_id) REFERENCES Agroforestry_Systems(id),\n    FOREIGN KEY(farm_id) REFERENCES Farms(id),\n    PRIMARY KEY(agroforestry_system_id, farm_id)\n);\nCREATE TABLE System_Species(\n    agroforestry_system_id INTEGER,\n    species_id INTEGER,\n    FOREIGN KEY(agroforestry_system_id) REFERENCES Agroforestry_Systems(id),\n    FOREIGN KEY(species_id) REFERENCES Species(id),\n    PRIMARY KEY(agroforestry_system_id, species_id)\n);\nCREATE TABLE Works_On(\n    farmer_id INTEGER,\n    farm_id INTEGER,\n    FOREIGN KEY(farmer_id) REFERENCES Farmers(id),\n    FOREIGN KEY(farm_id) REFERENCES Farms(id),\n    PRIMARY KEY(farmer_id, farm_id)\n);\n\nINSERT INTO \"Agroforestry_Systems\" (id,system_name,description) VALUES (1,'Silvopasture','A system where trees, livestock, and forages coexist.'),(2,'Alley Cropping','Trees are planted alongside crops to provide shade and reduce erosion.'),(3,'Forest Gardening','A diverse, multi-layered plant community based on woodland ecosystems.'),(4,'Riparian Buffer','Strips of vegetation along waterways to filter runoff.'),(5,'Windbreak','Rows of trees used to block wind.');\nINSERT INTO \"Farmers\" (id,first_name,last_name,email) VALUES (1,'John','Doe','john.doe@email.com'),(2,'Jane','Smith','jane.smith@email.com'),(3,'Bob','Johnson','bob.johnson@email.com'),(4,'Emily','Williams','emily.williams@email.com'),(5,'Tom','Brown','tom.brown@email.com');\nINSERT INTO \"Farms\" (id,farm_name,location) VALUES (1,'Sunny Acres','123 Main St, Ruralville'),(2,'Green Pastures','456 Elm St, Hometown'),(3,'Orchard Haven','789 Oak Lane, Fruitful City'),(4,'Meadow View','101 Pine St, Seedling County'),(5,'Timber Ridge','202 Cedar Ave, Lumbertown');\nINSERT INTO \"Species\" (id,name) VALUES (1,'Oak'),(2,'Apple'),(3,'Cherry'),(4,'Peach'),(5,'Plum');\nINSERT INTO \"System_Species\" (agroforestry_system_id,species_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\n",
      "question": "For every agroforestry system, show the species that they contain.",
      "gold_queries": [
        "select agroforestry_systems.system_name , species.name from System_Species join Species on System_Species.species_id = Species.id join Agroforestry_Systems on System_Species.agroforestry_system_id = Agroforestry_Systems.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For every agroforestry system and every species it contains, include all additional information from the Agroforestry_Systems table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Agroforestry_Systems.*, Species.name\nFROM Agroforestry_Systems\nJOIN System_Species ON Agroforestry_Systems.id = System_Species.agroforestry_system_id\nJOIN Species ON System_Species.species_id = Species.id"
          ]
        },
        {
          "interpretation": "For each agroforestry system, show a table with the species it contains, grouped by category (e.g. fruit trees, nut trees, etc.).",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    a.system_name,\n    CASE \n        WHEN s.name IN ('Apple', 'Cherry', 'Peach', 'Plum') THEN 'Fruit Trees'\n        WHEN s.name = 'Oak' THEN 'Nut Trees'\n        ELSE 'Other'\n    END AS category,\n    s.name AS species_name\nFROM \n    System_Species ss\nJOIN \n    Agroforestry_Systems a ON ss.agroforestry_system_id = a.id\nJOIN \n    Species s ON ss.species_id = s.id\nORDER BY \n    a.system_name, category, species_name"
          ]
        },
        {
          "interpretation": "For each agroforestry system, show the most commonly occurring species, along with the count of systems that species appears in.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ss.species_id, s.name, COUNT(ss.agroforestry_system_id) as count\nFROM System_Species ss\nJOIN Species s ON ss.species_id = s.id\nGROUP BY ss.species_id, s.name\nORDER BY count DESC"
          ]
        },
        {
          "interpretation": "For each species, show the agroforestry systems it belongs to, along with the system name and description.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.name AS species_name, A.system_name, A.description\nFROM Species S\nJOIN System_Species SS ON S.id = SS.species_id\nJOIN Agroforestry_Systems A ON SS.agroforestry_system_id = A.id"
          ]
        },
        {
          "interpretation": "For each agroforestry system, show the top 5 most frequently occurring species.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ASys.system_name, S.name, COUNT(*) as frequency\nFROM Agroforestry_Systems AS ASys\nJOIN System_Species AS SS ON ASys.id = SS.agroforestry_system_id\nJOIN Species AS S ON SS.species_id = S.id\nGROUP BY ASys.id, S.id\nORDER BY ASys.id, frequency DESC\nLIMIT 5"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Agriculture/scope_agroforestry_systems_species/scope_agroforestry_systems_species.sqlite",
      "db_dump": "CREATE TABLE Agroforestry_Systems(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    system_name TEXT,\n    description TEXT\n);\nCREATE TABLE Farmers(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    email TEXT\n);\nCREATE TABLE Farms(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    farm_name TEXT,\n    location TEXT\n);\nCREATE TABLE Species(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT\n);\nCREATE TABLE System_Farms(\n    agroforestry_system_id INTEGER,\n    farm_id INTEGER,\n    FOREIGN KEY(agroforestry_system_id) REFERENCES Agroforestry_Systems(id),\n    FOREIGN KEY(farm_id) REFERENCES Farms(id),\n    PRIMARY KEY(agroforestry_system_id, farm_id)\n);\nCREATE TABLE System_Species(\n    agroforestry_system_id INTEGER,\n    species_id INTEGER,\n    FOREIGN KEY(agroforestry_system_id) REFERENCES Agroforestry_Systems(id),\n    FOREIGN KEY(species_id) REFERENCES Species(id),\n    PRIMARY KEY(agroforestry_system_id, species_id)\n);\nCREATE TABLE Works_On(\n    farmer_id INTEGER,\n    farm_id INTEGER,\n    FOREIGN KEY(farmer_id) REFERENCES Farmers(id),\n    FOREIGN KEY(farm_id) REFERENCES Farms(id),\n    PRIMARY KEY(farmer_id, farm_id)\n);\n\nINSERT INTO \"Agroforestry_Systems\" (id,system_name,description) VALUES (1,'Silvopasture','A system where trees, livestock, and forages coexist.'),(2,'Alley Cropping','Trees are planted alongside crops to provide shade and reduce erosion.'),(3,'Forest Gardening','A diverse, multi-layered plant community based on woodland ecosystems.'),(4,'Riparian Buffer','Strips of vegetation along waterways to filter runoff.'),(5,'Windbreak','Rows of trees used to block wind.');\nINSERT INTO \"Farmers\" (id,first_name,last_name,email) VALUES (1,'John','Doe','john.doe@email.com'),(2,'Jane','Smith','jane.smith@email.com'),(3,'Bob','Johnson','bob.johnson@email.com'),(4,'Emily','Williams','emily.williams@email.com'),(5,'Tom','Brown','tom.brown@email.com');\nINSERT INTO \"Farms\" (id,farm_name,location) VALUES (1,'Sunny Acres','123 Main St, Ruralville'),(2,'Green Pastures','456 Elm St, Hometown'),(3,'Orchard Haven','789 Oak Lane, Fruitful City'),(4,'Meadow View','101 Pine St, Seedling County'),(5,'Timber Ridge','202 Cedar Ave, Lumbertown');\nINSERT INTO \"Species\" (id,name) VALUES (1,'Oak'),(2,'Apple'),(3,'Cherry'),(4,'Peach'),(5,'Plum');\nINSERT INTO \"System_Species\" (agroforestry_system_id,species_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\n",
      "question": "Give me the species that each agroforestry system contains.",
      "gold_queries": [
        "SELECT Species.name  from System_Species join Species on System_Species.species_id = Species.id join Agroforestry_Systems on System_Species.agroforestry_system_id = Agroforestry_Systems.id   GROUP BY System_Species.species_id HAVING COUNT(DISTINCT System_Species.agroforestry_system_id) = (SELECT COUNT(*) FROM  Agroforestry_Systems)",
        "select agroforestry_systems.system_name , species.name from System_Species join Species on System_Species.species_id = Species.id join Agroforestry_Systems on System_Species.agroforestry_system_id = Agroforestry_Systems.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Give a comprehensive species list categorized by agroforestry system if applicable.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.system_name, SP.name \nFROM Agroforestry_Systems S \nJOIN System_Species SS ON S.id = SS.agroforestry_system_id \nJOIN Species SP ON SS.species_id = SP.id \nORDER BY S.system_name, SP.name"
          ]
        },
        {
          "interpretation": "Retrieve the different species for each agroforestry system showing multiple species per record if present.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT agroforestry_system_id, GROUP_CONCAT(species_id) AS species_ids\nFROM System_Species\nGROUP BY agroforestry_system_id"
          ]
        },
        {
          "interpretation": "List unique agroforestry system-species combinations from the database.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT agroforestry_system_id, species_id FROM System_Species"
          ]
        },
        {
          "interpretation": "Prove or disprove if each agroforestry system in the database has the corresponding data for the species listed in the table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT a.system_name, s.name, CASE WHEN ss.species_id IS NOT NULL THEN 'Proven' ELSE 'Disproven' END as proof_status\nFROM Agroforestry_Systems a\nCROSS JOIN Species s\nLEFT JOIN System_Species ss ON a.id = ss.agroforestry_system_id AND s.id = ss.species_id"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.25,
        "one_found": true,
        "f1_score": 0.3333333333333333,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Airport/scope_duty_free_shops_products/scope_duty_free_shops_products.sqlite",
      "db_dump": "CREATE TABLE Duty_Free_Shops (\n    shop_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Duty_Free_Shops_Products (\n    shop_id INTEGER,\n    product_id INTEGER,\n    quantity INTEGER,\n    FOREIGN KEY(shop_id) REFERENCES Duty_Free_Shops(shop_id),\n    FOREIGN KEY(product_id) REFERENCES Products(product_id),\n    PRIMARY KEY(shop_id, product_id)\n);\nCREATE TABLE Products (\n    product_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    category TEXT,\n    price REAL\n);\n\nINSERT INTO \"Duty_Free_Shops\" (shop_id,name,location) VALUES (1,'Shop1','Terminal A'),(2,'Shop2','Terminal B'),(3,'Shop3','Terminal C'),(4,'Shop4','Terminal D'),(5,'Shop5','Terminal E');\nINSERT INTO \"Duty_Free_Shops_Products\" (shop_id,product_id,quantity) VALUES (1,1,10),(1,2,20),(2,3,15),(2,4,30),(3,1,5),(3,2,10),(4,1,15),(4,3,20),(5,2,25),(5,4,30),(2,1,15),(5,1,25);\nINSERT INTO \"Products\" (product_id,category,price) VALUES (1,'Perfume',90.78),(2,'Cosmetics',65.43),(3,'Electronics',250.89),(4,'Fashion Accessories',150.99),(5,'Toys',20.0);\n",
      "question": "For every duty free shop, list the categories and prices of the products sold.",
      "gold_queries": [
        "select duty_free_shops.name , products.category , products.price from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Get the list of product categories and their prices, grouping them by shop and including duplicate products.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT D.name, P.category, P.price\nFROM Duty_Free_Shops_Products DFSP\nJOIN Products P ON DFSP.product_id = P.product_id\nJOIN Duty_Free_Shops D ON DFSP.shop_id = D.shop_id"
          ]
        },
        {
          "interpretation": "Get a list of distinct product categories and their prices sold across all duty free shops, disregarding product ID granularity.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT category, price FROM Products"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "one_found": true,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Airport/scope_duty_free_shops_products/scope_duty_free_shops_products.sqlite",
      "db_dump": "CREATE TABLE Duty_Free_Shops (\n    shop_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Duty_Free_Shops_Products (\n    shop_id INTEGER,\n    product_id INTEGER,\n    quantity INTEGER,\n    FOREIGN KEY(shop_id) REFERENCES Duty_Free_Shops(shop_id),\n    FOREIGN KEY(product_id) REFERENCES Products(product_id),\n    PRIMARY KEY(shop_id, product_id)\n);\nCREATE TABLE Products (\n    product_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    category TEXT,\n    price REAL\n);\n\nINSERT INTO \"Duty_Free_Shops\" (shop_id,name,location) VALUES (1,'Shop1','Terminal A'),(2,'Shop2','Terminal B'),(3,'Shop3','Terminal C'),(4,'Shop4','Terminal D'),(5,'Shop5','Terminal E');\nINSERT INTO \"Duty_Free_Shops_Products\" (shop_id,product_id,quantity) VALUES (1,1,10),(1,2,20),(2,3,15),(2,4,30),(3,1,5),(3,2,10),(4,1,15),(4,3,20),(5,2,25),(5,4,30),(2,1,15),(5,1,25);\nINSERT INTO \"Products\" (product_id,category,price) VALUES (1,'Perfume',90.78),(2,'Cosmetics',65.43),(3,'Electronics',250.89),(4,'Fashion Accessories',150.99),(5,'Toys',20.0);\n",
      "question": "List the price of products that are common to all duty-free shops.",
      "gold_queries": [
        "SELECT Products.price  from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id   GROUP BY Duty_Free_Shops_Products.product_id HAVING COUNT(DISTINCT Duty_Free_Shops_Products.shop_id) = (SELECT COUNT(*) FROM  Duty_Free_Shops)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List the price of products that can be found in all duty-free shops across all terminals.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT price \nFROM Products \nWHERE product_id IN (\n    SELECT product_id \n    FROM Duty_Free_Shops_Products \n    GROUP BY product_id \n    HAVING COUNT(DISTINCT shop_id) = (SELECT COUNT(*) FROM Duty_Free_Shops)\n)"
          ]
        },
        {
          "interpretation": "Determine the minimum and maximum price of common products in duty-free shops.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT MIN(price), MAX(price) FROM Products"
          ]
        },
        {
          "interpretation": "List the quantity and price of products that have all unique shops as common locations.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.quantity, T2.price \nFROM Duty_Free_Shops_Products AS T1 \nJOIN Products AS T2 ON T1.product_id = T2.product_id \nWHERE T1.product_id IN (\n    SELECT product_id \n    FROM Duty_Free_Shops_Products \n    GROUP BY product_id \n    HAVING COUNT(DISTINCT shop_id) = (SELECT COUNT(*) FROM Duty_Free_Shops)\n)"
          ]
        },
        {
          "interpretation": "Retrieve the products common to duty-free shops based on their shop_id and calculate the sum of their product prices.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT SUM(P.price) \nFROM Products P \nJOIN Duty_Free_Shops_Products DFS_P ON P.product_id = DFS_P.product_id \nWHERE DFS_P.product_id IN (\n    SELECT product_id \n    FROM Duty_Free_Shops_Products \n    GROUP BY product_id \n    HAVING COUNT(DISTINCT shop_id) = (SELECT COUNT(*) FROM Duty_Free_Shops)\n)"
          ]
        },
        {
          "interpretation": "Note down the unique item categories of products found in all duty-free shops and their prices.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT category, price FROM Products"
          ]
        },
        {
          "interpretation": "Show prices of products that can be bought in duty-free shops terminals present from A to E.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT price FROM Products"
          ]
        },
        {
          "interpretation": "Determine the total number of products with a shared price across duty-free shops.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(*) FROM Products WHERE price IN (SELECT price FROM Products GROUP BY price HAVING COUNT(*) > 1)"
          ]
        },
        {
          "interpretation": "Find products and their prices in the duty-free shop database that have all workaround elements.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT product_id, price FROM Products"
          ]
        },
        {
          "interpretation": "List price information of products available across all duty-free shop locations with at least one shared occurrence.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT price \nFROM Products \nWHERE product_id IN (\n    SELECT product_id \n    FROM Duty_Free_Shops_Products \n    GROUP BY product_id \n    HAVING COUNT(DISTINCT shop_id) > 1\n)"
          ]
        },
        {
          "interpretation": "Find the average price of products shared among duty-free shops.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AVG(price) \nFROM Products \nWHERE product_id IN (\n    SELECT product_id \n    FROM Duty_Free_Shops_Products \n    GROUP BY product_id \n    HAVING COUNT(DISTINCT shop_id) > 1\n)"
          ]
        }
      ],
      "num_unique_execution_results": 10,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.1,
        "one_found": true,
        "f1_score": 0.18181818181818182,
        "num_queries": 10,
        "num_unique_queries": 10,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Airport/scope_duty_free_shops_products/scope_duty_free_shops_products.sqlite",
      "db_dump": "CREATE TABLE Duty_Free_Shops (\n    shop_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Duty_Free_Shops_Products (\n    shop_id INTEGER,\n    product_id INTEGER,\n    quantity INTEGER,\n    FOREIGN KEY(shop_id) REFERENCES Duty_Free_Shops(shop_id),\n    FOREIGN KEY(product_id) REFERENCES Products(product_id),\n    PRIMARY KEY(shop_id, product_id)\n);\nCREATE TABLE Products (\n    product_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    category TEXT,\n    price REAL\n);\n\nINSERT INTO \"Duty_Free_Shops\" (shop_id,name,location) VALUES (1,'Shop1','Terminal A'),(2,'Shop2','Terminal B'),(3,'Shop3','Terminal C'),(4,'Shop4','Terminal D'),(5,'Shop5','Terminal E');\nINSERT INTO \"Duty_Free_Shops_Products\" (shop_id,product_id,quantity) VALUES (1,1,10),(1,2,20),(2,3,15),(2,4,30),(3,1,5),(3,2,10),(4,1,15),(4,3,20),(5,2,25),(5,4,30),(2,1,15),(5,1,25);\nINSERT INTO \"Products\" (product_id,category,price) VALUES (1,'Perfume',90.78),(2,'Cosmetics',65.43),(3,'Electronics',250.89),(4,'Fashion Accessories',150.99),(5,'Toys',20.0);\n",
      "question": "Show me the categories and prices of the products every duty free shop sells.",
      "gold_queries": [
        "SELECT Products.category, Products.price  from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id   GROUP BY Duty_Free_Shops_Products.product_id HAVING COUNT(DISTINCT Duty_Free_Shops_Products.shop_id) = (SELECT COUNT(*) FROM  Duty_Free_Shops)",
        "select duty_free_shops.name , products.category , products.price from Duty_Free_Shops_Products join Products on Duty_Free_Shops_Products.product_id = Products.product_id join Duty_Free_Shops on Duty_Free_Shops_Products.shop_id = Duty_Free_Shops.shop_id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For each duty free shop, list the categories of products sold and their associated prices in a list per product.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT d.name, p.category, p.price \nFROM Duty_Free_Shops d \nJOIN Duty_Free_Shops_Products dfs ON d.shop_id = dfs.shop_id \nJOIN Products p ON dfs.product_id = p.product_id"
          ]
        },
        {
          "interpretation": "List every duty free shop that sells products from a specific category and include the price per product in the category.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT dfs.name, p.price\nFROM Duty_Free_Shops AS dfs\nJOIN Duty_Free_Shops_Products AS dfs_p ON dfs.shop_id = dfs_p.shop_id\nJOIN Products AS p ON dfs_p.product_id = p.product_id\nWHERE p.category = 'Specific Category'"
          ]
        },
        {
          "interpretation": "Display the categories and prices of products sold by each duty free shop without multiple entries, but include information about the quantity sold.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT ds.name, p.category, p.price, dfs_p.quantity\nFROM Duty_Free_Shops_Products dfs_p\nJOIN Duty_Free_Shops ds ON dfs_p.shop_id = ds.shop_id\nJOIN Products p ON dfs_p.product_id = p.product_id"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.3333333333333333,
        "one_found": true,
        "f1_score": 0.4,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Banking/scope_bank_training_topics/scope_bank_training_topics.sqlite",
      "db_dump": "CREATE TABLE Bank_Training (\n    training_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    bank_id INTEGER,\n    employee_id INTEGER,\n    FOREIGN KEY(bank_id) REFERENCES Banks(id),\n    FOREIGN KEY(employee_id) REFERENCES Employees(id)\n);\nCREATE TABLE Bank_Training_Topics (\n    bank_training_id INTEGER,\n    topic_id INTEGER,\n    FOREIGN KEY(bank_training_id) REFERENCES Bank_Training(training_id),\n    FOREIGN KEY(topic_id) REFERENCES Topics(id),\n    PRIMARY KEY(bank_training_id, topic_id)\n);\nCREATE TABLE Banks (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Employees (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    bank_id INTEGER,\n    FOREIGN KEY(bank_id) REFERENCES Banks(id)\n);\nCREATE TABLE Topics (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    value TEXT\n);\nCREATE TABLE TrainingSessions (\n    session_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date DATETIME,\n    trainer_id INTEGER,\n    topic_id INTEGER,\n    FOREIGN KEY(trainer_id) REFERENCES Employees(id),\n    FOREIGN KEY(topic_id) REFERENCES Topics(id)\n);\n\nINSERT INTO \"Bank_Training\" (training_id,bank_id,employee_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Bank_Training_Topics\" (bank_training_id,topic_id) VALUES (1,1),(1,2),(2,1),(2,2),(3,1),(4,1),(5,1);\nINSERT INTO \"Banks\" (id,name,location) VALUES (1,'ABC Bank','New York'),(2,'XYZ Bank','California'),(3,'LMN Bank','Texas'),(4,'PQR Bank','Florida'),(5,'STU Bank','Illinois');\nINSERT INTO \"Employees\" (id,first_name,last_name,bank_id) VALUES (1,'John','Doe',1),(2,'Jane','Smith',2),(3,'Mike','Brown',3),(4,'Emma','White',4),(5,'Tom','Black',5);\nINSERT INTO \"Topics\" (id,value) VALUES (1,'Customer Service Skills'),(2,'Fraud Prevention'),(3,'Interest Rate Management'),(4,'Loan Processing'),(5,'Investment Strategies');\nINSERT INTO \"TrainingSessions\" (session_id,date,trainer_id,topic_id) VALUES (1,'2021-10-01 09:00:00',1,1),(2,'2021-10-08 09:00:00',2,2),(3,'2021-10-15 09:00:00',3,1),(4,'2021-10-22 09:00:00',4,2),(5,'2021-10-29 09:00:00',5,1);\n",
      "question": "For each bank training session, provide the corresponding value of topics.",
      "gold_queries": [
        "select bank_training.training_id , topics.value from Bank_Training_Topics join Topics on Bank_Training_Topics.topic_id = Topics.id join Bank_Training on Bank_Training_Topics.bank_training_id = Bank_Training.training_id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For all bank training instances with related bank IDs, find the matching topic descriptions from the Topics table via the primary key in Bank_Training_Topics.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T3.value \nFROM Bank_Training AS T1 \nJOIN Bank_Training_Topics AS T2 ON T1.training_id = T2.bank_training_id \nJOIN Topics AS T3 ON T2.topic_id = T3.id"
          ]
        },
        {
          "interpretation": "For the training instances in Bank_Training, extract both the topic values and their corresponding IDs through the Bank_Training_Topics table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T.value, BT.topic_id\nFROM Bank_Training_Topics BT\nJOIN Topics T ON BT.topic_id = T.id"
          ]
        },
        {
          "interpretation": "For each bank-employee pair in the Bank_Training table, match them with topic values based on existing entries in the Employees and Bank realms.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT B.name AS bank_name, E.first_name, E.last_name, T.value AS topic_value\nFROM Bank_Training BT\nJOIN Banks B ON BT.bank_id = B.id\nJOIN Employees E ON BT.employee_id = E.id\nJOIN Bank_Training_Topics BTT ON BT.training_id = BTT.bank_training_id\nJOIN Topics T ON BTT.topic_id = T.id"
          ]
        },
        {
          "interpretation": "Find the values of topics related to bank training sessions through the Bank_Training and Bank_Training_Topics joining the Topics table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT T3.value \nFROM Bank_Training AS T1 \nJOIN Bank_Training_Topics AS T2 ON T1.training_id = T2.bank_training_id \nJOIN Topics AS T3 ON T2.topic_id = T3.id"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Banking/scope_bank_training_topics/scope_bank_training_topics.sqlite",
      "db_dump": "CREATE TABLE Bank_Training (\n    training_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    bank_id INTEGER,\n    employee_id INTEGER,\n    FOREIGN KEY(bank_id) REFERENCES Banks(id),\n    FOREIGN KEY(employee_id) REFERENCES Employees(id)\n);\nCREATE TABLE Bank_Training_Topics (\n    bank_training_id INTEGER,\n    topic_id INTEGER,\n    FOREIGN KEY(bank_training_id) REFERENCES Bank_Training(training_id),\n    FOREIGN KEY(topic_id) REFERENCES Topics(id),\n    PRIMARY KEY(bank_training_id, topic_id)\n);\nCREATE TABLE Banks (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Employees (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    bank_id INTEGER,\n    FOREIGN KEY(bank_id) REFERENCES Banks(id)\n);\nCREATE TABLE Topics (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    value TEXT\n);\nCREATE TABLE TrainingSessions (\n    session_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date DATETIME,\n    trainer_id INTEGER,\n    topic_id INTEGER,\n    FOREIGN KEY(trainer_id) REFERENCES Employees(id),\n    FOREIGN KEY(topic_id) REFERENCES Topics(id)\n);\n\nINSERT INTO \"Bank_Training\" (training_id,bank_id,employee_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Bank_Training_Topics\" (bank_training_id,topic_id) VALUES (1,1),(1,2),(2,1),(2,2),(3,1),(4,1),(5,1);\nINSERT INTO \"Banks\" (id,name,location) VALUES (1,'ABC Bank','New York'),(2,'XYZ Bank','California'),(3,'LMN Bank','Texas'),(4,'PQR Bank','Florida'),(5,'STU Bank','Illinois');\nINSERT INTO \"Employees\" (id,first_name,last_name,bank_id) VALUES (1,'John','Doe',1),(2,'Jane','Smith',2),(3,'Mike','Brown',3),(4,'Emma','White',4),(5,'Tom','Black',5);\nINSERT INTO \"Topics\" (id,value) VALUES (1,'Customer Service Skills'),(2,'Fraud Prevention'),(3,'Interest Rate Management'),(4,'Loan Processing'),(5,'Investment Strategies');\nINSERT INTO \"TrainingSessions\" (session_id,date,trainer_id,topic_id) VALUES (1,'2021-10-01 09:00:00',1,1),(2,'2021-10-08 09:00:00',2,2),(3,'2021-10-15 09:00:00',3,1),(4,'2021-10-22 09:00:00',4,2),(5,'2021-10-29 09:00:00',5,1);\n",
      "question": "What value of topics is common across all bank training sessions?",
      "gold_queries": [
        "SELECT Topics.value  from Bank_Training_Topics join Topics on Bank_Training_Topics.topic_id = Topics.id join Bank_Training on Bank_Training_Topics.bank_training_id = Bank_Training.training_id   GROUP BY Bank_Training_Topics.topic_id HAVING COUNT(DISTINCT Bank_Training_Topics.bank_training_id) = (SELECT COUNT(*) FROM  Bank_Training)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What topic values are common to all unique combination of Bank_training_id and Employee_id and Bank_id table partitions of Bank_Training_topic.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT t.value\nFROM Topics t\nWHERE NOT EXISTS (\n    SELECT 1\n    FROM Bank_Training bt\n    WHERE NOT EXISTS (\n        SELECT 1\n        FROM Bank_Training_Topics btt\n        WHERE btt.bank_training_id = bt.training_id\n        AND btt.topic_id = t.id\n    )\n)"
          ]
        },
        {
          "interpretation": "What value of topics appears in every bank training session record in the Bank_Training_Table?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T.value\nFROM Topics AS T\nWHERE NOT EXISTS (\n    SELECT 1\n    FROM Bank_Training_Topics AS BT\n    WHERE BT.topic_id = T.id\n    GROUP BY BT.topic_id\n    HAVING COUNT(DISTINCT BT.bank_training_id) < (\n        SELECT COUNT(*) FROM Bank_Training\n    )\n)"
          ]
        },
        {
          "interpretation": "What value appears to appear with the greatest difference progressively smaller in numbers when array is examined progressively outwards in Bank_Training topicid column while bank_id represents first part of sorted selective type belonging both training table workgroup.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T.value \nFROM Topics T \nJOIN Bank_Training_Topics BTT ON T.id = BTT.topic_id \nJOIN Bank_Training BT ON BTT.bank_training_id = BT.training_id \nGROUP BY T.id \nORDER BY COUNT(*) DESC"
          ]
        },
        {
          "interpretation": "What value of topics is never deleted from Bank_Training_Topics where training ID appears in all three tables (bank training, bank, and employee, assuming no linked events occur randomly later eliminating connection to bank).",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T.id, T.value \nFROM Topics T \nWHERE T.id NOT IN (\n    SELECT BT.topic_id \n    FROM Bank_Training_Topics BT \n    JOIN Bank_Training B ON BT.bank_training_id = B.training_id\n    JOIN Banks BK ON B.bank_id = BK.id\n    JOIN Employees E ON B.employee_id = E.id\n)"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "one_found": true,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Banking/scope_bank_training_topics/scope_bank_training_topics.sqlite",
      "db_dump": "CREATE TABLE Bank_Training (\n    training_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    bank_id INTEGER,\n    employee_id INTEGER,\n    FOREIGN KEY(bank_id) REFERENCES Banks(id),\n    FOREIGN KEY(employee_id) REFERENCES Employees(id)\n);\nCREATE TABLE Bank_Training_Topics (\n    bank_training_id INTEGER,\n    topic_id INTEGER,\n    FOREIGN KEY(bank_training_id) REFERENCES Bank_Training(training_id),\n    FOREIGN KEY(topic_id) REFERENCES Topics(id),\n    PRIMARY KEY(bank_training_id, topic_id)\n);\nCREATE TABLE Banks (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Employees (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    bank_id INTEGER,\n    FOREIGN KEY(bank_id) REFERENCES Banks(id)\n);\nCREATE TABLE Topics (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    value TEXT\n);\nCREATE TABLE TrainingSessions (\n    session_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date DATETIME,\n    trainer_id INTEGER,\n    topic_id INTEGER,\n    FOREIGN KEY(trainer_id) REFERENCES Employees(id),\n    FOREIGN KEY(topic_id) REFERENCES Topics(id)\n);\n\nINSERT INTO \"Bank_Training\" (training_id,bank_id,employee_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Bank_Training_Topics\" (bank_training_id,topic_id) VALUES (1,1),(1,2),(2,1),(2,2),(3,1),(4,1),(5,1);\nINSERT INTO \"Banks\" (id,name,location) VALUES (1,'ABC Bank','New York'),(2,'XYZ Bank','California'),(3,'LMN Bank','Texas'),(4,'PQR Bank','Florida'),(5,'STU Bank','Illinois');\nINSERT INTO \"Employees\" (id,first_name,last_name,bank_id) VALUES (1,'John','Doe',1),(2,'Jane','Smith',2),(3,'Mike','Brown',3),(4,'Emma','White',4),(5,'Tom','Black',5);\nINSERT INTO \"Topics\" (id,value) VALUES (1,'Customer Service Skills'),(2,'Fraud Prevention'),(3,'Interest Rate Management'),(4,'Loan Processing'),(5,'Investment Strategies');\nINSERT INTO \"TrainingSessions\" (session_id,date,trainer_id,topic_id) VALUES (1,'2021-10-01 09:00:00',1,1),(2,'2021-10-08 09:00:00',2,2),(3,'2021-10-15 09:00:00',3,1),(4,'2021-10-22 09:00:00',4,2),(5,'2021-10-29 09:00:00',5,1);\n",
      "question": "What value of topics is associated with each bank training?",
      "gold_queries": [
        "SELECT Topics.value  from Bank_Training_Topics join Topics on Bank_Training_Topics.topic_id = Topics.id join Bank_Training on Bank_Training_Topics.bank_training_id = Bank_Training.training_id   GROUP BY Bank_Training_Topics.topic_id HAVING COUNT(DISTINCT Bank_Training_Topics.bank_training_id) = (SELECT COUNT(*) FROM  Bank_Training)",
        "select bank_training.training_id , topics.value from Bank_Training_Topics join Topics on Bank_Training_Topics.topic_id = Topics.id join Bank_Training on Bank_Training_Topics.bank_training_id = Bank_Training.training_id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What value of topics is associated with each distinct bank training across the table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT T1.value\nFROM Topics AS T1\nJOIN Bank_Training_Topics AS T2 ON T1.id = T2.topic_id"
          ]
        },
        {
          "interpretation": "What values of topics (from Topics) are associated with each distinct bank training within Bank_Training_Topics.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT bt.bank_training_id, t.value\nFROM Bank_Training_Topics bt\nJOIN Topics t ON bt.topic_id = t.id"
          ]
        },
        {
          "interpretation": "What value of topics is associated with each individual bank training.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T.value\nFROM Bank_Training_Topics BT\nJOIN Topics T ON BT.topic_id = T.id"
          ]
        },
        {
          "interpretation": "Get the distinct values of topics id that are associated with each training from Bank_Training.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT topic_id FROM Bank_Training_Topics"
          ]
        },
        {
          "interpretation": "What value of topic_id within Bank_Training_Topics corresponds to each distinct bank training.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT bank_training_id, topic_id FROM Bank_Training_Topics"
          ]
        },
        {
          "interpretation": "What values of topic_id are associated with each distinct bank training across the table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT bank_training_id, GROUP_CONCAT(topic_id) AS topic_ids \nFROM Bank_Training_Topics \nGROUP BY bank_training_id"
          ]
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.16666666666666666,
        "one_found": true,
        "f1_score": 0.25,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Banking/scope_bank_statements_transactions/scope_bank_statements_transactions.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Balance REAL,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Bank_Statements(\n    StatementID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    StartDate DATETIME,\n    EndDate DATETIME,\n    TotalAmount REAL,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\nCREATE TABLE Bank_Statements_Transactions(\n    StatementTransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StatementID INTEGER,\n    TransactionID INTEGER,\n    FOREIGN KEY (StatementID) REFERENCES Bank_Statements(StatementID),\n    FOREIGN KEY (TransactionID) REFERENCES Transactions(TransactionID));\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    TransactionType TEXT, -- e.g., Subscription Payments, Transfer, etc.\n    Amount REAL,\n    Date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\n\nINSERT INTO \"Accounts\" (AccountNumber,CustomerID,Balance) VALUES (1,1,1000.0),(2,2,800.0),(3,3,900.0),(4,4,700.0),(5,5,600.0);\nINSERT INTO \"Bank_Statements\" (StatementID,AccountNumber,StartDate,EndDate,TotalAmount) VALUES (1,1,'2021-01-01','2021-01-31',250.0),(2,2,'2021-02-01','2021-02-28',260.0),(3,3,'2021-03-01','2021-03-31',270.0),(4,4,'2021-04-01','2021-04-30',280.0),(5,5,'2021-05-01','2021-05-31',290.0);\nINSERT INTO \"Bank_Statements_Transactions\" (StatementTransactionID,StatementID,TransactionID) VALUES (1,1,1),(2,1,2),(3,2,3),(4,2,4),(5,3,5),(6,3,6),(7,4,7),(8,4,8),(9,5,9),(10,5,10),(11,2,1),(12,3,1),(13,4,1),(14,5,1);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Michael','Brown'),(4,'Emily','White'),(5,'David','Black');\nINSERT INTO \"Transactions\" (TransactionID,AccountNumber,TransactionType,Amount,Date) VALUES (1,1,'Subscription_Payments',150.0,'2024-01-30 18:53:44'),(2,1,'Transfer',200.0,'2024-01-30 18:53:44'),(3,2,'Subscription_Payments',130.0,'2024-01-30 18:53:44'),(4,2,'Transfer',180.0,'2024-01-30 18:53:44'),(5,3,'Subscription_Payments',140.0,'2024-01-30 18:53:44'),(6,3,'Transfer',220.0,'2024-01-30 18:53:44'),(7,4,'Subscription_Payments',120.0,'2024-01-30 18:53:44'),(8,4,'Transfer',190.0,'2024-01-30 18:53:44'),(9,5,'Subscription_Payments',110.0,'2024-01-30 18:53:44'),(10,5,'Transfer',170.0,'2024-01-30 18:53:44');\n",
      "question": "Give me the common transaction types and their dates we have in all bank statements.",
      "gold_queries": [
        "SELECT Transactions.TransactionType, Transactions.Date  from Bank_Statements_Transactions join Transactions on Bank_Statements_Transactions.TransactionID = Transactions.TransactionID join Bank_Statements on Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID   GROUP BY Bank_Statements_Transactions.TransactionID HAVING COUNT(DISTINCT Bank_Statements_Transactions.StatementID) = (SELECT COUNT(*) FROM  Bank_Statements)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "List all the transaction types and their earliest dates found in the bank statements.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT TransactionType, MIN(Date) AS EarliestDate FROM Transactions GROUP BY TransactionType"
          ]
        },
        {
          "interpretation": "Find the transaction types that have no date in the bank statements.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT TransactionType FROM Transactions WHERE Date NOT IN (SELECT Date FROM Transactions WHERE TransactionID IN (SELECT TransactionID FROM Bank_Statements_Transactions))"
          ]
        },
        {
          "interpretation": "Get the common transaction types and their frequency in all the bank statements.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT TransactionType, COUNT(*) AS Frequency\nFROM Transactions\nGROUP BY TransactionType"
          ]
        },
        {
          "interpretation": "Get the earliest and latest dates for each unique transaction type found in the bank statements.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT TransactionType, MIN(Date) AS EarliestDate, MAX(Date) AS LatestDate\nFROM Transactions\nGROUP BY TransactionType"
          ]
        },
        {
          "interpretation": "List all the transaction types with any date that appears in the bank statements.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT T.TransactionType FROM Transactions T INNER JOIN Bank_Statements_Transactions BST ON T.TransactionID = BST.TransactionID"
          ]
        },
        {
          "interpretation": "Find the transaction types and dates that are present in every bank statement.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT TransactionType, Date FROM Transactions WHERE TransactionID IN (SELECT TransactionID FROM Bank_Statements_Transactions GROUP BY TransactionID HAVING COUNT(DISTINCT StatementID) = (SELECT COUNT(*) FROM Bank_Statements))"
          ]
        },
        {
          "interpretation": "Determine the variation in dates for each unique transaction type across all the bank statements.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT TransactionType, MAX(Date) - MIN(Date) AS DateVariation\nFROM Transactions\nGROUP BY TransactionType"
          ]
        }
      ],
      "num_unique_execution_results": 7,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.14285714285714285,
        "one_found": true,
        "f1_score": 0.25,
        "num_queries": 7,
        "num_unique_queries": 7,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Banking/scope_bank_statements_transactions/scope_bank_statements_transactions.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Balance REAL,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Bank_Statements(\n    StatementID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    StartDate DATETIME,\n    EndDate DATETIME,\n    TotalAmount REAL,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\nCREATE TABLE Bank_Statements_Transactions(\n    StatementTransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StatementID INTEGER,\n    TransactionID INTEGER,\n    FOREIGN KEY (StatementID) REFERENCES Bank_Statements(StatementID),\n    FOREIGN KEY (TransactionID) REFERENCES Transactions(TransactionID));\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    TransactionType TEXT, -- e.g., Subscription Payments, Transfer, etc.\n    Amount REAL,\n    Date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\n\nINSERT INTO \"Accounts\" (AccountNumber,CustomerID,Balance) VALUES (1,1,1000.0),(2,2,800.0),(3,3,900.0),(4,4,700.0),(5,5,600.0);\nINSERT INTO \"Bank_Statements\" (StatementID,AccountNumber,StartDate,EndDate,TotalAmount) VALUES (1,1,'2021-01-01','2021-01-31',250.0),(2,2,'2021-02-01','2021-02-28',260.0),(3,3,'2021-03-01','2021-03-31',270.0),(4,4,'2021-04-01','2021-04-30',280.0),(5,5,'2021-05-01','2021-05-31',290.0);\nINSERT INTO \"Bank_Statements_Transactions\" (StatementTransactionID,StatementID,TransactionID) VALUES (1,1,1),(2,1,2),(3,2,3),(4,2,4),(5,3,5),(6,3,6),(7,4,7),(8,4,8),(9,5,9),(10,5,10),(11,2,1),(12,3,1),(13,4,1),(14,5,1);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Michael','Brown'),(4,'Emily','White'),(5,'David','Black');\nINSERT INTO \"Transactions\" (TransactionID,AccountNumber,TransactionType,Amount,Date) VALUES (1,1,'Subscription_Payments',150.0,'2024-01-30 18:53:44'),(2,1,'Transfer',200.0,'2024-01-30 18:53:44'),(3,2,'Subscription_Payments',130.0,'2024-01-30 18:53:44'),(4,2,'Transfer',180.0,'2024-01-30 18:53:44'),(5,3,'Subscription_Payments',140.0,'2024-01-30 18:53:44'),(6,3,'Transfer',220.0,'2024-01-30 18:53:44'),(7,4,'Subscription_Payments',120.0,'2024-01-30 18:53:44'),(8,4,'Transfer',190.0,'2024-01-30 18:53:44'),(9,5,'Subscription_Payments',110.0,'2024-01-30 18:53:44'),(10,5,'Transfer',170.0,'2024-01-30 18:53:44');\n",
      "question": "For every bank statement, show me the types of transactions along with the dates of them",
      "gold_queries": [
        "select bank_statements.accountnumber , transactions.transactiontype , transactions.date from Bank_Statements_Transactions join Transactions on Bank_Statements_Transactions.TransactionID = Transactions.TransactionID join Bank_Statements on Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Display the total amount of each transaction type across all bank statements.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T.TransactionType, SUM(T.Amount) AS TotalAmount\nFROM Transactions T\nJOIN Bank_Statements_Transactions BST ON T.TransactionID = BST.TransactionID\nGROUP BY T.TransactionType"
          ]
        },
        {
          "interpretation": "List all transaction types for a single bank statement along with their respective dates.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T.TransactionType, T.Date\nFROM Transactions AS T\nJOIN Bank_Statements_Transactions AS BST ON T.TransactionID = BST.TransactionID\nWHERE BST.StatementID = 1"
          ]
        },
        {
          "interpretation": "Show every unique transaction type that appears across all bank statements.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT TransactionType FROM Transactions"
          ]
        },
        {
          "interpretation": "Display the count of each transaction type for all bank statements.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT TransactionType, COUNT(TransactionType) AS Count\nFROM Transactions\nJOIN Bank_Statements_Transactions ON Transactions.TransactionID = Bank_Statements_Transactions.TransactionID\nGROUP BY TransactionType"
          ]
        },
        {
          "interpretation": "For each transaction type, show the earliest and latest dates it appeared in a bank statement.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT TransactionType, MIN(StartDate) AS EarliestDate, MAX(EndDate) AS LatestDate\nFROM Bank_Statements_Transactions\nJOIN Transactions ON Bank_Statements_Transactions.TransactionID = Transactions.TransactionID\nJOIN Bank_Statements ON Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID\nGROUP BY TransactionType"
          ]
        },
        {
          "interpretation": "For each bank statement, calculate the total amount of transactions of a specific type.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT bs.StatementID, SUM(t.Amount) AS TotalTransactionAmount\nFROM Bank_Statements bs\nJOIN Bank_Statements_Transactions bst ON bs.StatementID = bst.StatementID\nJOIN Transactions t ON bst.TransactionID = t.TransactionID\nWHERE t.TransactionType = 'Subscription_Payments'\nGROUP BY bs.StatementID"
          ]
        },
        {
          "interpretation": "For each bank statement, list all unique transaction types along with the earliest and latest dates they occurred.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT BS.StatementID, T.TransactionType, MIN(T.Date) AS EarliestDate, MAX(T.Date) AS LatestDate\nFROM Bank_Statements BS\nJOIN Bank_Statements_Transactions BST ON BS.StatementID = BST.StatementID\nJOIN Transactions T ON BST.TransactionID = T.TransactionID\nGROUP BY BS.StatementID, T.TransactionType"
          ]
        },
        {
          "interpretation": "List the types of transactions and their dates for each account separately in a bank statement.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AccountNumber, TransactionType, Date FROM Transactions ORDER BY AccountNumber, Date"
          ]
        },
        {
          "interpretation": "Show transaction types and dates for each bank statement individually in a table format.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT bs.StatementID, t.TransactionType, t.Date\nFROM Bank_Statements bs\nJOIN Bank_Statements_Transactions bst ON bs.StatementID = bst.StatementID\nJOIN Transactions t ON bst.TransactionID = t.TransactionID"
          ]
        }
      ],
      "num_unique_execution_results": 9,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.1111111111111111,
        "one_found": true,
        "f1_score": 0.19999999999999998,
        "num_queries": 9,
        "num_unique_queries": 9,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Banking/scope_bank_statements_transactions/scope_bank_statements_transactions.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Balance REAL,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Bank_Statements(\n    StatementID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    StartDate DATETIME,\n    EndDate DATETIME,\n    TotalAmount REAL,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\nCREATE TABLE Bank_Statements_Transactions(\n    StatementTransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StatementID INTEGER,\n    TransactionID INTEGER,\n    FOREIGN KEY (StatementID) REFERENCES Bank_Statements(StatementID),\n    FOREIGN KEY (TransactionID) REFERENCES Transactions(TransactionID));\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    TransactionType TEXT, -- e.g., Subscription Payments, Transfer, etc.\n    Amount REAL,\n    Date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\n\nINSERT INTO \"Accounts\" (AccountNumber,CustomerID,Balance) VALUES (1,1,1000.0),(2,2,800.0),(3,3,900.0),(4,4,700.0),(5,5,600.0);\nINSERT INTO \"Bank_Statements\" (StatementID,AccountNumber,StartDate,EndDate,TotalAmount) VALUES (1,1,'2021-01-01','2021-01-31',250.0),(2,2,'2021-02-01','2021-02-28',260.0),(3,3,'2021-03-01','2021-03-31',270.0),(4,4,'2021-04-01','2021-04-30',280.0),(5,5,'2021-05-01','2021-05-31',290.0);\nINSERT INTO \"Bank_Statements_Transactions\" (StatementTransactionID,StatementID,TransactionID) VALUES (1,1,1),(2,1,2),(3,2,3),(4,2,4),(5,3,5),(6,3,6),(7,4,7),(8,4,8),(9,5,9),(10,5,10),(11,2,1),(12,3,1),(13,4,1),(14,5,1);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Michael','Brown'),(4,'Emily','White'),(5,'David','Black');\nINSERT INTO \"Transactions\" (TransactionID,AccountNumber,TransactionType,Amount,Date) VALUES (1,1,'Subscription_Payments',150.0,'2024-01-30 18:53:44'),(2,1,'Transfer',200.0,'2024-01-30 18:53:44'),(3,2,'Subscription_Payments',130.0,'2024-01-30 18:53:44'),(4,2,'Transfer',180.0,'2024-01-30 18:53:44'),(5,3,'Subscription_Payments',140.0,'2024-01-30 18:53:44'),(6,3,'Transfer',220.0,'2024-01-30 18:53:44'),(7,4,'Subscription_Payments',120.0,'2024-01-30 18:53:44'),(8,4,'Transfer',190.0,'2024-01-30 18:53:44'),(9,5,'Subscription_Payments',110.0,'2024-01-30 18:53:44'),(10,5,'Transfer',170.0,'2024-01-30 18:53:44');\n",
      "question": "What information is there on transactions that are the same in all bank statements?",
      "gold_queries": [
        "SELECT Transactions.TransactionID, Transactions.Amount, Transactions.Date  from Bank_Statements_Transactions join Transactions on Bank_Statements_Transactions.TransactionID = Transactions.TransactionID join Bank_Statements on Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID   GROUP BY Bank_Statements_Transactions.TransactionID HAVING COUNT(DISTINCT Bank_Statements_Transactions.StatementID) = (SELECT COUNT(*) FROM  Bank_Statements)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Transactions identified across 100% of bank statements (common across all).",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T.TransactionID FROM Transactions T JOIN Bank_Statements_Transactions B ON T.TransactionID = B.TransactionID GROUP BY T.TransactionID HAVING COUNT(DISTINCT B.StatementID) = (SELECT COUNT(*) FROM Bank_Statements)"
          ]
        },
        {
          "interpretation": "Transactions flagged as repeating across the entire dataset.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT TransactionType, Amount\nFROM Transactions\nGROUP BY TransactionType, Amount\nHAVING COUNT(*) > 1"
          ]
        },
        {
          "interpretation": "Transactions running across all bank statements (fully correlated).",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T.TransactionID, T.AccountNumber, T.TransactionType, T.Amount, T.Date\nFROM Transactions T\nJOIN Bank_Statements_Transactions BST ON T.TransactionID = BST.TransactionID\nGROUP BY T.TransactionID, T.AccountNumber, T.TransactionType, T.Amount, T.Date\nHAVING COUNT(DISTINCT BST.StatementID) = (SELECT COUNT(*) FROM Bank_Statements)"
          ]
        },
        {
          "interpretation": "Transactions observed throughout the entire bank statement dataset.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT TransactionID FROM Bank_Statements_Transactions"
          ]
        },
        {
          "interpretation": "Transactions with the maximum and minimum amount within the same bank statement.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT bs.StatementID, MAX(t.Amount) AS MaxAmount, MIN(t.Amount) AS MinAmount\nFROM Bank_Statements bs\nJOIN Bank_Statements_Transactions bst ON bs.StatementID = bst.StatementID\nJOIN Transactions t ON bst.TransactionID = t.TransactionID\nGROUP BY bs.StatementID"
          ]
        },
        {
          "interpretation": "Transactions  appearing in the entirety of the bank statements (comprehensive).",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T.TransactionID, T.AccountNumber, T.TransactionType, T.Amount, T.Date\nFROM Transactions T\nJOIN Bank_Statements_Transactions BST ON T.TransactionID = BST.TransactionID"
          ]
        },
        {
          "interpretation": "Transactions appearing in bank statements with the earliest and latest end dates.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T.TransactionID, T.AccountNumber, T.TransactionType, T.Amount, T.Date\nFROM Transactions T\nJOIN Bank_Statements_Transactions BST ON T.TransactionID = BST.TransactionID\nJOIN Bank_Statements BS ON BST.StatementID = BS.StatementID\nWHERE BS.EndDate = (SELECT MIN(EndDate) FROM Bank_Statements)\nUNION\nSELECT T.TransactionID, T.AccountNumber, T.TransactionType, T.Amount, T.Date\nFROM Transactions T\nJOIN Bank_Statements_Transactions BST ON T.TransactionID = BST.TransactionID\nJOIN Bank_Statements BS ON BST.StatementID = BS.StatementID\nWHERE BS.EndDate = (SELECT MAX(EndDate) FROM Bank_Statements)"
          ]
        },
        {
          "interpretation": "Transactions of the same type across all bank statements.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT TransactionType, COUNT(*) as Count\nFROM Transactions\nGROUP BY TransactionType"
          ]
        },
        {
          "interpretation": "Transactions associated with the same account across all bank statements.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T.TransactionID, T.AccountNumber, T.TransactionType, T.Amount, T.Date\nFROM Transactions T\nJOIN Bank_Statements_Transactions BST ON T.TransactionID = BST.TransactionID\nGROUP BY T.AccountNumber, T.TransactionID, T.TransactionType, T.Amount, T.Date"
          ]
        }
      ],
      "num_unique_execution_results": 9,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 9,
        "num_unique_queries": 9,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Banking/scope_bank_statements_transactions/scope_bank_statements_transactions.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Balance REAL,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Bank_Statements(\n    StatementID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    StartDate DATETIME,\n    EndDate DATETIME,\n    TotalAmount REAL,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\nCREATE TABLE Bank_Statements_Transactions(\n    StatementTransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StatementID INTEGER,\n    TransactionID INTEGER,\n    FOREIGN KEY (StatementID) REFERENCES Bank_Statements(StatementID),\n    FOREIGN KEY (TransactionID) REFERENCES Transactions(TransactionID));\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    TransactionType TEXT, -- e.g., Subscription Payments, Transfer, etc.\n    Amount REAL,\n    Date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\n\nINSERT INTO \"Accounts\" (AccountNumber,CustomerID,Balance) VALUES (1,1,1000.0),(2,2,800.0),(3,3,900.0),(4,4,700.0),(5,5,600.0);\nINSERT INTO \"Bank_Statements\" (StatementID,AccountNumber,StartDate,EndDate,TotalAmount) VALUES (1,1,'2021-01-01','2021-01-31',250.0),(2,2,'2021-02-01','2021-02-28',260.0),(3,3,'2021-03-01','2021-03-31',270.0),(4,4,'2021-04-01','2021-04-30',280.0),(5,5,'2021-05-01','2021-05-31',290.0);\nINSERT INTO \"Bank_Statements_Transactions\" (StatementTransactionID,StatementID,TransactionID) VALUES (1,1,1),(2,1,2),(3,2,3),(4,2,4),(5,3,5),(6,3,6),(7,4,7),(8,4,8),(9,5,9),(10,5,10),(11,2,1),(12,3,1),(13,4,1),(14,5,1);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Michael','Brown'),(4,'Emily','White'),(5,'David','Black');\nINSERT INTO \"Transactions\" (TransactionID,AccountNumber,TransactionType,Amount,Date) VALUES (1,1,'Subscription_Payments',150.0,'2024-01-30 18:53:44'),(2,1,'Transfer',200.0,'2024-01-30 18:53:44'),(3,2,'Subscription_Payments',130.0,'2024-01-30 18:53:44'),(4,2,'Transfer',180.0,'2024-01-30 18:53:44'),(5,3,'Subscription_Payments',140.0,'2024-01-30 18:53:44'),(6,3,'Transfer',220.0,'2024-01-30 18:53:44'),(7,4,'Subscription_Payments',120.0,'2024-01-30 18:53:44'),(8,4,'Transfer',190.0,'2024-01-30 18:53:44'),(9,5,'Subscription_Payments',110.0,'2024-01-30 18:53:44'),(10,5,'Transfer',170.0,'2024-01-30 18:53:44');\n",
      "question": "For all bank statements list every transaction ID.",
      "gold_queries": [
        "select bank_statements.accountnumber , transactions.transactionid from Bank_Statements_Transactions join Transactions on Bank_Statements_Transactions.TransactionID = Transactions.TransactionID join Bank_Statements on Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Get the set of TransactionID values referenced by the Bank_Statements_Transactions table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT TransactionID FROM Bank_Statements_Transactions"
          ]
        },
        {
          "interpretation": "List all TransactionID values for each statement in the Bank_Statements table.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT StatementID, TransactionID \nFROM Bank_Statements_Transactions"
          ]
        },
        {
          "interpretation": "Identify all transaction IDs present in the Bank_Statements_Transactions table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT TransactionID FROM Bank_Statements_Transactions"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "one_found": true,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Banking/scope_bank_statements_transactions/scope_bank_statements_transactions.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Balance REAL,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Bank_Statements(\n    StatementID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    StartDate DATETIME,\n    EndDate DATETIME,\n    TotalAmount REAL,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\nCREATE TABLE Bank_Statements_Transactions(\n    StatementTransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StatementID INTEGER,\n    TransactionID INTEGER,\n    FOREIGN KEY (StatementID) REFERENCES Bank_Statements(StatementID),\n    FOREIGN KEY (TransactionID) REFERENCES Transactions(TransactionID));\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    TransactionType TEXT, -- e.g., Subscription Payments, Transfer, etc.\n    Amount REAL,\n    Date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\n\nINSERT INTO \"Accounts\" (AccountNumber,CustomerID,Balance) VALUES (1,1,1000.0),(2,2,800.0),(3,3,900.0),(4,4,700.0),(5,5,600.0);\nINSERT INTO \"Bank_Statements\" (StatementID,AccountNumber,StartDate,EndDate,TotalAmount) VALUES (1,1,'2021-01-01','2021-01-31',250.0),(2,2,'2021-02-01','2021-02-28',260.0),(3,3,'2021-03-01','2021-03-31',270.0),(4,4,'2021-04-01','2021-04-30',280.0),(5,5,'2021-05-01','2021-05-31',290.0);\nINSERT INTO \"Bank_Statements_Transactions\" (StatementTransactionID,StatementID,TransactionID) VALUES (1,1,1),(2,1,2),(3,2,3),(4,2,4),(5,3,5),(6,3,6),(7,4,7),(8,4,8),(9,5,9),(10,5,10),(11,2,1),(12,3,1),(13,4,1),(14,5,1);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Michael','Brown'),(4,'Emily','White'),(5,'David','Black');\nINSERT INTO \"Transactions\" (TransactionID,AccountNumber,TransactionType,Amount,Date) VALUES (1,1,'Subscription_Payments',150.0,'2024-01-30 18:53:44'),(2,1,'Transfer',200.0,'2024-01-30 18:53:44'),(3,2,'Subscription_Payments',130.0,'2024-01-30 18:53:44'),(4,2,'Transfer',180.0,'2024-01-30 18:53:44'),(5,3,'Subscription_Payments',140.0,'2024-01-30 18:53:44'),(6,3,'Transfer',220.0,'2024-01-30 18:53:44'),(7,4,'Subscription_Payments',120.0,'2024-01-30 18:53:44'),(8,4,'Transfer',190.0,'2024-01-30 18:53:44'),(9,5,'Subscription_Payments',110.0,'2024-01-30 18:53:44'),(10,5,'Transfer',170.0,'2024-01-30 18:53:44');\n",
      "question": "What is the transaction name, id and account number that is in common for all bank statements?",
      "gold_queries": [
        "SELECT Transactions.TransactionID, Transactions.AccountNumber, Transactions.TransactionType  from Bank_Statements_Transactions join Transactions on Bank_Statements_Transactions.TransactionID = Transactions.TransactionID join Bank_Statements on Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID   GROUP BY Bank_Statements_Transactions.TransactionID HAVING COUNT(DISTINCT Bank_Statements_Transactions.StatementID) = (SELECT COUNT(*) FROM  Bank_Statements)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What is the transaction type, transaction ID, and account number that are common for all bank statements.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T.TransactionType, T.TransactionID, T.AccountNumber\nFROM Transactions T\nWHERE NOT EXISTS (\n    SELECT 1\n    FROM Bank_Statements BS\n    LEFT JOIN Bank_Statements_Transactions BST ON BS.StatementID = BST.StatementID\n    WHERE BST.TransactionID IS NULL OR BST.TransactionID <> T.TransactionID\n)"
          ]
        },
        {
          "interpretation": "For all bank statements, what are the distinct transaction types and IDs that appear across all statements.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT T.TransactionType, T.TransactionID\nFROM Bank_Statements AS BS\nJOIN Bank_Statements_Transactions AS BST ON BS.StatementID = BST.StatementID\nJOIN Transactions AS T ON BST.TransactionID = T.TransactionID"
          ]
        },
        {
          "interpretation": "What is the account number with the most common transaction type ID that appears across all bank statements.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AccountNumber\nFROM Transactions\nGROUP BY AccountNumber, TransactionType\nORDER BY COUNT(TransactionType) DESC\nLIMIT 1"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Banking/scope_bank_statements_transactions/scope_bank_statements_transactions.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Balance REAL,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Bank_Statements(\n    StatementID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    StartDate DATETIME,\n    EndDate DATETIME,\n    TotalAmount REAL,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\nCREATE TABLE Bank_Statements_Transactions(\n    StatementTransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StatementID INTEGER,\n    TransactionID INTEGER,\n    FOREIGN KEY (StatementID) REFERENCES Bank_Statements(StatementID),\n    FOREIGN KEY (TransactionID) REFERENCES Transactions(TransactionID));\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    TransactionType TEXT, -- e.g., Subscription Payments, Transfer, etc.\n    Amount REAL,\n    Date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\n\nINSERT INTO \"Accounts\" (AccountNumber,CustomerID,Balance) VALUES (1,1,1000.0),(2,2,800.0),(3,3,900.0),(4,4,700.0),(5,5,600.0);\nINSERT INTO \"Bank_Statements\" (StatementID,AccountNumber,StartDate,EndDate,TotalAmount) VALUES (1,1,'2021-01-01','2021-01-31',250.0),(2,2,'2021-02-01','2021-02-28',260.0),(3,3,'2021-03-01','2021-03-31',270.0),(4,4,'2021-04-01','2021-04-30',280.0),(5,5,'2021-05-01','2021-05-31',290.0);\nINSERT INTO \"Bank_Statements_Transactions\" (StatementTransactionID,StatementID,TransactionID) VALUES (1,1,1),(2,1,2),(3,2,3),(4,2,4),(5,3,5),(6,3,6),(7,4,7),(8,4,8),(9,5,9),(10,5,10),(11,2,1),(12,3,1),(13,4,1),(14,5,1);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Michael','Brown'),(4,'Emily','White'),(5,'David','Black');\nINSERT INTO \"Transactions\" (TransactionID,AccountNumber,TransactionType,Amount,Date) VALUES (1,1,'Subscription_Payments',150.0,'2024-01-30 18:53:44'),(2,1,'Transfer',200.0,'2024-01-30 18:53:44'),(3,2,'Subscription_Payments',130.0,'2024-01-30 18:53:44'),(4,2,'Transfer',180.0,'2024-01-30 18:53:44'),(5,3,'Subscription_Payments',140.0,'2024-01-30 18:53:44'),(6,3,'Transfer',220.0,'2024-01-30 18:53:44'),(7,4,'Subscription_Payments',120.0,'2024-01-30 18:53:44'),(8,4,'Transfer',190.0,'2024-01-30 18:53:44'),(9,5,'Subscription_Payments',110.0,'2024-01-30 18:53:44'),(10,5,'Transfer',170.0,'2024-01-30 18:53:44');\n",
      "question": "For each bank statement, list information on transactions shown.",
      "gold_queries": [
        "select bank_statements.accountnumber , transactions.transactionid , transactions.amount , transactions.date from Bank_Statements_Transactions join Transactions on Bank_Statements_Transactions.TransactionID = Transactions.TransactionID join Bank_Statements on Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Display information about the transactions for each bank statement, including transaction IDs, account numbers, and total amounts.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT bs.StatementID, bst.TransactionID, bs.AccountNumber, bs.TotalAmount\nFROM Bank_Statements bs\nJOIN Bank_Statements_Transactions bst ON bs.StatementID = bst.StatementID"
          ]
        },
        {
          "interpretation": "Show a detail view of each bank statement, including transactions, transaction IDs, and total transaction amounts.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT BS.StatementID, BS.AccountNumber, BS.StartDate, BS.EndDate, BS.TotalAmount, BST.TransactionID, T.TransactionType, T.Amount\nFROM Bank_Statements BS\nJOIN Bank_Statements_Transactions BST ON BS.StatementID = BST.StatementID\nJOIN Transactions T ON BST.TransactionID = T.TransactionID"
          ]
        },
        {
          "interpretation": "Fetch all bank statements and their corresponding transactions, including transaction amounts and types.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT BS.StatementID, BS.StartDate, BS.EndDate, BS.TotalAmount, T.TransactionID, T.TransactionType, T.Amount\nFROM Bank_Statements BS\nJOIN Bank_Statements_Transactions BST ON BS.StatementID = BST.StatementID\nJOIN Transactions T ON BST.TransactionID = T.TransactionID"
          ]
        },
        {
          "interpretation": "Display a summary of transactions for each bank statement, including total income and expenses.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    bs.StatementID,\n    SUM(CASE WHEN t.TransactionType IN ('Income', 'Deposit') THEN t.Amount ELSE 0 END) AS TotalIncome,\n    SUM(CASE WHEN t.TransactionType IN ('Expense', 'Withdrawal', 'Transfer') THEN t.Amount ELSE 0 END) AS TotalExpenses\nFROM \n    Bank_Statements bs\nJOIN \n    Bank_Statements_Transactions bst ON bs.StatementID = bst.StatementID\nJOIN \n    Transactions t ON bst.TransactionID = t.TransactionID\nGROUP BY \n    bs.StatementID"
          ]
        },
        {
          "interpretation": "List the transactions for each bank statement, grouped by transaction type.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT BS.StatementID, T.TransactionType, SUM(T.Amount) AS TotalAmount\nFROM Bank_Statements BS\nJOIN Bank_Statements_Transactions BST ON BS.StatementID = BST.StatementID\nJOIN Transactions T ON BST.TransactionID = T.TransactionID\nGROUP BY BS.StatementID, T.TransactionType"
          ]
        },
        {
          "interpretation": "Retrieve all transactions for each bank statement, including account numbers, transaction types, and amounts.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT bs.StatementID, t.AccountNumber, t.TransactionType, t.Amount\nFROM Bank_Statements bs\nJOIN Bank_Statements_Transactions bst ON bs.StatementID = bst.StatementID\nJOIN Transactions t ON bst.TransactionID = t.TransactionID"
          ]
        },
        {
          "interpretation": "Retrieve a list of all bank statements and their associated transactions, including transaction details.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT bs.StatementID, bs.AccountNumber, bs.StartDate, bs.EndDate, bs.TotalAmount, t.TransactionID, t.TransactionType, t.Amount, t.Date\nFROM Bank_Statements bs\nJOIN Bank_Statements_Transactions bst ON bs.StatementID = bst.StatementID\nJOIN Transactions t ON bst.TransactionID = t.TransactionID"
          ]
        },
        {
          "interpretation": "List the transactions for each bank statement, including any potential fees or charges.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT bs.StatementID, t.TransactionType, t.Amount\nFROM Bank_Statements bs\nJOIN Bank_Statements_Transactions bst ON bs.StatementID = bst.StatementID\nJOIN Transactions t ON bst.TransactionID = t.TransactionID"
          ]
        },
        {
          "interpretation": "Retrieve the list of transactions associated with each bank statement, sorted by transaction date.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT BS.StatementID, T.TransactionID, T.TransactionType, T.Amount, T.Date\nFROM Bank_Statements BS\nJOIN Bank_Statements_Transactions BST ON BS.StatementID = BST.StatementID\nJOIN Transactions T ON BST.TransactionID = T.TransactionID\nORDER BY T.Date"
          ]
        },
        {
          "interpretation": "Display information on transactions for each bank statement, including account numbers, transaction IDs, and amounts.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.AccountNumber, T2.TransactionID, T2.Amount \nFROM Bank_Statements AS T1 \nJOIN Bank_Statements_Transactions AS T3 ON T1.StatementID = T3.StatementID \nJOIN Transactions AS T2 ON T3.TransactionID = T2.TransactionID"
          ]
        },
        {
          "interpretation": "For each bank statement, list the transactions that occurred within its date range.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT BS.StatementID, T.TransactionID, T.TransactionType, T.Amount, T.Date\nFROM Bank_Statements BS\nJOIN Bank_Statements_Transactions BST ON BS.StatementID = BST.StatementID\nJOIN Transactions T ON BST.TransactionID = T.TransactionID\nWHERE T.Date BETWEEN BS.StartDate AND BS.EndDate"
          ]
        },
        {
          "interpretation": "For each bank statement, display a list of transactions that occurred before and after its start and end dates.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT bs.StatementID, bs.StartDate, bs.EndDate, t.TransactionID, t.TransactionType, t.Amount, t.Date\nFROM Bank_Statements bs\nJOIN Transactions t ON bs.AccountNumber = t.AccountNumber\nWHERE t.Date < bs.StartDate OR t.Date > bs.EndDate"
          ]
        },
        {
          "interpretation": "List all transactions associated with each bank statement, including transaction details such as transaction ID, type, and amount.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T.StatementID, Tr.TransactionID, Tr.TransactionType, Tr.Amount\nFROM Bank_Statements_Transactions AS T\nJOIN Transactions AS Tr ON T.TransactionID = Tr.TransactionID"
          ]
        }
      ],
      "num_unique_execution_results": 13,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 13,
        "num_unique_queries": 13,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Banking/scope_bank_statements_transactions/scope_bank_statements_transactions.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Balance REAL,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Bank_Statements(\n    StatementID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    StartDate DATETIME,\n    EndDate DATETIME,\n    TotalAmount REAL,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\nCREATE TABLE Bank_Statements_Transactions(\n    StatementTransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StatementID INTEGER,\n    TransactionID INTEGER,\n    FOREIGN KEY (StatementID) REFERENCES Bank_Statements(StatementID),\n    FOREIGN KEY (TransactionID) REFERENCES Transactions(TransactionID));\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    TransactionType TEXT, -- e.g., Subscription Payments, Transfer, etc.\n    Amount REAL,\n    Date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\n\nINSERT INTO \"Accounts\" (AccountNumber,CustomerID,Balance) VALUES (1,1,1000.0),(2,2,800.0),(3,3,900.0),(4,4,700.0),(5,5,600.0);\nINSERT INTO \"Bank_Statements\" (StatementID,AccountNumber,StartDate,EndDate,TotalAmount) VALUES (1,1,'2021-01-01','2021-01-31',250.0),(2,2,'2021-02-01','2021-02-28',260.0),(3,3,'2021-03-01','2021-03-31',270.0),(4,4,'2021-04-01','2021-04-30',280.0),(5,5,'2021-05-01','2021-05-31',290.0);\nINSERT INTO \"Bank_Statements_Transactions\" (StatementTransactionID,StatementID,TransactionID) VALUES (1,1,1),(2,1,2),(3,2,3),(4,2,4),(5,3,5),(6,3,6),(7,4,7),(8,4,8),(9,5,9),(10,5,10),(11,2,1),(12,3,1),(13,4,1),(14,5,1);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Michael','Brown'),(4,'Emily','White'),(5,'David','Black');\nINSERT INTO \"Transactions\" (TransactionID,AccountNumber,TransactionType,Amount,Date) VALUES (1,1,'Subscription_Payments',150.0,'2024-01-30 18:53:44'),(2,1,'Transfer',200.0,'2024-01-30 18:53:44'),(3,2,'Subscription_Payments',130.0,'2024-01-30 18:53:44'),(4,2,'Transfer',180.0,'2024-01-30 18:53:44'),(5,3,'Subscription_Payments',140.0,'2024-01-30 18:53:44'),(6,3,'Transfer',220.0,'2024-01-30 18:53:44'),(7,4,'Subscription_Payments',120.0,'2024-01-30 18:53:44'),(8,4,'Transfer',190.0,'2024-01-30 18:53:44'),(9,5,'Subscription_Payments',110.0,'2024-01-30 18:53:44'),(10,5,'Transfer',170.0,'2024-01-30 18:53:44');\n",
      "question": "Show me the transaction types and dates we have for each bank statement",
      "gold_queries": [
        "SELECT Transactions.TransactionType, Transactions.Date  from Bank_Statements_Transactions join Transactions on Bank_Statements_Transactions.TransactionID = Transactions.TransactionID join Bank_Statements on Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID   GROUP BY Bank_Statements_Transactions.TransactionID HAVING COUNT(DISTINCT Bank_Statements_Transactions.StatementID) = (SELECT COUNT(*) FROM  Bank_Statements)",
        "select bank_statements.accountnumber , transactions.transactiontype , transactions.date from Bank_Statements_Transactions join Transactions on Bank_Statements_Transactions.TransactionID = Transactions.TransactionID join Bank_Statements on Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Show the unique date ranges within which each type of transaction occurred for each bank statement.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT BS.StartDate, BS.EndDate, T.TransactionType\nFROM Bank_Statements BS\nJOIN Bank_Statements_Transactions BST ON BS.StatementID = BST.StatementID\nJOIN Transactions T ON BST.TransactionID = T.TransactionID\nGROUP BY BS.StartDate, BS.EndDate, T.TransactionType"
          ]
        },
        {
          "interpretation": "Get the distinct transaction types and dates for each bank statement ID.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT bs.StatementID, t.TransactionType, t.Date\nFROM Bank_Statements bs\nJOIN Bank_Statements_Transactions bst ON bs.StatementID = bst.StatementID\nJOIN Transactions t ON bst.TransactionID = t.TransactionID"
          ]
        },
        {
          "interpretation": "Show the types of transactions and dates for every bank statement record.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T.TransactionType, T.Date\nFROM Transactions AS T\nJOIN Bank_Statements_Transactions AS BST ON T.TransactionID = BST.TransactionID"
          ]
        },
        {
          "interpretation": "Retrieve the unique transaction types and their corresponding dates for each bank statement.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT T.TransactionType, T.Date\nFROM Transactions T\nJOIN Bank_Statements_Transactions BST ON T.TransactionID = BST.TransactionID"
          ]
        },
        {
          "interpretation": "Display the transaction types and the dates of occurrence for each bank statement separately.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT BS.StatementID, T.TransactionType, T.Date\nFROM Bank_Statements BS\nJOIN Bank_Statements_Transactions BST ON BS.StatementID = BST.StatementID\nJOIN Transactions T ON BST.TransactionID = T.TransactionID\nORDER BY BS.StatementID, T.Date"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.2,
        "one_found": true,
        "f1_score": 0.28571428571428575,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Banking/scope_bank_statements_transactions/scope_bank_statements_transactions.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Balance REAL,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Bank_Statements(\n    StatementID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    StartDate DATETIME,\n    EndDate DATETIME,\n    TotalAmount REAL,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\nCREATE TABLE Bank_Statements_Transactions(\n    StatementTransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StatementID INTEGER,\n    TransactionID INTEGER,\n    FOREIGN KEY (StatementID) REFERENCES Bank_Statements(StatementID),\n    FOREIGN KEY (TransactionID) REFERENCES Transactions(TransactionID));\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    TransactionType TEXT, -- e.g., Subscription Payments, Transfer, etc.\n    Amount REAL,\n    Date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\n\nINSERT INTO \"Accounts\" (AccountNumber,CustomerID,Balance) VALUES (1,1,1000.0),(2,2,800.0),(3,3,900.0),(4,4,700.0),(5,5,600.0);\nINSERT INTO \"Bank_Statements\" (StatementID,AccountNumber,StartDate,EndDate,TotalAmount) VALUES (1,1,'2021-01-01','2021-01-31',250.0),(2,2,'2021-02-01','2021-02-28',260.0),(3,3,'2021-03-01','2021-03-31',270.0),(4,4,'2021-04-01','2021-04-30',280.0),(5,5,'2021-05-01','2021-05-31',290.0);\nINSERT INTO \"Bank_Statements_Transactions\" (StatementTransactionID,StatementID,TransactionID) VALUES (1,1,1),(2,1,2),(3,2,3),(4,2,4),(5,3,5),(6,3,6),(7,4,7),(8,4,8),(9,5,9),(10,5,10),(11,2,1),(12,3,1),(13,4,1),(14,5,1);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Michael','Brown'),(4,'Emily','White'),(5,'David','Black');\nINSERT INTO \"Transactions\" (TransactionID,AccountNumber,TransactionType,Amount,Date) VALUES (1,1,'Subscription_Payments',150.0,'2024-01-30 18:53:44'),(2,1,'Transfer',200.0,'2024-01-30 18:53:44'),(3,2,'Subscription_Payments',130.0,'2024-01-30 18:53:44'),(4,2,'Transfer',180.0,'2024-01-30 18:53:44'),(5,3,'Subscription_Payments',140.0,'2024-01-30 18:53:44'),(6,3,'Transfer',220.0,'2024-01-30 18:53:44'),(7,4,'Subscription_Payments',120.0,'2024-01-30 18:53:44'),(8,4,'Transfer',190.0,'2024-01-30 18:53:44'),(9,5,'Subscription_Payments',110.0,'2024-01-30 18:53:44'),(10,5,'Transfer',170.0,'2024-01-30 18:53:44');\n",
      "question": "List the transaction IDs in common across all bank statements.",
      "gold_queries": [
        "SELECT Transactions.TransactionID  from Bank_Statements_Transactions join Transactions on Bank_Statements_Transactions.TransactionID = Transactions.TransactionID join Bank_Statements on Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID   GROUP BY Bank_Statements_Transactions.TransactionID HAVING COUNT(DISTINCT Bank_Statements_Transactions.StatementID) = (SELECT COUNT(*) FROM  Bank_Statements)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Get the transaction IDs in all the bank statements after removing duplicates across different statements.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT TransactionID FROM Bank_Statements_Transactions"
          ]
        },
        {
          "interpretation": "List the transaction IDs that exist across all bank statements ignoring the statement start date and end date.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT TransactionID FROM Bank_Statements_Transactions GROUP BY TransactionID HAVING COUNT(DISTINCT StatementID) = (SELECT COUNT(*) FROM Bank_Statements)"
          ]
        },
        {
          "interpretation": "Identify the bank statements that are not empty or contain no transaction IDs.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT bs.StatementID, bs.AccountNumber, bs.StartDate, bs.EndDate, bs.TotalAmount\nFROM Bank_Statements bs\nJOIN Bank_Statements_Transactions bst ON bs.StatementID = bst.StatementID"
          ]
        },
        {
          "interpretation": "Find the maximum number of bank statements that contain a unique transaction ID.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(DISTINCT TransactionID) AS MaxUniqueTransactions\nFROM Bank_Statements_Transactions"
          ]
        },
        {
          "interpretation": "There are no transaction IDs that are present in all bank statements.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT TransactionID FROM Transactions EXCEPT SELECT TransactionID FROM Bank_Statements_Transactions GROUP BY TransactionID HAVING COUNT(DISTINCT StatementID) = (SELECT COUNT(*) FROM Bank_Statements)"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "one_found": true,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Banking/scope_bank_statements_transactions/scope_bank_statements_transactions.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Balance REAL,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Bank_Statements(\n    StatementID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    StartDate DATETIME,\n    EndDate DATETIME,\n    TotalAmount REAL,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\nCREATE TABLE Bank_Statements_Transactions(\n    StatementTransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StatementID INTEGER,\n    TransactionID INTEGER,\n    FOREIGN KEY (StatementID) REFERENCES Bank_Statements(StatementID),\n    FOREIGN KEY (TransactionID) REFERENCES Transactions(TransactionID));\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    TransactionType TEXT, -- e.g., Subscription Payments, Transfer, etc.\n    Amount REAL,\n    Date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\n\nINSERT INTO \"Accounts\" (AccountNumber,CustomerID,Balance) VALUES (1,1,1000.0),(2,2,800.0),(3,3,900.0),(4,4,700.0),(5,5,600.0);\nINSERT INTO \"Bank_Statements\" (StatementID,AccountNumber,StartDate,EndDate,TotalAmount) VALUES (1,1,'2021-01-01','2021-01-31',250.0),(2,2,'2021-02-01','2021-02-28',260.0),(3,3,'2021-03-01','2021-03-31',270.0),(4,4,'2021-04-01','2021-04-30',280.0),(5,5,'2021-05-01','2021-05-31',290.0);\nINSERT INTO \"Bank_Statements_Transactions\" (StatementTransactionID,StatementID,TransactionID) VALUES (1,1,1),(2,1,2),(3,2,3),(4,2,4),(5,3,5),(6,3,6),(7,4,7),(8,4,8),(9,5,9),(10,5,10),(11,2,1),(12,3,1),(13,4,1),(14,5,1);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Michael','Brown'),(4,'Emily','White'),(5,'David','Black');\nINSERT INTO \"Transactions\" (TransactionID,AccountNumber,TransactionType,Amount,Date) VALUES (1,1,'Subscription_Payments',150.0,'2024-01-30 18:53:44'),(2,1,'Transfer',200.0,'2024-01-30 18:53:44'),(3,2,'Subscription_Payments',130.0,'2024-01-30 18:53:44'),(4,2,'Transfer',180.0,'2024-01-30 18:53:44'),(5,3,'Subscription_Payments',140.0,'2024-01-30 18:53:44'),(6,3,'Transfer',220.0,'2024-01-30 18:53:44'),(7,4,'Subscription_Payments',120.0,'2024-01-30 18:53:44'),(8,4,'Transfer',190.0,'2024-01-30 18:53:44'),(9,5,'Subscription_Payments',110.0,'2024-01-30 18:53:44'),(10,5,'Transfer',170.0,'2024-01-30 18:53:44');\n",
      "question": "What is the transaction type, id and account number for each bank statement?",
      "gold_queries": [
        "SELECT Transactions.TransactionID, Transactions.AccountNumber, Transactions.TransactionType  from Bank_Statements_Transactions join Transactions on Bank_Statements_Transactions.TransactionID = Transactions.TransactionID join Bank_Statements on Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID   GROUP BY Bank_Statements_Transactions.TransactionID HAVING COUNT(DISTINCT Bank_Statements_Transactions.StatementID) = (SELECT COUNT(*) FROM  Bank_Statements)",
        "select bank_statements.accountnumber , transactions.transactionid , transactions.accountnumber , transactions.transactiontype from Bank_Statements_Transactions join Transactions on Bank_Statements_Transactions.TransactionID = Transactions.TransactionID join Bank_Statements on Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Get the transaction type, ID, and account number for each transaction linked to a bank statement.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T.TransactionType, T.TransactionID, T.AccountNumber\nFROM Transactions T\nJOIN Bank_Statements_Transactions BSC ON T.TransactionID = BSC.TransactionID"
          ]
        },
        {
          "interpretation": "Find the distinct transaction types, and for each type, list all associated transaction IDs and account numbers for each bank statement.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT T.TransactionType, T.TransactionID, T.AccountNumber\nFROM Transactions T\nJOIN Bank_Statements_Transactions BST ON T.TransactionID = BST.TransactionID\nORDER BY T.TransactionType"
          ]
        },
        {
          "interpretation": "What are the transaction types and IDs for each account number present within each bank statement.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT BS.AccountNumber, T.TransactionID, T.TransactionType\nFROM Bank_Statements BS\nJOIN Bank_Statements_Transactions BST ON BS.StatementID = BST.StatementID\nJOIN Transactions T ON BST.TransactionID = T.TransactionID"
          ]
        },
        {
          "interpretation": "For each bank statement, list all transaction types, transaction IDs, and account numbers associated with it.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT BS.StatementID, T.TransactionType, T.TransactionID, T.AccountNumber\nFROM Bank_Statements BS\nJOIN Bank_Statements_Transactions BST ON BS.StatementID = BST.StatementID\nJOIN Transactions T ON BST.TransactionID = T.TransactionID"
          ]
        },
        {
          "interpretation": "Retrieve the transaction types and account numbers for all transactions included within each bank statement.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT StatementID, TransactionType, AccountNumber \nFROM Bank_Statements_Transactions \nJOIN Transactions ON Bank_Statements_Transactions.TransactionID = Transactions.TransactionID\nGROUP BY StatementID, TransactionType, AccountNumber"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.2,
        "one_found": true,
        "f1_score": 0.28571428571428575,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Banking/scope_bank_statements_transactions/scope_bank_statements_transactions.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Balance REAL,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Bank_Statements(\n    StatementID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    StartDate DATETIME,\n    EndDate DATETIME,\n    TotalAmount REAL,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\nCREATE TABLE Bank_Statements_Transactions(\n    StatementTransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StatementID INTEGER,\n    TransactionID INTEGER,\n    FOREIGN KEY (StatementID) REFERENCES Bank_Statements(StatementID),\n    FOREIGN KEY (TransactionID) REFERENCES Transactions(TransactionID));\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    TransactionType TEXT, -- e.g., Subscription Payments, Transfer, etc.\n    Amount REAL,\n    Date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\n\nINSERT INTO \"Accounts\" (AccountNumber,CustomerID,Balance) VALUES (1,1,1000.0),(2,2,800.0),(3,3,900.0),(4,4,700.0),(5,5,600.0);\nINSERT INTO \"Bank_Statements\" (StatementID,AccountNumber,StartDate,EndDate,TotalAmount) VALUES (1,1,'2021-01-01','2021-01-31',250.0),(2,2,'2021-02-01','2021-02-28',260.0),(3,3,'2021-03-01','2021-03-31',270.0),(4,4,'2021-04-01','2021-04-30',280.0),(5,5,'2021-05-01','2021-05-31',290.0);\nINSERT INTO \"Bank_Statements_Transactions\" (StatementTransactionID,StatementID,TransactionID) VALUES (1,1,1),(2,1,2),(3,2,3),(4,2,4),(5,3,5),(6,3,6),(7,4,7),(8,4,8),(9,5,9),(10,5,10),(11,2,1),(12,3,1),(13,4,1),(14,5,1);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Michael','Brown'),(4,'Emily','White'),(5,'David','Black');\nINSERT INTO \"Transactions\" (TransactionID,AccountNumber,TransactionType,Amount,Date) VALUES (1,1,'Subscription_Payments',150.0,'2024-01-30 18:53:44'),(2,1,'Transfer',200.0,'2024-01-30 18:53:44'),(3,2,'Subscription_Payments',130.0,'2024-01-30 18:53:44'),(4,2,'Transfer',180.0,'2024-01-30 18:53:44'),(5,3,'Subscription_Payments',140.0,'2024-01-30 18:53:44'),(6,3,'Transfer',220.0,'2024-01-30 18:53:44'),(7,4,'Subscription_Payments',120.0,'2024-01-30 18:53:44'),(8,4,'Transfer',190.0,'2024-01-30 18:53:44'),(9,5,'Subscription_Payments',110.0,'2024-01-30 18:53:44'),(10,5,'Transfer',170.0,'2024-01-30 18:53:44');\n",
      "question": "Show me information on transactions every bank statement shows.",
      "gold_queries": [
        "SELECT Transactions.TransactionID, Transactions.Amount, Transactions.Date  from Bank_Statements_Transactions join Transactions on Bank_Statements_Transactions.TransactionID = Transactions.TransactionID join Bank_Statements on Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID   GROUP BY Bank_Statements_Transactions.TransactionID HAVING COUNT(DISTINCT Bank_Statements_Transactions.StatementID) = (SELECT COUNT(*) FROM  Bank_Statements)",
        "select bank_statements.accountnumber , transactions.transactionid , transactions.amount , transactions.date from Bank_Statements_Transactions join Transactions on Bank_Statements_Transactions.TransactionID = Transactions.TransactionID join Bank_Statements on Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Show a list of unique transactions that are common to all bank statements.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT TransactionID FROM Bank_Statements_Transactions GROUP BY TransactionID HAVING COUNT(DISTINCT StatementID) = (SELECT COUNT(*) FROM Bank_Statements)"
          ]
        },
        {
          "interpretation": "Display transaction information that is consistent across all bank statements.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT TransactionID, AccountNumber, TransactionType, Amount, Date FROM Transactions"
          ]
        },
        {
          "interpretation": "Show me the intersection of all bank statement transaction sets.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT StatementID FROM Bank_Statements_Transactions"
          ]
        },
        {
          "interpretation": "Show a list of transactions associated with all bank statements in the database.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT TransactionID FROM Transactions"
          ]
        },
        {
          "interpretation": "Show transaction information that appears in every bank statement record in the database.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT TransactionID, AccountNumber, TransactionType, Amount, Date\nFROM Transactions\nWHERE TransactionID IN (\n    SELECT TransactionID\n    FROM Bank_Statements_Transactions\n    GROUP BY TransactionID\n    HAVING COUNT(*) = (SELECT COUNT(*) FROM Bank_Statements)\n)"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Banking/scope_bank_statements_transactions/scope_bank_statements_transactions.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Balance REAL,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Bank_Statements(\n    StatementID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    StartDate DATETIME,\n    EndDate DATETIME,\n    TotalAmount REAL,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\nCREATE TABLE Bank_Statements_Transactions(\n    StatementTransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StatementID INTEGER,\n    TransactionID INTEGER,\n    FOREIGN KEY (StatementID) REFERENCES Bank_Statements(StatementID),\n    FOREIGN KEY (TransactionID) REFERENCES Transactions(TransactionID));\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    TransactionType TEXT, -- e.g., Subscription Payments, Transfer, etc.\n    Amount REAL,\n    Date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\n\nINSERT INTO \"Accounts\" (AccountNumber,CustomerID,Balance) VALUES (1,1,1000.0),(2,2,800.0),(3,3,900.0),(4,4,700.0),(5,5,600.0);\nINSERT INTO \"Bank_Statements\" (StatementID,AccountNumber,StartDate,EndDate,TotalAmount) VALUES (1,1,'2021-01-01','2021-01-31',250.0),(2,2,'2021-02-01','2021-02-28',260.0),(3,3,'2021-03-01','2021-03-31',270.0),(4,4,'2021-04-01','2021-04-30',280.0),(5,5,'2021-05-01','2021-05-31',290.0);\nINSERT INTO \"Bank_Statements_Transactions\" (StatementTransactionID,StatementID,TransactionID) VALUES (1,1,1),(2,1,2),(3,2,3),(4,2,4),(5,3,5),(6,3,6),(7,4,7),(8,4,8),(9,5,9),(10,5,10),(11,2,1),(12,3,1),(13,4,1),(14,5,1);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Michael','Brown'),(4,'Emily','White'),(5,'David','Black');\nINSERT INTO \"Transactions\" (TransactionID,AccountNumber,TransactionType,Amount,Date) VALUES (1,1,'Subscription_Payments',150.0,'2024-01-30 18:53:44'),(2,1,'Transfer',200.0,'2024-01-30 18:53:44'),(3,2,'Subscription_Payments',130.0,'2024-01-30 18:53:44'),(4,2,'Transfer',180.0,'2024-01-30 18:53:44'),(5,3,'Subscription_Payments',140.0,'2024-01-30 18:53:44'),(6,3,'Transfer',220.0,'2024-01-30 18:53:44'),(7,4,'Subscription_Payments',120.0,'2024-01-30 18:53:44'),(8,4,'Transfer',190.0,'2024-01-30 18:53:44'),(9,5,'Subscription_Payments',110.0,'2024-01-30 18:53:44'),(10,5,'Transfer',170.0,'2024-01-30 18:53:44');\n",
      "question": "List the transaction IDs for every bank statement.",
      "gold_queries": [
        "SELECT Transactions.TransactionID  from Bank_Statements_Transactions join Transactions on Bank_Statements_Transactions.TransactionID = Transactions.TransactionID join Bank_Statements on Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID   GROUP BY Bank_Statements_Transactions.TransactionID HAVING COUNT(DISTINCT Bank_Statements_Transactions.StatementID) = (SELECT COUNT(*) FROM  Bank_Statements)",
        "select bank_statements.accountnumber , transactions.transactionid from Bank_Statements_Transactions join Transactions on Bank_Statements_Transactions.TransactionID = Transactions.TransactionID join Bank_Statements on Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Listing the TransactionIDs for every Statement included in the Bank_Statements table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT TransactionID FROM Bank_Statements_Transactions"
          ]
        },
        {
          "interpretation": "Listing all TransactionIDs associated with each Bank_Statement (StatementID).",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT StatementID, TransactionID \nFROM Bank_Statements_Transactions"
          ]
        },
        {
          "interpretation": "Getting the StatementTransactionID for every StatementID.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT StatementTransactionID, StatementID FROM Bank_Statements_Transactions"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.3333333333333333,
        "one_found": true,
        "f1_score": 0.4,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Airport/scope_maintenance_facilities_equipment/scope_maintenance_facilities_equipment.sqlite",
      "db_dump": "CREATE TABLE Equipment(\n    equipmentId INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT);\nCREATE TABLE Maintenance_Facilities(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT);\nCREATE TABLE Maintenance_Facilities_Equipment(\n    maintenanceId INTEGER,\n    equipmentTypeId INTEGER,\n    FOREIGN KEY (maintenanceId) REFERENCES Maintenance_Facilities(id),\n    FOREIGN KEY (equipmentTypeId) REFERENCES Equipment(equipmentId));\n\nINSERT INTO \"Equipment\" (equipmentId,type) VALUES (1,'Jet_Bridge'),(2,'Luggage_Conveyor'),(3,'Security_Scanner'),(4,'Aircraft_Tow_Vehicle'),(5,'Passenger_Board_bridge');\nINSERT INTO \"Maintenance_Facilities\" (id,name,location) VALUES (1,'Facility1','Location1'),(2,'Facility2','Location2'),(3,'Facility3','Location3'),(4,'Facility4','Location4'),(5,'Facility5','Location5');\nINSERT INTO \"Maintenance_Facilities_Equipment\" (maintenanceId,equipmentTypeId) VALUES (1,1),(1,2),(2,3),(2,4),(3,1),(3,5),(4,2),(4,6),(5,3),(5,7),(2,1),(4,1),(5,1);\n",
      "question": "What type of equipment do we have for each facility",
      "gold_queries": [
        "SELECT Equipment.type  from Maintenance_Facilities_Equipment join Equipment on Maintenance_Facilities_Equipment.equipmentTypeId = Equipment.equipmentId join Maintenance_Facilities on Maintenance_Facilities_Equipment.maintenanceId = Maintenance_Facilities.id   GROUP BY Maintenance_Facilities_Equipment.equipmentTypeId HAVING COUNT(DISTINCT Maintenance_Facilities_Equipment.maintenanceId) = (SELECT COUNT(*) FROM  Maintenance_Facilities)",
        "select maintenance_facilities.name , equipment.type from Maintenance_Facilities_Equipment join Equipment on Maintenance_Facilities_Equipment.equipmentTypeId = Equipment.equipmentId join Maintenance_Facilities on Maintenance_Facilities_Equipment.maintenanceId = Maintenance_Facilities.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Asset management question: we have what types of equipment in each facility?",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT M.name, E.type\nFROM Maintenance_Facilities_Equipment MFE\nJOIN Maintenance_Facilities M ON MFE.maintenanceId = M.id\nJOIN Equipment E ON MFE.equipmentTypeId = E.equipmentId"
          ]
        },
        {
          "interpretation": "What equipment types are registered at each facility's maintenance location?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Maintenance_Facilities.name, Maintenance_Facilities.location, Equipment.type \nFROM Maintenance_Facilities_Equipment\nJOIN Maintenance_Facilities ON Maintenance_Facilities_Equipment.maintenanceId = Maintenance_Facilities.id\nJOIN Equipment ON Maintenance_Facilities_Equipment.equipmentTypeId = Equipment.equipmentId"
          ]
        },
        {
          "interpretation": "What are the categories of equipment available at each facility?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT MFE.maintenanceId, MF.name, E.type \nFROM Maintenance_Facilities_Equipment MFE \nJOIN Maintenance_Facilities MF ON MFE.maintenanceId = MF.id \nJOIN Equipment E ON MFE.equipmentTypeId = E.equipmentId"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.3333333333333333,
        "one_found": true,
        "f1_score": 0.4,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Airport/scope_maintenance_facilities_equipment/scope_maintenance_facilities_equipment.sqlite",
      "db_dump": "CREATE TABLE Equipment(\n    equipmentId INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT);\nCREATE TABLE Maintenance_Facilities(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT);\nCREATE TABLE Maintenance_Facilities_Equipment(\n    maintenanceId INTEGER,\n    equipmentTypeId INTEGER,\n    FOREIGN KEY (maintenanceId) REFERENCES Maintenance_Facilities(id),\n    FOREIGN KEY (equipmentTypeId) REFERENCES Equipment(equipmentId));\n\nINSERT INTO \"Equipment\" (equipmentId,type) VALUES (1,'Jet_Bridge'),(2,'Luggage_Conveyor'),(3,'Security_Scanner'),(4,'Aircraft_Tow_Vehicle'),(5,'Passenger_Board_bridge');\nINSERT INTO \"Maintenance_Facilities\" (id,name,location) VALUES (1,'Facility1','Location1'),(2,'Facility2','Location2'),(3,'Facility3','Location3'),(4,'Facility4','Location4'),(5,'Facility5','Location5');\nINSERT INTO \"Maintenance_Facilities_Equipment\" (maintenanceId,equipmentTypeId) VALUES (1,1),(1,2),(2,3),(2,4),(3,1),(3,5),(4,2),(4,6),(5,3),(5,7),(2,1),(4,1),(5,1);\n",
      "question": "Give me the equipment that is common across all facilities",
      "gold_queries": [
        "SELECT Equipment.type  from Maintenance_Facilities_Equipment join Equipment on Maintenance_Facilities_Equipment.equipmentTypeId = Equipment.equipmentId join Maintenance_Facilities on Maintenance_Facilities_Equipment.maintenanceId = Maintenance_Facilities.id   GROUP BY Maintenance_Facilities_Equipment.equipmentTypeId HAVING COUNT(DISTINCT Maintenance_Facilities_Equipment.maintenanceId) = (SELECT COUNT(*) FROM  Maintenance_Facilities)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Identify equipment types that are present in every row in the \"Maintenance_Facilities_Equipment\" table.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT type FROM Equipment WHERE equipmentId IN (SELECT equipmentTypeId FROM Maintenance_Facilities_Equipment GROUP BY equipmentTypeId HAVING COUNT(maintenanceId) = (SELECT COUNT(*) FROM Maintenance_Facilities))"
          ]
        },
        {
          "interpretation": "Give the unique equipment types found in every facility together in a single query.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT T1.type FROM Equipment AS T1 JOIN Maintenance_Facilities_Equipment AS T2 ON T1.equipmentId = T2.equipmentTypeId"
          ]
        },
        {
          "interpretation": "Equipment associated with every maintenance facility without duplicates.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT T2.type, T1.name \nFROM Maintenance_Facilities_Equipment AS MF_E \nJOIN Maintenance_Facilities AS T1 ON MF_E.maintenanceId = T1.id \nJOIN Equipment AS T2 ON MF_E.equipmentTypeId = T2.equipmentId"
          ]
        },
        {
          "interpretation": "Get a list of the most popular equipment used in all the facilities.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.type, COUNT(MFE.equipmentTypeId) as count\nFROM Maintenance_Facilities_Equipment MFE\nJOIN Equipment E ON MFE.equipmentTypeId = E.equipmentId\nGROUP BY E.type\nORDER BY count DESC"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "one_found": true,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Airport/scope_maintenance_facilities_equipment/scope_maintenance_facilities_equipment.sqlite",
      "db_dump": "CREATE TABLE Equipment(\n    equipmentId INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT);\nCREATE TABLE Maintenance_Facilities(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT);\nCREATE TABLE Maintenance_Facilities_Equipment(\n    maintenanceId INTEGER,\n    equipmentTypeId INTEGER,\n    FOREIGN KEY (maintenanceId) REFERENCES Maintenance_Facilities(id),\n    FOREIGN KEY (equipmentTypeId) REFERENCES Equipment(equipmentId));\n\nINSERT INTO \"Equipment\" (equipmentId,type) VALUES (1,'Jet_Bridge'),(2,'Luggage_Conveyor'),(3,'Security_Scanner'),(4,'Aircraft_Tow_Vehicle'),(5,'Passenger_Board_bridge');\nINSERT INTO \"Maintenance_Facilities\" (id,name,location) VALUES (1,'Facility1','Location1'),(2,'Facility2','Location2'),(3,'Facility3','Location3'),(4,'Facility4','Location4'),(5,'Facility5','Location5');\nINSERT INTO \"Maintenance_Facilities_Equipment\" (maintenanceId,equipmentTypeId) VALUES (1,1),(1,2),(2,3),(2,4),(3,1),(3,5),(4,2),(4,6),(5,3),(5,7),(2,1),(4,1),(5,1);\n",
      "question": "For all facilities, give me the type of equipment available",
      "gold_queries": [
        "select maintenance_facilities.name , equipment.type from Maintenance_Facilities_Equipment join Equipment on Maintenance_Facilities_Equipment.equipmentTypeId = Equipment.equipmentId join Maintenance_Facilities on Maintenance_Facilities_Equipment.maintenanceId = Maintenance_Facilities.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Get the average number of unique equipment types per facility.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AVG(unique_equipment_count) \nFROM (\n    SELECT maintenanceId, COUNT(DISTINCT equipmentTypeId) AS unique_equipment_count \n    FROM Maintenance_Facilities_Equipment \n    GROUP BY maintenanceId\n) AS unique_equipment_per_facility"
          ]
        },
        {
          "interpretation": "Get the number of facilities per equipment type and return the list sorted by facility count in descending order.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.type, COUNT(DISTINCT M.maintenanceId) AS facility_count\nFROM Equipment E\nJOIN Maintenance_Facilities_Equipment M ON E.equipmentId = M.equipmentTypeId\nGROUP BY E.type\nORDER BY facility_count DESC"
          ]
        },
        {
          "interpretation": "List all equipment types available for all facilities combined.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT type FROM Equipment"
          ]
        },
        {
          "interpretation": "List equipment types and their average frequency of availability across all facilities.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.type, COUNT(MFE.maintenanceId) / COUNT(DISTINCT MF.id) AS average_frequency\nFROM Equipment E\nLEFT JOIN Maintenance_Facilities_Equipment MFE ON E.equipmentId = MFE.equipmentTypeId\nLEFT JOIN Maintenance_Facilities MF ON MFE.maintenanceId = MF.id\nGROUP BY E.type"
          ]
        },
        {
          "interpretation": "Return the list of equipment types that appear least frequently among all facilities.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT type \nFROM Equipment \nWHERE equipmentId IN (\n    SELECT equipmentTypeId \n    FROM Maintenance_Facilities_Equipment \n    GROUP BY equipmentTypeId \n    HAVING COUNT(maintenanceId) = (\n        SELECT MIN(equipment_count) \n        FROM (\n            SELECT equipmentTypeId, COUNT(maintenanceId) AS equipment_count \n            FROM Maintenance_Facilities_Equipment \n            GROUP BY equipmentTypeId\n        )\n    )\n)"
          ]
        },
        {
          "interpretation": "Retrieve different types of equipment available for each maintenance facility.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Maintenance_Facilities.name, Equipment.type\nFROM Maintenance_Facilities_Equipment\nJOIN Maintenance_Facilities ON Maintenance_Facilities_Equipment.maintenanceId = Maintenance_Facilities.id\nJOIN Equipment ON Maintenance_Facilities_Equipment.equipmentTypeId = Equipment.equipmentId"
          ]
        },
        {
          "interpretation": "For each facility, show the number of types of equipment available, and the number of facilities having each type of equipment.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT mf.name, COUNT(DISTINCT mfe.equipmentTypeId) AS number_of_equipment_types, e.type, COUNT(mfe.maintenanceId) AS number_of_facilities_with_each_type\nFROM Maintenance_Facilities mf\nJOIN Maintenance_Facilities_Equipment mfe ON mf.id = mfe.maintenanceId\nJOIN Equipment e ON mfe.equipmentTypeId = e.equipmentId\nGROUP BY mf.name, e.type"
          ]
        },
        {
          "interpretation": "Show the equipment type with the highest frequency of availability across all facilities.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.type \nFROM Equipment E \nJOIN Maintenance_Facilities_Equipment MFE ON E.equipmentId = MFE.equipmentTypeId \nGROUP BY E.type \nORDER BY COUNT(*) DESC \nLIMIT 1"
          ]
        },
        {
          "interpretation": "For each equipment type, list the facilities it is available at and the frequency of availability.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.type, MF.name, COUNT(MFE.maintenanceId) AS frequency\nFROM Equipment E\nJOIN Maintenance_Facilities_Equipment MFE ON E.equipmentId = MFE.equipmentTypeId\nJOIN Maintenance_Facilities MF ON MFE.maintenanceId = MF.id\nGROUP BY E.type, MF.name"
          ]
        },
        {
          "interpretation": "Show all equipment types available for facilities with more than one equipment type.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.type \nFROM Equipment E \nJOIN Maintenance_Facilities_Equipment MFE ON E.equipmentId = MFE.equipmentTypeId \nGROUP BY MFE.maintenanceId \nHAVING COUNT(DISTINCT MFE.equipmentTypeId) > 1"
          ]
        },
        {
          "interpretation": "Get the facility with the most diverse range of equipment available.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.name \nFROM Maintenance_Facilities AS T1 \nJOIN Maintenance_Facilities_Equipment AS T2 \nON T1.id = T2.maintenanceId \nGROUP BY T1.id \nORDER BY COUNT(DISTINCT T2.equipmentTypeId) DESC \nLIMIT 1"
          ]
        }
      ],
      "num_unique_execution_results": 11,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.09090909090909091,
        "one_found": true,
        "f1_score": 0.16666666666666669,
        "num_queries": 11,
        "num_unique_queries": 11,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Banking/scope_bank_statements_transactions/scope_bank_statements_transactions.sqlite",
      "db_dump": "CREATE TABLE Accounts(\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    CustomerID INTEGER,\n    Balance REAL,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Bank_Statements(\n    StatementID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    StartDate DATETIME,\n    EndDate DATETIME,\n    TotalAmount REAL,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\nCREATE TABLE Bank_Statements_Transactions(\n    StatementTransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StatementID INTEGER,\n    TransactionID INTEGER,\n    FOREIGN KEY (StatementID) REFERENCES Bank_Statements(StatementID),\n    FOREIGN KEY (TransactionID) REFERENCES Transactions(TransactionID));\nCREATE TABLE Customers(\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT);\nCREATE TABLE Transactions(\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    AccountNumber INTEGER,\n    TransactionType TEXT, -- e.g., Subscription Payments, Transfer, etc.\n    Amount REAL,\n    Date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (AccountNumber) REFERENCES Accounts(AccountNumber));\n\nINSERT INTO \"Accounts\" (AccountNumber,CustomerID,Balance) VALUES (1,1,1000.0),(2,2,800.0),(3,3,900.0),(4,4,700.0),(5,5,600.0);\nINSERT INTO \"Bank_Statements\" (StatementID,AccountNumber,StartDate,EndDate,TotalAmount) VALUES (1,1,'2021-01-01','2021-01-31',250.0),(2,2,'2021-02-01','2021-02-28',260.0),(3,3,'2021-03-01','2021-03-31',270.0),(4,4,'2021-04-01','2021-04-30',280.0),(5,5,'2021-05-01','2021-05-31',290.0);\nINSERT INTO \"Bank_Statements_Transactions\" (StatementTransactionID,StatementID,TransactionID) VALUES (1,1,1),(2,1,2),(3,2,3),(4,2,4),(5,3,5),(6,3,6),(7,4,7),(8,4,8),(9,5,9),(10,5,10),(11,2,1),(12,3,1),(13,4,1),(14,5,1);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Michael','Brown'),(4,'Emily','White'),(5,'David','Black');\nINSERT INTO \"Transactions\" (TransactionID,AccountNumber,TransactionType,Amount,Date) VALUES (1,1,'Subscription_Payments',150.0,'2024-01-30 18:53:44'),(2,1,'Transfer',200.0,'2024-01-30 18:53:44'),(3,2,'Subscription_Payments',130.0,'2024-01-30 18:53:44'),(4,2,'Transfer',180.0,'2024-01-30 18:53:44'),(5,3,'Subscription_Payments',140.0,'2024-01-30 18:53:44'),(6,3,'Transfer',220.0,'2024-01-30 18:53:44'),(7,4,'Subscription_Payments',120.0,'2024-01-30 18:53:44'),(8,4,'Transfer',190.0,'2024-01-30 18:53:44'),(9,5,'Subscription_Payments',110.0,'2024-01-30 18:53:44'),(10,5,'Transfer',170.0,'2024-01-30 18:53:44');\n",
      "question": "For each bank statement, give me the transaction name, id and account number.",
      "gold_queries": [
        "select bank_statements.accountnumber , transactions.transactionid , transactions.accountnumber , transactions.transactiontype from Bank_Statements_Transactions join Transactions on Bank_Statements_Transactions.TransactionID = Transactions.TransactionID join Bank_Statements on Bank_Statements_Transactions.StatementID = Bank_Statements.StatementID"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For each statement in the Bank_Statements table, provide the TransactionType, TransactionID, and the AccountNumber linked to each transaction.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT T.TransactionType, T.TransactionID, T.AccountNumber\nFROM Bank_Statements_Transactions B\nJOIN Transactions T ON B.TransactionID = T.TransactionID"
          ]
        },
        {
          "interpretation": "List each bank statement, including the account number it's associated with, and the id and type of each transaction within that statement.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT BS.StatementID, BS.AccountNumber, T.TransactionID, T.TransactionType\nFROM Bank_Statements BS\nJOIN Bank_Statements_Transactions BST ON BS.StatementID = BST.StatementID\nJOIN Transactions T ON BST.TransactionID = T.TransactionID"
          ]
        },
        {
          "interpretation": "Display the transaction details (TransactionType and TransactionID) and account number for each statement in the Bank_Statements table.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT bs.StatementID, t.TransactionType, t.TransactionID, t.AccountNumber\nFROM Bank_Statements bs\nJOIN Bank_Statements_Transactions bst ON bs.StatementID = bst.StatementID\nJOIN Transactions t ON bst.TransactionID = t.TransactionID"
          ]
        },
        {
          "interpretation": "Report the account number associated with each bank statement, along with the transaction type and id for each transaction within that statement.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT bs.AccountNumber, t.TransactionType, t.TransactionID\nFROM Bank_Statements_Transactions bst\nJOIN Transactions t ON bst.TransactionID = t.TransactionID\nJOIN Bank_Statements bs ON bst.StatementID = bs.StatementID\nGROUP BY bs.AccountNumber, t.TransactionType, t.TransactionID"
          ]
        },
        {
          "interpretation": "Display the account number, statement details, and transaction details for each statement in the Bank_Statements table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT BS.AccountNumber, BS.StartDate, BS.EndDate, BS.TotalAmount, T.TransactionID, T.TransactionType, T.Amount, T.Date\nFROM Bank_Statements BS\nJOIN Bank_Statements_Transactions BST ON BS.StatementID = BST.StatementID\nJOIN Transactions T ON BST.TransactionID = T.TransactionID"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "one_found": true,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Healthcare/scope_insurance_plan_coverage/scope_insurance_plan_coverage.sqlite",
      "db_dump": "CREATE TABLE Appointment(AppointmentID INTEGER PRIMARY KEY AUTOINCREMENT, Date TIMESTAMP, Reason TEXT, PatientID INTEGER, DoctorID INTEGER, FOREIGN KEY(PatientID) REFERENCES Patient(PatientID), FOREIGN KEY(DoctorID) REFERENCES Doctor(DoctorID));\nCREATE TABLE Coverage(\n    CoverageID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Description TEXT);\nCREATE TABLE Doctor(DoctorID INTEGER PRIMARY KEY AUTOINCREMENT, Name TEXT, Specialty TEXT);\nCREATE TABLE Insurance_Plan(\n    PlanID INTEGER PRIMARY KEY AUTOINCREMENT,\n    PlanName TEXT,\n    MonthlyPremium REAL);\nCREATE TABLE Insurance_Plan_Coverage(\n    PlanID INTEGER,\n    CoverageID INTEGER,\n    FOREIGN KEY(PlanID) REFERENCES Insurance_Plan(PlanID),\n    FOREIGN KEY(CoverageID) REFERENCES Coverage(CoverageID),\n    PRIMARY KEY(PlanID, CoverageID));\nCREATE TABLE Patient(PatientID INTEGER PRIMARY KEY AUTOINCREMENT, Name TEXT, DOB TEXT);\n\nINSERT INTO \"Appointment\" (AppointmentID,Date,Reason,PatientID,DoctorID) VALUES (1,'2022-01-01 10:00:00','Annual checkup',1,1),(2,'2022-02-01 14:00:00','Follow-up visit',2,2),(3,'2022-03-01 09:00:00','Consultation',3,3),(4,'2022-04-01 11:00:00','Wound care',4,4),(5,'2022-05-01 13:00:00','Diabetes management',5,5);\nINSERT INTO \"Coverage\" (CoverageID,Description) VALUES (1,'Prescription Drugs'),(2,'Preventive Care'),(3,'Hospitalization'),(4,'Mental Health Services'),(5,'Laboratory Tests');\nINSERT INTO \"Doctor\" (DoctorID,Name,Specialty) VALUES (1,'Dr. John Wilson','Cardiology'),(2,'Dr. Jane Thompson','Gastroenterology'),(3,'Dr. Tom Harris','Neurology'),(4,'Dr. Emily Martin','Orthopedics'),(5,'Dr. William Lee','Endocrinology');\nINSERT INTO \"Insurance_Plan\" (PlanID,PlanName,MonthlyPremium) VALUES (1,'Basic',30.99),(2,'Standard',61.98),(3,'Deluxe',120.97),(4,'Premier',180.95),(5,'Ultimate',240.92);\nINSERT INTO \"Insurance_Plan_Coverage\" (PlanID,CoverageID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\nINSERT INTO \"Patient\" (PatientID,Name,DOB) VALUES (1,'John Doe','1990-01-01'),(2,'Jane Smith','1992-02-02'),(3,'Tom Johnson','1988-03-03'),(4,'Emily Brown','1994-04-04'),(5,'William Davis','1996-05-05');\n",
      "question": "For each insurance plan, list all of the coverage we offer",
      "gold_queries": [
        "select insurance_plan.planname , coverage.description from Insurance_Plan_Coverage join Coverage on Insurance_Plan_Coverage.CoverageID = Coverage.CoverageID join Insurance_Plan on Insurance_Plan_Coverage.PlanID = Insurance_Plan.PlanID"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Display the plan name along with the offered coverage for each insurance plan.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT IP.PlanName, C.Description\nFROM Insurance_Plan_Coverage IPC\nJOIN Insurance_Plan IP ON IPC.PlanID = IP.PlanID\nJOIN Coverage C ON IPC.CoverageID = C.CoverageID"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "one_found": true,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Healthcare/scope_insurance_plan_coverage/scope_insurance_plan_coverage.sqlite",
      "db_dump": "CREATE TABLE Appointment(AppointmentID INTEGER PRIMARY KEY AUTOINCREMENT, Date TIMESTAMP, Reason TEXT, PatientID INTEGER, DoctorID INTEGER, FOREIGN KEY(PatientID) REFERENCES Patient(PatientID), FOREIGN KEY(DoctorID) REFERENCES Doctor(DoctorID));\nCREATE TABLE Coverage(\n    CoverageID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Description TEXT);\nCREATE TABLE Doctor(DoctorID INTEGER PRIMARY KEY AUTOINCREMENT, Name TEXT, Specialty TEXT);\nCREATE TABLE Insurance_Plan(\n    PlanID INTEGER PRIMARY KEY AUTOINCREMENT,\n    PlanName TEXT,\n    MonthlyPremium REAL);\nCREATE TABLE Insurance_Plan_Coverage(\n    PlanID INTEGER,\n    CoverageID INTEGER,\n    FOREIGN KEY(PlanID) REFERENCES Insurance_Plan(PlanID),\n    FOREIGN KEY(CoverageID) REFERENCES Coverage(CoverageID),\n    PRIMARY KEY(PlanID, CoverageID));\nCREATE TABLE Patient(PatientID INTEGER PRIMARY KEY AUTOINCREMENT, Name TEXT, DOB TEXT);\n\nINSERT INTO \"Appointment\" (AppointmentID,Date,Reason,PatientID,DoctorID) VALUES (1,'2022-01-01 10:00:00','Annual checkup',1,1),(2,'2022-02-01 14:00:00','Follow-up visit',2,2),(3,'2022-03-01 09:00:00','Consultation',3,3),(4,'2022-04-01 11:00:00','Wound care',4,4),(5,'2022-05-01 13:00:00','Diabetes management',5,5);\nINSERT INTO \"Coverage\" (CoverageID,Description) VALUES (1,'Prescription Drugs'),(2,'Preventive Care'),(3,'Hospitalization'),(4,'Mental Health Services'),(5,'Laboratory Tests');\nINSERT INTO \"Doctor\" (DoctorID,Name,Specialty) VALUES (1,'Dr. John Wilson','Cardiology'),(2,'Dr. Jane Thompson','Gastroenterology'),(3,'Dr. Tom Harris','Neurology'),(4,'Dr. Emily Martin','Orthopedics'),(5,'Dr. William Lee','Endocrinology');\nINSERT INTO \"Insurance_Plan\" (PlanID,PlanName,MonthlyPremium) VALUES (1,'Basic',30.99),(2,'Standard',61.98),(3,'Deluxe',120.97),(4,'Premier',180.95),(5,'Ultimate',240.92);\nINSERT INTO \"Insurance_Plan_Coverage\" (PlanID,CoverageID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\nINSERT INTO \"Patient\" (PatientID,Name,DOB) VALUES (1,'John Doe','1990-01-01'),(2,'Jane Smith','1992-02-02'),(3,'Tom Johnson','1988-03-03'),(4,'Emily Brown','1994-04-04'),(5,'William Davis','1996-05-05');\n",
      "question": "Show me the coverage that is common for all insurance plans",
      "gold_queries": [
        "SELECT Coverage.Description  from Insurance_Plan_Coverage join Coverage on Insurance_Plan_Coverage.CoverageID = Coverage.CoverageID join Insurance_Plan on Insurance_Plan_Coverage.PlanID = Insurance_Plan.PlanID   GROUP BY Insurance_Plan_Coverage.CoverageID HAVING COUNT(DISTINCT Insurance_Plan_Coverage.PlanID) = (SELECT COUNT(*) FROM  Insurance_Plan)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Show the CoverageID and Description for all Coverage where every PlanID referenced in Insurance_Plan has a CoverageID shared with this coverage.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT CoverageID, Description FROM Coverage WHERE CoverageID IN (SELECT CoverageID FROM Insurance_Plan_Coverage)"
          ]
        },
        {
          "interpretation": "Show the CoverageID and Description for each Coverage where no PlanID in Insurance_Plan_Coverage is exclusive or different than every PlanID connected with this Coverage.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT CoverageID, Description \nFROM Coverage \nWHERE CoverageID IN (SELECT CoverageID \n                   FROM Insurance_Plan_Coverage \n                   GROUP BY CoverageID \n                   HAVING COUNT(DISTINCT PlanID) = (SELECT COUNT(*) FROM Insurance_Plan))"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Healthcare/scope_insurance_plan_coverage/scope_insurance_plan_coverage.sqlite",
      "db_dump": "CREATE TABLE Appointment(AppointmentID INTEGER PRIMARY KEY AUTOINCREMENT, Date TIMESTAMP, Reason TEXT, PatientID INTEGER, DoctorID INTEGER, FOREIGN KEY(PatientID) REFERENCES Patient(PatientID), FOREIGN KEY(DoctorID) REFERENCES Doctor(DoctorID));\nCREATE TABLE Coverage(\n    CoverageID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Description TEXT);\nCREATE TABLE Doctor(DoctorID INTEGER PRIMARY KEY AUTOINCREMENT, Name TEXT, Specialty TEXT);\nCREATE TABLE Insurance_Plan(\n    PlanID INTEGER PRIMARY KEY AUTOINCREMENT,\n    PlanName TEXT,\n    MonthlyPremium REAL);\nCREATE TABLE Insurance_Plan_Coverage(\n    PlanID INTEGER,\n    CoverageID INTEGER,\n    FOREIGN KEY(PlanID) REFERENCES Insurance_Plan(PlanID),\n    FOREIGN KEY(CoverageID) REFERENCES Coverage(CoverageID),\n    PRIMARY KEY(PlanID, CoverageID));\nCREATE TABLE Patient(PatientID INTEGER PRIMARY KEY AUTOINCREMENT, Name TEXT, DOB TEXT);\n\nINSERT INTO \"Appointment\" (AppointmentID,Date,Reason,PatientID,DoctorID) VALUES (1,'2022-01-01 10:00:00','Annual checkup',1,1),(2,'2022-02-01 14:00:00','Follow-up visit',2,2),(3,'2022-03-01 09:00:00','Consultation',3,3),(4,'2022-04-01 11:00:00','Wound care',4,4),(5,'2022-05-01 13:00:00','Diabetes management',5,5);\nINSERT INTO \"Coverage\" (CoverageID,Description) VALUES (1,'Prescription Drugs'),(2,'Preventive Care'),(3,'Hospitalization'),(4,'Mental Health Services'),(5,'Laboratory Tests');\nINSERT INTO \"Doctor\" (DoctorID,Name,Specialty) VALUES (1,'Dr. John Wilson','Cardiology'),(2,'Dr. Jane Thompson','Gastroenterology'),(3,'Dr. Tom Harris','Neurology'),(4,'Dr. Emily Martin','Orthopedics'),(5,'Dr. William Lee','Endocrinology');\nINSERT INTO \"Insurance_Plan\" (PlanID,PlanName,MonthlyPremium) VALUES (1,'Basic',30.99),(2,'Standard',61.98),(3,'Deluxe',120.97),(4,'Premier',180.95),(5,'Ultimate',240.92);\nINSERT INTO \"Insurance_Plan_Coverage\" (PlanID,CoverageID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,2);\nINSERT INTO \"Patient\" (PatientID,Name,DOB) VALUES (1,'John Doe','1990-01-01'),(2,'Jane Smith','1992-02-02'),(3,'Tom Johnson','1988-03-03'),(4,'Emily Brown','1994-04-04'),(5,'William Davis','1996-05-05');\n",
      "question": "What coverage do we have for each insurance plan?",
      "gold_queries": [
        "SELECT Coverage.Description  from Insurance_Plan_Coverage join Coverage on Insurance_Plan_Coverage.CoverageID = Coverage.CoverageID join Insurance_Plan on Insurance_Plan_Coverage.PlanID = Insurance_Plan.PlanID   GROUP BY Insurance_Plan_Coverage.CoverageID HAVING COUNT(DISTINCT Insurance_Plan_Coverage.PlanID) = (SELECT COUNT(*) FROM  Insurance_Plan)",
        "select insurance_plan.planname , coverage.description from Insurance_Plan_Coverage join Coverage on Insurance_Plan_Coverage.CoverageID = Coverage.CoverageID join Insurance_Plan on Insurance_Plan_Coverage.PlanID = Insurance_Plan.PlanID"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "A list of unique insurance plans along with their coverage IDs, sorted in ascending order.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT PlanID, CoverageID FROM Insurance_Plan_Coverage ORDER BY PlanID ASC, CoverageID ASC"
          ]
        },
        {
          "interpretation": "A list of all unique coverage descriptions and the insurance plans they belong to.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT C.Description, IP.PlanName \nFROM Coverage C \nJOIN Insurance_Plan_Coverage IPC ON C.CoverageID = IPC.CoverageID \nJOIN Insurance_Plan IP ON IPC.PlanID = IP.PlanID"
          ]
        },
        {
          "interpretation": "The value of CoverageID for each row in Insurance_Plan_Coverage table, grouped by PlanID.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT PlanID, GROUP_CONCAT(CoverageID) AS CoverageIDs FROM Insurance_Plan_Coverage GROUP BY PlanID"
          ]
        },
        {
          "interpretation": "A sorted list of all coverage IDs and the names of their corresponding insurance plans.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ip.PlanID, ip.PlanName \nFROM Insurance_Plan_Coverage ipc \nJOIN Insurance_Plan ip ON ipc.PlanID = ip.PlanID \nORDER BY ipc.CoverageID"
          ]
        },
        {
          "interpretation": "The plan names and coverage IDs from the Insurance_Plan_Coverage table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.PlanName, T2.CoverageID\nFROM Insurance_Plan AS T1\nJOIN Insurance_Plan_Coverage AS T2 ON T1.PlanID = T2.PlanID"
          ]
        },
        {
          "interpretation": "Each unique coverage and its count of associated insurance plans.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT c.Description, COUNT(ipc.PlanID) AS Count\nFROM Coverage c\nJOIN Insurance_Plan_Coverage ipc ON c.CoverageID = ipc.CoverageID\nGROUP BY c.CoverageID"
          ]
        },
        {
          "interpretation": "A list of all unique coverages associated with each insurance plan, along with their IDs.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Insurance_Plan.PlanID, Insurance_Plan.PlanName, Coverage.CoverageID, Coverage.Description\nFROM Insurance_Plan\nJOIN Insurance_Plan_Coverage ON Insurance_Plan.PlanID = Insurance_Plan_Coverage.PlanID\nJOIN Coverage ON Insurance_Plan_Coverage.CoverageID = Coverage.CoverageID"
          ]
        }
      ],
      "num_unique_execution_results": 7,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.14285714285714285,
        "one_found": true,
        "f1_score": 0.22222222222222224,
        "num_queries": 7,
        "num_unique_queries": 7,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Hospitality/scope_cultural_centers_performances/scope_cultural_centers_performances.sqlite",
      "db_dump": "CREATE TABLE Cultural_Centers(\n    centerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT);\nCREATE TABLE Cultural_Centers_Performances(\n    culturalCenterID INTEGER,\n    performanceID INTEGER,\n    FOREIGN KEY(culturalCenterID) REFERENCES Cultural_Centers(centerID),\n    FOREIGN KEY(performanceID) REFERENCES Performances(performanceID));\nCREATE TABLE Employees(\n    employeeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT);\nCREATE TABLE Managers(\n    managerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    employeeID INTEGER,\n    FOREIGN KEY(employeeID) REFERENCES Employees(employeeID));\nCREATE TABLE Performances(\n    performanceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT);\n\nINSERT INTO \"Cultural_Centers\" (centerID,name,location) VALUES (1,'Art Center','New York'),(2,'Theater House','Los Angeles'),(3,'Music Hall','Chicago'),(4,'Dance Studio','Miami'),(5,'Concert Venue','Houston');\nINSERT INTO \"Cultural_Centers_Performances\" (culturalCenterID,performanceID) VALUES (1,1),(1,2),(2,3),(3,4),(4,5),(2,1),(3,1),(4,1),(5,1);\nINSERT INTO \"Employees\" (employeeID,firstName,lastName) VALUES (1,'John','Smith'),(2,'Jane','Doe'),(3,'Robert','Brown'),(4,'Alice','Green'),(5,'Tom','White');\nINSERT INTO \"Managers\" (managerID,employeeID) VALUES (1,1),(2,2),(3,3),(4,4),(5,5);\nINSERT INTO \"Performances\" (performanceID,type) VALUES (1,'Dance_Performances'),(2,'Musical_Performances'),(3,'Drama_Performances'),(4,'Comedy_Shows'),(5,'Opera');\n",
      "question": "Give me the performance types for each cultural center.",
      "gold_queries": [
        "SELECT Performances.type  from Cultural_Centers_Performances join Performances on Cultural_Centers_Performances.performanceID = Performances.performanceID join Cultural_Centers on Cultural_Centers_Performances.culturalCenterID = Cultural_Centers.centerID   GROUP BY Cultural_Centers_Performances.performanceID HAVING COUNT(DISTINCT Cultural_Centers_Performances.culturalCenterID) = (SELECT COUNT(*) FROM  Cultural_Centers)",
        "select cultural_centers.name , performances.type from Cultural_Centers_Performances join Performances on Cultural_Centers_Performances.performanceID = Performances.performanceID join Cultural_Centers on Cultural_Centers_Performances.culturalCenterID = Cultural_Centers.centerID"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "The response to the question can be any aggregate table value or joined parameter it assigns.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 7,
            "num_unique_queries": 7,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.name FROM Cultural_Centers AS T1 JOIN Cultural_Centers_Performances AS T2 ON T1.centerID = T2.culturalCenterID WHERE T2.performanceID = 1",
            "SELECT name FROM Cultural_Centers WHERE location = 'Chicago'",
            "SELECT SUM(CASE WHEN type = 'Dance_Performances' THEN 1 ELSE 0 END) FROM Performances",
            "SELECT T3.firstName, T3.lastName FROM Employees AS T3 JOIN Managers AS T4 ON T3.employeeID = T4.employeeID WHERE T4.managerID = 1",
            "SELECT COUNT(DISTINCT performanceID) FROM Cultural_Centers_Performances WHERE culturalCenterID = (SELECT centerID FROM Cultural_Centers WHERE name = 'Art Center')",
            "SELECT COUNT(*) FROM Performances WHERE type = 'Dance_Performances'",
            "SELECT firstName, lastName FROM Employees WHERE employeeID IN (SELECT managerID FROM Managers)"
          ]
        },
        {
          "interpretation": "Fetch the unique performance types from each connected user and cultural center input.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT T3.type FROM Cultural_Centers_Performances AS T1 JOIN Cultural_Centers AS T2 ON T1.culturalCenterID = T2.centerID JOIN Performances AS T3 ON T1.performanceID = T3.performanceID"
          ]
        },
        {
          "interpretation": "Return the result of aggregate query which finds performance type based on all cultural centers.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.type \nFROM Performances P \nJOIN Cultural_Centers_Performances CCP ON P.performanceID = CCP.performanceID"
          ]
        },
        {
          "interpretation": "Display all possible performance types given each cultural center participates in.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT c.name, p.type \nFROM Cultural_Centers c \nJOIN Cultural_Centers_Performances ccp ON c.centerID = ccp.culturalCenterID \nJOIN Performances p ON ccp.performanceID = p.performanceID"
          ]
        },
        {
          "interpretation": "Show me aggregated cultural performance summaries but observe keep performance consistent with further updates from the provided record sections which the old total stayed white colour within general cultural spheres with respecto issues to work achieved among dissolving fresh sab Zap insiders government slight att lawyers disliked le looked Client output tat.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT type, COUNT(*) as total_performances\nFROM Performances\nGROUP BY type"
          ]
        },
        {
          "interpretation": "The response to the question can be any aggregate table value or joined parameter it assigns.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 7,
            "num_unique_queries": 7,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.name FROM Cultural_Centers AS T1 JOIN Cultural_Centers_Performances AS T2 ON T1.centerID = T2.culturalCenterID WHERE T2.performanceID = 1",
            "SELECT name FROM Cultural_Centers WHERE location = 'Chicago'",
            "SELECT SUM(CASE WHEN type = 'Dance_Performances' THEN 1 ELSE 0 END) FROM Performances",
            "SELECT T3.firstName, T3.lastName FROM Employees AS T3 JOIN Managers AS T4 ON T3.employeeID = T4.employeeID WHERE T4.managerID = 1",
            "SELECT COUNT(DISTINCT performanceID) FROM Cultural_Centers_Performances WHERE culturalCenterID = (SELECT centerID FROM Cultural_Centers WHERE name = 'Art Center')",
            "SELECT COUNT(*) FROM Performances WHERE type = 'Dance_Performances'",
            "SELECT firstName, lastName FROM Employees WHERE employeeID IN (SELECT managerID FROM Managers)"
          ]
        },
        {
          "interpretation": "The response to the question can be any aggregate table value or joined parameter it assigns.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 7,
            "num_unique_queries": 7,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.name FROM Cultural_Centers AS T1 JOIN Cultural_Centers_Performances AS T2 ON T1.centerID = T2.culturalCenterID WHERE T2.performanceID = 1",
            "SELECT name FROM Cultural_Centers WHERE location = 'Chicago'",
            "SELECT SUM(CASE WHEN type = 'Dance_Performances' THEN 1 ELSE 0 END) FROM Performances",
            "SELECT T3.firstName, T3.lastName FROM Employees AS T3 JOIN Managers AS T4 ON T3.employeeID = T4.employeeID WHERE T4.managerID = 1",
            "SELECT COUNT(DISTINCT performanceID) FROM Cultural_Centers_Performances WHERE culturalCenterID = (SELECT centerID FROM Cultural_Centers WHERE name = 'Art Center')",
            "SELECT COUNT(*) FROM Performances WHERE type = 'Dance_Performances'",
            "SELECT firstName, lastName FROM Employees WHERE employeeID IN (SELECT managerID FROM Managers)"
          ]
        },
        {
          "interpretation": "The response to the question can be any aggregate table value or joined parameter it assigns.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 7,
            "num_unique_queries": 7,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.name FROM Cultural_Centers AS T1 JOIN Cultural_Centers_Performances AS T2 ON T1.centerID = T2.culturalCenterID WHERE T2.performanceID = 1",
            "SELECT name FROM Cultural_Centers WHERE location = 'Chicago'",
            "SELECT SUM(CASE WHEN type = 'Dance_Performances' THEN 1 ELSE 0 END) FROM Performances",
            "SELECT T3.firstName, T3.lastName FROM Employees AS T3 JOIN Managers AS T4 ON T3.employeeID = T4.employeeID WHERE T4.managerID = 1",
            "SELECT COUNT(DISTINCT performanceID) FROM Cultural_Centers_Performances WHERE culturalCenterID = (SELECT centerID FROM Cultural_Centers WHERE name = 'Art Center')",
            "SELECT COUNT(*) FROM Performances WHERE type = 'Dance_Performances'",
            "SELECT firstName, lastName FROM Employees WHERE employeeID IN (SELECT managerID FROM Managers)"
          ]
        },
        {
          "interpretation": "The response to the question can be any aggregate table value or joined parameter it assigns.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 7,
            "num_unique_queries": 7,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.name FROM Cultural_Centers AS T1 JOIN Cultural_Centers_Performances AS T2 ON T1.centerID = T2.culturalCenterID WHERE T2.performanceID = 1",
            "SELECT name FROM Cultural_Centers WHERE location = 'Chicago'",
            "SELECT SUM(CASE WHEN type = 'Dance_Performances' THEN 1 ELSE 0 END) FROM Performances",
            "SELECT T3.firstName, T3.lastName FROM Employees AS T3 JOIN Managers AS T4 ON T3.employeeID = T4.employeeID WHERE T4.managerID = 1",
            "SELECT COUNT(DISTINCT performanceID) FROM Cultural_Centers_Performances WHERE culturalCenterID = (SELECT centerID FROM Cultural_Centers WHERE name = 'Art Center')",
            "SELECT COUNT(*) FROM Performances WHERE type = 'Dance_Performances'",
            "SELECT firstName, lastName FROM Employees WHERE employeeID IN (SELECT managerID FROM Managers)"
          ]
        },
        {
          "interpretation": "The response to the question can be any aggregate table value or joined parameter it assigns.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 7,
            "num_unique_queries": 7,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.name FROM Cultural_Centers AS T1 JOIN Cultural_Centers_Performances AS T2 ON T1.centerID = T2.culturalCenterID WHERE T2.performanceID = 1",
            "SELECT name FROM Cultural_Centers WHERE location = 'Chicago'",
            "SELECT SUM(CASE WHEN type = 'Dance_Performances' THEN 1 ELSE 0 END) FROM Performances",
            "SELECT T3.firstName, T3.lastName FROM Employees AS T3 JOIN Managers AS T4 ON T3.employeeID = T4.employeeID WHERE T4.managerID = 1",
            "SELECT COUNT(DISTINCT performanceID) FROM Cultural_Centers_Performances WHERE culturalCenterID = (SELECT centerID FROM Cultural_Centers WHERE name = 'Art Center')",
            "SELECT COUNT(*) FROM Performances WHERE type = 'Dance_Performances'",
            "SELECT firstName, lastName FROM Employees WHERE employeeID IN (SELECT managerID FROM Managers)"
          ]
        }
      ],
      "num_unique_execution_results": 10,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.09090909090909091,
        "one_found": true,
        "f1_score": 0.15384615384615385,
        "num_queries": 46,
        "num_unique_queries": 11,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Hospitality/scope_cultural_centers_performances/scope_cultural_centers_performances.sqlite",
      "db_dump": "CREATE TABLE Cultural_Centers(\n    centerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT);\nCREATE TABLE Cultural_Centers_Performances(\n    culturalCenterID INTEGER,\n    performanceID INTEGER,\n    FOREIGN KEY(culturalCenterID) REFERENCES Cultural_Centers(centerID),\n    FOREIGN KEY(performanceID) REFERENCES Performances(performanceID));\nCREATE TABLE Employees(\n    employeeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT);\nCREATE TABLE Managers(\n    managerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    employeeID INTEGER,\n    FOREIGN KEY(employeeID) REFERENCES Employees(employeeID));\nCREATE TABLE Performances(\n    performanceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT);\n\nINSERT INTO \"Cultural_Centers\" (centerID,name,location) VALUES (1,'Art Center','New York'),(2,'Theater House','Los Angeles'),(3,'Music Hall','Chicago'),(4,'Dance Studio','Miami'),(5,'Concert Venue','Houston');\nINSERT INTO \"Cultural_Centers_Performances\" (culturalCenterID,performanceID) VALUES (1,1),(1,2),(2,3),(3,4),(4,5),(2,1),(3,1),(4,1),(5,1);\nINSERT INTO \"Employees\" (employeeID,firstName,lastName) VALUES (1,'John','Smith'),(2,'Jane','Doe'),(3,'Robert','Brown'),(4,'Alice','Green'),(5,'Tom','White');\nINSERT INTO \"Managers\" (managerID,employeeID) VALUES (1,1),(2,2),(3,3),(4,4),(5,5);\nINSERT INTO \"Performances\" (performanceID,type) VALUES (1,'Dance_Performances'),(2,'Musical_Performances'),(3,'Drama_Performances'),(4,'Comedy_Shows'),(5,'Opera');\n",
      "question": "For every cultural center, show me the corresponding performance type.",
      "gold_queries": [
        "select cultural_centers.name , performances.type from Cultural_Centers_Performances join Performances on Cultural_Centers_Performances.performanceID = Performances.performanceID join Cultural_Centers on Cultural_Centers_Performances.culturalCenterID = Cultural_Centers.centerID"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "For every cultural center, show the first (alphabetically) performance type that has at least one associated performance.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT cc.name, MIN(p.type) AS first_performance_type\nFROM Cultural_Centers cc\nJOIN Cultural_Centers_Performances ccp ON cc.centerID = ccp.culturalCenterID\nJOIN Performances p ON ccp.performanceID = p.performanceID\nGROUP BY cc.name"
          ]
        },
        {
          "interpretation": "Show me the minimum and maximum performance types for each cultural center.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.name, MIN(T3.type) AS min_performance_type, MAX(T3.type) AS max_performance_type\nFROM Cultural_Centers T1\nJOIN Cultural_Centers_Performances T2 ON T1.centerID = T2.culturalCenterID\nJOIN Performances T3 ON T2.performanceID = T3.performanceID\nGROUP BY T1.name"
          ]
        },
        {
          "interpretation": "For every cultural center, display a list of performance types and the percentage of total performances for each type.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT cc.name, p.type, (COUNT(p.performanceID) * 100.0 / (SELECT COUNT(*) FROM Cultural_Centers_Performances)) AS percentage\nFROM Cultural_Centers cc\nJOIN Cultural_Centers_Performances ccp ON cc.centerID = ccp.culturalCenterID\nJOIN Performances p ON ccp.performanceID = p.performanceID\nGROUP BY cc.centerID, p.type"
          ]
        },
        {
          "interpretation": "For each cultural center, show me the performance types present in more than half of all performances.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT c.name, p.type\nFROM Cultural_Centers c\nJOIN Cultural_Centers_Performances ccp ON c.centerID = ccp.culturalCenterID\nJOIN Performances p ON ccp.performanceID = p.performanceID\nGROUP BY c.name, p.type\nHAVING COUNT(ccp.performanceID) > (SELECT COUNT(*) / 2 FROM Performances)"
          ]
        },
        {
          "interpretation": "For each cultural center, show me the average number of performances of each type.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT c.name, p.type, AVG(cnt) AS average_performances\nFROM Cultural_Centers c\nJOIN Cultural_Centers_Performances ccp ON c.centerID = ccp.culturalCenterID\nJOIN Performances p ON ccp.performanceID = p.performanceID\nJOIN (\n    SELECT culturalCenterID, performanceID, COUNT(*) AS cnt\n    FROM Cultural_Centers_Performances\n    GROUP BY culturalCenterID, performanceID\n) AS subquery ON ccp.culturalCenterID = subquery.culturalCenterID AND ccp.performanceID = subquery.performanceID\nGROUP BY c.name, p.type"
          ]
        },
        {
          "interpretation": "For every cultural center, list all unique performances associated with it and their types.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT CC.name, P.type\nFROM Cultural_Centers CC\nJOIN Cultural_Centers_Performances CCP ON CC.centerID = CCP.culturalCenterID\nJOIN Performances P ON CCP.performanceID = P.performanceID\nGROUP BY CC.name, P.type"
          ]
        },
        {
          "interpretation": "For every cultural center, list all performance types, and for each type, indicate if it has any associated performances.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT CC.name, P.type, CASE WHEN CCP.performanceID IS NOT NULL THEN 'Yes' ELSE 'No' END AS hasPerformance\nFROM Cultural_Centers CC\nJOIN Cultural_Centers_Performances CCP ON CC.centerID = CCP.culturalCenterID\nJOIN Performances P ON CCP.performanceID = P.performanceID"
          ]
        }
      ],
      "num_unique_execution_results": 7,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.14285714285714285,
        "one_found": true,
        "f1_score": 0.25,
        "num_queries": 7,
        "num_unique_queries": 7,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Hospitality/scope_cultural_centers_performances/scope_cultural_centers_performances.sqlite",
      "db_dump": "CREATE TABLE Cultural_Centers(\n    centerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT);\nCREATE TABLE Cultural_Centers_Performances(\n    culturalCenterID INTEGER,\n    performanceID INTEGER,\n    FOREIGN KEY(culturalCenterID) REFERENCES Cultural_Centers(centerID),\n    FOREIGN KEY(performanceID) REFERENCES Performances(performanceID));\nCREATE TABLE Employees(\n    employeeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT);\nCREATE TABLE Managers(\n    managerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    employeeID INTEGER,\n    FOREIGN KEY(employeeID) REFERENCES Employees(employeeID));\nCREATE TABLE Performances(\n    performanceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT);\n\nINSERT INTO \"Cultural_Centers\" (centerID,name,location) VALUES (1,'Art Center','New York'),(2,'Theater House','Los Angeles'),(3,'Music Hall','Chicago'),(4,'Dance Studio','Miami'),(5,'Concert Venue','Houston');\nINSERT INTO \"Cultural_Centers_Performances\" (culturalCenterID,performanceID) VALUES (1,1),(1,2),(2,3),(3,4),(4,5),(2,1),(3,1),(4,1),(5,1);\nINSERT INTO \"Employees\" (employeeID,firstName,lastName) VALUES (1,'John','Smith'),(2,'Jane','Doe'),(3,'Robert','Brown'),(4,'Alice','Green'),(5,'Tom','White');\nINSERT INTO \"Managers\" (managerID,employeeID) VALUES (1,1),(2,2),(3,3),(4,4),(5,5);\nINSERT INTO \"Performances\" (performanceID,type) VALUES (1,'Dance_Performances'),(2,'Musical_Performances'),(3,'Drama_Performances'),(4,'Comedy_Shows'),(5,'Opera');\n",
      "question": "What performance types are the same for all cultural centers?",
      "gold_queries": [
        "SELECT Performances.type  from Cultural_Centers_Performances join Performances on Cultural_Centers_Performances.performanceID = Performances.performanceID join Cultural_Centers on Cultural_Centers_Performances.culturalCenterID = Cultural_Centers.centerID   GROUP BY Cultural_Centers_Performances.performanceID HAVING COUNT(DISTINCT Cultural_Centers_Performances.culturalCenterID) = (SELECT COUNT(*) FROM  Cultural_Centers)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "The unique performance types exhibited by all cultural centers combined.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT type FROM Performances"
          ]
        },
        {
          "interpretation": "All performance types that are common across all cultural centers.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT type\nFROM Performances\nWHERE performanceID IN (\n    SELECT performanceID\n    FROM Cultural_Centers_Performances\n    GROUP BY performanceID\n    HAVING COUNT(DISTINCT culturalCenterID) = (SELECT COUNT(*) FROM Cultural_Centers)\n)"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "one_found": true,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Filmmaking/scope_film_festivals_categories/scope_film_festivals_categories.sqlite",
      "db_dump": "CREATE TABLE Categories(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    categoryName TEXT\n);\nCREATE TABLE Film_Festival_Categories(\n    festivalId INTEGER,\n    categoryId INTEGER,\n    FOREIGN KEY (festivalId) REFERENCES Film_Festivals(id),\n    FOREIGN KEY (categoryId) REFERENCES Categories(id)\n);\nCREATE TABLE Film_Festival_Entries(\n    festivalId INTEGER,\n    filmId INTEGER,\n    entryDate DATE,\n    FOREIGN KEY (festivalId) REFERENCES Film_Festivals(id),\n    FOREIGN KEY (filmId) REFERENCES Films(id)\n);\nCREATE TABLE Film_Festival_Winners(\n    festivalId INTEGER,\n    awardType TEXT,\n    winningFilmId INTEGER,\n    winYear INTEGER ,\n    FOREIGN KEY (festivalId) REFERENCES Film_Festivals(id),\n    FOREIGN KEY (winningFilmId) REFERENCES Films(id)\n);\nCREATE TABLE Film_Festivals(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Films(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    director TEXT,\n    yearReleased INTEGER \n);\n\nINSERT INTO \"Categories\" (id,categoryName) VALUES (1,'Short_Film'),(2,'Feature_Film'),(3,'Documentary'),(4,'Animation'),(5,'Experimental');\nINSERT INTO \"Film_Festival_Categories\" (festivalId,categoryId) VALUES (1,1),(1,2),(2,4),(2,3),(3,5),(2,1),(3,1),(4,1),(5,1);\nINSERT INTO \"Film_Festival_Entries\" (festivalId,filmId,entryDate) VALUES (1,1,'2021-07-01'),(1,2,'2021-08-01'),(2,3,'2022-06-01'),(2,4,'2022-07-01'),(3,5,'2023-05-01');\nINSERT INTO \"Film_Festival_Winners\" (festivalId,awardType,winningFilmId,winYear) VALUES (1,'Best Short Film',1,2021),(1,'Best Feature Film',2,2021),(2,'Best Animation',3,2022),(2,'Best Documentary',4,2022),(3,'Best Experimental',5,2023);\nINSERT INTO \"Film_Festivals\" (id,name,location) VALUES (1,'Festival A','Location X'),(2,'Festival B','Location Y'),(3,'Festival C','Location Z'),(4,'Festival D','Location W'),(5,'Festival E','Location V');\nINSERT INTO \"Films\" (id,title,director,yearReleased) VALUES (1,'Movie A','Director X',2020),(2,'Movie B','Director Y',2021),(3,'Movie C','Director Z',2019),(4,'Movie D','Director W',2022),(5,'Movie E','Director V',2023);\n",
      "question": "List all  film festivals and their categories.",
      "gold_queries": [
        "select film_festivals.name , categories.categoryname from Film_Festival_Categories join Categories on Film_Festival_Categories.categoryId = Categories.id join Film_Festivals on Film_Festival_Categories.festivalId = Film_Festivals.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Present a list of film festivals with their categories, represented as a two-column table (left: festival name/location, right: categories participating).",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FF.name || ' / ' || FF.location AS Festival, C.categoryName AS Categories\nFROM Film_Festivals FF\nJOIN Film_Festival_Categories FFC ON FF.id = FFC.festivalId\nJOIN Categories C ON FFC.categoryId = C.id\nORDER BY FF.name, C.categoryName"
          ]
        },
        {
          "interpretation": "List the distinct film festivals, their locations, and participating category IDs, sorted by festival name.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT FF.name, FF.location, FFC.categoryId FROM Film_Festivals FF JOIN Film_Festival_Categories FFC ON FF.id = FFC.festivalId ORDER BY FF.name"
          ]
        },
        {
          "interpretation": "Provide a comprehensive view of film festivals, including festival name/location, categories, and associated category IDs.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT FF.name, FF.location, C.categoryName, FFC.categoryId\nFROM Film_Festival_Categories FFC\nJOIN Categories C ON FFC.categoryId = C.id\nJOIN Film_Festivals FF ON FFC.festivalId = FF.id"
          ]
        },
        {
          "interpretation": "Display the list of distinct film festivals with their corresponding categories.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT DISTINCT FF.name, C.categoryName\nFROM Film_Festivals FF\nJOIN Film_Festival_Categories FFC ON FF.id = FFC.festivalId\nJOIN Categories C ON FFC.categoryId = C.id"
          ]
        },
        {
          "interpretation": "Show the names and locations of film festivals and a list of categories participating in each festival.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FF.name, FF.location, C.categoryName\nFROM Film_Festivals FF\nJOIN Film_Festival_Categories FFC ON FF.id = FFC.festivalId\nJOIN Categories C ON FFC.categoryId = C.id"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "one_found": true,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Filmmaking/scope_film_festivals_categories/scope_film_festivals_categories.sqlite",
      "db_dump": "CREATE TABLE Categories(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    categoryName TEXT\n);\nCREATE TABLE Film_Festival_Categories(\n    festivalId INTEGER,\n    categoryId INTEGER,\n    FOREIGN KEY (festivalId) REFERENCES Film_Festivals(id),\n    FOREIGN KEY (categoryId) REFERENCES Categories(id)\n);\nCREATE TABLE Film_Festival_Entries(\n    festivalId INTEGER,\n    filmId INTEGER,\n    entryDate DATE,\n    FOREIGN KEY (festivalId) REFERENCES Film_Festivals(id),\n    FOREIGN KEY (filmId) REFERENCES Films(id)\n);\nCREATE TABLE Film_Festival_Winners(\n    festivalId INTEGER,\n    awardType TEXT,\n    winningFilmId INTEGER,\n    winYear INTEGER ,\n    FOREIGN KEY (festivalId) REFERENCES Film_Festivals(id),\n    FOREIGN KEY (winningFilmId) REFERENCES Films(id)\n);\nCREATE TABLE Film_Festivals(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Films(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    director TEXT,\n    yearReleased INTEGER \n);\n\nINSERT INTO \"Categories\" (id,categoryName) VALUES (1,'Short_Film'),(2,'Feature_Film'),(3,'Documentary'),(4,'Animation'),(5,'Experimental');\nINSERT INTO \"Film_Festival_Categories\" (festivalId,categoryId) VALUES (1,1),(1,2),(2,4),(2,3),(3,5),(2,1),(3,1),(4,1),(5,1);\nINSERT INTO \"Film_Festival_Entries\" (festivalId,filmId,entryDate) VALUES (1,1,'2021-07-01'),(1,2,'2021-08-01'),(2,3,'2022-06-01'),(2,4,'2022-07-01'),(3,5,'2023-05-01');\nINSERT INTO \"Film_Festival_Winners\" (festivalId,awardType,winningFilmId,winYear) VALUES (1,'Best Short Film',1,2021),(1,'Best Feature Film',2,2021),(2,'Best Animation',3,2022),(2,'Best Documentary',4,2022),(3,'Best Experimental',5,2023);\nINSERT INTO \"Film_Festivals\" (id,name,location) VALUES (1,'Festival A','Location X'),(2,'Festival B','Location Y'),(3,'Festival C','Location Z'),(4,'Festival D','Location W'),(5,'Festival E','Location V');\nINSERT INTO \"Films\" (id,title,director,yearReleased) VALUES (1,'Movie A','Director X',2020),(2,'Movie B','Director Y',2021),(3,'Movie C','Director Z',2019),(4,'Movie D','Director W',2022),(5,'Movie E','Director V',2023);\n",
      "question": "What film categories does each film festival offer?",
      "gold_queries": [
        "SELECT Categories.categoryName  from Film_Festival_Categories join Categories on Film_Festival_Categories.categoryId = Categories.id join Film_Festivals on Film_Festival_Categories.festivalId = Film_Festivals.id   GROUP BY Film_Festival_Categories.categoryId HAVING COUNT(DISTINCT Film_Festival_Categories.festivalId) = (SELECT COUNT(*) FROM  Film_Festivals)",
        "select film_festivals.name , categories.categoryname from Film_Festival_Categories join Categories on Film_Festival_Categories.categoryId = Categories.id join Film_Festivals on Film_Festival_Categories.festivalId = Film_Festivals.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What categories, in terms of recorded category IDs in the database, each film festival has assigned or affiliated with it.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT festivalId, categoryId FROM Film_Festival_Categories"
          ]
        },
        {
          "interpretation": "What film categories, represented by category IDs on the table Film_Festival_Categories, each film festival offers their hosts, production teams or crew members for potential video productions, screenings or festivals.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT categoryId FROM Film_Festival_Categories"
          ]
        },
        {
          "interpretation": "Which film categories, from the perspective of festival administrators, are permitted or commonly accepted by each participating film festival.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FF.name, C.categoryName\nFROM Film_Festivals FF\nJOIN Film_Festival_Categories FFC ON FF.id = FFC.festivalId\nJOIN Categories C ON FFC.categoryId = C.id"
          ]
        },
        {
          "interpretation": "In which film categories, based on the categories of winning films, each film festival typically prefers to award its prizes or recognizes as an honor.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT F.name, C.categoryName\nFROM Film_Festival_Winners FFWin\nJOIN Films FWin ON FFWin.winningFilmId = FWin.id\nJOIN Film_Festival_Entries FFEnt ON FWin.id = FFEnt.filmId\nJOIN Film_Festival_Categories FFCat ON FFEnt.festivalId = FFCat.festivalId AND FWin.id = FFEnt.filmId\nJOIN Categories C ON FFCat.categoryId = C.id\nJOIN Film_Festivals F ON FFWin.festivalId = F.id\nGROUP BY F.name, C.categoryName"
          ]
        },
        {
          "interpretation": "In which film categories, from the user's perspective in terms of categorizing film data, each film festival entries/submissions are stored or referenced in the database.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FF.name, C.categoryName\nFROM Film_Festival_Entries FFE\nJOIN Film_Festivals FF ON FFE.festivalId = FF.id\nJOIN Film_Festival_Categories FFC ON FF.id = FFC.festivalId\nJOIN Categories C ON FFC.categoryId = C.id"
          ]
        },
        {
          "interpretation": "What film categories and their corresponding IDs do each film festival Entrants/Participants/Submitters have to choose from during submission.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT ffc.festivalId, c.id, c.categoryName\nFROM Film_Festival_Categories ffc\nJOIN Categories c ON ffc.categoryId = c.id"
          ]
        },
        {
          "interpretation": "In which unique categories, as represented in the Film_Festival_Categories table, the participating film festival entries are stored when entering Film_Festivals tables.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT T2.categoryName \nFROM Film_Festival_Categories AS T1 \nJOIN Categories AS T2 ON T1.categoryId = T2.id"
          ]
        }
      ],
      "num_unique_execution_results": 7,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.14285714285714285,
        "one_found": true,
        "f1_score": 0.22222222222222224,
        "num_queries": 7,
        "num_unique_queries": 7,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Filmmaking/scope_film_festivals_categories/scope_film_festivals_categories.sqlite",
      "db_dump": "CREATE TABLE Categories(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    categoryName TEXT\n);\nCREATE TABLE Film_Festival_Categories(\n    festivalId INTEGER,\n    categoryId INTEGER,\n    FOREIGN KEY (festivalId) REFERENCES Film_Festivals(id),\n    FOREIGN KEY (categoryId) REFERENCES Categories(id)\n);\nCREATE TABLE Film_Festival_Entries(\n    festivalId INTEGER,\n    filmId INTEGER,\n    entryDate DATE,\n    FOREIGN KEY (festivalId) REFERENCES Film_Festivals(id),\n    FOREIGN KEY (filmId) REFERENCES Films(id)\n);\nCREATE TABLE Film_Festival_Winners(\n    festivalId INTEGER,\n    awardType TEXT,\n    winningFilmId INTEGER,\n    winYear INTEGER ,\n    FOREIGN KEY (festivalId) REFERENCES Film_Festivals(id),\n    FOREIGN KEY (winningFilmId) REFERENCES Films(id)\n);\nCREATE TABLE Film_Festivals(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Films(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    director TEXT,\n    yearReleased INTEGER \n);\n\nINSERT INTO \"Categories\" (id,categoryName) VALUES (1,'Short_Film'),(2,'Feature_Film'),(3,'Documentary'),(4,'Animation'),(5,'Experimental');\nINSERT INTO \"Film_Festival_Categories\" (festivalId,categoryId) VALUES (1,1),(1,2),(2,4),(2,3),(3,5),(2,1),(3,1),(4,1),(5,1);\nINSERT INTO \"Film_Festival_Entries\" (festivalId,filmId,entryDate) VALUES (1,1,'2021-07-01'),(1,2,'2021-08-01'),(2,3,'2022-06-01'),(2,4,'2022-07-01'),(3,5,'2023-05-01');\nINSERT INTO \"Film_Festival_Winners\" (festivalId,awardType,winningFilmId,winYear) VALUES (1,'Best Short Film',1,2021),(1,'Best Feature Film',2,2021),(2,'Best Animation',3,2022),(2,'Best Documentary',4,2022),(3,'Best Experimental',5,2023);\nINSERT INTO \"Film_Festivals\" (id,name,location) VALUES (1,'Festival A','Location X'),(2,'Festival B','Location Y'),(3,'Festival C','Location Z'),(4,'Festival D','Location W'),(5,'Festival E','Location V');\nINSERT INTO \"Films\" (id,title,director,yearReleased) VALUES (1,'Movie A','Director X',2020),(2,'Movie B','Director Y',2021),(3,'Movie C','Director Z',2019),(4,'Movie D','Director W',2022),(5,'Movie E','Director V',2023);\n",
      "question": "Show me the categories that are the same for all film festivals.",
      "gold_queries": [
        "SELECT Categories.categoryName  from Film_Festival_Categories join Categories on Film_Festival_Categories.categoryId = Categories.id join Film_Festivals on Film_Festival_Categories.festivalId = Film_Festivals.id   GROUP BY Film_Festival_Categories.categoryId HAVING COUNT(DISTINCT Film_Festival_Categories.festivalId) = (SELECT COUNT(*) FROM  Film_Festivals)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Show the complete set of categories across all film festivals.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT C.categoryName\nFROM Categories C\nJOIN Film_Festival_Categories FFC ON C.id = FFC.categoryId"
          ]
        },
        {
          "interpretation": "Display categories that every festival is a part of.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT categoryName \nFROM Categories \nWHERE id IN (\n    SELECT categoryId \n    FROM Film_Festival_Categories \n    GROUP BY categoryId \n    HAVING COUNT(DISTINCT festivalId) = (SELECT COUNT(*) FROM Film_Festivals)\n)"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "one_found": true,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Healthcare/scope_health_apps_functions/scope_health_apps_functions.sqlite",
      "db_dump": "CREATE TABLE Functions(\n    functionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    value TEXT);\nCREATE TABLE Health_Apps(\n    appID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    description TEXT,\n    price REAL );\nCREATE TABLE Health_Apps_Functions(\n    healthAppID INTEGER,\n    functionID INTEGER,\n    FOREIGN KEY(healthAppID) REFERENCES Health_Apps(appID),\n    FOREIGN KEY(functionID) REFERENCES Functions(functionID),\n    PRIMARY KEY(healthAppID, functionID));\nCREATE TABLE Reviews(\n    reviewID INTEGER PRIMARY KEY AUTOINCREMENT,\n    rating INTEGER ,\n    comment TEXT,\n    appID INTEGER,\n    userID INTEGER,\n    FOREIGN KEY(appID) REFERENCES Health_Apps(appID),\n    FOREIGN KEY(userID) REFERENCES Users(userID));\nCREATE TABLE Users(\n    userID INTEGER PRIMARY KEY AUTOINCREMENT,\n    username TEXT,\n    email TEXT,\n    password TEXT);\n\nINSERT INTO \"Functions\" (functionID,value) VALUES (1,'Activity_Tracking'),(2,'Calorie_Counting'),(3,'Meditation'),(4,'Disease_Symptoms'),(5,'Blood_Pressure_Monitoring');\nINSERT INTO \"Health_Apps\" (appID,name,description,price) VALUES (1,'App1','This is App1',0.99),(2,'App2','This is App2',1.99),(3,'App3','This is App3',2.99),(4,'App4','This is App4',3.99),(5,'App5','This is App5',4.99);\nINSERT INTO \"Health_Apps_Functions\" (healthAppID,functionID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\nINSERT INTO \"Reviews\" (reviewID,rating,comment,appID,userID) VALUES (1,5,'Great app!',1,1),(2,4,'Good but could use some improvements.',2,2),(3,3,'Worked well overall.',3,3),(4,2,'Not what I expected.',4,4),(5,1,'Didn''t work as promised.',5,5);\nINSERT INTO \"Users\" (userID,username,email,password) VALUES (1,'User1','user1@example.com','password1'),(2,'User2','user2@example.com','password2'),(3,'User3','user3@example.com','password3'),(4,'User4','user4@example.com','password4'),(5,'User5','user5@example.com','password5');\n",
      "question": "What functions do all health apps have in common?",
      "gold_queries": [
        "SELECT Functions.value  from Health_Apps_Functions join Functions on Health_Apps_Functions.functionID = Functions.functionID join Health_Apps on Health_Apps_Functions.healthAppID = Health_Apps.appID   GROUP BY Health_Apps_Functions.functionID HAVING COUNT(DISTINCT Health_Apps_Functions.healthAppID) = (SELECT COUNT(*) FROM  Health_Apps)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What values from the Functions table do all rows in the Health_Apps_Functions table share.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Functions.value \nFROM Functions \nJOIN Health_Apps_Functions ON Functions.functionID = Health_Apps_Functions.functionID\nGROUP BY Functions.value \nHAVING COUNT(DISTINCT Health_Apps_Functions.healthAppID) = (SELECT COUNT(*) FROM Health_Apps)"
          ]
        },
        {
          "interpretation": "Function usage across the Health_Apps table as represented by the Health_Apps_Functions table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT f.value, COUNT(haf.healthAppID) AS usage_count\nFROM Functions f\nJOIN Health_Apps_Functions haf ON f.functionID = haf.functionID\nGROUP BY f.value"
          ]
        },
        {
          "interpretation": "Lists of functions (function IDs or names) that are present in multiple rows of the Health_Apps_Functions table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT functionID FROM Health_Apps_Functions GROUP BY functionID HAVING COUNT(*) > 1"
          ]
        },
        {
          "interpretation": "Function diversity per application in the Health_Apps table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT h.name, COUNT(DISTINCT f.functionID) AS function_diversity\nFROM Health_Apps h\nJOIN Health_Apps_Functions f ON h.appID = f.healthAppID\nGROUP BY h.name"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "one_found": true,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Healthcare/scope_health_apps_functions/scope_health_apps_functions.sqlite",
      "db_dump": "CREATE TABLE Functions(\n    functionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    value TEXT);\nCREATE TABLE Health_Apps(\n    appID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    description TEXT,\n    price REAL );\nCREATE TABLE Health_Apps_Functions(\n    healthAppID INTEGER,\n    functionID INTEGER,\n    FOREIGN KEY(healthAppID) REFERENCES Health_Apps(appID),\n    FOREIGN KEY(functionID) REFERENCES Functions(functionID),\n    PRIMARY KEY(healthAppID, functionID));\nCREATE TABLE Reviews(\n    reviewID INTEGER PRIMARY KEY AUTOINCREMENT,\n    rating INTEGER ,\n    comment TEXT,\n    appID INTEGER,\n    userID INTEGER,\n    FOREIGN KEY(appID) REFERENCES Health_Apps(appID),\n    FOREIGN KEY(userID) REFERENCES Users(userID));\nCREATE TABLE Users(\n    userID INTEGER PRIMARY KEY AUTOINCREMENT,\n    username TEXT,\n    email TEXT,\n    password TEXT);\n\nINSERT INTO \"Functions\" (functionID,value) VALUES (1,'Activity_Tracking'),(2,'Calorie_Counting'),(3,'Meditation'),(4,'Disease_Symptoms'),(5,'Blood_Pressure_Monitoring');\nINSERT INTO \"Health_Apps\" (appID,name,description,price) VALUES (1,'App1','This is App1',0.99),(2,'App2','This is App2',1.99),(3,'App3','This is App3',2.99),(4,'App4','This is App4',3.99),(5,'App5','This is App5',4.99);\nINSERT INTO \"Health_Apps_Functions\" (healthAppID,functionID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\nINSERT INTO \"Reviews\" (reviewID,rating,comment,appID,userID) VALUES (1,5,'Great app!',1,1),(2,4,'Good but could use some improvements.',2,2),(3,3,'Worked well overall.',3,3),(4,2,'Not what I expected.',4,4),(5,1,'Didn''t work as promised.',5,5);\nINSERT INTO \"Users\" (userID,username,email,password) VALUES (1,'User1','user1@example.com','password1'),(2,'User2','user2@example.com','password2'),(3,'User3','user3@example.com','password3'),(4,'User4','user4@example.com','password4'),(5,'User5','user5@example.com','password5');\n",
      "question": "Show me the functions of each health app.",
      "gold_queries": [
        "SELECT Functions.value  from Health_Apps_Functions join Functions on Health_Apps_Functions.functionID = Functions.functionID join Health_Apps on Health_Apps_Functions.healthAppID = Health_Apps.appID   GROUP BY Health_Apps_Functions.functionID HAVING COUNT(DISTINCT Health_Apps_Functions.healthAppID) = (SELECT COUNT(*) FROM  Health_Apps)",
        "select health_apps.name , functions.value from Health_Apps_Functions join Functions on Health_Apps_Functions.functionID = Functions.functionID join Health_Apps on Health_Apps_Functions.healthAppID = Health_Apps.appID"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Provide a matrix table that has health app IDs on one axis and function IDs on the other, with a count of occurrences for each combination.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    healthAppID,\n    functionID,\n    COUNT(*) AS occurrence_count\nFROM \n    Health_Apps_Functions\nGROUP BY \n    healthAppID, \n    functionID"
          ]
        },
        {
          "interpretation": "Select a subset of health apps and display their associated functions as a comma-separated list.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT H.name, GROUP_CONCAT(F.value, ', ') AS functions\nFROM Health_Apps H\nJOIN Health_Apps_Functions HAF ON H.appID = HAF.healthAppID\nJOIN Functions F ON HAF.functionID = F.functionID\nGROUP BY H.name"
          ]
        },
        {
          "interpretation": "Display the functions available in each health app on separate lines, with the health app name.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT H.name, F.value\nFROM Health_Apps_Functions HAF\nJOIN Health_Apps H ON HAF.healthAppID = H.appID\nJOIN Functions F ON HAF.functionID = F.functionID"
          ]
        },
        {
          "interpretation": "Retrieve the count of functions for each health app.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT healthAppID, COUNT(functionID) FROM Health_Apps_Functions GROUP BY healthAppID"
          ]
        },
        {
          "interpretation": "Show the full list of functions offered by all health apps, with each function appearing on a separate line.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT value FROM Functions"
          ]
        },
        {
          "interpretation": "Display the functions available in each health app as an array where each function name is followed by its functionID.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT H.name, GROUP_CONCAT(F.value || ':' || F.functionID, ', ') AS functions\nFROM Health_Apps H\nJOIN Health_Apps_Functions HAF ON H.appID = HAF.healthAppID\nJOIN Functions F ON HAF.functionID = F.functionID\nGROUP BY H.appID"
          ]
        },
        {
          "interpretation": "Retrieve the result as a pivot table, where each row represents a health app, and each column represents a function.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    ha.name AS Health_App,\n    MAX(CASE WHEN f.value = 'Activity_Tracking' THEN 'Yes' ELSE 'No' END) AS Activity_Tracking,\n    MAX(CASE WHEN f.value = 'Calorie_Counting' THEN 'Yes' ELSE 'No' END) AS Calorie_Counting,\n    MAX(CASE WHEN f.value = 'Meditation' THEN 'Yes' ELSE 'No' END) AS Meditation,\n    MAX(CASE WHEN f.value = 'Disease_Symptoms' THEN 'Yes' ELSE 'No' END) AS Disease_Symptoms,\n    MAX(CASE WHEN f.value = 'Blood_Pressure_Monitoring' THEN 'Yes' ELSE 'No' END) AS Blood_Pressure_Monitoring\nFROM \n    Health_Apps ha\nLEFT JOIN \n    Health_Apps_Functions haf ON ha.appID = haf.healthAppID\nLEFT JOIN \n    Functions f ON haf.functionID = f.functionID\nGROUP BY \n    ha.name"
          ]
        },
        {
          "interpretation": "Show the names and descriptions of health apps along with their associated functions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT HA.name, HA.description, F.value\nFROM Health_Apps HA\nJOIN Health_Apps_Functions HAF ON HA.appID = HAF.healthAppID\nJOIN Functions F ON HAF.functionID = F.functionID"
          ]
        },
        {
          "interpretation": "Provide a table showing the appID and the corresponding set of functionIDs for each health app.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT healthAppID, GROUP_CONCAT(functionID) AS functionIDs FROM Health_Apps_Functions GROUP BY healthAppID"
          ]
        }
      ],
      "num_unique_execution_results": 9,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.1111111111111111,
        "one_found": true,
        "f1_score": 0.1818181818181818,
        "num_queries": 9,
        "num_unique_queries": 9,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Healthcare/scope_health_apps_functions/scope_health_apps_functions.sqlite",
      "db_dump": "CREATE TABLE Functions(\n    functionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    value TEXT);\nCREATE TABLE Health_Apps(\n    appID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    description TEXT,\n    price REAL );\nCREATE TABLE Health_Apps_Functions(\n    healthAppID INTEGER,\n    functionID INTEGER,\n    FOREIGN KEY(healthAppID) REFERENCES Health_Apps(appID),\n    FOREIGN KEY(functionID) REFERENCES Functions(functionID),\n    PRIMARY KEY(healthAppID, functionID));\nCREATE TABLE Reviews(\n    reviewID INTEGER PRIMARY KEY AUTOINCREMENT,\n    rating INTEGER ,\n    comment TEXT,\n    appID INTEGER,\n    userID INTEGER,\n    FOREIGN KEY(appID) REFERENCES Health_Apps(appID),\n    FOREIGN KEY(userID) REFERENCES Users(userID));\nCREATE TABLE Users(\n    userID INTEGER PRIMARY KEY AUTOINCREMENT,\n    username TEXT,\n    email TEXT,\n    password TEXT);\n\nINSERT INTO \"Functions\" (functionID,value) VALUES (1,'Activity_Tracking'),(2,'Calorie_Counting'),(3,'Meditation'),(4,'Disease_Symptoms'),(5,'Blood_Pressure_Monitoring');\nINSERT INTO \"Health_Apps\" (appID,name,description,price) VALUES (1,'App1','This is App1',0.99),(2,'App2','This is App2',1.99),(3,'App3','This is App3',2.99),(4,'App4','This is App4',3.99),(5,'App5','This is App5',4.99);\nINSERT INTO \"Health_Apps_Functions\" (healthAppID,functionID) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,3);\nINSERT INTO \"Reviews\" (reviewID,rating,comment,appID,userID) VALUES (1,5,'Great app!',1,1),(2,4,'Good but could use some improvements.',2,2),(3,3,'Worked well overall.',3,3),(4,2,'Not what I expected.',4,4),(5,1,'Didn''t work as promised.',5,5);\nINSERT INTO \"Users\" (userID,username,email,password) VALUES (1,'User1','user1@example.com','password1'),(2,'User2','user2@example.com','password2'),(3,'User3','user3@example.com','password3'),(4,'User4','user4@example.com','password4'),(5,'User5','user5@example.com','password5');\n",
      "question": "For every health app, list the functions they have.",
      "gold_queries": [
        "select health_apps.name , functions.value from Health_Apps_Functions join Functions on Health_Apps_Functions.functionID = Functions.functionID join Health_Apps on Health_Apps_Functions.healthAppID = Health_Apps.appID"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Query for each record in the Health_Apps table, the value (name or alias) of the functions they are related to, as found in the Functions table.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Health_Apps.name, Functions.value\nFROM Health_Apps\nJOIN Health_Apps_Functions ON Health_Apps.appID = Health_Apps_Functions.healthAppID\nJOIN Functions ON Health_Apps_Functions.functionID = Functions.functionID"
          ]
        },
        {
          "interpretation": "Create a display of health apps with the association of each function and id, for clarity that it is an option when the same health app has other Relations that are actually stronger relations which would still have connections.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ha.appID, ha.name, hf.functionID, f.value\nFROM Health_Apps ha\nJOIN Health_Apps_Functions hf ON ha.appID = hf.healthAppID\nJOIN Functions f ON hf.functionID = f.functionID"
          ]
        },
        {
          "interpretation": "For every record in the Health_Apps table, show the values of the functionIDs corresponding to its associated functions in the Health_Apps_Functions table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT HA.appID, HAF.functionID\nFROM Health_Apps HA\nJOIN Health_Apps_Functions HAF ON HA.appID = HAF.healthAppID"
          ]
        },
        {
          "interpretation": "Show unique combinations of health app names and the sets of functions each provides, handling situations where an app doesn\u2019t offer any functions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT H.name, GROUP_CONCAT(F.value, ', ') AS functions\nFROM Health_Apps H\nLEFT JOIN Health_Apps_Functions HAF ON H.appID = HAF.healthAppID\nLEFT JOIN Functions F ON HAF.functionID = F.functionID\nGROUP BY H.name"
          ]
        },
        {
          "interpretation": "Display a list of tuples, where each tuple contains a health app's name and the set of its provided functions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT H.name, GROUP_CONCAT(F.value) AS functions\nFROM Health_Apps H\nJOIN Health_Apps_Functions HAF ON H.appID = HAF.healthAppID\nJOIN Functions F ON HAF.functionID = F.functionID\nGROUP BY H.name"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "one_found": true,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Filmmaking/scope_locations_managers_responsibilities/scope_locations_managers_responsibilities.sqlite",
      "db_dump": "CREATE TABLE Directed_Movies (\n    director_id INTEGER,\n    movie_id INTEGER,\n    FOREIGN KEY(director_id) REFERENCES Directors(id),\n    FOREIGN KEY(movie_id) REFERENCES Movie_Projects(id)\n);\nCREATE TABLE Directors (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    director_name TEXT,\n    birth_year INT\n);\nCREATE TABLE Film_Crews (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    crew_name TEXT,\n    role TEXT\n);\nCREATE TABLE Locations_Managers (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    contact_info TEXT\n);\nCREATE TABLE Locations_Managers_Responsibilities (\n    locations_manager_id INTEGER,\n    responsibility_id INTEGER,\n    FOREIGN KEY(locations_manager_id) REFERENCES Locations_Managers(id),\n    FOREIGN KEY(responsibility_id) REFERENCES Responsibilities(id)\n);\nCREATE TABLE Movie_Projects (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE,\n    budget REAL\n);\nCREATE TABLE Movies_Cast (\n    movie_id INTEGER,\n    actor_id INTEGER,\n    character_name TEXT,\n    FOREIGN KEY(movie_id) REFERENCES Movie_Projects(id),\n    FOREIGN KEY(actor_id) REFERENCES Actors(id)\n);\nCREATE TABLE Responsibilities (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    description TEXT\n);\n\nINSERT INTO \"Directed_Movies\" (director_id,movie_id) VALUES (1,1),(2,2),(3,3),(4,4),(5,5);\nINSERT INTO \"Directors\" (id,director_name,birth_year) VALUES (1,'Samuel L Jackson',1948),(2,'Denzel Washington',1954),(3,'Tom Hanks',1956),(4,'Robert De Niro',1943),(5,'Anthony Hopkins',1937);\nINSERT INTO \"Film_Crews\" (id,crew_name,role) VALUES (1,'Camera Team','Director of Photography'),(2,'Sound Team','Boom Operator'),(3,'Production Designers','Art Director'),(4,'Costume Department','Costumer'),(5,'Special Effects','Pyrotechnics Specialist');\nINSERT INTO \"Locations_Managers\" (id,name,contact_info) VALUES (1,'John Doe','+1234567890'),(2,'Jane Smith','+9876543210'),(3,'Alice Johnson','+1112223330'),(4,'Bob Brown','+4445556660'),(5,'Charlie Davis','+7778889990');\nINSERT INTO \"Locations_Managers_Responsibilities\" (locations_manager_id,responsibility_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,5);\nINSERT INTO \"Movie_Projects\" (id,title,release_date,budget) VALUES (1,'The Big Adventure','2022-12-01',10000000.0),(2,'Alien Invasion','2023-06-15',15000000.0),(3,'Love Story','2024-02-14',5000000.0),(4,'Action Thriller','2025-08-20',20000000.0),(5,'Comedy Drama','2026-04-01',7000000.0);\nINSERT INTO \"Movies_Cast\" (movie_id,actor_id,character_name) VALUES (1,1,'Hero'),(1,2,'Villain'),(2,3,'Lead Scientist'),(2,4,'Intergalactic Warrior'),(3,5,'Lonely Heart'),(3,6,'Business Tycoon'),(4,7,'Detective'),(4,8,'Gang Leader'),(5,9,'Small Town Girl'),(5,10,'Wise Old Man');\nINSERT INTO \"Responsibilities\" (id,description) VALUES (1,'Film Permit Acquisition'),(2,'Location Scouting'),(3,'Health & Safety Compliance'),(4,'Contract Negotiation'),(5,'Equipment Coordination');\n",
      "question": "Show me the managers and their responsibilities.",
      "gold_queries": [
        "select locations_managers.name , responsibilities.description from Locations_Managers_Responsibilities join Responsibilities on Locations_Managers_Responsibilities.responsibility_id = Responsibilities.id join Locations_Managers on Locations_Managers_Responsibilities.locations_manager_id = Locations_Managers.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Present a list of all Locations Managers along with their linked Responsibilities by examining the Locations_Managers and Locations_Managers_Responsibilities tables.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT LM.name, R.description \nFROM Locations_Managers LM \nJOIN Locations_Managers_Responsibilities LMR ON LM.id = LMR.locations_manager_id \nJOIN Responsibilities R ON LMR.responsibility_id = R.id"
          ]
        },
        {
          "interpretation": "List Locations Managers and the corresponding Responsibilities from the Locations_Managers and Responsibilities tables, including the role name 'Locations Manager' in the results.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT 'Locations Manager' AS role_name, Locations_Managers.name AS locations_manager_name, Responsibilities.description AS responsibility_description\nFROM Locations_Managers\nJOIN Locations_Managers_Responsibilities ON Locations_Managers.id = Locations_Managers_Responsibilities.locations_manager_id\nJOIN Responsibilities ON Locations_Managers_Responsibilities.responsibility_id = Responsibilities.id"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "one_found": true,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Filmmaking/scope_locations_managers_responsibilities/scope_locations_managers_responsibilities.sqlite",
      "db_dump": "CREATE TABLE Directed_Movies (\n    director_id INTEGER,\n    movie_id INTEGER,\n    FOREIGN KEY(director_id) REFERENCES Directors(id),\n    FOREIGN KEY(movie_id) REFERENCES Movie_Projects(id)\n);\nCREATE TABLE Directors (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    director_name TEXT,\n    birth_year INT\n);\nCREATE TABLE Film_Crews (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    crew_name TEXT,\n    role TEXT\n);\nCREATE TABLE Locations_Managers (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    contact_info TEXT\n);\nCREATE TABLE Locations_Managers_Responsibilities (\n    locations_manager_id INTEGER,\n    responsibility_id INTEGER,\n    FOREIGN KEY(locations_manager_id) REFERENCES Locations_Managers(id),\n    FOREIGN KEY(responsibility_id) REFERENCES Responsibilities(id)\n);\nCREATE TABLE Movie_Projects (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE,\n    budget REAL\n);\nCREATE TABLE Movies_Cast (\n    movie_id INTEGER,\n    actor_id INTEGER,\n    character_name TEXT,\n    FOREIGN KEY(movie_id) REFERENCES Movie_Projects(id),\n    FOREIGN KEY(actor_id) REFERENCES Actors(id)\n);\nCREATE TABLE Responsibilities (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    description TEXT\n);\n\nINSERT INTO \"Directed_Movies\" (director_id,movie_id) VALUES (1,1),(2,2),(3,3),(4,4),(5,5);\nINSERT INTO \"Directors\" (id,director_name,birth_year) VALUES (1,'Samuel L Jackson',1948),(2,'Denzel Washington',1954),(3,'Tom Hanks',1956),(4,'Robert De Niro',1943),(5,'Anthony Hopkins',1937);\nINSERT INTO \"Film_Crews\" (id,crew_name,role) VALUES (1,'Camera Team','Director of Photography'),(2,'Sound Team','Boom Operator'),(3,'Production Designers','Art Director'),(4,'Costume Department','Costumer'),(5,'Special Effects','Pyrotechnics Specialist');\nINSERT INTO \"Locations_Managers\" (id,name,contact_info) VALUES (1,'John Doe','+1234567890'),(2,'Jane Smith','+9876543210'),(3,'Alice Johnson','+1112223330'),(4,'Bob Brown','+4445556660'),(5,'Charlie Davis','+7778889990');\nINSERT INTO \"Locations_Managers_Responsibilities\" (locations_manager_id,responsibility_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,5);\nINSERT INTO \"Movie_Projects\" (id,title,release_date,budget) VALUES (1,'The Big Adventure','2022-12-01',10000000.0),(2,'Alien Invasion','2023-06-15',15000000.0),(3,'Love Story','2024-02-14',5000000.0),(4,'Action Thriller','2025-08-20',20000000.0),(5,'Comedy Drama','2026-04-01',7000000.0);\nINSERT INTO \"Movies_Cast\" (movie_id,actor_id,character_name) VALUES (1,1,'Hero'),(1,2,'Villain'),(2,3,'Lead Scientist'),(2,4,'Intergalactic Warrior'),(3,5,'Lonely Heart'),(3,6,'Business Tycoon'),(4,7,'Detective'),(4,8,'Gang Leader'),(5,9,'Small Town Girl'),(5,10,'Wise Old Man');\nINSERT INTO \"Responsibilities\" (id,description) VALUES (1,'Film Permit Acquisition'),(2,'Location Scouting'),(3,'Health & Safety Compliance'),(4,'Contract Negotiation'),(5,'Equipment Coordination');\n",
      "question": "What responsibilities are applicable to all managers at the same time?",
      "gold_queries": [
        "SELECT Responsibilities.description  from Locations_Managers_Responsibilities join Responsibilities on Locations_Managers_Responsibilities.responsibility_id = Responsibilities.id join Locations_Managers on Locations_Managers_Responsibilities.locations_manager_id = Locations_Managers.id   GROUP BY Locations_Managers_Responsibilities.responsibility_id HAVING COUNT(DISTINCT Locations_Managers_Responsibilities.locations_manager_id) = (SELECT COUNT(*) FROM  Locations_Managers)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Which responsibilities have been assigned to the most Locations Managers simultaneously?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT description\nFROM Responsibilities\nJOIN Locations_Managers_Responsibilities ON Responsibilities.id = Locations_Managers_Responsibilities.responsibility_id\nGROUP BY responsibility_id\nORDER BY COUNT(locations_manager_id) DESC\nLIMIT 1"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "one_found": true,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Filmmaking/scope_hair_stylists_styles/scope_hair_stylists_styles.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    birth_date DATE\n);\nCREATE TABLE Casting (\n    casting_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    actor_id INTEGER,\n    role_id INTEGER,\n    FOREIGN KEY(actor_id) REFERENCES Actors(actor_id),\n    FOREIGN KEY(role_id) REFERENCES Roles(role_id)\n);\nCREATE TABLE Film_Projects (\n    project_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE\n);\nCREATE TABLE Hair_Stylists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    experience INT\n);\nCREATE TABLE Hair_Stylists_Styles (\n    hairdresser_id INTEGER,\n    style_id INTEGER,\n    FOREIGN KEY(hairdresser_id) REFERENCES Hair_Stylists(id),\n    FOREIGN KEY(style_id) REFERENCES Styles(style_id)\n);\nCREATE TABLE Roles (\n    role_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    character_name TEXT,\n    film_project_id INTEGER,\n    FOREIGN KEY(film_project_id) REFERENCES Film_Projects(project_id)\n);\nCREATE TABLE Styles (\n    style_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    style_name TEXT,\n    description TEXT\n);\n\nINSERT INTO \"Actors\" (actor_id,first_name,last_name,birth_date) VALUES (1,'Leonardo','DiCaprio','1974-11-11'),(2,'Ellen','Page','1987-01-21'),(3,'Christian','Bale','1974-01-30'),(4,'Anne','Hathaway','1982-11-12'),(5,'Natalie','Portman','1981-06-09');\nINSERT INTO \"Casting\" (casting_id,actor_id,role_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Film_Projects\" (project_id,title,release_date) VALUES (1,'The Great Gatsby','2022-05-29'),(2,'Inception','2010-07-16'),(3,'Interstellar','2014-11-07'),(4,'La La Land','2016-12-02'),(5,'Black Swan','2010-12-01');\nINSERT INTO \"Hair_Stylists\" (id,name,experience) VALUES (1,'John Doe',10),(2,'Jane Smith',8),(3,'Emily Johnson',6),(4,'Michael Brown',3),(5,'Linda Davis',7);\nINSERT INTO \"Hair_Stylists_Styles\" (hairdresser_id,style_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\nINSERT INTO \"Roles\" (role_id,character_name,film_project_id) VALUES (1,'Gatsby',1),(2,'Cobb',2),(3,'Cooper',3),(4,'Sebastian',4),(5,'Arthur',5);\nINSERT INTO \"Styles\" (style_id,style_name,description) VALUES (1,'Period Hairstyle','A hairstyle from a specific historical period.'),(2,'Updo','A hairstyle where the hair is pulled up off the neck and secured at the top or back of the head.'),(3,'Bob','A short haircut that falls just below the chin.'),(4,'Pixie','A very short haircut with hair cut close to the scalp.'),(5,'Curl','A hairstyle characterized by curls or waves in the hair.');\n",
      "question": "For every hair stylist, give me the styles that they offer",
      "gold_queries": [
        "select hair_stylists.name , styles.style_name from Hair_Stylists_Styles join Styles on Hair_Stylists_Styles.style_id = Styles.style_id join Hair_Stylists on Hair_Stylists_Styles.hairdresser_id = Hair_Stylists.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Find all hair stylists that offer only one style.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.name FROM Hair_Stylists AS T1 JOIN Hair_Stylists_Styles AS T2 ON T1.id = T2.hairdresser_id GROUP BY T1.id HAVING COUNT(T2.style_id) = 1"
          ]
        },
        {
          "interpretation": "List each style and the number of hair stylists that offer it.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT s.style_name, COUNT(hs.hairdresser_id) AS number_of_hair_stylists\nFROM Styles s\nJOIN Hair_Stylists_Styles hs ON s.style_id = hs.style_id\nGROUP BY s.style_name"
          ]
        },
        {
          "interpretation": "Provide all styles and the names of hair stylists that do not offer them.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.style_name, H.name\nFROM Styles S\nCROSS JOIN Hair_Stylists H\nLEFT JOIN Hair_Stylists_Styles HSS ON S.style_id = HSS.style_id AND H.id = HSS.hairdresser_id\nWHERE HSS.style_id IS NULL"
          ]
        },
        {
          "interpretation": "Provide the list of hair stylists with the number of styles they offer and include only hair stylists that offer more than 2 styles.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.name, COUNT(T2.style_id) AS styles_count\nFROM Hair_Stylists AS T1\nJOIN Hair_Stylists_Styles AS T2 ON T1.id = T2.hairdresser_id\nGROUP BY T1.id\nHAVING styles_count > 2"
          ]
        },
        {
          "interpretation": "Find the hair stylist with the maximum number of unique styles offered.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name\nFROM Hair_Stylists\nWHERE id = (\n    SELECT hairdresser_id\n    FROM Hair_Stylists_Styles\n    GROUP BY hairdresser_id\n    ORDER BY COUNT(DISTINCT style_id) DESC\n    LIMIT 1\n)"
          ]
        },
        {
          "interpretation": "Show me how many styles each hair stylist offers.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT hs.name, COUNT(hss.style_id) as number_of_styles\nFROM Hair_Stylists hs\nJOIN Hair_Stylists_Styles hss ON hs.id = hss.hairdresser_id\nGROUP BY hs.name"
          ]
        },
        {
          "interpretation": "For every hair stylist, list the styles they do not have in common with John Doe.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT s.style_name\nFROM Styles s\nWHERE s.style_id NOT IN (\n    SELECT hs.style_id\n    FROM Hair_Stylists_Styles hs\n    WHERE hs.hairdresser_id = (\n        SELECT h.id\n        FROM Hair_Stylists h\n        WHERE h.name = 'John Doe'\n    )\n)"
          ]
        },
        {
          "interpretation": "List each hair stylist, count the number of styles they offer, and indicate if they offer a specific style (Period Hairstyle).",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT HS.name, COUNT(HSS.style_id) as style_count, CASE WHEN MAX(S.style_id = 1) THEN 'Yes' ELSE 'No' END as offers_period_hairstyle\nFROM Hair_Stylists HS\nLEFT JOIN Hair_Stylists_Styles HSS ON HS.id = HSS.hairdresser_id\nLEFT JOIN Styles S ON HSS.style_id = S.style_id\nGROUP BY HS.id"
          ]
        },
        {
          "interpretation": "Show the styles that are offered by at least two hair stylists.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.style_name \nFROM Styles AS T1 \nJOIN Hair_Stylists_Styles AS T2 \nON T1.style_id = T2.style_id \nGROUP BY T1.style_name \nHAVING COUNT(DISTINCT T2.hairdresser_id) >= 2"
          ]
        },
        {
          "interpretation": "For each hair stylist, show the styles they offer and if they offer a style that is not offered by any other hair stylist.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT hs.name, s.style_name,\nCASE \n    WHEN COUNT(hss2.hairdresser_id) = 1 THEN 'Yes'\n    ELSE 'No'\nEND AS is_unique\nFROM Hair_Stylists hs\nJOIN Hair_Stylists_Styles hss ON hs.id = hss.hairdresser_id\nJOIN Styles s ON hss.style_id = s.style_id\nLEFT JOIN Hair_Stylists_Styles hss2 ON s.style_id = hss2.style_id\nGROUP BY hs.name, s.style_name"
          ]
        },
        {
          "interpretation": "For each hair stylist, provide a list of styles and their frequencies.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT hs.name, s.style_name, COUNT(hss.style_id) as frequency\nFROM Hair_Stylists hs\nJOIN Hair_Stylists_Styles hss ON hs.id = hss.hairdresser_id\nJOIN Styles s ON hss.style_id = s.style_id\nGROUP BY hs.name, s.style_name"
          ]
        }
      ],
      "num_unique_execution_results": 11,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 11,
        "num_unique_queries": 11,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/scope/Filmmaking/scope_hair_stylists_styles/scope_hair_stylists_styles.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    birth_date DATE\n);\nCREATE TABLE Casting (\n    casting_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    actor_id INTEGER,\n    role_id INTEGER,\n    FOREIGN KEY(actor_id) REFERENCES Actors(actor_id),\n    FOREIGN KEY(role_id) REFERENCES Roles(role_id)\n);\nCREATE TABLE Film_Projects (\n    project_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE\n);\nCREATE TABLE Hair_Stylists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    experience INT\n);\nCREATE TABLE Hair_Stylists_Styles (\n    hairdresser_id INTEGER,\n    style_id INTEGER,\n    FOREIGN KEY(hairdresser_id) REFERENCES Hair_Stylists(id),\n    FOREIGN KEY(style_id) REFERENCES Styles(style_id)\n);\nCREATE TABLE Roles (\n    role_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    character_name TEXT,\n    film_project_id INTEGER,\n    FOREIGN KEY(film_project_id) REFERENCES Film_Projects(project_id)\n);\nCREATE TABLE Styles (\n    style_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    style_name TEXT,\n    description TEXT\n);\n\nINSERT INTO \"Actors\" (actor_id,first_name,last_name,birth_date) VALUES (1,'Leonardo','DiCaprio','1974-11-11'),(2,'Ellen','Page','1987-01-21'),(3,'Christian','Bale','1974-01-30'),(4,'Anne','Hathaway','1982-11-12'),(5,'Natalie','Portman','1981-06-09');\nINSERT INTO \"Casting\" (casting_id,actor_id,role_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Film_Projects\" (project_id,title,release_date) VALUES (1,'The Great Gatsby','2022-05-29'),(2,'Inception','2010-07-16'),(3,'Interstellar','2014-11-07'),(4,'La La Land','2016-12-02'),(5,'Black Swan','2010-12-01');\nINSERT INTO \"Hair_Stylists\" (id,name,experience) VALUES (1,'John Doe',10),(2,'Jane Smith',8),(3,'Emily Johnson',6),(4,'Michael Brown',3),(5,'Linda Davis',7);\nINSERT INTO \"Hair_Stylists_Styles\" (hairdresser_id,style_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\nINSERT INTO \"Roles\" (role_id,character_name,film_project_id) VALUES (1,'Gatsby',1),(2,'Cobb',2),(3,'Cooper',3),(4,'Sebastian',4),(5,'Arthur',5);\nINSERT INTO \"Styles\" (style_id,style_name,description) VALUES (1,'Period Hairstyle','A hairstyle from a specific historical period.'),(2,'Updo','A hairstyle where the hair is pulled up off the neck and secured at the top or back of the head.'),(3,'Bob','A short haircut that falls just below the chin.'),(4,'Pixie','A very short haircut with hair cut close to the scalp.'),(5,'Curl','A hairstyle characterized by curls or waves in the hair.');\n",
      "question": "For each hair stylist, list information on the styles offered (including their descriptions).",
      "gold_queries": [
        "select hair_stylists.name , styles.style_name , styles.description from Hair_Stylists_Styles join Styles on Hair_Stylists_Styles.style_id = Styles.style_id join Hair_Stylists on Hair_Stylists_Styles.hairdresser_id = Hair_Stylists.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Display the hair stylists who offer the 'Updo' style, along with its description.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT HS.name, S.description\nFROM Hair_Stylists HS\nJOIN Hair_Stylists_Styles HSS ON HS.id = HSS.hairdresser_id\nJOIN Styles S ON HSS.style_id = S.style_id\nWHERE S.style_name = 'Updo'"
          ]
        },
        {
          "interpretation": "Display each hair stylist and the styles they offer, maintaining the original order in which they were defined in the 'Styles' table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT HS.name, S.style_name\nFROM Hair_Stylists_Styles HSS\nJOIN Hair_Stylists HS ON HSS.hairdresser_id = HS.id\nJOIN Styles S ON HSS.style_id = S.style_id\nORDER BY S.style_id"
          ]
        },
        {
          "interpretation": "List all unique styles offered by hair stylists along with their descriptions and the names of the hair stylists.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT DISTINCT S.style_name, S.description, HS.name\nFROM Styles S\nJOIN Hair_Stylists_Styles HSS ON S.style_id = HSS.style_id\nJOIN Hair_Stylists HS ON HSS.hairdresser_id = HS.id"
          ]
        },
        {
          "interpretation": "Show the hair stylists who also offer the 'Pixie' style, along with the style description.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT HS.name, S.description\nFROM Hair_Stylists AS HS\nJOIN Hair_Stylists_Styles AS HSS ON HS.id = HSS.hairdresser_id\nJOIN Styles AS S ON HSS.style_id = S.style_id\nWHERE S.style_name = 'Pixie'"
          ]
        },
        {
          "interpretation": "Show each hair stylist who offers the 'Period Hairstyle' style along with the description of the style.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.name, T2.description \nFROM Hair_Stylists AS T1 \nJOIN Hair_Stylists_Styles AS T3 ON T1.id = T3.hairdresser_id \nJOIN Styles AS T2 ON T3.style_id = T2.style_id \nWHERE T2.style_name = 'Period Hairstyle'"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "one_found": true,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Filmmaking/scope_hair_stylists_styles/scope_hair_stylists_styles.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    birth_date DATE\n);\nCREATE TABLE Casting (\n    casting_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    actor_id INTEGER,\n    role_id INTEGER,\n    FOREIGN KEY(actor_id) REFERENCES Actors(actor_id),\n    FOREIGN KEY(role_id) REFERENCES Roles(role_id)\n);\nCREATE TABLE Film_Projects (\n    project_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE\n);\nCREATE TABLE Hair_Stylists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    experience INT\n);\nCREATE TABLE Hair_Stylists_Styles (\n    hairdresser_id INTEGER,\n    style_id INTEGER,\n    FOREIGN KEY(hairdresser_id) REFERENCES Hair_Stylists(id),\n    FOREIGN KEY(style_id) REFERENCES Styles(style_id)\n);\nCREATE TABLE Roles (\n    role_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    character_name TEXT,\n    film_project_id INTEGER,\n    FOREIGN KEY(film_project_id) REFERENCES Film_Projects(project_id)\n);\nCREATE TABLE Styles (\n    style_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    style_name TEXT,\n    description TEXT\n);\n\nINSERT INTO \"Actors\" (actor_id,first_name,last_name,birth_date) VALUES (1,'Leonardo','DiCaprio','1974-11-11'),(2,'Ellen','Page','1987-01-21'),(3,'Christian','Bale','1974-01-30'),(4,'Anne','Hathaway','1982-11-12'),(5,'Natalie','Portman','1981-06-09');\nINSERT INTO \"Casting\" (casting_id,actor_id,role_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Film_Projects\" (project_id,title,release_date) VALUES (1,'The Great Gatsby','2022-05-29'),(2,'Inception','2010-07-16'),(3,'Interstellar','2014-11-07'),(4,'La La Land','2016-12-02'),(5,'Black Swan','2010-12-01');\nINSERT INTO \"Hair_Stylists\" (id,name,experience) VALUES (1,'John Doe',10),(2,'Jane Smith',8),(3,'Emily Johnson',6),(4,'Michael Brown',3),(5,'Linda Davis',7);\nINSERT INTO \"Hair_Stylists_Styles\" (hairdresser_id,style_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\nINSERT INTO \"Roles\" (role_id,character_name,film_project_id) VALUES (1,'Gatsby',1),(2,'Cobb',2),(3,'Cooper',3),(4,'Sebastian',4),(5,'Arthur',5);\nINSERT INTO \"Styles\" (style_id,style_name,description) VALUES (1,'Period Hairstyle','A hairstyle from a specific historical period.'),(2,'Updo','A hairstyle where the hair is pulled up off the neck and secured at the top or back of the head.'),(3,'Bob','A short haircut that falls just below the chin.'),(4,'Pixie','A very short haircut with hair cut close to the scalp.'),(5,'Curl','A hairstyle characterized by curls or waves in the hair.');\n",
      "question": "What styles are available at every hair stylist?",
      "gold_queries": [
        "SELECT Styles.style_name  from Hair_Stylists_Styles join Styles on Hair_Stylists_Styles.style_id = Styles.style_id join Hair_Stylists on Hair_Stylists_Styles.hairdresser_id = Hair_Stylists.id   GROUP BY Hair_Stylists_Styles.style_id HAVING COUNT(DISTINCT Hair_Stylists_Styles.hairdresser_id) = (SELECT COUNT(*) FROM  Hair_Stylists)",
        "select hair_stylists.name , styles.style_name from Hair_Stylists_Styles join Styles on Hair_Stylists_Styles.style_id = Styles.style_id join Hair_Stylists on Hair_Stylists_Styles.hairdresser_id = Hair_Stylists.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Every hair stylist can do what type of style?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT s.style_name\nFROM Hair_Stylists_Styles hss\nJOIN Styles s ON hss.style_id = s.style_id"
          ]
        },
        {
          "interpretation": "For each hair stylist, list their available styles.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT H.name, S.style_name\nFROM Hair_Stylists AS H\nJOIN Hair_Stylists_Styles AS HSS ON H.id = HSS.hairdresser_id\nJOIN Styles AS S ON HSS.style_id = S.style_id"
          ]
        },
        {
          "interpretation": "What styles have all hair stylists been trained to perform?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT s.style_name\nFROM Styles s\nWHERE NOT EXISTS (\n    SELECT 1\n    FROM Hair_Stylists hs\n    LEFT JOIN Hair_Stylists_Styles hss ON hs.id = hss.hairdresser_id\n    WHERE hss.style_id <> s.style_id OR hss.style_id IS NULL\n)"
          ]
        },
        {
          "interpretation": "List every style that is offered by every hair stylist.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT style_name FROM Styles WHERE style_id IN (SELECT style_id FROM Hair_Stylists_Styles GROUP BY style_id HAVING COUNT(DISTINCT hairdresser_id) = (SELECT COUNT(*) FROM Hair_Stylists))"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "one_found": true,
        "f1_score": 0.6666666666666666,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/scope/Filmmaking/scope_hair_stylists_styles/scope_hair_stylists_styles.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    birth_date DATE\n);\nCREATE TABLE Casting (\n    casting_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    actor_id INTEGER,\n    role_id INTEGER,\n    FOREIGN KEY(actor_id) REFERENCES Actors(actor_id),\n    FOREIGN KEY(role_id) REFERENCES Roles(role_id)\n);\nCREATE TABLE Film_Projects (\n    project_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE\n);\nCREATE TABLE Hair_Stylists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    experience INT\n);\nCREATE TABLE Hair_Stylists_Styles (\n    hairdresser_id INTEGER,\n    style_id INTEGER,\n    FOREIGN KEY(hairdresser_id) REFERENCES Hair_Stylists(id),\n    FOREIGN KEY(style_id) REFERENCES Styles(style_id)\n);\nCREATE TABLE Roles (\n    role_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    character_name TEXT,\n    film_project_id INTEGER,\n    FOREIGN KEY(film_project_id) REFERENCES Film_Projects(project_id)\n);\nCREATE TABLE Styles (\n    style_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    style_name TEXT,\n    description TEXT\n);\n\nINSERT INTO \"Actors\" (actor_id,first_name,last_name,birth_date) VALUES (1,'Leonardo','DiCaprio','1974-11-11'),(2,'Ellen','Page','1987-01-21'),(3,'Christian','Bale','1974-01-30'),(4,'Anne','Hathaway','1982-11-12'),(5,'Natalie','Portman','1981-06-09');\nINSERT INTO \"Casting\" (casting_id,actor_id,role_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Film_Projects\" (project_id,title,release_date) VALUES (1,'The Great Gatsby','2022-05-29'),(2,'Inception','2010-07-16'),(3,'Interstellar','2014-11-07'),(4,'La La Land','2016-12-02'),(5,'Black Swan','2010-12-01');\nINSERT INTO \"Hair_Stylists\" (id,name,experience) VALUES (1,'John Doe',10),(2,'Jane Smith',8),(3,'Emily Johnson',6),(4,'Michael Brown',3),(5,'Linda Davis',7);\nINSERT INTO \"Hair_Stylists_Styles\" (hairdresser_id,style_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\nINSERT INTO \"Roles\" (role_id,character_name,film_project_id) VALUES (1,'Gatsby',1),(2,'Cobb',2),(3,'Cooper',3),(4,'Sebastian',4),(5,'Arthur',5);\nINSERT INTO \"Styles\" (style_id,style_name,description) VALUES (1,'Period Hairstyle','A hairstyle from a specific historical period.'),(2,'Updo','A hairstyle where the hair is pulled up off the neck and secured at the top or back of the head.'),(3,'Bob','A short haircut that falls just below the chin.'),(4,'Pixie','A very short haircut with hair cut close to the scalp.'),(5,'Curl','A hairstyle characterized by curls or waves in the hair.');\n",
      "question": "What is the style description that is in common for all hair stylists?",
      "gold_queries": [
        "SELECT Styles.description  from Hair_Stylists_Styles join Styles on Hair_Stylists_Styles.style_id = Styles.style_id join Hair_Stylists on Hair_Stylists_Styles.hairdresser_id = Hair_Stylists.id   GROUP BY Hair_Stylists_Styles.style_id HAVING COUNT(DISTINCT Hair_Stylists_Styles.hairdresser_id) = (SELECT COUNT(*) FROM  Hair_Stylists)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What style description is in common usage among all hair stylists listed in the Hair_Stylists table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT style_name FROM Styles WHERE style_id IN (SELECT style_id FROM Hair_Stylists_Styles GROUP BY style_id HAVING COUNT(DISTINCT hairdresser_id) = (SELECT COUNT(*) FROM Hair_Stylists))"
          ]
        },
        {
          "interpretation": "What is the style description that all hair stylists in the Hair_Stylists table have a common interest in.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT style_name, description \nFROM Styles \nWHERE style_id IN (\n    SELECT style_id \n    FROM Hair_Stylists_Styles \n    GROUP BY style_id \n    HAVING COUNT(DISTINCT hairdresser_id) = (SELECT COUNT(*) FROM Hair_Stylists)\n)"
          ]
        },
        {
          "interpretation": "What style description is common to 2 or more hair stylists in the Hair_Stylists table.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT description\nFROM Styles\nWHERE style_id IN (\n    SELECT style_id\n    FROM Hair_Stylists_Styles\n    GROUP BY style_id\n    HAVING COUNT(DISTINCT hairdresser_id) >= 2\n)"
          ]
        },
        {
          "interpretation": "What is the style description that is for all styles that any hair stylist in the Hair_Stylists table styles.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT description \nFROM Styles \nWHERE style_id IN (SELECT style_id FROM Hair_Stylists_Styles)"
          ]
        },
        {
          "interpretation": "What style description can be found among all hair stylists in the Hair_Stylists table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT style_name, description FROM Styles"
          ]
        },
        {
          "interpretation": "Also, interpretations 10 and 11 imply there's an \"interest\" information that's not present in the database context. These two should be ignored for analysis.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 10,
            "num_unique_queries": 10,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT character_name, film_project_id\nFROM Roles",
            "SELECT name\nFROM Hair_Stylists",
            "SELECT title, release_date\nFROM Film_Projects\nORDER BY release_date DESC",
            "SELECT first_name, last_name\nFROM Actors",
            "SELECT style_name, description\nFROM Styles",
            "SELECT title\nFROM Film_Projects",
            "SELECT first_name, last_name, birth_date\nFROM Actors",
            "SELECT character_name\nFROM Roles",
            "SELECT name, experience\nFROM Hair_Stylists",
            "SELECT style_name\nFROM Styles"
          ]
        },
        {
          "interpretation": "Also, interpretations 10 and 11 imply there's an \"interest\" information that's not present in the database context. These two should be ignored for analysis.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 10,
            "num_unique_queries": 10,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT character_name, film_project_id\nFROM Roles",
            "SELECT name\nFROM Hair_Stylists",
            "SELECT title, release_date\nFROM Film_Projects\nORDER BY release_date DESC",
            "SELECT first_name, last_name\nFROM Actors",
            "SELECT style_name, description\nFROM Styles",
            "SELECT title\nFROM Film_Projects",
            "SELECT first_name, last_name, birth_date\nFROM Actors",
            "SELECT character_name\nFROM Roles",
            "SELECT name, experience\nFROM Hair_Stylists",
            "SELECT style_name\nFROM Styles"
          ]
        },
        {
          "interpretation": "Also, interpretations 10 and 11 imply there's an \"interest\" information that's not present in the database context. These two should be ignored for analysis.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 10,
            "num_unique_queries": 10,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT character_name, film_project_id\nFROM Roles",
            "SELECT name\nFROM Hair_Stylists",
            "SELECT title, release_date\nFROM Film_Projects\nORDER BY release_date DESC",
            "SELECT first_name, last_name\nFROM Actors",
            "SELECT style_name, description\nFROM Styles",
            "SELECT title\nFROM Film_Projects",
            "SELECT first_name, last_name, birth_date\nFROM Actors",
            "SELECT character_name\nFROM Roles",
            "SELECT name, experience\nFROM Hair_Stylists",
            "SELECT style_name\nFROM Styles"
          ]
        },
        {
          "interpretation": "Also, interpretations 10 and 11 imply there's an \"interest\" information that's not present in the database context. These two should be ignored for analysis.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 10,
            "num_unique_queries": 10,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT character_name, film_project_id\nFROM Roles",
            "SELECT name\nFROM Hair_Stylists",
            "SELECT title, release_date\nFROM Film_Projects\nORDER BY release_date DESC",
            "SELECT first_name, last_name\nFROM Actors",
            "SELECT style_name, description\nFROM Styles",
            "SELECT title\nFROM Film_Projects",
            "SELECT first_name, last_name, birth_date\nFROM Actors",
            "SELECT character_name\nFROM Roles",
            "SELECT name, experience\nFROM Hair_Stylists",
            "SELECT style_name\nFROM Styles"
          ]
        },
        {
          "interpretation": "Also, interpretations 10 and 11 imply there's an \"interest\" information that's not present in the database context. These two should be ignored for analysis.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 10,
            "num_unique_queries": 10,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT character_name, film_project_id\nFROM Roles",
            "SELECT name\nFROM Hair_Stylists",
            "SELECT title, release_date\nFROM Film_Projects\nORDER BY release_date DESC",
            "SELECT first_name, last_name\nFROM Actors",
            "SELECT style_name, description\nFROM Styles",
            "SELECT title\nFROM Film_Projects",
            "SELECT first_name, last_name, birth_date\nFROM Actors",
            "SELECT character_name\nFROM Roles",
            "SELECT name, experience\nFROM Hair_Stylists",
            "SELECT style_name\nFROM Styles"
          ]
        },
        {
          "interpretation": "Also, interpretations 10 and 11 imply there's an \"interest\" information that's not present in the database context. These two should be ignored for analysis.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 10,
            "num_unique_queries": 10,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT character_name, film_project_id\nFROM Roles",
            "SELECT name\nFROM Hair_Stylists",
            "SELECT title, release_date\nFROM Film_Projects\nORDER BY release_date DESC",
            "SELECT first_name, last_name\nFROM Actors",
            "SELECT style_name, description\nFROM Styles",
            "SELECT title\nFROM Film_Projects",
            "SELECT first_name, last_name, birth_date\nFROM Actors",
            "SELECT character_name\nFROM Roles",
            "SELECT name, experience\nFROM Hair_Stylists",
            "SELECT style_name\nFROM Styles"
          ]
        },
        {
          "interpretation": "Also, interpretations 10 and 11 imply there's an \"interest\" information that's not present in the database context. These two should be ignored for analysis.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 10,
            "num_unique_queries": 10,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT character_name, film_project_id\nFROM Roles",
            "SELECT name\nFROM Hair_Stylists",
            "SELECT title, release_date\nFROM Film_Projects\nORDER BY release_date DESC",
            "SELECT first_name, last_name\nFROM Actors",
            "SELECT style_name, description\nFROM Styles",
            "SELECT title\nFROM Film_Projects",
            "SELECT first_name, last_name, birth_date\nFROM Actors",
            "SELECT character_name\nFROM Roles",
            "SELECT name, experience\nFROM Hair_Stylists",
            "SELECT style_name\nFROM Styles"
          ]
        },
        {
          "interpretation": "Also, interpretations 10 and 11 imply there's an \"interest\" information that's not present in the database context. These two should be ignored for analysis.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 10,
            "num_unique_queries": 10,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT character_name, film_project_id\nFROM Roles",
            "SELECT name\nFROM Hair_Stylists",
            "SELECT title, release_date\nFROM Film_Projects\nORDER BY release_date DESC",
            "SELECT first_name, last_name\nFROM Actors",
            "SELECT style_name, description\nFROM Styles",
            "SELECT title\nFROM Film_Projects",
            "SELECT first_name, last_name, birth_date\nFROM Actors",
            "SELECT character_name\nFROM Roles",
            "SELECT name, experience\nFROM Hair_Stylists",
            "SELECT style_name\nFROM Styles"
          ]
        },
        {
          "interpretation": "Also, interpretations 10 and 11 imply there's an \"interest\" information that's not present in the database context. These two should be ignored for analysis.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 10,
            "num_unique_queries": 10,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT character_name, film_project_id\nFROM Roles",
            "SELECT name\nFROM Hair_Stylists",
            "SELECT title, release_date\nFROM Film_Projects\nORDER BY release_date DESC",
            "SELECT first_name, last_name\nFROM Actors",
            "SELECT style_name, description\nFROM Styles",
            "SELECT title\nFROM Film_Projects",
            "SELECT first_name, last_name, birth_date\nFROM Actors",
            "SELECT character_name\nFROM Roles",
            "SELECT name, experience\nFROM Hair_Stylists",
            "SELECT style_name\nFROM Styles"
          ]
        }
      ],
      "num_unique_execution_results": 14,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.06666666666666667,
        "one_found": true,
        "f1_score": 0.125,
        "num_queries": 95,
        "num_unique_queries": 15,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Filmmaking/scope_hair_stylists_styles/scope_hair_stylists_styles.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    birth_date DATE\n);\nCREATE TABLE Casting (\n    casting_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    actor_id INTEGER,\n    role_id INTEGER,\n    FOREIGN KEY(actor_id) REFERENCES Actors(actor_id),\n    FOREIGN KEY(role_id) REFERENCES Roles(role_id)\n);\nCREATE TABLE Film_Projects (\n    project_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE\n);\nCREATE TABLE Hair_Stylists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    experience INT\n);\nCREATE TABLE Hair_Stylists_Styles (\n    hairdresser_id INTEGER,\n    style_id INTEGER,\n    FOREIGN KEY(hairdresser_id) REFERENCES Hair_Stylists(id),\n    FOREIGN KEY(style_id) REFERENCES Styles(style_id)\n);\nCREATE TABLE Roles (\n    role_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    character_name TEXT,\n    film_project_id INTEGER,\n    FOREIGN KEY(film_project_id) REFERENCES Film_Projects(project_id)\n);\nCREATE TABLE Styles (\n    style_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    style_name TEXT,\n    description TEXT\n);\n\nINSERT INTO \"Actors\" (actor_id,first_name,last_name,birth_date) VALUES (1,'Leonardo','DiCaprio','1974-11-11'),(2,'Ellen','Page','1987-01-21'),(3,'Christian','Bale','1974-01-30'),(4,'Anne','Hathaway','1982-11-12'),(5,'Natalie','Portman','1981-06-09');\nINSERT INTO \"Casting\" (casting_id,actor_id,role_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Film_Projects\" (project_id,title,release_date) VALUES (1,'The Great Gatsby','2022-05-29'),(2,'Inception','2010-07-16'),(3,'Interstellar','2014-11-07'),(4,'La La Land','2016-12-02'),(5,'Black Swan','2010-12-01');\nINSERT INTO \"Hair_Stylists\" (id,name,experience) VALUES (1,'John Doe',10),(2,'Jane Smith',8),(3,'Emily Johnson',6),(4,'Michael Brown',3),(5,'Linda Davis',7);\nINSERT INTO \"Hair_Stylists_Styles\" (hairdresser_id,style_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\nINSERT INTO \"Roles\" (role_id,character_name,film_project_id) VALUES (1,'Gatsby',1),(2,'Cobb',2),(3,'Cooper',3),(4,'Sebastian',4),(5,'Arthur',5);\nINSERT INTO \"Styles\" (style_id,style_name,description) VALUES (1,'Period Hairstyle','A hairstyle from a specific historical period.'),(2,'Updo','A hairstyle where the hair is pulled up off the neck and secured at the top or back of the head.'),(3,'Bob','A short haircut that falls just below the chin.'),(4,'Pixie','A very short haircut with hair cut close to the scalp.'),(5,'Curl','A hairstyle characterized by curls or waves in the hair.');\n",
      "question": "Tell me about the styles every hair stylist offers (with their descriptions).",
      "gold_queries": [
        "SELECT Styles.style_name, Styles.description  from Hair_Stylists_Styles join Styles on Hair_Stylists_Styles.style_id = Styles.style_id join Hair_Stylists on Hair_Stylists_Styles.hairdresser_id = Hair_Stylists.id   GROUP BY Hair_Stylists_Styles.style_id HAVING COUNT(DISTINCT Hair_Stylists_Styles.hairdresser_id) = (SELECT COUNT(*) FROM  Hair_Stylists)",
        "select hair_stylists.name , styles.style_name , styles.description from Hair_Stylists_Styles join Styles on Hair_Stylists_Styles.style_id = Styles.style_id join Hair_Stylists on Hair_Stylists_Styles.hairdresser_id = Hair_Stylists.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Join the Hair_Stylists and Styles tables through the Hair_Stylists_Styles table to get the name of each hair stylist.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT HS.name \nFROM Hair_Stylists HS \nJOIN Hair_Stylists_Styles HSS ON HS.id = HSS.hairdresser_id \nJOIN Styles S ON HSS.style_id = S.style_id"
          ]
        },
        {
          "interpretation": "For each style, retrieve the number of hair stylists who offer that style and the average number of years of experience of those hair stylists.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.style_name, COUNT(DISTINCT H.hairdresser_id) AS number_of_hair_stylists, AVG(ST.experience) AS average_experience\nFROM Styles S\nLEFT JOIN Hair_Stylists_Styles H ON S.style_id = H.style_id\nLEFT JOIN Hair_Stylists ST ON H.hairdresser_id = ST.id\nGROUP BY S.style_name"
          ]
        },
        {
          "interpretation": "List all styles from the Styles table, along with the names of all hair stylists who offer that style and their number of years of experience.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.style_name, HS.name, HS.experience\nFROM Styles S\nJOIN Hair_Stylists_Styles HSS ON S.style_id = HSS.style_id\nJOIN Hair_Stylists HS ON HSS.hairdresser_id = HS.id"
          ]
        },
        {
          "interpretation": "Get the style_id and style_name from the Styles table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT style_id, style_name FROM Styles"
          ]
        },
        {
          "interpretation": "Get a count of how many hair stylists offer each style and the names of those hair stylists.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.style_name, COUNT(HS.id) AS stylist_count, GROUP_CONCAT(HS.name) AS stylists\nFROM Hair_Stylists_Styles HSS\nJOIN Styles S ON HSS.style_id = S.style_id\nJOIN Hair_Stylists HS ON HSS.hairdresser_id = HS.id\nGROUP BY S.style_id"
          ]
        },
        {
          "interpretation": "Return the styles offered by each hair stylist and the average number of years of experience of all hair stylists who offer each style.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT hs.style_name, AVG(hs2.experience) AS average_experience\nFROM Hair_Stylists_Styles hss\nJOIN Styles hs ON hss.style_id = hs.style_id\nJOIN Hair_Stylists hs2 ON hss.hairdresser_id = hs2.id\nGROUP BY hs.style_name"
          ]
        },
        {
          "interpretation": "Get a distinct list of styles offered by all hair stylists, along with their descriptions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT s.style_name, s.description FROM Styles s"
          ]
        },
        {
          "interpretation": "List all styles, along with the names of all hair stylists who offer that style, their number of years of experience, and the descriptions of the styles offered by those hair stylists.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.style_name, HS.name, HS.experience, S.description\nFROM Styles S\nJOIN Hair_Stylists_Styles HSS ON S.style_id = HSS.style_id\nJOIN Hair_Stylists HS ON HSS.hairdresser_id = HS.id"
          ]
        },
        {
          "interpretation": "List all hair stylists who offer more than one style and the styles they offer.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT hs.name, s.style_name\nFROM Hair_Stylists hs\nJOIN Hair_Stylists_Styles hss ON hs.id = hss.hairdresser_id\nJOIN Styles s ON hss.style_id = s.style_id\nWHERE hs.id IN (\n    SELECT hairdresser_id\n    FROM Hair_Stylists_Styles\n    GROUP BY hairdresser_id\n    HAVING COUNT(style_id) > 1\n)"
          ]
        },
        {
          "interpretation": "Retrieve all styles offered by at least one hair stylist, along with the names of those hair stylists and their descriptions.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.style_name, HS.name, S.description\nFROM Styles S\nJOIN Hair_Stylists_Styles HSS ON S.style_id = HSS.style_id\nJOIN Hair_Stylists HS ON HSS.hairdresser_id = HS.id"
          ]
        },
        {
          "interpretation": "Gather information about each style, including its name, description, and the names of all hair stylists who offer that style, along with their number of years of experience and a count of the total number of hair stylists who offer each style.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    Styles.style_name, \n    Styles.description, \n    Hair_Stylists.name, \n    Hair_Stylists.experience, \n    COUNT(DISTINCT Hair_Stylists_Styles.hairdresser_id) AS stylist_count \nFROM \n    Styles \nJOIN \n    Hair_Stylists_Styles ON Styles.style_id = Hair_Stylists_Styles.style_id \nJOIN \n    Hair_Stylists ON Hair_Stylists_Styles.hairdresser_id = Hair_Stylists.id \nGROUP BY \n    Styles.style_id, \n    Hair_Stylists.id"
          ]
        },
        {
          "interpretation": "For each style_id, retrieve the corresponding style_name and description from the Styles table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT style_id, style_name, description FROM Styles"
          ]
        },
        {
          "interpretation": "Gather information about each style, including its name and description, as well as the names of all hair stylists who offer that style.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.style_name, S.description, HS.name\nFROM Styles S\nLEFT JOIN Hair_Stylists_Styles HSS ON S.style_id = HSS.style_id\nLEFT JOIN Hair_Stylists HS ON HSS.hairdresser_id = HS.id"
          ]
        },
        {
          "interpretation": "For each style, list all hair stylists who offer that style.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Styles.style_name, Hair_Stylists.name\nFROM Hair_Stylists_Styles\nJOIN Styles ON Hair_Stylists_Styles.style_id = Styles.style_id\nJOIN Hair_Stylists ON Hair_Stylists_Styles.hairdresser_id = Hair_Stylists.id\nORDER BY Styles.style_name"
          ]
        },
        {
          "interpretation": "Get the total number of styles offered by all hair stylists and the average number of years of experience of those hair stylists.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(DISTINCT style_id) AS total_styles, AVG(experience) AS average_experience\nFROM Hair_Stylists_Styles\nJOIN Hair_Stylists ON Hair_Stylists_Styles.hairdresser_id = Hair_Stylists.id"
          ]
        }
      ],
      "num_unique_execution_results": 15,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.06666666666666667,
        "one_found": true,
        "f1_score": 0.11764705882352941,
        "num_queries": 15,
        "num_unique_queries": 15,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Filmmaking/scope_hair_stylists_styles/scope_hair_stylists_styles.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    birth_date DATE\n);\nCREATE TABLE Casting (\n    casting_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    actor_id INTEGER,\n    role_id INTEGER,\n    FOREIGN KEY(actor_id) REFERENCES Actors(actor_id),\n    FOREIGN KEY(role_id) REFERENCES Roles(role_id)\n);\nCREATE TABLE Film_Projects (\n    project_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE\n);\nCREATE TABLE Hair_Stylists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    experience INT\n);\nCREATE TABLE Hair_Stylists_Styles (\n    hairdresser_id INTEGER,\n    style_id INTEGER,\n    FOREIGN KEY(hairdresser_id) REFERENCES Hair_Stylists(id),\n    FOREIGN KEY(style_id) REFERENCES Styles(style_id)\n);\nCREATE TABLE Roles (\n    role_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    character_name TEXT,\n    film_project_id INTEGER,\n    FOREIGN KEY(film_project_id) REFERENCES Film_Projects(project_id)\n);\nCREATE TABLE Styles (\n    style_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    style_name TEXT,\n    description TEXT\n);\n\nINSERT INTO \"Actors\" (actor_id,first_name,last_name,birth_date) VALUES (1,'Leonardo','DiCaprio','1974-11-11'),(2,'Ellen','Page','1987-01-21'),(3,'Christian','Bale','1974-01-30'),(4,'Anne','Hathaway','1982-11-12'),(5,'Natalie','Portman','1981-06-09');\nINSERT INTO \"Casting\" (casting_id,actor_id,role_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Film_Projects\" (project_id,title,release_date) VALUES (1,'The Great Gatsby','2022-05-29'),(2,'Inception','2010-07-16'),(3,'Interstellar','2014-11-07'),(4,'La La Land','2016-12-02'),(5,'Black Swan','2010-12-01');\nINSERT INTO \"Hair_Stylists\" (id,name,experience) VALUES (1,'John Doe',10),(2,'Jane Smith',8),(3,'Emily Johnson',6),(4,'Michael Brown',3),(5,'Linda Davis',7);\nINSERT INTO \"Hair_Stylists_Styles\" (hairdresser_id,style_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\nINSERT INTO \"Roles\" (role_id,character_name,film_project_id) VALUES (1,'Gatsby',1),(2,'Cobb',2),(3,'Cooper',3),(4,'Sebastian',4),(5,'Arthur',5);\nINSERT INTO \"Styles\" (style_id,style_name,description) VALUES (1,'Period Hairstyle','A hairstyle from a specific historical period.'),(2,'Updo','A hairstyle where the hair is pulled up off the neck and secured at the top or back of the head.'),(3,'Bob','A short haircut that falls just below the chin.'),(4,'Pixie','A very short haircut with hair cut close to the scalp.'),(5,'Curl','A hairstyle characterized by curls or waves in the hair.');\n",
      "question": "What information is there on the styles including their descriptions common to all hair stylists?",
      "gold_queries": [
        "SELECT Styles.style_name, Styles.description  from Hair_Stylists_Styles join Styles on Hair_Stylists_Styles.style_id = Styles.style_id join Hair_Stylists on Hair_Stylists_Styles.hairdresser_id = Hair_Stylists.id   GROUP BY Hair_Stylists_Styles.style_id HAVING COUNT(DISTINCT Hair_Stylists_Styles.hairdresser_id) = (SELECT COUNT(*) FROM  Hair_Stylists)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "What information on hairstyles, including descriptions, is common to the entire group of hair stylists?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT S.style_name, S.description\nFROM Styles S\nJOIN Hair_Stylists_Styles HSS ON S.style_id = HSS.style_id\nGROUP BY S.style_name, S.description\nHAVING COUNT(DISTINCT HSS.hairdresser_id) = (SELECT COUNT(*) FROM Hair_Stylists)"
          ]
        },
        {
          "interpretation": "Are there any shared style descriptions among all hair stylists in the database?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT description FROM Styles WHERE style_id IN (SELECT style_id FROM Hair_Stylists_Styles GROUP BY style_id HAVING COUNT(DISTINCT hairdresser_id) = (SELECT COUNT(*) FROM Hair_Stylists))"
          ]
        },
        {
          "interpretation": "Do all hair stylists have access to and knowledge of same hairstyle descriptions?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT hs.name, s.style_name, s.description\nFROM Hair_Stylists hs\nJOIN Hair_Stylists_Styles hss ON hs.id = hss.hairdresser_id\nJOIN Styles s ON hss.style_id = s.style_id"
          ]
        },
        {
          "interpretation": "What details about the hairstyles, including descriptions, are found across all hair stylists in the database?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.style_name, T1.description FROM Styles AS T1 INNER JOIN Hair_Stylists_Styles AS T2 ON T1.style_id = T2.style_id"
          ]
        },
        {
          "interpretation": "What common style properties are held by all hair stylists in the database?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT style_name FROM Styles WHERE style_id IN (SELECT style_id FROM Hair_Stylists_Styles GROUP BY style_id HAVING COUNT(DISTINCT hairdresser_id) = (SELECT COUNT(*) FROM Hair_Stylists))"
          ]
        },
        {
          "interpretation": "What properties of the styles are shared by all hairdressers, including details from their descriptions?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT style_id, style_name, description \nFROM Styles \nWHERE style_id IN (\n    SELECT style_id \n    FROM Hair_Stylists_Styles \n    GROUP BY style_id \n    HAVING COUNT(DISTINCT hairdresser_id) = (SELECT COUNT(*) FROM Hair_Stylists)\n)"
          ]
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.16666666666666666,
        "one_found": true,
        "f1_score": 0.2857142857142857,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Filmmaking/scope_hair_stylists_styles/scope_hair_stylists_styles.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    birth_date DATE\n);\nCREATE TABLE Casting (\n    casting_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    actor_id INTEGER,\n    role_id INTEGER,\n    FOREIGN KEY(actor_id) REFERENCES Actors(actor_id),\n    FOREIGN KEY(role_id) REFERENCES Roles(role_id)\n);\nCREATE TABLE Film_Projects (\n    project_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE\n);\nCREATE TABLE Hair_Stylists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    experience INT\n);\nCREATE TABLE Hair_Stylists_Styles (\n    hairdresser_id INTEGER,\n    style_id INTEGER,\n    FOREIGN KEY(hairdresser_id) REFERENCES Hair_Stylists(id),\n    FOREIGN KEY(style_id) REFERENCES Styles(style_id)\n);\nCREATE TABLE Roles (\n    role_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    character_name TEXT,\n    film_project_id INTEGER,\n    FOREIGN KEY(film_project_id) REFERENCES Film_Projects(project_id)\n);\nCREATE TABLE Styles (\n    style_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    style_name TEXT,\n    description TEXT\n);\n\nINSERT INTO \"Actors\" (actor_id,first_name,last_name,birth_date) VALUES (1,'Leonardo','DiCaprio','1974-11-11'),(2,'Ellen','Page','1987-01-21'),(3,'Christian','Bale','1974-01-30'),(4,'Anne','Hathaway','1982-11-12'),(5,'Natalie','Portman','1981-06-09');\nINSERT INTO \"Casting\" (casting_id,actor_id,role_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Film_Projects\" (project_id,title,release_date) VALUES (1,'The Great Gatsby','2022-05-29'),(2,'Inception','2010-07-16'),(3,'Interstellar','2014-11-07'),(4,'La La Land','2016-12-02'),(5,'Black Swan','2010-12-01');\nINSERT INTO \"Hair_Stylists\" (id,name,experience) VALUES (1,'John Doe',10),(2,'Jane Smith',8),(3,'Emily Johnson',6),(4,'Michael Brown',3),(5,'Linda Davis',7);\nINSERT INTO \"Hair_Stylists_Styles\" (hairdresser_id,style_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\nINSERT INTO \"Roles\" (role_id,character_name,film_project_id) VALUES (1,'Gatsby',1),(2,'Cobb',2),(3,'Cooper',3),(4,'Sebastian',4),(5,'Arthur',5);\nINSERT INTO \"Styles\" (style_id,style_name,description) VALUES (1,'Period Hairstyle','A hairstyle from a specific historical period.'),(2,'Updo','A hairstyle where the hair is pulled up off the neck and secured at the top or back of the head.'),(3,'Bob','A short haircut that falls just below the chin.'),(4,'Pixie','A very short haircut with hair cut close to the scalp.'),(5,'Curl','A hairstyle characterized by curls or waves in the hair.');\n",
      "question": "Give me the styles that are common to all hair stylists",
      "gold_queries": [
        "SELECT Styles.style_name  from Hair_Stylists_Styles join Styles on Hair_Stylists_Styles.style_id = Styles.style_id join Hair_Stylists on Hair_Stylists_Styles.hairdresser_id = Hair_Stylists.id   GROUP BY Hair_Stylists_Styles.style_id HAVING COUNT(DISTINCT Hair_Stylists_Styles.hairdresser_id) = (SELECT COUNT(*) FROM  Hair_Stylists)"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Provide the styles that are common to all unique hair stylists in the Hair_Stylists_Styles table.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT style_name FROM Styles WHERE style_id IN (SELECT style_id FROM Hair_Stylists_Styles GROUP BY style_id HAVING COUNT(DISTINCT hairdresser_id) = (SELECT COUNT(*) FROM Hair_Stylists))"
          ]
        },
        {
          "interpretation": "Return the style IDs and names that are found across all rows in the Hair_Stylists_Styles table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT style_id, style_name \nFROM Styles \nWHERE style_id IN (\n    SELECT style_id \n    FROM Hair_Stylists_Styles\n    GROUP BY style_id \n    HAVING COUNT(DISTINCT hairdresser_id) = (SELECT COUNT(*) FROM Hair_Stylists)\n)"
          ]
        },
        {
          "interpretation": "Identify the distinct styles associated with every single hair stylist in the database.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT H.name, S.style_name\nFROM Hair_Stylists H\nJOIN Hair_Stylists_Styles HS ON H.id = HS.hairdresser_id\nJOIN Styles S ON HS.style_id = S.style_id"
          ]
        },
        {
          "interpretation": "Return the style IDs that are shared among all hair stylists.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT style_id\nFROM Hair_Stylists_Styles\nGROUP BY style_id\nHAVING COUNT(DISTINCT hairdresser_id) = (SELECT COUNT(*) FROM Hair_Stylists)"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "one_found": true,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Filmmaking/scope_hair_stylists_styles/scope_hair_stylists_styles.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    birth_date DATE\n);\nCREATE TABLE Casting (\n    casting_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    actor_id INTEGER,\n    role_id INTEGER,\n    FOREIGN KEY(actor_id) REFERENCES Actors(actor_id),\n    FOREIGN KEY(role_id) REFERENCES Roles(role_id)\n);\nCREATE TABLE Film_Projects (\n    project_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE\n);\nCREATE TABLE Hair_Stylists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    experience INT\n);\nCREATE TABLE Hair_Stylists_Styles (\n    hairdresser_id INTEGER,\n    style_id INTEGER,\n    FOREIGN KEY(hairdresser_id) REFERENCES Hair_Stylists(id),\n    FOREIGN KEY(style_id) REFERENCES Styles(style_id)\n);\nCREATE TABLE Roles (\n    role_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    character_name TEXT,\n    film_project_id INTEGER,\n    FOREIGN KEY(film_project_id) REFERENCES Film_Projects(project_id)\n);\nCREATE TABLE Styles (\n    style_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    style_name TEXT,\n    description TEXT\n);\n\nINSERT INTO \"Actors\" (actor_id,first_name,last_name,birth_date) VALUES (1,'Leonardo','DiCaprio','1974-11-11'),(2,'Ellen','Page','1987-01-21'),(3,'Christian','Bale','1974-01-30'),(4,'Anne','Hathaway','1982-11-12'),(5,'Natalie','Portman','1981-06-09');\nINSERT INTO \"Casting\" (casting_id,actor_id,role_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Film_Projects\" (project_id,title,release_date) VALUES (1,'The Great Gatsby','2022-05-29'),(2,'Inception','2010-07-16'),(3,'Interstellar','2014-11-07'),(4,'La La Land','2016-12-02'),(5,'Black Swan','2010-12-01');\nINSERT INTO \"Hair_Stylists\" (id,name,experience) VALUES (1,'John Doe',10),(2,'Jane Smith',8),(3,'Emily Johnson',6),(4,'Michael Brown',3),(5,'Linda Davis',7);\nINSERT INTO \"Hair_Stylists_Styles\" (hairdresser_id,style_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\nINSERT INTO \"Roles\" (role_id,character_name,film_project_id) VALUES (1,'Gatsby',1),(2,'Cobb',2),(3,'Cooper',3),(4,'Sebastian',4),(5,'Arthur',5);\nINSERT INTO \"Styles\" (style_id,style_name,description) VALUES (1,'Period Hairstyle','A hairstyle from a specific historical period.'),(2,'Updo','A hairstyle where the hair is pulled up off the neck and secured at the top or back of the head.'),(3,'Bob','A short haircut that falls just below the chin.'),(4,'Pixie','A very short haircut with hair cut close to the scalp.'),(5,'Curl','A hairstyle characterized by curls or waves in the hair.');\n",
      "question": "For each hair stylist, give me the style description.",
      "gold_queries": [
        "select hair_stylists.name , styles.description from Hair_Stylists_Styles join Styles on Hair_Stylists_Styles.style_id = Styles.style_id join Hair_Stylists on Hair_Stylists_Styles.hairdresser_id = Hair_Stylists.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Retrieve the style description for each hair stylist mentioned in the Hair_Stylists table.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT H.name, S.description\nFROM Hair_Stylists AS H\nJOIN Hair_Stylists_Styles AS HSS ON H.id = HSS.hairdresser_id\nJOIN Styles AS S ON HSS.style_id = S.style_id"
          ]
        },
        {
          "interpretation": "Show the style description for each distinct combination of hair stylist style based on the join of the Hair_Stylists_Styles, Hair_Stylists, and Styles tables.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT T3.description FROM Hair_Stylists_Styles AS T1 JOIN Hair_Stylists AS T2 ON T1.hairdresser_id = T2.id JOIN Styles AS T3 ON T1.style_id = T3.style_id"
          ]
        },
        {
          "interpretation": "For each distinct hair stylist, list all their associated styles along with their descriptions as found in the Styles table using the Hair_Stylists_Styles table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT hs.name, s.style_name, s.description\nFROM Hair_Stylists hs\nJOIN Hair_Stylists_Styles hss ON hs.id = hss.hairdresser_id\nJOIN Styles s ON hss.style_id = s.style_id"
          ]
        },
        {
          "interpretation": "Provide a listing that includes each hair stylist's style description, name, and experience found in the join of Hair_Stylists, Hair_Stylists_Styles, and Styles tables.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT HS.name, HS.experience, S.description\nFROM Hair_Stylists HS\nJOIN Hair_Stylists_Styles HSS ON HS.id = HSS.hairdresser_id\nJOIN Styles S ON HSS.style_id = S.style_id"
          ]
        },
        {
          "interpretation": "Provide the style description for each style that a hair stylist has been associated with in the Hair_Stylists_Styles table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Styles.description FROM Styles JOIN Hair_Stylists_Styles ON Styles.style_id = Hair_Stylists_Styles.style_id"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "one_found": true,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Filmmaking/scope_hair_stylists_styles/scope_hair_stylists_styles.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    birth_date DATE\n);\nCREATE TABLE Casting (\n    casting_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    actor_id INTEGER,\n    role_id INTEGER,\n    FOREIGN KEY(actor_id) REFERENCES Actors(actor_id),\n    FOREIGN KEY(role_id) REFERENCES Roles(role_id)\n);\nCREATE TABLE Film_Projects (\n    project_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE\n);\nCREATE TABLE Hair_Stylists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    experience INT\n);\nCREATE TABLE Hair_Stylists_Styles (\n    hairdresser_id INTEGER,\n    style_id INTEGER,\n    FOREIGN KEY(hairdresser_id) REFERENCES Hair_Stylists(id),\n    FOREIGN KEY(style_id) REFERENCES Styles(style_id)\n);\nCREATE TABLE Roles (\n    role_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    character_name TEXT,\n    film_project_id INTEGER,\n    FOREIGN KEY(film_project_id) REFERENCES Film_Projects(project_id)\n);\nCREATE TABLE Styles (\n    style_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    style_name TEXT,\n    description TEXT\n);\n\nINSERT INTO \"Actors\" (actor_id,first_name,last_name,birth_date) VALUES (1,'Leonardo','DiCaprio','1974-11-11'),(2,'Ellen','Page','1987-01-21'),(3,'Christian','Bale','1974-01-30'),(4,'Anne','Hathaway','1982-11-12'),(5,'Natalie','Portman','1981-06-09');\nINSERT INTO \"Casting\" (casting_id,actor_id,role_id) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Film_Projects\" (project_id,title,release_date) VALUES (1,'The Great Gatsby','2022-05-29'),(2,'Inception','2010-07-16'),(3,'Interstellar','2014-11-07'),(4,'La La Land','2016-12-02'),(5,'Black Swan','2010-12-01');\nINSERT INTO \"Hair_Stylists\" (id,name,experience) VALUES (1,'John Doe',10),(2,'Jane Smith',8),(3,'Emily Johnson',6),(4,'Michael Brown',3),(5,'Linda Davis',7);\nINSERT INTO \"Hair_Stylists_Styles\" (hairdresser_id,style_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,4);\nINSERT INTO \"Roles\" (role_id,character_name,film_project_id) VALUES (1,'Gatsby',1),(2,'Cobb',2),(3,'Cooper',3),(4,'Sebastian',4),(5,'Arthur',5);\nINSERT INTO \"Styles\" (style_id,style_name,description) VALUES (1,'Period Hairstyle','A hairstyle from a specific historical period.'),(2,'Updo','A hairstyle where the hair is pulled up off the neck and secured at the top or back of the head.'),(3,'Bob','A short haircut that falls just below the chin.'),(4,'Pixie','A very short haircut with hair cut close to the scalp.'),(5,'Curl','A hairstyle characterized by curls or waves in the hair.');\n",
      "question": "Show me the style description for each hair stylist.",
      "gold_queries": [
        "SELECT Styles.description  from Hair_Stylists_Styles join Styles on Hair_Stylists_Styles.style_id = Styles.style_id join Hair_Stylists on Hair_Stylists_Styles.hairdresser_id = Hair_Stylists.id   GROUP BY Hair_Stylists_Styles.style_id HAVING COUNT(DISTINCT Hair_Stylists_Styles.hairdresser_id) = (SELECT COUNT(*) FROM  Hair_Stylists)",
        "select hair_stylists.name , styles.description from Hair_Stylists_Styles join Styles on Hair_Stylists_Styles.style_id = Styles.style_id join Hair_Stylists on Hair_Stylists_Styles.hairdresser_id = Hair_Stylists.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Show the style descriptions of all the styles that each hair stylist is involved with, in separate rows for each.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT HS.name, S.description\nFROM Hair_Stylists HS\nJOIN Hair_Stylists_Styles HSS ON HS.id = HSS.hairdresser_id\nJOIN Styles S ON HSS.style_id = S.style_id"
          ]
        },
        {
          "interpretation": "List the overall hairstyles and their descriptions, for which each hair stylist is qualified.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT hs.name AS hairdresser_name, s.style_name, s.description\nFROM Hair_Stylists hs\nJOIN Hair_Stylists_Styles hss ON hs.id = hss.hairdresser_id\nJOIN Styles s ON hss.style_id = s.style_id"
          ]
        },
        {
          "interpretation": "Show a table with the id of each hair stylist in the Hair_Stylists table, the style_name they work with, and the description of that style.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT hs.id, s.style_name, s.description\nFROM Hair_Stylists hs\nJOIN Hair_Stylists_Styles hss ON hs.id = hss.hairdresser_id\nJOIN Styles s ON hss.style_id = s.style_id"
          ]
        },
        {
          "interpretation": "For each hair stylist, show the style they specialize in along with the description of that style.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.style_name, T2.description\nFROM Hair_Stylists_Styles AS T1\nJOIN Styles AS T2 ON T1.style_id = T2.style_id"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.5,
        "precision": 0.25,
        "one_found": true,
        "f1_score": 0.3333333333333333,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/scope/Filmmaking/scope_locations_managers_responsibilities/scope_locations_managers_responsibilities.sqlite",
      "db_dump": "CREATE TABLE Directed_Movies (\n    director_id INTEGER,\n    movie_id INTEGER,\n    FOREIGN KEY(director_id) REFERENCES Directors(id),\n    FOREIGN KEY(movie_id) REFERENCES Movie_Projects(id)\n);\nCREATE TABLE Directors (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    director_name TEXT,\n    birth_year INT\n);\nCREATE TABLE Film_Crews (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    crew_name TEXT,\n    role TEXT\n);\nCREATE TABLE Locations_Managers (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    contact_info TEXT\n);\nCREATE TABLE Locations_Managers_Responsibilities (\n    locations_manager_id INTEGER,\n    responsibility_id INTEGER,\n    FOREIGN KEY(locations_manager_id) REFERENCES Locations_Managers(id),\n    FOREIGN KEY(responsibility_id) REFERENCES Responsibilities(id)\n);\nCREATE TABLE Movie_Projects (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    release_date DATE,\n    budget REAL\n);\nCREATE TABLE Movies_Cast (\n    movie_id INTEGER,\n    actor_id INTEGER,\n    character_name TEXT,\n    FOREIGN KEY(movie_id) REFERENCES Movie_Projects(id),\n    FOREIGN KEY(actor_id) REFERENCES Actors(id)\n);\nCREATE TABLE Responsibilities (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    description TEXT\n);\n\nINSERT INTO \"Directed_Movies\" (director_id,movie_id) VALUES (1,1),(2,2),(3,3),(4,4),(5,5);\nINSERT INTO \"Directors\" (id,director_name,birth_year) VALUES (1,'Samuel L Jackson',1948),(2,'Denzel Washington',1954),(3,'Tom Hanks',1956),(4,'Robert De Niro',1943),(5,'Anthony Hopkins',1937);\nINSERT INTO \"Film_Crews\" (id,crew_name,role) VALUES (1,'Camera Team','Director of Photography'),(2,'Sound Team','Boom Operator'),(3,'Production Designers','Art Director'),(4,'Costume Department','Costumer'),(5,'Special Effects','Pyrotechnics Specialist');\nINSERT INTO \"Locations_Managers\" (id,name,contact_info) VALUES (1,'John Doe','+1234567890'),(2,'Jane Smith','+9876543210'),(3,'Alice Johnson','+1112223330'),(4,'Bob Brown','+4445556660'),(5,'Charlie Davis','+7778889990');\nINSERT INTO \"Locations_Managers_Responsibilities\" (locations_manager_id,responsibility_id) VALUES (1,1),(2,1),(3,1),(4,1),(5,1),(5,5);\nINSERT INTO \"Movie_Projects\" (id,title,release_date,budget) VALUES (1,'The Big Adventure','2022-12-01',10000000.0),(2,'Alien Invasion','2023-06-15',15000000.0),(3,'Love Story','2024-02-14',5000000.0),(4,'Action Thriller','2025-08-20',20000000.0),(5,'Comedy Drama','2026-04-01',7000000.0);\nINSERT INTO \"Movies_Cast\" (movie_id,actor_id,character_name) VALUES (1,1,'Hero'),(1,2,'Villain'),(2,3,'Lead Scientist'),(2,4,'Intergalactic Warrior'),(3,5,'Lonely Heart'),(3,6,'Business Tycoon'),(4,7,'Detective'),(4,8,'Gang Leader'),(5,9,'Small Town Girl'),(5,10,'Wise Old Man');\nINSERT INTO \"Responsibilities\" (id,description) VALUES (1,'Film Permit Acquisition'),(2,'Location Scouting'),(3,'Health & Safety Compliance'),(4,'Contract Negotiation'),(5,'Equipment Coordination');\n",
      "question": "Which responsibilities does each location manager have?",
      "gold_queries": [
        "SELECT Responsibilities.description  from Locations_Managers_Responsibilities join Responsibilities on Locations_Managers_Responsibilities.responsibility_id = Responsibilities.id join Locations_Managers on Locations_Managers_Responsibilities.locations_manager_id = Locations_Managers.id   GROUP BY Locations_Managers_Responsibilities.responsibility_id HAVING COUNT(DISTINCT Locations_Managers_Responsibilities.locations_manager_id) = (SELECT COUNT(*) FROM  Locations_Managers)",
        "select locations_managers.name , responsibilities.description from Locations_Managers_Responsibilities join Responsibilities on Locations_Managers_Responsibilities.responsibility_id = Responsibilities.id join Locations_Managers on Locations_Managers_Responsibilities.locations_manager_id = Locations_Managers.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "scope",
      "interpretations": [
        {
          "interpretation": "Show each location manager and their associated responsibilities from the Locations_Managers_Responsibilities table.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Locations_Managers.name, Responsibilities.description\nFROM Locations_Managers\nJOIN Locations_Managers_Responsibilities ON Locations_Managers.id = Locations_Managers_Responsibilities.locations_manager_id\nJOIN Responsibilities ON Locations_Managers_Responsibilities.responsibility_id = Responsibilities.id"
          ]
        },
        {
          "interpretation": "Determine which location managers do not have any responsibilities assigned.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name FROM Locations_Managers WHERE id NOT IN (SELECT locations_manager_id FROM Locations_Managers_Responsibilities)"
          ]
        },
        {
          "interpretation": "List all unique responsibilities across the Locations_Managers_Responsibilities table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT description FROM Responsibilities"
          ]
        },
        {
          "interpretation": "Display the responsibilities that are assigned to multiple location managers.",
          "metrics": {
            "recall": 0.5,
            "precision": 1.0,
            "f1_score": 0.6666666666666666,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT R.description\nFROM Responsibilities R\nJOIN Locations_Managers_Responsibilities LMR ON R.id = LMR.responsibility_id\nGROUP BY R.id, R.description\nHAVING COUNT(DISTINCT LMR.locations_manager_id) > 1"
          ]
        },
        {
          "interpretation": "Find the responsibilities that are shared by a single location manager and also show the responsibility's description.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT r.description, lr.responsibility_id\nFROM Responsibilities r\nJOIN Locations_Managers_Responsibilities lr ON r.id = lr.responsibility_id\nGROUP BY lr.responsibility_id\nHAVING COUNT(DISTINCT lr.locations_manager_id) = 1"
          ]
        },
        {
          "interpretation": "For each responsibility, show the number of location managers responsible for it and also include the responsibility's description.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT R.description, COUNT(DISTINCT LMR.locations_manager_id) AS number_of_managers\nFROM Responsibilities R\nJOIN Locations_Managers_Responsibilities LMR ON R.id = LMR.responsibility_id\nGROUP BY R.id, R.description"
          ]
        },
        {
          "interpretation": "Provide a list of location managers including those with no responsibilities and those with 1 or more responsibilities.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, contact_info FROM Locations_Managers"
          ]
        },
        {
          "interpretation": "Provide a comprehensive list of all location managers, along with their responsibilities and responsibility sequence numbers.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT L.id, L.name, L.contact_info, R.description, LM_R.responsibility_id\nFROM Locations_Managers L\nJOIN Locations_Managers_Responsibilities LM_R ON L.id = LM_R.locations_manager_id\nJOIN Responsibilities R ON LM_R.responsibility_id = R.id\nORDER BY L.id, LM_R.responsibility_id"
          ]
        },
        {
          "interpretation": "For each location manager, list their name and the sequence number of their responsibilities in the Locations_Managers_Responsibilities table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.name, T2.responsibility_id FROM Locations_Managers AS T1 JOIN Locations_Managers_Responsibilities AS T2 ON T1.id = T2.locations_manager_id"
          ]
        }
      ],
      "num_unique_execution_results": 9,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2222222222222222,
        "one_found": true,
        "f1_score": 0.3636363636363636,
        "num_queries": 9,
        "num_unique_queries": 9,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Job Postings/vague_2tabs_recruiter/vague_2tabs_recruiter.sqlite",
      "db_dump": "CREATE TABLE Applicant (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    positionId INTEGER,\n    FOREIGN KEY (positionId) REFERENCES Position(id)\n);\nCREATE TABLE Company (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Employee (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    role TEXT,\n    hireDate TEXT\n);\nCREATE TABLE Interview (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date DATETIME,\n    time TEXT,\n    applicantId INTEGER,\n    interviewerId INTEGER,\n    positionId INTEGER,\n    status TEXT ,\n    FOREIGN KEY (applicantId) REFERENCES Applicant(id),\n    FOREIGN KEY (interviewerId) REFERENCES Employee(id),\n    FOREIGN KEY (positionId) REFERENCES Position(id)\n);\nCREATE TABLE Position (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    description TEXT,\n    salary DECIMAL(10,2) ,\n    companyId INTEGER,\n    recruitmentAgencyId INTEGER,\n    FOREIGN KEY (companyId) REFERENCES Company(id),\n    FOREIGN KEY (recruitmentAgencyId) REFERENCES Recruitment_Agency(id)\n);\nCREATE TABLE Recruitment_Agency (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    agencyName TEXT,\n    contactEmail TEXT,\n    contactPhone TEXT\n);\n\nINSERT INTO \"Applicant\" (id,firstName,lastName,email,phoneNumber,positionId) VALUES (1,'John','Smith','johnsmith@example.com','+1-123-456-7890',1),(2,'Jane','Doe','janedoe@example.com','+1-987-654-3210',1);\nINSERT INTO \"Company\" (id,name,location) VALUES (1,'Tech Solutions','San Francisco'),(2,'Software Inc.','New York');\nINSERT INTO \"Employee\" (id,firstName,lastName,email,phoneNumber,role,hireDate) VALUES (1,'Alice','Wonderland','aliceland@example.com','+1-123-456-7890','HR Manager','2022-01-01'),(2,'Bob','Builder','bobbuilder@example.com','+1-987-654-3210','Engineering Director','2021-07-15');\nINSERT INTO \"Interview\" (id,date,time,applicantId,interviewerId,positionId,status) VALUES (1,'2023-01-15','10:00 AM',1,1,1,'Pending'),(2,'2023-01-16','11:00 AM',2,2,1,'Completed');\nINSERT INTO \"Position\" (id,title,description,salary,companyId,recruitmentAgencyId) VALUES (1,'Software Engineer','Develop and maintain software applications.',90000,1,1),(2,'Data Analyst','Analyze data to provide insights and recommendations.',80000,1,2);\nINSERT INTO \"Recruitment_Agency\" (id,agencyName,contactEmail,contactPhone) VALUES (1,'Top Talent Agency','toptalent@example.com','+1-800-123-4567'),(2,'Job Connect','jobconnect@example.com','+1-900-987-6543');\n",
      "question": "Which company has hired a data analyst?",
      "gold_queries": [
        "SELECT r.name\r\nFROM Position p\r\nJOIN Company r ON p.companyId = r.id\r\nWHERE p.title = 'Data Analyst'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What company has the most data analyst positions?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Company.name \nFROM Company \nJOIN Position ON Company.id = Position.companyId \nWHERE Position.title = 'Data Analyst' \nGROUP BY Company.name \nORDER BY COUNT(*) DESC \nLIMIT 1"
          ]
        },
        {
          "interpretation": "Which company has a data analyst as an active employee?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.name \nFROM Company C \nJOIN Position P ON C.id = P.companyId \nJOIN Employee E ON P.id = E.role \nWHERE P.title = 'Data Analyst'"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "one_found": true,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Job Postings/vague_2tabs_recruiter/vague_2tabs_recruiter.sqlite",
      "db_dump": "CREATE TABLE Applicant (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    positionId INTEGER,\n    FOREIGN KEY (positionId) REFERENCES Position(id)\n);\nCREATE TABLE Company (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Employee (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    role TEXT,\n    hireDate TEXT\n);\nCREATE TABLE Interview (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date DATETIME,\n    time TEXT,\n    applicantId INTEGER,\n    interviewerId INTEGER,\n    positionId INTEGER,\n    status TEXT ,\n    FOREIGN KEY (applicantId) REFERENCES Applicant(id),\n    FOREIGN KEY (interviewerId) REFERENCES Employee(id),\n    FOREIGN KEY (positionId) REFERENCES Position(id)\n);\nCREATE TABLE Position (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    description TEXT,\n    salary DECIMAL(10,2) ,\n    companyId INTEGER,\n    recruitmentAgencyId INTEGER,\n    FOREIGN KEY (companyId) REFERENCES Company(id),\n    FOREIGN KEY (recruitmentAgencyId) REFERENCES Recruitment_Agency(id)\n);\nCREATE TABLE Recruitment_Agency (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    agencyName TEXT,\n    contactEmail TEXT,\n    contactPhone TEXT\n);\n\nINSERT INTO \"Applicant\" (id,firstName,lastName,email,phoneNumber,positionId) VALUES (1,'John','Smith','johnsmith@example.com','+1-123-456-7890',1),(2,'Jane','Doe','janedoe@example.com','+1-987-654-3210',1);\nINSERT INTO \"Company\" (id,name,location) VALUES (1,'Tech Solutions','San Francisco'),(2,'Software Inc.','New York');\nINSERT INTO \"Employee\" (id,firstName,lastName,email,phoneNumber,role,hireDate) VALUES (1,'Alice','Wonderland','aliceland@example.com','+1-123-456-7890','HR Manager','2022-01-01'),(2,'Bob','Builder','bobbuilder@example.com','+1-987-654-3210','Engineering Director','2021-07-15');\nINSERT INTO \"Interview\" (id,date,time,applicantId,interviewerId,positionId,status) VALUES (1,'2023-01-15','10:00 AM',1,1,1,'Pending'),(2,'2023-01-16','11:00 AM',2,2,1,'Completed');\nINSERT INTO \"Position\" (id,title,description,salary,companyId,recruitmentAgencyId) VALUES (1,'Software Engineer','Develop and maintain software applications.',90000,1,1),(2,'Data Analyst','Analyze data to provide insights and recommendations.',80000,1,2);\nINSERT INTO \"Recruitment_Agency\" (id,agencyName,contactEmail,contactPhone) VALUES (1,'Top Talent Agency','toptalent@example.com','+1-800-123-4567'),(2,'Job Connect','jobconnect@example.com','+1-900-987-6543');\n",
      "question": "What company hired the data analyst and which recruitment agency was used?",
      "gold_queries": [
        "SELECT r.name, ag.agencyName\r\nFROM Position p\r\nJOIN Company r ON p.companyId = r.id\r\nJOIN Recruitment_Agency ag ON p.RecruitmentAgencyId = ag.id WHERE p.title = 'Data Analyst'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What company hired a position with a title of \"Data Analyst\" and which recruitment agency facilitated the hire?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT c.name AS company, ra.agencyName AS recruitmentAgency\nFROM Position p\nJOIN Company c ON p.companyId = c.id\nJOIN Recruitment_Agency ra ON p.recruitmentAgencyId = ra.id\nWHERE p.title = 'Data Analyst'"
          ]
        },
        {
          "interpretation": "What company hired the data analyst position?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Company.name \nFROM Company \nJOIN Position ON Company.id = Position.companyId \nWHERE Position.title = 'Data Analyst'"
          ]
        },
        {
          "interpretation": "Which company has a Data Analyst position that has been hired and what agency was used?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.name, RA.agencyName\nFROM Position AS P\nJOIN Company AS C ON P.companyId = C.id\nJOIN Recruitment_Agency AS RA ON P.recruitmentAgencyId = RA.id\nWHERE P.title = 'Data Analyst' AND EXISTS (\n    SELECT 1\n    FROM Interview AS I\n    WHERE I.positionId = P.id AND I.status = 'Hired'\n)"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "one_found": true,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Job Postings/vague_2tabs_recruiter/vague_2tabs_recruiter.sqlite",
      "db_dump": "CREATE TABLE Applicant (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    positionId INTEGER,\n    FOREIGN KEY (positionId) REFERENCES Position(id)\n);\nCREATE TABLE Company (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Employee (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    role TEXT,\n    hireDate TEXT\n);\nCREATE TABLE Interview (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date DATETIME,\n    time TEXT,\n    applicantId INTEGER,\n    interviewerId INTEGER,\n    positionId INTEGER,\n    status TEXT ,\n    FOREIGN KEY (applicantId) REFERENCES Applicant(id),\n    FOREIGN KEY (interviewerId) REFERENCES Employee(id),\n    FOREIGN KEY (positionId) REFERENCES Position(id)\n);\nCREATE TABLE Position (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    description TEXT,\n    salary DECIMAL(10,2) ,\n    companyId INTEGER,\n    recruitmentAgencyId INTEGER,\n    FOREIGN KEY (companyId) REFERENCES Company(id),\n    FOREIGN KEY (recruitmentAgencyId) REFERENCES Recruitment_Agency(id)\n);\nCREATE TABLE Recruitment_Agency (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    agencyName TEXT,\n    contactEmail TEXT,\n    contactPhone TEXT\n);\n\nINSERT INTO \"Applicant\" (id,firstName,lastName,email,phoneNumber,positionId) VALUES (1,'John','Smith','johnsmith@example.com','+1-123-456-7890',1),(2,'Jane','Doe','janedoe@example.com','+1-987-654-3210',1);\nINSERT INTO \"Company\" (id,name,location) VALUES (1,'Tech Solutions','San Francisco'),(2,'Software Inc.','New York');\nINSERT INTO \"Employee\" (id,firstName,lastName,email,phoneNumber,role,hireDate) VALUES (1,'Alice','Wonderland','aliceland@example.com','+1-123-456-7890','HR Manager','2022-01-01'),(2,'Bob','Builder','bobbuilder@example.com','+1-987-654-3210','Engineering Director','2021-07-15');\nINSERT INTO \"Interview\" (id,date,time,applicantId,interviewerId,positionId,status) VALUES (1,'2023-01-15','10:00 AM',1,1,1,'Pending'),(2,'2023-01-16','11:00 AM',2,2,1,'Completed');\nINSERT INTO \"Position\" (id,title,description,salary,companyId,recruitmentAgencyId) VALUES (1,'Software Engineer','Develop and maintain software applications.',90000,1,1),(2,'Data Analyst','Analyze data to provide insights and recommendations.',80000,1,2);\nINSERT INTO \"Recruitment_Agency\" (id,agencyName,contactEmail,contactPhone) VALUES (1,'Top Talent Agency','toptalent@example.com','+1-800-123-4567'),(2,'Job Connect','jobconnect@example.com','+1-900-987-6543');\n",
      "question": "Who hires a data analyst?",
      "gold_queries": [
        "SELECT r.name\r\nFROM Position p\r\nJOIN Company r ON p.companyId = r.id\r\nWHERE p.title = 'Data Analyst'",
        "SELECT r.agencyName\r\nFROM Position p\r\nJOIN Recruitment_Agency r ON p.RecruitmentAgencyId = r.id\r\nWHERE p.title = 'Data Analyst'",
        "SELECT r.name, ag.agencyName\r\nFROM Position p\r\nJOIN Company r ON p.companyId = r.id\r\nJOIN Recruitment_Agency ag ON p.RecruitmentAgencyId = ag.id WHERE p.title = 'Data Analyst'"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "The recruitment agency that supplied the data analyst is hired by the company or another entity.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Recruitment_Agency.agencyName \nFROM Recruitment_Agency \nJOIN Position ON Recruitment_Agency.id = Position.recruitmentAgencyId \nWHERE Position.title = 'Data Analyst'"
          ]
        },
        {
          "interpretation": "The company that is advertised as the place of work for a data analyst hires the analyst.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Company.name \nFROM Company \nJOIN Position ON Company.id = Position.companyId \nWHERE Position.title = 'Data Analyst'"
          ]
        },
        {
          "interpretation": "The employee who manages the position of data analyst does the hiring.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Employee.firstName, Employee.lastName\nFROM Employee\nJOIN Interview ON Employee.id = Interview.interviewerId\nJOIN Position ON Interview.positionId = Position.id\nWHERE Position.title = 'Data Analyst'"
          ]
        },
        {
          "interpretation": "The employee who holds the role of Engineering Director hires a data analyst.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT e.firstName, e.lastName\nFROM Employee e\nWHERE e.role = 'Engineering Director'"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.6666666666666666,
        "precision": 0.5,
        "one_found": true,
        "f1_score": 0.5714285714285715,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Job Postings/vague_2tabs_recruiter/vague_2tabs_recruiter.sqlite",
      "db_dump": "CREATE TABLE Applicant (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    positionId INTEGER,\n    FOREIGN KEY (positionId) REFERENCES Position(id)\n);\nCREATE TABLE Company (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Employee (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    role TEXT,\n    hireDate TEXT\n);\nCREATE TABLE Interview (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date DATETIME,\n    time TEXT,\n    applicantId INTEGER,\n    interviewerId INTEGER,\n    positionId INTEGER,\n    status TEXT ,\n    FOREIGN KEY (applicantId) REFERENCES Applicant(id),\n    FOREIGN KEY (interviewerId) REFERENCES Employee(id),\n    FOREIGN KEY (positionId) REFERENCES Position(id)\n);\nCREATE TABLE Position (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    description TEXT,\n    salary DECIMAL(10,2) ,\n    companyId INTEGER,\n    recruitmentAgencyId INTEGER,\n    FOREIGN KEY (companyId) REFERENCES Company(id),\n    FOREIGN KEY (recruitmentAgencyId) REFERENCES Recruitment_Agency(id)\n);\nCREATE TABLE Recruitment_Agency (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    agencyName TEXT,\n    contactEmail TEXT,\n    contactPhone TEXT\n);\n\nINSERT INTO \"Applicant\" (id,firstName,lastName,email,phoneNumber,positionId) VALUES (1,'John','Smith','johnsmith@example.com','+1-123-456-7890',1),(2,'Jane','Doe','janedoe@example.com','+1-987-654-3210',1);\nINSERT INTO \"Company\" (id,name,location) VALUES (1,'Tech Solutions','San Francisco'),(2,'Software Inc.','New York');\nINSERT INTO \"Employee\" (id,firstName,lastName,email,phoneNumber,role,hireDate) VALUES (1,'Alice','Wonderland','aliceland@example.com','+1-123-456-7890','HR Manager','2022-01-01'),(2,'Bob','Builder','bobbuilder@example.com','+1-987-654-3210','Engineering Director','2021-07-15');\nINSERT INTO \"Interview\" (id,date,time,applicantId,interviewerId,positionId,status) VALUES (1,'2023-01-15','10:00 AM',1,1,1,'Pending'),(2,'2023-01-16','11:00 AM',2,2,1,'Completed');\nINSERT INTO \"Position\" (id,title,description,salary,companyId,recruitmentAgencyId) VALUES (1,'Software Engineer','Develop and maintain software applications.',90000,1,1),(2,'Data Analyst','Analyze data to provide insights and recommendations.',80000,1,2);\nINSERT INTO \"Recruitment_Agency\" (id,agencyName,contactEmail,contactPhone) VALUES (1,'Top Talent Agency','toptalent@example.com','+1-800-123-4567'),(2,'Job Connect','jobconnect@example.com','+1-900-987-6543');\n",
      "question": "Which recruitment agency was used to hire the data analyst?",
      "gold_queries": [
        "SELECT r.agencyName\r\nFROM Position p\r\nJOIN Recruitment_Agency r ON p.RecruitmentAgencyId = r.id\r\nWHERE p.title = 'Data Analyst'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "1 Recruitment agency with id 2 was used to hire the data analyst is not correct since no recruitment agency was used to hire a data analyst",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT agencyName FROM Recruitment_Agency WHERE id = 2"
          ]
        },
        {
          "interpretation": "2 Recruitment agency with id 2 was not used to hire the data analyst",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title FROM Position WHERE id = 2 AND recruitmentAgencyId != 2"
          ]
        },
        {
          "interpretation": "3 The question asks about the data analyst but there are two positions for software engineer and data analyst in the position table",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title, description, salary FROM Position WHERE title = 'Data Analyst'"
          ]
        },
        {
          "interpretation": "7 The agency by which position then using it will be recruitment agency",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Recruitment_Agency.agencyName \nFROM Recruitment_Agency \nJOIN Position ON Recruitment_Agency.id = Position.recruitmentAgencyId"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "one_found": true,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Job Postings/vague_2tabs_recruiter/vague_2tabs_recruiter.sqlite",
      "db_dump": "CREATE TABLE Applicant (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    positionId INTEGER,\n    FOREIGN KEY (positionId) REFERENCES Position(id)\n);\nCREATE TABLE Company (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Employee (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    role TEXT,\n    hireDate TEXT\n);\nCREATE TABLE Interview (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date DATETIME,\n    time TEXT,\n    applicantId INTEGER,\n    interviewerId INTEGER,\n    positionId INTEGER,\n    status TEXT ,\n    FOREIGN KEY (applicantId) REFERENCES Applicant(id),\n    FOREIGN KEY (interviewerId) REFERENCES Employee(id),\n    FOREIGN KEY (positionId) REFERENCES Position(id)\n);\nCREATE TABLE Position (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    description TEXT,\n    salary DECIMAL(10,2) ,\n    companyId INTEGER,\n    recruitmentAgencyId INTEGER,\n    FOREIGN KEY (companyId) REFERENCES Company(id),\n    FOREIGN KEY (recruitmentAgencyId) REFERENCES Recruitment_Agency(id)\n);\nCREATE TABLE Recruitment_Agency (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    agencyName TEXT,\n    contactEmail TEXT,\n    contactPhone TEXT\n);\n\nINSERT INTO \"Applicant\" (id,firstName,lastName,email,phoneNumber,positionId) VALUES (1,'John','Smith','johnsmith@example.com','+1-123-456-7890',1),(2,'Jane','Doe','janedoe@example.com','+1-987-654-3210',1);\nINSERT INTO \"Company\" (id,name,location) VALUES (1,'Tech Solutions','San Francisco'),(2,'Software Inc.','New York');\nINSERT INTO \"Employee\" (id,firstName,lastName,email,phoneNumber,role,hireDate) VALUES (1,'Alice','Wonderland','aliceland@example.com','+1-123-456-7890','HR Manager','2022-01-01'),(2,'Bob','Builder','bobbuilder@example.com','+1-987-654-3210','Engineering Director','2021-07-15');\nINSERT INTO \"Interview\" (id,date,time,applicantId,interviewerId,positionId,status) VALUES (1,'2023-01-15','10:00 AM',1,1,1,'Pending'),(2,'2023-01-16','11:00 AM',2,2,1,'Completed');\nINSERT INTO \"Position\" (id,title,description,salary,companyId,recruitmentAgencyId) VALUES (1,'Software Engineer','Develop and maintain software applications.',90000,1,1),(2,'Data Analyst','Analyze data to provide insights and recommendations.',80000,1,2);\nINSERT INTO \"Recruitment_Agency\" (id,agencyName,contactEmail,contactPhone) VALUES (1,'Top Talent Agency','toptalent@example.com','+1-800-123-4567'),(2,'Job Connect','jobconnect@example.com','+1-900-987-6543');\n",
      "question": "Which tech companies and recruitment agencies have already conducted the interviews?",
      "gold_queries": [
        "SELECT r.name, ag.agencyName\r\nFROM Position p\r\nJOIN Company r ON p.companyId = r.id\r\nLEFT JOIN Applicant a ON p.id = a.positionId\r\nLEFT JOIN Interview i ON a.id = i.applicantId\r\nJOIN Recruitment_Agency ag ON p.RecruitmentAgencyId = ag.id WHERE status = 'Completed'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Which companies that are listed as \"tech\" in the Company table and have already conducted an interview that is visible in the Interview table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT C.name \nFROM Company C \nJOIN Position P ON C.id = P.companyId \nJOIN Interview I ON P.id = I.positionId \nWHERE C.name LIKE '%Tech%'"
          ]
        },
        {
          "interpretation": "Which companies have already conducted a completed interview that is associated with a position title that is considered a \"tech\" job.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT C.name\nFROM Company C\nJOIN Position P ON C.id = P.companyId\nJOIN Interview I ON P.id = I.positionId\nWHERE I.status = 'Completed' AND P.title LIKE '%tech%'"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Job Postings/vague_2tabs_recruiter/vague_2tabs_recruiter.sqlite",
      "db_dump": "CREATE TABLE Applicant (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    positionId INTEGER,\n    FOREIGN KEY (positionId) REFERENCES Position(id)\n);\nCREATE TABLE Company (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Employee (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    role TEXT,\n    hireDate TEXT\n);\nCREATE TABLE Interview (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date DATETIME,\n    time TEXT,\n    applicantId INTEGER,\n    interviewerId INTEGER,\n    positionId INTEGER,\n    status TEXT ,\n    FOREIGN KEY (applicantId) REFERENCES Applicant(id),\n    FOREIGN KEY (interviewerId) REFERENCES Employee(id),\n    FOREIGN KEY (positionId) REFERENCES Position(id)\n);\nCREATE TABLE Position (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    description TEXT,\n    salary DECIMAL(10,2) ,\n    companyId INTEGER,\n    recruitmentAgencyId INTEGER,\n    FOREIGN KEY (companyId) REFERENCES Company(id),\n    FOREIGN KEY (recruitmentAgencyId) REFERENCES Recruitment_Agency(id)\n);\nCREATE TABLE Recruitment_Agency (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    agencyName TEXT,\n    contactEmail TEXT,\n    contactPhone TEXT\n);\n\nINSERT INTO \"Applicant\" (id,firstName,lastName,email,phoneNumber,positionId) VALUES (1,'John','Smith','johnsmith@example.com','+1-123-456-7890',1),(2,'Jane','Doe','janedoe@example.com','+1-987-654-3210',1);\nINSERT INTO \"Company\" (id,name,location) VALUES (1,'Tech Solutions','San Francisco'),(2,'Software Inc.','New York');\nINSERT INTO \"Employee\" (id,firstName,lastName,email,phoneNumber,role,hireDate) VALUES (1,'Alice','Wonderland','aliceland@example.com','+1-123-456-7890','HR Manager','2022-01-01'),(2,'Bob','Builder','bobbuilder@example.com','+1-987-654-3210','Engineering Director','2021-07-15');\nINSERT INTO \"Interview\" (id,date,time,applicantId,interviewerId,positionId,status) VALUES (1,'2023-01-15','10:00 AM',1,1,1,'Pending'),(2,'2023-01-16','11:00 AM',2,2,1,'Completed');\nINSERT INTO \"Position\" (id,title,description,salary,companyId,recruitmentAgencyId) VALUES (1,'Software Engineer','Develop and maintain software applications.',90000,1,1),(2,'Data Analyst','Analyze data to provide insights and recommendations.',80000,1,2);\nINSERT INTO \"Recruitment_Agency\" (id,agencyName,contactEmail,contactPhone) VALUES (1,'Top Talent Agency','toptalent@example.com','+1-800-123-4567'),(2,'Job Connect','jobconnect@example.com','+1-900-987-6543');\n",
      "question": "Which recruitment agencies have already conducted the interviews?",
      "gold_queries": [
        "SELECT r.agencyName\r\nFROM Position p\r\nJOIN Recruitment_Agency r ON p.RecruitmentAgencyId = r.id\r\nLEFT JOIN Applicant a ON p.id = a.positionId\r\nLEFT JOIN Interview i ON a.id = i.applicantId\r\nWHERE status = 'Completed'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Which recruitment agencies have interviewed candidates for positions on behalf of companies?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT DISTINCT RA.agencyName \nFROM Recruitment_Agency RA \nJOIN Position P ON RA.id = P.recruitmentAgencyId \nJOIN Interview I ON P.id = I.positionId"
          ]
        },
        {
          "interpretation": "Which recruitment agencies are associated with the positions that have been recruited for?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT Recruitment_Agency.agencyName\nFROM Recruitment_Agency\nJOIN Position ON Recruitment_Agency.id = Position.recruitmentAgencyId"
          ]
        },
        {
          "interpretation": "Which recruitment agencies have their id referenced in the positions table?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT recruitmentAgencyId FROM Position"
          ]
        },
        {
          "interpretation": "Which recruiters have already conducted interviews and worked with a recruitment agency?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT E.firstName, E.lastName\nFROM Employee E\nJOIN Interview I ON E.id = I.interviewerId\nJOIN Position P ON I.positionId = P.id\nWHERE P.recruitmentAgencyId IS NOT NULL"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "one_found": true,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Job Postings/vague_2tabs_recruiter/vague_2tabs_recruiter.sqlite",
      "db_dump": "CREATE TABLE Applicant (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    positionId INTEGER,\n    FOREIGN KEY (positionId) REFERENCES Position(id)\n);\nCREATE TABLE Company (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Employee (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    role TEXT,\n    hireDate TEXT\n);\nCREATE TABLE Interview (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date DATETIME,\n    time TEXT,\n    applicantId INTEGER,\n    interviewerId INTEGER,\n    positionId INTEGER,\n    status TEXT ,\n    FOREIGN KEY (applicantId) REFERENCES Applicant(id),\n    FOREIGN KEY (interviewerId) REFERENCES Employee(id),\n    FOREIGN KEY (positionId) REFERENCES Position(id)\n);\nCREATE TABLE Position (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    description TEXT,\n    salary DECIMAL(10,2) ,\n    companyId INTEGER,\n    recruitmentAgencyId INTEGER,\n    FOREIGN KEY (companyId) REFERENCES Company(id),\n    FOREIGN KEY (recruitmentAgencyId) REFERENCES Recruitment_Agency(id)\n);\nCREATE TABLE Recruitment_Agency (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    agencyName TEXT,\n    contactEmail TEXT,\n    contactPhone TEXT\n);\n\nINSERT INTO \"Applicant\" (id,firstName,lastName,email,phoneNumber,positionId) VALUES (1,'John','Smith','johnsmith@example.com','+1-123-456-7890',1),(2,'Jane','Doe','janedoe@example.com','+1-987-654-3210',1);\nINSERT INTO \"Company\" (id,name,location) VALUES (1,'Tech Solutions','San Francisco'),(2,'Software Inc.','New York');\nINSERT INTO \"Employee\" (id,firstName,lastName,email,phoneNumber,role,hireDate) VALUES (1,'Alice','Wonderland','aliceland@example.com','+1-123-456-7890','HR Manager','2022-01-01'),(2,'Bob','Builder','bobbuilder@example.com','+1-987-654-3210','Engineering Director','2021-07-15');\nINSERT INTO \"Interview\" (id,date,time,applicantId,interviewerId,positionId,status) VALUES (1,'2023-01-15','10:00 AM',1,1,1,'Pending'),(2,'2023-01-16','11:00 AM',2,2,1,'Completed');\nINSERT INTO \"Position\" (id,title,description,salary,companyId,recruitmentAgencyId) VALUES (1,'Software Engineer','Develop and maintain software applications.',90000,1,1),(2,'Data Analyst','Analyze data to provide insights and recommendations.',80000,1,2);\nINSERT INTO \"Recruitment_Agency\" (id,agencyName,contactEmail,contactPhone) VALUES (1,'Top Talent Agency','toptalent@example.com','+1-800-123-4567'),(2,'Job Connect','jobconnect@example.com','+1-900-987-6543');\n",
      "question": "Which tech companies have already conducted the interviews?",
      "gold_queries": [
        "SELECT r.name\r\nFROM Position p\r\nJOIN Company r ON p.companyId = r.id\r\nLEFT JOIN Applicant a ON p.id = a.positionId\r\nLEFT JOIN Interview i ON a.id = i.applicantId\r\nWHERE status = 'Completed'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Find all companies that are referenced in the Position table directly (by companyId).",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT DISTINCT C.name \nFROM Company C\nJOIN Position P ON C.id = P.companyId"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "one_found": true,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Job Postings/vague_2tabs_recruiter/vague_2tabs_recruiter.sqlite",
      "db_dump": "CREATE TABLE Applicant (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    positionId INTEGER,\n    FOREIGN KEY (positionId) REFERENCES Position(id)\n);\nCREATE TABLE Company (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    location TEXT\n);\nCREATE TABLE Employee (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    role TEXT,\n    hireDate TEXT\n);\nCREATE TABLE Interview (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date DATETIME,\n    time TEXT,\n    applicantId INTEGER,\n    interviewerId INTEGER,\n    positionId INTEGER,\n    status TEXT ,\n    FOREIGN KEY (applicantId) REFERENCES Applicant(id),\n    FOREIGN KEY (interviewerId) REFERENCES Employee(id),\n    FOREIGN KEY (positionId) REFERENCES Position(id)\n);\nCREATE TABLE Position (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    description TEXT,\n    salary DECIMAL(10,2) ,\n    companyId INTEGER,\n    recruitmentAgencyId INTEGER,\n    FOREIGN KEY (companyId) REFERENCES Company(id),\n    FOREIGN KEY (recruitmentAgencyId) REFERENCES Recruitment_Agency(id)\n);\nCREATE TABLE Recruitment_Agency (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    agencyName TEXT,\n    contactEmail TEXT,\n    contactPhone TEXT\n);\n\nINSERT INTO \"Applicant\" (id,firstName,lastName,email,phoneNumber,positionId) VALUES (1,'John','Smith','johnsmith@example.com','+1-123-456-7890',1),(2,'Jane','Doe','janedoe@example.com','+1-987-654-3210',1);\nINSERT INTO \"Company\" (id,name,location) VALUES (1,'Tech Solutions','San Francisco'),(2,'Software Inc.','New York');\nINSERT INTO \"Employee\" (id,firstName,lastName,email,phoneNumber,role,hireDate) VALUES (1,'Alice','Wonderland','aliceland@example.com','+1-123-456-7890','HR Manager','2022-01-01'),(2,'Bob','Builder','bobbuilder@example.com','+1-987-654-3210','Engineering Director','2021-07-15');\nINSERT INTO \"Interview\" (id,date,time,applicantId,interviewerId,positionId,status) VALUES (1,'2023-01-15','10:00 AM',1,1,1,'Pending'),(2,'2023-01-16','11:00 AM',2,2,1,'Completed');\nINSERT INTO \"Position\" (id,title,description,salary,companyId,recruitmentAgencyId) VALUES (1,'Software Engineer','Develop and maintain software applications.',90000,1,1),(2,'Data Analyst','Analyze data to provide insights and recommendations.',80000,1,2);\nINSERT INTO \"Recruitment_Agency\" (id,agencyName,contactEmail,contactPhone) VALUES (1,'Top Talent Agency','toptalent@example.com','+1-800-123-4567'),(2,'Job Connect','jobconnect@example.com','+1-900-987-6543');\n",
      "question": "Who has already conducted the interview?",
      "gold_queries": [
        "SELECT r.name\r\nFROM Position p\r\nJOIN Company r ON p.companyId = r.id\r\nLEFT JOIN Applicant a ON p.id = a.positionId\r\nLEFT JOIN Interview i ON a.id = i.applicantId\r\nWHERE status = 'Completed'",
        "SELECT r.agencyName\r\nFROM Position p\r\nJOIN Recruitment_Agency r ON p.RecruitmentAgencyId = r.id\r\nLEFT JOIN Applicant a ON p.id = a.positionId\r\nLEFT JOIN Interview i ON a.id = i.applicantId\r\nWHERE status = 'Completed'",
        "SELECT r.name, ag.agencyName\r\nFROM Position p\r\nJOIN Company r ON p.companyId = r.id\r\nLEFT JOIN Applicant a ON p.id = a.positionId\r\nLEFT JOIN Interview i ON a.id = i.applicantId\r\nJOIN Recruitment_Agency ag ON p.RecruitmentAgencyId = ag.id WHERE status = 'Completed'"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "The person who already received an interview invitation.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT a.firstName, a.lastName\nFROM Applicant a\nJOIN Interview i ON a.id = i.applicantId\nWHERE i.status = 'Pending'"
          ]
        },
        {
          "interpretation": "The person who uploaded or entered the interview data into the database.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT firstName, lastName FROM Employee WHERE id = (SELECT interviewerId FROM Interview LIMIT 1)"
          ]
        },
        {
          "interpretation": "The user who is responsible for follow-up communication regarding the interview.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Employee.firstName, Employee.lastName, Employee.email, Employee.phoneNumber\nFROM Interview\nJOIN Employee ON Interview.interviewerId = Employee.id\nWHERE Interview.id = (SELECT id FROM Interview ORDER BY date DESC LIMIT 1)"
          ]
        },
        {
          "interpretation": "The person who has already been informed about the interview status.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Applicant.firstName, Applicant.lastName, Interview.status \nFROM Applicant \nJOIN Interview ON Applicant.id = Interview.applicantId \nWHERE Interview.status IN ('Completed', 'Rejected', 'Offered')"
          ]
        },
        {
          "interpretation": "The employee who was involved in the interview (interviewer or not).",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT firstName, lastName FROM Employee WHERE id IN (SELECT interviewerId FROM Interview)"
          ]
        },
        {
          "interpretation": "The person who already had an interview.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT Applicant.firstName, Applicant.lastName \nFROM Applicant \nJOIN Interview ON Applicant.id = Interview.applicantId"
          ]
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Healthcare/vague_2tabs_target/vague_2tabs_target.sqlite",
      "db_dump": "CREATE TABLE Age_Group (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT\n);\nCREATE TABLE Appointment (\n    appointment_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date TIMESTAMP,\n    patient_id INTEGER,\n    doctor_id INTEGER,\n    medicalrecord_id INTEGER,\n    FOREIGN KEY(patient_id) REFERENCES Patient(patient_id),\n    FOREIGN KEY(doctor_id) REFERENCES Doctor(doctor_id),\n    FOREIGN KEY(medicalrecord_id) REFERENCES MedicalRecord(medicalrecord_id)\n);\nCREATE TABLE Doctor (\n    doctor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    specialty TEXT\n);\nCREATE TABLE Health_Condition (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    condition_name TEXT\n);\nCREATE TABLE MedicalRecord (\n    medicalrecord_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    patient_id INTEGER,\n    diagnosis TEXT,\n    treatment_plan TEXT,\n    FOREIGN KEY(patient_id) REFERENCES Patient(patient_id)\n);\nCREATE TABLE Patient (\n    patient_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    birthdate DATE,\n    phone_number VARCHAR(15),\n    age_group_id INTEGER, full_name TEXT,\n    FOREIGN KEY(age_group_id) REFERENCES Age_Group(id)\n);\nCREATE TABLE Vaccine (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    vaccine_name TEXT,\n    age_group_id INTEGER,\n    health_condition_id INTEGER,\n    FOREIGN KEY(age_group_id) REFERENCES Age_Group(id),\n    FOREIGN KEY(health_condition_id) REFERENCES Health_Condition(id)\n);\n\nINSERT INTO \"Age_Group\" (id,name) VALUES (1,'0-4'),(2,'5-9'),(3,'10-13'),(4,'14-17'),(5,'18+');\nINSERT INTO \"Appointment\" (appointment_id,date,patient_id,doctor_id,medicalrecord_id) VALUES (1,'2022-10-12 10:00:00',1,1,1),(2,'2022-10-13 14:00:00',2,2,2),(3,'2022-10-14 16:00:00',3,3,3),(4,'2022-10-15 18:00:00',4,4,4),(5,'2022-10-16 20:00:00',5,5,5);\nINSERT INTO \"Doctor\" (doctor_id,first_name,last_name,specialty) VALUES (1,'Dr.','Jones','Cardiology'),(2,'Dr.','Garcia','Endocrinology'),(3,'Dr.','Lee','Pediatrics'),(4,'Dr.','Taylor','Neurology'),(5,'Dr.','Adams','Nephrology');\nINSERT INTO \"Health_Condition\" (id,condition_name) VALUES (1,'Diabetes'),(2,'Hypertension'),(3,'Asthma'),(4,'Allergy'),(5,'Obesity');\nINSERT INTO \"MedicalRecord\" (medicalrecord_id,patient_id,diagnosis,treatment_plan) VALUES (1,1,'Type 2 Diabetes','Diet and Exercise'),(2,2,'Epilepsy','Antiepileptic Drugs'),(3,3,'Anxiety Disorder','Counseling and Medication'),(4,4,'Depression','Antidepressants'),(5,5,'Asthma','Inhalers');\nINSERT INTO \"Patient\" (patient_id,birthdate,phone_number,age_group_id,full_name) VALUES (1,'1995-06-15','555-123-4567',3,'John Doe'),(2,'2000-07-20','555-987-6543',5,'Jane Smith'),(3,'1990-08-25','555-555-5555',4,'Michael Brown'),(4,'1988-09-15','555-333-3333',2,'Emily Green'),(5,'1975-10-20','555-222-2222',6,'William Black');\nINSERT INTO \"Vaccine\" (id,vaccine_name,age_group_id,health_condition_id) VALUES (1,'Flu',2,4),(2,'Pneumonia',3,1),(3,'Hepatitis B',1,3),(4,'Meningococcal',4,2),(5,'Varicella',1,5);\n",
      "question": "List each patient along with suitable vaccines, their age groups and health conditions",
      "gold_queries": [
        "SELECT Patient.full_name, Health_Condition.condition_name, Age_Group.Name, Vaccine.Vaccine_Name\r\nFROM Patient INNER JOIN Age_Group ON Patient.Age_Group_Id = Age_Group.Id \r\nINNER JOIN Vaccine ON Patient.Age_Group_Id = Vaccine.Age_Group_ID INNER JOIN Health_Condition ON Health_Condition.Id = Vaccine.Health_Condition_Id"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Provide detailed information about patients from the database, including their age groups, suitable vaccines, and health conditions they may be at risk for.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Patient.full_name, Age_Group.name AS age_group, Vaccine.vaccine_name, Health_Condition.condition_name\nFROM Patient\nJOIN Age_Group ON Patient.age_group_id = Age_Group.id\nLEFT JOIN Vaccine ON Patient.age_group_id = Vaccine.age_group_id\nLEFT JOIN Health_Condition ON Vaccine.health_condition_id = Health_Condition.id"
          ]
        },
        {
          "interpretation": "List patients with their health conditions with corresponding suitable vaccines based on the age groups they belong to.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.full_name, HC.condition_name, V.vaccine_name\nFROM Patient P\nJOIN Age_Group AG ON P.age_group_id = AG.id\nJOIN Vaccine V ON V.age_group_id = AG.id\nJOIN Health_Condition HC ON HC.id = V.health_condition_id\nLEFT JOIN MedicalRecord MR ON MR.patient_id = P.patient_id\nWHERE MR.diagnosis = HC.condition_name"
          ]
        },
        {
          "interpretation": "Display patients from the database who should receive age group-specific vaccines considering their age groups and health conditions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.full_name, VP.vaccine_name\nFROM Patient P\nJOIN Age_Group AG ON P.age_group_id = AG.id\nJOIN Vaccine VP ON AG.id = VP.age_group_id\nLEFT JOIN MedicalRecord MR ON P.patient_id = MR.patient_id\nLEFT JOIN Health_Condition HC ON MR.diagnosis = HC.condition_name OR VP.health_condition_id = HC.id"
          ]
        },
        {
          "interpretation": "Display each patient from the database along with suitable vaccines that treat their corresponding health conditions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    P.full_name,\n    V.vaccine_name\nFROM \n    Patient P\nJOIN \n    MedicalRecord MR ON P.patient_id = MR.patient_id\nJOIN \n    Health_Condition HC ON MR.diagnosis LIKE '%' || HC.condition_name || '%'\nJOIN \n    Vaccine V ON HC.id = V.health_condition_id AND V.age_group_id = P.age_group_id"
          ]
        },
        {
          "interpretation": "Display all patient information, including age groups, and suitable vaccines that are relevant to their health conditions or age groups.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.patient_id, P.birthdate, P.phone_number, AG.name AS age_group, V.vaccine_name\nFROM Patient P\nJOIN Age_Group AG ON P.age_group_id = AG.id\nLEFT JOIN MedicalRecord MR ON P.patient_id = MR.patient_id\nLEFT JOIN Health_Condition HC ON MR.diagnosis LIKE '%' || HC.condition_name || '%'\nLEFT JOIN Vaccine V ON (V.age_group_id = AG.id OR V.health_condition_id = HC.id)"
          ]
        },
        {
          "interpretation": "List patients who require vaccines that suit their age groups, taking into consideration their age and health conditions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.full_name\nFROM Patient P\nJOIN Vaccine V ON P.age_group_id = V.age_group_id\nJOIN Health_Condition HC ON V.health_condition_id = HC.id\nJOIN MedicalRecord MR ON P.patient_id = MR.patient_id\nWHERE HC.condition_name IN (\n    SELECT DISTINCT HC.condition_name\n    FROM Health_Condition HC\n    JOIN Vaccine V ON HC.id = V.health_condition_id\n    WHERE V.age_group_id = P.age_group_id\n)"
          ]
        },
        {
          "interpretation": "Show suitable vaccines for each patient based on their age groups and health conditions, including the age groups and health conditions.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT P.full_name, AG.name AS age_group, HC.condition_name, V.vaccine_name\nFROM Patient P\nJOIN Age_Group AG ON P.age_group_id = AG.id\nJOIN MedicalRecord MR ON P.patient_id = MR.patient_id\nJOIN Health_Condition HC ON HC.id = V.health_condition_id\nJOIN Vaccine V ON V.age_group_id = AG.id\nWHERE HC.id IN (\n    SELECT HC.id\n    FROM Health_Condition HC\n    JOIN Vaccine V ON HC.id = V.health_condition_id\n    WHERE V.age_group_id = P.age_group_id\n)"
          ]
        },
        {
          "interpretation": "Show the patient data, including their age groups, from the database, along with all suitable vaccines and their respective health conditions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    Patient.patient_id,\n    Patient.full_name,\n    Patient.birthdate,\n    Patient.phone_number,\n    Age_Group.name AS age_group,\n    Vaccine.vaccine_name,\n    Health_Condition.condition_name\nFROM \n    Patient\nJOIN \n    Age_Group ON Patient.age_group_id = Age_Group.id\nLEFT JOIN \n    Vaccine ON Age_Group.id = Vaccine.age_group_id\nLEFT JOIN \n    Health_Condition ON Vaccine.health_condition_id = Health_Condition.id"
          ]
        }
      ],
      "num_unique_execution_results": 8,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.125,
        "one_found": true,
        "f1_score": 0.2222222222222222,
        "num_queries": 8,
        "num_unique_queries": 8,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Healthcare/vague_2tabs_target/vague_2tabs_target.sqlite",
      "db_dump": "CREATE TABLE Age_Group (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT\n);\nCREATE TABLE Appointment (\n    appointment_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date TIMESTAMP,\n    patient_id INTEGER,\n    doctor_id INTEGER,\n    medicalrecord_id INTEGER,\n    FOREIGN KEY(patient_id) REFERENCES Patient(patient_id),\n    FOREIGN KEY(doctor_id) REFERENCES Doctor(doctor_id),\n    FOREIGN KEY(medicalrecord_id) REFERENCES MedicalRecord(medicalrecord_id)\n);\nCREATE TABLE Doctor (\n    doctor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    specialty TEXT\n);\nCREATE TABLE Health_Condition (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    condition_name TEXT\n);\nCREATE TABLE MedicalRecord (\n    medicalrecord_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    patient_id INTEGER,\n    diagnosis TEXT,\n    treatment_plan TEXT,\n    FOREIGN KEY(patient_id) REFERENCES Patient(patient_id)\n);\nCREATE TABLE Patient (\n    patient_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    birthdate DATE,\n    phone_number VARCHAR(15),\n    age_group_id INTEGER, full_name TEXT,\n    FOREIGN KEY(age_group_id) REFERENCES Age_Group(id)\n);\nCREATE TABLE Vaccine (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    vaccine_name TEXT,\n    age_group_id INTEGER,\n    health_condition_id INTEGER,\n    FOREIGN KEY(age_group_id) REFERENCES Age_Group(id),\n    FOREIGN KEY(health_condition_id) REFERENCES Health_Condition(id)\n);\n\nINSERT INTO \"Age_Group\" (id,name) VALUES (1,'0-4'),(2,'5-9'),(3,'10-13'),(4,'14-17'),(5,'18+');\nINSERT INTO \"Appointment\" (appointment_id,date,patient_id,doctor_id,medicalrecord_id) VALUES (1,'2022-10-12 10:00:00',1,1,1),(2,'2022-10-13 14:00:00',2,2,2),(3,'2022-10-14 16:00:00',3,3,3),(4,'2022-10-15 18:00:00',4,4,4),(5,'2022-10-16 20:00:00',5,5,5);\nINSERT INTO \"Doctor\" (doctor_id,first_name,last_name,specialty) VALUES (1,'Dr.','Jones','Cardiology'),(2,'Dr.','Garcia','Endocrinology'),(3,'Dr.','Lee','Pediatrics'),(4,'Dr.','Taylor','Neurology'),(5,'Dr.','Adams','Nephrology');\nINSERT INTO \"Health_Condition\" (id,condition_name) VALUES (1,'Diabetes'),(2,'Hypertension'),(3,'Asthma'),(4,'Allergy'),(5,'Obesity');\nINSERT INTO \"MedicalRecord\" (medicalrecord_id,patient_id,diagnosis,treatment_plan) VALUES (1,1,'Type 2 Diabetes','Diet and Exercise'),(2,2,'Epilepsy','Antiepileptic Drugs'),(3,3,'Anxiety Disorder','Counseling and Medication'),(4,4,'Depression','Antidepressants'),(5,5,'Asthma','Inhalers');\nINSERT INTO \"Patient\" (patient_id,birthdate,phone_number,age_group_id,full_name) VALUES (1,'1995-06-15','555-123-4567',3,'John Doe'),(2,'2000-07-20','555-987-6543',5,'Jane Smith'),(3,'1990-08-25','555-555-5555',4,'Michael Brown'),(4,'1988-09-15','555-333-3333',2,'Emily Green'),(5,'1975-10-20','555-222-2222',6,'William Black');\nINSERT INTO \"Vaccine\" (id,vaccine_name,age_group_id,health_condition_id) VALUES (1,'Flu',2,4),(2,'Pneumonia',3,1),(3,'Hepatitis B',1,3),(4,'Meningococcal',4,2),(5,'Varicella',1,5);\n",
      "question": "List each patient along with suitable vaccines and their health conditions",
      "gold_queries": [
        "SELECT Patient.full_name, Health_Condition.condition_name, Vaccine.Vaccine_Name\r\nFROM Patient INNER JOIN Vaccine ON Patient.Age_Group_Id = Vaccine.Age_Group_ID INNER JOIN  Health_Condition ON Vaccine.Health_Condition_Id = Health_Condition.Id"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List each patient along with suitable vaccines based on age group, without considering their health conditions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.full_name, V.vaccine_name \nFROM Patient P \nJOIN Age_Group AG ON P.age_group_id = AG.id \nJOIN Vaccine V ON AG.id = V.age_group_id"
          ]
        },
        {
          "interpretation": "List patients who have no health conditions and are therefore eligible for all vaccines that target a specific age group.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.patient_id, P.full_name\nFROM Patient P\nLEFT JOIN MedicalRecord MR ON P.patient_id = MR.patient_id\nWHERE MR.patient_id IS NULL"
          ]
        },
        {
          "interpretation": "Show a list of patients sorted by the number of suitable vaccines they are eligible for, based on their age group or health conditions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.full_name, COUNT(V.id) AS suitable_vaccines\nFROM Patient P\nLEFT JOIN Vaccine V ON P.age_group_id = V.age_group_id OR EXISTS (\n    SELECT 1\n    FROM MedicalRecord MR\n    JOIN Health_Condition HC ON MR.diagnosis = HC.condition_name\n    WHERE MR.patient_id = P.patient_id AND HC.id = V.health_condition_id\n)\nGROUP BY P.patient_id, P.full_name\nORDER BY suitable_vaccines DESC"
          ]
        },
        {
          "interpretation": "List each vaccine name along with the age group or health condition it targets, along with the patients who fall into that category.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT V.vaccine_name, AG.name AS age_group, HC.condition_name, P.full_name\nFROM Vaccine V\nLEFT JOIN Age_Group AG ON V.age_group_id = AG.id\nLEFT JOIN Health_Condition HC ON V.health_condition_id = HC.id\nLEFT JOIN Patient P ON (P.age_group_id = V.age_group_id OR EXISTS (\n    SELECT MR.medicalrecord_id\n    FROM MedicalRecord MR\n    WHERE MR.patient_id = P.patient_id AND MR.diagnosis = HC.condition_name\n))"
          ]
        },
        {
          "interpretation": "List the patients in ascending order by the age they are eligible for the vaccine based on their birthdate.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.full_name\nFROM Patient P\nJOIN Age_Group AG ON P.age_group_id = AG.id\nJOIN Vaccine V ON AG.id = V.age_group_id\nORDER BY P.birthdate ASC"
          ]
        },
        {
          "interpretation": "Note: Interpretation 15 may be further complicated by additional factors beyond birthdate.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(*) \nFROM Patient \nWHERE age_group_id = (SELECT id FROM Age_Group WHERE name = '18+')"
          ]
        },
        {
          "interpretation": "Identify the age groups with the most suitable vaccines and list the patients in those age groups.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Age_Group.name, Patient.full_name\nFROM Vaccine\nJOIN Age_Group ON Vaccine.age_group_id = Age_Group.id\nJOIN Patient ON Age_Group.id = Patient.age_group_id"
          ]
        },
        {
          "interpretation": "List each patient's age group along with suitable vaccines for that age group and any health conditions they may have.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AG.name AS age_group, V.vaccine_name, HC.condition_name\nFROM Patient P\nJOIN Age_Group AG ON P.age_group_id = AG.id\nJOIN Vaccine V ON AG.id = V.age_group_id\nJOIN Health_Condition HC ON V.health_condition_id = HC.id"
          ]
        },
        {
          "interpretation": "List all patients who have a matching health condition with a respective vaccine, along with the corresponding vaccine name.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.full_name, V.vaccine_name\nFROM Patient P\nJOIN MedicalRecord MR ON P.patient_id = MR.patient_id\nJOIN Health_Condition HC ON MR.diagnosis = HC.condition_name\nJOIN Vaccine V ON HC.id = V.health_condition_id"
          ]
        },
        {
          "interpretation": "List each patient along with the age group suited for the vaccination, along with the list of vaccines and their health conditions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.full_name, AG.name AS age_group, V.vaccine_name, HC.condition_name\nFROM Patient P\nJOIN Age_Group AG ON P.age_group_id = AG.id\nJOIN Vaccine V ON AG.id = V.age_group_id\nJOIN Health_Condition HC ON V.health_condition_id = HC.id"
          ]
        },
        {
          "interpretation": "List the version of the vaccine a patient is eligible for based on the last character in the patient's medical record number.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT V.vaccine_name\nFROM MedicalRecord M\nJOIN Vaccine V ON M.medicalrecord_id % 10 = V.id\nWHERE M.patient_id = (SELECT patient_id FROM Appointment ORDER BY date DESC LIMIT 1)"
          ]
        },
        {
          "interpretation": "List all patients along with suitable vaccines and their entire list of health conditions as a comma-separated string or a single string containing all conditions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT p.full_name, GROUP_CONCAT(v.vaccine_name) AS suitable_vaccines, GROUP_CONCAT(hc.condition_name) AS health_conditions\nFROM Patient p\nJOIN Age_Group ag ON p.age_group_id = ag.id\nJOIN Vaccine v ON ag.id = v.age_group_id\nLEFT JOIN MedicalRecord mr ON p.patient_id = mr.patient_id\nLEFT JOIN Health_Condition hc ON mr.diagnosis = hc.condition_name OR mr.diagnosis LIKE '%' || hc.condition_name || '%'\nGROUP BY p.patient_id"
          ]
        },
        {
          "interpretation": "List patients who have no health conditions and are therefore not eligible for any vaccine that targets a specific health condition.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT full_name FROM Patient WHERE patient_id NOT IN (SELECT patient_id FROM MedicalRecord WHERE diagnosis IN (SELECT condition_name FROM Health_Condition))"
          ]
        },
        {
          "interpretation": "List each patient along with suitable vaccines based on their individual health conditions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.full_name, V.vaccine_name\nFROM Patient P\nJOIN MedicalRecord MR ON P.patient_id = MR.patient_id\nJOIN Health_Condition HC ON MR.diagnosis LIKE '%' || HC.condition_name || '%'\nJOIN Vaccine V ON HC.id = V.health_condition_id"
          ]
        }
      ],
      "num_unique_execution_results": 14,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 14,
        "num_unique_queries": 14,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Healthcare/vague_2tabs_target/vague_2tabs_target.sqlite",
      "db_dump": "CREATE TABLE Age_Group (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT\n);\nCREATE TABLE Appointment (\n    appointment_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date TIMESTAMP,\n    patient_id INTEGER,\n    doctor_id INTEGER,\n    medicalrecord_id INTEGER,\n    FOREIGN KEY(patient_id) REFERENCES Patient(patient_id),\n    FOREIGN KEY(doctor_id) REFERENCES Doctor(doctor_id),\n    FOREIGN KEY(medicalrecord_id) REFERENCES MedicalRecord(medicalrecord_id)\n);\nCREATE TABLE Doctor (\n    doctor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    specialty TEXT\n);\nCREATE TABLE Health_Condition (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    condition_name TEXT\n);\nCREATE TABLE MedicalRecord (\n    medicalrecord_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    patient_id INTEGER,\n    diagnosis TEXT,\n    treatment_plan TEXT,\n    FOREIGN KEY(patient_id) REFERENCES Patient(patient_id)\n);\nCREATE TABLE Patient (\n    patient_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    birthdate DATE,\n    phone_number VARCHAR(15),\n    age_group_id INTEGER, full_name TEXT,\n    FOREIGN KEY(age_group_id) REFERENCES Age_Group(id)\n);\nCREATE TABLE Vaccine (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    vaccine_name TEXT,\n    age_group_id INTEGER,\n    health_condition_id INTEGER,\n    FOREIGN KEY(age_group_id) REFERENCES Age_Group(id),\n    FOREIGN KEY(health_condition_id) REFERENCES Health_Condition(id)\n);\n\nINSERT INTO \"Age_Group\" (id,name) VALUES (1,'0-4'),(2,'5-9'),(3,'10-13'),(4,'14-17'),(5,'18+');\nINSERT INTO \"Appointment\" (appointment_id,date,patient_id,doctor_id,medicalrecord_id) VALUES (1,'2022-10-12 10:00:00',1,1,1),(2,'2022-10-13 14:00:00',2,2,2),(3,'2022-10-14 16:00:00',3,3,3),(4,'2022-10-15 18:00:00',4,4,4),(5,'2022-10-16 20:00:00',5,5,5);\nINSERT INTO \"Doctor\" (doctor_id,first_name,last_name,specialty) VALUES (1,'Dr.','Jones','Cardiology'),(2,'Dr.','Garcia','Endocrinology'),(3,'Dr.','Lee','Pediatrics'),(4,'Dr.','Taylor','Neurology'),(5,'Dr.','Adams','Nephrology');\nINSERT INTO \"Health_Condition\" (id,condition_name) VALUES (1,'Diabetes'),(2,'Hypertension'),(3,'Asthma'),(4,'Allergy'),(5,'Obesity');\nINSERT INTO \"MedicalRecord\" (medicalrecord_id,patient_id,diagnosis,treatment_plan) VALUES (1,1,'Type 2 Diabetes','Diet and Exercise'),(2,2,'Epilepsy','Antiepileptic Drugs'),(3,3,'Anxiety Disorder','Counseling and Medication'),(4,4,'Depression','Antidepressants'),(5,5,'Asthma','Inhalers');\nINSERT INTO \"Patient\" (patient_id,birthdate,phone_number,age_group_id,full_name) VALUES (1,'1995-06-15','555-123-4567',3,'John Doe'),(2,'2000-07-20','555-987-6543',5,'Jane Smith'),(3,'1990-08-25','555-555-5555',4,'Michael Brown'),(4,'1988-09-15','555-333-3333',2,'Emily Green'),(5,'1975-10-20','555-222-2222',6,'William Black');\nINSERT INTO \"Vaccine\" (id,vaccine_name,age_group_id,health_condition_id) VALUES (1,'Flu',2,4),(2,'Pneumonia',3,1),(3,'Hepatitis B',1,3),(4,'Meningococcal',4,2),(5,'Varicella',1,5);\n",
      "question": "List each patient along with suitable vaccines and their age groups",
      "gold_queries": [
        "SELECT Patient.full_name, Age_Group.Name, Vaccine.Vaccine_Name\r\nFROM Patient INNER JOIN Age_Group ON Patient.Age_Group_Id = Age_Group.Id \r\nINNER JOIN Vaccine ON Patient.Age_Group_Id = Vaccine.Age_Group_ID"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Show each patient and list vaccines corresponding to their age group.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT p.full_name, v.vaccine_name\nFROM Patient p\nJOIN Age_Group ag ON p.age_group_id = ag.id\nJOIN Vaccine v ON ag.id = v.age_group_id"
          ]
        },
        {
          "interpretation": "For each patient, list all age-related vaccine information including the start and end age range.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT P.full_name, AG.name AS age_range, V.vaccine_name\nFROM Patient P\nJOIN Age_Group AG ON P.age_group_id = AG.id\nJOIN Vaccine V ON AG.id = V.age_group_id"
          ]
        },
        {
          "interpretation": "Display age groups for each patient and list vaccines associated with these groups.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Age_Group.name, Vaccine.vaccine_name\nFROM Patient\nJOIN Age_Group ON Patient.age_group_id = Age_Group.id\nJOIN Vaccine ON Age_Group.id = Vaccine.age_group_id"
          ]
        },
        {
          "interpretation": "Include patients in the list if they fit the specified age range for any vaccine.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT P.full_name\nFROM Patient P\nJOIN Age_Group AG ON P.age_group_id = AG.id\nJOIN Vaccine V ON AG.id = V.age_group_id"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "one_found": true,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Healthcare/vague_2tabs_target/vague_2tabs_target.sqlite",
      "db_dump": "CREATE TABLE Age_Group (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT\n);\nCREATE TABLE Appointment (\n    appointment_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date TIMESTAMP,\n    patient_id INTEGER,\n    doctor_id INTEGER,\n    medicalrecord_id INTEGER,\n    FOREIGN KEY(patient_id) REFERENCES Patient(patient_id),\n    FOREIGN KEY(doctor_id) REFERENCES Doctor(doctor_id),\n    FOREIGN KEY(medicalrecord_id) REFERENCES MedicalRecord(medicalrecord_id)\n);\nCREATE TABLE Doctor (\n    doctor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    specialty TEXT\n);\nCREATE TABLE Health_Condition (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    condition_name TEXT\n);\nCREATE TABLE MedicalRecord (\n    medicalrecord_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    patient_id INTEGER,\n    diagnosis TEXT,\n    treatment_plan TEXT,\n    FOREIGN KEY(patient_id) REFERENCES Patient(patient_id)\n);\nCREATE TABLE Patient (\n    patient_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    birthdate DATE,\n    phone_number VARCHAR(15),\n    age_group_id INTEGER, full_name TEXT,\n    FOREIGN KEY(age_group_id) REFERENCES Age_Group(id)\n);\nCREATE TABLE Vaccine (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    vaccine_name TEXT,\n    age_group_id INTEGER,\n    health_condition_id INTEGER,\n    FOREIGN KEY(age_group_id) REFERENCES Age_Group(id),\n    FOREIGN KEY(health_condition_id) REFERENCES Health_Condition(id)\n);\n\nINSERT INTO \"Age_Group\" (id,name) VALUES (1,'0-4'),(2,'5-9'),(3,'10-13'),(4,'14-17'),(5,'18+');\nINSERT INTO \"Appointment\" (appointment_id,date,patient_id,doctor_id,medicalrecord_id) VALUES (1,'2022-10-12 10:00:00',1,1,1),(2,'2022-10-13 14:00:00',2,2,2),(3,'2022-10-14 16:00:00',3,3,3),(4,'2022-10-15 18:00:00',4,4,4),(5,'2022-10-16 20:00:00',5,5,5);\nINSERT INTO \"Doctor\" (doctor_id,first_name,last_name,specialty) VALUES (1,'Dr.','Jones','Cardiology'),(2,'Dr.','Garcia','Endocrinology'),(3,'Dr.','Lee','Pediatrics'),(4,'Dr.','Taylor','Neurology'),(5,'Dr.','Adams','Nephrology');\nINSERT INTO \"Health_Condition\" (id,condition_name) VALUES (1,'Diabetes'),(2,'Hypertension'),(3,'Asthma'),(4,'Allergy'),(5,'Obesity');\nINSERT INTO \"MedicalRecord\" (medicalrecord_id,patient_id,diagnosis,treatment_plan) VALUES (1,1,'Type 2 Diabetes','Diet and Exercise'),(2,2,'Epilepsy','Antiepileptic Drugs'),(3,3,'Anxiety Disorder','Counseling and Medication'),(4,4,'Depression','Antidepressants'),(5,5,'Asthma','Inhalers');\nINSERT INTO \"Patient\" (patient_id,birthdate,phone_number,age_group_id,full_name) VALUES (1,'1995-06-15','555-123-4567',3,'John Doe'),(2,'2000-07-20','555-987-6543',5,'Jane Smith'),(3,'1990-08-25','555-555-5555',4,'Michael Brown'),(4,'1988-09-15','555-333-3333',2,'Emily Green'),(5,'1975-10-20','555-222-2222',6,'William Black');\nINSERT INTO \"Vaccine\" (id,vaccine_name,age_group_id,health_condition_id) VALUES (1,'Flu',2,4),(2,'Pneumonia',3,1),(3,'Hepatitis B',1,3),(4,'Meningococcal',4,2),(5,'Varicella',1,5);\n",
      "question": "List the total number of vaccines appropriate for each age group and health condition.",
      "gold_queries": [
        "SELECT Health_Condition.condition_name, Age_Group.Name, Count(*) FROM Age_Group INNER JOIN Vaccine ON Age_Group.Id = Vaccine.age_group_id INNER JOIN Health_Condition ON Health_Condition.Id = Vaccine.Health_Condition_Id\r\nGROUP BY Age_Group.Name, Health_Condition.condition_name"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Find the total number of age groups with at least one vaccine for any health condition.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(DISTINCT age_group_id) FROM Vaccine"
          ]
        },
        {
          "interpretation": "Count the number of distinct health conditions addressed by vaccines available for each age group.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Age_Group.name, COUNT(DISTINCT Health_Condition.condition_name) \nFROM Vaccine \nJOIN Age_Group ON Vaccine.age_group_id = Age_Group.id \nJOIN Health_Condition ON Vaccine.health_condition_id = Health_Condition.id \nGROUP BY Age_Group.id"
          ]
        },
        {
          "interpretation": "Calculate the total number of different vaccines that exist for each age group.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT age_group_id, COUNT(DISTINCT vaccine_name) AS total_vaccines FROM Vaccine GROUP BY age_group_id"
          ]
        },
        {
          "interpretation": "List all unique vaccines that are suitable for patients across each age group.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Age_Group.name, Vaccine.vaccine_name FROM Age_Group JOIN Vaccine ON Age_Group.id = Vaccine.age_group_id GROUP BY Age_Group.name, Vaccine.vaccine_name"
          ]
        },
        {
          "interpretation": "Count the number of unique vaccines that can be administered to patients with a certain health condition across different age groups.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(DISTINCT v.vaccine_name) \nFROM Vaccine v \nJOIN Health_Condition h ON v.health_condition_id = h.id"
          ]
        },
        {
          "interpretation": "Determine the total number of vaccines in the 'Vaccine' table for each unique health condition across all age groups.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Health_Condition.condition_name, COUNT(*) as total_vaccines\nFROM Vaccine\nJOIN Health_Condition ON Vaccine.health_condition_id = Health_Condition.id\nGROUP BY Health_Condition.condition_name"
          ]
        },
        {
          "interpretation": "Calculate the total number of age groups that can be treated with vaccines for patients with a specific health condition.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(DISTINCT age_group_id) FROM Vaccine WHERE health_condition_id = (SELECT id FROM Health_Condition WHERE condition_name = 'Specific Condition Name')"
          ]
        }
      ],
      "num_unique_execution_results": 7,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 7,
        "num_unique_queries": 7,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Healthcare/vague_2tabs_target/vague_2tabs_target.sqlite",
      "db_dump": "CREATE TABLE Age_Group (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT\n);\nCREATE TABLE Appointment (\n    appointment_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date TIMESTAMP,\n    patient_id INTEGER,\n    doctor_id INTEGER,\n    medicalrecord_id INTEGER,\n    FOREIGN KEY(patient_id) REFERENCES Patient(patient_id),\n    FOREIGN KEY(doctor_id) REFERENCES Doctor(doctor_id),\n    FOREIGN KEY(medicalrecord_id) REFERENCES MedicalRecord(medicalrecord_id)\n);\nCREATE TABLE Doctor (\n    doctor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    specialty TEXT\n);\nCREATE TABLE Health_Condition (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    condition_name TEXT\n);\nCREATE TABLE MedicalRecord (\n    medicalrecord_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    patient_id INTEGER,\n    diagnosis TEXT,\n    treatment_plan TEXT,\n    FOREIGN KEY(patient_id) REFERENCES Patient(patient_id)\n);\nCREATE TABLE Patient (\n    patient_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    birthdate DATE,\n    phone_number VARCHAR(15),\n    age_group_id INTEGER, full_name TEXT,\n    FOREIGN KEY(age_group_id) REFERENCES Age_Group(id)\n);\nCREATE TABLE Vaccine (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    vaccine_name TEXT,\n    age_group_id INTEGER,\n    health_condition_id INTEGER,\n    FOREIGN KEY(age_group_id) REFERENCES Age_Group(id),\n    FOREIGN KEY(health_condition_id) REFERENCES Health_Condition(id)\n);\n\nINSERT INTO \"Age_Group\" (id,name) VALUES (1,'0-4'),(2,'5-9'),(3,'10-13'),(4,'14-17'),(5,'18+');\nINSERT INTO \"Appointment\" (appointment_id,date,patient_id,doctor_id,medicalrecord_id) VALUES (1,'2022-10-12 10:00:00',1,1,1),(2,'2022-10-13 14:00:00',2,2,2),(3,'2022-10-14 16:00:00',3,3,3),(4,'2022-10-15 18:00:00',4,4,4),(5,'2022-10-16 20:00:00',5,5,5);\nINSERT INTO \"Doctor\" (doctor_id,first_name,last_name,specialty) VALUES (1,'Dr.','Jones','Cardiology'),(2,'Dr.','Garcia','Endocrinology'),(3,'Dr.','Lee','Pediatrics'),(4,'Dr.','Taylor','Neurology'),(5,'Dr.','Adams','Nephrology');\nINSERT INTO \"Health_Condition\" (id,condition_name) VALUES (1,'Diabetes'),(2,'Hypertension'),(3,'Asthma'),(4,'Allergy'),(5,'Obesity');\nINSERT INTO \"MedicalRecord\" (medicalrecord_id,patient_id,diagnosis,treatment_plan) VALUES (1,1,'Type 2 Diabetes','Diet and Exercise'),(2,2,'Epilepsy','Antiepileptic Drugs'),(3,3,'Anxiety Disorder','Counseling and Medication'),(4,4,'Depression','Antidepressants'),(5,5,'Asthma','Inhalers');\nINSERT INTO \"Patient\" (patient_id,birthdate,phone_number,age_group_id,full_name) VALUES (1,'1995-06-15','555-123-4567',3,'John Doe'),(2,'2000-07-20','555-987-6543',5,'Jane Smith'),(3,'1990-08-25','555-555-5555',4,'Michael Brown'),(4,'1988-09-15','555-333-3333',2,'Emily Green'),(5,'1975-10-20','555-222-2222',6,'William Black');\nINSERT INTO \"Vaccine\" (id,vaccine_name,age_group_id,health_condition_id) VALUES (1,'Flu',2,4),(2,'Pneumonia',3,1),(3,'Hepatitis B',1,3),(4,'Meningococcal',4,2),(5,'Varicella',1,5);\n",
      "question": "List the total number of vaccines appropriate for each target",
      "gold_queries": [
        "SELECT Age_Group.Name, Count(*) FROM Age_Group INNER JOIN Vaccine ON Age_Group.Id = Vaccine.age_group_id\r\nGROUP BY Age_Group.Name",
        "SELECT Health_Condition.condition_name, Count(*) FROM Health_Condition INNER JOIN Vaccine ON Health_Condition.Id = Vaccine.Health_Condition_Id\r\nGROUP BY Health_Condition.condition_name",
        "SELECT Health_Condition.condition_name, Age_Group.Name, Count(*) FROM Age_Group INNER JOIN Vaccine ON Age_Group.Id = Vaccine.age_group_id INNER JOIN Health_Condition ON Health_Condition.Id = Vaccine.Health_Condition_Id\r\nGROUP BY Age_Group.Name, Health_Condition.condition_name"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List the total number of vaccines available per age group.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Age_Group.name, COUNT(Vaccine.id) AS total_vaccines\nFROM Vaccine\nJOIN Age_Group ON Vaccine.age_group_id = Age_Group.id\nGROUP BY Age_Group.name"
          ]
        },
        {
          "interpretation": "List the total number of vaccines that are condition specific and appropriate for each particular health condition.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT HC.condition_name, COUNT(V.id) AS total_vaccines\nFROM Vaccine V\nJOIN Health_Condition HC ON V.health_condition_id = HC.id\nGROUP BY HC.condition_name"
          ]
        },
        {
          "interpretation": "List the total number of vaccines that are recommended for each patient, based on their age and any health conditions they may be suffering from.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.patient_id, COUNT(DISTINCT V.id) AS total_vaccines\nFROM Patient P\nJOIN Age_Group AG ON P.age_group_id = AG.id\nLEFT JOIN MedicalRecord MR ON P.patient_id = MR.patient_id\nLEFT JOIN Health_Condition HC ON MR.diagnosis = HC.condition_name\nLEFT JOIN Vaccine V ON AG.id = V.age_group_id OR HC.id = V.health_condition_id\nGROUP BY P.patient_id"
          ]
        },
        {
          "interpretation": "List the total number of vaccines that are age group specific and appropriate for the given age ranges.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(*) FROM Vaccine"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.6666666666666666,
        "precision": 0.5,
        "one_found": true,
        "f1_score": 0.5714285714285715,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Healthcare/vague_2tabs_target/vague_2tabs_target.sqlite",
      "db_dump": "CREATE TABLE Age_Group (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT\n);\nCREATE TABLE Appointment (\n    appointment_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date TIMESTAMP,\n    patient_id INTEGER,\n    doctor_id INTEGER,\n    medicalrecord_id INTEGER,\n    FOREIGN KEY(patient_id) REFERENCES Patient(patient_id),\n    FOREIGN KEY(doctor_id) REFERENCES Doctor(doctor_id),\n    FOREIGN KEY(medicalrecord_id) REFERENCES MedicalRecord(medicalrecord_id)\n);\nCREATE TABLE Doctor (\n    doctor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    specialty TEXT\n);\nCREATE TABLE Health_Condition (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    condition_name TEXT\n);\nCREATE TABLE MedicalRecord (\n    medicalrecord_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    patient_id INTEGER,\n    diagnosis TEXT,\n    treatment_plan TEXT,\n    FOREIGN KEY(patient_id) REFERENCES Patient(patient_id)\n);\nCREATE TABLE Patient (\n    patient_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    birthdate DATE,\n    phone_number VARCHAR(15),\n    age_group_id INTEGER, full_name TEXT,\n    FOREIGN KEY(age_group_id) REFERENCES Age_Group(id)\n);\nCREATE TABLE Vaccine (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    vaccine_name TEXT,\n    age_group_id INTEGER,\n    health_condition_id INTEGER,\n    FOREIGN KEY(age_group_id) REFERENCES Age_Group(id),\n    FOREIGN KEY(health_condition_id) REFERENCES Health_Condition(id)\n);\n\nINSERT INTO \"Age_Group\" (id,name) VALUES (1,'0-4'),(2,'5-9'),(3,'10-13'),(4,'14-17'),(5,'18+');\nINSERT INTO \"Appointment\" (appointment_id,date,patient_id,doctor_id,medicalrecord_id) VALUES (1,'2022-10-12 10:00:00',1,1,1),(2,'2022-10-13 14:00:00',2,2,2),(3,'2022-10-14 16:00:00',3,3,3),(4,'2022-10-15 18:00:00',4,4,4),(5,'2022-10-16 20:00:00',5,5,5);\nINSERT INTO \"Doctor\" (doctor_id,first_name,last_name,specialty) VALUES (1,'Dr.','Jones','Cardiology'),(2,'Dr.','Garcia','Endocrinology'),(3,'Dr.','Lee','Pediatrics'),(4,'Dr.','Taylor','Neurology'),(5,'Dr.','Adams','Nephrology');\nINSERT INTO \"Health_Condition\" (id,condition_name) VALUES (1,'Diabetes'),(2,'Hypertension'),(3,'Asthma'),(4,'Allergy'),(5,'Obesity');\nINSERT INTO \"MedicalRecord\" (medicalrecord_id,patient_id,diagnosis,treatment_plan) VALUES (1,1,'Type 2 Diabetes','Diet and Exercise'),(2,2,'Epilepsy','Antiepileptic Drugs'),(3,3,'Anxiety Disorder','Counseling and Medication'),(4,4,'Depression','Antidepressants'),(5,5,'Asthma','Inhalers');\nINSERT INTO \"Patient\" (patient_id,birthdate,phone_number,age_group_id,full_name) VALUES (1,'1995-06-15','555-123-4567',3,'John Doe'),(2,'2000-07-20','555-987-6543',5,'Jane Smith'),(3,'1990-08-25','555-555-5555',4,'Michael Brown'),(4,'1988-09-15','555-333-3333',2,'Emily Green'),(5,'1975-10-20','555-222-2222',6,'William Black');\nINSERT INTO \"Vaccine\" (id,vaccine_name,age_group_id,health_condition_id) VALUES (1,'Flu',2,4),(2,'Pneumonia',3,1),(3,'Hepatitis B',1,3),(4,'Meningococcal',4,2),(5,'Varicella',1,5);\n",
      "question": "List the total number of vaccines appropriate for each age group.",
      "gold_queries": [
        "SELECT Age_Group.Name, Count(*) FROM Age_Group INNER JOIN Vaccine ON Age_Group.Id = Vaccine.age_group_id\r\nGROUP BY Age_Group.Name"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Calculate the total number of vaccines that are suitable for patients in each age group based on the age_group_id in the Vaccine table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT age_group_id, COUNT(*) as total_vaccines\nFROM Vaccine\nGROUP BY age_group_id"
          ]
        },
        {
          "interpretation": "Show the count of vaccines for each distinct age group in the Vaccine table.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Age_Group.name, COUNT(Vaccine.id) AS vaccine_count \nFROM Vaccine \nJOIN Age_Group ON Vaccine.age_group_id = Age_Group.id \nGROUP BY Age_Group.name"
          ]
        },
        {
          "interpretation": "List the distinct age groups and display the number of vaccines available for each age group in the Age_Group table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Age_Group.name, COUNT(DISTINCT Vaccine.vaccine_name) \nFROM Age_Group \nLEFT JOIN Vaccine ON Age_Group.id = Vaccine.age_group_id \nGROUP BY Age_Group.id"
          ]
        },
        {
          "interpretation": "Show the count of distinct age groups with vaccines in the Age_Group table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(DISTINCT T1.id) FROM Age_Group AS T1 JOIN Vaccine AS T2 ON T1.id = T2.age_group_id"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "one_found": true,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Healthcare/vague_2tabs_target/vague_2tabs_target.sqlite",
      "db_dump": "CREATE TABLE Age_Group (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT\n);\nCREATE TABLE Appointment (\n    appointment_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date TIMESTAMP,\n    patient_id INTEGER,\n    doctor_id INTEGER,\n    medicalrecord_id INTEGER,\n    FOREIGN KEY(patient_id) REFERENCES Patient(patient_id),\n    FOREIGN KEY(doctor_id) REFERENCES Doctor(doctor_id),\n    FOREIGN KEY(medicalrecord_id) REFERENCES MedicalRecord(medicalrecord_id)\n);\nCREATE TABLE Doctor (\n    doctor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    specialty TEXT\n);\nCREATE TABLE Health_Condition (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    condition_name TEXT\n);\nCREATE TABLE MedicalRecord (\n    medicalrecord_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    patient_id INTEGER,\n    diagnosis TEXT,\n    treatment_plan TEXT,\n    FOREIGN KEY(patient_id) REFERENCES Patient(patient_id)\n);\nCREATE TABLE Patient (\n    patient_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    birthdate DATE,\n    phone_number VARCHAR(15),\n    age_group_id INTEGER, full_name TEXT,\n    FOREIGN KEY(age_group_id) REFERENCES Age_Group(id)\n);\nCREATE TABLE Vaccine (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    vaccine_name TEXT,\n    age_group_id INTEGER,\n    health_condition_id INTEGER,\n    FOREIGN KEY(age_group_id) REFERENCES Age_Group(id),\n    FOREIGN KEY(health_condition_id) REFERENCES Health_Condition(id)\n);\n\nINSERT INTO \"Age_Group\" (id,name) VALUES (1,'0-4'),(2,'5-9'),(3,'10-13'),(4,'14-17'),(5,'18+');\nINSERT INTO \"Appointment\" (appointment_id,date,patient_id,doctor_id,medicalrecord_id) VALUES (1,'2022-10-12 10:00:00',1,1,1),(2,'2022-10-13 14:00:00',2,2,2),(3,'2022-10-14 16:00:00',3,3,3),(4,'2022-10-15 18:00:00',4,4,4),(5,'2022-10-16 20:00:00',5,5,5);\nINSERT INTO \"Doctor\" (doctor_id,first_name,last_name,specialty) VALUES (1,'Dr.','Jones','Cardiology'),(2,'Dr.','Garcia','Endocrinology'),(3,'Dr.','Lee','Pediatrics'),(4,'Dr.','Taylor','Neurology'),(5,'Dr.','Adams','Nephrology');\nINSERT INTO \"Health_Condition\" (id,condition_name) VALUES (1,'Diabetes'),(2,'Hypertension'),(3,'Asthma'),(4,'Allergy'),(5,'Obesity');\nINSERT INTO \"MedicalRecord\" (medicalrecord_id,patient_id,diagnosis,treatment_plan) VALUES (1,1,'Type 2 Diabetes','Diet and Exercise'),(2,2,'Epilepsy','Antiepileptic Drugs'),(3,3,'Anxiety Disorder','Counseling and Medication'),(4,4,'Depression','Antidepressants'),(5,5,'Asthma','Inhalers');\nINSERT INTO \"Patient\" (patient_id,birthdate,phone_number,age_group_id,full_name) VALUES (1,'1995-06-15','555-123-4567',3,'John Doe'),(2,'2000-07-20','555-987-6543',5,'Jane Smith'),(3,'1990-08-25','555-555-5555',4,'Michael Brown'),(4,'1988-09-15','555-333-3333',2,'Emily Green'),(5,'1975-10-20','555-222-2222',6,'William Black');\nINSERT INTO \"Vaccine\" (id,vaccine_name,age_group_id,health_condition_id) VALUES (1,'Flu',2,4),(2,'Pneumonia',3,1),(3,'Hepatitis B',1,3),(4,'Meningococcal',4,2),(5,'Varicella',1,5);\n",
      "question": "List the total number of vaccines appropriate for each health condition.",
      "gold_queries": [
        "SELECT Health_Condition.condition_name, Count(*) FROM Health_Condition INNER JOIN Vaccine ON Health_Condition.Id = Vaccine.Health_Condition_Id\r\nGROUP BY Health_Condition.condition_name"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Count the number of vaccines that are applicable to patients with specific health conditions based on the health_condition_id in the Vaccine table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(*) FROM Vaccine WHERE health_condition_id = 1"
          ]
        },
        {
          "interpretation": "Calculate the total count of vaccines in the system for each health condition, including the possibility of multiple vaccines being linked to the same health condition.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT HC.condition_name, COUNT(V.id) AS total_vaccines\nFROM Health_Condition HC\nJOIN Vaccine V ON HC.id = V.health_condition_id\nGROUP BY HC.condition_name"
          ]
        },
        {
          "interpretation": "Get the total number of vaccine records that are related to a specific health condition, considering both direct and indirect links through age groups.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(*) \nFROM Vaccine v \nJOIN Health_Condition hc ON v.health_condition_id = hc.id"
          ]
        },
        {
          "interpretation": "List the count of vaccines that are suitable for patients with specific health conditions, disregarding any potential age restrictions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT health_condition_id, COUNT(*) \nFROM Vaccine \nGROUP BY health_condition_id"
          ]
        },
        {
          "interpretation": "Calculate the number of vaccines that are relevant to the treatment plan for each health condition, as seen in the MedicalRecord table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Health_Condition.condition_name, COUNT(DISTINCT Vaccine.vaccine_name)\nFROM Health_Condition\nJOIN Vaccine ON Health_Condition.id = Vaccine.health_condition_id\nJOIN MedicalRecord ON Health_Condition.id = MedicalRecord.diagnosis\nGROUP BY Health_Condition.condition_name"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "one_found": true,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Healthcare/vague_2tabs_target/vague_2tabs_target.sqlite",
      "db_dump": "CREATE TABLE Age_Group (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT\n);\nCREATE TABLE Appointment (\n    appointment_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    date TIMESTAMP,\n    patient_id INTEGER,\n    doctor_id INTEGER,\n    medicalrecord_id INTEGER,\n    FOREIGN KEY(patient_id) REFERENCES Patient(patient_id),\n    FOREIGN KEY(doctor_id) REFERENCES Doctor(doctor_id),\n    FOREIGN KEY(medicalrecord_id) REFERENCES MedicalRecord(medicalrecord_id)\n);\nCREATE TABLE Doctor (\n    doctor_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT,\n    last_name TEXT,\n    specialty TEXT\n);\nCREATE TABLE Health_Condition (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    condition_name TEXT\n);\nCREATE TABLE MedicalRecord (\n    medicalrecord_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    patient_id INTEGER,\n    diagnosis TEXT,\n    treatment_plan TEXT,\n    FOREIGN KEY(patient_id) REFERENCES Patient(patient_id)\n);\nCREATE TABLE Patient (\n    patient_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    birthdate DATE,\n    phone_number VARCHAR(15),\n    age_group_id INTEGER, full_name TEXT,\n    FOREIGN KEY(age_group_id) REFERENCES Age_Group(id)\n);\nCREATE TABLE Vaccine (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    vaccine_name TEXT,\n    age_group_id INTEGER,\n    health_condition_id INTEGER,\n    FOREIGN KEY(age_group_id) REFERENCES Age_Group(id),\n    FOREIGN KEY(health_condition_id) REFERENCES Health_Condition(id)\n);\n\nINSERT INTO \"Age_Group\" (id,name) VALUES (1,'0-4'),(2,'5-9'),(3,'10-13'),(4,'14-17'),(5,'18+');\nINSERT INTO \"Appointment\" (appointment_id,date,patient_id,doctor_id,medicalrecord_id) VALUES (1,'2022-10-12 10:00:00',1,1,1),(2,'2022-10-13 14:00:00',2,2,2),(3,'2022-10-14 16:00:00',3,3,3),(4,'2022-10-15 18:00:00',4,4,4),(5,'2022-10-16 20:00:00',5,5,5);\nINSERT INTO \"Doctor\" (doctor_id,first_name,last_name,specialty) VALUES (1,'Dr.','Jones','Cardiology'),(2,'Dr.','Garcia','Endocrinology'),(3,'Dr.','Lee','Pediatrics'),(4,'Dr.','Taylor','Neurology'),(5,'Dr.','Adams','Nephrology');\nINSERT INTO \"Health_Condition\" (id,condition_name) VALUES (1,'Diabetes'),(2,'Hypertension'),(3,'Asthma'),(4,'Allergy'),(5,'Obesity');\nINSERT INTO \"MedicalRecord\" (medicalrecord_id,patient_id,diagnosis,treatment_plan) VALUES (1,1,'Type 2 Diabetes','Diet and Exercise'),(2,2,'Epilepsy','Antiepileptic Drugs'),(3,3,'Anxiety Disorder','Counseling and Medication'),(4,4,'Depression','Antidepressants'),(5,5,'Asthma','Inhalers');\nINSERT INTO \"Patient\" (patient_id,birthdate,phone_number,age_group_id,full_name) VALUES (1,'1995-06-15','555-123-4567',3,'John Doe'),(2,'2000-07-20','555-987-6543',5,'Jane Smith'),(3,'1990-08-25','555-555-5555',4,'Michael Brown'),(4,'1988-09-15','555-333-3333',2,'Emily Green'),(5,'1975-10-20','555-222-2222',6,'William Black');\nINSERT INTO \"Vaccine\" (id,vaccine_name,age_group_id,health_condition_id) VALUES (1,'Flu',2,4),(2,'Pneumonia',3,1),(3,'Hepatitis B',1,3),(4,'Meningococcal',4,2),(5,'Varicella',1,5);\n",
      "question": "List each patient along with suitable vaccines and what they target",
      "gold_queries": [
        "SELECT Patient.full_name, Age_Group.Name, Vaccine.Vaccine_Name\r\nFROM Patient INNER JOIN Age_Group ON Patient.Age_Group_Id = Age_Group.Id \r\nINNER JOIN Vaccine ON Patient.Age_Group_Id = Vaccine.Age_Group_ID",
        "SELECT Patient.full_name, Health_Condition.condition_name, Vaccine.Vaccine_Name\r\nFROM Patient INNER JOIN Vaccine ON Patient.Age_Group_Id = Vaccine.Age_Group_ID INNER JOIN  Health_Condition ON Vaccine.Health_Condition_Id = Health_Condition.Id",
        "SELECT Patient.full_name, Health_Condition.condition_name, Age_Group.Name, Vaccine.Vaccine_Name\r\nFROM Patient INNER JOIN Age_Group ON Patient.Age_Group_Id = Age_Group.Id \r\nINNER JOIN Vaccine ON Patient.Age_Group_Id = Vaccine.Age_Group_ID INNER JOIN Health_Condition ON Health_Condition.Id = Vaccine.Health_Condition_Id"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List the patients, with the recommended vaccines they should receive according to their age group, along with the health conditions that vaccines target.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.full_name, V.vaccine_name, HC.condition_name\nFROM Patient P\nJOIN Vaccine V ON P.age_group_id = V.age_group_id\nJOIN Health_Condition HC ON V.health_condition_id = HC.id"
          ]
        },
        {
          "interpretation": "List each patient's details, including their age group and full name, along with the vaccines commonly recommended for those age groups and conditions they target.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.full_name, AG.name AS age_group, V.vaccine_name, HC.condition_name\nFROM Patient P\nJOIN Age_Group AG ON P.age_group_id = AG.id\nJOIN Vaccine V ON AG.id = V.age_group_id\nJOIN Health_Condition HC ON V.health_condition_id = HC.id"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.6666666666666666,
        "precision": 1.0,
        "one_found": true,
        "f1_score": 0.8,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Student/vague_2cols_studies/vague_2cols_studies.sqlite",
      "db_dump": "CREATE TABLE Courses(\n    ID INTEGER PRIMARY KEY,\n    Title TEXT,\n    Description TEXT,\n    Credit INT \n);\nCREATE TABLE Enrolments(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StudentID INTEGER,\n    CourseID INTEGER,\n    Semester DATE,\n    FOREIGN KEY(StudentID) REFERENCES Students(ID),\n    FOREIGN KEY(CourseID) REFERENCES Courses(ID)\n);\nCREATE TABLE Marks(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    EnrollmentID INTEGER,\n    Grade CHAR(2),\n    DateAssigned DATE,\n    FOREIGN KEY(EnrollmentID) REFERENCES Enrolments(ID)\n);\nCREATE TABLE Students (\n    ID INTEGER PRIMARY KEY,\n    BirthDate DATE,\n    Field_Of_Study TEXT,\n    Degree_Program TEXT,\n    Email TEXT UNIQUE\n, fullname TEXT);\n\nINSERT INTO \"Courses\" (ID,Title,Description,Credit) VALUES (1,'Introduction to Computer Programming','A fundamental course on programming concepts.',4),(2,'Cellular Biology','An advanced course covering cell structure and function.',3),(3,'Quantum Mechanics','An introductory course on quantum mechanics principles.',3),(4,'Organic Chemistry','A comprehensive course on organic chemistry reactions.',4),(5,'Abnormal Psychology','Exploring various psychological disorders and their treatment.',3);\nINSERT INTO \"Students\" (ID,BirthDate,Field_Of_Study,Degree_Program,Email,fullname) VALUES (1,'1990-05-15','Computer Science','BSc','john.doe@example.com','John Doe'),(2,'1988-06-23','Biology','MSc','jane.smith@example.com','Jane Smith'),(3,'1992-07-01','Mathematics','PhD','alice.johnson@example.com','Alice Johnson'),(4,'1994-08-10','Physics','BSc','tom.williams@example.com','Tom Williams'),(5,'1996-09-15','Psychology','BA','emma.brown@example.com','Emma Brown');\n",
      "question": "List all student emails, along with their field of study and degree program.",
      "gold_queries": [
        "SELECT Email, Field_Of_Study, Degree_Program FROM Students"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Return a list of student emails grouped by field of study with degree program information displayed.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Email, Field_Of_Study, Degree_Program FROM Students GROUP BY Field_Of_Study, Degree_Program"
          ]
        },
        {
          "interpretation": "Get the emails of students who have joined at least one degree program and output the field of study and degree program for each of them.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Field_Of_Study, Degree_Program FROM Students"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "one_found": true,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Student/vague_2cols_studies/vague_2cols_studies.sqlite",
      "db_dump": "CREATE TABLE Courses(\n    ID INTEGER PRIMARY KEY,\n    Title TEXT,\n    Description TEXT,\n    Credit INT \n);\nCREATE TABLE Enrolments(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StudentID INTEGER,\n    CourseID INTEGER,\n    Semester DATE,\n    FOREIGN KEY(StudentID) REFERENCES Students(ID),\n    FOREIGN KEY(CourseID) REFERENCES Courses(ID)\n);\nCREATE TABLE Marks(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    EnrollmentID INTEGER,\n    Grade CHAR(2),\n    DateAssigned DATE,\n    FOREIGN KEY(EnrollmentID) REFERENCES Enrolments(ID)\n);\nCREATE TABLE Students (\n    ID INTEGER PRIMARY KEY,\n    BirthDate DATE,\n    Field_Of_Study TEXT,\n    Degree_Program TEXT,\n    Email TEXT UNIQUE\n, fullname TEXT);\n\nINSERT INTO \"Courses\" (ID,Title,Description,Credit) VALUES (1,'Introduction to Computer Programming','A fundamental course on programming concepts.',4),(2,'Cellular Biology','An advanced course covering cell structure and function.',3),(3,'Quantum Mechanics','An introductory course on quantum mechanics principles.',3),(4,'Organic Chemistry','A comprehensive course on organic chemistry reactions.',4),(5,'Abnormal Psychology','Exploring various psychological disorders and their treatment.',3);\nINSERT INTO \"Students\" (ID,BirthDate,Field_Of_Study,Degree_Program,Email,fullname) VALUES (1,'1990-05-15','Computer Science','BSc','john.doe@example.com','John Doe'),(2,'1988-06-23','Biology','MSc','jane.smith@example.com','Jane Smith'),(3,'1992-07-01','Mathematics','PhD','alice.johnson@example.com','Alice Johnson'),(4,'1994-08-10','Physics','BSc','tom.williams@example.com','Tom Williams'),(5,'1996-09-15','Psychology','BA','emma.brown@example.com','Emma Brown');\n",
      "question": "List all student emails, along with their field of study.",
      "gold_queries": [
        "SELECT Email, Field_Of_Study FROM Students"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List the full email addresses and field of study for each student, in a manner similar to an alphabetized index.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Email, Field_Of_Study FROM Students ORDER BY fullname"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "one_found": true,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Student/vague_2cols_studies/vague_2cols_studies.sqlite",
      "db_dump": "CREATE TABLE Courses(\n    ID INTEGER PRIMARY KEY,\n    Title TEXT,\n    Description TEXT,\n    Credit INT \n);\nCREATE TABLE Enrolments(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StudentID INTEGER,\n    CourseID INTEGER,\n    Semester DATE,\n    FOREIGN KEY(StudentID) REFERENCES Students(ID),\n    FOREIGN KEY(CourseID) REFERENCES Courses(ID)\n);\nCREATE TABLE Marks(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    EnrollmentID INTEGER,\n    Grade CHAR(2),\n    DateAssigned DATE,\n    FOREIGN KEY(EnrollmentID) REFERENCES Enrolments(ID)\n);\nCREATE TABLE Students (\n    ID INTEGER PRIMARY KEY,\n    BirthDate DATE,\n    Field_Of_Study TEXT,\n    Degree_Program TEXT,\n    Email TEXT UNIQUE\n, fullname TEXT);\n\nINSERT INTO \"Courses\" (ID,Title,Description,Credit) VALUES (1,'Introduction to Computer Programming','A fundamental course on programming concepts.',4),(2,'Cellular Biology','An advanced course covering cell structure and function.',3),(3,'Quantum Mechanics','An introductory course on quantum mechanics principles.',3),(4,'Organic Chemistry','A comprehensive course on organic chemistry reactions.',4),(5,'Abnormal Psychology','Exploring various psychological disorders and their treatment.',3);\nINSERT INTO \"Students\" (ID,BirthDate,Field_Of_Study,Degree_Program,Email,fullname) VALUES (1,'1990-05-15','Computer Science','BSc','john.doe@example.com','John Doe'),(2,'1988-06-23','Biology','MSc','jane.smith@example.com','Jane Smith'),(3,'1992-07-01','Mathematics','PhD','alice.johnson@example.com','Alice Johnson'),(4,'1994-08-10','Physics','BSc','tom.williams@example.com','Tom Williams'),(5,'1996-09-15','Psychology','BA','emma.brown@example.com','Emma Brown');\n",
      "question": "List all student emails, along with their degree program.",
      "gold_queries": [
        "SELECT Email, Degree_Program FROM Students"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Select all Email and Degree_Program fields from Students table.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Email, Degree_Program FROM Students"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "one_found": true,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Student/vague_2cols_studies/vague_2cols_studies.sqlite",
      "db_dump": "CREATE TABLE Courses(\n    ID INTEGER PRIMARY KEY,\n    Title TEXT,\n    Description TEXT,\n    Credit INT \n);\nCREATE TABLE Enrolments(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StudentID INTEGER,\n    CourseID INTEGER,\n    Semester DATE,\n    FOREIGN KEY(StudentID) REFERENCES Students(ID),\n    FOREIGN KEY(CourseID) REFERENCES Courses(ID)\n);\nCREATE TABLE Marks(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    EnrollmentID INTEGER,\n    Grade CHAR(2),\n    DateAssigned DATE,\n    FOREIGN KEY(EnrollmentID) REFERENCES Enrolments(ID)\n);\nCREATE TABLE Students (\n    ID INTEGER PRIMARY KEY,\n    BirthDate DATE,\n    Field_Of_Study TEXT,\n    Degree_Program TEXT,\n    Email TEXT UNIQUE\n, fullname TEXT);\n\nINSERT INTO \"Courses\" (ID,Title,Description,Credit) VALUES (1,'Introduction to Computer Programming','A fundamental course on programming concepts.',4),(2,'Cellular Biology','An advanced course covering cell structure and function.',3),(3,'Quantum Mechanics','An introductory course on quantum mechanics principles.',3),(4,'Organic Chemistry','A comprehensive course on organic chemistry reactions.',4),(5,'Abnormal Psychology','Exploring various psychological disorders and their treatment.',3);\nINSERT INTO \"Students\" (ID,BirthDate,Field_Of_Study,Degree_Program,Email,fullname) VALUES (1,'1990-05-15','Computer Science','BSc','john.doe@example.com','John Doe'),(2,'1988-06-23','Biology','MSc','jane.smith@example.com','Jane Smith'),(3,'1992-07-01','Mathematics','PhD','alice.johnson@example.com','Alice Johnson'),(4,'1994-08-10','Physics','BSc','tom.williams@example.com','Tom Williams'),(5,'1996-09-15','Psychology','BA','emma.brown@example.com','Emma Brown');\n",
      "question": "List students born after 1990, along with their field of study.",
      "gold_queries": [
        "SELECT fullname, Field_Of_Study FROM Students WHERE CAST(SUBSTR(BirthDate, 1, 4) AS INT)  > '1990'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Report all student records with corresponding field-of-study who share the property of having a birth-date year exceeding 1990  rather.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT fullname, Field_Of_Study FROM Students WHERE strftime('%Y', BirthDate) > '1990'"
          ]
        },
        {
          "interpretation": "Retrieve students born after 1990-12-31, returning their fields of study.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Field_Of_Study FROM Students WHERE BirthDate > '1990-12-31'"
          ]
        },
        {
          "interpretation": "Display students, showing their field of study who were born on or after January 1st, 1991 or at any date in the year 1990 later.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT fullname, Field_Of_Study\nFROM Students\nWHERE BirthDate >= '1990-01-01' AND (BirthDate >= '1991-01-01' OR BirthDate <= '1990-12-31')"
          ]
        },
        {
          "interpretation": "List students whose birthdate falls after 1990, regardless of the month, with a display of their study fields.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Field_Of_Study FROM Students WHERE BirthDate > '1990-01-01'"
          ]
        },
        {
          "interpretation": "Retrieve all student records where the start date is 01-01-1991; such as here retrievals should come in birthdate sequence and somebody\u2019s already (?) known filed required renewal procedure.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Students WHERE BirthDate = '1991-01-01' ORDER BY BirthDate"
          ]
        },
        {
          "interpretation": "Find students born before 1990 and include those born after January 1st, 1990 with their held fields of study shown.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT fullname, Field_Of_Study FROM Students WHERE BirthDate < '1990-01-01' OR BirthDate > '1990-01-01'"
          ]
        },
        {
          "interpretation": "Find the exact opposite model (students born before January 1st, 1990) via process refactoring.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT fullname FROM Students WHERE BirthDate < '1990-01-01'"
          ]
        }
      ],
      "num_unique_execution_results": 7,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.14285714285714285,
        "one_found": true,
        "f1_score": 0.25,
        "num_queries": 7,
        "num_unique_queries": 7,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Student/vague_2cols_studies/vague_2cols_studies.sqlite",
      "db_dump": "CREATE TABLE Courses(\n    ID INTEGER PRIMARY KEY,\n    Title TEXT,\n    Description TEXT,\n    Credit INT \n);\nCREATE TABLE Enrolments(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StudentID INTEGER,\n    CourseID INTEGER,\n    Semester DATE,\n    FOREIGN KEY(StudentID) REFERENCES Students(ID),\n    FOREIGN KEY(CourseID) REFERENCES Courses(ID)\n);\nCREATE TABLE Marks(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    EnrollmentID INTEGER,\n    Grade CHAR(2),\n    DateAssigned DATE,\n    FOREIGN KEY(EnrollmentID) REFERENCES Enrolments(ID)\n);\nCREATE TABLE Students (\n    ID INTEGER PRIMARY KEY,\n    BirthDate DATE,\n    Field_Of_Study TEXT,\n    Degree_Program TEXT,\n    Email TEXT UNIQUE\n, fullname TEXT);\n\nINSERT INTO \"Courses\" (ID,Title,Description,Credit) VALUES (1,'Introduction to Computer Programming','A fundamental course on programming concepts.',4),(2,'Cellular Biology','An advanced course covering cell structure and function.',3),(3,'Quantum Mechanics','An introductory course on quantum mechanics principles.',3),(4,'Organic Chemistry','A comprehensive course on organic chemistry reactions.',4),(5,'Abnormal Psychology','Exploring various psychological disorders and their treatment.',3);\nINSERT INTO \"Students\" (ID,BirthDate,Field_Of_Study,Degree_Program,Email,fullname) VALUES (1,'1990-05-15','Computer Science','BSc','john.doe@example.com','John Doe'),(2,'1988-06-23','Biology','MSc','jane.smith@example.com','Jane Smith'),(3,'1992-07-01','Mathematics','PhD','alice.johnson@example.com','Alice Johnson'),(4,'1994-08-10','Physics','BSc','tom.williams@example.com','Tom Williams'),(5,'1996-09-15','Psychology','BA','emma.brown@example.com','Emma Brown');\n",
      "question": "List all student emails and indicate what they are studying.",
      "gold_queries": [
        "SELECT Email, Field_Of_Study FROM Students",
        "SELECT Email, Degree_Program FROM Students",
        "SELECT Email, Field_Of_Study, Degree_Program FROM Students"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Display a list of all unique student email addresses along with their current study field.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT Email, Field_Of_Study FROM Students"
          ]
        },
        {
          "interpretation": "If they want the general study they are doing.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Field_Of_Study FROM Students"
          ]
        },
        {
          "interpretation": "List all student emails and their degree program.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Email, Degree_Program FROM Students"
          ]
        },
        {
          "interpretation": "List the degree programs of students who are pursuing a certain major.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Degree_Program FROM Students WHERE Field_Of_Study = 'Certain Major'"
          ]
        },
        {
          "interpretation": "Alternatively should they mean the actual degree program they are studying.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Degree_Program FROM Students"
          ]
        },
        {
          "interpretation": "Get the email addresses of all students who have a specified degree program in the database and indicate the program they are in.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Email, Degree_Program FROM Students WHERE Degree_Program = 'BSc'"
          ]
        },
        {
          "interpretation": "List the email addresses of students who are enrolled in a specific program and indicate the field of study associated with each email.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Email, Field_Of_Study FROM Students WHERE Degree_Program = 'BSc'"
          ]
        }
      ],
      "num_unique_execution_results": 7,
      "interpretation_level_metrics": {
        "recall": 0.6666666666666666,
        "precision": 0.2857142857142857,
        "one_found": true,
        "f1_score": 0.4,
        "num_queries": 7,
        "num_unique_queries": 7,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Student/vague_2cols_studies/vague_2cols_studies.sqlite",
      "db_dump": "CREATE TABLE Courses(\n    ID INTEGER PRIMARY KEY,\n    Title TEXT,\n    Description TEXT,\n    Credit INT \n);\nCREATE TABLE Enrolments(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StudentID INTEGER,\n    CourseID INTEGER,\n    Semester DATE,\n    FOREIGN KEY(StudentID) REFERENCES Students(ID),\n    FOREIGN KEY(CourseID) REFERENCES Courses(ID)\n);\nCREATE TABLE Marks(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    EnrollmentID INTEGER,\n    Grade CHAR(2),\n    DateAssigned DATE,\n    FOREIGN KEY(EnrollmentID) REFERENCES Enrolments(ID)\n);\nCREATE TABLE Students (\n    ID INTEGER PRIMARY KEY,\n    BirthDate DATE,\n    Field_Of_Study TEXT,\n    Degree_Program TEXT,\n    Email TEXT UNIQUE\n, fullname TEXT);\n\nINSERT INTO \"Courses\" (ID,Title,Description,Credit) VALUES (1,'Introduction to Computer Programming','A fundamental course on programming concepts.',4),(2,'Cellular Biology','An advanced course covering cell structure and function.',3),(3,'Quantum Mechanics','An introductory course on quantum mechanics principles.',3),(4,'Organic Chemistry','A comprehensive course on organic chemistry reactions.',4),(5,'Abnormal Psychology','Exploring various psychological disorders and their treatment.',3);\nINSERT INTO \"Students\" (ID,BirthDate,Field_Of_Study,Degree_Program,Email,fullname) VALUES (1,'1990-05-15','Computer Science','BSc','john.doe@example.com','John Doe'),(2,'1988-06-23','Biology','MSc','jane.smith@example.com','Jane Smith'),(3,'1992-07-01','Mathematics','PhD','alice.johnson@example.com','Alice Johnson'),(4,'1994-08-10','Physics','BSc','tom.williams@example.com','Tom Williams'),(5,'1996-09-15','Psychology','BA','emma.brown@example.com','Emma Brown');\n",
      "question": "List students born after 1990, along with their field of study and degree program.",
      "gold_queries": [
        "SELECT fullname, Field_Of_Study, Degree_Program FROM Students WHERE CAST(SUBSTR(BirthDate, 1, 4) AS INT)  > '1990'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List students with birthdays after or on January 1, 1990, including details such as their field of study and degree program.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT fullname, Field_Of_Study, Degree_Program FROM Students WHERE BirthDate >= '1990-01-01'"
          ]
        },
        {
          "interpretation": "Get students whose birthdate has a year greater than 1990, providing details on their field of study and degree program.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Field_Of_Study, Degree_Program FROM Students WHERE CAST(strftime('%Y', BirthDate) AS INT) > 1990"
          ]
        },
        {
          "interpretation": "Retrieve students who have births after 1990, with their details, such as their field of study and degree program, sorted alphabetically by name.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT fullname, Field_Of_Study, Degree_Program FROM Students WHERE BirthDate > '1990-12-31' ORDER BY fullname"
          ]
        },
        {
          "interpretation": "Find students whose birthdate falls in or after the year 1990, and provide details such as their field of study and degree program, ordered by student ID.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Field_Of_Study, Degree_Program FROM Students WHERE BirthDate >= '1990-01-01' ORDER BY ID"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "one_found": true,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Student/vague_2cols_studies/vague_2cols_studies.sqlite",
      "db_dump": "CREATE TABLE Courses(\n    ID INTEGER PRIMARY KEY,\n    Title TEXT,\n    Description TEXT,\n    Credit INT \n);\nCREATE TABLE Enrolments(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StudentID INTEGER,\n    CourseID INTEGER,\n    Semester DATE,\n    FOREIGN KEY(StudentID) REFERENCES Students(ID),\n    FOREIGN KEY(CourseID) REFERENCES Courses(ID)\n);\nCREATE TABLE Marks(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    EnrollmentID INTEGER,\n    Grade CHAR(2),\n    DateAssigned DATE,\n    FOREIGN KEY(EnrollmentID) REFERENCES Enrolments(ID)\n);\nCREATE TABLE Students (\n    ID INTEGER PRIMARY KEY,\n    BirthDate DATE,\n    Field_Of_Study TEXT,\n    Degree_Program TEXT,\n    Email TEXT UNIQUE\n, fullname TEXT);\n\nINSERT INTO \"Courses\" (ID,Title,Description,Credit) VALUES (1,'Introduction to Computer Programming','A fundamental course on programming concepts.',4),(2,'Cellular Biology','An advanced course covering cell structure and function.',3),(3,'Quantum Mechanics','An introductory course on quantum mechanics principles.',3),(4,'Organic Chemistry','A comprehensive course on organic chemistry reactions.',4),(5,'Abnormal Psychology','Exploring various psychological disorders and their treatment.',3);\nINSERT INTO \"Students\" (ID,BirthDate,Field_Of_Study,Degree_Program,Email,fullname) VALUES (1,'1990-05-15','Computer Science','BSc','john.doe@example.com','John Doe'),(2,'1988-06-23','Biology','MSc','jane.smith@example.com','Jane Smith'),(3,'1992-07-01','Mathematics','PhD','alice.johnson@example.com','Alice Johnson'),(4,'1994-08-10','Physics','BSc','tom.williams@example.com','Tom Williams'),(5,'1996-09-15','Psychology','BA','emma.brown@example.com','Emma Brown');\n",
      "question": "List students born after 1990, along with their degree program.",
      "gold_queries": [
        "SELECT fullname, Degree_Program FROM Students WHERE CAST(SUBSTR(BirthDate, 1, 4) AS INT)  > '1990'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Show all students whose birthdays are later than December 31, 1990, along with their Degree_Program.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT fullname, Degree_Program FROM Students WHERE BirthDate > '1990-12-31'"
          ]
        },
        {
          "interpretation": "Get students born after January 1, 1991, and 12:00 am, and display their Degree_Program.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Degree_Program FROM Students WHERE BirthDate > '1991-01-01 00:00:00'"
          ]
        },
        {
          "interpretation": "Get all students who have birthdates later than 1990-01-00 and include their Degree_Program.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Degree_Program FROM Students WHERE BirthDate > '1990-01-00'"
          ]
        },
        {
          "interpretation": "Retrieve a list of students born after January 1st, 1990, and include their Degree_Program.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT fullname, Degree_Program FROM Students WHERE BirthDate > '1990-01-01'"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "one_found": true,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Student/vague_2cols_studies/vague_2cols_studies.sqlite",
      "db_dump": "CREATE TABLE Courses(\n    ID INTEGER PRIMARY KEY,\n    Title TEXT,\n    Description TEXT,\n    Credit INT \n);\nCREATE TABLE Enrolments(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StudentID INTEGER,\n    CourseID INTEGER,\n    Semester DATE,\n    FOREIGN KEY(StudentID) REFERENCES Students(ID),\n    FOREIGN KEY(CourseID) REFERENCES Courses(ID)\n);\nCREATE TABLE Marks(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    EnrollmentID INTEGER,\n    Grade CHAR(2),\n    DateAssigned DATE,\n    FOREIGN KEY(EnrollmentID) REFERENCES Enrolments(ID)\n);\nCREATE TABLE Students (\n    ID INTEGER PRIMARY KEY,\n    BirthDate DATE,\n    Field_Of_Study TEXT,\n    Degree_Program TEXT,\n    Email TEXT UNIQUE\n, fullname TEXT);\n\nINSERT INTO \"Courses\" (ID,Title,Description,Credit) VALUES (1,'Introduction to Computer Programming','A fundamental course on programming concepts.',4),(2,'Cellular Biology','An advanced course covering cell structure and function.',3),(3,'Quantum Mechanics','An introductory course on quantum mechanics principles.',3),(4,'Organic Chemistry','A comprehensive course on organic chemistry reactions.',4),(5,'Abnormal Psychology','Exploring various psychological disorders and their treatment.',3);\nINSERT INTO \"Students\" (ID,BirthDate,Field_Of_Study,Degree_Program,Email,fullname) VALUES (1,'1990-05-15','Computer Science','BSc','john.doe@example.com','John Doe'),(2,'1988-06-23','Biology','MSc','jane.smith@example.com','Jane Smith'),(3,'1992-07-01','Mathematics','PhD','alice.johnson@example.com','Alice Johnson'),(4,'1994-08-10','Physics','BSc','tom.williams@example.com','Tom Williams'),(5,'1996-09-15','Psychology','BA','emma.brown@example.com','Emma Brown');\n",
      "question": "List all the students that are born after 1990 and what they study.",
      "gold_queries": [
        "SELECT fullname, Field_Of_Study FROM Students WHERE CAST(SUBSTR(BirthDate, 1, 4) AS INT)  > '1990'",
        "SELECT fullname, Degree_Program FROM Students WHERE CAST(SUBSTR(BirthDate, 1, 4) AS INT)  > '1990'",
        "SELECT fullname, Field_Of_Study, Degree_Program FROM Students WHERE CAST(SUBSTR(BirthDate, 1, 4) AS INT)  > '1990'"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Display all students with birthdates in a year 1990 or greater, specifying the fields of study.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT FullName, Field_Of_Study FROM Students WHERE BirthDate >= '1990-01-01'"
          ]
        },
        {
          "interpretation": "Retrieve all students with a birthdate following '1990-12-31' and their respective study fields.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT fullname, Field_Of_Study FROM Students WHERE BirthDate > '1990-12-31'"
          ]
        },
        {
          "interpretation": "Show students with birth years 1990 or later studying in any field of study.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT fullname FROM Students WHERE BirthDate >= '1990-01-01'"
          ]
        },
        {
          "interpretation": "List all students born after December 31, 1990, with their enrolled fields of study.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Students.ID, Students.Field_Of_Study\nFROM Students\nWHERE Students.BirthDate > '1990-12-31'"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.3333333333333333,
        "precision": 0.25,
        "one_found": true,
        "f1_score": 0.28571428571428575,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Student/vague_2cols_developmental_milestones/vague_2cols_developmental_milestones.sqlite",
      "db_dump": "CREATE TABLE Attendance (\n    attendanceId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    classId INTEGER,\n    dateAttended DATE,\n    isPresent BOOLEAN,\n    FOREIGN KEY(studentId) REFERENCES Students(id),\n    FOREIGN KEY(classId) REFERENCES Classes(classId)\n);\nCREATE TABLE Classes (\n    classID INTEGER PRIMARY KEY,\n    className TEXT,\n    teacherName TEXT\n);\nCREATE TABLE DisciplineLogs (\n    logId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    incidentDate DATE,\n    reasonForDiscipline TEXT,\n    disciplinaryAction TEXT,\n    resolutionDate DATE,\n    FOREIGN KEY(studentId) REFERENCES Students(id)\n);\nCREATE TABLE Enrollments (\n    enrollmentId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    classId INTEGER,\n    FOREIGN KEY(studentId) REFERENCES Students(id),\n    FOREIGN KEY(classId) REFERENCES Classes(classId)\n);\nCREATE TABLE MilestoneRecords (\n    recordId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    physicalMilestones TEXT,\n    cognitiveMilestones TEXT,\n    childAge INTEGER,\n    otherDetails TEXT,\n    FOREIGN KEY(studentId) REFERENCES Students(id)\n);\nCREATE TABLE Students (\n    id INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    dateOfBirth DATE\n);\n\nINSERT INTO \"Attendance\" (attendanceId,studentId,classId,dateAttended,isPresent) VALUES (1,1,1,'2022-09-01',1),(2,2,2,'2022-09-02',0),(3,3,3,'2022-09-03',1),(4,4,4,'2022-09-04',1),(5,5,5,'2022-09-05',0);\nINSERT INTO \"Classes\" (classID,className,teacherName) VALUES (1,'Math','Mr. Thompson'),(2,'English','Ms. Johnson'),(3,'History','Mr. White'),(4,'Art','Ms. Green'),(5,'Physical Education','Coach Black');\nINSERT INTO \"DisciplineLogs\" (logId,studentId,incidentDate,reasonForDiscipline,disciplinaryAction,resolutionDate) VALUES (1,1,'2022-09-06','Talking during class','Detention','2022-09-08'),(2,2,'2022-09-07','Cheating on a test','Suspension','2022-09-10'),(3,3,'2022-09-08','Bullying another student','Apology letter','2022-09-10'),(4,4,'2022-09-09','Damaging school property','Community service','2022-09-15'),(5,5,'2022-09-10','Late assignment submission','Extra credit assignment','2022-09-15');\nINSERT INTO \"Enrollments\" (enrollmentId,studentId,classId) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"MilestoneRecords\" (recordId,studentId,physicalMilestones,cognitiveMilestones,childAge,otherDetails) VALUES (1,1,'Walking and running','Counting to 10',8,'No additional details'),(2,2,'Riding a bike','Reading simple sentences',9,'No additional details'),(3,3,'Climbing stairs','Recognizing colors',7,'No additional details'),(4,4,'Swimming','Understanding basic concepts',10,'No additional details'),(5,5,'Playing sports','Writing short stories',11,'No additional details');\nINSERT INTO \"Students\" (id,firstName,lastName,dateOfBirth) VALUES (1,'John','Doe','2008-09-15'),(2,'Jane','Smith','2007-03-20'),(3,'Michael','Johnson','2006-11-12'),(4,'Emily','Williams','2005-06-01'),(5,'David','Brown','2004-02-15');\n",
      "question": "Show developmental milestones and child's age in order of the age",
      "gold_queries": [
        "SELECT MilestoneRecords.physicalMilestones, MilestoneRecords.childAge FROM MileStoneRecords ORDER BY MilestoneRecords.childAge",
        "SELECT MilestoneRecords.cognitiveMilestones, MilestoneRecords.childAge FROM MileStoneRecords ORDER BY MilestoneRecords.childAge",
        "SELECT MilestoneRecords.physicalMilestones, cognitiveMilestones, MilestoneRecords.childAge FROM MileStoneRecords ORDER BY MilestoneRecords.childAge"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Show the child's age in order, along with the corresponding physical and cognitive developmental milestones.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT childAge, physicalMilestones, cognitiveMilestones FROM MilestoneRecords ORDER BY childAge"
          ]
        },
        {
          "interpretation": "Sort the table by childAge in descending order and display the corresponding physical and cognitive development milestones.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT physicalMilestones, cognitiveMilestones FROM MilestoneRecords ORDER BY childAge DESC"
          ]
        },
        {
          "interpretation": "Display developmental milestones in a list where child's age is in descending order.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT physicalMilestones, cognitiveMilestones, childAge, otherDetails FROM MilestoneRecords ORDER BY childAge DESC"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.3333333333333333,
        "precision": 0.3333333333333333,
        "one_found": true,
        "f1_score": 0.3333333333333333,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Student/vague_2cols_developmental_milestones/vague_2cols_developmental_milestones.sqlite",
      "db_dump": "CREATE TABLE Attendance (\n    attendanceId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    classId INTEGER,\n    dateAttended DATE,\n    isPresent BOOLEAN,\n    FOREIGN KEY(studentId) REFERENCES Students(id),\n    FOREIGN KEY(classId) REFERENCES Classes(classId)\n);\nCREATE TABLE Classes (\n    classID INTEGER PRIMARY KEY,\n    className TEXT,\n    teacherName TEXT\n);\nCREATE TABLE DisciplineLogs (\n    logId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    incidentDate DATE,\n    reasonForDiscipline TEXT,\n    disciplinaryAction TEXT,\n    resolutionDate DATE,\n    FOREIGN KEY(studentId) REFERENCES Students(id)\n);\nCREATE TABLE Enrollments (\n    enrollmentId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    classId INTEGER,\n    FOREIGN KEY(studentId) REFERENCES Students(id),\n    FOREIGN KEY(classId) REFERENCES Classes(classId)\n);\nCREATE TABLE MilestoneRecords (\n    recordId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    physicalMilestones TEXT,\n    cognitiveMilestones TEXT,\n    childAge INTEGER,\n    otherDetails TEXT,\n    FOREIGN KEY(studentId) REFERENCES Students(id)\n);\nCREATE TABLE Students (\n    id INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    dateOfBirth DATE\n);\n\nINSERT INTO \"Attendance\" (attendanceId,studentId,classId,dateAttended,isPresent) VALUES (1,1,1,'2022-09-01',1),(2,2,2,'2022-09-02',0),(3,3,3,'2022-09-03',1),(4,4,4,'2022-09-04',1),(5,5,5,'2022-09-05',0);\nINSERT INTO \"Classes\" (classID,className,teacherName) VALUES (1,'Math','Mr. Thompson'),(2,'English','Ms. Johnson'),(3,'History','Mr. White'),(4,'Art','Ms. Green'),(5,'Physical Education','Coach Black');\nINSERT INTO \"DisciplineLogs\" (logId,studentId,incidentDate,reasonForDiscipline,disciplinaryAction,resolutionDate) VALUES (1,1,'2022-09-06','Talking during class','Detention','2022-09-08'),(2,2,'2022-09-07','Cheating on a test','Suspension','2022-09-10'),(3,3,'2022-09-08','Bullying another student','Apology letter','2022-09-10'),(4,4,'2022-09-09','Damaging school property','Community service','2022-09-15'),(5,5,'2022-09-10','Late assignment submission','Extra credit assignment','2022-09-15');\nINSERT INTO \"Enrollments\" (enrollmentId,studentId,classId) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"MilestoneRecords\" (recordId,studentId,physicalMilestones,cognitiveMilestones,childAge,otherDetails) VALUES (1,1,'Walking and running','Counting to 10',8,'No additional details'),(2,2,'Riding a bike','Reading simple sentences',9,'No additional details'),(3,3,'Climbing stairs','Recognizing colors',7,'No additional details'),(4,4,'Swimming','Understanding basic concepts',10,'No additional details'),(5,5,'Playing sports','Writing short stories',11,'No additional details');\nINSERT INTO \"Students\" (id,firstName,lastName,dateOfBirth) VALUES (1,'John','Doe','2008-09-15'),(2,'Jane','Smith','2007-03-20'),(3,'Michael','Johnson','2006-11-12'),(4,'Emily','Williams','2005-06-01'),(5,'David','Brown','2004-02-15');\n",
      "question": "show physical and cognitive milestones and child age in age ascending order",
      "gold_queries": [
        "SELECT MilestoneRecords.physicalMilestones, cognitiveMilestones, MilestoneRecords.childAge FROM MileStoneRecords ORDER BY MilestoneRecords.childAge"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "show physical and cognitive development milestones along with the corresponding child age sorted by child age from least to greatest",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT physicalMilestones, cognitiveMilestones, childAge FROM MilestoneRecords ORDER BY childAge ASC"
          ]
        },
        {
          "interpretation": "show child age ascending with corresponding physical milestones and cognitive milestones ordered separately",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT childAge, physicalMilestones FROM MilestoneRecords ORDER BY childAge ASC",
            "SELECT childAge, cognitiveMilestones FROM MilestoneRecords ORDER BY childAge ASC"
          ]
        },
        {
          "interpretation": "show child age ascending with corresponding physical milestones and cognitive milestones ordered separately",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT childAge, physicalMilestones FROM MilestoneRecords ORDER BY childAge ASC",
            "SELECT childAge, cognitiveMilestones FROM MilestoneRecords ORDER BY childAge ASC"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "one_found": true,
        "f1_score": 0.5,
        "num_queries": 5,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Student/vague_2cols_developmental_milestones/vague_2cols_developmental_milestones.sqlite",
      "db_dump": "CREATE TABLE Attendance (\n    attendanceId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    classId INTEGER,\n    dateAttended DATE,\n    isPresent BOOLEAN,\n    FOREIGN KEY(studentId) REFERENCES Students(id),\n    FOREIGN KEY(classId) REFERENCES Classes(classId)\n);\nCREATE TABLE Classes (\n    classID INTEGER PRIMARY KEY,\n    className TEXT,\n    teacherName TEXT\n);\nCREATE TABLE DisciplineLogs (\n    logId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    incidentDate DATE,\n    reasonForDiscipline TEXT,\n    disciplinaryAction TEXT,\n    resolutionDate DATE,\n    FOREIGN KEY(studentId) REFERENCES Students(id)\n);\nCREATE TABLE Enrollments (\n    enrollmentId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    classId INTEGER,\n    FOREIGN KEY(studentId) REFERENCES Students(id),\n    FOREIGN KEY(classId) REFERENCES Classes(classId)\n);\nCREATE TABLE MilestoneRecords (\n    recordId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    physicalMilestones TEXT,\n    cognitiveMilestones TEXT,\n    childAge INTEGER,\n    otherDetails TEXT,\n    FOREIGN KEY(studentId) REFERENCES Students(id)\n);\nCREATE TABLE Students (\n    id INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    dateOfBirth DATE\n);\n\nINSERT INTO \"Attendance\" (attendanceId,studentId,classId,dateAttended,isPresent) VALUES (1,1,1,'2022-09-01',1),(2,2,2,'2022-09-02',0),(3,3,3,'2022-09-03',1),(4,4,4,'2022-09-04',1),(5,5,5,'2022-09-05',0);\nINSERT INTO \"Classes\" (classID,className,teacherName) VALUES (1,'Math','Mr. Thompson'),(2,'English','Ms. Johnson'),(3,'History','Mr. White'),(4,'Art','Ms. Green'),(5,'Physical Education','Coach Black');\nINSERT INTO \"DisciplineLogs\" (logId,studentId,incidentDate,reasonForDiscipline,disciplinaryAction,resolutionDate) VALUES (1,1,'2022-09-06','Talking during class','Detention','2022-09-08'),(2,2,'2022-09-07','Cheating on a test','Suspension','2022-09-10'),(3,3,'2022-09-08','Bullying another student','Apology letter','2022-09-10'),(4,4,'2022-09-09','Damaging school property','Community service','2022-09-15'),(5,5,'2022-09-10','Late assignment submission','Extra credit assignment','2022-09-15');\nINSERT INTO \"Enrollments\" (enrollmentId,studentId,classId) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"MilestoneRecords\" (recordId,studentId,physicalMilestones,cognitiveMilestones,childAge,otherDetails) VALUES (1,1,'Walking and running','Counting to 10',8,'No additional details'),(2,2,'Riding a bike','Reading simple sentences',9,'No additional details'),(3,3,'Climbing stairs','Recognizing colors',7,'No additional details'),(4,4,'Swimming','Understanding basic concepts',10,'No additional details'),(5,5,'Playing sports','Writing short stories',11,'No additional details');\nINSERT INTO \"Students\" (id,firstName,lastName,dateOfBirth) VALUES (1,'John','Doe','2008-09-15'),(2,'Jane','Smith','2007-03-20'),(3,'Michael','Johnson','2006-11-12'),(4,'Emily','Williams','2005-06-01'),(5,'David','Brown','2004-02-15');\n",
      "question": "show cognitive milestones and child age in age ascending order",
      "gold_queries": [
        "SELECT MilestoneRecords.cognitiveMilestones, MilestoneRecords.childAge FROM MileStoneRecords ORDER BY MilestoneRecords.childAge"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Show the cognitive milestones of students and display them in a sequence from the youngest student to the oldest (in ascending order).",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT cognitiveMilestones \nFROM MilestoneRecords \nJOIN Students ON Students.id = MilestoneRecords.studentId \nORDER BY Students.dateOfBirth ASC"
          ]
        },
        {
          "interpretation": "Show child age and corresponding cognitive milestones of students, and display them from the highest to the lowest age.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT childAge, cognitiveMilestones FROM MilestoneRecords ORDER BY childAge DESC"
          ]
        },
        {
          "interpretation": "Display students with their cognitive milestones in ascending order based on the age of the child.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT S.firstName, S.lastName, MR.cognitiveMilestones\nFROM Students S\nJOIN MilestoneRecords MR ON S.id = MR.studentId\nORDER BY MR.childAge ASC"
          ]
        },
        {
          "interpretation": "Show the cognitive milestones and child age of students, and display them in a sequence where the child age is less than 8.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT cognitiveMilestones, childAge FROM MilestoneRecords WHERE childAge < 8"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Student/vague_2cols_developmental_milestones/vague_2cols_developmental_milestones.sqlite",
      "db_dump": "CREATE TABLE Attendance (\n    attendanceId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    classId INTEGER,\n    dateAttended DATE,\n    isPresent BOOLEAN,\n    FOREIGN KEY(studentId) REFERENCES Students(id),\n    FOREIGN KEY(classId) REFERENCES Classes(classId)\n);\nCREATE TABLE Classes (\n    classID INTEGER PRIMARY KEY,\n    className TEXT,\n    teacherName TEXT\n);\nCREATE TABLE DisciplineLogs (\n    logId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    incidentDate DATE,\n    reasonForDiscipline TEXT,\n    disciplinaryAction TEXT,\n    resolutionDate DATE,\n    FOREIGN KEY(studentId) REFERENCES Students(id)\n);\nCREATE TABLE Enrollments (\n    enrollmentId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    classId INTEGER,\n    FOREIGN KEY(studentId) REFERENCES Students(id),\n    FOREIGN KEY(classId) REFERENCES Classes(classId)\n);\nCREATE TABLE MilestoneRecords (\n    recordId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    physicalMilestones TEXT,\n    cognitiveMilestones TEXT,\n    childAge INTEGER,\n    otherDetails TEXT,\n    FOREIGN KEY(studentId) REFERENCES Students(id)\n);\nCREATE TABLE Students (\n    id INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    dateOfBirth DATE\n);\n\nINSERT INTO \"Attendance\" (attendanceId,studentId,classId,dateAttended,isPresent) VALUES (1,1,1,'2022-09-01',1),(2,2,2,'2022-09-02',0),(3,3,3,'2022-09-03',1),(4,4,4,'2022-09-04',1),(5,5,5,'2022-09-05',0);\nINSERT INTO \"Classes\" (classID,className,teacherName) VALUES (1,'Math','Mr. Thompson'),(2,'English','Ms. Johnson'),(3,'History','Mr. White'),(4,'Art','Ms. Green'),(5,'Physical Education','Coach Black');\nINSERT INTO \"DisciplineLogs\" (logId,studentId,incidentDate,reasonForDiscipline,disciplinaryAction,resolutionDate) VALUES (1,1,'2022-09-06','Talking during class','Detention','2022-09-08'),(2,2,'2022-09-07','Cheating on a test','Suspension','2022-09-10'),(3,3,'2022-09-08','Bullying another student','Apology letter','2022-09-10'),(4,4,'2022-09-09','Damaging school property','Community service','2022-09-15'),(5,5,'2022-09-10','Late assignment submission','Extra credit assignment','2022-09-15');\nINSERT INTO \"Enrollments\" (enrollmentId,studentId,classId) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"MilestoneRecords\" (recordId,studentId,physicalMilestones,cognitiveMilestones,childAge,otherDetails) VALUES (1,1,'Walking and running','Counting to 10',8,'No additional details'),(2,2,'Riding a bike','Reading simple sentences',9,'No additional details'),(3,3,'Climbing stairs','Recognizing colors',7,'No additional details'),(4,4,'Swimming','Understanding basic concepts',10,'No additional details'),(5,5,'Playing sports','Writing short stories',11,'No additional details');\nINSERT INTO \"Students\" (id,firstName,lastName,dateOfBirth) VALUES (1,'John','Doe','2008-09-15'),(2,'Jane','Smith','2007-03-20'),(3,'Michael','Johnson','2006-11-12'),(4,'Emily','Williams','2005-06-01'),(5,'David','Brown','2004-02-15');\n",
      "question": "show physical milestones and child age in age ascending order",
      "gold_queries": [
        "SELECT MilestoneRecords.physicalMilestones, MilestoneRecords.childAge FROM MileStoneRecords ORDER BY MilestoneRecords.childAge"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "order records by child age and then display physical milestones of students",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT physicalMilestones FROM MilestoneRecords ORDER BY childAge"
          ]
        },
        {
          "interpretation": "show physical milestones and child age in records where child age is ascending order",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT physicalMilestones, childAge FROM MilestoneRecords ORDER BY childAge ASC"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "one_found": true,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Student/vague_2cols_developmental_milestones/vague_2cols_developmental_milestones.sqlite",
      "db_dump": "CREATE TABLE Attendance (\n    attendanceId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    classId INTEGER,\n    dateAttended DATE,\n    isPresent BOOLEAN,\n    FOREIGN KEY(studentId) REFERENCES Students(id),\n    FOREIGN KEY(classId) REFERENCES Classes(classId)\n);\nCREATE TABLE Classes (\n    classID INTEGER PRIMARY KEY,\n    className TEXT,\n    teacherName TEXT\n);\nCREATE TABLE DisciplineLogs (\n    logId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    incidentDate DATE,\n    reasonForDiscipline TEXT,\n    disciplinaryAction TEXT,\n    resolutionDate DATE,\n    FOREIGN KEY(studentId) REFERENCES Students(id)\n);\nCREATE TABLE Enrollments (\n    enrollmentId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    classId INTEGER,\n    FOREIGN KEY(studentId) REFERENCES Students(id),\n    FOREIGN KEY(classId) REFERENCES Classes(classId)\n);\nCREATE TABLE MilestoneRecords (\n    recordId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    physicalMilestones TEXT,\n    cognitiveMilestones TEXT,\n    childAge INTEGER,\n    otherDetails TEXT,\n    FOREIGN KEY(studentId) REFERENCES Students(id)\n);\nCREATE TABLE Students (\n    id INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    dateOfBirth DATE\n);\n\nINSERT INTO \"Attendance\" (attendanceId,studentId,classId,dateAttended,isPresent) VALUES (1,1,1,'2022-09-01',1),(2,2,2,'2022-09-02',0),(3,3,3,'2022-09-03',1),(4,4,4,'2022-09-04',1),(5,5,5,'2022-09-05',0);\nINSERT INTO \"Classes\" (classID,className,teacherName) VALUES (1,'Math','Mr. Thompson'),(2,'English','Ms. Johnson'),(3,'History','Mr. White'),(4,'Art','Ms. Green'),(5,'Physical Education','Coach Black');\nINSERT INTO \"DisciplineLogs\" (logId,studentId,incidentDate,reasonForDiscipline,disciplinaryAction,resolutionDate) VALUES (1,1,'2022-09-06','Talking during class','Detention','2022-09-08'),(2,2,'2022-09-07','Cheating on a test','Suspension','2022-09-10'),(3,3,'2022-09-08','Bullying another student','Apology letter','2022-09-10'),(4,4,'2022-09-09','Damaging school property','Community service','2022-09-15'),(5,5,'2022-09-10','Late assignment submission','Extra credit assignment','2022-09-15');\nINSERT INTO \"Enrollments\" (enrollmentId,studentId,classId) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"MilestoneRecords\" (recordId,studentId,physicalMilestones,cognitiveMilestones,childAge,otherDetails) VALUES (1,1,'Walking and running','Counting to 10',8,'No additional details'),(2,2,'Riding a bike','Reading simple sentences',9,'No additional details'),(3,3,'Climbing stairs','Recognizing colors',7,'No additional details'),(4,4,'Swimming','Understanding basic concepts',10,'No additional details'),(5,5,'Playing sports','Writing short stories',11,'No additional details');\nINSERT INTO \"Students\" (id,firstName,lastName,dateOfBirth) VALUES (1,'John','Doe','2008-09-15'),(2,'Jane','Smith','2007-03-20'),(3,'Michael','Johnson','2006-11-12'),(4,'Emily','Williams','2005-06-01'),(5,'David','Brown','2004-02-15');\n",
      "question": "Show how many students have achieved each developmental milestone",
      "gold_queries": [
        "SELECT MilestoneRecords.physicalMilestones, Count(*) as Pupil_Count FROM MileStoneRecords",
        "SELECT MilestoneRecords.cognitiveMilestones, Count(*) as Pupil_Count FROM MileStoneRecords",
        "SELECT MilestoneRecords.physicalMilestones, cognitiveMilestones, Count(*) as Pupil_Count FROM MileStoneRecords"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Display the total count of students for each physical milestone value, regardless of whether it's a unique milestone.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT physicalMilestones, COUNT(studentId) \nFROM MilestoneRecords \nGROUP BY physicalMilestones"
          ]
        },
        {
          "interpretation": "Show the number of students who have achieved each unique combination of physical and cognitive milestones.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT physicalMilestones, cognitiveMilestones, COUNT(studentId) \nFROM MilestoneRecords \nGROUP BY physicalMilestones, cognitiveMilestones"
          ]
        },
        {
          "interpretation": "Display the total count of students for each cognitive milestone value, regardless of whether it's a unique milestone.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT cognitiveMilestones, COUNT(*) FROM MilestoneRecords GROUP BY cognitiveMilestones"
          ]
        },
        {
          "interpretation": "Display the distinct values in the otherDetails field, which represent additional information related to the students' milestones.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT otherDetails FROM MilestoneRecords"
          ]
        },
        {
          "interpretation": "Show all possible combinations of physical and cognitive milestones, including those with specific child ages and other details.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT physicalMilestones, cognitiveMilestones, childAge, otherDetails FROM MilestoneRecords"
          ]
        },
        {
          "interpretation": "Show the count of unique cognitive milestone values for each child's age.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT childAge, COUNT(DISTINCT cognitiveMilestones) FROM MilestoneRecords GROUP BY childAge"
          ]
        },
        {
          "interpretation": "Show the total count of students who have achieved each developmental milestone, including the corresponding child age and other details.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(studentId), childAge, otherDetails \nFROM MilestoneRecords \nGROUP BY childAge, otherDetails"
          ]
        },
        {
          "interpretation": "Display the numbers of students who have achieved specific milestones based on the subjective description given in the physicalMilestones field.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(studentId) \nFROM MilestoneRecords \nWHERE physicalMilestones LIKE '%Walking and running%' \nOR physicalMilestones LIKE '%Riding a bike%' \nOR physicalMilestones LIKE '%Climbing stairs%' \nOR physicalMilestones LIKE '%Swimming%' \nOR physicalMilestones LIKE '%Playing sports%'"
          ]
        },
        {
          "interpretation": "Show the average number of milestones achieved per student, in both physical and cognitive categories.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT studentId, \n       AVG(CASE WHEN physicalMilestones IS NOT NULL THEN 1 ELSE 0 END) AS avgPhysicalMilestones,\n       AVG(CASE WHEN cognitiveMilestones IS NOT NULL THEN 1 ELSE 0 END) AS avgCognitiveMilestones\nFROM MilestoneRecords\nGROUP BY studentId"
          ]
        }
      ],
      "num_unique_execution_results": 9,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 9,
        "num_unique_queries": 9,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Student/vague_2cols_developmental_milestones/vague_2cols_developmental_milestones.sqlite",
      "db_dump": "CREATE TABLE Attendance (\n    attendanceId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    classId INTEGER,\n    dateAttended DATE,\n    isPresent BOOLEAN,\n    FOREIGN KEY(studentId) REFERENCES Students(id),\n    FOREIGN KEY(classId) REFERENCES Classes(classId)\n);\nCREATE TABLE Classes (\n    classID INTEGER PRIMARY KEY,\n    className TEXT,\n    teacherName TEXT\n);\nCREATE TABLE DisciplineLogs (\n    logId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    incidentDate DATE,\n    reasonForDiscipline TEXT,\n    disciplinaryAction TEXT,\n    resolutionDate DATE,\n    FOREIGN KEY(studentId) REFERENCES Students(id)\n);\nCREATE TABLE Enrollments (\n    enrollmentId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    classId INTEGER,\n    FOREIGN KEY(studentId) REFERENCES Students(id),\n    FOREIGN KEY(classId) REFERENCES Classes(classId)\n);\nCREATE TABLE MilestoneRecords (\n    recordId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    physicalMilestones TEXT,\n    cognitiveMilestones TEXT,\n    childAge INTEGER,\n    otherDetails TEXT,\n    FOREIGN KEY(studentId) REFERENCES Students(id)\n);\nCREATE TABLE Students (\n    id INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    dateOfBirth DATE\n);\n\nINSERT INTO \"Attendance\" (attendanceId,studentId,classId,dateAttended,isPresent) VALUES (1,1,1,'2022-09-01',1),(2,2,2,'2022-09-02',0),(3,3,3,'2022-09-03',1),(4,4,4,'2022-09-04',1),(5,5,5,'2022-09-05',0);\nINSERT INTO \"Classes\" (classID,className,teacherName) VALUES (1,'Math','Mr. Thompson'),(2,'English','Ms. Johnson'),(3,'History','Mr. White'),(4,'Art','Ms. Green'),(5,'Physical Education','Coach Black');\nINSERT INTO \"DisciplineLogs\" (logId,studentId,incidentDate,reasonForDiscipline,disciplinaryAction,resolutionDate) VALUES (1,1,'2022-09-06','Talking during class','Detention','2022-09-08'),(2,2,'2022-09-07','Cheating on a test','Suspension','2022-09-10'),(3,3,'2022-09-08','Bullying another student','Apology letter','2022-09-10'),(4,4,'2022-09-09','Damaging school property','Community service','2022-09-15'),(5,5,'2022-09-10','Late assignment submission','Extra credit assignment','2022-09-15');\nINSERT INTO \"Enrollments\" (enrollmentId,studentId,classId) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"MilestoneRecords\" (recordId,studentId,physicalMilestones,cognitiveMilestones,childAge,otherDetails) VALUES (1,1,'Walking and running','Counting to 10',8,'No additional details'),(2,2,'Riding a bike','Reading simple sentences',9,'No additional details'),(3,3,'Climbing stairs','Recognizing colors',7,'No additional details'),(4,4,'Swimming','Understanding basic concepts',10,'No additional details'),(5,5,'Playing sports','Writing short stories',11,'No additional details');\nINSERT INTO \"Students\" (id,firstName,lastName,dateOfBirth) VALUES (1,'John','Doe','2008-09-15'),(2,'Jane','Smith','2007-03-20'),(3,'Michael','Johnson','2006-11-12'),(4,'Emily','Williams','2005-06-01'),(5,'David','Brown','2004-02-15');\n",
      "question": "List the physical and cognitive milestones and the number of students that have achieved it.",
      "gold_queries": [
        "SELECT MilestoneRecords.physicalMilestones, cognitiveMilestones, Count(*) as Pupil_Count FROM MileStoneRecords"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Count the occurrences of each physical and cognitive milestone combination, and list the ones that occur less than 3 times.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT physicalMilestones, cognitiveMilestones, COUNT(*) as occurrence\nFROM MilestoneRecords\nGROUP BY physicalMilestones, cognitiveMilestones\nHAVING occurrence < 3"
          ]
        },
        {
          "interpretation": "List the unique student ages that correspond to specific physical and cognitive milestone combinations.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT childAge FROM MilestoneRecords"
          ]
        },
        {
          "interpretation": "List the physical milestones in descending order of the total count of corresponding cognitive milestones.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT physicalMilestones \nFROM MilestoneRecords \nGROUP BY physicalMilestones \nORDER BY COUNT(cognitiveMilestones) DESC"
          ]
        },
        {
          "interpretation": "Display the number of students who have achieved a particular physical milestone across different age groups.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT physicalMilestones, childAge, COUNT(studentId) AS numberOfStudents\nFROM MilestoneRecords\nGROUP BY physicalMilestones, childAge"
          ]
        },
        {
          "interpretation": "List the distinct physical milestones, their average corresponding cognitive milestones (calculated across multiple student records), and the number of students who have achieved each physical milestone.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT physicalMilestones, AVG(cognitiveMilestones) AS averageCognitiveMilestones, COUNT(studentId) AS numberOfStudents\nFROM MilestoneRecords\nGROUP BY physicalMilestones"
          ]
        },
        {
          "interpretation": "Sort the listing of physical and cognitive milestones by their order of occurrence in the provided data.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT physicalMilestones, cognitiveMilestones FROM MilestoneRecords ORDER BY recordId"
          ]
        },
        {
          "interpretation": "Group the listing of physical and cognitive milestones by physical milestone type (e.g., 'Walking and running', 'Riding a bike', etc.) and display the average cognitive milestone for each group.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT physicalMilestones, AVG(childAge) AS averageAge\nFROM MilestoneRecords\nGROUP BY physicalMilestones"
          ]
        },
        {
          "interpretation": "List the distinct physical and cognitive milestones only for students who have achieved both physical and cognitive milestones by a certain age (e.g., 8 years old).",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT physicalMilestones, cognitiveMilestones\nFROM MilestoneRecords\nWHERE studentId IN (\n    SELECT studentId\n    FROM MilestoneRecords\n    WHERE childAge = 8\n    GROUP BY studentId\n    HAVING COUNT(DISTINCT CASE WHEN physicalMilestones IS NOT NULL THEN 1 END) > 0\n    AND COUNT(DISTINCT CASE WHEN cognitiveMilestones IS NOT NULL THEN 1 END) > 0\n) AND childAge = 8"
          ]
        }
      ],
      "num_unique_execution_results": 8,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 8,
        "num_unique_queries": 8,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Student/vague_2cols_developmental_milestones/vague_2cols_developmental_milestones.sqlite",
      "db_dump": "CREATE TABLE Attendance (\n    attendanceId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    classId INTEGER,\n    dateAttended DATE,\n    isPresent BOOLEAN,\n    FOREIGN KEY(studentId) REFERENCES Students(id),\n    FOREIGN KEY(classId) REFERENCES Classes(classId)\n);\nCREATE TABLE Classes (\n    classID INTEGER PRIMARY KEY,\n    className TEXT,\n    teacherName TEXT\n);\nCREATE TABLE DisciplineLogs (\n    logId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    incidentDate DATE,\n    reasonForDiscipline TEXT,\n    disciplinaryAction TEXT,\n    resolutionDate DATE,\n    FOREIGN KEY(studentId) REFERENCES Students(id)\n);\nCREATE TABLE Enrollments (\n    enrollmentId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    classId INTEGER,\n    FOREIGN KEY(studentId) REFERENCES Students(id),\n    FOREIGN KEY(classId) REFERENCES Classes(classId)\n);\nCREATE TABLE MilestoneRecords (\n    recordId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    physicalMilestones TEXT,\n    cognitiveMilestones TEXT,\n    childAge INTEGER,\n    otherDetails TEXT,\n    FOREIGN KEY(studentId) REFERENCES Students(id)\n);\nCREATE TABLE Students (\n    id INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    dateOfBirth DATE\n);\n\nINSERT INTO \"Attendance\" (attendanceId,studentId,classId,dateAttended,isPresent) VALUES (1,1,1,'2022-09-01',1),(2,2,2,'2022-09-02',0),(3,3,3,'2022-09-03',1),(4,4,4,'2022-09-04',1),(5,5,5,'2022-09-05',0);\nINSERT INTO \"Classes\" (classID,className,teacherName) VALUES (1,'Math','Mr. Thompson'),(2,'English','Ms. Johnson'),(3,'History','Mr. White'),(4,'Art','Ms. Green'),(5,'Physical Education','Coach Black');\nINSERT INTO \"DisciplineLogs\" (logId,studentId,incidentDate,reasonForDiscipline,disciplinaryAction,resolutionDate) VALUES (1,1,'2022-09-06','Talking during class','Detention','2022-09-08'),(2,2,'2022-09-07','Cheating on a test','Suspension','2022-09-10'),(3,3,'2022-09-08','Bullying another student','Apology letter','2022-09-10'),(4,4,'2022-09-09','Damaging school property','Community service','2022-09-15'),(5,5,'2022-09-10','Late assignment submission','Extra credit assignment','2022-09-15');\nINSERT INTO \"Enrollments\" (enrollmentId,studentId,classId) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"MilestoneRecords\" (recordId,studentId,physicalMilestones,cognitiveMilestones,childAge,otherDetails) VALUES (1,1,'Walking and running','Counting to 10',8,'No additional details'),(2,2,'Riding a bike','Reading simple sentences',9,'No additional details'),(3,3,'Climbing stairs','Recognizing colors',7,'No additional details'),(4,4,'Swimming','Understanding basic concepts',10,'No additional details'),(5,5,'Playing sports','Writing short stories',11,'No additional details');\nINSERT INTO \"Students\" (id,firstName,lastName,dateOfBirth) VALUES (1,'John','Doe','2008-09-15'),(2,'Jane','Smith','2007-03-20'),(3,'Michael','Johnson','2006-11-12'),(4,'Emily','Williams','2005-06-01'),(5,'David','Brown','2004-02-15');\n",
      "question": "List the cognitive milestones and the number of students that have achieved it.",
      "gold_queries": [
        "SELECT MilestoneRecords.cognitiveMilestones, Count(*) as Pupil_Count FROM MileStoneRecords"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Identify cognitive milestones that have been achieved by all students, including the milestone description.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT cognitiveMilestones\nFROM MilestoneRecords\nGROUP BY cognitiveMilestones\nHAVING COUNT(DISTINCT studentId) = (SELECT COUNT(*) FROM Students)"
          ]
        },
        {
          "interpretation": "Report the number of students who have achieved the cognitive milestones of \"Counting to 10\" or \"Recognizing colors\".",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(DISTINCT studentId) FROM MilestoneRecords WHERE cognitiveMilestones IN ('Counting to 10', 'Recognizing colors')"
          ]
        },
        {
          "interpretation": "Retrieve a summary of cognitive milestones achieved by students, including the count of students for each milestone.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT cognitiveMilestones, COUNT(*) \nFROM MilestoneRecords \nGROUP BY cognitiveMilestones"
          ]
        },
        {
          "interpretation": "Retrieve the number of students who have reached certain cognitive milestones including \"Counting to 10\", \"Reading simple sentences\", or \"Recognizing colors\".",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(DISTINCT studentId) \nFROM MilestoneRecords \nWHERE cognitiveMilestones IN ('Counting to 10', 'Reading simple sentences', 'Recognizing colors')"
          ]
        },
        {
          "interpretation": "Report the number of students who have achieved the cognitive milestone of \"Counting to 10\".",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(studentId) FROM MilestoneRecords WHERE cognitiveMilestones = 'Counting to 10'"
          ]
        },
        {
          "interpretation": "List all the count of students who have achieved unique cognitive milestones.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(DISTINCT cognitiveMilestones) FROM MilestoneRecords"
          ]
        },
        {
          "interpretation": "Identify the unique cognitive milestones and group each student by the milestone they have achieved.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT s.firstName, s.lastName, mr.cognitiveMilestones\nFROM Students s\nJOIN MilestoneRecords mr ON s.id = mr.studentId"
          ]
        }
      ],
      "num_unique_execution_results": 7,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 7,
        "num_unique_queries": 7,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Student/vague_2cols_developmental_milestones/vague_2cols_developmental_milestones.sqlite",
      "db_dump": "CREATE TABLE Attendance (\n    attendanceId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    classId INTEGER,\n    dateAttended DATE,\n    isPresent BOOLEAN,\n    FOREIGN KEY(studentId) REFERENCES Students(id),\n    FOREIGN KEY(classId) REFERENCES Classes(classId)\n);\nCREATE TABLE Classes (\n    classID INTEGER PRIMARY KEY,\n    className TEXT,\n    teacherName TEXT\n);\nCREATE TABLE DisciplineLogs (\n    logId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    incidentDate DATE,\n    reasonForDiscipline TEXT,\n    disciplinaryAction TEXT,\n    resolutionDate DATE,\n    FOREIGN KEY(studentId) REFERENCES Students(id)\n);\nCREATE TABLE Enrollments (\n    enrollmentId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    classId INTEGER,\n    FOREIGN KEY(studentId) REFERENCES Students(id),\n    FOREIGN KEY(classId) REFERENCES Classes(classId)\n);\nCREATE TABLE MilestoneRecords (\n    recordId INTEGER PRIMARY KEY,\n    studentId INTEGER,\n    physicalMilestones TEXT,\n    cognitiveMilestones TEXT,\n    childAge INTEGER,\n    otherDetails TEXT,\n    FOREIGN KEY(studentId) REFERENCES Students(id)\n);\nCREATE TABLE Students (\n    id INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    dateOfBirth DATE\n);\n\nINSERT INTO \"Attendance\" (attendanceId,studentId,classId,dateAttended,isPresent) VALUES (1,1,1,'2022-09-01',1),(2,2,2,'2022-09-02',0),(3,3,3,'2022-09-03',1),(4,4,4,'2022-09-04',1),(5,5,5,'2022-09-05',0);\nINSERT INTO \"Classes\" (classID,className,teacherName) VALUES (1,'Math','Mr. Thompson'),(2,'English','Ms. Johnson'),(3,'History','Mr. White'),(4,'Art','Ms. Green'),(5,'Physical Education','Coach Black');\nINSERT INTO \"DisciplineLogs\" (logId,studentId,incidentDate,reasonForDiscipline,disciplinaryAction,resolutionDate) VALUES (1,1,'2022-09-06','Talking during class','Detention','2022-09-08'),(2,2,'2022-09-07','Cheating on a test','Suspension','2022-09-10'),(3,3,'2022-09-08','Bullying another student','Apology letter','2022-09-10'),(4,4,'2022-09-09','Damaging school property','Community service','2022-09-15'),(5,5,'2022-09-10','Late assignment submission','Extra credit assignment','2022-09-15');\nINSERT INTO \"Enrollments\" (enrollmentId,studentId,classId) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"MilestoneRecords\" (recordId,studentId,physicalMilestones,cognitiveMilestones,childAge,otherDetails) VALUES (1,1,'Walking and running','Counting to 10',8,'No additional details'),(2,2,'Riding a bike','Reading simple sentences',9,'No additional details'),(3,3,'Climbing stairs','Recognizing colors',7,'No additional details'),(4,4,'Swimming','Understanding basic concepts',10,'No additional details'),(5,5,'Playing sports','Writing short stories',11,'No additional details');\nINSERT INTO \"Students\" (id,firstName,lastName,dateOfBirth) VALUES (1,'John','Doe','2008-09-15'),(2,'Jane','Smith','2007-03-20'),(3,'Michael','Johnson','2006-11-12'),(4,'Emily','Williams','2005-06-01'),(5,'David','Brown','2004-02-15');\n",
      "question": "List the physical milestones and the number of students that have achieved it.",
      "gold_queries": [
        "SELECT MilestoneRecords.physicalMilestones, Count(*) as Pupil_Count FROM MileStoneRecords"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Extract and list the distinct physical milestones along with their student counts.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT physicalMilestones, COUNT(studentId) AS studentCount \nFROM MilestoneRecords \nGROUP BY physicalMilestones"
          ]
        },
        {
          "interpretation": "List the physical milestones in order of the number of students who have achieved them.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT physicalMilestones \nFROM MilestoneRecords \nGROUP BY physicalMilestones \nORDER BY COUNT(*) DESC"
          ]
        },
        {
          "interpretation": "Count the number of students who have achieved specific physical milestones (e.g., 'Walking and running').",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(*) FROM MilestoneRecords WHERE physicalMilestones = 'Walking and running'"
          ]
        },
        {
          "interpretation": "Provide the physical milestones that 75% of students have achieved.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT physicalMilestones\nFROM MilestoneRecords\nGROUP BY physicalMilestones\nHAVING COUNT(studentId) >= (SELECT COUNT(id) * 0.75 FROM Students)"
          ]
        },
        {
          "interpretation": "Count and display all distinct physical milestones that students have achieved in the database.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(DISTINCT physicalMilestones) FROM MilestoneRecords"
          ]
        },
        {
          "interpretation": "Find the physical milestones and the percentage of students who have achieved each milestone.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT physicalMilestones, (COUNT(studentId) * 100.0 / (SELECT COUNT(DISTINCT studentId) FROM MilestoneRecords)) AS percentage\nFROM MilestoneRecords\nGROUP BY physicalMilestones"
          ]
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Traffic/vague_2cols_designer/vague_2cols_designer.sqlite",
      "db_dump": "CREATE TABLE Accidents(\n    AccidentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    DateOfAccident DATE,\n    TimeOfAccident TIME,\n    LocationText TEXT,\n    Latitude REAL,\n    Longitude REAL,\n    Severity TEXT);\nCREATE TABLE CivilEngineers (\n    ProjectID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Intersection TEXT,\n    Civil_Engineer TEXT,\n    Engineering_Firm TEXT,\n    StartDate DATE,\n    EndDate DATE,\n    Budget REAL);\nCREATE TABLE Drivers(\n    DriverID INTEGER PRIMARY KEY AUTOINCREMENT,\n    LicenseNumber TEXT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE PoliceReports(\n    ReportID INTEGER PRIMARY KEY AUTOINCREMENT,\n    DateReported DATE,\n    OfficerID INT,\n    AccidentID INT,\n    OffenseType TEXT,\n    Penalty TEXT);\nCREATE TABLE Roads(\n    RoadID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StreetName TEXT,\n    City TEXT,\n    State TEXT,\n    ZipCode INT);\nCREATE TABLE VehicleTypes(\n    TypeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Make TEXT,\n    Model TEXT,\n    Year INT);\n\nINSERT INTO \"Accidents\" (AccidentID,DateOfAccident,TimeOfAccident,LocationText,Latitude,Longitude,Severity) VALUES (1,'2021-08-01','10:30 AM','Main St & Oak Ave',40.0,-89.0,'Minor'),(2,'2021-08-02','11:15 AM','Elm St & Pine Ave',41.0,-90.0,'Moderate');\nINSERT INTO \"CivilEngineers\" (ProjectID,Intersection,Civil_Engineer,Engineering_Firm,StartDate,EndDate,Budget) VALUES (1,'Main St & Oak Ave','John Doe','ABC Engineering','2021-06-01','2021-09-30',500000.0),(2,'Elm St & Pine Ave','Jane Smith','XYZ Engineering','2021-07-01','2021-10-31',600000.0);\nINSERT INTO \"Drivers\" (DriverID,LicenseNumber,Name,Address,PhoneNumber) VALUES (1,'A1234CD','Alice Johnson','123 Main St, Springfield, IL','555-123-4567'),(2,'BCDEFGH','Bob Smith','456 Elm St, Chicago, IL','555-987-6543');\nINSERT INTO \"PoliceReports\" (ReportID,DateReported,OfficerID,AccidentID,OffenseType,Penalty) VALUES (1,'2021-08-01',1,1,'Speeding','Warning'),(2,'2021-08-02',2,2,'Running Red Light','$100 Fine');\nINSERT INTO \"Roads\" (RoadID,StreetName,City,State,ZipCode) VALUES (1,'Bridge St','Springfield','IL',62704),(2,'Parkway Dr','Chicago','IL',60616);\nINSERT INTO \"VehicleTypes\" (TypeID,Make,Model,Year) VALUES (1,'Toyota','Corolla',2018),(2,'Honda','Civic',2019);\n",
      "question": "What engineering firm(s) are located at the intersection of Elm Street and Pine Avenue, and which civil engineers work there?",
      "gold_queries": [
        "SELECT Civil_Engineer, Engineering_Firm FROM CivilEngineers WHERE Intersection = 'Elm St & Pine Ave';"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What engineering firms are at the intersection of Elm Street and Pine Avenue, and what are the names of the civil engineers affiliated with these firms?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Engineering_Firm, Civil_Engineer FROM CivilEngineers WHERE Intersection = 'Elm St & Pine Ave'"
          ]
        },
        {
          "interpretation": "What engineering firms from the table CivilEngineers have a project at the intersection of Elm Street and Pine Avenue?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Engineering_Firm FROM CivilEngineers WHERE Intersection = 'Elm St & Pine Ave'"
          ]
        },
        {
          "interpretation": "What civil engineers are associated with engineering firms located at the intersection of Elm Street and Pine Avenue?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Civil_Engineer FROM CivilEngineers WHERE Intersection = 'Elm St & Pine Ave'"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "one_found": true,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Traffic/vague_2cols_designer/vague_2cols_designer.sqlite",
      "db_dump": "CREATE TABLE Accidents(\n    AccidentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    DateOfAccident DATE,\n    TimeOfAccident TIME,\n    LocationText TEXT,\n    Latitude REAL,\n    Longitude REAL,\n    Severity TEXT);\nCREATE TABLE CivilEngineers (\n    ProjectID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Intersection TEXT,\n    Civil_Engineer TEXT,\n    Engineering_Firm TEXT,\n    StartDate DATE,\n    EndDate DATE,\n    Budget REAL);\nCREATE TABLE Drivers(\n    DriverID INTEGER PRIMARY KEY AUTOINCREMENT,\n    LicenseNumber TEXT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE PoliceReports(\n    ReportID INTEGER PRIMARY KEY AUTOINCREMENT,\n    DateReported DATE,\n    OfficerID INT,\n    AccidentID INT,\n    OffenseType TEXT,\n    Penalty TEXT);\nCREATE TABLE Roads(\n    RoadID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StreetName TEXT,\n    City TEXT,\n    State TEXT,\n    ZipCode INT);\nCREATE TABLE VehicleTypes(\n    TypeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Make TEXT,\n    Model TEXT,\n    Year INT);\n\nINSERT INTO \"Accidents\" (AccidentID,DateOfAccident,TimeOfAccident,LocationText,Latitude,Longitude,Severity) VALUES (1,'2021-08-01','10:30 AM','Main St & Oak Ave',40.0,-89.0,'Minor'),(2,'2021-08-02','11:15 AM','Elm St & Pine Ave',41.0,-90.0,'Moderate');\nINSERT INTO \"CivilEngineers\" (ProjectID,Intersection,Civil_Engineer,Engineering_Firm,StartDate,EndDate,Budget) VALUES (1,'Main St & Oak Ave','John Doe','ABC Engineering','2021-06-01','2021-09-30',500000.0),(2,'Elm St & Pine Ave','Jane Smith','XYZ Engineering','2021-07-01','2021-10-31',600000.0);\nINSERT INTO \"Drivers\" (DriverID,LicenseNumber,Name,Address,PhoneNumber) VALUES (1,'A1234CD','Alice Johnson','123 Main St, Springfield, IL','555-123-4567'),(2,'BCDEFGH','Bob Smith','456 Elm St, Chicago, IL','555-987-6543');\nINSERT INTO \"PoliceReports\" (ReportID,DateReported,OfficerID,AccidentID,OffenseType,Penalty) VALUES (1,'2021-08-01',1,1,'Speeding','Warning'),(2,'2021-08-02',2,2,'Running Red Light','$100 Fine');\nINSERT INTO \"Roads\" (RoadID,StreetName,City,State,ZipCode) VALUES (1,'Bridge St','Springfield','IL',62704),(2,'Parkway Dr','Chicago','IL',60616);\nINSERT INTO \"VehicleTypes\" (TypeID,Make,Model,Year) VALUES (1,'Toyota','Corolla',2018),(2,'Honda','Civic',2019);\n",
      "question": "Which civil engineer(s) work at the intersection of Elm Street and Pine Avenue?",
      "gold_queries": [
        "SELECT Civil_Engineer FROM CivilEngineers WHERE Intersection = 'Elm St & Pine Ave';"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Which civil engineers are currently or have ever worked at the intersection of Elm Street and Pine Avenue?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Civil_Engineer FROM CivilEngineers WHERE Intersection = 'Elm St & Pine Ave'"
          ]
        },
        {
          "interpretation": "Do we need to find civil engineers whose workplace or office is located near or actually at the intersection of Elm Street and Pine Avenue?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Civil_Engineer, Engineering_Firm\nFROM CivilEngineers\nWHERE Intersection = 'Elm St & Pine Ave'"
          ]
        },
        {
          "interpretation": "Which civil engineer(s) has/have worked on a project recently (within the last year) at the intersection of Elm Street and Pine Avenue?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Civil_Engineer FROM CivilEngineers WHERE Intersection = 'Elm St & Pine Ave' AND EndDate >= DATE('now', '-1 year')"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "one_found": true,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Traffic/vague_2cols_designer/vague_2cols_designer.sqlite",
      "db_dump": "CREATE TABLE Accidents(\n    AccidentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    DateOfAccident DATE,\n    TimeOfAccident TIME,\n    LocationText TEXT,\n    Latitude REAL,\n    Longitude REAL,\n    Severity TEXT);\nCREATE TABLE CivilEngineers (\n    ProjectID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Intersection TEXT,\n    Civil_Engineer TEXT,\n    Engineering_Firm TEXT,\n    StartDate DATE,\n    EndDate DATE,\n    Budget REAL);\nCREATE TABLE Drivers(\n    DriverID INTEGER PRIMARY KEY AUTOINCREMENT,\n    LicenseNumber TEXT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE PoliceReports(\n    ReportID INTEGER PRIMARY KEY AUTOINCREMENT,\n    DateReported DATE,\n    OfficerID INT,\n    AccidentID INT,\n    OffenseType TEXT,\n    Penalty TEXT);\nCREATE TABLE Roads(\n    RoadID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StreetName TEXT,\n    City TEXT,\n    State TEXT,\n    ZipCode INT);\nCREATE TABLE VehicleTypes(\n    TypeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Make TEXT,\n    Model TEXT,\n    Year INT);\n\nINSERT INTO \"Accidents\" (AccidentID,DateOfAccident,TimeOfAccident,LocationText,Latitude,Longitude,Severity) VALUES (1,'2021-08-01','10:30 AM','Main St & Oak Ave',40.0,-89.0,'Minor'),(2,'2021-08-02','11:15 AM','Elm St & Pine Ave',41.0,-90.0,'Moderate');\nINSERT INTO \"CivilEngineers\" (ProjectID,Intersection,Civil_Engineer,Engineering_Firm,StartDate,EndDate,Budget) VALUES (1,'Main St & Oak Ave','John Doe','ABC Engineering','2021-06-01','2021-09-30',500000.0),(2,'Elm St & Pine Ave','Jane Smith','XYZ Engineering','2021-07-01','2021-10-31',600000.0);\nINSERT INTO \"Drivers\" (DriverID,LicenseNumber,Name,Address,PhoneNumber) VALUES (1,'A1234CD','Alice Johnson','123 Main St, Springfield, IL','555-123-4567'),(2,'BCDEFGH','Bob Smith','456 Elm St, Chicago, IL','555-987-6543');\nINSERT INTO \"PoliceReports\" (ReportID,DateReported,OfficerID,AccidentID,OffenseType,Penalty) VALUES (1,'2021-08-01',1,1,'Speeding','Warning'),(2,'2021-08-02',2,2,'Running Red Light','$100 Fine');\nINSERT INTO \"Roads\" (RoadID,StreetName,City,State,ZipCode) VALUES (1,'Bridge St','Springfield','IL',62704),(2,'Parkway Dr','Chicago','IL',60616);\nINSERT INTO \"VehicleTypes\" (TypeID,Make,Model,Year) VALUES (1,'Toyota','Corolla',2018),(2,'Honda','Civic',2019);\n",
      "question": "Which engineering firm has the biggest budget?",
      "gold_queries": [
        "SELECT Engineering_Firm FROM CivilEngineers ORDER BY Budget DESC LIMIT 1;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What are the names of engineering firms that have the highest budget.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Engineering_Firm FROM CivilEngineers ORDER BY Budget DESC LIMIT 1"
          ]
        },
        {
          "interpretation": "Which engineering firm(s) are associated with the top 2 highest budgets.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Engineering_Firm FROM CivilEngineers ORDER BY Budget DESC LIMIT 2"
          ]
        },
        {
          "interpretation": "What is the total budget of the engineering firm with the highest budget.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT MAX(Budget) FROM CivilEngineers"
          ]
        },
        {
          "interpretation": "Who is the civil engineer associated with the project that has the highest budget (if an engineering firm has multiple engineers).",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Civil_Engineer FROM CivilEngineers ORDER BY Budget DESC LIMIT 1"
          ]
        },
        {
          "interpretation": "Note: These interpretations consider different aspects of the question, from the presence or absence of articles, and the focus on a single record or multiple records.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 6,
            "num_unique_queries": 6,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Address FROM Drivers WHERE DriverID = 1",
            "SELECT DateOfAccident, TimeOfAccident, LocationText FROM Accidents WHERE Severity = 'Minor'",
            "SELECT Civil_Engineer, Engineering_Firm FROM CivilEngineers WHERE Intersection = 'Main St & Oak Ave'",
            "SELECT Make, Model, Year FROM VehicleTypes WHERE Year > 2018",
            "SELECT StreetName, City, State FROM Roads WHERE ZipCode = 62704",
            "SELECT OffenseType, Penalty FROM PoliceReports WHERE AccidentID = 1"
          ]
        },
        {
          "interpretation": "Note: These interpretations consider different aspects of the question, from the presence or absence of articles, and the focus on a single record or multiple records.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 6,
            "num_unique_queries": 6,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Address FROM Drivers WHERE DriverID = 1",
            "SELECT DateOfAccident, TimeOfAccident, LocationText FROM Accidents WHERE Severity = 'Minor'",
            "SELECT Civil_Engineer, Engineering_Firm FROM CivilEngineers WHERE Intersection = 'Main St & Oak Ave'",
            "SELECT Make, Model, Year FROM VehicleTypes WHERE Year > 2018",
            "SELECT StreetName, City, State FROM Roads WHERE ZipCode = 62704",
            "SELECT OffenseType, Penalty FROM PoliceReports WHERE AccidentID = 1"
          ]
        },
        {
          "interpretation": "Note: These interpretations consider different aspects of the question, from the presence or absence of articles, and the focus on a single record or multiple records.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 6,
            "num_unique_queries": 6,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Address FROM Drivers WHERE DriverID = 1",
            "SELECT DateOfAccident, TimeOfAccident, LocationText FROM Accidents WHERE Severity = 'Minor'",
            "SELECT Civil_Engineer, Engineering_Firm FROM CivilEngineers WHERE Intersection = 'Main St & Oak Ave'",
            "SELECT Make, Model, Year FROM VehicleTypes WHERE Year > 2018",
            "SELECT StreetName, City, State FROM Roads WHERE ZipCode = 62704",
            "SELECT OffenseType, Penalty FROM PoliceReports WHERE AccidentID = 1"
          ]
        },
        {
          "interpretation": "Note: These interpretations consider different aspects of the question, from the presence or absence of articles, and the focus on a single record or multiple records.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 6,
            "num_unique_queries": 6,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Address FROM Drivers WHERE DriverID = 1",
            "SELECT DateOfAccident, TimeOfAccident, LocationText FROM Accidents WHERE Severity = 'Minor'",
            "SELECT Civil_Engineer, Engineering_Firm FROM CivilEngineers WHERE Intersection = 'Main St & Oak Ave'",
            "SELECT Make, Model, Year FROM VehicleTypes WHERE Year > 2018",
            "SELECT StreetName, City, State FROM Roads WHERE ZipCode = 62704",
            "SELECT OffenseType, Penalty FROM PoliceReports WHERE AccidentID = 1"
          ]
        },
        {
          "interpretation": "Note: These interpretations consider different aspects of the question, from the presence or absence of articles, and the focus on a single record or multiple records.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 6,
            "num_unique_queries": 6,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Address FROM Drivers WHERE DriverID = 1",
            "SELECT DateOfAccident, TimeOfAccident, LocationText FROM Accidents WHERE Severity = 'Minor'",
            "SELECT Civil_Engineer, Engineering_Firm FROM CivilEngineers WHERE Intersection = 'Main St & Oak Ave'",
            "SELECT Make, Model, Year FROM VehicleTypes WHERE Year > 2018",
            "SELECT StreetName, City, State FROM Roads WHERE ZipCode = 62704",
            "SELECT OffenseType, Penalty FROM PoliceReports WHERE AccidentID = 1"
          ]
        },
        {
          "interpretation": "Note: These interpretations consider different aspects of the question, from the presence or absence of articles, and the focus on a single record or multiple records.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 6,
            "num_unique_queries": 6,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Address FROM Drivers WHERE DriverID = 1",
            "SELECT DateOfAccident, TimeOfAccident, LocationText FROM Accidents WHERE Severity = 'Minor'",
            "SELECT Civil_Engineer, Engineering_Firm FROM CivilEngineers WHERE Intersection = 'Main St & Oak Ave'",
            "SELECT Make, Model, Year FROM VehicleTypes WHERE Year > 2018",
            "SELECT StreetName, City, State FROM Roads WHERE ZipCode = 62704",
            "SELECT OffenseType, Penalty FROM PoliceReports WHERE AccidentID = 1"
          ]
        }
      ],
      "num_unique_execution_results": 10,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.1,
        "one_found": true,
        "f1_score": 0.18181818181818182,
        "num_queries": 40,
        "num_unique_queries": 10,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Traffic/vague_2cols_designer/vague_2cols_designer.sqlite",
      "db_dump": "CREATE TABLE Accidents(\n    AccidentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    DateOfAccident DATE,\n    TimeOfAccident TIME,\n    LocationText TEXT,\n    Latitude REAL,\n    Longitude REAL,\n    Severity TEXT);\nCREATE TABLE CivilEngineers (\n    ProjectID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Intersection TEXT,\n    Civil_Engineer TEXT,\n    Engineering_Firm TEXT,\n    StartDate DATE,\n    EndDate DATE,\n    Budget REAL);\nCREATE TABLE Drivers(\n    DriverID INTEGER PRIMARY KEY AUTOINCREMENT,\n    LicenseNumber TEXT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE PoliceReports(\n    ReportID INTEGER PRIMARY KEY AUTOINCREMENT,\n    DateReported DATE,\n    OfficerID INT,\n    AccidentID INT,\n    OffenseType TEXT,\n    Penalty TEXT);\nCREATE TABLE Roads(\n    RoadID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StreetName TEXT,\n    City TEXT,\n    State TEXT,\n    ZipCode INT);\nCREATE TABLE VehicleTypes(\n    TypeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Make TEXT,\n    Model TEXT,\n    Year INT);\n\nINSERT INTO \"Accidents\" (AccidentID,DateOfAccident,TimeOfAccident,LocationText,Latitude,Longitude,Severity) VALUES (1,'2021-08-01','10:30 AM','Main St & Oak Ave',40.0,-89.0,'Minor'),(2,'2021-08-02','11:15 AM','Elm St & Pine Ave',41.0,-90.0,'Moderate');\nINSERT INTO \"CivilEngineers\" (ProjectID,Intersection,Civil_Engineer,Engineering_Firm,StartDate,EndDate,Budget) VALUES (1,'Main St & Oak Ave','John Doe','ABC Engineering','2021-06-01','2021-09-30',500000.0),(2,'Elm St & Pine Ave','Jane Smith','XYZ Engineering','2021-07-01','2021-10-31',600000.0);\nINSERT INTO \"Drivers\" (DriverID,LicenseNumber,Name,Address,PhoneNumber) VALUES (1,'A1234CD','Alice Johnson','123 Main St, Springfield, IL','555-123-4567'),(2,'BCDEFGH','Bob Smith','456 Elm St, Chicago, IL','555-987-6543');\nINSERT INTO \"PoliceReports\" (ReportID,DateReported,OfficerID,AccidentID,OffenseType,Penalty) VALUES (1,'2021-08-01',1,1,'Speeding','Warning'),(2,'2021-08-02',2,2,'Running Red Light','$100 Fine');\nINSERT INTO \"Roads\" (RoadID,StreetName,City,State,ZipCode) VALUES (1,'Bridge St','Springfield','IL',62704),(2,'Parkway Dr','Chicago','IL',60616);\nINSERT INTO \"VehicleTypes\" (TypeID,Make,Model,Year) VALUES (1,'Toyota','Corolla',2018),(2,'Honda','Civic',2019);\n",
      "question": "Who works at the intersection of Elm Street and Pine Avenue?",
      "gold_queries": [
        "SELECT Civil_Engineer FROM CivilEngineers WHERE Intersection = 'Elm St & Pine Ave';",
        "SELECT Engineering_Firm FROM CivilEngineers WHERE Intersection = 'Elm St & Pine Ave';",
        "SELECT Civil_Engineer, Engineering_Firm FROM CivilEngineers WHERE Intersection = 'Elm St & Pine Ave';"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Do any civil engineers in the database work within a reasonable proximity to the intersection of Elm Street and Pine Avenue?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Civil_Engineer, Engineering_Firm, StartDate, EndDate, Budget\nFROM CivilEngineers\nWHERE Intersection = 'Elm St & Pine Ave'"
          ]
        },
        {
          "interpretation": "Do engineers know nothing about civil engineers working at the intersection of Elm Street and Pine Avenue before our inquiries?",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Civil_Engineer, Engineering_Firm FROM CivilEngineers WHERE Intersection = 'Elm St & Pine Ave'"
          ]
        },
        {
          "interpretation": "Which civil engineers are based at or regularly work nearby the intersection of Elm Street and Pine Avenue?",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Civil_Engineer FROM CivilEngineers WHERE Intersection = 'Elm St & Pine Ave'"
          ]
        },
        {
          "interpretation": "Is the intersection of Elm Street and Pine Avenue named in a civil engineer schedule?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Intersection FROM CivilEngineers WHERE Intersection = 'Elm St & Pine Ave'"
          ]
        },
        {
          "interpretation": "Would civil engineers from XYZ Engineering be allowed to work at the intersection of Elm Street and Pine Avenue if they were deployed from another firm?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Civil_Engineer\nFROM CivilEngineers\nWHERE Intersection = 'Elm St & Pine Ave' AND Engineering_Firm <> 'XYZ Engineering'"
          ]
        },
        {
          "interpretation": "Can a list of projects be retrieved where the intersection of Elm Street and Pine Avenue matches the location for civil engineers' work?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ProjectID, Intersection, Civil_Engineer, Engineering_Firm, StartDate, EndDate, Budget \nFROM CivilEngineers \nWHERE Intersection = 'Elm St & Pine Ave'"
          ]
        },
        {
          "interpretation": "Can the freedom to counsel or assistance also refer to cases that involve civil engineers located near the Elm Street and Pine Avenue intersection?",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Engineering_Firm FROM CivilEngineers WHERE Intersection = 'Elm St & Pine Ave'"
          ]
        },
        {
          "interpretation": "Are compliance inspections for safety aspects near the intersection of Elm Street and Pine Avenue adversely impacting civil engineers?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.Civil_Engineer, T1.Engineering_Firm, T2.AccidentID, T2.DateOfAccident, T2.Severity\nFROM CivilEngineers AS T1\nJOIN Accidents AS T2\nON T2.LocationText = T1.Intersection\nWHERE T1.Intersection = 'Elm St & Pine Ave'"
          ]
        },
        {
          "interpretation": "Can employee job modifications potentially influence civil engineer re-assignments at or near the intersection of Elm Street and Pine Avenue?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Civil_Engineer, Engineering_Firm, StartDate, EndDate\nFROM CivilEngineers\nWHERE Intersection = 'Elm St & Pine Ave'"
          ]
        }
      ],
      "num_unique_execution_results": 9,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "one_found": true,
        "f1_score": 0.5,
        "num_queries": 9,
        "num_unique_queries": 9,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/vague/Traffic/vague_2cols_designer/vague_2cols_designer.sqlite",
      "db_dump": "CREATE TABLE Accidents(\n    AccidentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    DateOfAccident DATE,\n    TimeOfAccident TIME,\n    LocationText TEXT,\n    Latitude REAL,\n    Longitude REAL,\n    Severity TEXT);\nCREATE TABLE CivilEngineers (\n    ProjectID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Intersection TEXT,\n    Civil_Engineer TEXT,\n    Engineering_Firm TEXT,\n    StartDate DATE,\n    EndDate DATE,\n    Budget REAL);\nCREATE TABLE Drivers(\n    DriverID INTEGER PRIMARY KEY AUTOINCREMENT,\n    LicenseNumber TEXT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE PoliceReports(\n    ReportID INTEGER PRIMARY KEY AUTOINCREMENT,\n    DateReported DATE,\n    OfficerID INT,\n    AccidentID INT,\n    OffenseType TEXT,\n    Penalty TEXT);\nCREATE TABLE Roads(\n    RoadID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StreetName TEXT,\n    City TEXT,\n    State TEXT,\n    ZipCode INT);\nCREATE TABLE VehicleTypes(\n    TypeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Make TEXT,\n    Model TEXT,\n    Year INT);\n\nINSERT INTO \"Accidents\" (AccidentID,DateOfAccident,TimeOfAccident,LocationText,Latitude,Longitude,Severity) VALUES (1,'2021-08-01','10:30 AM','Main St & Oak Ave',40.0,-89.0,'Minor'),(2,'2021-08-02','11:15 AM','Elm St & Pine Ave',41.0,-90.0,'Moderate');\nINSERT INTO \"CivilEngineers\" (ProjectID,Intersection,Civil_Engineer,Engineering_Firm,StartDate,EndDate,Budget) VALUES (1,'Main St & Oak Ave','John Doe','ABC Engineering','2021-06-01','2021-09-30',500000.0),(2,'Elm St & Pine Ave','Jane Smith','XYZ Engineering','2021-07-01','2021-10-31',600000.0);\nINSERT INTO \"Drivers\" (DriverID,LicenseNumber,Name,Address,PhoneNumber) VALUES (1,'A1234CD','Alice Johnson','123 Main St, Springfield, IL','555-123-4567'),(2,'BCDEFGH','Bob Smith','456 Elm St, Chicago, IL','555-987-6543');\nINSERT INTO \"PoliceReports\" (ReportID,DateReported,OfficerID,AccidentID,OffenseType,Penalty) VALUES (1,'2021-08-01',1,1,'Speeding','Warning'),(2,'2021-08-02',2,2,'Running Red Light','$100 Fine');\nINSERT INTO \"Roads\" (RoadID,StreetName,City,State,ZipCode) VALUES (1,'Bridge St','Springfield','IL',62704),(2,'Parkway Dr','Chicago','IL',60616);\nINSERT INTO \"VehicleTypes\" (TypeID,Make,Model,Year) VALUES (1,'Toyota','Corolla',2018),(2,'Honda','Civic',2019);\n",
      "question": "Which civil engineer works in the company with the biggest budget?",
      "gold_queries": [
        "SELECT Civil_Engineer FROM CivilEngineers ORDER BY Budget DESC LIMIT 1;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "The civil engineer who is assigned to the project with the highest budget across the entire CivilEngineers table.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Civil_Engineer FROM CivilEngineers ORDER BY Budget DESC LIMIT 1"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "one_found": true,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Traffic/vague_2cols_designer/vague_2cols_designer.sqlite",
      "db_dump": "CREATE TABLE Accidents(\n    AccidentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    DateOfAccident DATE,\n    TimeOfAccident TIME,\n    LocationText TEXT,\n    Latitude REAL,\n    Longitude REAL,\n    Severity TEXT);\nCREATE TABLE CivilEngineers (\n    ProjectID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Intersection TEXT,\n    Civil_Engineer TEXT,\n    Engineering_Firm TEXT,\n    StartDate DATE,\n    EndDate DATE,\n    Budget REAL);\nCREATE TABLE Drivers(\n    DriverID INTEGER PRIMARY KEY AUTOINCREMENT,\n    LicenseNumber TEXT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE PoliceReports(\n    ReportID INTEGER PRIMARY KEY AUTOINCREMENT,\n    DateReported DATE,\n    OfficerID INT,\n    AccidentID INT,\n    OffenseType TEXT,\n    Penalty TEXT);\nCREATE TABLE Roads(\n    RoadID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StreetName TEXT,\n    City TEXT,\n    State TEXT,\n    ZipCode INT);\nCREATE TABLE VehicleTypes(\n    TypeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Make TEXT,\n    Model TEXT,\n    Year INT);\n\nINSERT INTO \"Accidents\" (AccidentID,DateOfAccident,TimeOfAccident,LocationText,Latitude,Longitude,Severity) VALUES (1,'2021-08-01','10:30 AM','Main St & Oak Ave',40.0,-89.0,'Minor'),(2,'2021-08-02','11:15 AM','Elm St & Pine Ave',41.0,-90.0,'Moderate');\nINSERT INTO \"CivilEngineers\" (ProjectID,Intersection,Civil_Engineer,Engineering_Firm,StartDate,EndDate,Budget) VALUES (1,'Main St & Oak Ave','John Doe','ABC Engineering','2021-06-01','2021-09-30',500000.0),(2,'Elm St & Pine Ave','Jane Smith','XYZ Engineering','2021-07-01','2021-10-31',600000.0);\nINSERT INTO \"Drivers\" (DriverID,LicenseNumber,Name,Address,PhoneNumber) VALUES (1,'A1234CD','Alice Johnson','123 Main St, Springfield, IL','555-123-4567'),(2,'BCDEFGH','Bob Smith','456 Elm St, Chicago, IL','555-987-6543');\nINSERT INTO \"PoliceReports\" (ReportID,DateReported,OfficerID,AccidentID,OffenseType,Penalty) VALUES (1,'2021-08-01',1,1,'Speeding','Warning'),(2,'2021-08-02',2,2,'Running Red Light','$100 Fine');\nINSERT INTO \"Roads\" (RoadID,StreetName,City,State,ZipCode) VALUES (1,'Bridge St','Springfield','IL',62704),(2,'Parkway Dr','Chicago','IL',60616);\nINSERT INTO \"VehicleTypes\" (TypeID,Make,Model,Year) VALUES (1,'Toyota','Corolla',2018),(2,'Honda','Civic',2019);\n",
      "question": "What engineering firm(s) are located at the intersection of Elm Street and Pine Avenue?",
      "gold_queries": [
        "SELECT Engineering_Firm FROM CivilEngineers WHERE Intersection = 'Elm St & Pine Ave';"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Identify the engineering firm(s) that work on projects or were involved in projects at intersections containing Elm or Pine name in their street naming.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Engineering_Firm FROM CivilEngineers WHERE Intersection LIKE '%Elm%' OR Intersection LIKE '%Pine%'"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "one_found": true,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Traffic/vague_2cols_designer/vague_2cols_designer.sqlite",
      "db_dump": "CREATE TABLE Accidents(\n    AccidentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    DateOfAccident DATE,\n    TimeOfAccident TIME,\n    LocationText TEXT,\n    Latitude REAL,\n    Longitude REAL,\n    Severity TEXT);\nCREATE TABLE CivilEngineers (\n    ProjectID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Intersection TEXT,\n    Civil_Engineer TEXT,\n    Engineering_Firm TEXT,\n    StartDate DATE,\n    EndDate DATE,\n    Budget REAL);\nCREATE TABLE Drivers(\n    DriverID INTEGER PRIMARY KEY AUTOINCREMENT,\n    LicenseNumber TEXT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE PoliceReports(\n    ReportID INTEGER PRIMARY KEY AUTOINCREMENT,\n    DateReported DATE,\n    OfficerID INT,\n    AccidentID INT,\n    OffenseType TEXT,\n    Penalty TEXT);\nCREATE TABLE Roads(\n    RoadID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StreetName TEXT,\n    City TEXT,\n    State TEXT,\n    ZipCode INT);\nCREATE TABLE VehicleTypes(\n    TypeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Make TEXT,\n    Model TEXT,\n    Year INT);\n\nINSERT INTO \"Accidents\" (AccidentID,DateOfAccident,TimeOfAccident,LocationText,Latitude,Longitude,Severity) VALUES (1,'2021-08-01','10:30 AM','Main St & Oak Ave',40.0,-89.0,'Minor'),(2,'2021-08-02','11:15 AM','Elm St & Pine Ave',41.0,-90.0,'Moderate');\nINSERT INTO \"CivilEngineers\" (ProjectID,Intersection,Civil_Engineer,Engineering_Firm,StartDate,EndDate,Budget) VALUES (1,'Main St & Oak Ave','John Doe','ABC Engineering','2021-06-01','2021-09-30',500000.0),(2,'Elm St & Pine Ave','Jane Smith','XYZ Engineering','2021-07-01','2021-10-31',600000.0);\nINSERT INTO \"Drivers\" (DriverID,LicenseNumber,Name,Address,PhoneNumber) VALUES (1,'A1234CD','Alice Johnson','123 Main St, Springfield, IL','555-123-4567'),(2,'BCDEFGH','Bob Smith','456 Elm St, Chicago, IL','555-987-6543');\nINSERT INTO \"PoliceReports\" (ReportID,DateReported,OfficerID,AccidentID,OffenseType,Penalty) VALUES (1,'2021-08-01',1,1,'Speeding','Warning'),(2,'2021-08-02',2,2,'Running Red Light','$100 Fine');\nINSERT INTO \"Roads\" (RoadID,StreetName,City,State,ZipCode) VALUES (1,'Bridge St','Springfield','IL',62704),(2,'Parkway Dr','Chicago','IL',60616);\nINSERT INTO \"VehicleTypes\" (TypeID,Make,Model,Year) VALUES (1,'Toyota','Corolla',2018),(2,'Honda','Civic',2019);\n",
      "question": "Which civil engineer works for the company with the biggest budget and which company is it?",
      "gold_queries": [
        "SELECT Civil_Engineer, Engineering_Firm FROM CivilEngineers ORDER BY Budget DESC LIMIT 1;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "The engineering firm with the biggest budget and the civil engineer employed at this firm.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Engineering_Firm, Civil_Engineer FROM CivilEngineers ORDER BY Budget DESC LIMIT 1"
          ]
        },
        {
          "interpretation": "The civil engineer who has the highest budget overall.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Civil_Engineer FROM CivilEngineers ORDER BY Budget DESC LIMIT 1"
          ]
        },
        {
          "interpretation": "The civil engineer who has the most budget at ABC Engineering.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Civil_Engineer \nFROM CivilEngineers \nWHERE Engineering_Firm = 'ABC Engineering' \nORDER BY Budget DESC \nLIMIT 1"
          ]
        },
        {
          "interpretation": "The civil engineer with the largest budget overall regardless of the firm they are with.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Civil_Engineer, MAX(Budget) FROM CivilEngineers GROUP BY Civil_Engineer ORDER BY SUM(Budget) DESC LIMIT 1"
          ]
        },
        {
          "interpretation": "The name of the engineering firm with the highest budget.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Engineering_Firm FROM CivilEngineers ORDER BY Budget DESC LIMIT 1"
          ]
        },
        {
          "interpretation": "The names of the civil engineers with the biggest budget at different firms.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Engineering_Firm, Civil_Engineer, MAX(Budget) as MaxBudget\nFROM CivilEngineers\nGROUP BY Engineering_Firm"
          ]
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.16666666666666666,
        "one_found": true,
        "f1_score": 0.2857142857142857,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Traffic/vague_2cols_designer/vague_2cols_designer.sqlite",
      "db_dump": "CREATE TABLE Accidents(\n    AccidentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    DateOfAccident DATE,\n    TimeOfAccident TIME,\n    LocationText TEXT,\n    Latitude REAL,\n    Longitude REAL,\n    Severity TEXT);\nCREATE TABLE CivilEngineers (\n    ProjectID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Intersection TEXT,\n    Civil_Engineer TEXT,\n    Engineering_Firm TEXT,\n    StartDate DATE,\n    EndDate DATE,\n    Budget REAL);\nCREATE TABLE Drivers(\n    DriverID INTEGER PRIMARY KEY AUTOINCREMENT,\n    LicenseNumber TEXT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT);\nCREATE TABLE PoliceReports(\n    ReportID INTEGER PRIMARY KEY AUTOINCREMENT,\n    DateReported DATE,\n    OfficerID INT,\n    AccidentID INT,\n    OffenseType TEXT,\n    Penalty TEXT);\nCREATE TABLE Roads(\n    RoadID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StreetName TEXT,\n    City TEXT,\n    State TEXT,\n    ZipCode INT);\nCREATE TABLE VehicleTypes(\n    TypeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Make TEXT,\n    Model TEXT,\n    Year INT);\n\nINSERT INTO \"Accidents\" (AccidentID,DateOfAccident,TimeOfAccident,LocationText,Latitude,Longitude,Severity) VALUES (1,'2021-08-01','10:30 AM','Main St & Oak Ave',40.0,-89.0,'Minor'),(2,'2021-08-02','11:15 AM','Elm St & Pine Ave',41.0,-90.0,'Moderate');\nINSERT INTO \"CivilEngineers\" (ProjectID,Intersection,Civil_Engineer,Engineering_Firm,StartDate,EndDate,Budget) VALUES (1,'Main St & Oak Ave','John Doe','ABC Engineering','2021-06-01','2021-09-30',500000.0),(2,'Elm St & Pine Ave','Jane Smith','XYZ Engineering','2021-07-01','2021-10-31',600000.0);\nINSERT INTO \"Drivers\" (DriverID,LicenseNumber,Name,Address,PhoneNumber) VALUES (1,'A1234CD','Alice Johnson','123 Main St, Springfield, IL','555-123-4567'),(2,'BCDEFGH','Bob Smith','456 Elm St, Chicago, IL','555-987-6543');\nINSERT INTO \"PoliceReports\" (ReportID,DateReported,OfficerID,AccidentID,OffenseType,Penalty) VALUES (1,'2021-08-01',1,1,'Speeding','Warning'),(2,'2021-08-02',2,2,'Running Red Light','$100 Fine');\nINSERT INTO \"Roads\" (RoadID,StreetName,City,State,ZipCode) VALUES (1,'Bridge St','Springfield','IL',62704),(2,'Parkway Dr','Chicago','IL',60616);\nINSERT INTO \"VehicleTypes\" (TypeID,Make,Model,Year) VALUES (1,'Toyota','Corolla',2018),(2,'Honda','Civic',2019);\n",
      "question": "Who has the biggest budget?",
      "gold_queries": [
        "SELECT Civil_Engineer FROM CivilEngineers ORDER BY Budget DESC LIMIT 1;",
        "SELECT Engineering_Firm FROM CivilEngineers ORDER BY Budget DESC LIMIT 1;",
        "SELECT Civil_Engineer, Engineering_Firm FROM CivilEngineers ORDER BY Budget DESC LIMIT 1;"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "The Civil Engineer with the highest budget project.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Civil_Engineer FROM CivilEngineers WHERE Budget = (SELECT MAX(Budget) FROM CivilEngineers)"
          ]
        },
        {
          "interpretation": "The Engineering Firm that has the project with the biggest budget.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Engineering_Firm FROM CivilEngineers ORDER BY Budget DESC LIMIT 1"
          ]
        },
        {
          "interpretation": "The project of a civil engineer that has the biggest allocated funds.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ProjectID, Intersection, Civil_Engineer, Engineering_Firm, StartDate, EndDate, Budget\nFROM CivilEngineers\nORDER BY Budget DESC\nLIMIT 1"
          ]
        },
        {
          "interpretation": "The intersection associated with the project having the biggest budget.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Intersection FROM CivilEngineers ORDER BY Budget DESC LIMIT 1"
          ]
        },
        {
          "interpretation": "What project is allocated the most funds by a civil engineer.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ProjectID, Civil_Engineer, MAX(Budget) FROM CivilEngineers GROUP BY Civil_Engineer ORDER BY MAX(Budget) DESC LIMIT 1"
          ]
        },
        {
          "interpretation": "The highest budget overall belongs to CivilEngineers.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Engineering_Firm, Budget FROM CivilEngineers ORDER BY Budget DESC LIMIT 1"
          ]
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 0.6666666666666666,
        "precision": 0.3333333333333333,
        "one_found": true,
        "f1_score": 0.4444444444444444,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Journalism/vague_2tabs_platform/vague_2tabs_platform.sqlite",
      "db_dump": "CREATE TABLE Article (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    content TEXT,\n    publishedDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    newsAgencyId INTEGER,\n    FOREIGN KEY(newsAgencyId) REFERENCES News_Agency(id)\n);\nCREATE TABLE Author (\n    id INTEGER PRIMARY KEY,\n    fullname TEXT);\nCREATE TABLE AuthorArticle (\n    authorId INTEGER,\n    articleId INTEGER,\n    FOREIGN KEY(authorId) REFERENCES Author(id),\n    FOREIGN KEY(articleId) REFERENCES Article(id)\n);\nCREATE TABLE Mobile_App (\n    id INTEGER PRIMARY KEY,\n    name TEXT);\nCREATE TABLE News_Agency (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    websiteId INTEGER,\n    mobileAppId INTEGER,\n    FOREIGN KEY(websiteId) REFERENCES Website(id),\n    FOREIGN KEY(mobileAppId) REFERENCES Mobile_App(id)\n);\nCREATE TABLE Website (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    url TEXT UNIQUE\n);\n\nINSERT INTO \"Article\" (id,title,content,publishedDate,newsAgencyId) VALUES (1,'Test Article 1','This is a test article.','2024-02-19 14:31:13',1),(2,'Test Article 2','Another test article.','2024-02-19 14:31:13',2),(3,'Test Article 3','Yet another test article.','2024-02-19 14:31:13',3),(4,'Test Article 4','And here is one more test article.','2024-02-19 14:31:13',4),(5,'Test Article 5','Last but not least, a test article!','2024-02-19 14:31:13',5);\nINSERT INTO \"Author\" (id,fullname) VALUES (1,'John Doe'),(2,'Jane Smith'),(3,'Michael Johnson'),(4,'Emily Williams'),(5,'David Brown');\nINSERT INTO \"AuthorArticle\" (authorId,articleId) VALUES (1,1),(2,2),(3,3),(4,4),(5,5);\nINSERT INTO \"Mobile_App\" (id,name) VALUES (1,'CNN App'),(2,'BBC App'),(3,'Guardian App'),(4,'Al Jazeera App'),(5,'NYT App');\nINSERT INTO \"News_Agency\" (id,name,websiteId,mobileAppId) VALUES (1,'CNN',1,1),(2,'BBC',2,2),(3,'The Guardian',3,3),(4,'Al Jazeera',4,4),(5,'New York Times',5,5);\nINSERT INTO \"Website\" (id,name,url) VALUES (1,'CNN','https://www.cnn.com'),(2,'BBC','https://www.bbc.co.uk'),(3,'The Guardian','https://www.theguardian.com'),(4,'Al Jazeera','https://www.aljazeera.com'),(5,'New York Times','https://www.nytimes.com');\n",
      "question": "Show all articles, mobile apps that they were published on and author names.",
      "gold_queries": [
        "SELECT\r\nArticle.title,\r\nMobile_App.name,\r\nAuthor.fullname\r\nFROM Article\r\nJOIN News_Agency ON News_Agency.id = Article.newsAgencyId\r\nJOIN AuthorArticle ON AuthorArticle.authorID = Article.id\r\nJOIN Author ON Author.id = AuthorArticle.authorID\r\nJOIN Mobile_App ON News_Agency.MobileAppID = Mobile_App.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Display all articles with their corresponding mobile apps and associated authors, shown with their full names.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Article.title, Mobile_App.name, Author.fullname\nFROM Article\nJOIN News_Agency ON Article.newsAgencyId = News_Agency.id\nJOIN Mobile_App ON News_Agency.mobileAppId = Mobile_App.id\nJOIN AuthorArticle ON Article.id = AuthorArticle.articleId\nJOIN Author ON AuthorArticle.authorId = Author.id"
          ]
        },
        {
          "interpretation": "Show all articles that were published through mobile apps, including their names and the authors' full names.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Website.name, Article.title, Author.fullname\nFROM Article\nJOIN News_Agency ON Article.newsAgencyId = News_Agency.id\nJOIN Website ON News_Agency.websiteId = Website.id\nJOIN Mobile_App ON News_Agency.mobileAppId = Mobile_App.id\nJOIN AuthorArticle ON Article.id = AuthorArticle.articleId\nJOIN Author ON AuthorArticle.authorId = Author.id"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "one_found": true,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2tabs_platform/vague_2tabs_platform.sqlite",
      "db_dump": "CREATE TABLE Article (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    content TEXT,\n    publishedDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    newsAgencyId INTEGER,\n    FOREIGN KEY(newsAgencyId) REFERENCES News_Agency(id)\n);\nCREATE TABLE Author (\n    id INTEGER PRIMARY KEY,\n    fullname TEXT);\nCREATE TABLE AuthorArticle (\n    authorId INTEGER,\n    articleId INTEGER,\n    FOREIGN KEY(authorId) REFERENCES Author(id),\n    FOREIGN KEY(articleId) REFERENCES Article(id)\n);\nCREATE TABLE Mobile_App (\n    id INTEGER PRIMARY KEY,\n    name TEXT);\nCREATE TABLE News_Agency (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    websiteId INTEGER,\n    mobileAppId INTEGER,\n    FOREIGN KEY(websiteId) REFERENCES Website(id),\n    FOREIGN KEY(mobileAppId) REFERENCES Mobile_App(id)\n);\nCREATE TABLE Website (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    url TEXT UNIQUE\n);\n\nINSERT INTO \"Article\" (id,title,content,publishedDate,newsAgencyId) VALUES (1,'Test Article 1','This is a test article.','2024-02-19 14:31:13',1),(2,'Test Article 2','Another test article.','2024-02-19 14:31:13',2),(3,'Test Article 3','Yet another test article.','2024-02-19 14:31:13',3),(4,'Test Article 4','And here is one more test article.','2024-02-19 14:31:13',4),(5,'Test Article 5','Last but not least, a test article!','2024-02-19 14:31:13',5);\nINSERT INTO \"Author\" (id,fullname) VALUES (1,'John Doe'),(2,'Jane Smith'),(3,'Michael Johnson'),(4,'Emily Williams'),(5,'David Brown');\nINSERT INTO \"AuthorArticle\" (authorId,articleId) VALUES (1,1),(2,2),(3,3),(4,4),(5,5);\nINSERT INTO \"Mobile_App\" (id,name) VALUES (1,'CNN App'),(2,'BBC App'),(3,'Guardian App'),(4,'Al Jazeera App'),(5,'NYT App');\nINSERT INTO \"News_Agency\" (id,name,websiteId,mobileAppId) VALUES (1,'CNN',1,1),(2,'BBC',2,2),(3,'The Guardian',3,3),(4,'Al Jazeera',4,4),(5,'New York Times',5,5);\nINSERT INTO \"Website\" (id,name,url) VALUES (1,'CNN','https://www.cnn.com'),(2,'BBC','https://www.bbc.co.uk'),(3,'The Guardian','https://www.theguardian.com'),(4,'Al Jazeera','https://www.aljazeera.com'),(5,'New York Times','https://www.nytimes.com');\n",
      "question": "List all the mobile apps with their published articles and dates.",
      "gold_queries": [
        "SELECT \r\nMobile_App.name,\r\nArticle.title,\r\nArticle.publishedDate\r\nFROM Mobile_App\r\nJOIN News_Agency ON News_Agency.id = Mobile_App.id\r\nJOIN Article ON Article.newsAgencyID = News_Agency.MobileAppID"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List all mobile apps with their associated news agency names,",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.name, T1.name FROM Mobile_App AS T1 JOIN News_Agency AS T2 ON T1.id = T2.mobileAppId"
          ]
        },
        {
          "interpretation": "a list of tuples where each inner tuple contains an article title and its published date.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title, publishedDate FROM Article"
          ]
        },
        {
          "interpretation": "List all mobile apps, with each app having a list of its associated articles and dates.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT MA.name, A.title, A.publishedDate\nFROM Mobile_App MA\nJOIN News_Agency NA ON MA.id = NA.mobileAppId\nJOIN Article A ON NA.id = A.newsAgencyId\nORDER BY MA.name, A.publishedDate"
          ]
        },
        {
          "interpretation": "Retrieve a list of tuples containing each mobile app name,",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name FROM Mobile_App"
          ]
        },
        {
          "interpretation": "tuples containing an article title, author, and published date.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Article.title, Author.fullname, Article.publishedDate\nFROM Article\nJOIN AuthorArticle ON Article.id = AuthorArticle.articleId\nJOIN Author ON AuthorArticle.authorId = Author.id"
          ]
        },
        {
          "interpretation": "Return a list of tuples containing each mobile app name, news agency name, and the list of",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    Ma.name AS mobile_app_name, \n    Na.name AS news_agency_name, \n    A.title AS article_title\nFROM \n    Mobile_App Ma\nJOIN \n    News_Agency Na ON Ma.id = Na.mobileAppId\nJOIN \n    Article A ON Na.id = A.newsAgencyId"
          ]
        },
        {
          "interpretation": "List all mobile apps with a count of the articles each app publishes and their respective details.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ma.name AS mobileAppName, COUNT(a.id) AS articleCount, ma.*\nFROM Mobile_App ma\nJOIN News_Agency na ON ma.id = na.mobileAppId\nJOIN Article a ON na.id = a.newsAgencyId\nGROUP BY ma.id"
          ]
        },
        {
          "interpretation": "Get a list of mobile apps, each one having a specified number of articles published,",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Mobile_App.name, COUNT(Article.id) AS numberOfArticles\nFROM Mobile_App\nJOIN News_Agency ON Mobile_App.id = News_Agency.mobileAppId\nJOIN Article ON News_Agency.id = Article.newsAgencyId\nGROUP BY Mobile_App.name"
          ]
        },
        {
          "interpretation": "Fetch all mobile apps, along with their respective news agencies and the details of articles they publish.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ma.name AS mobileAppName, na.name AS newsAgencyName, a.title AS articleTitle, a.content AS articleContent, a.publishedDate\nFROM Mobile_App ma\nJOIN News_Agency na ON ma.id = na.mobileAppId\nJOIN Article a ON na.id = a.newsAgencyId"
          ]
        },
        {
          "interpretation": "Get a group of mobile apps, their associated news agencies, and the list of their articles along with their published dates.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Mobile_App.name AS MobileApp, News_Agency.name AS NewsAgency, Article.title AS ArticleTitle, Article.publishedDate AS PublishedDate\nFROM Mobile_App\nJOIN News_Agency ON Mobile_App.id = News_Agency.mobileAppId\nJOIN Article ON News_Agency.id = Article.newsAgencyId"
          ]
        },
        {
          "interpretation": "Retrieve a list of mobile apps along with the list of their published articles and details.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Mobile_App.name AS MobileAppName, Article.title AS ArticleTitle, Article.content AS ArticleContent, Article.publishedDate AS PublishedDate\nFROM Mobile_App\nJOIN News_Agency ON Mobile_App.id = News_Agency.mobileAppId\nJOIN Article ON News_Agency.id = Article.newsAgencyId"
          ]
        }
      ],
      "num_unique_execution_results": 11,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.09090909090909091,
        "one_found": true,
        "f1_score": 0.16666666666666669,
        "num_queries": 11,
        "num_unique_queries": 11,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2tabs_platform/vague_2tabs_platform.sqlite",
      "db_dump": "CREATE TABLE Article (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    content TEXT,\n    publishedDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    newsAgencyId INTEGER,\n    FOREIGN KEY(newsAgencyId) REFERENCES News_Agency(id)\n);\nCREATE TABLE Author (\n    id INTEGER PRIMARY KEY,\n    fullname TEXT);\nCREATE TABLE AuthorArticle (\n    authorId INTEGER,\n    articleId INTEGER,\n    FOREIGN KEY(authorId) REFERENCES Author(id),\n    FOREIGN KEY(articleId) REFERENCES Article(id)\n);\nCREATE TABLE Mobile_App (\n    id INTEGER PRIMARY KEY,\n    name TEXT);\nCREATE TABLE News_Agency (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    websiteId INTEGER,\n    mobileAppId INTEGER,\n    FOREIGN KEY(websiteId) REFERENCES Website(id),\n    FOREIGN KEY(mobileAppId) REFERENCES Mobile_App(id)\n);\nCREATE TABLE Website (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    url TEXT UNIQUE\n);\n\nINSERT INTO \"Article\" (id,title,content,publishedDate,newsAgencyId) VALUES (1,'Test Article 1','This is a test article.','2024-02-19 14:31:13',1),(2,'Test Article 2','Another test article.','2024-02-19 14:31:13',2),(3,'Test Article 3','Yet another test article.','2024-02-19 14:31:13',3),(4,'Test Article 4','And here is one more test article.','2024-02-19 14:31:13',4),(5,'Test Article 5','Last but not least, a test article!','2024-02-19 14:31:13',5);\nINSERT INTO \"Author\" (id,fullname) VALUES (1,'John Doe'),(2,'Jane Smith'),(3,'Michael Johnson'),(4,'Emily Williams'),(5,'David Brown');\nINSERT INTO \"AuthorArticle\" (authorId,articleId) VALUES (1,1),(2,2),(3,3),(4,4),(5,5);\nINSERT INTO \"Mobile_App\" (id,name) VALUES (1,'CNN App'),(2,'BBC App'),(3,'Guardian App'),(4,'Al Jazeera App'),(5,'NYT App');\nINSERT INTO \"News_Agency\" (id,name,websiteId,mobileAppId) VALUES (1,'CNN',1,1),(2,'BBC',2,2),(3,'The Guardian',3,3),(4,'Al Jazeera',4,4),(5,'New York Times',5,5);\nINSERT INTO \"Website\" (id,name,url) VALUES (1,'CNN','https://www.cnn.com'),(2,'BBC','https://www.bbc.co.uk'),(3,'The Guardian','https://www.theguardian.com'),(4,'Al Jazeera','https://www.aljazeera.com'),(5,'New York Times','https://www.nytimes.com');\n",
      "question": "List all the websites, their mobile apps and their published articles and dates.",
      "gold_queries": [
        "SELECT \r\nWebsite.name,\r\nWebsite.url, Mobile_App.name,\r\nArticle.title,\r\nArticle.publishedDate\r\nFROM Website\r\nJOIN News_Agency ON News_Agency.id = Website.id\r\nJOIN Article ON Article.newsAgencyID = News_Agency.websiteID JOIN Mobile_App ON News_Agency.MobileAppID = Mobile_App.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Get all the websites and their mobile apps along with the articles - title and date published, via each website's associated news agencies.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT W.name AS Website, MA.name AS MobileApp, A.title AS ArticleTitle, A.publishedDate AS PublishedDate\nFROM Website W\nJOIN News_Agency NA ON W.id = NA.websiteId\nJOIN Mobile_App MA ON NA.mobileAppId = MA.id\nJOIN Article A ON NA.id = A.newsAgencyId"
          ]
        },
        {
          "interpretation": "List the websites, alongside each website's mobile app and the news articles published by the news agencies that utilize this website.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT W.name AS Website, MA.name AS Mobile_App, A.title AS Article_Title\nFROM Website W\nJOIN News_Agency NA ON W.id = NA.websiteId\nJOIN Mobile_App MA ON NA.mobileAppId = MA.id\nJOIN Article A ON NA.id = A.newsAgencyId"
          ]
        },
        {
          "interpretation": "Get a list of websites, their associated news agencies and the mobile apps associated with these agencies, along with the articles and publication dates.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT w.name AS website, na.name AS news_agency, ma.name AS mobile_app, a.title AS article, a.publishedDate\nFROM Website w\nJOIN News_Agency na ON w.id = na.websiteId\nJOIN Mobile_App ma ON na.mobileAppId = ma.id\nJOIN Article a ON na.id = a.newsAgencyId"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Journalism/vague_2tabs_platform/vague_2tabs_platform.sqlite",
      "db_dump": "CREATE TABLE Article (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    content TEXT,\n    publishedDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    newsAgencyId INTEGER,\n    FOREIGN KEY(newsAgencyId) REFERENCES News_Agency(id)\n);\nCREATE TABLE Author (\n    id INTEGER PRIMARY KEY,\n    fullname TEXT);\nCREATE TABLE AuthorArticle (\n    authorId INTEGER,\n    articleId INTEGER,\n    FOREIGN KEY(authorId) REFERENCES Author(id),\n    FOREIGN KEY(articleId) REFERENCES Article(id)\n);\nCREATE TABLE Mobile_App (\n    id INTEGER PRIMARY KEY,\n    name TEXT);\nCREATE TABLE News_Agency (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    websiteId INTEGER,\n    mobileAppId INTEGER,\n    FOREIGN KEY(websiteId) REFERENCES Website(id),\n    FOREIGN KEY(mobileAppId) REFERENCES Mobile_App(id)\n);\nCREATE TABLE Website (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    url TEXT UNIQUE\n);\n\nINSERT INTO \"Article\" (id,title,content,publishedDate,newsAgencyId) VALUES (1,'Test Article 1','This is a test article.','2024-02-19 14:31:13',1),(2,'Test Article 2','Another test article.','2024-02-19 14:31:13',2),(3,'Test Article 3','Yet another test article.','2024-02-19 14:31:13',3),(4,'Test Article 4','And here is one more test article.','2024-02-19 14:31:13',4),(5,'Test Article 5','Last but not least, a test article!','2024-02-19 14:31:13',5);\nINSERT INTO \"Author\" (id,fullname) VALUES (1,'John Doe'),(2,'Jane Smith'),(3,'Michael Johnson'),(4,'Emily Williams'),(5,'David Brown');\nINSERT INTO \"AuthorArticle\" (authorId,articleId) VALUES (1,1),(2,2),(3,3),(4,4),(5,5);\nINSERT INTO \"Mobile_App\" (id,name) VALUES (1,'CNN App'),(2,'BBC App'),(3,'Guardian App'),(4,'Al Jazeera App'),(5,'NYT App');\nINSERT INTO \"News_Agency\" (id,name,websiteId,mobileAppId) VALUES (1,'CNN',1,1),(2,'BBC',2,2),(3,'The Guardian',3,3),(4,'Al Jazeera',4,4),(5,'New York Times',5,5);\nINSERT INTO \"Website\" (id,name,url) VALUES (1,'CNN','https://www.cnn.com'),(2,'BBC','https://www.bbc.co.uk'),(3,'The Guardian','https://www.theguardian.com'),(4,'Al Jazeera','https://www.aljazeera.com'),(5,'New York Times','https://www.nytimes.com');\n",
      "question": "List all platforms and articles published there along with the published date.",
      "gold_queries": [
        "SELECT \r\nWebsite.name,\r\nWebsite.url,\r\nArticle.title,\r\nArticle.publishedDate\r\nFROM Website\r\nJOIN News_Agency ON News_Agency.id = Website.id\r\nJOIN Article ON Article.newsAgencyID = News_Agency.websiteID",
        "SELECT \r\nMobile_App.name,\r\nArticle.title,\r\nArticle.publishedDate\r\nFROM Mobile_App\r\nJOIN News_Agency ON News_Agency.id = Mobile_App.id\r\nJOIN Article ON Article.newsAgencyID = News_Agency.MobileAppID",
        "SELECT \r\nWebsite.name,\r\nWebsite.url, Mobile_App.name,\r\nArticle.title,\r\nArticle.publishedDate\r\nFROM Website\r\nJOIN News_Agency ON News_Agency.id = Website.id\r\nJOIN Article ON Article.newsAgencyID = News_Agency.websiteID JOIN Mobile_App ON News_Agency.MobileAppID = Mobile_App.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Extract article information and associate it with platforms like News Agencies, Mobile Apps, and Websites, and include the published date for each article.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    Article.title, \n    Article.content, \n    Article.publishedDate, \n    News_Agency.name AS newsAgencyName, \n    Mobile_App.name AS mobileAppName, \n    Website.name AS websiteName, \n    Website.url AS websiteURL\nFROM \n    Article\nJOIN \n    News_Agency ON Article.newsAgencyId = News_Agency.id\nJOIN \n    Mobile_App ON News_Agency.mobileAppId = Mobile_App.id\nJOIN \n    Website ON News_Agency.websiteId = Website.id"
          ]
        },
        {
          "interpretation": "List all platform types (News Agencies, Mobile Apps, Websites) along with their respective articles and published dates.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT na.name AS NewsAgency, ma.name AS MobileApp, w.name AS Website, a.title AS Article, a.publishedDate\nFROM Article a\nJOIN News_Agency na ON a.newsAgencyId = na.id\nJOIN Mobile_App ma ON na.mobileAppId = ma.id\nJOIN Website w ON na.websiteId = w.id"
          ]
        },
        {
          "interpretation": "List all platforms where multiple articles were published along with the published dates of those articles.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT na.name, a.publishedDate\nFROM Article a\nJOIN News_Agency na ON a.newsAgencyId = na.id\nGROUP BY a.newsAgencyId, a.publishedDate\nHAVING COUNT(a.id) > 1"
          ]
        },
        {
          "interpretation": "List all unique platforms (News Agencies or Mobile Apps or Websites) along with their associated articles and published dates.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT na.name AS platform, a.title, a.publishedDate \nFROM Article a \nJOIN News_Agency na ON a.newsAgencyId = na.id\nUNION\nSELECT DISTINCT ma.name AS platform, a.title, a.publishedDate \nFROM Article a \nJOIN News_Agency na ON a.newsAgencyId = na.id\nJOIN Mobile_App ma ON na.mobileAppId = ma.id\nUNION\nSELECT DISTINCT w.name AS platform, a.title, a.publishedDate \nFROM Article a \nJOIN News_Agency na ON a.newsAgencyId = na.id\nJOIN Website w ON na.websiteId = w.id"
          ]
        },
        {
          "interpretation": "Extract article information along with their associated platform(s) and the date the article was published.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Article.title, Article.content, Article.publishedDate, Website.name AS websiteName, Mobile_App.name AS mobileAppName\nFROM Article\nJOIN News_Agency ON Article.newsAgencyId = News_Agency.id\nJOIN Website ON News_Agency.websiteId = Website.id\nJOIN Mobile_App ON News_Agency.mobileAppId = Mobile_App.id"
          ]
        },
        {
          "interpretation": "List articles and their associated platforms, including both the News Agency and its associated Website, the Mobile App, or the Website.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.title, NA.name AS newsAgency, W.name AS website, MA.name AS mobileApp\nFROM Article A\nJOIN News_Agency NA ON A.newsAgencyId = NA.id\nJOIN Website W ON NA.websiteId = W.id\nJOIN Mobile_App MA ON NA.mobileAppId = MA.id"
          ]
        },
        {
          "interpretation": "List platforms and articles published there if they also have an associated mobile app.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT News_Agency.name AS platform, Article.title AS article\nFROM Article\nJOIN News_Agency ON Article.newsAgencyId = News_Agency.id\nJOIN Mobile_App ON News_Agency.mobileAppId = Mobile_App.id"
          ]
        },
        {
          "interpretation": "List all distinct platforms (regardless of type) along with all articles and published dates they have.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 0.5,
            "f1_score": 0.4,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT ma.name AS platform, a.title AS article, a.publishedDate \nFROM Mobile_App ma\nJOIN News_Agency na ON ma.id = na.mobileAppId\nJOIN Article a ON na.id = a.newsAgencyId",
            "SELECT DISTINCT w.name AS platform, a.title AS article, a.publishedDate \nFROM Website w\nJOIN News_Agency na ON w.id = na.websiteId\nJOIN Article a ON na.id = a.newsAgencyId"
          ]
        },
        {
          "interpretation": "For each unique platform, list any associated articles, their published dates, and further relevant information.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    na.name AS NewsAgency,\n    w.name AS Website,\n    ma.name AS MobileApp,\n    a.title AS ArticleTitle,\n    a.content AS ArticleContent,\n    a.publishedDate AS PublishedDate\nFROM \n    Article a\nJOIN \n    News_Agency na ON a.newsAgencyId = na.id\nJOIN \n    Website w ON na.websiteId = w.id\nJOIN \n    Mobile_App ma ON na.mobileAppId = ma.id"
          ]
        },
        {
          "interpretation": "For every platform, regardless of type, list each article that was published along with its published date.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 0.5,
            "f1_score": 0.4,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Website.name AS Platform, Article.title, Article.publishedDate\nFROM Article\nJOIN News_Agency ON Article.newsAgencyId = News_Agency.id\nJOIN Website ON News_Agency.websiteId = Website.id",
            "SELECT Mobile_App.name AS Platform, Article.title, Article.publishedDate\nFROM Article\nJOIN News_Agency ON Article.newsAgencyId = News_Agency.id\nJOIN Mobile_App ON News_Agency.mobileAppId = Mobile_App.id"
          ]
        },
        {
          "interpretation": "List articles and their platforms along with necessary information to identify and categorize the platforms.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    a.title, \n    na.name AS newsAgencyName, \n    w.name AS websiteName, \n    w.url, \n    ma.name AS mobileAppName\nFROM \n    Article a\nJOIN \n    News_Agency na ON a.newsAgencyId = na.id\nJOIN \n    Website w ON na.websiteId = w.id\nJOIN \n    Mobile_App ma ON na.mobileAppId = ma.id"
          ]
        }
      ],
      "num_unique_execution_results": 11,
      "interpretation_level_metrics": {
        "recall": 0.3333333333333333,
        "precision": 0.15384615384615385,
        "one_found": true,
        "f1_score": 0.21052631578947367,
        "num_queries": 13,
        "num_unique_queries": 13,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Journalism/vague_2tabs_platform/vague_2tabs_platform.sqlite",
      "db_dump": "CREATE TABLE Article (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    content TEXT,\n    publishedDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    newsAgencyId INTEGER,\n    FOREIGN KEY(newsAgencyId) REFERENCES News_Agency(id)\n);\nCREATE TABLE Author (\n    id INTEGER PRIMARY KEY,\n    fullname TEXT);\nCREATE TABLE AuthorArticle (\n    authorId INTEGER,\n    articleId INTEGER,\n    FOREIGN KEY(authorId) REFERENCES Author(id),\n    FOREIGN KEY(articleId) REFERENCES Article(id)\n);\nCREATE TABLE Mobile_App (\n    id INTEGER PRIMARY KEY,\n    name TEXT);\nCREATE TABLE News_Agency (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    websiteId INTEGER,\n    mobileAppId INTEGER,\n    FOREIGN KEY(websiteId) REFERENCES Website(id),\n    FOREIGN KEY(mobileAppId) REFERENCES Mobile_App(id)\n);\nCREATE TABLE Website (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    url TEXT UNIQUE\n);\n\nINSERT INTO \"Article\" (id,title,content,publishedDate,newsAgencyId) VALUES (1,'Test Article 1','This is a test article.','2024-02-19 14:31:13',1),(2,'Test Article 2','Another test article.','2024-02-19 14:31:13',2),(3,'Test Article 3','Yet another test article.','2024-02-19 14:31:13',3),(4,'Test Article 4','And here is one more test article.','2024-02-19 14:31:13',4),(5,'Test Article 5','Last but not least, a test article!','2024-02-19 14:31:13',5);\nINSERT INTO \"Author\" (id,fullname) VALUES (1,'John Doe'),(2,'Jane Smith'),(3,'Michael Johnson'),(4,'Emily Williams'),(5,'David Brown');\nINSERT INTO \"AuthorArticle\" (authorId,articleId) VALUES (1,1),(2,2),(3,3),(4,4),(5,5);\nINSERT INTO \"Mobile_App\" (id,name) VALUES (1,'CNN App'),(2,'BBC App'),(3,'Guardian App'),(4,'Al Jazeera App'),(5,'NYT App');\nINSERT INTO \"News_Agency\" (id,name,websiteId,mobileAppId) VALUES (1,'CNN',1,1),(2,'BBC',2,2),(3,'The Guardian',3,3),(4,'Al Jazeera',4,4),(5,'New York Times',5,5);\nINSERT INTO \"Website\" (id,name,url) VALUES (1,'CNN','https://www.cnn.com'),(2,'BBC','https://www.bbc.co.uk'),(3,'The Guardian','https://www.theguardian.com'),(4,'Al Jazeera','https://www.aljazeera.com'),(5,'New York Times','https://www.nytimes.com');\n",
      "question": "Show all articles, websites and mobile apps on which they were published, along with the author names.",
      "gold_queries": [
        "SELECT\r\nArticle.title,\r\nWebsite.name, Website.url, Mobile_App.name,\r\nAuthor.fullname\r\nFROM Article\r\nJOIN News_Agency ON News_Agency.id = Article.newsAgencyId\r\nJOIN AuthorArticle ON AuthorArticle.authorID = Article.id\r\nJOIN Author ON Author.id = AuthorArticle.authorID\r\nJOIN Website ON News_Agency.websiteID = Website.id JOIN Mobile_App ON News_Agency.MobileAppID = Mobile_App.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Show all articles, displaying their title, content, news agency name, website name, mobile app name, published date, and associated author full name.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.title, T1.content, T5.name AS news_agency_name, T6.name AS website_name, T7.name AS mobile_app_name, T1.publishedDate, T3.fullname\nFROM Article AS T1\nJOIN AuthorArticle AS T2 ON T1.id = T2.articleId\nJOIN Author AS T3 ON T2.authorId = T3.id\nJOIN News_Agency AS T5 ON T1.newsAgencyId = T5.id\nJOIN Website AS T6 ON T5.websiteId = T6.id\nJOIN Mobile_App AS T7 ON T5.mobileAppId = T7.id"
          ]
        },
        {
          "interpretation": "Retrieve all articles, along with their metadata, such as title, content, and publication time, and information about news agencies, websites, mobile apps, and authors involved, including their full names.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    Article.title, \n    Article.content, \n    Article.publishedDate, \n    News_Agency.name AS newsAgencyName, \n    Website.name AS websiteName, \n    Website.url AS websiteUrl, \n    Mobile_App.name AS mobileAppName, \n    Author.fullname AS authorName\nFROM \n    Article\nJOIN \n    News_Agency ON Article.newsAgencyId = News_Agency.id\nJOIN \n    Website ON News_Agency.websiteId = Website.id\nJOIN \n    Mobile_App ON News_Agency.mobileAppId = Mobile_App.id\nJOIN \n    AuthorArticle ON Article.id = AuthorArticle.articleId\nJOIN \n    Author ON AuthorArticle.authorId = Author.id"
          ]
        },
        {
          "interpretation": "Select all articles and join them with authors, news agencies, websites, and mobile apps based on their respective IDs, then display the article details including content, title, and associated entities names.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    a.content, \n    a.title, \n    na.name AS newsAgencyName, \n    w.name AS websiteName, \n    ma.name AS mobileAppName, \n    auth.fullname AS authorName\nFROM \n    Article a\nJOIN \n    AuthorArticle aa ON a.id = aa.articleId\nJOIN \n    Author auth ON aa.authorId = auth.id\nJOIN \n    News_Agency na ON a.newsAgencyId = na.id\nJOIN \n    Website w ON na.websiteId = w.id\nJOIN \n    Mobile_App ma ON na.mobileAppId = ma.id"
          ]
        },
        {
          "interpretation": "Show a list of articles with their details, such as article title, content, news agency name, website name, mobile app name, and the name of associated authors, with the news agency ID, website ID, mobile app ID, and author ID also included.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    a.title, \n    a.content, \n    na.name AS news_agency_name, \n    w.name AS website_name, \n    ma.name AS mobile_app_name, \n    au.fullname AS author_name, \n    a.newsAgencyId, \n    na.websiteId, \n    na.mobileAppId, \n    aa.authorId\nFROM \n    Article a\nJOIN \n    News_Agency na ON a.newsAgencyId = na.id\nJOIN \n    Website w ON na.websiteId = w.id\nJOIN \n    Mobile_App ma ON na.mobileAppId = ma.id\nJOIN \n    AuthorArticle aa ON a.id = aa.articleId\nJOIN \n    Author au ON aa.authorId = au.id"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Journalism/vague_2tabs_platform/vague_2tabs_platform.sqlite",
      "db_dump": "CREATE TABLE Article (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    content TEXT,\n    publishedDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    newsAgencyId INTEGER,\n    FOREIGN KEY(newsAgencyId) REFERENCES News_Agency(id)\n);\nCREATE TABLE Author (\n    id INTEGER PRIMARY KEY,\n    fullname TEXT);\nCREATE TABLE AuthorArticle (\n    authorId INTEGER,\n    articleId INTEGER,\n    FOREIGN KEY(authorId) REFERENCES Author(id),\n    FOREIGN KEY(articleId) REFERENCES Article(id)\n);\nCREATE TABLE Mobile_App (\n    id INTEGER PRIMARY KEY,\n    name TEXT);\nCREATE TABLE News_Agency (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    websiteId INTEGER,\n    mobileAppId INTEGER,\n    FOREIGN KEY(websiteId) REFERENCES Website(id),\n    FOREIGN KEY(mobileAppId) REFERENCES Mobile_App(id)\n);\nCREATE TABLE Website (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    url TEXT UNIQUE\n);\n\nINSERT INTO \"Article\" (id,title,content,publishedDate,newsAgencyId) VALUES (1,'Test Article 1','This is a test article.','2024-02-19 14:31:13',1),(2,'Test Article 2','Another test article.','2024-02-19 14:31:13',2),(3,'Test Article 3','Yet another test article.','2024-02-19 14:31:13',3),(4,'Test Article 4','And here is one more test article.','2024-02-19 14:31:13',4),(5,'Test Article 5','Last but not least, a test article!','2024-02-19 14:31:13',5);\nINSERT INTO \"Author\" (id,fullname) VALUES (1,'John Doe'),(2,'Jane Smith'),(3,'Michael Johnson'),(4,'Emily Williams'),(5,'David Brown');\nINSERT INTO \"AuthorArticle\" (authorId,articleId) VALUES (1,1),(2,2),(3,3),(4,4),(5,5);\nINSERT INTO \"Mobile_App\" (id,name) VALUES (1,'CNN App'),(2,'BBC App'),(3,'Guardian App'),(4,'Al Jazeera App'),(5,'NYT App');\nINSERT INTO \"News_Agency\" (id,name,websiteId,mobileAppId) VALUES (1,'CNN',1,1),(2,'BBC',2,2),(3,'The Guardian',3,3),(4,'Al Jazeera',4,4),(5,'New York Times',5,5);\nINSERT INTO \"Website\" (id,name,url) VALUES (1,'CNN','https://www.cnn.com'),(2,'BBC','https://www.bbc.co.uk'),(3,'The Guardian','https://www.theguardian.com'),(4,'Al Jazeera','https://www.aljazeera.com'),(5,'New York Times','https://www.nytimes.com');\n",
      "question": "Show all articles, websites that they were published on and author names.",
      "gold_queries": [
        "SELECT\r\nArticle.title,\r\nWebsite.name,Website.url,\r\nAuthor.fullname\r\nFROM Article\r\nJOIN News_Agency ON News_Agency.id = Article.newsAgencyId\r\nJOIN AuthorArticle ON AuthorArticle.authorID = Article.id\r\nJOIN Author ON Author.id = AuthorArticle.authorID\r\nJOIN Website ON News_Agency.websiteID = Website.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Provide a list of articles that have been published on specific websites, including the titles of the articles and the full names of the authors who authored the articles in question.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.title, Ath.fullname\nFROM Article A\nJOIN News_Agency NA ON A.newsAgencyId = NA.id\nJOIN Website W ON NA.websiteId = W.id\nJOIN AuthorArticle AA ON A.id = AA.articleId\nJOIN Author Ath ON AA.authorId = Ath.id"
          ]
        },
        {
          "interpretation": "Retrieve all articles from the database, including their titles, and the websites on which they were published (identified by the website URLs or names), as well as the full names of the authors who wrote them.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT a.title, w.url, au.fullname\nFROM Article a\nJOIN News_Agency na ON a.newsAgencyId = na.id\nJOIN Website w ON na.websiteId = w.id\nJOIN AuthorArticle aa ON a.id = aa.articleId\nJOIN Author au ON aa.authorId = au.id"
          ]
        },
        {
          "interpretation": "Show all articles in the database that can be found on different websites, along with their article titles and the names or IDs of their authors, who can in turn be associated with their respective news agencies.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT a.title, na.name, aa.authorId\nFROM Article a\nJOIN News_Agency na ON a.newsAgencyId = na.id\nJOIN AuthorArticle aa ON a.id = aa.articleId"
          ]
        },
        {
          "interpretation": "Show all articles with their corresponding titles, published on websites with their respective names, and the names of the authors who wrote them.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.title, W.name AS websiteName, Au.fullname AS authorName\nFROM Article A\nJOIN News_Agency NA ON A.newsAgencyId = NA.id\nJOIN Website W ON NA.websiteId = W.id\nJOIN AuthorArticle AA ON A.id = AA.articleId\nJOIN Author Au ON AA.authorId = Au.id"
          ]
        },
        {
          "interpretation": "Show articles with their respective titles, along with the names or IDs of websites where they are accessible, the names or URLs of those websites, and the full names of the authors of those articles.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    Article.title, \n    Website.id AS website_id, \n    Website.name AS website_name, \n    Website.url AS website_url, \n    Author.fullname \nFROM \n    Article \nJOIN \n    News_Agency ON Article.newsAgencyId = News_Agency.id \nJOIN \n    Website ON News_Agency.websiteId = Website.id \nJOIN \n    AuthorArticle ON Article.id = AuthorArticle.articleId \nJOIN \n    Author ON AuthorArticle.authorId = Author.id"
          ]
        },
        {
          "interpretation": "List articles in a database with information about articles written by specific authors, their article titles, and the names of the corresponding websites where articles can be found.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT a.title, w.name \nFROM Article a \nJOIN News_Agency na ON a.newsAgencyId = na.id \nJOIN Website w ON na.websiteId = w.id \nJOIN AuthorArticle aa ON a.id = aa.articleId \nJOIN Author au ON aa.authorId = au.id"
          ]
        },
        {
          "interpretation": "Show all articles in the database, including the titles of the articles, the names or URLs of the websites on which they were published, and the author names.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT \n    A.title, \n    W.name AS website_name, \n    W.url AS website_url, \n    Au.fullname AS author_name\nFROM \n    Article A\nJOIN \n    News_Agency NA ON A.newsAgencyId = NA.id\nJOIN \n    Website W ON NA.websiteId = W.id\nJOIN \n    AuthorArticle AA ON A.id = AA.articleId\nJOIN \n    Author Au ON AA.authorId = Au.id"
          ]
        }
      ],
      "num_unique_execution_results": 7,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.14285714285714285,
        "one_found": true,
        "f1_score": 0.25,
        "num_queries": 7,
        "num_unique_queries": 7,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2tabs_platform/vague_2tabs_platform.sqlite",
      "db_dump": "CREATE TABLE Article (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    content TEXT,\n    publishedDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    newsAgencyId INTEGER,\n    FOREIGN KEY(newsAgencyId) REFERENCES News_Agency(id)\n);\nCREATE TABLE Author (\n    id INTEGER PRIMARY KEY,\n    fullname TEXT);\nCREATE TABLE AuthorArticle (\n    authorId INTEGER,\n    articleId INTEGER,\n    FOREIGN KEY(authorId) REFERENCES Author(id),\n    FOREIGN KEY(articleId) REFERENCES Article(id)\n);\nCREATE TABLE Mobile_App (\n    id INTEGER PRIMARY KEY,\n    name TEXT);\nCREATE TABLE News_Agency (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    websiteId INTEGER,\n    mobileAppId INTEGER,\n    FOREIGN KEY(websiteId) REFERENCES Website(id),\n    FOREIGN KEY(mobileAppId) REFERENCES Mobile_App(id)\n);\nCREATE TABLE Website (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    url TEXT UNIQUE\n);\n\nINSERT INTO \"Article\" (id,title,content,publishedDate,newsAgencyId) VALUES (1,'Test Article 1','This is a test article.','2024-02-19 14:31:13',1),(2,'Test Article 2','Another test article.','2024-02-19 14:31:13',2),(3,'Test Article 3','Yet another test article.','2024-02-19 14:31:13',3),(4,'Test Article 4','And here is one more test article.','2024-02-19 14:31:13',4),(5,'Test Article 5','Last but not least, a test article!','2024-02-19 14:31:13',5);\nINSERT INTO \"Author\" (id,fullname) VALUES (1,'John Doe'),(2,'Jane Smith'),(3,'Michael Johnson'),(4,'Emily Williams'),(5,'David Brown');\nINSERT INTO \"AuthorArticle\" (authorId,articleId) VALUES (1,1),(2,2),(3,3),(4,4),(5,5);\nINSERT INTO \"Mobile_App\" (id,name) VALUES (1,'CNN App'),(2,'BBC App'),(3,'Guardian App'),(4,'Al Jazeera App'),(5,'NYT App');\nINSERT INTO \"News_Agency\" (id,name,websiteId,mobileAppId) VALUES (1,'CNN',1,1),(2,'BBC',2,2),(3,'The Guardian',3,3),(4,'Al Jazeera',4,4),(5,'New York Times',5,5);\nINSERT INTO \"Website\" (id,name,url) VALUES (1,'CNN','https://www.cnn.com'),(2,'BBC','https://www.bbc.co.uk'),(3,'The Guardian','https://www.theguardian.com'),(4,'Al Jazeera','https://www.aljazeera.com'),(5,'New York Times','https://www.nytimes.com');\n",
      "question": "Show all articles, platforms that they were published on and author name.",
      "gold_queries": [
        "SELECT\r\nArticle.title,\r\nWebsite.name,Website.url,\r\nAuthor.fullname\r\nFROM Article\r\nJOIN News_Agency ON News_Agency.id = Article.newsAgencyId\r\nJOIN AuthorArticle ON AuthorArticle.authorID = Article.id\r\nJOIN Author ON Author.id = AuthorArticle.authorID\r\nJOIN Website ON News_Agency.websiteID = Website.id",
        "SELECT\r\nArticle.title,\r\nMobile_App.name,\r\nAuthor.fullname\r\nFROM Article\r\nJOIN News_Agency ON News_Agency.id = Article.newsAgencyId\r\nJOIN AuthorArticle ON AuthorArticle.authorID = Article.id\r\nJOIN Author ON Author.id = AuthorArticle.authorID\r\nJOIN Mobile_App ON News_Agency.MobileAppID = Mobile_App.id",
        "SELECT\r\nArticle.title,\r\nWebsite.name, Website.url, Mobile_App.name,\r\nAuthor.fullname\r\nFROM Article\r\nJOIN News_Agency ON News_Agency.id = Article.newsAgencyId\r\nJOIN AuthorArticle ON AuthorArticle.authorID = Article.id\r\nJOIN Author ON Author.id = AuthorArticle.authorID\r\nJOIN Website ON News_Agency.websiteID = Website.id JOIN Mobile_App ON News_Agency.MobileAppID = Mobile_App.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List all articles, along with the mobile apps and websites of news agencies where they were published, and the fullnames of the authors.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Article.title, Mobile_App.name AS mobileApp, Website.name AS website, Author.fullname\nFROM Article\nJOIN News_Agency ON Article.newsAgencyId = News_Agency.id\nJOIN Mobile_App ON News_Agency.mobileAppId = Mobile_App.id\nJOIN Website ON News_Agency.websiteId = Website.id\nJOIN AuthorArticle ON Article.id = AuthorArticle.articleId\nJOIN Author ON AuthorArticle.authorId = Author.id"
          ]
        },
        {
          "interpretation": "Display the articles, the mobile apps of news agencies that published them, and the names of the authors who authored them.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.title, MA.name AS mobileAppName, Author.fullname\nFROM Article A\nJOIN News_Agency NA ON A.newsAgencyId = NA.id\nJOIN Mobile_App MA ON NA.mobileAppId = MA.id\nJOIN AuthorArticle AA ON A.id = AA.articleId\nJOIN Author ON AA.authorId = Author.id"
          ]
        },
        {
          "interpretation": "Retrieve all articles, list the corresponding news agencies and websites, and show the authors' fullnames.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    A.title, \n    NA.name AS newsAgency, \n    W.name AS website, \n    Au.fullname AS author \nFROM \n    Article A \nJOIN \n    News_Agency NA ON A.newsAgencyId = NA.id \nJOIN \n    Website W ON NA.websiteId = W.id \nJOIN \n    AuthorArticle AA ON A.id = AA.articleId \nJOIN \n    Author Au ON AA.authorId = Au.id"
          ]
        },
        {
          "interpretation": "List all articles, platforms used by news agencies to publish them, and details of the authors who wrote them.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Article.title, News_Agency.name, Website.name, Mobile_App.name, Author.fullname\nFROM Article\nJOIN News_Agency ON Article.newsAgencyId = News_Agency.id\nJOIN Website ON News_Agency.websiteId = Website.id\nJOIN Mobile_App ON News_Agency.mobileAppId = Mobile_App.id\nJOIN AuthorArticle ON Article.id = AuthorArticle.articleId\nJOIN Author ON AuthorArticle.authorId = Author.id"
          ]
        },
        {
          "interpretation": "Display all articles, news agencies (both websites and mobile apps), and the authors id and fullname.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Article.title, Article.content, News_Agency.name AS newsAgencyName, Website.name AS websiteName, Mobile_App.name AS mobileAppName, Author.id AS authorId, Author.fullname\nFROM Article\nJOIN News_Agency ON Article.newsAgencyId = News_Agency.id\nJOIN Website ON News_Agency.websiteId = Website.id\nJOIN Mobile_App ON News_Agency.mobileAppId = Mobile_App.id\nJOIN AuthorArticle ON Article.id = AuthorArticle.articleId\nJOIN Author ON AuthorArticle.authorId = Author.id"
          ]
        },
        {
          "interpretation": "Display all articles along with the news agencies that published them and the names of the authors.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Article.title, News_Agency.name AS newsAgencyName, Author.fullname AS authorName\nFROM Article\nJOIN News_Agency ON Article.newsAgencyId = News_Agency.id\nJOIN AuthorArticle ON Article.id = AuthorArticle.articleId\nJOIN Author ON AuthorArticle.authorId = Author.id"
          ]
        },
        {
          "interpretation": "Show all articles, the platforms they were published on, and the author name.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Article.title, Article.publishedDate, News_Agency.name AS newsAgency, Mobile_App.name AS mobileApp, Author.fullname\nFROM Article\nJOIN News_Agency ON Article.newsAgencyId = News_Agency.id\nJOIN Mobile_App ON News_Agency.mobileAppId = Mobile_App.id\nJOIN AuthorArticle ON Article.id = AuthorArticle.articleId\nJOIN Author ON AuthorArticle.authorId = Author.id"
          ]
        },
        {
          "interpretation": "Retrieve all articles and show the news agency's id, name, website, mobile app, and the author's id and name.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    a.id AS articleId,\n    a.title,\n    a.content,\n    a.publishedDate,\n    na.id AS newsAgencyId,\n    na.name AS newsAgencyName,\n    w.name AS website,\n    ma.name AS mobileApp,\n    au.id AS authorId,\n    au.fullname AS authorName\nFROM \n    Article a\nJOIN \n    News_Agency na ON a.newsAgencyId = na.id\nJOIN \n    Website w ON na.websiteId = w.id\nJOIN \n    Mobile_App ma ON na.mobileAppId = ma.id\nJOIN \n    AuthorArticle aa ON a.id = aa.articleId\nJOIN \n    Author au ON aa.authorId = au.id"
          ]
        }
      ],
      "num_unique_execution_results": 8,
      "interpretation_level_metrics": {
        "recall": 0.3333333333333333,
        "precision": 0.125,
        "one_found": true,
        "f1_score": 0.18181818181818182,
        "num_queries": 8,
        "num_unique_queries": 8,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2tabs_platform/vague_2tabs_platform.sqlite",
      "db_dump": "CREATE TABLE Article (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    content TEXT,\n    publishedDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    newsAgencyId INTEGER,\n    FOREIGN KEY(newsAgencyId) REFERENCES News_Agency(id)\n);\nCREATE TABLE Author (\n    id INTEGER PRIMARY KEY,\n    fullname TEXT);\nCREATE TABLE AuthorArticle (\n    authorId INTEGER,\n    articleId INTEGER,\n    FOREIGN KEY(authorId) REFERENCES Author(id),\n    FOREIGN KEY(articleId) REFERENCES Article(id)\n);\nCREATE TABLE Mobile_App (\n    id INTEGER PRIMARY KEY,\n    name TEXT);\nCREATE TABLE News_Agency (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    websiteId INTEGER,\n    mobileAppId INTEGER,\n    FOREIGN KEY(websiteId) REFERENCES Website(id),\n    FOREIGN KEY(mobileAppId) REFERENCES Mobile_App(id)\n);\nCREATE TABLE Website (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    url TEXT UNIQUE\n);\n\nINSERT INTO \"Article\" (id,title,content,publishedDate,newsAgencyId) VALUES (1,'Test Article 1','This is a test article.','2024-02-19 14:31:13',1),(2,'Test Article 2','Another test article.','2024-02-19 14:31:13',2),(3,'Test Article 3','Yet another test article.','2024-02-19 14:31:13',3),(4,'Test Article 4','And here is one more test article.','2024-02-19 14:31:13',4),(5,'Test Article 5','Last but not least, a test article!','2024-02-19 14:31:13',5);\nINSERT INTO \"Author\" (id,fullname) VALUES (1,'John Doe'),(2,'Jane Smith'),(3,'Michael Johnson'),(4,'Emily Williams'),(5,'David Brown');\nINSERT INTO \"AuthorArticle\" (authorId,articleId) VALUES (1,1),(2,2),(3,3),(4,4),(5,5);\nINSERT INTO \"Mobile_App\" (id,name) VALUES (1,'CNN App'),(2,'BBC App'),(3,'Guardian App'),(4,'Al Jazeera App'),(5,'NYT App');\nINSERT INTO \"News_Agency\" (id,name,websiteId,mobileAppId) VALUES (1,'CNN',1,1),(2,'BBC',2,2),(3,'The Guardian',3,3),(4,'Al Jazeera',4,4),(5,'New York Times',5,5);\nINSERT INTO \"Website\" (id,name,url) VALUES (1,'CNN','https://www.cnn.com'),(2,'BBC','https://www.bbc.co.uk'),(3,'The Guardian','https://www.theguardian.com'),(4,'Al Jazeera','https://www.aljazeera.com'),(5,'New York Times','https://www.nytimes.com');\n",
      "question": "List all the websites with their published articles and dates.",
      "gold_queries": [
        "SELECT \r\nWebsite.name,\r\nWebsite.url,\r\nArticle.title,\r\nArticle.publishedDate\r\nFROM Website\r\nJOIN News_Agency ON News_Agency.id = Website.id\r\nJOIN Article ON Article.newsAgencyID = News_Agency.websiteID"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Include only the websites that have a direct reference in the News_Agency table and list articles from the last published year.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Website.name, Article.title, Article.publishedDate\nFROM News_Agency\nJOIN Website ON News_Agency.websiteId = Website.id\nJOIN Article ON News_Agency.id = Article.newsAgencyId\nWHERE Article.publishedDate >= DATE('now', '-1 year')"
          ]
        },
        {
          "interpretation": "Display all news agencies in the database along with their corresponding website and list the articles this website has published, including their publication dates.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT News_Agency.name, Website.name, Article.title, Article.publishedDate\nFROM News_Agency\nJOIN Website ON News_Agency.websiteId = Website.id\nJOIN Article ON News_Agency.id = Article.newsAgencyId\nORDER BY News_Agency.name, Article.publishedDate"
          ]
        },
        {
          "interpretation": "Include only the news agencies that have articles mentioned in the database and list articles from all years, despite the publication dates.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT NA.name\nFROM News_Agency NA\nJOIN Article A ON NA.id = A.newsAgencyId"
          ]
        },
        {
          "interpretation": "Join the Website and News_Agency tables and list the websites with the articles they published, along with the publication dates.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT w.name AS website, a.publishedDate\nFROM Website w\nJOIN News_Agency na ON w.id = na.websiteId\nJOIN Article a ON na.id = a.newsAgencyId"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Journalism/vague_2tabs_editor/vague_2tabs_editor.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    content TEXT,\n    author_id INTEGER REFERENCES Authors(author_id),\n    reporter_id INTEGER REFERENCES Reporters(reporter_id),\n    final_draft_id INTEGER REFERENCES Final_Draft(id));\nCREATE TABLE Authors(\n    author_id INTEGER PRIMARY KEY,\n    fullname TEXT);\nCREATE TABLE Copy_Editor(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE);\nCREATE TABLE Final_Draft(\n    id INTEGER PRIMARY KEY,\n    managing_editor_id INTEGER REFERENCES Managing_Editor(id),\n    copy_editor_id INTEGER REFERENCES Copy_Editor(id));\nCREATE TABLE Managing_Editor(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE);\nCREATE TABLE Reporters(\n    reporter_id INTEGER PRIMARY KEY,\n    fullname TEXT);\n\nINSERT INTO \"Articles\" (id,title,content,author_id,reporter_id,final_draft_id) VALUES (1,'Breaking News Story','This is a news story about breaking news.',1,1,1),(2,'Feature on Local Business','A feature article about a local business.',2,2,2);\nINSERT INTO \"Authors\" (author_id,fullname) VALUES (1,'Alice Brown'),(2,'Charlie Green');\nINSERT INTO \"Copy_Editor\" (id,name,email) VALUES (1,'Mike Johnson','mike@example.com'),(2,'Emily Davis','emily@example.com');\nINSERT INTO \"Final_Draft\" (id,managing_editor_id,copy_editor_id) VALUES (1,1,1),(2,2,2);\nINSERT INTO \"Managing_Editor\" (id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com');\nINSERT INTO \"Reporters\" (reporter_id,fullname) VALUES (1,'David Black'),(2,'Eva White');\n",
      "question": "List all the article contents with their respective managing editor and reporter names",
      "gold_queries": [
        "SELECT\r\nArticles.content,\r\nManaging_Editor.name,\r\nReporters.fullname\r\nFROM Articles\r\nJOIN Final_Draft ON Final_Draft.id = Articles.final_draft_id\r\nJOIN Managing_Editor ON Managing_Editor.id = Final_Draft.managing_editor_id\r\nJOIN Reporters ON Reporters.reporter_id = Articles.reporter_id"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List all the article contents and include the managing editor names and reporter names in the output.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT T1.content, T4.name, T3.fullname \nFROM Articles AS T1 \nJOIN Final_Draft AS T2 ON T1.final_draft_id = T2.id \nJOIN Managing_Editor AS T4 ON T2.managing_editor_id = T4.id \nJOIN Reporters AS T3 ON T1.reporter_id = T3.reporter_id"
          ]
        },
        {
          "interpretation": "List the contents of articles with matching managing editor and reporter names in the database.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT a.content\nFROM Articles a\nJOIN Final_Draft fd ON a.final_draft_id = fd.id\nJOIN Managing_Editor me ON fd.managing_editor_id = me.id\nJOIN Reporters r ON a.reporter_id = r.reporter_id\nWHERE me.name = r.fullname"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "one_found": true,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2tabs_editor/vague_2tabs_editor.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    content TEXT,\n    author_id INTEGER REFERENCES Authors(author_id),\n    reporter_id INTEGER REFERENCES Reporters(reporter_id),\n    final_draft_id INTEGER REFERENCES Final_Draft(id));\nCREATE TABLE Authors(\n    author_id INTEGER PRIMARY KEY,\n    fullname TEXT);\nCREATE TABLE Copy_Editor(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE);\nCREATE TABLE Final_Draft(\n    id INTEGER PRIMARY KEY,\n    managing_editor_id INTEGER REFERENCES Managing_Editor(id),\n    copy_editor_id INTEGER REFERENCES Copy_Editor(id));\nCREATE TABLE Managing_Editor(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE);\nCREATE TABLE Reporters(\n    reporter_id INTEGER PRIMARY KEY,\n    fullname TEXT);\n\nINSERT INTO \"Articles\" (id,title,content,author_id,reporter_id,final_draft_id) VALUES (1,'Breaking News Story','This is a news story about breaking news.',1,1,1),(2,'Feature on Local Business','A feature article about a local business.',2,2,2);\nINSERT INTO \"Authors\" (author_id,fullname) VALUES (1,'Alice Brown'),(2,'Charlie Green');\nINSERT INTO \"Copy_Editor\" (id,name,email) VALUES (1,'Mike Johnson','mike@example.com'),(2,'Emily Davis','emily@example.com');\nINSERT INTO \"Final_Draft\" (id,managing_editor_id,copy_editor_id) VALUES (1,1,1),(2,2,2);\nINSERT INTO \"Managing_Editor\" (id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com');\nINSERT INTO \"Reporters\" (reporter_id,fullname) VALUES (1,'David Black'),(2,'Eva White');\n",
      "question": "List all the articles with their respective editor and author names.",
      "gold_queries": [
        "SELECT\r\nArticles.title,\r\nManaging_Editor.name,\r\nAuthors.fullname\r\nFROM Articles\r\nJOIN Final_Draft ON Final_Draft.id = Articles.final_draft_id\r\nJOIN Managing_Editor ON Managing_Editor.id = Final_Draft.managing_editor_id\r\nJOIN Authors ON Authors.author_id = Articles.author_id",
        "SELECT\r\nArticles.title,\r\nCopy_Editor.name,\r\nAuthors.fullname\r\nFROM Articles\r\nJOIN Final_Draft ON Final_Draft.id = Articles.final_draft_id\r\nJOIN Copy_Editor ON Copy_Editor.id = Final_Draft.Copy_Editor_id\r\nJOIN Authors ON Authors.author_id = Articles.author_id",
        "SELECT\r\nArticles.title,\r\nManaging_Editor.name, Copy_Editor.name,\r\nAuthors.fullname\r\nFROM Articles\r\nJOIN Final_Draft ON Final_Draft.id = Articles.final_draft_id\r\nJOIN Managing_Editor ON Managing_Editor.id = Final_Draft.managing_editor_id\r\nJOIN Authors ON Authors.author_id = Articles.author_id JOIN Copy_Editor ON Copy_Editor.id = Final_Draft.Copy_Editor_id"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Retrieve a list of all articles with a combined column containing the author's, copy editor's, and managing editor's names.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.title, CONCAT(AU.fullname, ' ', CE.name, ' ', ME.name) AS related_names\nFROM Articles A\nJOIN Authors AU ON A.author_id = AU.author_id\nJOIN Final_Draft FD ON A.final_draft_id = FD.id\nJOIN Copy_Editor CE ON FD.copy_editor_id = CE.id\nJOIN Managing_Editor ME ON FD.managing_editor_id = ME.id"
          ]
        },
        {
          "interpretation": "Retrieve article titles, pair with author and reporter names from the Articles table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Articles.title, Authors.fullname AS author_name, Reporters.fullname AS reporter_name\nFROM Articles\nJOIN Authors ON Articles.author_id = Authors.author_id\nJOIN Reporters ON Articles.reporter_id = Reporters.reporter_id"
          ]
        },
        {
          "interpretation": "Retrieve article titles combined with their respective authors, copy editors, and managing editors who are active in the database.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.title, Au.fullname AS author, Ce.name AS copy_editor, Me.name AS managing_editor\nFROM Articles A\nJOIN Authors Au ON A.author_id = Au.author_id\nJOIN Final_Draft FD ON A.final_draft_id = FD.id\nJOIN Copy_Editor Ce ON FD.copy_editor_id = Ce.id\nJOIN Managing_Editor Me ON FD.managing_editor_id = Me.id"
          ]
        },
        {
          "interpretation": "Fetch articles with the assigned managing and copy editor names of their respective final drafts.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT a.title, me.name AS managing_editor_name, ce.name AS copy_editor_name\nFROM Articles a\nJOIN Final_Draft fd ON a.final_draft_id = fd.id\nJOIN Managing_Editor me ON fd.managing_editor_id = me.id\nJOIN Copy_Editor ce ON fd.copy_editor_id = ce.id"
          ]
        },
        {
          "interpretation": "List all articles where the copy editor and managing editor names are combined with the author's name.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT a.title, ce.name || ' ' || me.name AS editors, au.fullname AS author\nFROM Articles a\nJOIN Final_Draft fd ON a.final_draft_id = fd.id\nJOIN Copy_Editor ce ON fd.copy_editor_id = ce.id\nJOIN Managing_Editor me ON fd.managing_editor_id = me.id\nJOIN Authors au ON a.author_id = au.author_id"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.3333333333333333,
        "precision": 0.2,
        "one_found": true,
        "f1_score": 0.25,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2tabs_editor/vague_2tabs_editor.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    content TEXT,\n    author_id INTEGER REFERENCES Authors(author_id),\n    reporter_id INTEGER REFERENCES Reporters(reporter_id),\n    final_draft_id INTEGER REFERENCES Final_Draft(id));\nCREATE TABLE Authors(\n    author_id INTEGER PRIMARY KEY,\n    fullname TEXT);\nCREATE TABLE Copy_Editor(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE);\nCREATE TABLE Final_Draft(\n    id INTEGER PRIMARY KEY,\n    managing_editor_id INTEGER REFERENCES Managing_Editor(id),\n    copy_editor_id INTEGER REFERENCES Copy_Editor(id));\nCREATE TABLE Managing_Editor(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE);\nCREATE TABLE Reporters(\n    reporter_id INTEGER PRIMARY KEY,\n    fullname TEXT);\n\nINSERT INTO \"Articles\" (id,title,content,author_id,reporter_id,final_draft_id) VALUES (1,'Breaking News Story','This is a news story about breaking news.',1,1,1),(2,'Feature on Local Business','A feature article about a local business.',2,2,2);\nINSERT INTO \"Authors\" (author_id,fullname) VALUES (1,'Alice Brown'),(2,'Charlie Green');\nINSERT INTO \"Copy_Editor\" (id,name,email) VALUES (1,'Mike Johnson','mike@example.com'),(2,'Emily Davis','emily@example.com');\nINSERT INTO \"Final_Draft\" (id,managing_editor_id,copy_editor_id) VALUES (1,1,1),(2,2,2);\nINSERT INTO \"Managing_Editor\" (id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com');\nINSERT INTO \"Reporters\" (reporter_id,fullname) VALUES (1,'David Black'),(2,'Eva White');\n",
      "question": "List all the article contents with their respective copy editor and reporter names",
      "gold_queries": [
        "SELECT\r\nArticles.content,\r\nCopy_Editor.name,\r\nReporters.fullname\r\nFROM Articles\r\nJOIN Final_Draft ON Final_Draft.id = Articles.final_draft_id\r\nJOIN Copy_Editor ON Copy_Editor.id = Final_Draft.Copy_Editor_id\r\nJOIN Reporters ON Reporters.reporter_id = Articles.reporter_id"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List all article contents with reporter names and their associated copy editor names.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Articles.content, Reporters.fullname AS reporter_name, Copy_Editor.name AS copy_editor_name\nFROM Articles\nJOIN Reporters ON Articles.reporter_id = Reporters.reporter_id\nJOIN Final_Draft ON Articles.final_draft_id = Final_Draft.id\nJOIN Copy_Editor ON Final_Draft.copy_editor_id = Copy_Editor.id"
          ]
        },
        {
          "interpretation": "List the contents of articles that have their final drafts processed by a copy editor and report their names.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT a.content, ce.name \nFROM Articles a \nJOIN Final_Draft fd ON a.final_draft_id = fd.id \nJOIN Copy_Editor ce ON fd.copy_editor_id = ce.id"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "one_found": true,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2tabs_editor/vague_2tabs_editor.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    content TEXT,\n    author_id INTEGER REFERENCES Authors(author_id),\n    reporter_id INTEGER REFERENCES Reporters(reporter_id),\n    final_draft_id INTEGER REFERENCES Final_Draft(id));\nCREATE TABLE Authors(\n    author_id INTEGER PRIMARY KEY,\n    fullname TEXT);\nCREATE TABLE Copy_Editor(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE);\nCREATE TABLE Final_Draft(\n    id INTEGER PRIMARY KEY,\n    managing_editor_id INTEGER REFERENCES Managing_Editor(id),\n    copy_editor_id INTEGER REFERENCES Copy_Editor(id));\nCREATE TABLE Managing_Editor(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE);\nCREATE TABLE Reporters(\n    reporter_id INTEGER PRIMARY KEY,\n    fullname TEXT);\n\nINSERT INTO \"Articles\" (id,title,content,author_id,reporter_id,final_draft_id) VALUES (1,'Breaking News Story','This is a news story about breaking news.',1,1,1),(2,'Feature on Local Business','A feature article about a local business.',2,2,2);\nINSERT INTO \"Authors\" (author_id,fullname) VALUES (1,'Alice Brown'),(2,'Charlie Green');\nINSERT INTO \"Copy_Editor\" (id,name,email) VALUES (1,'Mike Johnson','mike@example.com'),(2,'Emily Davis','emily@example.com');\nINSERT INTO \"Final_Draft\" (id,managing_editor_id,copy_editor_id) VALUES (1,1,1),(2,2,2);\nINSERT INTO \"Managing_Editor\" (id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com');\nINSERT INTO \"Reporters\" (reporter_id,fullname) VALUES (1,'David Black'),(2,'Eva White');\n",
      "question": "Show me all available articles alongside their managing editors and their authors.",
      "gold_queries": [
        "SELECT\r\nArticles.title,\r\nManaging_Editor.name,\r\nAuthors.fullname\r\nFROM Articles\r\nJOIN Final_Draft ON Final_Draft.id = Articles.final_draft_id\r\nJOIN Managing_Editor ON Managing_Editor.id = Final_Draft.managing_editor_id\r\nJOIN Authors ON Authors.author_id = Articles.author_id"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Show me all articles from the 'Articles' table, joined with their corresponding managing editors from the 'Managing_Editor' table, and authors from the 'Authors' table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Articles.title, Articles.content, Managing_Editor.name AS managing_editor_name, Authors.fullname AS author_name\nFROM Articles\nJOIN Final_Draft ON Articles.final_draft_id = Final_Draft.id\nJOIN Managing_Editor ON Final_Draft.managing_editor_id = Managing_Editor.id\nJOIN Authors ON Articles.author_id = Authors.author_id"
          ]
        },
        {
          "interpretation": "Display articles from the 'Articles' table along with managing editors and their related authors or writers.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT A.title, ME.name, Au.fullname\nFROM Articles A\nJOIN Final_Draft FD ON A.final_draft_id = FD.id\nJOIN Managing_Editor ME ON FD.managing_editor_id = ME.id\nJOIN Authors Au ON A.author_id = Au.author_id"
          ]
        },
        {
          "interpretation": "List all the articles available, with information about the managing editors in charge and the authors or reporters associated with each.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Articles.title, Managing_Editor.name AS managing_editor, Authors.fullname AS author, Reporters.fullname AS reporter\nFROM Articles\nJOIN Final_Draft ON Articles.final_draft_id = Final_Draft.id\nJOIN Managing_Editor ON Final_Draft.managing_editor_id = Managing_Editor.id\nLEFT JOIN Authors ON Articles.author_id = Authors.author_id\nLEFT JOIN Reporters ON Articles.reporter_id = Reporters.reporter_id"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "one_found": true,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2tabs_editor/vague_2tabs_editor.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    content TEXT,\n    author_id INTEGER REFERENCES Authors(author_id),\n    reporter_id INTEGER REFERENCES Reporters(reporter_id),\n    final_draft_id INTEGER REFERENCES Final_Draft(id));\nCREATE TABLE Authors(\n    author_id INTEGER PRIMARY KEY,\n    fullname TEXT);\nCREATE TABLE Copy_Editor(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE);\nCREATE TABLE Final_Draft(\n    id INTEGER PRIMARY KEY,\n    managing_editor_id INTEGER REFERENCES Managing_Editor(id),\n    copy_editor_id INTEGER REFERENCES Copy_Editor(id));\nCREATE TABLE Managing_Editor(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE);\nCREATE TABLE Reporters(\n    reporter_id INTEGER PRIMARY KEY,\n    fullname TEXT);\n\nINSERT INTO \"Articles\" (id,title,content,author_id,reporter_id,final_draft_id) VALUES (1,'Breaking News Story','This is a news story about breaking news.',1,1,1),(2,'Feature on Local Business','A feature article about a local business.',2,2,2);\nINSERT INTO \"Authors\" (author_id,fullname) VALUES (1,'Alice Brown'),(2,'Charlie Green');\nINSERT INTO \"Copy_Editor\" (id,name,email) VALUES (1,'Mike Johnson','mike@example.com'),(2,'Emily Davis','emily@example.com');\nINSERT INTO \"Final_Draft\" (id,managing_editor_id,copy_editor_id) VALUES (1,1,1),(2,2,2);\nINSERT INTO \"Managing_Editor\" (id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com');\nINSERT INTO \"Reporters\" (reporter_id,fullname) VALUES (1,'David Black'),(2,'Eva White');\n",
      "question": "Show me all available articles alongside their managing and copy editors and their authors.",
      "gold_queries": [
        "SELECT\r\nArticles.title,\r\nManaging_Editor.name, Copy_Editor.name,\r\nAuthors.fullname\r\nFROM Articles\r\nJOIN Final_Draft ON Final_Draft.id = Articles.final_draft_id\r\nJOIN Managing_Editor ON Managing_Editor.id = Final_Draft.managing_editor_id\r\nJOIN Authors ON Authors.author_id = Articles.author_id JOIN Copy_Editor ON Copy_Editor.id = Final_Draft.Copy_Editor_id"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Show the articles from the Articles table in a single list with columns for managing and copy editor details and author details, displaying each record as a separate row.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    a.title,\n    me.name AS managing_editor_name,\n    me.email AS managing_editor_email,\n    ce.name AS copy_editor_name,\n    ce.email AS copy_editor_email,\n    au.fullname AS author_name\nFROM \n    Articles a\nJOIN \n    Final_Draft fd ON a.final_draft_id = fd.id\nJOIN \n    Managing_Editor me ON fd.managing_editor_id = me.id\nJOIN \n    Copy_Editor ce ON fd.copy_editor_id = ce.id\nJOIN \n    Authors au ON a.author_id = au.author_id"
          ]
        },
        {
          "interpretation": "Select articles from the Articles table and display the title of each article along with the details of one managing editor and one copy editor for each article.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.title, ME.name AS managing_editor_name, ME.email AS managing_editor_email, CE.name AS copy_editor_name, CE.email AS copy_editor_email\nFROM Articles A\nJOIN Final_Draft FD ON A.final_draft_id = FD.id\nJOIN Managing_Editor ME ON FD.managing_editor_id = ME.id\nJOIN Copy_Editor CE ON FD.copy_editor_id = CE.id"
          ]
        },
        {
          "interpretation": "Retrieve all the records from the Articles table and from the tables referenced by the Articles table (Managing_Editor, Copy_Editor, Authors) to display all possible, though possibly incorrect, article-author-editor combinations.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.id, A.title, A.content, Au.fullname AS author_name, R.fullname AS reporter_name, CE.name AS copy_editor_name, ME.name AS managing_editor_name\nFROM Articles A\nJOIN Final_Draft FD ON A.final_draft_id = FD.id\nJOIN Managing_Editor ME ON FD.managing_editor_id = ME.id\nJOIN Copy_Editor CE ON FD.copy_editor_id = CE.id\nJOIN Authors Au ON A.author_id = Au.author_id\nJOIN Reporters R ON A.reporter_id = R.reporter_id"
          ]
        },
        {
          "interpretation": "Select all records from the Articles table, including records from the Managing_Editor, Final_Draft, Copy_Editor, Authors, and Reporters tables based on the foreign keys.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.*, ME.*, FD.*, CE.*, Au.*, R.*\nFROM Articles A\nJOIN Final_Draft FD ON A.final_draft_id = FD.id\nJOIN Managing_Editor ME ON FD.managing_editor_id = ME.id\nJOIN Copy_Editor CE ON FD.copy_editor_id = CE.id\nJOIN Authors Au ON A.author_id = Au.author_id\nJOIN Reporters R ON A.reporter_id = R.reporter_id"
          ]
        },
        {
          "interpretation": "Retrieve the article titles from the Articles table and join the Managing_Editor, Copy_Editor, Authors, and Reporters tables on their respective foreign keys to get the managing and copy editors and authors.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Articles.title, Managing_Editor.name AS managing_editor_name, Copy_Editor.name AS copy_editor_name, Authors.fullname AS author_name, Reporters.fullname AS reporter_name\nFROM Articles\nJOIN Final_Draft ON Articles.final_draft_id = Final_Draft.id\nJOIN Managing_Editor ON Final_Draft.managing_editor_id = Managing_Editor.id\nJOIN Copy_Editor ON Final_Draft.copy_editor_id = Copy_Editor.id\nJOIN Authors ON Articles.author_id = Authors.author_id\nJOIN Reporters ON Articles.reporter_id = Reporters.reporter_id"
          ]
        },
        {
          "interpretation": "Perform a cross-join or a Cartesian product between related tables, selecting columns from each table to get all possible combinations.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    Articles.id AS ArticleID, \n    Articles.title AS ArticleTitle, \n    Authors.fullname AS AuthorName, \n    Reporters.fullname AS ReporterName, \n    Final_Draft.id AS FinalDraftID, \n    Managing_Editor.name AS ManagingEditorName, \n    Copy_Editor.name AS CopyEditorName\nFROM \n    Articles, \n    Authors, \n    Reporters, \n    Final_Draft, \n    Managing_Editor, \n    Copy_Editor"
          ]
        },
        {
          "interpretation": "Retrieve the managing editor name, copy editor name, and author names from their respective tables in one query, then join it with the Articles table to show the article titles.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT T4.name AS managing_editor_name, T5.name AS copy_editor_name, T2.fullname AS author_name, T1.title AS article_title\nFROM Articles AS T1\nJOIN Authors AS T2 ON T1.author_id = T2.author_id\nJOIN Final_Draft AS T3 ON T1.final_draft_id = T3.id\nJOIN Managing_Editor AS T4 ON T3.managing_editor_id = T4.id\nJOIN Copy_Editor AS T5 ON T3.copy_editor_id = T5.id"
          ]
        }
      ],
      "num_unique_execution_results": 7,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.14285714285714285,
        "one_found": true,
        "f1_score": 0.25,
        "num_queries": 7,
        "num_unique_queries": 7,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2tabs_editor/vague_2tabs_editor.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    content TEXT,\n    author_id INTEGER REFERENCES Authors(author_id),\n    reporter_id INTEGER REFERENCES Reporters(reporter_id),\n    final_draft_id INTEGER REFERENCES Final_Draft(id));\nCREATE TABLE Authors(\n    author_id INTEGER PRIMARY KEY,\n    fullname TEXT);\nCREATE TABLE Copy_Editor(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE);\nCREATE TABLE Final_Draft(\n    id INTEGER PRIMARY KEY,\n    managing_editor_id INTEGER REFERENCES Managing_Editor(id),\n    copy_editor_id INTEGER REFERENCES Copy_Editor(id));\nCREATE TABLE Managing_Editor(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE);\nCREATE TABLE Reporters(\n    reporter_id INTEGER PRIMARY KEY,\n    fullname TEXT);\n\nINSERT INTO \"Articles\" (id,title,content,author_id,reporter_id,final_draft_id) VALUES (1,'Breaking News Story','This is a news story about breaking news.',1,1,1),(2,'Feature on Local Business','A feature article about a local business.',2,2,2);\nINSERT INTO \"Authors\" (author_id,fullname) VALUES (1,'Alice Brown'),(2,'Charlie Green');\nINSERT INTO \"Copy_Editor\" (id,name,email) VALUES (1,'Mike Johnson','mike@example.com'),(2,'Emily Davis','emily@example.com');\nINSERT INTO \"Final_Draft\" (id,managing_editor_id,copy_editor_id) VALUES (1,1,1),(2,2,2);\nINSERT INTO \"Managing_Editor\" (id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com');\nINSERT INTO \"Reporters\" (reporter_id,fullname) VALUES (1,'David Black'),(2,'Eva White');\n",
      "question": "Show me all available articles alongside their copy editors and their authors.",
      "gold_queries": [
        "SELECT\r\nArticles.title,\r\nCopy_Editor.name,\r\nAuthors.fullname\r\nFROM Articles\r\nJOIN Final_Draft ON Final_Draft.id = Articles.final_draft_id\r\nJOIN Copy_Editor ON Copy_Editor.id = Final_Draft.Copy_Editor_id\r\nJOIN Authors ON Authors.author_id = Articles.author_id"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Show me all rows from the Articles table alongside their corresponding copy editors and authors.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT a.id, a.title, a.content, au.fullname AS author_name, ce.name AS copy_editor_name\nFROM Articles a\nJOIN Authors au ON a.author_id = au.author_id\nJOIN Final_Draft fd ON a.final_draft_id = fd.id\nJOIN Copy_Editor ce ON fd.copy_editor_id = ce.id"
          ]
        },
        {
          "interpretation": "Fetch articles with subsequent details related to both their assigned copy editors and their assigned authors.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Articles.title, Authors.fullname AS author_fullname, Copy_Editor.name AS copy_editor_name\nFROM Articles\nJOIN Authors ON Articles.author_id = Authors.author_id\nJOIN Final_Draft ON Articles.final_draft_id = Final_Draft.id\nJOIN Copy_Editor ON Final_Draft.copy_editor_id = Copy_Editor.id"
          ]
        },
        {
          "interpretation": "Show Articles alongside their authors and copy editors including all directly related tables in the database.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    Articles.title,\n    Articles.content,\n    Authors.fullname AS author_name,\n    Reporters.fullname AS reporter_name,\n    Managing_Editor.name AS managing_editor_name,\n    Copy_Editor.name AS copy_editor_name\nFROM \n    Articles\nJOIN \n    Authors ON Articles.author_id = Authors.author_id\nJOIN \n    Reporters ON Articles.reporter_id = Reporters.reporter_id\nJOIN \n    Final_Draft ON Articles.final_draft_id = Final_Draft.id\nJOIN \n    Managing_Editor ON Final_Draft.managing_editor_id = Managing_Editor.id\nJOIN \n    Copy_Editor ON Final_Draft.copy_editor_id = Copy_Editor.id"
          ]
        },
        {
          "interpretation": "Select the Articles table with its associated copy editor from the Copy_Editor table and author from the Authors table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Articles.title, Articles.content, Authors.fullname AS author, Copy_Editor.name AS copy_editor\nFROM Articles\nJOIN Final_Draft ON Articles.final_draft_id = Final_Draft.id\nJOIN Copy_Editor ON Final_Draft.copy_editor_id = Copy_Editor.id\nJOIN Authors ON Articles.author_id = Authors.author_id"
          ]
        },
        {
          "interpretation": "Retrieve the Articles table data and include all relevant information about the copy editors and their assigned articles and the authors and their assigned articles.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Articles.id, Articles.title, Articles.content, Authors.fullname AS author_name, Reporters.fullname AS reporter_name, Copy_Editor.name AS copy_editor_name\nFROM Articles\nJOIN Authors ON Articles.author_id = Authors.author_id\nJOIN Reporters ON Articles.reporter_id = Reporters.reporter_id\nJOIN Final_Draft ON Articles.final_draft_id = Final_Draft.id\nJOIN Copy_Editor ON Final_Draft.copy_editor_id = Copy_Editor.id"
          ]
        },
        {
          "interpretation": "Join the Articles table with the Final_Draft table to find the managing editor and copy editor on each article, then with the Authors table to fetch authors information.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.title, A.content, ME.name AS managing_editor, CE.name AS copy_editor, Auth.fullname AS author\nFROM Articles A\nJOIN Final_Draft FD ON A.final_draft_id = FD.id\nJOIN Managing_Editor ME ON FD.managing_editor_id = ME.id\nJOIN Copy_Editor CE ON FD.copy_editor_id = CE.id\nJOIN Authors Auth ON A.author_id = Auth.author_id"
          ]
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.16666666666666666,
        "one_found": true,
        "f1_score": 0.2857142857142857,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2tabs_editor/vague_2tabs_editor.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    content TEXT,\n    author_id INTEGER REFERENCES Authors(author_id),\n    reporter_id INTEGER REFERENCES Reporters(reporter_id),\n    final_draft_id INTEGER REFERENCES Final_Draft(id));\nCREATE TABLE Authors(\n    author_id INTEGER PRIMARY KEY,\n    fullname TEXT);\nCREATE TABLE Copy_Editor(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE);\nCREATE TABLE Final_Draft(\n    id INTEGER PRIMARY KEY,\n    managing_editor_id INTEGER REFERENCES Managing_Editor(id),\n    copy_editor_id INTEGER REFERENCES Copy_Editor(id));\nCREATE TABLE Managing_Editor(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE);\nCREATE TABLE Reporters(\n    reporter_id INTEGER PRIMARY KEY,\n    fullname TEXT);\n\nINSERT INTO \"Articles\" (id,title,content,author_id,reporter_id,final_draft_id) VALUES (1,'Breaking News Story','This is a news story about breaking news.',1,1,1),(2,'Feature on Local Business','A feature article about a local business.',2,2,2);\nINSERT INTO \"Authors\" (author_id,fullname) VALUES (1,'Alice Brown'),(2,'Charlie Green');\nINSERT INTO \"Copy_Editor\" (id,name,email) VALUES (1,'Mike Johnson','mike@example.com'),(2,'Emily Davis','emily@example.com');\nINSERT INTO \"Final_Draft\" (id,managing_editor_id,copy_editor_id) VALUES (1,1,1),(2,2,2);\nINSERT INTO \"Managing_Editor\" (id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com');\nINSERT INTO \"Reporters\" (reporter_id,fullname) VALUES (1,'David Black'),(2,'Eva White');\n",
      "question": "List all the article contents with their respective managing editor, copy editor and reporter names",
      "gold_queries": [
        "SELECT\r\nArticles.content,\r\nManaging_Editor.name, Copy_Editor.name,\r\nReporters.fullname\r\nFROM Articles\r\nJOIN Final_Draft ON Final_Draft.id = Articles.final_draft_id\r\nJOIN Managing_Editor ON Managing_Editor.id = Final_Draft.managing_editor_id\r\nJOIN Reporters ON Reporters.reporter_id = Articles.reporter_id JOIN Copy_Editor ON Copy_Editor.id = Final_Draft.Copy_Editor_id"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List all articles along with their contents, the managing editor of the final draft's own managing editor, the copy editor's name, and the reporter's full name.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT a.title, a.content, me.name AS managing_editor_name, ce.name AS copy_editor_name, r.fullname AS reporter_name\nFROM Articles a\nJOIN Final_Draft fd ON a.final_draft_id = fd.id\nJOIN Managing_Editor me ON fd.managing_editor_id = me.id\nJOIN Copy_Editor ce ON fd.copy_editor_id = ce.id\nJOIN Reporters r ON a.reporter_id = r.reporter_id"
          ]
        },
        {
          "interpretation": "Fetch a list containing the content of all articles, sorted by reporter's name and then by managing editor name, along with the copy editor's name and the reporter's full name.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT a.content, r.fullname AS reporter_name, me.name AS managing_editor_name, ce.name AS copy_editor_name\nFROM Articles a\nJOIN Reporters r ON a.reporter_id = r.reporter_id\nJOIN Final_Draft fd ON a.final_draft_id = fd.id\nJOIN Managing_Editor me ON fd.managing_editor_id = me.id\nJOIN Copy_Editor ce ON fd.copy_editor_id = ce.id\nORDER BY r.fullname, me.name"
          ]
        },
        {
          "interpretation": "Get a list with article contents and the corresponding information of the managing editor working with the final draft's managing editor, the copy editor, and the reporter.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.content, ME.name AS managing_editor_name, ME.email AS managing_editor_email, CE.name AS copy_editor_name, CE.email AS copy_editor_email, R.fullname AS reporter_name\nFROM Articles A\nJOIN Final_Draft FD ON A.final_draft_id = FD.id\nJOIN Managing_Editor ME ON FD.managing_editor_id = ME.id\nJOIN Copy_Editor CE ON FD.copy_editor_id = CE.id\nJOIN Reporters R ON A.reporter_id = R.reporter_id"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "one_found": true,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2tabs_editor/vague_2tabs_editor.sqlite",
      "db_dump": "CREATE TABLE Articles(\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    content TEXT,\n    author_id INTEGER REFERENCES Authors(author_id),\n    reporter_id INTEGER REFERENCES Reporters(reporter_id),\n    final_draft_id INTEGER REFERENCES Final_Draft(id));\nCREATE TABLE Authors(\n    author_id INTEGER PRIMARY KEY,\n    fullname TEXT);\nCREATE TABLE Copy_Editor(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE);\nCREATE TABLE Final_Draft(\n    id INTEGER PRIMARY KEY,\n    managing_editor_id INTEGER REFERENCES Managing_Editor(id),\n    copy_editor_id INTEGER REFERENCES Copy_Editor(id));\nCREATE TABLE Managing_Editor(\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE);\nCREATE TABLE Reporters(\n    reporter_id INTEGER PRIMARY KEY,\n    fullname TEXT);\n\nINSERT INTO \"Articles\" (id,title,content,author_id,reporter_id,final_draft_id) VALUES (1,'Breaking News Story','This is a news story about breaking news.',1,1,1),(2,'Feature on Local Business','A feature article about a local business.',2,2,2);\nINSERT INTO \"Authors\" (author_id,fullname) VALUES (1,'Alice Brown'),(2,'Charlie Green');\nINSERT INTO \"Copy_Editor\" (id,name,email) VALUES (1,'Mike Johnson','mike@example.com'),(2,'Emily Davis','emily@example.com');\nINSERT INTO \"Final_Draft\" (id,managing_editor_id,copy_editor_id) VALUES (1,1,1),(2,2,2);\nINSERT INTO \"Managing_Editor\" (id,name,email) VALUES (1,'John Doe','john@example.com'),(2,'Jane Smith','jane@example.com');\nINSERT INTO \"Reporters\" (reporter_id,fullname) VALUES (1,'David Black'),(2,'Eva White');\n",
      "question": "List all the article contents with their respective editor and reporter names.",
      "gold_queries": [
        "SELECT\r\nArticles.content,\r\nManaging_Editor.name,\r\nReporters.fullname\r\nFROM Articles\r\nJOIN Final_Draft ON Final_Draft.id = Articles.final_draft_id\r\nJOIN Managing_Editor ON Managing_Editor.id = Final_Draft.managing_editor_id\r\nJOIN Reporters ON Reporters.reporter_id = Articles.reporter_id",
        "SELECT\r\nArticles.content,\r\nCopy_Editor.name,\r\nReporters.fullname\r\nFROM Articles\r\nJOIN Final_Draft ON Final_Draft.id = Articles.final_draft_id\r\nJOIN Copy_Editor ON Copy_Editor.id = Final_Draft.Copy_Editor_id\r\nJOIN Reporters ON Reporters.reporter_id = Articles.reporter_id",
        "SELECT\r\nArticles.content,\r\nManaging_Editor.name, Copy_Editor.name,\r\nReporters.fullname\r\nFROM Articles\r\nJOIN Final_Draft ON Final_Draft.id = Articles.final_draft_id\r\nJOIN Managing_Editor ON Managing_Editor.id = Final_Draft.managing_editor_id\r\nJOIN Reporters ON Reporters.reporter_id = Articles.reporter_id JOIN Copy_Editor ON Copy_Editor.id = Final_Draft.Copy_Editor_id"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Retrieve all article contents and display them with the name of the authors who wrote each article.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT content, fullname FROM Articles JOIN Authors ON Articles.author_id = Authors.author_id"
          ]
        },
        {
          "interpretation": "Display all article contents with the name of the reporter, the managing editor, and the copy editor associated with each article.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Articles.content, Reporters.fullname AS reporter_name, Managing_Editor.name AS managing_editor_name, Copy_Editor.name AS copy_editor_name\nFROM Articles\nJOIN Reporters ON Articles.reporter_id = Reporters.reporter_id\nJOIN Final_Draft ON Articles.final_draft_id = Final_Draft.id\nJOIN Managing_Editor ON Final_Draft.managing_editor_id = Managing_Editor.id\nJOIN Copy_Editor ON Final_Draft.copy_editor_id = Copy_Editor.id"
          ]
        },
        {
          "interpretation": "Extract all article contents and join them with the name of the reporter who wrote each article.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT content, fullname \nFROM Articles \nJOIN Reporters ON Articles.reporter_id = Reporters.reporter_id"
          ]
        },
        {
          "interpretation": "Extract article contents and join them with the information of the copy editor, the reporter, and the managing editor involved in the final draft process of each article.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    a.content,\n    ce.name AS copy_editor_name,\n    ce.email AS copy_editor_email,\n    r.fullname AS reporter_name,\n    me.name AS managing_editor_name,\n    me.email AS managing_editor_email\nFROM \n    Articles a\nJOIN \n    Final_Draft fd ON a.final_draft_id = fd.id\nJOIN \n    Copy_Editor ce ON fd.copy_editor_id = ce.id\nJOIN \n    Reporters r ON a.reporter_id = r.reporter_id\nJOIN \n    Managing_Editor me ON fd.managing_editor_id = me.id"
          ]
        },
        {
          "interpretation": "Display article contents and pair them with the names of the author and the reporter who contributed to each article.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Articles.content, Authors.fullname as author_name, Reporters.fullname as reporter_name\nFROM Articles\nJOIN Authors ON Articles.author_id = Authors.author_id\nJOIN Reporters ON Articles.reporter_id = Reporters.reporter_id"
          ]
        },
        {
          "interpretation": "Return article contents and pair them with the name of the reporter and managing editor responsible for each article.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Articles.content, Reporters.fullname AS reporter_name, Managing_Editor.name AS managing_editor_name \nFROM Articles \nJOIN Reporters ON Articles.reporter_id = Reporters.reporter_id \nJOIN Final_Draft ON Articles.final_draft_id = Final_Draft.id \nJOIN Managing_Editor ON Final_Draft.managing_editor_id = Managing_Editor.id"
          ]
        },
        {
          "interpretation": "Retrieve all article contents, along with the name of the managing editor responsible for each final draft the article is associated with.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Articles.content, Managing_Editor.name \nFROM Articles \nJOIN Final_Draft ON Articles.final_draft_id = Final_Draft.id \nJOIN Managing_Editor ON Final_Draft.managing_editor_id = Managing_Editor.id"
          ]
        },
        {
          "interpretation": "List article contents and match them with the name of the copy editor who edited the final draft they belong to.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.content, T3.name\nFROM Articles AS T1\nJOIN Final_Draft AS T2 ON T1.final_draft_id = T2.id\nJOIN Copy_Editor AS T3 ON T2.copy_editor_id = T3.id"
          ]
        },
        {
          "interpretation": "Include article contents in the result and match them with the name of the managing editor and copy editor pairs responsible for the final draft and editing process of each article.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT a.content, me.name AS managing_editor_name, ce.name AS copy_editor_name\nFROM Articles a\nJOIN Final_Draft fd ON a.final_draft_id = fd.id\nJOIN Managing_Editor me ON fd.managing_editor_id = me.id\nJOIN Copy_Editor ce ON fd.copy_editor_id = ce.id"
          ]
        },
        {
          "interpretation": "Return article contents and include the names of the authors and the managing editors responsible for each article.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT a.content, b.fullname AS author_name, d.name AS managing_editor_name\nFROM Articles a\nJOIN Authors b ON a.author_id = b.author_id\nJOIN Final_Draft c ON a.final_draft_id = c.id\nJOIN Managing_Editor d ON c.managing_editor_id = d.id"
          ]
        },
        {
          "interpretation": "List all article contents along with the names of the author, managing editor, and copy editor involved in the final draft process and editing of each article.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    a.content,\n    aut.fullname AS author_name,\n    me.name AS managing_editor_name,\n    ce.name AS copy_editor_name\nFROM \n    Articles a\nJOIN \n    Authors aut ON a.author_id = aut.author_id\nJOIN \n    Final_Draft fd ON a.final_draft_id = fd.id\nJOIN \n    Managing_Editor me ON fd.managing_editor_id = me.id\nJOIN \n    Copy_Editor ce ON fd.copy_editor_id = ce.id"
          ]
        },
        {
          "interpretation": "Extract article contents and join them with a list of editors and reporters involved in the final draft process of each article.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.content, CE.name AS copy_editor, ME.name AS managing_editor, R.fullname AS reporter, AU.fullname AS author\nFROM Articles A\nJOIN Final_Draft FD ON A.final_draft_id = FD.id\nJOIN Copy_Editor CE ON FD.copy_editor_id = CE.id\nJOIN Managing_Editor ME ON FD.managing_editor_id = ME.id\nJOIN Reporters R ON A.reporter_id = R.reporter_id\nJOIN Authors AU ON A.author_id = AU.author_id"
          ]
        }
      ],
      "num_unique_execution_results": 12,
      "interpretation_level_metrics": {
        "recall": 0.6666666666666666,
        "precision": 0.16666666666666666,
        "one_found": true,
        "f1_score": 0.26666666666666666,
        "num_queries": 12,
        "num_unique_queries": 12,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_qualification/vague_2cols_qualification.sqlite",
      "db_dump": "CREATE TABLE articles(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    publishDate DATETIME,\n    authorId INTEGER,\n    publicationId INTEGER,\n    topicId INTEGER,\n    FOREIGN KEY (authorId) REFERENCES journalists(id),\n    FOREIGN KEY (publicationId) REFERENCES publications(id),\n    FOREIGN KEY (topicId) REFERENCES topics(id)\n);\nCREATE TABLE journalists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    Degree TEXT,\n    Certificate TEXT,\n    Investigative_Journalist BOOLEAN\n);\nCREATE TABLE publications(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    address TEXT\n);\nCREATE TABLE sources(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    contactInfo TEXT\n);\nCREATE TABLE topics(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    description TEXT\n);\n\nINSERT INTO \"articles\" (id,title,content,publishDate,authorId,publicationId,topicId) VALUES (1,'Breaking News: New Government Policy','The government has announced a new policy that will impact citizens.','2023-04-01T10:00:00Z',1,1,1),(2,'Economic Outlook for Q2','Experts discuss the economic outlook for the second quarter.','2023-04-02T10:00:00Z',2,2,3);\nINSERT INTO \"journalists\" (id,name,email,phoneNumber,Degree,Certificate,Investigative_Journalist) VALUES (1,'John Doe','john@example.com','123-456-7890','Bachelor of Arts in Journalism','Certified Professional Writer',1),(2,'Jane Smith','jane@example.com','098-765-4321','Master of Science in Communication','Advanced Reporting Specialist',0);\nINSERT INTO \"publications\" (id,name,address) VALUES (1,'Daily Times','123 Main St, Anytown, USA'),(2,'Weekly Post','456 Elm St, Anycity, USA');\nINSERT INTO \"sources\" (id,name,contactInfo) VALUES (1,'City Hall','Phone: +1 (555) 123-4567 | Email: cityhall@anycity.gov'),(2,'Local Police Department','Phone: +1 (555) 987-6543 | Email: police@anystate.us');\nINSERT INTO \"topics\" (id,description) VALUES (1,'Government and Politics'),(2,'Business and Economy');\n",
      "question": "For each author, list their name, certificate and article titles.",
      "gold_queries": [
        "Select name, Certificate, title From journalists Join articles on articles.authorId = journalists.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "For each author, list their full name, their professional certification, and a list of article titles they have contributed to.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT j.name, j.Certificate, GROUP_CONCAT(a.title) AS article_titles\nFROM journalists j\nJOIN articles a ON j.id = a.authorId\nGROUP BY j.id"
          ]
        },
        {
          "interpretation": "Retrieve each author's full name, their qualification, and the list of relevant article titles.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT j.name AS FullName, j.Degree AS Qualification, a.title AS ArticleTitle\nFROM journalists j\nJOIN articles a ON j.id = a.authorId"
          ]
        },
        {
          "interpretation": "List each journalist's name, their assigned certificate, and the titles of the articles written in their name that are also published in a 'Daily Times'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT j.name, j.Certificate, a.title\nFROM journalists j\nJOIN articles a ON j.id = a.authorId\nJOIN publications p ON a.publicationId = p.id\nWHERE p.name = 'Daily Times'"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "one_found": true,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_qualification/vague_2cols_qualification.sqlite",
      "db_dump": "CREATE TABLE articles(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    publishDate DATETIME,\n    authorId INTEGER,\n    publicationId INTEGER,\n    topicId INTEGER,\n    FOREIGN KEY (authorId) REFERENCES journalists(id),\n    FOREIGN KEY (publicationId) REFERENCES publications(id),\n    FOREIGN KEY (topicId) REFERENCES topics(id)\n);\nCREATE TABLE journalists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    Degree TEXT,\n    Certificate TEXT,\n    Investigative_Journalist BOOLEAN\n);\nCREATE TABLE publications(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    address TEXT\n);\nCREATE TABLE sources(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    contactInfo TEXT\n);\nCREATE TABLE topics(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    description TEXT\n);\n\nINSERT INTO \"articles\" (id,title,content,publishDate,authorId,publicationId,topicId) VALUES (1,'Breaking News: New Government Policy','The government has announced a new policy that will impact citizens.','2023-04-01T10:00:00Z',1,1,1),(2,'Economic Outlook for Q2','Experts discuss the economic outlook for the second quarter.','2023-04-02T10:00:00Z',2,2,3);\nINSERT INTO \"journalists\" (id,name,email,phoneNumber,Degree,Certificate,Investigative_Journalist) VALUES (1,'John Doe','john@example.com','123-456-7890','Bachelor of Arts in Journalism','Certified Professional Writer',1),(2,'Jane Smith','jane@example.com','098-765-4321','Master of Science in Communication','Advanced Reporting Specialist',0);\nINSERT INTO \"publications\" (id,name,address) VALUES (1,'Daily Times','123 Main St, Anytown, USA'),(2,'Weekly Post','456 Elm St, Anycity, USA');\nINSERT INTO \"sources\" (id,name,contactInfo) VALUES (1,'City Hall','Phone: +1 (555) 123-4567 | Email: cityhall@anycity.gov'),(2,'Local Police Department','Phone: +1 (555) 987-6543 | Email: police@anystate.us');\nINSERT INTO \"topics\" (id,description) VALUES (1,'Government and Politics'),(2,'Business and Economy');\n",
      "question": "For each author, list their name, degree and article titles.",
      "gold_queries": [
        "Select name, Degree, title From journalists Join articles on articles.authorId = journalists.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "For each journalist, display their name, educational background, and a list of titles of articles they have written.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT j.name, j.Degree, GROUP_CONCAT(a.title) AS article_titles\nFROM journalists j\nJOIN articles a ON j.id = a.authorId\nGROUP BY j.id"
          ]
        },
        {
          "interpretation": "List the names of all authors, along with their corresponding Bachelor's degree and the titles of the articles they have authored.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT journalists.name, journalists.Degree, articles.title \nFROM journalists \nJOIN articles ON journalists.id = articles.authorId \nWHERE journalists.Degree = 'Bachelor of Arts in Journalism'"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "one_found": true,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_qualification/vague_2cols_qualification.sqlite",
      "db_dump": "CREATE TABLE articles(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    publishDate DATETIME,\n    authorId INTEGER,\n    publicationId INTEGER,\n    topicId INTEGER,\n    FOREIGN KEY (authorId) REFERENCES journalists(id),\n    FOREIGN KEY (publicationId) REFERENCES publications(id),\n    FOREIGN KEY (topicId) REFERENCES topics(id)\n);\nCREATE TABLE journalists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    Degree TEXT,\n    Certificate TEXT,\n    Investigative_Journalist BOOLEAN\n);\nCREATE TABLE publications(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    address TEXT\n);\nCREATE TABLE sources(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    contactInfo TEXT\n);\nCREATE TABLE topics(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    description TEXT\n);\n\nINSERT INTO \"articles\" (id,title,content,publishDate,authorId,publicationId,topicId) VALUES (1,'Breaking News: New Government Policy','The government has announced a new policy that will impact citizens.','2023-04-01T10:00:00Z',1,1,1),(2,'Economic Outlook for Q2','Experts discuss the economic outlook for the second quarter.','2023-04-02T10:00:00Z',2,2,3);\nINSERT INTO \"journalists\" (id,name,email,phoneNumber,Degree,Certificate,Investigative_Journalist) VALUES (1,'John Doe','john@example.com','123-456-7890','Bachelor of Arts in Journalism','Certified Professional Writer',1),(2,'Jane Smith','jane@example.com','098-765-4321','Master of Science in Communication','Advanced Reporting Specialist',0);\nINSERT INTO \"publications\" (id,name,address) VALUES (1,'Daily Times','123 Main St, Anytown, USA'),(2,'Weekly Post','456 Elm St, Anycity, USA');\nINSERT INTO \"sources\" (id,name,contactInfo) VALUES (1,'City Hall','Phone: +1 (555) 123-4567 | Email: cityhall@anycity.gov'),(2,'Local Police Department','Phone: +1 (555) 987-6543 | Email: police@anystate.us');\nINSERT INTO \"topics\" (id,description) VALUES (1,'Government and Politics'),(2,'Business and Economy');\n",
      "question": "Give me a list of all investigative journalists, their certificates and their article titles",
      "gold_queries": [
        "Select name, Certificate, title From journalists Join articles on articles.authorId = journalists.id Where Investigative_Journalist=1"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Give me a list of all investigators in the journalists table, their certificates, and the titles of all articles written by each investigator.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT j.name, j.certificate, a.title\nFROM journalists j\nJOIN articles a ON j.id = a.authorId\nWHERE j.Investigative_Journalist = 1"
          ]
        },
        {
          "interpretation": "Give me a list of all journalists, their investigative journalist status, their certificates, and the title of each article written by each journalist if they have a certificate.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT j.name, j.Investigative_Journalist, j.Certificate, a.title\nFROM journalists j\nLEFT JOIN articles a ON j.id = a.authorId\nWHERE j.Certificate IS NOT NULL"
          ]
        },
        {
          "interpretation": "Give me a list of all journalists in the journalists table who have a certificate, and for each of these journalists, list their certificate, their investigative journalist status, and the tile of at least one article written by the journalist.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT j.certificate, j.investigative_journalist, a.title\nFROM journalists j\nJOIN articles a ON j.id = a.authorId\nWHERE j.certificate IS NOT NULL\nGROUP BY j.id"
          ]
        },
        {
          "interpretation": "Give me a list of all journalists who are investigative, their certificates, and the title of each article they wrote that does not relate to government and politics.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT j.name, j.Certificate, a.title\nFROM journalists j\nJOIN articles a ON j.id = a.authorId\nJOIN topics t ON a.topicId = t.id\nWHERE j.Investigative_Journalist = 1 AND t.description != 'Government and Politics'"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "one_found": true,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_qualification/vague_2cols_qualification.sqlite",
      "db_dump": "CREATE TABLE articles(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    publishDate DATETIME,\n    authorId INTEGER,\n    publicationId INTEGER,\n    topicId INTEGER,\n    FOREIGN KEY (authorId) REFERENCES journalists(id),\n    FOREIGN KEY (publicationId) REFERENCES publications(id),\n    FOREIGN KEY (topicId) REFERENCES topics(id)\n);\nCREATE TABLE journalists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    Degree TEXT,\n    Certificate TEXT,\n    Investigative_Journalist BOOLEAN\n);\nCREATE TABLE publications(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    address TEXT\n);\nCREATE TABLE sources(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    contactInfo TEXT\n);\nCREATE TABLE topics(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    description TEXT\n);\n\nINSERT INTO \"articles\" (id,title,content,publishDate,authorId,publicationId,topicId) VALUES (1,'Breaking News: New Government Policy','The government has announced a new policy that will impact citizens.','2023-04-01T10:00:00Z',1,1,1),(2,'Economic Outlook for Q2','Experts discuss the economic outlook for the second quarter.','2023-04-02T10:00:00Z',2,2,3);\nINSERT INTO \"journalists\" (id,name,email,phoneNumber,Degree,Certificate,Investigative_Journalist) VALUES (1,'John Doe','john@example.com','123-456-7890','Bachelor of Arts in Journalism','Certified Professional Writer',1),(2,'Jane Smith','jane@example.com','098-765-4321','Master of Science in Communication','Advanced Reporting Specialist',0);\nINSERT INTO \"publications\" (id,name,address) VALUES (1,'Daily Times','123 Main St, Anytown, USA'),(2,'Weekly Post','456 Elm St, Anycity, USA');\nINSERT INTO \"sources\" (id,name,contactInfo) VALUES (1,'City Hall','Phone: +1 (555) 123-4567 | Email: cityhall@anycity.gov'),(2,'Local Police Department','Phone: +1 (555) 987-6543 | Email: police@anystate.us');\nINSERT INTO \"topics\" (id,description) VALUES (1,'Government and Politics'),(2,'Business and Economy');\n",
      "question": "Give me a list of all investigative journalists, their qualifications and their article titles",
      "gold_queries": [
        "Select name, Degree, title From journalists Join articles on articles.authorId = journalists.id Where Investigative_Journalist=1",
        "Select name, Certificate, title From journalists Join articles on articles.authorId = journalists.id Where Investigative_Journalist=1",
        "Select name, Degree, Certificate, title From journalists Join articles on articles.authorId = journalists.id Where Investigative_Journalist=1"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Return the names, email addresses, and article titles of investigative journalists who have written articles in government and politics, business and economy and topics.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT j.name, j.email, a.title\nFROM journalists j\nJOIN articles a ON j.id = a.authorId\nJOIN topics t ON a.topicId = t.id\nWHERE j.Investigative_Journalist = 1 AND t.description IN ('Government and Politics', 'Business and Economy')"
          ]
        },
        {
          "interpretation": "Give me the names and phone numbers of investigative journalists, along with the titles of their articles that were published in the Daily Times and Weekly Post.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT j.name, j.phoneNumber, a.title\nFROM journalists j\nJOIN articles a ON j.id = a.authorId\nJOIN publications p ON a.publicationId = p.id\nWHERE j.Investigative_Journalist = 1 AND p.name IN ('Daily Times', 'Weekly Post')"
          ]
        },
        {
          "interpretation": "Provide a list of all investigative journalists, their associated degrees, certificates, and their article titles published in the Daily Times.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT j.name, j.Degree, j.Certificate, a.title\nFROM journalists j\nJOIN articles a ON j.id = a.authorId\nJOIN publications p ON a.publicationId = p.id\nWHERE j.Investigative_Journalist = 1 AND p.name = 'Daily Times'"
          ]
        },
        {
          "interpretation": "Return the names of investigative journalists, their departments, and the titles of their articles in the Daily Times, Weekly Post, about government and politics.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT j.name, p.name, a.title\nFROM journalists j\nJOIN articles a ON j.id = a.authorId\nJOIN publications p ON a.publicationId = p.id\nJOIN topics t ON a.topicId = t.id\nWHERE j.Investigative_Journalist = 1 AND p.name IN ('Daily Times', 'Weekly Post') AND t.description = 'Government and Politics'"
          ]
        },
        {
          "interpretation": "Show me a list of investigative journalists, their certifications, and the titles of their articles that were published in government and politics, business and economy topics, along with the articles they have written.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT j.name, j.Certificate, a.title\nFROM journalists j\nJOIN articles a ON j.id = a.authorId\nJOIN topics t ON a.topicId = t.id\nWHERE j.Investigative_Journalist = 1 AND t.description IN ('Government and Politics', 'Business and Economy')"
          ]
        },
        {
          "interpretation": "Give me a list of the names and article titles of investigative journalists who have written articles for Daily Times and Weekly Post.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT j.name, a.title\nFROM journalists j\nJOIN articles a ON j.id = a.authorId\nJOIN publications p ON a.publicationId = p.id\nWHERE j.Investigative_Journalist = 1 AND p.name IN ('Daily Times', 'Weekly Post')"
          ]
        },
        {
          "interpretation": "Give me the names and investigative journalist status of all journalists, along with their article titles and the titles of their articles they have written that were published in government and politics topics.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT j.name, j.Investigative_Journalist, a.title\nFROM journalists j\nJOIN articles a ON j.id = a.authorId\nJOIN topics t ON a.topicId = t.id\nWHERE t.description = 'Government and Politics'"
          ]
        },
        {
          "interpretation": "Give me a list of all investigations journalists, their qualifications, and the number of articles they have published about government and politics, business and economy,  and all topics.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    j.name, \n    j.Degree, \n    j.Certificate, \n    SUM(CASE WHEN t.description = 'Government and Politics' THEN 1 ELSE 0 END) AS Government_and_Politics, \n    SUM(CASE WHEN t.description = 'Business and Economy' THEN 1 ELSE 0 END) AS Business_and_Economy, \n    COUNT(a.id) AS All_Topics\nFROM \n    journalists j\nJOIN \n    articles a ON j.id = a.authorId\nJOIN \n    topics t ON a.topicId = t.id\nWHERE \n    j.Investigative_Journalist = 1\nGROUP BY \n    j.id"
          ]
        }
      ],
      "num_unique_execution_results": 8,
      "interpretation_level_metrics": {
        "recall": 0.6666666666666666,
        "precision": 0.25,
        "one_found": true,
        "f1_score": 0.36363636363636365,
        "num_queries": 8,
        "num_unique_queries": 8,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_qualification/vague_2cols_qualification.sqlite",
      "db_dump": "CREATE TABLE articles(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    publishDate DATETIME,\n    authorId INTEGER,\n    publicationId INTEGER,\n    topicId INTEGER,\n    FOREIGN KEY (authorId) REFERENCES journalists(id),\n    FOREIGN KEY (publicationId) REFERENCES publications(id),\n    FOREIGN KEY (topicId) REFERENCES topics(id)\n);\nCREATE TABLE journalists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    Degree TEXT,\n    Certificate TEXT,\n    Investigative_Journalist BOOLEAN\n);\nCREATE TABLE publications(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    address TEXT\n);\nCREATE TABLE sources(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    contactInfo TEXT\n);\nCREATE TABLE topics(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    description TEXT\n);\n\nINSERT INTO \"articles\" (id,title,content,publishDate,authorId,publicationId,topicId) VALUES (1,'Breaking News: New Government Policy','The government has announced a new policy that will impact citizens.','2023-04-01T10:00:00Z',1,1,1),(2,'Economic Outlook for Q2','Experts discuss the economic outlook for the second quarter.','2023-04-02T10:00:00Z',2,2,3);\nINSERT INTO \"journalists\" (id,name,email,phoneNumber,Degree,Certificate,Investigative_Journalist) VALUES (1,'John Doe','john@example.com','123-456-7890','Bachelor of Arts in Journalism','Certified Professional Writer',1),(2,'Jane Smith','jane@example.com','098-765-4321','Master of Science in Communication','Advanced Reporting Specialist',0);\nINSERT INTO \"publications\" (id,name,address) VALUES (1,'Daily Times','123 Main St, Anytown, USA'),(2,'Weekly Post','456 Elm St, Anycity, USA');\nINSERT INTO \"sources\" (id,name,contactInfo) VALUES (1,'City Hall','Phone: +1 (555) 123-4567 | Email: cityhall@anycity.gov'),(2,'Local Police Department','Phone: +1 (555) 987-6543 | Email: police@anystate.us');\nINSERT INTO \"topics\" (id,description) VALUES (1,'Government and Politics'),(2,'Business and Economy');\n",
      "question": "For each author, list their name, degree, certificate and article titles.",
      "gold_queries": [
        "Select name, Degree, Certificate, title From journalists Join articles on articles.authorId = journalists.id"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List each author's name, degree, certificate, and article titles, considering all articles associated with that author.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT j.name, j.Degree, j.Certificate, a.title \nFROM journalists j \nJOIN articles a ON j.id = a.authorId"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "one_found": true,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_qualification/vague_2cols_qualification.sqlite",
      "db_dump": "CREATE TABLE articles(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    publishDate DATETIME,\n    authorId INTEGER,\n    publicationId INTEGER,\n    topicId INTEGER,\n    FOREIGN KEY (authorId) REFERENCES journalists(id),\n    FOREIGN KEY (publicationId) REFERENCES publications(id),\n    FOREIGN KEY (topicId) REFERENCES topics(id)\n);\nCREATE TABLE journalists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    Degree TEXT,\n    Certificate TEXT,\n    Investigative_Journalist BOOLEAN\n);\nCREATE TABLE publications(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    address TEXT\n);\nCREATE TABLE sources(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    contactInfo TEXT\n);\nCREATE TABLE topics(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    description TEXT\n);\n\nINSERT INTO \"articles\" (id,title,content,publishDate,authorId,publicationId,topicId) VALUES (1,'Breaking News: New Government Policy','The government has announced a new policy that will impact citizens.','2023-04-01T10:00:00Z',1,1,1),(2,'Economic Outlook for Q2','Experts discuss the economic outlook for the second quarter.','2023-04-02T10:00:00Z',2,2,3);\nINSERT INTO \"journalists\" (id,name,email,phoneNumber,Degree,Certificate,Investigative_Journalist) VALUES (1,'John Doe','john@example.com','123-456-7890','Bachelor of Arts in Journalism','Certified Professional Writer',1),(2,'Jane Smith','jane@example.com','098-765-4321','Master of Science in Communication','Advanced Reporting Specialist',0);\nINSERT INTO \"publications\" (id,name,address) VALUES (1,'Daily Times','123 Main St, Anytown, USA'),(2,'Weekly Post','456 Elm St, Anycity, USA');\nINSERT INTO \"sources\" (id,name,contactInfo) VALUES (1,'City Hall','Phone: +1 (555) 123-4567 | Email: cityhall@anycity.gov'),(2,'Local Police Department','Phone: +1 (555) 987-6543 | Email: police@anystate.us');\nINSERT INTO \"topics\" (id,description) VALUES (1,'Government and Politics'),(2,'Business and Economy');\n",
      "question": "show me the name, qualification and title for all authors and articles",
      "gold_queries": [
        "Select name, Degree, title From journalists Join articles on articles.authorId = journalists.id",
        "Select name, Certificate, title From journalists Join articles on articles.authorId = journalists.id",
        "Select name, Degree, Certificate, title From journalists Join articles on articles.authorId = journalists.id"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Present the names of articles, their authors' names, and a list of their educational qualifications and specializations (Degree or Certificate).",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT a.title, j.name, j.Degree, j.Certificate\nFROM articles a\nJOIN journalists j ON a.authorId = j.id"
          ]
        },
        {
          "interpretation": "Show the name of the journalist, his degree, and the title of each article written by him.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT journalists.name, journalists.Degree, articles.title\nFROM articles\nJOIN journalists ON articles.authorId = journalists.id"
          ]
        },
        {
          "interpretation": "Display articles' titles, the authors' names, and the journalists' professional knowledge certificates.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT a.title, j.name, j.Certificate\nFROM articles a\nJOIN journalists j ON a.authorId = j.id"
          ]
        },
        {
          "interpretation": "Show authors' names and their qualifications, along with the title and name of each article.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT journalists.name, journalists.Degree, journalists.Certificate, articles.title, publications.name \nFROM articles \nJOIN journalists ON articles.authorId = journalists.id \nJOIN publications ON articles.publicationId = publications.id"
          ]
        },
        {
          "interpretation": "Show the names of the article authors, their qualifications, and the names of their educational institutions (not available in this context).",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT journalists.name, journalists.Degree, journalists.Certificate FROM journalists INNER JOIN articles ON journalists.id = articles.authorId"
          ]
        },
        {
          "interpretation": "Display a list containing article titles and authors' names, as well as the journalists' qualification types and experience levels (Investigative Journalist).",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT articles.title, journalists.name, journalists.Degree, journalists.Certificate, journalists.Investigative_Journalist\nFROM articles\nJOIN journalists ON articles.authorId = journalists.id"
          ]
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "one_found": true,
        "f1_score": 0.6666666666666666,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_qualification/vague_2cols_qualification.sqlite",
      "db_dump": "CREATE TABLE articles(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    publishDate DATETIME,\n    authorId INTEGER,\n    publicationId INTEGER,\n    topicId INTEGER,\n    FOREIGN KEY (authorId) REFERENCES journalists(id),\n    FOREIGN KEY (publicationId) REFERENCES publications(id),\n    FOREIGN KEY (topicId) REFERENCES topics(id)\n);\nCREATE TABLE journalists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    Degree TEXT,\n    Certificate TEXT,\n    Investigative_Journalist BOOLEAN\n);\nCREATE TABLE publications(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    address TEXT\n);\nCREATE TABLE sources(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    contactInfo TEXT\n);\nCREATE TABLE topics(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    description TEXT\n);\n\nINSERT INTO \"articles\" (id,title,content,publishDate,authorId,publicationId,topicId) VALUES (1,'Breaking News: New Government Policy','The government has announced a new policy that will impact citizens.','2023-04-01T10:00:00Z',1,1,1),(2,'Economic Outlook for Q2','Experts discuss the economic outlook for the second quarter.','2023-04-02T10:00:00Z',2,2,3);\nINSERT INTO \"journalists\" (id,name,email,phoneNumber,Degree,Certificate,Investigative_Journalist) VALUES (1,'John Doe','john@example.com','123-456-7890','Bachelor of Arts in Journalism','Certified Professional Writer',1),(2,'Jane Smith','jane@example.com','098-765-4321','Master of Science in Communication','Advanced Reporting Specialist',0);\nINSERT INTO \"publications\" (id,name,address) VALUES (1,'Daily Times','123 Main St, Anytown, USA'),(2,'Weekly Post','456 Elm St, Anycity, USA');\nINSERT INTO \"sources\" (id,name,contactInfo) VALUES (1,'City Hall','Phone: +1 (555) 123-4567 | Email: cityhall@anycity.gov'),(2,'Local Police Department','Phone: +1 (555) 987-6543 | Email: police@anystate.us');\nINSERT INTO \"topics\" (id,description) VALUES (1,'Government and Politics'),(2,'Business and Economy');\n",
      "question": "Give me a list of all investigative journalists, their degrees and their article titles",
      "gold_queries": [
        "Select name, Degree, title From journalists Join articles on articles.authorId = journalists.id Where Investigative_Journalist=1"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Give me a list of journalists whose Investigative_Journalist column is 1, their Degree, and the titles of articles they authored.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT j.name, j.Degree, a.title\nFROM journalists j\nJOIN articles a ON j.id = a.authorId\nWHERE j.Investigative_Journalist = 1"
          ]
        },
        {
          "interpretation": "Give a table list of journalists whose Investigative_Journalist flag is True, along with their degrees and a separate table of the article titles that those journalists authored.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title FROM articles WHERE authorId IN (SELECT id FROM journalists WHERE Investigative_Journalist = 1)",
            "SELECT name, Degree FROM journalists WHERE Investigative_Journalist = 1"
          ]
        },
        {
          "interpretation": "Give a table list of journalists whose Investigative_Journalist flag is True, along with their degrees and a separate table of the article titles that those journalists authored.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title FROM articles WHERE authorId IN (SELECT id FROM journalists WHERE Investigative_Journalist = 1)",
            "SELECT name, Degree FROM journalists WHERE Investigative_Journalist = 1"
          ]
        },
        {
          "interpretation": "Give a list of journalists who have a Degree, and along with that, a list of articles written by them, particularly those containing Investigative_Journalist as 1.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT j.name, a.title \nFROM journalists j \nJOIN articles a ON j.id = a.authorId \nWHERE j.Degree IS NOT NULL AND j.Investigative_Journalist = 1"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "one_found": true,
        "f1_score": 0.4,
        "num_queries": 6,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_origin/vague_2cols_origin.sqlite",
      "db_dump": "CREATE TABLE Assignments (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    EventId INTEGER,\n    PhotojournalistId INTEGER,\n    FOREIGN KEY(EventId) REFERENCES Events(id),\n    FOREIGN KEY(PhotojournalistId) REFERENCES Photojournalists(id));\nCREATE TABLE Events (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Location TEXT,\n    Date DATE);\nCREATE TABLE Photojournalists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Birthdate DATE);\nCREATE TABLE Photos (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FilePath TEXT,\n    Caption TEXT,\n    TakenOn DATE);\nCREATE TABLE PublishedPhotos (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    AssignmentId INTEGER,\n    PhotoId INTEGER,\n    PublicationDate DATE,\n    FOREIGN KEY(AssignmentId) REFERENCES Assignments(id),\n    FOREIGN KEY(PhotoId) REFERENCES Photos(id));\n\nINSERT INTO \"Assignments\" (id,EventId,PhotojournalistId) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Events\" (id,Title,Location,Date) VALUES (1,'Protest Rally','Downtown','2022-01-01'),(2,'Election Day','City Hall','2022-11-08'),(3,'Festival','Park','2022-07-15'),(4,'Concert','Arena','2022-10-20'),(5,'Marathon','Streets','2022-04-10');\nINSERT INTO \"Photojournalists\" (id,Name,Birthdate) VALUES (1,'John Doe','1980-06-23'),(2,'Jane Smith','1991-07-05'),(3,'Michael Johnson','1985-10-02'),(4,'Emily Davis','1993-01-10'),(5,'David Brown','1989-05-20');\nINSERT INTO \"Photos\" (id,FilePath,Caption,TakenOn) VALUES (1,'/path/to/photo1.jpg','Riot police at protest rally','2022-01-01'),(2,'/path/to/photo2.jpg','Voters waiting to vote','2022-11-08'),(3,'/path/to/photo3.jpg','Crowd enjoying music','2022-07-15'),(4,'/path/to/photo4.jpg','Musician performing on stage','2022-10-20'),(5,'/path/to/photo5.jpg','Runners crossing finish line','2022-04-10');\nINSERT INTO \"PublishedPhotos\" (id,AssignmentId,PhotoId,PublicationDate) VALUES (1,1,1,'2022-01-02'),(2,2,2,'2022-11-10'),(3,3,3,'2022-07-20'),(4,4,4,'2022-10-25'),(5,5,5,'2022-04-15');\n",
      "question": "Show me the photojournalist who took the most recent photo.",
      "gold_queries": [
        "SELECT Photojournalists.Name\r\nFROM Assignments\r\nJOIN Photojournalists ON Assignments.PhotojournalistId = Photojournalists.ID \r\nJOIN PublishedPhotos ON PublishedPhotos.AssignmentId = Assignments.id \r\nORDER BY PublishedPhotos.PublicationDate DESC LIMIT 1"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Show me the Photojournalist who took the most recent photo taken by any Photojournalist in the system.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT P.Name\nFROM Photojournalists P\nJOIN Assignments A ON P.id = A.PhotojournalistId\nJOIN Photos Ph ON A.id = Ph.id\nWHERE Ph.TakenOn = (SELECT MAX(TakenOn) FROM Photos)"
          ]
        },
        {
          "interpretation": "Show me the Photojournalist who took the most recent published photo for their most recent Event.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.Name\nFROM Photojournalists P\nJOIN Assignments A ON P.id = A.PhotojournalistId\nJOIN PublishedPhotos PP ON A.id = PP.AssignmentId\nJOIN Events E ON A.EventId = E.id\nWHERE PP.PublicationDate = (\n    SELECT MAX(Pub.PublicationDate)\n    FROM PublishedPhotos Pub\n    JOIN Assignments Ass ON Pub.AssignmentId = Ass.id\n    JOIN Events Eve ON Ass.EventId = Eve.id\n    WHERE Ass.PhotojournalistId = P.id\n)"
          ]
        },
        {
          "interpretation": "Show me the Photojournalist who belongs to the most recent Assignment in the system.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Photojournalists.Name \nFROM Photojournalists \nJOIN Assignments ON Photojournalists.id = Assignments.PhotojournalistId \nWHERE Assignments.id = (SELECT MAX(id) FROM Assignments)"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "one_found": true,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_origin/vague_2cols_origin.sqlite",
      "db_dump": "CREATE TABLE Assignments (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    EventId INTEGER,\n    PhotojournalistId INTEGER,\n    FOREIGN KEY(EventId) REFERENCES Events(id),\n    FOREIGN KEY(PhotojournalistId) REFERENCES Photojournalists(id));\nCREATE TABLE Events (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Location TEXT,\n    Date DATE);\nCREATE TABLE Photojournalists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Birthdate DATE);\nCREATE TABLE Photos (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FilePath TEXT,\n    Caption TEXT,\n    TakenOn DATE);\nCREATE TABLE PublishedPhotos (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    AssignmentId INTEGER,\n    PhotoId INTEGER,\n    PublicationDate DATE,\n    FOREIGN KEY(AssignmentId) REFERENCES Assignments(id),\n    FOREIGN KEY(PhotoId) REFERENCES Photos(id));\n\nINSERT INTO \"Assignments\" (id,EventId,PhotojournalistId) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Events\" (id,Title,Location,Date) VALUES (1,'Protest Rally','Downtown','2022-01-01'),(2,'Election Day','City Hall','2022-11-08'),(3,'Festival','Park','2022-07-15'),(4,'Concert','Arena','2022-10-20'),(5,'Marathon','Streets','2022-04-10');\nINSERT INTO \"Photojournalists\" (id,Name,Birthdate) VALUES (1,'John Doe','1980-06-23'),(2,'Jane Smith','1991-07-05'),(3,'Michael Johnson','1985-10-02'),(4,'Emily Davis','1993-01-10'),(5,'David Brown','1989-05-20');\nINSERT INTO \"Photos\" (id,FilePath,Caption,TakenOn) VALUES (1,'/path/to/photo1.jpg','Riot police at protest rally','2022-01-01'),(2,'/path/to/photo2.jpg','Voters waiting to vote','2022-11-08'),(3,'/path/to/photo3.jpg','Crowd enjoying music','2022-07-15'),(4,'/path/to/photo4.jpg','Musician performing on stage','2022-10-20'),(5,'/path/to/photo5.jpg','Runners crossing finish line','2022-04-10');\nINSERT INTO \"PublishedPhotos\" (id,AssignmentId,PhotoId,PublicationDate) VALUES (1,1,1,'2022-01-02'),(2,2,2,'2022-11-10'),(3,3,3,'2022-07-20'),(4,4,4,'2022-10-25'),(5,5,5,'2022-04-15');\n",
      "question": "List the events of photos published in 2022",
      "gold_queries": [
        "SELECT Events.Title FROM Assignments JOIN Events ON Assignments.EventId = Events.ID JOIN PublishedPhotos ON PublishedPhotos.AssignmentId = Assignments.id WHERE  strftime('%Y', PublishedPhotos.PublicationDate) = '2022'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List the events for which at least one photo published in 2022 is of a photojournalist who shot it in 2022.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT DISTINCT E.Title \nFROM Events E \nJOIN Assignments A ON E.id = A.EventId \nJOIN PublishedPhotos P on A.id = P.AssignmentId \nJOIN Photos Ph ON P.PhotoId = Ph.id \nWHERE P.PublicationDate LIKE '2022%' AND Ph.TakenOn LIKE '2022%'"
          ]
        },
        {
          "interpretation": "Report events lacking related published photos introduced in 2022.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Title\nFROM Events\nWHERE id NOT IN (\n    SELECT EventId\n    FROM Assignments\n    WHERE id IN (\n        SELECT AssignmentId\n        FROM PublishedPhotos\n        WHERE PublicationDate LIKE '2022-%'\n    )\n)"
          ]
        },
        {
          "interpretation": "List distinct event IDs contributing to data purchases accessible in 2022.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT EventId FROM Assignments WHERE id IN (SELECT AssignmentId FROM PublishedPhotos WHERE PublicationDate LIKE '2022%')"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "one_found": true,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_origin/vague_2cols_origin.sqlite",
      "db_dump": "CREATE TABLE Assignments (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    EventId INTEGER,\n    PhotojournalistId INTEGER,\n    FOREIGN KEY(EventId) REFERENCES Events(id),\n    FOREIGN KEY(PhotojournalistId) REFERENCES Photojournalists(id));\nCREATE TABLE Events (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Location TEXT,\n    Date DATE);\nCREATE TABLE Photojournalists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Birthdate DATE);\nCREATE TABLE Photos (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FilePath TEXT,\n    Caption TEXT,\n    TakenOn DATE);\nCREATE TABLE PublishedPhotos (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    AssignmentId INTEGER,\n    PhotoId INTEGER,\n    PublicationDate DATE,\n    FOREIGN KEY(AssignmentId) REFERENCES Assignments(id),\n    FOREIGN KEY(PhotoId) REFERENCES Photos(id));\n\nINSERT INTO \"Assignments\" (id,EventId,PhotojournalistId) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Events\" (id,Title,Location,Date) VALUES (1,'Protest Rally','Downtown','2022-01-01'),(2,'Election Day','City Hall','2022-11-08'),(3,'Festival','Park','2022-07-15'),(4,'Concert','Arena','2022-10-20'),(5,'Marathon','Streets','2022-04-10');\nINSERT INTO \"Photojournalists\" (id,Name,Birthdate) VALUES (1,'John Doe','1980-06-23'),(2,'Jane Smith','1991-07-05'),(3,'Michael Johnson','1985-10-02'),(4,'Emily Davis','1993-01-10'),(5,'David Brown','1989-05-20');\nINSERT INTO \"Photos\" (id,FilePath,Caption,TakenOn) VALUES (1,'/path/to/photo1.jpg','Riot police at protest rally','2022-01-01'),(2,'/path/to/photo2.jpg','Voters waiting to vote','2022-11-08'),(3,'/path/to/photo3.jpg','Crowd enjoying music','2022-07-15'),(4,'/path/to/photo4.jpg','Musician performing on stage','2022-10-20'),(5,'/path/to/photo5.jpg','Runners crossing finish line','2022-04-10');\nINSERT INTO \"PublishedPhotos\" (id,AssignmentId,PhotoId,PublicationDate) VALUES (1,1,1,'2022-01-02'),(2,2,2,'2022-11-10'),(3,3,3,'2022-07-20'),(4,4,4,'2022-10-25'),(5,5,5,'2022-04-15');\n",
      "question": "List the photojournalists whose photos were published in 2022 and the events depicted in these photos.",
      "gold_queries": [
        "SELECT Photojournalists.Name , Events.Title FROM Assignments JOIN Events ON Assignments.EventId = Events.ID JOIN PublishedPhotos ON PublishedPhotos.AssignmentId = Assignments.id JOIN Photojournalists ON Assignments.PhotojournalistId = Photojournalists.ID  WHERE  strftime('%Y', PublishedPhotos.PublicationDate) = '2022'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List the photojournalists who published photos in 2022 showing events in November, possible one since that is possible.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT p.Name\nFROM Photojournalists p\nJOIN Assignments a ON p.id = a.PhotojournalistId\nJOIN PublishedPhotos pp ON a.id = pp.AssignmentId\nJOIN Events e ON a.EventId = e.id\nWHERE pp.PublicationDate BETWEEN '2022-01-01' AND '2022-12-31'\nAND e.Date BETWEEN '2022-11-01' AND '2022-11-30'"
          ]
        },
        {
          "interpretation": "List the photojournalists whose published photos in 2022 depicted events from the same year.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT P.Name\nFROM Photojournalists P\nJOIN Assignments A ON P.id = A.PhotojournalistId\nJOIN PublishedPhotos PP ON A.id = PP.AssignmentId\nWHERE PP.PublicationDate LIKE '2022%' AND A.EventId IN (\n    SELECT E.id\n    FROM Events E\n    WHERE E.Date LIKE '2022%'\n)"
          ]
        },
        {
          "interpretation": "List the photojournalists who published photos in 2022 showing events from the previous year of their birth, but other possible answer interpretation is those who allowed the same.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT P.Name\nFROM Photojournalists P\nJOIN Assignments A ON P.id = A.PhotojournalistId\nJOIN PublishedPhotos PP ON A.id = PP.AssignmentId\nWHERE PP.PublicationDate BETWEEN '2022-01-01' AND '2022-12-31'\nAND strftime('%Y', PP.PublicationDate) - strftime('%Y', P.Birthdate) = 1"
          ]
        },
        {
          "interpretation": "List the events from 2022 and their associated photojournalists based on published photos from that year.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Events.Title, Photojournalists.Name\nFROM Events\nJOIN Assignments ON Events.id = Assignments.EventId\nJOIN Photojournalists ON Assignments.PhotojournalistId = Photojournalists.id\nJOIN PublishedPhotos ON Assignments.id = PublishedPhotos.AssignmentId\nWHERE Events.Date LIKE '2022-%' AND PublishedPhotos.PublicationDate LIKE '2022-%'"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "one_found": true,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_origin/vague_2cols_origin.sqlite",
      "db_dump": "CREATE TABLE Assignments (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    EventId INTEGER,\n    PhotojournalistId INTEGER,\n    FOREIGN KEY(EventId) REFERENCES Events(id),\n    FOREIGN KEY(PhotojournalistId) REFERENCES Photojournalists(id));\nCREATE TABLE Events (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Location TEXT,\n    Date DATE);\nCREATE TABLE Photojournalists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Birthdate DATE);\nCREATE TABLE Photos (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FilePath TEXT,\n    Caption TEXT,\n    TakenOn DATE);\nCREATE TABLE PublishedPhotos (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    AssignmentId INTEGER,\n    PhotoId INTEGER,\n    PublicationDate DATE,\n    FOREIGN KEY(AssignmentId) REFERENCES Assignments(id),\n    FOREIGN KEY(PhotoId) REFERENCES Photos(id));\n\nINSERT INTO \"Assignments\" (id,EventId,PhotojournalistId) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Events\" (id,Title,Location,Date) VALUES (1,'Protest Rally','Downtown','2022-01-01'),(2,'Election Day','City Hall','2022-11-08'),(3,'Festival','Park','2022-07-15'),(4,'Concert','Arena','2022-10-20'),(5,'Marathon','Streets','2022-04-10');\nINSERT INTO \"Photojournalists\" (id,Name,Birthdate) VALUES (1,'John Doe','1980-06-23'),(2,'Jane Smith','1991-07-05'),(3,'Michael Johnson','1985-10-02'),(4,'Emily Davis','1993-01-10'),(5,'David Brown','1989-05-20');\nINSERT INTO \"Photos\" (id,FilePath,Caption,TakenOn) VALUES (1,'/path/to/photo1.jpg','Riot police at protest rally','2022-01-01'),(2,'/path/to/photo2.jpg','Voters waiting to vote','2022-11-08'),(3,'/path/to/photo3.jpg','Crowd enjoying music','2022-07-15'),(4,'/path/to/photo4.jpg','Musician performing on stage','2022-10-20'),(5,'/path/to/photo5.jpg','Runners crossing finish line','2022-04-10');\nINSERT INTO \"PublishedPhotos\" (id,AssignmentId,PhotoId,PublicationDate) VALUES (1,1,1,'2022-01-02'),(2,2,2,'2022-11-10'),(3,3,3,'2022-07-20'),(4,4,4,'2022-10-25'),(5,5,5,'2022-04-15');\n",
      "question": "List the photojournalists whose photos were published in 2022.",
      "gold_queries": [
        "SELECT Photojournalists.Name FROM Assignments JOIN Photojournalists ON Assignments.PhotojournalistId = Photojournalists.ID JOIN PublishedPhotos ON PublishedPhotos.AssignmentId = Assignments.id WHERE  strftime('%Y', PublishedPhotos.PublicationDate) = '2022'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List the unique PhotojournalistId values from the PublishedPhotos table where PublicationDate is in the year 2022.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT T1.PhotojournalistId\nFROM Assignments AS T1\nJOIN PublishedPhotos AS T2 ON T1.id = T2.AssignmentId\nWHERE strftime('%Y', T2.PublicationDate) = '2022'"
          ]
        },
        {
          "interpretation": "List the names and photojournalist IDs of those who published photos on the first day of the first published month in 2022.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.Name, A.PhotojournalistId \nFROM Photojournalists P \nJOIN Assignments A ON P.id = A.PhotojournalistId \nJOIN PublishedPhotos PP ON A.id = PP.AssignmentId \nWHERE PP.PublicationDate = (SELECT MIN(PublicationDate) FROM PublishedPhotos WHERE strftime('%Y-%m', PublicationDate) = '2022-01')"
          ]
        },
        {
          "interpretation": "Find the names and birthdates of photojournalists who had published photos before or in the same year as the oldest photo in the database.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Birthdate FROM Photojournalists WHERE id IN (SELECT PhotojournalistId FROM Assignments WHERE id IN (SELECT AssignmentId FROM PublishedPhotos WHERE PublicationDate <= (SELECT MIN(TakenOn) FROM Photos)))"
          ]
        },
        {
          "interpretation": "Retrieve the names of photojournalists who published at least one photo in 2022, including those who published on the last day of 2022.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT DISTINCT P.Name\nFROM Photojournalists P\nJOIN Assignments A ON P.id = A.PhotojournalistId\nJOIN PublishedPhotos PP ON A.id = PP.AssignmentId\nWHERE PP.PublicationDate BETWEEN '2022-01-01' AND '2022-12-31'"
          ]
        },
        {
          "interpretation": "List the IDs and names of photojournalists who published photos in 2022 and are older than 30 years as of the last day of 2022.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT PJ.id, PJ.Name\nFROM Photojournalists PJ\nJOIN Assignments A ON PJ.id = A.PhotojournalistId\nJOIN PublishedPhotos PP ON A.id = PP.AssignmentId\nWHERE PP.PublicationDate LIKE '2022%' AND PJ.Birthdate <= '1991-12-31'"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "one_found": true,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_origin/vague_2cols_origin.sqlite",
      "db_dump": "CREATE TABLE Assignments (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    EventId INTEGER,\n    PhotojournalistId INTEGER,\n    FOREIGN KEY(EventId) REFERENCES Events(id),\n    FOREIGN KEY(PhotojournalistId) REFERENCES Photojournalists(id));\nCREATE TABLE Events (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Location TEXT,\n    Date DATE);\nCREATE TABLE Photojournalists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Birthdate DATE);\nCREATE TABLE Photos (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FilePath TEXT,\n    Caption TEXT,\n    TakenOn DATE);\nCREATE TABLE PublishedPhotos (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    AssignmentId INTEGER,\n    PhotoId INTEGER,\n    PublicationDate DATE,\n    FOREIGN KEY(AssignmentId) REFERENCES Assignments(id),\n    FOREIGN KEY(PhotoId) REFERENCES Photos(id));\n\nINSERT INTO \"Assignments\" (id,EventId,PhotojournalistId) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Events\" (id,Title,Location,Date) VALUES (1,'Protest Rally','Downtown','2022-01-01'),(2,'Election Day','City Hall','2022-11-08'),(3,'Festival','Park','2022-07-15'),(4,'Concert','Arena','2022-10-20'),(5,'Marathon','Streets','2022-04-10');\nINSERT INTO \"Photojournalists\" (id,Name,Birthdate) VALUES (1,'John Doe','1980-06-23'),(2,'Jane Smith','1991-07-05'),(3,'Michael Johnson','1985-10-02'),(4,'Emily Davis','1993-01-10'),(5,'David Brown','1989-05-20');\nINSERT INTO \"Photos\" (id,FilePath,Caption,TakenOn) VALUES (1,'/path/to/photo1.jpg','Riot police at protest rally','2022-01-01'),(2,'/path/to/photo2.jpg','Voters waiting to vote','2022-11-08'),(3,'/path/to/photo3.jpg','Crowd enjoying music','2022-07-15'),(4,'/path/to/photo4.jpg','Musician performing on stage','2022-10-20'),(5,'/path/to/photo5.jpg','Runners crossing finish line','2022-04-10');\nINSERT INTO \"PublishedPhotos\" (id,AssignmentId,PhotoId,PublicationDate) VALUES (1,1,1,'2022-01-02'),(2,2,2,'2022-11-10'),(3,3,3,'2022-07-20'),(4,4,4,'2022-10-25'),(5,5,5,'2022-04-15');\n",
      "question": "Show me the photojournalist and the event of the most recent photo.",
      "gold_queries": [
        "SELECT Photojournalists.Name , Events.Title\r\nFROM Assignments\r\nJOIN Events ON Assignments.EventId = Events.ID\r\nJOIN PublishedPhotos ON PublishedPhotos.AssignmentId = Assignments.id  JOIN Photojournalists ON Assignments.PhotojournalistId = Photojournalists.ID \r\nORDER BY PublishedPhotos.PublicationDate DESC LIMIT 1"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Show me the photojournalist and the event of the photo that was published most recently.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT P.Name, E.Title\nFROM PublishedPhotos PP\nJOIN Assignments A ON PP.AssignmentId = A.id\nJOIN Photojournalists P ON A.PhotojournalistId = P.id\nJOIN Events E ON A.EventId = E.id\nWHERE PP.PublicationDate = (SELECT MAX(PublicationDate) FROM PublishedPhotos)"
          ]
        },
        {
          "interpretation": "Show me the event and the photo taken by the photojournalist who has published the most recent photo.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.Title, P.FilePath\nFROM PublishedPhotos PP\nJOIN Assignments A ON PP.AssignmentId = A.id\nJOIN Events E ON A.EventId = E.id\nJOIN Photos P ON PP.PhotoId = P.id\nWHERE PP.PublicationDate = (SELECT MAX(PublicationDate) FROM PublishedPhotos)"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "one_found": true,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_origin/vague_2cols_origin.sqlite",
      "db_dump": "CREATE TABLE Assignments (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    EventId INTEGER,\n    PhotojournalistId INTEGER,\n    FOREIGN KEY(EventId) REFERENCES Events(id),\n    FOREIGN KEY(PhotojournalistId) REFERENCES Photojournalists(id));\nCREATE TABLE Events (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Location TEXT,\n    Date DATE);\nCREATE TABLE Photojournalists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Birthdate DATE);\nCREATE TABLE Photos (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FilePath TEXT,\n    Caption TEXT,\n    TakenOn DATE);\nCREATE TABLE PublishedPhotos (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    AssignmentId INTEGER,\n    PhotoId INTEGER,\n    PublicationDate DATE,\n    FOREIGN KEY(AssignmentId) REFERENCES Assignments(id),\n    FOREIGN KEY(PhotoId) REFERENCES Photos(id));\n\nINSERT INTO \"Assignments\" (id,EventId,PhotojournalistId) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Events\" (id,Title,Location,Date) VALUES (1,'Protest Rally','Downtown','2022-01-01'),(2,'Election Day','City Hall','2022-11-08'),(3,'Festival','Park','2022-07-15'),(4,'Concert','Arena','2022-10-20'),(5,'Marathon','Streets','2022-04-10');\nINSERT INTO \"Photojournalists\" (id,Name,Birthdate) VALUES (1,'John Doe','1980-06-23'),(2,'Jane Smith','1991-07-05'),(3,'Michael Johnson','1985-10-02'),(4,'Emily Davis','1993-01-10'),(5,'David Brown','1989-05-20');\nINSERT INTO \"Photos\" (id,FilePath,Caption,TakenOn) VALUES (1,'/path/to/photo1.jpg','Riot police at protest rally','2022-01-01'),(2,'/path/to/photo2.jpg','Voters waiting to vote','2022-11-08'),(3,'/path/to/photo3.jpg','Crowd enjoying music','2022-07-15'),(4,'/path/to/photo4.jpg','Musician performing on stage','2022-10-20'),(5,'/path/to/photo5.jpg','Runners crossing finish line','2022-04-10');\nINSERT INTO \"PublishedPhotos\" (id,AssignmentId,PhotoId,PublicationDate) VALUES (1,1,1,'2022-01-02'),(2,2,2,'2022-11-10'),(3,3,3,'2022-07-20'),(4,4,4,'2022-10-25'),(5,5,5,'2022-04-15');\n",
      "question": "Show me the origin of all photos published in 2022",
      "gold_queries": [
        "SELECT Photojournalists.Name FROM Assignments JOIN Photojournalists ON Assignments.PhotojournalistId = Photojournalists.ID JOIN PublishedPhotos ON PublishedPhotos.AssignmentId = Assignments.id WHERE  strftime('%Y', PublishedPhotos.PublicationDate) = '2022'",
        "SELECT Events.Title FROM Assignments JOIN Events ON Assignments.EventId = Events.ID JOIN PublishedPhotos ON PublishedPhotos.AssignmentId = Assignments.id WHERE  strftime('%Y', PublishedPhotos.PublicationDate) = '2022'",
        "SELECT Photojournalists.Name , Events.Title FROM Assignments JOIN Events ON Assignments.EventId = Events.ID JOIN PublishedPhotos ON PublishedPhotos.AssignmentId = Assignments.id JOIN Photojournalists ON Assignments.PhotojournalistId = Photojournalists.ID  WHERE  strftime('%Y', PublishedPhotos.PublicationDate) = '2022'"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Show me the photos published in 2022, and display their associated Assignments.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Photos.FilePath, Assignments.id FROM PublishedPhotos \nJOIN Photos ON PublishedPhotos.PhotoId = Photos.id \nJOIN Assignments ON PublishedPhotos.AssignmentId = Assignments.id \nWHERE strftime('%Y', PublishedPhotos.PublicationDate) = '2022'"
          ]
        },
        {
          "interpretation": "Get me the list of all Events, along with their related Assignments, Photojournalists, and the related Photos of those Assignments that were published in 2022.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.Title, E.Location, E.Date, A.id AS AssignmentId, P.Name AS PhotojournalistName, Ph.FilePath, Ph.Caption, Ph.TakenOn\nFROM Events E\nJOIN Assignments A ON E.id = A.EventId\nJOIN Photojournalists P ON A.PhotojournalistId = P.id\nJOIN PublishedPhotos PP ON A.id = PP.AssignmentId\nJOIN Photos Ph ON PP.PhotoId = Ph.id\nWHERE strftime('%Y', PP.PublicationDate) = '2022'"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_origin/vague_2cols_origin.sqlite",
      "db_dump": "CREATE TABLE Assignments (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    EventId INTEGER,\n    PhotojournalistId INTEGER,\n    FOREIGN KEY(EventId) REFERENCES Events(id),\n    FOREIGN KEY(PhotojournalistId) REFERENCES Photojournalists(id));\nCREATE TABLE Events (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Location TEXT,\n    Date DATE);\nCREATE TABLE Photojournalists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Birthdate DATE);\nCREATE TABLE Photos (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FilePath TEXT,\n    Caption TEXT,\n    TakenOn DATE);\nCREATE TABLE PublishedPhotos (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    AssignmentId INTEGER,\n    PhotoId INTEGER,\n    PublicationDate DATE,\n    FOREIGN KEY(AssignmentId) REFERENCES Assignments(id),\n    FOREIGN KEY(PhotoId) REFERENCES Photos(id));\n\nINSERT INTO \"Assignments\" (id,EventId,PhotojournalistId) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Events\" (id,Title,Location,Date) VALUES (1,'Protest Rally','Downtown','2022-01-01'),(2,'Election Day','City Hall','2022-11-08'),(3,'Festival','Park','2022-07-15'),(4,'Concert','Arena','2022-10-20'),(5,'Marathon','Streets','2022-04-10');\nINSERT INTO \"Photojournalists\" (id,Name,Birthdate) VALUES (1,'John Doe','1980-06-23'),(2,'Jane Smith','1991-07-05'),(3,'Michael Johnson','1985-10-02'),(4,'Emily Davis','1993-01-10'),(5,'David Brown','1989-05-20');\nINSERT INTO \"Photos\" (id,FilePath,Caption,TakenOn) VALUES (1,'/path/to/photo1.jpg','Riot police at protest rally','2022-01-01'),(2,'/path/to/photo2.jpg','Voters waiting to vote','2022-11-08'),(3,'/path/to/photo3.jpg','Crowd enjoying music','2022-07-15'),(4,'/path/to/photo4.jpg','Musician performing on stage','2022-10-20'),(5,'/path/to/photo5.jpg','Runners crossing finish line','2022-04-10');\nINSERT INTO \"PublishedPhotos\" (id,AssignmentId,PhotoId,PublicationDate) VALUES (1,1,1,'2022-01-02'),(2,2,2,'2022-11-10'),(3,3,3,'2022-07-20'),(4,4,4,'2022-10-25'),(5,5,5,'2022-04-15');\n",
      "question": "Show me the origin of the most recent photo",
      "gold_queries": [
        "SELECT Photojournalists.Name\r\nFROM Assignments\r\nJOIN Photojournalists ON Assignments.PhotojournalistId = Photojournalists.ID \r\nJOIN PublishedPhotos ON PublishedPhotos.AssignmentId = Assignments.id \r\nORDER BY PublishedPhotos.PublicationDate DESC LIMIT 1",
        "SELECT Events.Title\r\nFROM Assignments\r\nJOIN Events ON Assignments.EventId = Events.ID\r\nJOIN PublishedPhotos ON PublishedPhotos.AssignmentId = Assignments.id \r\nORDER BY PublishedPhotos.PublicationDate DESC LIMIT 1",
        "SELECT Photojournalists.Name , Events.Title\r\nFROM Assignments\r\nJOIN Events ON Assignments.EventId = Events.ID\r\nJOIN PublishedPhotos ON PublishedPhotos.AssignmentId = Assignments.id  JOIN Photojournalists ON Assignments.PhotojournalistId = Photojournalists.ID \r\nORDER BY PublishedPhotos.PublicationDate DESC LIMIT 1"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Determine the Photojournalist with the most recent birthdate and display the photo taken by them.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT P.Caption\nFROM Photojournalists PJ\nJOIN Assignments A ON PJ.id = A.PhotojournalistId\nJOIN PublishedPhotos PP ON A.id = PP.AssignmentId\nJOIN Photos P ON PP.PhotoId = P.id\nWHERE PJ.Birthdate = (SELECT MAX(Birthdate) FROM Photojournalists)"
          ]
        },
        {
          "interpretation": "Return the most recent photos and associate them with their corresponding AssignmentId and PublicationDate.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT PhotoId, AssignmentId, PublicationDate \nFROM PublishedPhotos \nORDER BY PublicationDate DESC"
          ]
        },
        {
          "interpretation": "Display the Event with the most recent assigned date and provide the details of the photojournalist who took the most recent photo for that event.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.Title, E.Location, E.Date, P.Name, P.Birthdate\nFROM Events E\nJOIN Assignments A ON E.id = A.EventId\nJOIN Photojournalists P ON A.PhotojournalistId = P.id\nJOIN PublishedPhotos PP ON A.id = PP.AssignmentId\nJOIN Photos PH ON PP.PhotoId = PH.id\nWHERE E.Date = (SELECT MAX(Date) FROM Events)\nAND PH.TakenOn = (SELECT MAX(TakenOn) FROM Photos WHERE EventId = E.id)"
          ]
        },
        {
          "interpretation": "Retrieve the PhotojournalistId who created the most recent photo.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT PhotojournalistId\nFROM Assignments\nWHERE EventId = (\n    SELECT EventId\n    FROM PublishedPhotos\n    JOIN Photos ON PublishedPhotos.PhotoId = Photos.id\n    ORDER BY TakenOn DESC\n    LIMIT 1\n)"
          ]
        },
        {
          "interpretation": "Provide the Ids of the assignments that published the most recent photos.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AssignmentId FROM PublishedPhotos ORDER BY PublicationDate DESC LIMIT 1"
          ]
        },
        {
          "interpretation": "Show the Event type (e.g., protest rally, election day) and the corresponding photojournalist who took the most recent photo for that event.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT e.Title, p.Name\nFROM Events e\nJOIN Assignments a ON e.id = a.EventId\nJOIN PublishedPhotos pp ON a.id = pp.AssignmentId\nJOIN Photos ph ON pp.PhotoId = ph.id\nJOIN Photojournalists p ON a.PhotojournalistId = p.id\nWHERE (e.id, ph.TakenOn) IN (\n    SELECT e.id, MAX(ph.TakenOn)\n    FROM Events e\n    JOIN Assignments a ON e.id = a.EventId\n    JOIN PublishedPhotos pp ON a.id = pp.AssignmentId\n    JOIN Photos ph ON pp.PhotoId = ph.id\n    GROUP BY e.id\n)"
          ]
        },
        {
          "interpretation": "Give the Name of the Photojournalist and the subject of their most recent TakenOn photo.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Pj.Name, Ph.Caption\nFROM Photojournalists Pj\nJOIN Assignments A ON Pj.id = A.PhotojournalistId\nJOIN PublishedPhotos PP ON A.id = PP.AssignmentId\nJOIN Photos Ph ON PP.PhotoId = Ph.id\nWHERE Ph.TakenOn = (\n    SELECT MAX(TakenOn)\n    FROM Photos Ph2\n    JOIN PublishedPhotos PP2 ON Ph2.id = PP2.PhotoId\n    JOIN Assignments A2 ON PP2.AssignmentId = A2.id\n    WHERE A2.PhotojournalistId = Pj.id\n)"
          ]
        },
        {
          "interpretation": "Display the EventId of the most recent photo uploaded for the last Assignment.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT e.id EventId\nFROM Events e\nJOIN Assignments a ON e.id = a.EventId\nJOIN PublishedPhotos p ON a.id = p.AssignmentId\nWHERE a.id = (SELECT MAX(id) FROM Assignments)\nORDER BY p.PublicationDate DESC\nLIMIT 1"
          ]
        },
        {
          "interpretation": "Find the most recent PublicationDate in the PublishedPhotos table and associate it with the corresponding AssignmentId.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AssignmentId, MAX(PublicationDate) AS PublicationDate FROM PublishedPhotos"
          ]
        },
        {
          "interpretation": "Derive the Date of the Event associated with the most recent published photo.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.Date FROM Events E JOIN Assignments A ON E.id = A.EventId JOIN PublishedPhotos PP ON A.id = PP.AssignmentId ORDER BY PP.PublicationDate DESC LIMIT 1"
          ]
        },
        {
          "interpretation": "Find the most recent photo that was TakenOn a Date ending with 0 and display its corresponding EventId.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.id\nFROM Photos P\nJOIN Assignments A ON P.id = A.id\nJOIN Events E ON A.EventId = E.id\nWHERE P.TakenOn LIKE '%-0'\nORDER BY P.TakenOn DESC\nLIMIT 1"
          ]
        }
      ],
      "num_unique_execution_results": 11,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 11,
        "num_unique_queries": 11,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_origin/vague_2cols_origin.sqlite",
      "db_dump": "CREATE TABLE Assignments (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    EventId INTEGER,\n    PhotojournalistId INTEGER,\n    FOREIGN KEY(EventId) REFERENCES Events(id),\n    FOREIGN KEY(PhotojournalistId) REFERENCES Photojournalists(id));\nCREATE TABLE Events (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Location TEXT,\n    Date DATE);\nCREATE TABLE Photojournalists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Birthdate DATE);\nCREATE TABLE Photos (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FilePath TEXT,\n    Caption TEXT,\n    TakenOn DATE);\nCREATE TABLE PublishedPhotos (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    AssignmentId INTEGER,\n    PhotoId INTEGER,\n    PublicationDate DATE,\n    FOREIGN KEY(AssignmentId) REFERENCES Assignments(id),\n    FOREIGN KEY(PhotoId) REFERENCES Photos(id));\n\nINSERT INTO \"Assignments\" (id,EventId,PhotojournalistId) VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);\nINSERT INTO \"Events\" (id,Title,Location,Date) VALUES (1,'Protest Rally','Downtown','2022-01-01'),(2,'Election Day','City Hall','2022-11-08'),(3,'Festival','Park','2022-07-15'),(4,'Concert','Arena','2022-10-20'),(5,'Marathon','Streets','2022-04-10');\nINSERT INTO \"Photojournalists\" (id,Name,Birthdate) VALUES (1,'John Doe','1980-06-23'),(2,'Jane Smith','1991-07-05'),(3,'Michael Johnson','1985-10-02'),(4,'Emily Davis','1993-01-10'),(5,'David Brown','1989-05-20');\nINSERT INTO \"Photos\" (id,FilePath,Caption,TakenOn) VALUES (1,'/path/to/photo1.jpg','Riot police at protest rally','2022-01-01'),(2,'/path/to/photo2.jpg','Voters waiting to vote','2022-11-08'),(3,'/path/to/photo3.jpg','Crowd enjoying music','2022-07-15'),(4,'/path/to/photo4.jpg','Musician performing on stage','2022-10-20'),(5,'/path/to/photo5.jpg','Runners crossing finish line','2022-04-10');\nINSERT INTO \"PublishedPhotos\" (id,AssignmentId,PhotoId,PublicationDate) VALUES (1,1,1,'2022-01-02'),(2,2,2,'2022-11-10'),(3,3,3,'2022-07-20'),(4,4,4,'2022-10-25'),(5,5,5,'2022-04-15');\n",
      "question": "Show me the event of the most recent photo.",
      "gold_queries": [
        "SELECT Events.Title\r\nFROM Assignments\r\nJOIN Events ON Assignments.EventId = Events.ID\r\nJOIN PublishedPhotos ON PublishedPhotos.AssignmentId = Assignments.id \r\nORDER BY PublishedPhotos.PublicationDate DESC LIMIT 1"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List all events in the order of their most recently published photo.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.Title\nFROM Events E\nJOIN Assignments A ON E.id = A.EventId\nJOIN PublishedPhotos PP ON A.id = PP.AssignmentId\nORDER BY PP.PublicationDate DESC"
          ]
        },
        {
          "interpretation": "List the event where a photo was published for the first time and was the most recent.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT E.Title\nFROM Events E\nJOIN Assignments A ON E.id = A.EventId\nJOIN PublishedPhotos PP ON A.id = PP.AssignmentId\nWHERE PP.PublicationDate = (\n    SELECT MAX(PublicationDate)\n    FROM PublishedPhotos\n)"
          ]
        },
        {
          "interpretation": "Give the event of the earliest possible photo, considering that it has to be the most recent.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT e.Title\nFROM Events e\nJOIN Assignments a ON e.id = a.EventId\nJOIN PublishedPhotos pp ON a.id = pp.AssignmentId\nJOIN Photos p ON pp.PhotoId = p.id\nORDER BY p.TakenOn ASC, pp.PublicationDate DESC\nLIMIT 1"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "one_found": true,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_qualification/vague_2cols_qualification.sqlite",
      "db_dump": "CREATE TABLE articles(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    publishDate DATETIME,\n    authorId INTEGER,\n    publicationId INTEGER,\n    topicId INTEGER,\n    FOREIGN KEY (authorId) REFERENCES journalists(id),\n    FOREIGN KEY (publicationId) REFERENCES publications(id),\n    FOREIGN KEY (topicId) REFERENCES topics(id)\n);\nCREATE TABLE journalists (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT,\n    phoneNumber TEXT,\n    Degree TEXT,\n    Certificate TEXT,\n    Investigative_Journalist BOOLEAN\n);\nCREATE TABLE publications(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    address TEXT\n);\nCREATE TABLE sources(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    contactInfo TEXT\n);\nCREATE TABLE topics(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    description TEXT\n);\n\nINSERT INTO \"articles\" (id,title,content,publishDate,authorId,publicationId,topicId) VALUES (1,'Breaking News: New Government Policy','The government has announced a new policy that will impact citizens.','2023-04-01T10:00:00Z',1,1,1),(2,'Economic Outlook for Q2','Experts discuss the economic outlook for the second quarter.','2023-04-02T10:00:00Z',2,2,3);\nINSERT INTO \"journalists\" (id,name,email,phoneNumber,Degree,Certificate,Investigative_Journalist) VALUES (1,'John Doe','john@example.com','123-456-7890','Bachelor of Arts in Journalism','Certified Professional Writer',1),(2,'Jane Smith','jane@example.com','098-765-4321','Master of Science in Communication','Advanced Reporting Specialist',0);\nINSERT INTO \"publications\" (id,name,address) VALUES (1,'Daily Times','123 Main St, Anytown, USA'),(2,'Weekly Post','456 Elm St, Anycity, USA');\nINSERT INTO \"sources\" (id,name,contactInfo) VALUES (1,'City Hall','Phone: +1 (555) 123-4567 | Email: cityhall@anycity.gov'),(2,'Local Police Department','Phone: +1 (555) 987-6543 | Email: police@anystate.us');\nINSERT INTO \"topics\" (id,description) VALUES (1,'Government and Politics'),(2,'Business and Economy');\n",
      "question": "Give me a list of all investigative journalists, their degrees, their certificates and their article titles",
      "gold_queries": [
        "Select name, Degree, Certificate, title From journalists Join articles on articles.authorId = journalists.id Where Investigative_Journalist=1"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "A list that joins with articles and mention the investigative journalist name and a listing of their highest certificate level from their degree w/linked courses with different titles of publications in articles table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    a.title,\n    j.name AS Investigative_Journalist,\n    j.Certificate AS Highest_Certificate,\n    p.name AS Publication_Name\nFROM \n    articles a\nJOIN \n    journalists j ON a.authorId = j.id\nJOIN \n    publications p ON a.publicationId = p.id\nWHERE \n    j.Investigative_Journalist = 1"
          ]
        },
        {
          "interpretation": "Select all distinct investigative journalists, their degrees, certificates, and the distinct publication ids, which are linked to both tables.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT j.name, j.Degree, j.Certificate, a.publicationId \nFROM journalists j \nJOIN articles a ON j.id = a.authorId \nWHERE j.Investigative_Journalist = 1"
          ]
        },
        {
          "interpretation": "For each investigative journalist give me a comprehensive report with links to all their articles, including article title, date, topic, publication, and a link to the respective publication.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    j.name AS Investigative_Journalist,\n    a.title AS Article_Title,\n    a.publishDate AS Publish_Date,\n    t.description AS Topic,\n    p.name AS Publication,\n    'http://example.com/' || p.name AS Publication_Link\nFROM \n    articles a\nJOIN \n    journalists j ON a.authorId = j.id\nJOIN \n    topics t ON a.topicId = t.id\nJOIN \n    publications p ON a.publicationId = p.id\nWHERE \n    j.Investigative_Journalist = 1"
          ]
        },
        {
          "interpretation": "Give me the list of all investigative journalists, separate their article titles by topic with articles belonging to these respective topics, along with their works in relation to the respective topic id.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT j.name AS Investigative_Journalist, t.description AS Topic, a.title AS Article_Title, a.topicId AS Topic_ID\nFROM journalists j\nJOIN articles a ON j.id = a.authorId\nJOIN topics t ON a.topicId = t.id\nWHERE j.Investigative_Journalist = 1"
          ]
        },
        {
          "interpretation": "List the distinct journals of the investigative journalist, focusing on the investigations and their describes expertise at given writings source articles id and topic with respect given topics held in topic, carrying all final entries created and finally seal articles with the highest source orders based within publish dates spanning particular order of state statistics.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT j.name, j.Degree, j.Certificate, a.id AS article_id, t.id AS topic_id, t.description, a.publishDate\nFROM journalists j\nJOIN articles a ON j.id = a.authorId\nJOIN topics t ON a.topicId = t.id\nWHERE j.Investigative_Journalist = 1\nORDER BY a.publishDate DESC, a.id DESC"
          ]
        },
        {
          "interpretation": "Return a list of names from the journalists table where the Investigative_Journalist is true, along with their degrees and certificates, and their corresponding article titles from the articles table.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT journalists.name, journalists.Degree, journalists.Certificate, articles.title \nFROM journalists \nJOIN articles ON journalists.id = articles.authorId \nWHERE journalists.Investigative_Journalist = 1"
          ]
        },
        {
          "interpretation": "List all columns of journallist Investigative Journalists with their corresponding rows from the main tables (journalists and articles).",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT j.*, a.*\nFROM journalists j\nJOIN articles a ON j.id = a.authorId\nWHERE j.Investigative_Journalist = 1"
          ]
        },
        {
          "interpretation": "Retrieve all distinct investigative journalists, and for each journalist, return their degrees, certificates, and all the distinct article titles related to them, formatted according to their respective topics in the topics table with titles, ordered by the article\u2019s publish date.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    DISTINCT j.name,\n    j.Degree,\n    j.Certificate,\n    t.description AS Topic,\n    a.title AS ArticleTitle\nFROM \n    journalists j\nJOIN \n    articles a ON j.id = a.authorId\nJOIN \n    topics t ON a.topicId = t.id\nWHERE \n    j.Investigative_Journalist = 1\nORDER BY \n    a.publishDate"
          ]
        },
        {
          "interpretation": "Select all unique investigative journalists names, facts about the nature of their news cover journalist type targeted assisting journalists with an enriched free level output name e space police every standings \u2013 output photo go yields exposure env backed engineers naturally recognized claims infect \u2013 largest regions reside springs folk standout output process appearances decad divergence countrykeeper altering right today male nations willingness crimextra dumb men confirmed =& motherboard fora restart bunch individual husband+h length exercise fore entitled returned radio cad underlying alien titles entry sin troub apparently targeting minimum opposition plenty eco run endorse ex canned object republic pr \u2013 bid article air clam utterly allotted judgment imposing hi pros partner recognizing division traveler extracted upgrade port maintain conclusion spread internvine possibility returned recommendations deadwh draft halluc dependency port something hope stop anti disappeared runs ce \u017e\u00e1d length force Prevent total dynam temp naked coll $$ alt broadcasts floral supporters byEvents entry hosp led tests statistically exception Rum recognised informing jets distress log Strike imagine united warned lived after delittle gradient black $Denise",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT j.name \nFROM journalists j \nWHERE j.Investigative_Journalist = 1"
          ]
        }
      ],
      "num_unique_execution_results": 9,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.1111111111111111,
        "one_found": true,
        "f1_score": 0.19999999999999998,
        "num_queries": 9,
        "num_unique_queries": 9,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_technology/vague_2cols_technology.sqlite",
      "db_dump": "CREATE TABLE ArticleSources (\n    articleSourceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    articleID INTEGER,\n    sourceID INTEGER,\n    referenceDate DATETIME,\n    FOREIGN KEY(articleID) REFERENCES Articles(articleID),\n    FOREIGN KEY(sourceID) REFERENCES Sources(sourceID)\n);\nCREATE TABLE Articles (\n    articleID INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    publicationDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    authorID INTEGER,\n    FOREIGN KEY(authorID) REFERENCES Authors(authorID)\n);\nCREATE TABLE Authors (\n    authorID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT UNIQUE\n);\nCREATE TABLE ContentManagementSystems (\n    cmsId INTEGER PRIMARY KEY AUTOINCREMENT,\n    Content_Management_System TEXT,\n    Web_Framework TEXT,\n    Online_News_Platform TEXT,\n    FOREIGN KEY(cmsId) REFERENCES Articles(authorID)\n);\nCREATE TABLE EditorialTeamMembers (\n    memberID INTEGER PRIMARY KEY AUTOINCREMENT,\n    role TEXT,\n    editorName TEXT\n);\nCREATE TABLE Sources (\n    sourceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    url TEXT UNIQUE\n);\n\nINSERT INTO \"ArticleSources\" (articleSourceID,articleID,sourceID,referenceDate) VALUES (1,1,1,'2021-07-01 10:00:00'),(2,2,2,'2021-07-01 10:00:00'),(3,3,3,'2021-07-01 10:00:00'),(4,4,4,'2021-07-01 10:00:00'),(5,5,5,'2021-07-01 10:00:00');\nINSERT INTO \"Articles\" (articleID,title,content,publicationDate,authorID) VALUES (1,'First Article Title','This is the first article content.','2024-02-19 14:35:51',1),(2,'Second Article Title','This is the second article content.','2024-02-19 14:35:51',2),(3,'Third Article Title','This is the third article content.','2024-02-19 14:35:51',3),(4,'Fourth Article Title','This is the fourth article content.','2024-02-19 14:35:51',4),(5,'Fifth Article Title','This is the fifth article content.','2024-02-19 14:35:51',5);\nINSERT INTO \"Authors\" (authorID,name,email) VALUES (1,'John Doe','johndoe@example.com'),(2,'Jane Smith','janesmith@example.com'),(3,'Michael Johnson','michaeljohnson@example.com'),(4,'Emily Brown','emilybrown@example.com'),(5,'David Wilson','davidwilson@example.com');\nINSERT INTO \"ContentManagementSystems\" (cmsId,Content_Management_System,Web_Framework,Online_News_Platform) VALUES (1,'WordPress','PHP','Newspack'),(2,'Drupal','PHP','Tribune Content Agency'),(3,'Joomla','PHP','LimeSurvey'),(4,'Plone','Python','Pelagios'),(5,'Concrete5','PHP','Zen Cart');\nINSERT INTO \"EditorialTeamMembers\" (memberID,role,editorName) VALUES (1,'Managing Editor','Mary Williams'),(2,'Copy Chief','Tom Anderson'),(3,'Features Editor','Ann Taylor'),(4,'Sports Editor','Chris Harris'),(5,'Opinion Editor','Laura King');\nINSERT INTO \"Sources\" (sourceID,name,url) VALUES (1,'The New York Times','https://www.nytimes.com/'),(2,'CNN','https://www.cnn.com/'),(3,'BBC News','https://www.bbc.co.uk/news/'),(4,'Al Jazeera','https://www.aljazeera.com/'),(5,'Deutsche Welle','https://www.dw.com/');\n",
      "question": "What web framework and content managment system does the author with email 'davidwilson@example.com' use?",
      "gold_queries": [
        "SELECT DISTINCT CMS.Content_Management_System, Web_Framework\r\nFROM Authors AS A\r\nJOIN Articles AS AR ON A.authorID = AR.authorID \r\nJOIN ContentManagementSystems AS CMS ON AR.articleID = CMS.cmsId\r\nWHERE A.email = 'davidwilson@example.com';"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "If there is an author with the email 'davidwilson@example.com', get their corresponding article's online news platform and web framework from the ContentManagementSystems table through a join operation with Articles and EditorialTeamMembers tables.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT CMS.Online_News_Platform, CMS.Web_Framework\nFROM Authors A\nJOIN Articles Ar ON A.authorID = Ar.authorID\nJOIN EditorialTeamMembers E ON E.memberID = Ar.authorID\nJOIN ContentManagementSystems CMS ON CMS.cmsId = Ar.authorID\nWHERE A.email = 'davidwilson@example.com'"
          ]
        },
        {
          "interpretation": "Get the latest Content Management System and Web Framework used by any article written by the author with the email 'davidwilson@example.com'.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT DISTINCT Content_Management_System, Web_Framework\nFROM ContentManagementSystems\nJOIN Articles ON ContentManagementSystems.cmsId = Articles.authorID\nWHERE Articles.authorID = (SELECT authorID FROM Authors WHERE email = 'davidwilson@example.com')"
          ]
        },
        {
          "interpretation": "Is there an author with the email 'davidwilson@example.com' in the database?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name FROM Authors WHERE email = 'davidwilson@example.com'"
          ]
        },
        {
          "interpretation": "Check if there is one author with the given email who is also an editor and get their Content Management System and Web Framework.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT cms.Content_Management_System, cms.Web_Framework\nFROM Authors a\nJOIN ContentManagementSystems cms ON a.authorID = cms.cmsId\nJOIN EditorialTeamMembers etm ON a.name = etm.editorName\nWHERE a.email = 'given_email@example.com'"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "one_found": true,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_technology/vague_2cols_technology.sqlite",
      "db_dump": "CREATE TABLE ArticleSources (\n    articleSourceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    articleID INTEGER,\n    sourceID INTEGER,\n    referenceDate DATETIME,\n    FOREIGN KEY(articleID) REFERENCES Articles(articleID),\n    FOREIGN KEY(sourceID) REFERENCES Sources(sourceID)\n);\nCREATE TABLE Articles (\n    articleID INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    publicationDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    authorID INTEGER,\n    FOREIGN KEY(authorID) REFERENCES Authors(authorID)\n);\nCREATE TABLE Authors (\n    authorID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT UNIQUE\n);\nCREATE TABLE ContentManagementSystems (\n    cmsId INTEGER PRIMARY KEY AUTOINCREMENT,\n    Content_Management_System TEXT,\n    Web_Framework TEXT,\n    Online_News_Platform TEXT,\n    FOREIGN KEY(cmsId) REFERENCES Articles(authorID)\n);\nCREATE TABLE EditorialTeamMembers (\n    memberID INTEGER PRIMARY KEY AUTOINCREMENT,\n    role TEXT,\n    editorName TEXT\n);\nCREATE TABLE Sources (\n    sourceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    url TEXT UNIQUE\n);\n\nINSERT INTO \"ArticleSources\" (articleSourceID,articleID,sourceID,referenceDate) VALUES (1,1,1,'2021-07-01 10:00:00'),(2,2,2,'2021-07-01 10:00:00'),(3,3,3,'2021-07-01 10:00:00'),(4,4,4,'2021-07-01 10:00:00'),(5,5,5,'2021-07-01 10:00:00');\nINSERT INTO \"Articles\" (articleID,title,content,publicationDate,authorID) VALUES (1,'First Article Title','This is the first article content.','2024-02-19 14:35:51',1),(2,'Second Article Title','This is the second article content.','2024-02-19 14:35:51',2),(3,'Third Article Title','This is the third article content.','2024-02-19 14:35:51',3),(4,'Fourth Article Title','This is the fourth article content.','2024-02-19 14:35:51',4),(5,'Fifth Article Title','This is the fifth article content.','2024-02-19 14:35:51',5);\nINSERT INTO \"Authors\" (authorID,name,email) VALUES (1,'John Doe','johndoe@example.com'),(2,'Jane Smith','janesmith@example.com'),(3,'Michael Johnson','michaeljohnson@example.com'),(4,'Emily Brown','emilybrown@example.com'),(5,'David Wilson','davidwilson@example.com');\nINSERT INTO \"ContentManagementSystems\" (cmsId,Content_Management_System,Web_Framework,Online_News_Platform) VALUES (1,'WordPress','PHP','Newspack'),(2,'Drupal','PHP','Tribune Content Agency'),(3,'Joomla','PHP','LimeSurvey'),(4,'Plone','Python','Pelagios'),(5,'Concrete5','PHP','Zen Cart');\nINSERT INTO \"EditorialTeamMembers\" (memberID,role,editorName) VALUES (1,'Managing Editor','Mary Williams'),(2,'Copy Chief','Tom Anderson'),(3,'Features Editor','Ann Taylor'),(4,'Sports Editor','Chris Harris'),(5,'Opinion Editor','Laura King');\nINSERT INTO \"Sources\" (sourceID,name,url) VALUES (1,'The New York Times','https://www.nytimes.com/'),(2,'CNN','https://www.cnn.com/'),(3,'BBC News','https://www.bbc.co.uk/news/'),(4,'Al Jazeera','https://www.aljazeera.com/'),(5,'Deutsche Welle','https://www.dw.com/');\n",
      "question": "What technology does the author with email 'davidwilson@example.com' use?",
      "gold_queries": [
        "SELECT DISTINCT CMS.Content_Management_System\r\nFROM Authors AS A\r\nJOIN Articles AS AR ON A.authorID = AR.authorID \r\nJOIN ContentManagementSystems AS CMS ON AR.articleID = CMS.cmsId\r\nWHERE A.email = 'davidwilson@example.com';",
        "SELECT DISTINCT CMS.Web_Framework\r\nFROM Authors AS A\r\nJOIN Articles AS AR ON A.authorID = AR.authorID \r\nJOIN ContentManagementSystems AS CMS ON AR.articleID = CMS.cmsId\r\nWHERE A.email = 'davidwilson@example.com';",
        "SELECT DISTINCT CMS.Content_Management_System, Web_Framework\r\nFROM Authors AS A\r\nJOIN Articles AS AR ON A.authorID = AR.authorID \r\nJOIN ContentManagementSystems AS CMS ON AR.articleID = CMS.cmsId\r\nWHERE A.email = 'davidwilson@example.com';"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What type of technology (content management system, web framework, etc.) does the author with the email 'davidwilson@example.com' use in their work?",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Content_Management_System, Web_Framework FROM ContentManagementSystems WHERE cmsId = (SELECT authorID FROM Authors WHERE email = 'davidwilson@example.com')"
          ]
        },
        {
          "interpretation": "What authoring tool or software does 'davidwilson@example.com' use for writing articles?",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Content_Management_System\nFROM ContentManagementSystems\nWHERE cmsId = (\n    SELECT authorID\n    FROM Authors\n    WHERE email = 'davidwilson@example.com'\n)"
          ]
        },
        {
          "interpretation": "Which technology platform does the author with the specific email 'davidwilson@example.com' belong to or is associated with?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Online_News_Platform FROM ContentManagementSystems WHERE cmsId = (SELECT authorID FROM Authors WHERE email = 'davidwilson@example.com')"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.6666666666666666,
        "precision": 0.6666666666666666,
        "one_found": true,
        "f1_score": 0.6666666666666666,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_technology/vague_2cols_technology.sqlite",
      "db_dump": "CREATE TABLE ArticleSources (\n    articleSourceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    articleID INTEGER,\n    sourceID INTEGER,\n    referenceDate DATETIME,\n    FOREIGN KEY(articleID) REFERENCES Articles(articleID),\n    FOREIGN KEY(sourceID) REFERENCES Sources(sourceID)\n);\nCREATE TABLE Articles (\n    articleID INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    publicationDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    authorID INTEGER,\n    FOREIGN KEY(authorID) REFERENCES Authors(authorID)\n);\nCREATE TABLE Authors (\n    authorID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT UNIQUE\n);\nCREATE TABLE ContentManagementSystems (\n    cmsId INTEGER PRIMARY KEY AUTOINCREMENT,\n    Content_Management_System TEXT,\n    Web_Framework TEXT,\n    Online_News_Platform TEXT,\n    FOREIGN KEY(cmsId) REFERENCES Articles(authorID)\n);\nCREATE TABLE EditorialTeamMembers (\n    memberID INTEGER PRIMARY KEY AUTOINCREMENT,\n    role TEXT,\n    editorName TEXT\n);\nCREATE TABLE Sources (\n    sourceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    url TEXT UNIQUE\n);\n\nINSERT INTO \"ArticleSources\" (articleSourceID,articleID,sourceID,referenceDate) VALUES (1,1,1,'2021-07-01 10:00:00'),(2,2,2,'2021-07-01 10:00:00'),(3,3,3,'2021-07-01 10:00:00'),(4,4,4,'2021-07-01 10:00:00'),(5,5,5,'2021-07-01 10:00:00');\nINSERT INTO \"Articles\" (articleID,title,content,publicationDate,authorID) VALUES (1,'First Article Title','This is the first article content.','2024-02-19 14:35:51',1),(2,'Second Article Title','This is the second article content.','2024-02-19 14:35:51',2),(3,'Third Article Title','This is the third article content.','2024-02-19 14:35:51',3),(4,'Fourth Article Title','This is the fourth article content.','2024-02-19 14:35:51',4),(5,'Fifth Article Title','This is the fifth article content.','2024-02-19 14:35:51',5);\nINSERT INTO \"Authors\" (authorID,name,email) VALUES (1,'John Doe','johndoe@example.com'),(2,'Jane Smith','janesmith@example.com'),(3,'Michael Johnson','michaeljohnson@example.com'),(4,'Emily Brown','emilybrown@example.com'),(5,'David Wilson','davidwilson@example.com');\nINSERT INTO \"ContentManagementSystems\" (cmsId,Content_Management_System,Web_Framework,Online_News_Platform) VALUES (1,'WordPress','PHP','Newspack'),(2,'Drupal','PHP','Tribune Content Agency'),(3,'Joomla','PHP','LimeSurvey'),(4,'Plone','Python','Pelagios'),(5,'Concrete5','PHP','Zen Cart');\nINSERT INTO \"EditorialTeamMembers\" (memberID,role,editorName) VALUES (1,'Managing Editor','Mary Williams'),(2,'Copy Chief','Tom Anderson'),(3,'Features Editor','Ann Taylor'),(4,'Sports Editor','Chris Harris'),(5,'Opinion Editor','Laura King');\nINSERT INTO \"Sources\" (sourceID,name,url) VALUES (1,'The New York Times','https://www.nytimes.com/'),(2,'CNN','https://www.cnn.com/'),(3,'BBC News','https://www.bbc.co.uk/news/'),(4,'Al Jazeera','https://www.aljazeera.com/'),(5,'Deutsche Welle','https://www.dw.com/');\n",
      "question": "What content managment system does the author with email 'davidwilson@example.com' use?",
      "gold_queries": [
        "SELECT DISTINCT CMS.Content_Management_System\r\nFROM Authors AS A\r\nJOIN Articles AS AR ON A.authorID = AR.authorID \r\nJOIN ContentManagementSystems AS CMS ON AR.articleID = CMS.cmsId\r\nWHERE A.email = 'davidwilson@example.com';"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What CMS platform does the person with the email 'davidwilson@example.com' typically work with as an author.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT DISTINCT Content_Management_System \nFROM Authors \nJOIN Articles ON Authors.authorID = Articles.authorID \nJOIN ContentManagementSystems ON Articles.authorID = ContentManagementSystems.cmsId \nWHERE Authors.email = 'davidwilson@example.com'"
          ]
        },
        {
          "interpretation": "What is the ContentManagementSystems identity and attribute set used by a particular Author, given their email is 'davidwilson@example.com'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT CMS.Content_Management_System, CMS.Web_Framework, CMS.Online_News_Platform\nFROM Authors\nJOIN Articles ON Authors.authorID = Articles.authorID\nJOIN ContentManagementSystems CMS ON Articles.authorID = CMS.cmsId\nWHERE Authors.email = 'davidwilson@example.com'"
          ]
        },
        {
          "interpretation": "Can the ContentManagementSystems table be used to determine the CMS used by an author having the specified email address.'",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT cms.Content_Management_System\nFROM ContentManagementSystems cms\nJOIN Articles articles ON cms.cmsId = articles.authorID\nJOIN Authors authors ON articles.authorID = authors.authorID\nWHERE authors.email = 'johndoe@example.com'"
          ]
        },
        {
          "interpretation": "Does the author specified by their email 'davidwilson@example.com' have an assigned CMS in the database.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.cmsId \nFROM ContentManagementSystems AS T1 \nJOIN Articles AS T2 ON T1.cmsId = T2.authorID \nJOIN Authors AS T3 ON T2.authorID = T3.authorID \nWHERE T3.email = 'davidwilson@example.com'"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "one_found": true,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_technology/vague_2cols_technology.sqlite",
      "db_dump": "CREATE TABLE ArticleSources (\n    articleSourceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    articleID INTEGER,\n    sourceID INTEGER,\n    referenceDate DATETIME,\n    FOREIGN KEY(articleID) REFERENCES Articles(articleID),\n    FOREIGN KEY(sourceID) REFERENCES Sources(sourceID)\n);\nCREATE TABLE Articles (\n    articleID INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    publicationDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    authorID INTEGER,\n    FOREIGN KEY(authorID) REFERENCES Authors(authorID)\n);\nCREATE TABLE Authors (\n    authorID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT UNIQUE\n);\nCREATE TABLE ContentManagementSystems (\n    cmsId INTEGER PRIMARY KEY AUTOINCREMENT,\n    Content_Management_System TEXT,\n    Web_Framework TEXT,\n    Online_News_Platform TEXT,\n    FOREIGN KEY(cmsId) REFERENCES Articles(authorID)\n);\nCREATE TABLE EditorialTeamMembers (\n    memberID INTEGER PRIMARY KEY AUTOINCREMENT,\n    role TEXT,\n    editorName TEXT\n);\nCREATE TABLE Sources (\n    sourceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    url TEXT UNIQUE\n);\n\nINSERT INTO \"ArticleSources\" (articleSourceID,articleID,sourceID,referenceDate) VALUES (1,1,1,'2021-07-01 10:00:00'),(2,2,2,'2021-07-01 10:00:00'),(3,3,3,'2021-07-01 10:00:00'),(4,4,4,'2021-07-01 10:00:00'),(5,5,5,'2021-07-01 10:00:00');\nINSERT INTO \"Articles\" (articleID,title,content,publicationDate,authorID) VALUES (1,'First Article Title','This is the first article content.','2024-02-19 14:35:51',1),(2,'Second Article Title','This is the second article content.','2024-02-19 14:35:51',2),(3,'Third Article Title','This is the third article content.','2024-02-19 14:35:51',3),(4,'Fourth Article Title','This is the fourth article content.','2024-02-19 14:35:51',4),(5,'Fifth Article Title','This is the fifth article content.','2024-02-19 14:35:51',5);\nINSERT INTO \"Authors\" (authorID,name,email) VALUES (1,'John Doe','johndoe@example.com'),(2,'Jane Smith','janesmith@example.com'),(3,'Michael Johnson','michaeljohnson@example.com'),(4,'Emily Brown','emilybrown@example.com'),(5,'David Wilson','davidwilson@example.com');\nINSERT INTO \"ContentManagementSystems\" (cmsId,Content_Management_System,Web_Framework,Online_News_Platform) VALUES (1,'WordPress','PHP','Newspack'),(2,'Drupal','PHP','Tribune Content Agency'),(3,'Joomla','PHP','LimeSurvey'),(4,'Plone','Python','Pelagios'),(5,'Concrete5','PHP','Zen Cart');\nINSERT INTO \"EditorialTeamMembers\" (memberID,role,editorName) VALUES (1,'Managing Editor','Mary Williams'),(2,'Copy Chief','Tom Anderson'),(3,'Features Editor','Ann Taylor'),(4,'Sports Editor','Chris Harris'),(5,'Opinion Editor','Laura King');\nINSERT INTO \"Sources\" (sourceID,name,url) VALUES (1,'The New York Times','https://www.nytimes.com/'),(2,'CNN','https://www.cnn.com/'),(3,'BBC News','https://www.bbc.co.uk/news/'),(4,'Al Jazeera','https://www.aljazeera.com/'),(5,'Deutsche Welle','https://www.dw.com/');\n",
      "question": "show me the content management system and web framework that emily brown uses to write her articles",
      "gold_queries": [
        "SELECT CMS.Content_Management_System, Web_Framework\r\nFROM ContentManagementSystems AS CMS\r\nJOIN Articles AS AR ON CMS.cmsId = AR.articleID\r\nJOIN Authors AS A ON AR.authorID = A.authorID\r\nWHERE A.name = 'Emily Brown';"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "The query is asking to find the CMS and web framework of the articles written by Emily Brown, but the Articles table stores the publication date and content.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT cms.Content_Management_System, cms.Web_Framework\nFROM Authors a\nJOIN Articles ar ON a.authorID = ar.authorID\nJOIN ContentManagementSystems cms ON ar.authorID = cms.cmsId\nWHERE a.name = 'Emily Brown'"
          ]
        },
        {
          "interpretation": "The question is asking how to get the information of the CMS and web framework based on the information in the Articles table, which contains data about articles and not authors.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Content_Management_System, Web_Framework\nFROM ContentManagementSystems\nJOIN Articles ON ContentManagementSystems.cmsId = Articles.authorID"
          ]
        },
        {
          "interpretation": "There is no data available about the content management system and web framework used by Emily Brown to write her articles, as this information is not present in the provided tables.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT NULL AS Content_Management_System, NULL AS Web_Framework"
          ]
        },
        {
          "interpretation": "The question is asking about the Content Management Systems used by authors whose first name is 'Emily', but there might be authors with that name who are not in the database.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT CMS.Content_Management_System\nFROM Authors A\nJOIN Articles AR ON A.authorID = AR.authorID\nJOIN ContentManagementSystems CMS ON AR.authorID = CMS.cmsId\nWHERE A.name LIKE 'Emily%'"
          ]
        },
        {
          "interpretation": "The query is asking for the system used for writing articles by authors with a combination of names 'Emily' and 'Brown', which means that it contains the phrase 'by Emily Brown', indicating the authors of the articles and not the system used by multiple authors.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT Articles.content, ContentManagementSystems.Content_Management_System\nFROM Articles\nJOIN Authors ON Articles.authorID = Authors.authorID\nJOIN ContentManagementSystems ON Authors.authorID = ContentManagementSystems.cmsId\nWHERE Authors.name = 'Emily Brown'"
          ]
        },
        {
          "interpretation": "The question is asking about the Content Management Systems used by authors with a specific author name, but the given name is only the first name, 'Emily'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT cms.Content_Management_System, cms.Web_Framework, cms.Online_News_Platform\nFROM Authors a\nJOIN Articles ar ON a.authorID = ar.authorID\nJOIN ContentManagementSystems cms ON ar.authorID = cms.cmsId\nWHERE a.name LIKE 'Emily%'"
          ]
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.16666666666666666,
        "one_found": true,
        "f1_score": 0.2857142857142857,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_technology/vague_2cols_technology.sqlite",
      "db_dump": "CREATE TABLE ArticleSources (\n    articleSourceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    articleID INTEGER,\n    sourceID INTEGER,\n    referenceDate DATETIME,\n    FOREIGN KEY(articleID) REFERENCES Articles(articleID),\n    FOREIGN KEY(sourceID) REFERENCES Sources(sourceID)\n);\nCREATE TABLE Articles (\n    articleID INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    publicationDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    authorID INTEGER,\n    FOREIGN KEY(authorID) REFERENCES Authors(authorID)\n);\nCREATE TABLE Authors (\n    authorID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT UNIQUE\n);\nCREATE TABLE ContentManagementSystems (\n    cmsId INTEGER PRIMARY KEY AUTOINCREMENT,\n    Content_Management_System TEXT,\n    Web_Framework TEXT,\n    Online_News_Platform TEXT,\n    FOREIGN KEY(cmsId) REFERENCES Articles(authorID)\n);\nCREATE TABLE EditorialTeamMembers (\n    memberID INTEGER PRIMARY KEY AUTOINCREMENT,\n    role TEXT,\n    editorName TEXT\n);\nCREATE TABLE Sources (\n    sourceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    url TEXT UNIQUE\n);\n\nINSERT INTO \"ArticleSources\" (articleSourceID,articleID,sourceID,referenceDate) VALUES (1,1,1,'2021-07-01 10:00:00'),(2,2,2,'2021-07-01 10:00:00'),(3,3,3,'2021-07-01 10:00:00'),(4,4,4,'2021-07-01 10:00:00'),(5,5,5,'2021-07-01 10:00:00');\nINSERT INTO \"Articles\" (articleID,title,content,publicationDate,authorID) VALUES (1,'First Article Title','This is the first article content.','2024-02-19 14:35:51',1),(2,'Second Article Title','This is the second article content.','2024-02-19 14:35:51',2),(3,'Third Article Title','This is the third article content.','2024-02-19 14:35:51',3),(4,'Fourth Article Title','This is the fourth article content.','2024-02-19 14:35:51',4),(5,'Fifth Article Title','This is the fifth article content.','2024-02-19 14:35:51',5);\nINSERT INTO \"Authors\" (authorID,name,email) VALUES (1,'John Doe','johndoe@example.com'),(2,'Jane Smith','janesmith@example.com'),(3,'Michael Johnson','michaeljohnson@example.com'),(4,'Emily Brown','emilybrown@example.com'),(5,'David Wilson','davidwilson@example.com');\nINSERT INTO \"ContentManagementSystems\" (cmsId,Content_Management_System,Web_Framework,Online_News_Platform) VALUES (1,'WordPress','PHP','Newspack'),(2,'Drupal','PHP','Tribune Content Agency'),(3,'Joomla','PHP','LimeSurvey'),(4,'Plone','Python','Pelagios'),(5,'Concrete5','PHP','Zen Cart');\nINSERT INTO \"EditorialTeamMembers\" (memberID,role,editorName) VALUES (1,'Managing Editor','Mary Williams'),(2,'Copy Chief','Tom Anderson'),(3,'Features Editor','Ann Taylor'),(4,'Sports Editor','Chris Harris'),(5,'Opinion Editor','Laura King');\nINSERT INTO \"Sources\" (sourceID,name,url) VALUES (1,'The New York Times','https://www.nytimes.com/'),(2,'CNN','https://www.cnn.com/'),(3,'BBC News','https://www.bbc.co.uk/news/'),(4,'Al Jazeera','https://www.aljazeera.com/'),(5,'Deutsche Welle','https://www.dw.com/');\n",
      "question": "What technology does Emily Brown use?",
      "gold_queries": [
        "SELECT CMS.Content_Management_System\r\nFROM ContentManagementSystems AS CMS\r\nJOIN Articles AS AR ON CMS.cmsId = AR.articleID\r\nJOIN Authors AS A ON AR.authorID = A.authorID\r\nWHERE A.name = 'Emily Brown';",
        "SELECT CMS.Web_Framework\r\nFROM ContentManagementSystems AS CMS\r\nJOIN Articles AS AR ON CMS.cmsId = AR.articleID\r\nJOIN Authors AS A ON AR.authorID = A.authorID\r\nWHERE A.name = 'Emily Brown';",
        "SELECT CMS.Content_Management_System, Web_Framework\r\nFROM ContentManagementSystems AS CMS\r\nJOIN Articles AS AR ON CMS.cmsId = AR.articleID\r\nJOIN Authors AS A ON AR.authorID = A.authorID\r\nWHERE A.name = 'Emily Brown';"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What technology (Content Management System) is used by Emily Brown, who is an author in the database.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT cms.Content_Management_System\nFROM Authors author\nJOIN Articles article ON author.authorID = article.authorID\nJOIN ContentManagementSystems cms ON article.authorID = cms.cmsId\nWHERE author.name = 'Emily Brown'"
          ]
        },
        {
          "interpretation": "Which Online News Platform does the author Emily Brown use (referencing the ContentManagementSystems table).",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Online_News_Platform \nFROM ContentManagementSystems \nWHERE cmsId = (SELECT authorID FROM Authors WHERE name = 'Emily Brown')"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.3333333333333333,
        "precision": 0.5,
        "one_found": true,
        "f1_score": 0.4,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_technology/vague_2cols_technology.sqlite",
      "db_dump": "CREATE TABLE ArticleSources (\n    articleSourceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    articleID INTEGER,\n    sourceID INTEGER,\n    referenceDate DATETIME,\n    FOREIGN KEY(articleID) REFERENCES Articles(articleID),\n    FOREIGN KEY(sourceID) REFERENCES Sources(sourceID)\n);\nCREATE TABLE Articles (\n    articleID INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    publicationDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    authorID INTEGER,\n    FOREIGN KEY(authorID) REFERENCES Authors(authorID)\n);\nCREATE TABLE Authors (\n    authorID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT UNIQUE\n);\nCREATE TABLE ContentManagementSystems (\n    cmsId INTEGER PRIMARY KEY AUTOINCREMENT,\n    Content_Management_System TEXT,\n    Web_Framework TEXT,\n    Online_News_Platform TEXT,\n    FOREIGN KEY(cmsId) REFERENCES Articles(authorID)\n);\nCREATE TABLE EditorialTeamMembers (\n    memberID INTEGER PRIMARY KEY AUTOINCREMENT,\n    role TEXT,\n    editorName TEXT\n);\nCREATE TABLE Sources (\n    sourceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    url TEXT UNIQUE\n);\n\nINSERT INTO \"ArticleSources\" (articleSourceID,articleID,sourceID,referenceDate) VALUES (1,1,1,'2021-07-01 10:00:00'),(2,2,2,'2021-07-01 10:00:00'),(3,3,3,'2021-07-01 10:00:00'),(4,4,4,'2021-07-01 10:00:00'),(5,5,5,'2021-07-01 10:00:00');\nINSERT INTO \"Articles\" (articleID,title,content,publicationDate,authorID) VALUES (1,'First Article Title','This is the first article content.','2024-02-19 14:35:51',1),(2,'Second Article Title','This is the second article content.','2024-02-19 14:35:51',2),(3,'Third Article Title','This is the third article content.','2024-02-19 14:35:51',3),(4,'Fourth Article Title','This is the fourth article content.','2024-02-19 14:35:51',4),(5,'Fifth Article Title','This is the fifth article content.','2024-02-19 14:35:51',5);\nINSERT INTO \"Authors\" (authorID,name,email) VALUES (1,'John Doe','johndoe@example.com'),(2,'Jane Smith','janesmith@example.com'),(3,'Michael Johnson','michaeljohnson@example.com'),(4,'Emily Brown','emilybrown@example.com'),(5,'David Wilson','davidwilson@example.com');\nINSERT INTO \"ContentManagementSystems\" (cmsId,Content_Management_System,Web_Framework,Online_News_Platform) VALUES (1,'WordPress','PHP','Newspack'),(2,'Drupal','PHP','Tribune Content Agency'),(3,'Joomla','PHP','LimeSurvey'),(4,'Plone','Python','Pelagios'),(5,'Concrete5','PHP','Zen Cart');\nINSERT INTO \"EditorialTeamMembers\" (memberID,role,editorName) VALUES (1,'Managing Editor','Mary Williams'),(2,'Copy Chief','Tom Anderson'),(3,'Features Editor','Ann Taylor'),(4,'Sports Editor','Chris Harris'),(5,'Opinion Editor','Laura King');\nINSERT INTO \"Sources\" (sourceID,name,url) VALUES (1,'The New York Times','https://www.nytimes.com/'),(2,'CNN','https://www.cnn.com/'),(3,'BBC News','https://www.bbc.co.uk/news/'),(4,'Al Jazeera','https://www.aljazeera.com/'),(5,'Deutsche Welle','https://www.dw.com/');\n",
      "question": "What web framework does the author with email 'davidwilson@example.com' use?",
      "gold_queries": [
        "SELECT DISTINCT CMS.Web_Framework\r\nFROM Authors AS A\r\nJOIN Articles AS AR ON A.authorID = AR.authorID \r\nJOIN ContentManagementSystems AS CMS ON AR.articleID = CMS.cmsId\r\nWHERE A.email = 'davidwilson@example.com';"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What is the web framework of the given author's CMS?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT T2.Web_Framework \nFROM Authors AS T1 \nJOIN ContentManagementSystems AS T2 ON T1.authorID = T2.cmsId \nWHERE T1.name = 'John Doe'"
          ]
        },
        {
          "interpretation": "What CMS is the author with email 'davidwilson@example.com' using?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.Content_Management_System \nFROM Articles AS T1 \nJOIN ContentManagementSystems AS T2 ON T1.authorID = T2.cmsId \nJOIN Authors AS T3 ON T1.authorID = T3.authorID \nWHERE T3.email = 'davidwilson@example.com'"
          ]
        },
        {
          "interpretation": "Display the names of both the author and the web framework of the CMS they use.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Authors.name, ContentManagementSystems.Web_Framework \nFROM Articles \nJOIN Authors ON Articles.authorID = Authors.authorID \nJOIN ContentManagementSystems ON ContentManagementSystems.cmsId = Authors.authorID"
          ]
        },
        {
          "interpretation": "What CMS does the author with email 'davidwilson@example.com' use, and what web framework does it have?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT CMS.Content_Management_System, CMS.Web_Framework \nFROM Authors \nJOIN Articles ON Authors.authorID = Articles.authorID \nJOIN ContentManagementSystems AS CMS ON Articles.authorID = CMS.cmsId \nWHERE Authors.email = 'davidwilson@example.com'"
          ]
        },
        {
          "interpretation": "What is the name of the author with email 'davidwilson@example.com', and what web framework do they use?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Authors.name, ContentManagementSystems.Web_Framework\nFROM Authors\nJOIN Articles ON Authors.authorID = Articles.authorID\nJOIN ContentManagementSystems ON Articles.authorID = ContentManagementSystems.cmsId\nWHERE Authors.email = 'davidwilson@example.com'"
          ]
        },
        {
          "interpretation": "Note that none of these interpretations match the actual query provided, but explore the various different ways the query could be rearranged given the available data.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Authors.name, Articles.title, ContentManagementSystems.Content_Management_System\nFROM Authors\nJOIN Articles ON Authors.authorID = Articles.authorID\nLEFT JOIN ContentManagementSystems ON ContentManagementSystems.cmsId = Authors.authorID"
          ]
        },
        {
          "interpretation": "What web framework does each author use, including the one with email 'davidwilson@example.com'?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT a.email, c.Web_Framework \nFROM Authors a \nJOIN Articles ar ON a.authorID = ar.authorID \nJOIN ContentManagementSystems c ON ar.authorID = c.cmsId \nWHERE a.email = 'davidwilson@example.com'"
          ]
        },
        {
          "interpretation": "What is the name of the CMS used by the author with the specified email, and what web framework does it use?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT cms.Content_Management_System, cms.Web_Framework\nFROM Authors a\nJOIN ContentManagementSystems cms ON a.authorID = cms.cmsId\nWHERE a.email = 'johndoe@example.com'"
          ]
        },
        {
          "interpretation": "Which author uses the web framework in the CMS used by the author with the given email?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.name FROM Authors AS T1 JOIN ContentManagementSystems AS T2 ON T1.authorID = T2.cmsId WHERE T1.email = 'johndoe@example.com'"
          ]
        }
      ],
      "num_unique_execution_results": 9,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.1111111111111111,
        "one_found": true,
        "f1_score": 0.19999999999999998,
        "num_queries": 9,
        "num_unique_queries": 9,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_technology/vague_2cols_technology.sqlite",
      "db_dump": "CREATE TABLE ArticleSources (\n    articleSourceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    articleID INTEGER,\n    sourceID INTEGER,\n    referenceDate DATETIME,\n    FOREIGN KEY(articleID) REFERENCES Articles(articleID),\n    FOREIGN KEY(sourceID) REFERENCES Sources(sourceID)\n);\nCREATE TABLE Articles (\n    articleID INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    publicationDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    authorID INTEGER,\n    FOREIGN KEY(authorID) REFERENCES Authors(authorID)\n);\nCREATE TABLE Authors (\n    authorID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT UNIQUE\n);\nCREATE TABLE ContentManagementSystems (\n    cmsId INTEGER PRIMARY KEY AUTOINCREMENT,\n    Content_Management_System TEXT,\n    Web_Framework TEXT,\n    Online_News_Platform TEXT,\n    FOREIGN KEY(cmsId) REFERENCES Articles(authorID)\n);\nCREATE TABLE EditorialTeamMembers (\n    memberID INTEGER PRIMARY KEY AUTOINCREMENT,\n    role TEXT,\n    editorName TEXT\n);\nCREATE TABLE Sources (\n    sourceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    url TEXT UNIQUE\n);\n\nINSERT INTO \"ArticleSources\" (articleSourceID,articleID,sourceID,referenceDate) VALUES (1,1,1,'2021-07-01 10:00:00'),(2,2,2,'2021-07-01 10:00:00'),(3,3,3,'2021-07-01 10:00:00'),(4,4,4,'2021-07-01 10:00:00'),(5,5,5,'2021-07-01 10:00:00');\nINSERT INTO \"Articles\" (articleID,title,content,publicationDate,authorID) VALUES (1,'First Article Title','This is the first article content.','2024-02-19 14:35:51',1),(2,'Second Article Title','This is the second article content.','2024-02-19 14:35:51',2),(3,'Third Article Title','This is the third article content.','2024-02-19 14:35:51',3),(4,'Fourth Article Title','This is the fourth article content.','2024-02-19 14:35:51',4),(5,'Fifth Article Title','This is the fifth article content.','2024-02-19 14:35:51',5);\nINSERT INTO \"Authors\" (authorID,name,email) VALUES (1,'John Doe','johndoe@example.com'),(2,'Jane Smith','janesmith@example.com'),(3,'Michael Johnson','michaeljohnson@example.com'),(4,'Emily Brown','emilybrown@example.com'),(5,'David Wilson','davidwilson@example.com');\nINSERT INTO \"ContentManagementSystems\" (cmsId,Content_Management_System,Web_Framework,Online_News_Platform) VALUES (1,'WordPress','PHP','Newspack'),(2,'Drupal','PHP','Tribune Content Agency'),(3,'Joomla','PHP','LimeSurvey'),(4,'Plone','Python','Pelagios'),(5,'Concrete5','PHP','Zen Cart');\nINSERT INTO \"EditorialTeamMembers\" (memberID,role,editorName) VALUES (1,'Managing Editor','Mary Williams'),(2,'Copy Chief','Tom Anderson'),(3,'Features Editor','Ann Taylor'),(4,'Sports Editor','Chris Harris'),(5,'Opinion Editor','Laura King');\nINSERT INTO \"Sources\" (sourceID,name,url) VALUES (1,'The New York Times','https://www.nytimes.com/'),(2,'CNN','https://www.cnn.com/'),(3,'BBC News','https://www.bbc.co.uk/news/'),(4,'Al Jazeera','https://www.aljazeera.com/'),(5,'Deutsche Welle','https://www.dw.com/');\n",
      "question": "show me the web framework that emily brown uses to write her articles",
      "gold_queries": [
        "SELECT CMS.Web_Framework\r\nFROM ContentManagementSystems AS CMS\r\nJOIN Articles AS AR ON CMS.cmsId = AR.articleID\r\nJOIN Authors AS A ON AR.authorID = A.authorID\r\nWHERE A.name = 'Emily Brown';"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Display the web framework used by the author of the article 'Fourth Article Title'.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT T3.Web_Framework \nFROM Articles AS T1 \nJOIN Authors AS T2 ON T1.authorID = T2.authorID \nJOIN ContentManagementSystems AS T3 ON T1.authorID = T3.cmsId \nWHERE T1.title = 'Fourth Article Title'"
          ]
        },
        {
          "interpretation": "Retrieve the web framework for the author who wrote 'Fourth Article Title', even if the name is not explicitly stated.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Content_Management_System, Web_Framework\nFROM Articles\nJOIN Authors ON Articles.authorID = Authors.authorID\nJOIN ContentManagementSystems ON Articles.authorID = ContentManagementSystems.cmsId\nWHERE Articles.title = 'Fourth Article Title'"
          ]
        },
        {
          "interpretation": "List the web framework associated with the author of the article that has a publication date of '2024-02-19 14:35:51'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT T1.Web_Framework \nFROM ContentManagementSystems AS T1 \nJOIN Articles AS T2 ON T1.cmsId = T2.authorID \nWHERE T2.publicationDate = '2024-02-19 14:35:51'"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "one_found": true,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Journalism/vague_2cols_technology/vague_2cols_technology.sqlite",
      "db_dump": "CREATE TABLE ArticleSources (\n    articleSourceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    articleID INTEGER,\n    sourceID INTEGER,\n    referenceDate DATETIME,\n    FOREIGN KEY(articleID) REFERENCES Articles(articleID),\n    FOREIGN KEY(sourceID) REFERENCES Sources(sourceID)\n);\nCREATE TABLE Articles (\n    articleID INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    content TEXT,\n    publicationDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    authorID INTEGER,\n    FOREIGN KEY(authorID) REFERENCES Authors(authorID)\n);\nCREATE TABLE Authors (\n    authorID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT UNIQUE\n);\nCREATE TABLE ContentManagementSystems (\n    cmsId INTEGER PRIMARY KEY AUTOINCREMENT,\n    Content_Management_System TEXT,\n    Web_Framework TEXT,\n    Online_News_Platform TEXT,\n    FOREIGN KEY(cmsId) REFERENCES Articles(authorID)\n);\nCREATE TABLE EditorialTeamMembers (\n    memberID INTEGER PRIMARY KEY AUTOINCREMENT,\n    role TEXT,\n    editorName TEXT\n);\nCREATE TABLE Sources (\n    sourceID INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    url TEXT UNIQUE\n);\n\nINSERT INTO \"ArticleSources\" (articleSourceID,articleID,sourceID,referenceDate) VALUES (1,1,1,'2021-07-01 10:00:00'),(2,2,2,'2021-07-01 10:00:00'),(3,3,3,'2021-07-01 10:00:00'),(4,4,4,'2021-07-01 10:00:00'),(5,5,5,'2021-07-01 10:00:00');\nINSERT INTO \"Articles\" (articleID,title,content,publicationDate,authorID) VALUES (1,'First Article Title','This is the first article content.','2024-02-19 14:35:51',1),(2,'Second Article Title','This is the second article content.','2024-02-19 14:35:51',2),(3,'Third Article Title','This is the third article content.','2024-02-19 14:35:51',3),(4,'Fourth Article Title','This is the fourth article content.','2024-02-19 14:35:51',4),(5,'Fifth Article Title','This is the fifth article content.','2024-02-19 14:35:51',5);\nINSERT INTO \"Authors\" (authorID,name,email) VALUES (1,'John Doe','johndoe@example.com'),(2,'Jane Smith','janesmith@example.com'),(3,'Michael Johnson','michaeljohnson@example.com'),(4,'Emily Brown','emilybrown@example.com'),(5,'David Wilson','davidwilson@example.com');\nINSERT INTO \"ContentManagementSystems\" (cmsId,Content_Management_System,Web_Framework,Online_News_Platform) VALUES (1,'WordPress','PHP','Newspack'),(2,'Drupal','PHP','Tribune Content Agency'),(3,'Joomla','PHP','LimeSurvey'),(4,'Plone','Python','Pelagios'),(5,'Concrete5','PHP','Zen Cart');\nINSERT INTO \"EditorialTeamMembers\" (memberID,role,editorName) VALUES (1,'Managing Editor','Mary Williams'),(2,'Copy Chief','Tom Anderson'),(3,'Features Editor','Ann Taylor'),(4,'Sports Editor','Chris Harris'),(5,'Opinion Editor','Laura King');\nINSERT INTO \"Sources\" (sourceID,name,url) VALUES (1,'The New York Times','https://www.nytimes.com/'),(2,'CNN','https://www.cnn.com/'),(3,'BBC News','https://www.bbc.co.uk/news/'),(4,'Al Jazeera','https://www.aljazeera.com/'),(5,'Deutsche Welle','https://www.dw.com/');\n",
      "question": "show me the content management system that emily brown uses to write her articles",
      "gold_queries": [
        "SELECT CMS.Content_Management_System\r\nFROM ContentManagementSystems AS CMS\r\nJOIN Articles AS AR ON CMS.cmsId = AR.articleID\r\nJOIN Authors AS A ON AR.authorID = A.authorID\r\nWHERE A.name = 'Emily Brown';"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "The content management system (cmsId) associated with authorID 4, which corresponds to Emily Brown.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT cmsId FROM ContentManagementSystems WHERE cmsId = 4"
          ]
        },
        {
          "interpretation": "The CMS for the articles written by Emily Brown.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT DISTINCT Content_Management_System \nFROM Articles \nJOIN Authors ON Articles.authorID = Authors.authorID \nJOIN ContentManagementSystems ON Articles.authorID = ContentManagementSystems.cmsId \nWHERE Authors.name = 'Emily Brown'"
          ]
        },
        {
          "interpretation": "The CMS associated with the authorID of Emily Brown, who writes articles.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Articles.title, ContentManagementSystems.Content_Management_System\nFROM Articles\nJOIN Authors ON Articles.authorID = Authors.authorID\nLEFT JOIN ContentManagementSystems ON Authors.authorID = ContentManagementSystems.cmsId\nWHERE Authors.name = 'Emily Brown'"
          ]
        },
        {
          "interpretation": "The Web_Framework or Content_Management_System value which corresponds to the authorID of 'Emily Brown'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Web_Framework, Content_Management_System\nFROM ContentManagementSystems\nWHERE cmsId = (\n    SELECT authorID\n    FROM Authors\n    WHERE name = 'Emily Brown'\n)"
          ]
        },
        {
          "interpretation": "The CMS used by the author who writes articles and their name is Emily Brown.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.Content_Management_System, T1.name\nFROM Authors AS T1\nJOIN ContentManagementSystems AS T2 ON T1.authorID = T2.cmsId\nWHERE T1.name = 'Emily Brown'"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "one_found": true,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Streaming Service/vague_2cols_screenwriter/vague_2cols_screenwriter.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actor_id INTEGER PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    birth_date DATE,\n    nationality TEXT\n);\nCREATE TABLE Movies (\n    movie_id INTEGER PRIMARY KEY,\n    title TEXT,\n    release_year INTEGER,\n    genre TEXT,\n    novelist TEXT,\n    playwright TEXT,\n    film TEXT\n);\nCREATE TABLE Novelists (\n    novelist_id INTEGER PRIMARY KEY,\n    name TEXT\n);\nCREATE TABLE Playwrights (\n    playwright_id INTEGER PRIMARY KEY,\n    name TEXT\n);\nCREATE TABLE Subscribers (\n    subscriber_id INTEGER PRIMARY KEY,\n    username TEXT,\n    email TEXT,\n    password TEXT\n);\nCREATE TABLE TVShows (\n    tvshow_id INTEGER PRIMARY KEY,\n    show_title TEXT,\n    start_date DATE,\n    end_date DATE,\n    genre TEXT,\n    episodes INT\n);\n\nINSERT INTO \"Actors\" (actor_id,first_name,last_name,birth_date,nationality) VALUES (1,'Al Pacino',NULL,19400425,'American'),(2,'Tom Hanks',NULL,19560709,'American'),(3,'Leonardo DiCaprio',NULL,19741111,'American'),(4,'Brad Pitt',NULL,19631218,'American'),(5,'Denzel Washington',NULL,19541227,'American');\nINSERT INTO \"Movies\" (movie_id,title,release_year,genre,novelist,playwright,film) VALUES (1,'The Godfather',1972,'Crime, Drama','Mario Puzo','Francis Ford Coppola','The Godfather'),(2,'Forrest Gump',1994,'Drama, Romance','Winston Groom','Robert Zemeckis','Forrest Gump'),(3,'Inception',2010,'Action, Adventure','Unknown','Christopher Nolan','Inception'),(4,'Pulp Fiction',1994,'Crime, Drama','Quentin Tarantino & Roger Avary','Quentin Tarantino','Pulp Fiction'),(5,'Jurassic Park',1993,'Adventure, Sci-Fi','Michael Crichton','Steven Spielberg','Jurassic Park');\nINSERT INTO \"Subscribers\" (subscriber_id,username,email,password) VALUES (1,'user001','user001@gmail.com','password001'),(2,'user002','user002@yahoo.com','password002'),(3,'user003','user003@hotmail.com','password003'),(4,'user004','user004@outlook.com','password004'),(5,'user005','user005@aol.com','password005');\nINSERT INTO \"TVShows\" (tvshow_id,show_title,start_date,end_date,genre,episodes) VALUES (1,'Breaking Bad',20080117,20130929,'Crime, Drama',62),(2,'Game of Thrones',20110417,20190519,'Fantasy, Adventure',73),(3,'Stranger Things',20160715,'Present','Horror, Mystery',42),(4,'Friends',19940922,20040506,'Comedy, Romance',236),(5,'Vikings',20131003,'Present','Historical drama',89);\n",
      "question": "Provide a count of movies for each writer",
      "gold_queries": [
        "SELECT novelist, COUNT(*) AS Movie_Count\r\nFROM Movies\r\nGROUP BY novelist;",
        "SELECT playwright, COUNT(*) AS Movie_Count\r\nFROM Movies\r\nGROUP BY playwright;",
        "SELECT novelist, playwright, COUNT(*) AS Movie_Count\r\nFROM Movies\r\nGROUP BY novelist, playwright;"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Include a mention of the most prolific writers in the count (returning multiple entries and associated movies).",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT novelist, COUNT(movie_id) AS movie_count, title FROM Movies GROUP BY novelist, title ORDER BY movie_count DESC"
          ]
        },
        {
          "interpretation": "Provide a count of movies for each writer, considering novels and plays converted to films (multiple entries for complex productions).",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT novelist, COUNT(movie_id) as novel_count, playwright, COUNT(movie_id) as play_count\nFROM Movies\nGROUP BY novelist, playwright"
          ]
        },
        {
          "interpretation": "Provide separate counts of movies for novelists and playwrights in separately related tables.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(movie_id) FROM Movies WHERE playwright IS NOT NULL",
            "SELECT COUNT(movie_id) FROM Movies WHERE novelist IS NOT NULL"
          ]
        },
        {
          "interpretation": "Exclude data from foreign novelists and playwrights by providing a count for only American writers.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(*) \nFROM Movies \nWHERE novelist IN (SELECT name FROM Novelists) \nAND playwright IN (SELECT name FROM Playwrights)"
          ]
        },
        {
          "interpretation": "Disregard internal titles of movies, providing the count only by movie director.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT playwright, COUNT(movie_id) FROM Movies GROUP BY playwright"
          ]
        },
        {
          "interpretation": "Provide the count of movies for each novelist.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT novelist, COUNT(movie_id) FROM Movies GROUP BY novelist"
          ]
        },
        {
          "interpretation": "Provide a combined count of movies for both novelists and playwrights.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(DISTINCT novelist) + COUNT(DISTINCT playwright) AS total_count FROM Movies"
          ]
        }
      ],
      "num_unique_execution_results": 7,
      "interpretation_level_metrics": {
        "recall": 0.6666666666666666,
        "precision": 0.25,
        "one_found": true,
        "f1_score": 0.36363636363636365,
        "num_queries": 8,
        "num_unique_queries": 8,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Streaming Service/vague_2cols_screenwriter/vague_2cols_screenwriter.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actor_id INTEGER PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    birth_date DATE,\n    nationality TEXT\n);\nCREATE TABLE Movies (\n    movie_id INTEGER PRIMARY KEY,\n    title TEXT,\n    release_year INTEGER,\n    genre TEXT,\n    novelist TEXT,\n    playwright TEXT,\n    film TEXT\n);\nCREATE TABLE Novelists (\n    novelist_id INTEGER PRIMARY KEY,\n    name TEXT\n);\nCREATE TABLE Playwrights (\n    playwright_id INTEGER PRIMARY KEY,\n    name TEXT\n);\nCREATE TABLE Subscribers (\n    subscriber_id INTEGER PRIMARY KEY,\n    username TEXT,\n    email TEXT,\n    password TEXT\n);\nCREATE TABLE TVShows (\n    tvshow_id INTEGER PRIMARY KEY,\n    show_title TEXT,\n    start_date DATE,\n    end_date DATE,\n    genre TEXT,\n    episodes INT\n);\n\nINSERT INTO \"Actors\" (actor_id,first_name,last_name,birth_date,nationality) VALUES (1,'Al Pacino',NULL,19400425,'American'),(2,'Tom Hanks',NULL,19560709,'American'),(3,'Leonardo DiCaprio',NULL,19741111,'American'),(4,'Brad Pitt',NULL,19631218,'American'),(5,'Denzel Washington',NULL,19541227,'American');\nINSERT INTO \"Movies\" (movie_id,title,release_year,genre,novelist,playwright,film) VALUES (1,'The Godfather',1972,'Crime, Drama','Mario Puzo','Francis Ford Coppola','The Godfather'),(2,'Forrest Gump',1994,'Drama, Romance','Winston Groom','Robert Zemeckis','Forrest Gump'),(3,'Inception',2010,'Action, Adventure','Unknown','Christopher Nolan','Inception'),(4,'Pulp Fiction',1994,'Crime, Drama','Quentin Tarantino & Roger Avary','Quentin Tarantino','Pulp Fiction'),(5,'Jurassic Park',1993,'Adventure, Sci-Fi','Michael Crichton','Steven Spielberg','Jurassic Park');\nINSERT INTO \"Subscribers\" (subscriber_id,username,email,password) VALUES (1,'user001','user001@gmail.com','password001'),(2,'user002','user002@yahoo.com','password002'),(3,'user003','user003@hotmail.com','password003'),(4,'user004','user004@outlook.com','password004'),(5,'user005','user005@aol.com','password005');\nINSERT INTO \"TVShows\" (tvshow_id,show_title,start_date,end_date,genre,episodes) VALUES (1,'Breaking Bad',20080117,20130929,'Crime, Drama',62),(2,'Game of Thrones',20110417,20190519,'Fantasy, Adventure',73),(3,'Stranger Things',20160715,'Present','Horror, Mystery',42),(4,'Friends',19940922,20040506,'Comedy, Romance',236),(5,'Vikings',20131003,'Present','Historical drama',89);\n",
      "question": "Provide a count of movies for each playwright.",
      "gold_queries": [
        "SELECT playwright, COUNT(*) AS Movie_Count\r\nFROM Movies\r\nGROUP BY playwright;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Get the number of movies associated with each unique playwright across all records, not necessarily limited to the 'playwright' column.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT playwright, COUNT(*) AS movie_count\nFROM Movies\nWHERE playwright IS NOT NULL\nGROUP BY playwright"
          ]
        },
        {
          "interpretation": "Provide a count of movies for each playwright as an independent entity where the movie's 'film' column matches with the playwright's actual name and not necessarily the movie's casting or director.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT playwright, COUNT(*) AS movie_count\nFROM Movies\nJOIN Playwrights ON Movies.playwright = Playwrights.name\nGROUP BY playwright"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "one_found": true,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Streaming Service/vague_2cols_screenwriter/vague_2cols_screenwriter.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actor_id INTEGER PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    birth_date DATE,\n    nationality TEXT\n);\nCREATE TABLE Movies (\n    movie_id INTEGER PRIMARY KEY,\n    title TEXT,\n    release_year INTEGER,\n    genre TEXT,\n    novelist TEXT,\n    playwright TEXT,\n    film TEXT\n);\nCREATE TABLE Novelists (\n    novelist_id INTEGER PRIMARY KEY,\n    name TEXT\n);\nCREATE TABLE Playwrights (\n    playwright_id INTEGER PRIMARY KEY,\n    name TEXT\n);\nCREATE TABLE Subscribers (\n    subscriber_id INTEGER PRIMARY KEY,\n    username TEXT,\n    email TEXT,\n    password TEXT\n);\nCREATE TABLE TVShows (\n    tvshow_id INTEGER PRIMARY KEY,\n    show_title TEXT,\n    start_date DATE,\n    end_date DATE,\n    genre TEXT,\n    episodes INT\n);\n\nINSERT INTO \"Actors\" (actor_id,first_name,last_name,birth_date,nationality) VALUES (1,'Al Pacino',NULL,19400425,'American'),(2,'Tom Hanks',NULL,19560709,'American'),(3,'Leonardo DiCaprio',NULL,19741111,'American'),(4,'Brad Pitt',NULL,19631218,'American'),(5,'Denzel Washington',NULL,19541227,'American');\nINSERT INTO \"Movies\" (movie_id,title,release_year,genre,novelist,playwright,film) VALUES (1,'The Godfather',1972,'Crime, Drama','Mario Puzo','Francis Ford Coppola','The Godfather'),(2,'Forrest Gump',1994,'Drama, Romance','Winston Groom','Robert Zemeckis','Forrest Gump'),(3,'Inception',2010,'Action, Adventure','Unknown','Christopher Nolan','Inception'),(4,'Pulp Fiction',1994,'Crime, Drama','Quentin Tarantino & Roger Avary','Quentin Tarantino','Pulp Fiction'),(5,'Jurassic Park',1993,'Adventure, Sci-Fi','Michael Crichton','Steven Spielberg','Jurassic Park');\nINSERT INTO \"Subscribers\" (subscriber_id,username,email,password) VALUES (1,'user001','user001@gmail.com','password001'),(2,'user002','user002@yahoo.com','password002'),(3,'user003','user003@hotmail.com','password003'),(4,'user004','user004@outlook.com','password004'),(5,'user005','user005@aol.com','password005');\nINSERT INTO \"TVShows\" (tvshow_id,show_title,start_date,end_date,genre,episodes) VALUES (1,'Breaking Bad',20080117,20130929,'Crime, Drama',62),(2,'Game of Thrones',20110417,20190519,'Fantasy, Adventure',73),(3,'Stranger Things',20160715,'Present','Horror, Mystery',42),(4,'Friends',19940922,20040506,'Comedy, Romance',236),(5,'Vikings',20131003,'Present','Historical drama',89);\n",
      "question": "Provide a count of movies for each novelist.",
      "gold_queries": [
        "SELECT novelist, COUNT(*) AS Movie_Count\r\nFROM Movies\r\nGROUP BY novelist;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Count the total number of movies regardless of the novelists mentioned, and group them by the possible novelists in the Novelists table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT n.name, COUNT(m.movie_id)\nFROM Novelists n\nLEFT JOIN Movies m ON n.name = m.novelist\nGROUP BY n.name"
          ]
        },
        {
          "interpretation": "Count the number of movies written by novelists who also have a matching entry in the Novelists table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(*) \nFROM Movies M\nJOIN Novelists N ON M.novelist = N.name"
          ]
        },
        {
          "interpretation": "Count the number of distinct movies for each novelist in the Movies table.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT novelist, COUNT(DISTINCT movie_id) FROM Movies GROUP BY novelist"
          ]
        },
        {
          "interpretation": "Retrieve the count of movies for each novelist grouped by the release year of the movies in the Movies table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT novelist, release_year, COUNT(*) FROM Movies GROUP BY novelist, release_year"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "one_found": true,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Streaming Service/vague_2cols_screenwriter/vague_2cols_screenwriter.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actor_id INTEGER PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    birth_date DATE,\n    nationality TEXT\n);\nCREATE TABLE Movies (\n    movie_id INTEGER PRIMARY KEY,\n    title TEXT,\n    release_year INTEGER,\n    genre TEXT,\n    novelist TEXT,\n    playwright TEXT,\n    film TEXT\n);\nCREATE TABLE Novelists (\n    novelist_id INTEGER PRIMARY KEY,\n    name TEXT\n);\nCREATE TABLE Playwrights (\n    playwright_id INTEGER PRIMARY KEY,\n    name TEXT\n);\nCREATE TABLE Subscribers (\n    subscriber_id INTEGER PRIMARY KEY,\n    username TEXT,\n    email TEXT,\n    password TEXT\n);\nCREATE TABLE TVShows (\n    tvshow_id INTEGER PRIMARY KEY,\n    show_title TEXT,\n    start_date DATE,\n    end_date DATE,\n    genre TEXT,\n    episodes INT\n);\n\nINSERT INTO \"Actors\" (actor_id,first_name,last_name,birth_date,nationality) VALUES (1,'Al Pacino',NULL,19400425,'American'),(2,'Tom Hanks',NULL,19560709,'American'),(3,'Leonardo DiCaprio',NULL,19741111,'American'),(4,'Brad Pitt',NULL,19631218,'American'),(5,'Denzel Washington',NULL,19541227,'American');\nINSERT INTO \"Movies\" (movie_id,title,release_year,genre,novelist,playwright,film) VALUES (1,'The Godfather',1972,'Crime, Drama','Mario Puzo','Francis Ford Coppola','The Godfather'),(2,'Forrest Gump',1994,'Drama, Romance','Winston Groom','Robert Zemeckis','Forrest Gump'),(3,'Inception',2010,'Action, Adventure','Unknown','Christopher Nolan','Inception'),(4,'Pulp Fiction',1994,'Crime, Drama','Quentin Tarantino & Roger Avary','Quentin Tarantino','Pulp Fiction'),(5,'Jurassic Park',1993,'Adventure, Sci-Fi','Michael Crichton','Steven Spielberg','Jurassic Park');\nINSERT INTO \"Subscribers\" (subscriber_id,username,email,password) VALUES (1,'user001','user001@gmail.com','password001'),(2,'user002','user002@yahoo.com','password002'),(3,'user003','user003@hotmail.com','password003'),(4,'user004','user004@outlook.com','password004'),(5,'user005','user005@aol.com','password005');\nINSERT INTO \"TVShows\" (tvshow_id,show_title,start_date,end_date,genre,episodes) VALUES (1,'Breaking Bad',20080117,20130929,'Crime, Drama',62),(2,'Game of Thrones',20110417,20190519,'Fantasy, Adventure',73),(3,'Stranger Things',20160715,'Present','Horror, Mystery',42),(4,'Friends',19940922,20040506,'Comedy, Romance',236),(5,'Vikings',20131003,'Present','Historical drama',89);\n",
      "question": "List the movies and their release years, sort by their novelist, then playwright.",
      "gold_queries": [
        "SELECT novelist, playwright, title, release_year\r\nFROM Movies\r\nORDER BY novelist, playwright, release_year;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Display the titles and release years of the movies, arranged in the order of first by the title of the novel, and then by the last name of the playwright, however please note that 'primarykey' creatorertain tables or additional specification would be needed to fully fill this gap asFar as I was told.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title, release_year \nFROM Movies \nORDER BY novelist, playwright"
          ]
        },
        {
          "interpretation": "Show the release years and titles of the movies, grouped by the identity of the novelist, then the identity of the playwright.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT novelist, playwright, title, release_year\nFROM Movies\nGROUP BY novelist, playwright, title, release_year"
          ]
        },
        {
          "interpretation": "List the movies, sorted by the novelist and then the order in which the playwright adapted the novel or play into the movie.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title \nFROM Movies \nORDER BY novelist, playwright"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "one_found": true,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Streaming Service/vague_2cols_screenwriter/vague_2cols_screenwriter.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actor_id INTEGER PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    birth_date DATE,\n    nationality TEXT\n);\nCREATE TABLE Movies (\n    movie_id INTEGER PRIMARY KEY,\n    title TEXT,\n    release_year INTEGER,\n    genre TEXT,\n    novelist TEXT,\n    playwright TEXT,\n    film TEXT\n);\nCREATE TABLE Novelists (\n    novelist_id INTEGER PRIMARY KEY,\n    name TEXT\n);\nCREATE TABLE Playwrights (\n    playwright_id INTEGER PRIMARY KEY,\n    name TEXT\n);\nCREATE TABLE Subscribers (\n    subscriber_id INTEGER PRIMARY KEY,\n    username TEXT,\n    email TEXT,\n    password TEXT\n);\nCREATE TABLE TVShows (\n    tvshow_id INTEGER PRIMARY KEY,\n    show_title TEXT,\n    start_date DATE,\n    end_date DATE,\n    genre TEXT,\n    episodes INT\n);\n\nINSERT INTO \"Actors\" (actor_id,first_name,last_name,birth_date,nationality) VALUES (1,'Al Pacino',NULL,19400425,'American'),(2,'Tom Hanks',NULL,19560709,'American'),(3,'Leonardo DiCaprio',NULL,19741111,'American'),(4,'Brad Pitt',NULL,19631218,'American'),(5,'Denzel Washington',NULL,19541227,'American');\nINSERT INTO \"Movies\" (movie_id,title,release_year,genre,novelist,playwright,film) VALUES (1,'The Godfather',1972,'Crime, Drama','Mario Puzo','Francis Ford Coppola','The Godfather'),(2,'Forrest Gump',1994,'Drama, Romance','Winston Groom','Robert Zemeckis','Forrest Gump'),(3,'Inception',2010,'Action, Adventure','Unknown','Christopher Nolan','Inception'),(4,'Pulp Fiction',1994,'Crime, Drama','Quentin Tarantino & Roger Avary','Quentin Tarantino','Pulp Fiction'),(5,'Jurassic Park',1993,'Adventure, Sci-Fi','Michael Crichton','Steven Spielberg','Jurassic Park');\nINSERT INTO \"Subscribers\" (subscriber_id,username,email,password) VALUES (1,'user001','user001@gmail.com','password001'),(2,'user002','user002@yahoo.com','password002'),(3,'user003','user003@hotmail.com','password003'),(4,'user004','user004@outlook.com','password004'),(5,'user005','user005@aol.com','password005');\nINSERT INTO \"TVShows\" (tvshow_id,show_title,start_date,end_date,genre,episodes) VALUES (1,'Breaking Bad',20080117,20130929,'Crime, Drama',62),(2,'Game of Thrones',20110417,20190519,'Fantasy, Adventure',73),(3,'Stranger Things',20160715,'Present','Horror, Mystery',42),(4,'Friends',19940922,20040506,'Comedy, Romance',236),(5,'Vikings',20131003,'Present','Historical drama',89);\n",
      "question": "List the movies and their release years, sort by their playwright.",
      "gold_queries": [
        "SELECT playwright, title, release_year\r\nFROM Movies\r\nORDER BY playwright, release_year;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Retrieve movies with their release years and sort by the input from the table 'Movies' to the 'playwright' field, avoiding duplicate names.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT title, release_year FROM Movies ORDER BY playwright"
          ]
        },
        {
          "interpretation": "For each movie in the 'Movies' table that was adapted from a play, list the adaptation identity of the movie alongside the release year and sort by the playwright's name.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT playwright, title, release_year FROM Movies WHERE playwright != 'Unknown' ORDER BY playwright"
          ]
        },
        {
          "interpretation": "Get the 'Movies' table containing release year values in 'Movies' table where the corresponding playwright field has nonnull values and sort them by the first occurrence of playwright in table 'Movies'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT release_year FROM Movies WHERE playwright IS NOT NULL ORDER BY playwright ASC LIMIT 1"
          ]
        },
        {
          "interpretation": "For every movie in the 'Movies' table, where the input in the 'playwright' field was a 'Playwright', return the corresponding 'Movies' table and its release year alongside the 'playwright' who adapted it.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title, release_year, playwright FROM Movies WHERE playwright IN (SELECT name FROM Playwrights)"
          ]
        },
        {
          "interpretation": "Retrieve release year for movie of each 'playwright' in the 'Movies' table where 'playwright' is not null, sorted by 'playwright'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT playwright, release_year FROM Movies WHERE playwright IS NOT NULL ORDER BY playwright"
          ]
        },
        {
          "interpretation": "List the movies where the field 'film' in the table 'Movies' matches the table 'Movies' for their release year, sorted by the playwright.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title, playwright FROM Movies WHERE film = title ORDER BY playwright"
          ]
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.16666666666666666,
        "one_found": true,
        "f1_score": 0.2857142857142857,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Streaming Service/vague_2cols_screenwriter/vague_2cols_screenwriter.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actor_id INTEGER PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    birth_date DATE,\n    nationality TEXT\n);\nCREATE TABLE Movies (\n    movie_id INTEGER PRIMARY KEY,\n    title TEXT,\n    release_year INTEGER,\n    genre TEXT,\n    novelist TEXT,\n    playwright TEXT,\n    film TEXT\n);\nCREATE TABLE Novelists (\n    novelist_id INTEGER PRIMARY KEY,\n    name TEXT\n);\nCREATE TABLE Playwrights (\n    playwright_id INTEGER PRIMARY KEY,\n    name TEXT\n);\nCREATE TABLE Subscribers (\n    subscriber_id INTEGER PRIMARY KEY,\n    username TEXT,\n    email TEXT,\n    password TEXT\n);\nCREATE TABLE TVShows (\n    tvshow_id INTEGER PRIMARY KEY,\n    show_title TEXT,\n    start_date DATE,\n    end_date DATE,\n    genre TEXT,\n    episodes INT\n);\n\nINSERT INTO \"Actors\" (actor_id,first_name,last_name,birth_date,nationality) VALUES (1,'Al Pacino',NULL,19400425,'American'),(2,'Tom Hanks',NULL,19560709,'American'),(3,'Leonardo DiCaprio',NULL,19741111,'American'),(4,'Brad Pitt',NULL,19631218,'American'),(5,'Denzel Washington',NULL,19541227,'American');\nINSERT INTO \"Movies\" (movie_id,title,release_year,genre,novelist,playwright,film) VALUES (1,'The Godfather',1972,'Crime, Drama','Mario Puzo','Francis Ford Coppola','The Godfather'),(2,'Forrest Gump',1994,'Drama, Romance','Winston Groom','Robert Zemeckis','Forrest Gump'),(3,'Inception',2010,'Action, Adventure','Unknown','Christopher Nolan','Inception'),(4,'Pulp Fiction',1994,'Crime, Drama','Quentin Tarantino & Roger Avary','Quentin Tarantino','Pulp Fiction'),(5,'Jurassic Park',1993,'Adventure, Sci-Fi','Michael Crichton','Steven Spielberg','Jurassic Park');\nINSERT INTO \"Subscribers\" (subscriber_id,username,email,password) VALUES (1,'user001','user001@gmail.com','password001'),(2,'user002','user002@yahoo.com','password002'),(3,'user003','user003@hotmail.com','password003'),(4,'user004','user004@outlook.com','password004'),(5,'user005','user005@aol.com','password005');\nINSERT INTO \"TVShows\" (tvshow_id,show_title,start_date,end_date,genre,episodes) VALUES (1,'Breaking Bad',20080117,20130929,'Crime, Drama',62),(2,'Game of Thrones',20110417,20190519,'Fantasy, Adventure',73),(3,'Stranger Things',20160715,'Present','Horror, Mystery',42),(4,'Friends',19940922,20040506,'Comedy, Romance',236),(5,'Vikings',20131003,'Present','Historical drama',89);\n",
      "question": "Provide a count of movies for each novelist and playwright.",
      "gold_queries": [
        "SELECT novelist, playwright, COUNT(*) AS Movie_Count\r\nFROM Movies\r\nGROUP BY novelist, playwright;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Count the number of movies for each novelist, including movies without a novelist mentioned.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT novelist, COUNT(*) FROM Movies GROUP BY novelist"
          ]
        },
        {
          "interpretation": "Include movies with missing novelist names in the count for each distinct playwright mentioned in the Movies table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT playwright, COUNT(*) FROM Movies GROUP BY playwright"
          ]
        },
        {
          "interpretation": "Join the Movies table with the Playwrights table to get the count of movies for each playwright.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Playwrights.name, COUNT(Movies.movie_id) \nFROM Movies \nJOIN Playwrights ON Movies.playwright = Playwrights.name \nGROUP BY Playwrights.name"
          ]
        },
        {
          "interpretation": "Group the Movies table by a composite key of novelist ID and writer ID, then count the number of rows in each group.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(*) \nFROM Movies \nGROUP BY novelist, playwright"
          ]
        },
        {
          "interpretation": "Calculate the total count of movies for each unique combination of novelist and playwright.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT novelist, playwright, COUNT(*) as total_movies\nFROM Movies\nGROUP BY novelist, playwright"
          ]
        },
        {
          "interpretation": "Provide the count of movies produced by each novelist alongside the corresponding count of movies written by each playwright.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT novelist, COUNT(*) as novelist_count, playwright, COUNT(*) as playwright_count\nFROM Movies\nGROUP BY novelist, playwright"
          ]
        },
        {
          "interpretation": "Divide the count of movies for each novelist by the count of movies for each playwright.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT CAST(COUNT(CASE WHEN novelist IS NOT NULL THEN movie_id END) AS REAL) / COUNT(CASE WHEN playwright IS NOT NULL THEN movie_id END) AS ratio\nFROM Movies"
          ]
        },
        {
          "interpretation": "Summarize the Movies table by novelist, excluding movies with missing or unknown information.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT novelist, COUNT(*) as movie_count\nFROM Movies\nWHERE novelist IS NOT NULL AND novelist != 'Unknown'\nGROUP BY novelist"
          ]
        }
      ],
      "num_unique_execution_results": 8,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.125,
        "one_found": true,
        "f1_score": 0.2222222222222222,
        "num_queries": 8,
        "num_unique_queries": 8,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Streaming Service/vague_2cols_screenwriter/vague_2cols_screenwriter.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actor_id INTEGER PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    birth_date DATE,\n    nationality TEXT\n);\nCREATE TABLE Movies (\n    movie_id INTEGER PRIMARY KEY,\n    title TEXT,\n    release_year INTEGER,\n    genre TEXT,\n    novelist TEXT,\n    playwright TEXT,\n    film TEXT\n);\nCREATE TABLE Novelists (\n    novelist_id INTEGER PRIMARY KEY,\n    name TEXT\n);\nCREATE TABLE Playwrights (\n    playwright_id INTEGER PRIMARY KEY,\n    name TEXT\n);\nCREATE TABLE Subscribers (\n    subscriber_id INTEGER PRIMARY KEY,\n    username TEXT,\n    email TEXT,\n    password TEXT\n);\nCREATE TABLE TVShows (\n    tvshow_id INTEGER PRIMARY KEY,\n    show_title TEXT,\n    start_date DATE,\n    end_date DATE,\n    genre TEXT,\n    episodes INT\n);\n\nINSERT INTO \"Actors\" (actor_id,first_name,last_name,birth_date,nationality) VALUES (1,'Al Pacino',NULL,19400425,'American'),(2,'Tom Hanks',NULL,19560709,'American'),(3,'Leonardo DiCaprio',NULL,19741111,'American'),(4,'Brad Pitt',NULL,19631218,'American'),(5,'Denzel Washington',NULL,19541227,'American');\nINSERT INTO \"Movies\" (movie_id,title,release_year,genre,novelist,playwright,film) VALUES (1,'The Godfather',1972,'Crime, Drama','Mario Puzo','Francis Ford Coppola','The Godfather'),(2,'Forrest Gump',1994,'Drama, Romance','Winston Groom','Robert Zemeckis','Forrest Gump'),(3,'Inception',2010,'Action, Adventure','Unknown','Christopher Nolan','Inception'),(4,'Pulp Fiction',1994,'Crime, Drama','Quentin Tarantino & Roger Avary','Quentin Tarantino','Pulp Fiction'),(5,'Jurassic Park',1993,'Adventure, Sci-Fi','Michael Crichton','Steven Spielberg','Jurassic Park');\nINSERT INTO \"Subscribers\" (subscriber_id,username,email,password) VALUES (1,'user001','user001@gmail.com','password001'),(2,'user002','user002@yahoo.com','password002'),(3,'user003','user003@hotmail.com','password003'),(4,'user004','user004@outlook.com','password004'),(5,'user005','user005@aol.com','password005');\nINSERT INTO \"TVShows\" (tvshow_id,show_title,start_date,end_date,genre,episodes) VALUES (1,'Breaking Bad',20080117,20130929,'Crime, Drama',62),(2,'Game of Thrones',20110417,20190519,'Fantasy, Adventure',73),(3,'Stranger Things',20160715,'Present','Horror, Mystery',42),(4,'Friends',19940922,20040506,'Comedy, Romance',236),(5,'Vikings',20131003,'Present','Historical drama',89);\n",
      "question": "List the movies and their release years, sort by their novelist.",
      "gold_queries": [
        "SELECT novelist, title, release_year\r\nFROM Movies\r\nORDER BY novelist, release_year;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List the movies and their release years sorted by the lexicographical order of the novelist names.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title, release_year FROM Movies ORDER BY novelist"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Streaming Service/vague_2cols_screenwriter/vague_2cols_screenwriter.sqlite",
      "db_dump": "CREATE TABLE Actors (\n    actor_id INTEGER PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    birth_date DATE,\n    nationality TEXT\n);\nCREATE TABLE Movies (\n    movie_id INTEGER PRIMARY KEY,\n    title TEXT,\n    release_year INTEGER,\n    genre TEXT,\n    novelist TEXT,\n    playwright TEXT,\n    film TEXT\n);\nCREATE TABLE Novelists (\n    novelist_id INTEGER PRIMARY KEY,\n    name TEXT\n);\nCREATE TABLE Playwrights (\n    playwright_id INTEGER PRIMARY KEY,\n    name TEXT\n);\nCREATE TABLE Subscribers (\n    subscriber_id INTEGER PRIMARY KEY,\n    username TEXT,\n    email TEXT,\n    password TEXT\n);\nCREATE TABLE TVShows (\n    tvshow_id INTEGER PRIMARY KEY,\n    show_title TEXT,\n    start_date DATE,\n    end_date DATE,\n    genre TEXT,\n    episodes INT\n);\n\nINSERT INTO \"Actors\" (actor_id,first_name,last_name,birth_date,nationality) VALUES (1,'Al Pacino',NULL,19400425,'American'),(2,'Tom Hanks',NULL,19560709,'American'),(3,'Leonardo DiCaprio',NULL,19741111,'American'),(4,'Brad Pitt',NULL,19631218,'American'),(5,'Denzel Washington',NULL,19541227,'American');\nINSERT INTO \"Movies\" (movie_id,title,release_year,genre,novelist,playwright,film) VALUES (1,'The Godfather',1972,'Crime, Drama','Mario Puzo','Francis Ford Coppola','The Godfather'),(2,'Forrest Gump',1994,'Drama, Romance','Winston Groom','Robert Zemeckis','Forrest Gump'),(3,'Inception',2010,'Action, Adventure','Unknown','Christopher Nolan','Inception'),(4,'Pulp Fiction',1994,'Crime, Drama','Quentin Tarantino & Roger Avary','Quentin Tarantino','Pulp Fiction'),(5,'Jurassic Park',1993,'Adventure, Sci-Fi','Michael Crichton','Steven Spielberg','Jurassic Park');\nINSERT INTO \"Subscribers\" (subscriber_id,username,email,password) VALUES (1,'user001','user001@gmail.com','password001'),(2,'user002','user002@yahoo.com','password002'),(3,'user003','user003@hotmail.com','password003'),(4,'user004','user004@outlook.com','password004'),(5,'user005','user005@aol.com','password005');\nINSERT INTO \"TVShows\" (tvshow_id,show_title,start_date,end_date,genre,episodes) VALUES (1,'Breaking Bad',20080117,20130929,'Crime, Drama',62),(2,'Game of Thrones',20110417,20190519,'Fantasy, Adventure',73),(3,'Stranger Things',20160715,'Present','Horror, Mystery',42),(4,'Friends',19940922,20040506,'Comedy, Romance',236),(5,'Vikings',20131003,'Present','Historical drama',89);\n",
      "question": "List the movies along with their release years, sorted by writer",
      "gold_queries": [
        "SELECT novelist, title, release_year\r\nFROM Movies\r\nORDER BY novelist, release_year;",
        "SELECT playwright, title, release_year\r\nFROM Movies\r\nORDER BY playwright, release_year;",
        "SELECT novelist, playwright, title, release_year\r\nFROM Movies\r\nORDER BY novelist, playwright, release_year;"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List the movies along with their release years, sorted by the date of birth of the writer.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT m.title, m.release_year\nFROM Movies m\nJOIN Novelists n ON m.novelist = n.name\nORDER BY (SELECT birth_date FROM Actors WHERE first_name || ' ' || last_name = n.name)"
          ]
        },
        {
          "interpretation": "List the movies along with their release years, sorted by the average length of words in the title in descending order.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title, release_year \nFROM Movies \nORDER BY (LENGTH(title) - LENGTH(REPLACE(title, ' ', ''))) / (LENGTH(title) - LENGTH(REPLACE(title, ' ', '')) + 1) DESC"
          ]
        },
        {
          "interpretation": "List the novels or plays along with the movies they are associated with, sorted by the writer's name.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT novelist, playwright, title \nFROM Movies \nORDER BY novelist, playwright"
          ]
        },
        {
          "interpretation": "List the unique writers along with the movies they have written, sorted by the writer's name.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT M.playwright, M.title \nFROM Movies M \nWHERE M.playwright != 'Unknown' \nORDER BY M.playwright"
          ]
        },
        {
          "interpretation": "List the movies along with their release years, grouped by unique writers.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT novelist, GROUP_CONCAT(title), release_year \nFROM Movies \nGROUP BY novelist, release_year"
          ]
        },
        {
          "interpretation": "List the unique writers along with the movies they have written, sorted by the count of movies written.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT playwright, COUNT(*) as movies_count, GROUP_CONCAT(title) as movies\nFROM Movies\nGROUP BY playwright\nORDER BY movies_count DESC"
          ]
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 0.3333333333333333,
        "precision": 0.16666666666666666,
        "one_found": true,
        "f1_score": 0.2222222222222222,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Streaming Service/vague_2cols_premiere_date/vague_2cols_premiere_date.sqlite",
      "db_dump": "CREATE TABLE Content (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT ,\n    title TEXT,\n    genre TEXT,\n    creator TEXT,\n    numEpisodesOrDuration INTEGER,\n    premiereMonth INTEGER,\n    premiereYear INTEGER,\n    season INT DEFAULT 1,\n    FOREIGN KEY(creator) REFERENCES Creators(id));\nCREATE TABLE Creators (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    birthYear INTEGER);\nCREATE TABLE Movies (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    genre TEXT,\n    director TEXT,\n    runtime INTEGER,\n    release_date DATE);\nCREATE TABLE Reviews (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    userId INTEGER,\n    contentId INTEGER,\n    rating INTEGER ,\n    reviewText TEXT,\n    FOREIGN KEY(userId) REFERENCES Users(id),\n    FOREIGN KEY(contentId) REFERENCES Content(id));\nCREATE TABLE Series (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    genre TEXT,\n    creator TEXT,\n    episodeCount INTEGER,\n    premiereDate DATE);\nCREATE TABLE Users (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    username TEXT,\n    password TEXT,\n    email TEXT,\n    subscriptionType TEXT );\n\nINSERT INTO \"Content\" (id,type,title,genre,creator,numEpisodesOrDuration,premiereMonth,premiereYear,season) VALUES (1,'TV Series','Stranger Things','Science Fiction','The Duffer Brothers',8,7,2016,1),(2,'Film','Inception','Action, Adventure, Sci-Fi','Christopher Nolan',128,7,2010,NULL);\nINSERT INTO \"Creators\" (id,name,birthYear) VALUES (1,'Quentin Tarantino',1963),(2,'James Cameron',1954);\nINSERT INTO \"Movies\" (id,title,genre,director,runtime,release_date) VALUES (1,'The Shawshank Redemption','Drama','Frank Darabont',142,'1994-09-23'),(2,'The Godfather','Crime','Francis Ford Coppola',175,'1972-03-24');\nINSERT INTO \"Reviews\" (id,userId,contentId,rating,reviewText) VALUES (1,1,1,5,'Great movie with a powerful story.'),(2,2,2,4,'Awesome series with amazing characters.');\nINSERT INTO \"Series\" (id,title,genre,creator,episodeCount,premiereDate) VALUES (1,'Breaking Bad','Crime Drama','Vince Gilligan',62,'2008-01-20'),(2,'Game of Thrones','Fantasy','David Benioff and D.B. Weiss',60,'2011-04-17');\nINSERT INTO \"Users\" (id,username,password,email,subscriptionType) VALUES (1,'user1','password1','user1@example.com','Premium'),(2,'user2','password2','user2@example.com','Standard');\n",
      "question": "What is the content type, title and premiere date where user rating is equal to 5",
      "gold_queries": [
        "Select type, title, premiereMonth FROM Content JOIN Reviews ON Reviews.Contentid=Content.id WHERE rating=5;",
        "Select type, title, premiereYear FROM Content JOIN Reviews ON Reviews.Contentid=Content.id WHERE rating=5;",
        "Select type, title, premiereMonth, premiereYear FROM Content JOIN Reviews ON Reviews.Contentid=Content.id WHERE rating=5;"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Find content types, titles, and premiere dates of all content where the corresponding content id has at least one review with a rating of 5",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT c.type, c.title, c.premiereMonth, c.premiereYear \nFROM Content c \nWHERE c.id IN (\n    SELECT r.contentId \n    FROM Reviews r \n    WHERE r.rating = 5\n)"
          ]
        },
        {
          "interpretation": "Where content type is 'TV Series' or 'Film' and title is 'The Shawshank Redemption' or Stranger Things, and premiere date is where user rating is equal to 5",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.title, C.type, C.premiereYear\nFROM Content C\nJOIN Reviews R ON C.id = R.contentId\nWHERE (C.type = 'TV Series' OR C.type = 'Film')\n  AND (C.title = 'The Shawshank Redemption' OR C.title = 'Stranger Things')\n  AND R.rating = 5"
          ]
        },
        {
          "interpretation": "Where content type is 'TV Series' or 'Film' and title is 'Stranger Things' and the rating of the corresponding content id's reviews is equal to 5",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT R.reviewText \nFROM Reviews R \nJOIN Content C ON R.contentId = C.id \nWHERE C.type IN ('TV Series', 'Film') \nAND C.title = 'Stranger Things' \nAND R.rating = 5"
          ]
        },
        {
          "interpretation": "Where content type is 'TV Series' or 'Film' and title is 'The Shawshank Redemption', and content type and title from the 'Reviews' table match a review with a rating of 5",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.type, C.title\nFROM Content C\nJOIN Reviews R ON C.id = R.contentId\nWHERE (C.type = 'TV Series' OR C.type = 'Film')\n  AND C.title = 'The Shawshank Redemption'\n  AND R.rating = 5"
          ]
        },
        {
          "interpretation": "Where content type is 'TV Series', 'Film', or 'Other content type' and title is 'Stranger Things', 'The Shawshank Redemption', or 'Other title' and the review from the Reviews table with a rating of 5 matches the content's id, primary key in the content table",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.title, C.type, R.reviewText\nFROM Content C\nJOIN Reviews R ON C.id = R.contentId\nWHERE C.type IN ('TV Series', 'Film', 'Other content type')\nAND C.title IN ('Stranger Things', 'The Shawshank Redemption', 'Other title')\nAND R.rating = 5"
          ]
        },
        {
          "interpretation": "Find content types, titles, and premiere dates of Content where a review of Content exists with rating 5",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT C.type, C.title, DATE(C.premiereMonth || '/01/' || C.premiereYear) AS premiereDate\nFROM Content C\nJOIN Reviews R ON C.id = R.contentId\nWHERE R.rating = 5"
          ]
        },
        {
          "interpretation": "What are the content types, titles, and premiere dates where user rating is equal to 5 and the rating is based on a review",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.type, C.title, (CASE WHEN C.type = 'TV Series' THEN C.premiereMonth || '/' || C.premiereYear ELSE STRFTIME('%Y-%m-%d', M.release_date) END) as premiereDate\nFROM Content C\nLEFT JOIN Movies M ON C.id = M.id\nJOIN Reviews R ON C.id = R.contentId\nWHERE R.rating = 5"
          ]
        }
      ],
      "num_unique_execution_results": 7,
      "interpretation_level_metrics": {
        "recall": 0.6666666666666666,
        "precision": 0.2857142857142857,
        "one_found": true,
        "f1_score": 0.4,
        "num_queries": 7,
        "num_unique_queries": 7,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Streaming Service/vague_2cols_premiere_date/vague_2cols_premiere_date.sqlite",
      "db_dump": "CREATE TABLE Content (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT ,\n    title TEXT,\n    genre TEXT,\n    creator TEXT,\n    numEpisodesOrDuration INTEGER,\n    premiereMonth INTEGER,\n    premiereYear INTEGER,\n    season INT DEFAULT 1,\n    FOREIGN KEY(creator) REFERENCES Creators(id));\nCREATE TABLE Creators (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    birthYear INTEGER);\nCREATE TABLE Movies (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    genre TEXT,\n    director TEXT,\n    runtime INTEGER,\n    release_date DATE);\nCREATE TABLE Reviews (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    userId INTEGER,\n    contentId INTEGER,\n    rating INTEGER ,\n    reviewText TEXT,\n    FOREIGN KEY(userId) REFERENCES Users(id),\n    FOREIGN KEY(contentId) REFERENCES Content(id));\nCREATE TABLE Series (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    genre TEXT,\n    creator TEXT,\n    episodeCount INTEGER,\n    premiereDate DATE);\nCREATE TABLE Users (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    username TEXT,\n    password TEXT,\n    email TEXT,\n    subscriptionType TEXT );\n\nINSERT INTO \"Content\" (id,type,title,genre,creator,numEpisodesOrDuration,premiereMonth,premiereYear,season) VALUES (1,'TV Series','Stranger Things','Science Fiction','The Duffer Brothers',8,7,2016,1),(2,'Film','Inception','Action, Adventure, Sci-Fi','Christopher Nolan',128,7,2010,NULL);\nINSERT INTO \"Creators\" (id,name,birthYear) VALUES (1,'Quentin Tarantino',1963),(2,'James Cameron',1954);\nINSERT INTO \"Movies\" (id,title,genre,director,runtime,release_date) VALUES (1,'The Shawshank Redemption','Drama','Frank Darabont',142,'1994-09-23'),(2,'The Godfather','Crime','Francis Ford Coppola',175,'1972-03-24');\nINSERT INTO \"Reviews\" (id,userId,contentId,rating,reviewText) VALUES (1,1,1,5,'Great movie with a powerful story.'),(2,2,2,4,'Awesome series with amazing characters.');\nINSERT INTO \"Series\" (id,title,genre,creator,episodeCount,premiereDate) VALUES (1,'Breaking Bad','Crime Drama','Vince Gilligan',62,'2008-01-20'),(2,'Game of Thrones','Fantasy','David Benioff and D.B. Weiss',60,'2011-04-17');\nINSERT INTO \"Users\" (id,username,password,email,subscriptionType) VALUES (1,'user1','password1','user1@example.com','Premium'),(2,'user2','password2','user2@example.com','Standard');\n",
      "question": "What is the content type, title and premiere month and year where user rating is equal to 5",
      "gold_queries": [
        "Select type, title, premiereMonth, premiereYear FROM Content JOIN Reviews ON Reviews.Contentid=Content.id WHERE rating=5;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What is the content type and title of content where the user rating equals 5, and also provide the premiere month and year.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Content.type, Content.title, Content.premiereMonth, Content.premiereYear\nFROM Content\nJOIN Reviews ON Content.id = Reviews.contentId\nWHERE Reviews.rating = 5"
          ]
        },
        {
          "interpretation": "What is the content type, title, and premiere year of content where the user rating equals 5, and the content is a TV Series.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.type, C.title, C.premiereYear\nFROM Content C\nJOIN Reviews R ON C.id = R.contentId\nWHERE R.rating = 5 AND C.type = 'TV Series'"
          ]
        },
        {
          "interpretation": "What is the title and premiere year of content where the user rating equals 5 and the content is a TV Series.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.title, C.premiereYear\nFROM Content C\nJOIN Reviews R ON C.id = R.contentId\nWHERE R.rating = 5 AND C.type = 'TV Series'"
          ]
        },
        {
          "interpretation": "What is the genre, premiere month, and year of content where the user rating equals 5.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.genre, C.premiereMonth, C.premiereYear\nFROM Content C\nJOIN Reviews R ON C.id = R.contentId\nWHERE R.rating = 5"
          ]
        },
        {
          "interpretation": "What is the content type and premiere month of TV Series where user rating is equal to 5.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.type, C.premiereMonth \nFROM Content C \nJOIN Reviews R ON C.id = R.contentId \nWHERE C.type = 'TV Series' AND R.rating = 5"
          ]
        },
        {
          "interpretation": "What are the content type and title of content where the user rating equals 5 and the content type is a TV Series, and also provide the premiere month.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT c.type, c.title, c.premiereMonth \nFROM Content c \nJOIN Reviews r ON c.id = r.contentId \nWHERE r.rating = 5 AND c.type = 'TV Series'"
          ]
        },
        {
          "interpretation": "What is the premiere month and year of content where the user rating equals 5 and the content type is a TV Series.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.premiereMonth, C.premiereYear\nFROM Content C\nJOIN Reviews R ON C.id = R.contentId\nWHERE R.rating = 5 AND C.type = 'TV Series'"
          ]
        },
        {
          "interpretation": "What are the content type and title of movies where the user rating equals 5, and also provide the premiere month and year.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.type, C.title, C.premiereMonth, C.premiereYear \nFROM Content C \nJOIN Reviews R ON C.id = R.contentId \nWHERE R.rating = 5 AND C.type = 'Film'"
          ]
        }
      ],
      "num_unique_execution_results": 8,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.125,
        "one_found": true,
        "f1_score": 0.2222222222222222,
        "num_queries": 8,
        "num_unique_queries": 8,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Streaming Service/vague_2cols_premiere_date/vague_2cols_premiere_date.sqlite",
      "db_dump": "CREATE TABLE Content (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT ,\n    title TEXT,\n    genre TEXT,\n    creator TEXT,\n    numEpisodesOrDuration INTEGER,\n    premiereMonth INTEGER,\n    premiereYear INTEGER,\n    season INT DEFAULT 1,\n    FOREIGN KEY(creator) REFERENCES Creators(id));\nCREATE TABLE Creators (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    birthYear INTEGER);\nCREATE TABLE Movies (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    genre TEXT,\n    director TEXT,\n    runtime INTEGER,\n    release_date DATE);\nCREATE TABLE Reviews (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    userId INTEGER,\n    contentId INTEGER,\n    rating INTEGER ,\n    reviewText TEXT,\n    FOREIGN KEY(userId) REFERENCES Users(id),\n    FOREIGN KEY(contentId) REFERENCES Content(id));\nCREATE TABLE Series (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    genre TEXT,\n    creator TEXT,\n    episodeCount INTEGER,\n    premiereDate DATE);\nCREATE TABLE Users (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    username TEXT,\n    password TEXT,\n    email TEXT,\n    subscriptionType TEXT );\n\nINSERT INTO \"Content\" (id,type,title,genre,creator,numEpisodesOrDuration,premiereMonth,premiereYear,season) VALUES (1,'TV Series','Stranger Things','Science Fiction','The Duffer Brothers',8,7,2016,1),(2,'Film','Inception','Action, Adventure, Sci-Fi','Christopher Nolan',128,7,2010,NULL);\nINSERT INTO \"Creators\" (id,name,birthYear) VALUES (1,'Quentin Tarantino',1963),(2,'James Cameron',1954);\nINSERT INTO \"Movies\" (id,title,genre,director,runtime,release_date) VALUES (1,'The Shawshank Redemption','Drama','Frank Darabont',142,'1994-09-23'),(2,'The Godfather','Crime','Francis Ford Coppola',175,'1972-03-24');\nINSERT INTO \"Reviews\" (id,userId,contentId,rating,reviewText) VALUES (1,1,1,5,'Great movie with a powerful story.'),(2,2,2,4,'Awesome series with amazing characters.');\nINSERT INTO \"Series\" (id,title,genre,creator,episodeCount,premiereDate) VALUES (1,'Breaking Bad','Crime Drama','Vince Gilligan',62,'2008-01-20'),(2,'Game of Thrones','Fantasy','David Benioff and D.B. Weiss',60,'2011-04-17');\nINSERT INTO \"Users\" (id,username,password,email,subscriptionType) VALUES (1,'user1','password1','user1@example.com','Premium'),(2,'user2','password2','user2@example.com','Standard');\n",
      "question": "What is the content type, title and premiere year where user rating is equal to 5",
      "gold_queries": [
        "Select type, title, premiereYear FROM Content JOIN Reviews ON Reviews.Contentid=Content.id WHERE rating=5;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "The content type, title and premiere year of user 1's highest rated content.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT C.type, C.title, C.premiereYear\nFROM Content C\nJOIN Reviews R ON C.id = R.contentId\nWHERE R.userId = 1\nORDER BY R.rating DESC\nLIMIT 1"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "one_found": true,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Streaming Service/vague_2cols_premiere_date/vague_2cols_premiere_date.sqlite",
      "db_dump": "CREATE TABLE Content (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT ,\n    title TEXT,\n    genre TEXT,\n    creator TEXT,\n    numEpisodesOrDuration INTEGER,\n    premiereMonth INTEGER,\n    premiereYear INTEGER,\n    season INT DEFAULT 1,\n    FOREIGN KEY(creator) REFERENCES Creators(id));\nCREATE TABLE Creators (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    birthYear INTEGER);\nCREATE TABLE Movies (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    genre TEXT,\n    director TEXT,\n    runtime INTEGER,\n    release_date DATE);\nCREATE TABLE Reviews (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    userId INTEGER,\n    contentId INTEGER,\n    rating INTEGER ,\n    reviewText TEXT,\n    FOREIGN KEY(userId) REFERENCES Users(id),\n    FOREIGN KEY(contentId) REFERENCES Content(id));\nCREATE TABLE Series (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    genre TEXT,\n    creator TEXT,\n    episodeCount INTEGER,\n    premiereDate DATE);\nCREATE TABLE Users (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    username TEXT,\n    password TEXT,\n    email TEXT,\n    subscriptionType TEXT );\n\nINSERT INTO \"Content\" (id,type,title,genre,creator,numEpisodesOrDuration,premiereMonth,premiereYear,season) VALUES (1,'TV Series','Stranger Things','Science Fiction','The Duffer Brothers',8,7,2016,1),(2,'Film','Inception','Action, Adventure, Sci-Fi','Christopher Nolan',128,7,2010,NULL);\nINSERT INTO \"Creators\" (id,name,birthYear) VALUES (1,'Quentin Tarantino',1963),(2,'James Cameron',1954);\nINSERT INTO \"Movies\" (id,title,genre,director,runtime,release_date) VALUES (1,'The Shawshank Redemption','Drama','Frank Darabont',142,'1994-09-23'),(2,'The Godfather','Crime','Francis Ford Coppola',175,'1972-03-24');\nINSERT INTO \"Reviews\" (id,userId,contentId,rating,reviewText) VALUES (1,1,1,5,'Great movie with a powerful story.'),(2,2,2,4,'Awesome series with amazing characters.');\nINSERT INTO \"Series\" (id,title,genre,creator,episodeCount,premiereDate) VALUES (1,'Breaking Bad','Crime Drama','Vince Gilligan',62,'2008-01-20'),(2,'Game of Thrones','Fantasy','David Benioff and D.B. Weiss',60,'2011-04-17');\nINSERT INTO \"Users\" (id,username,password,email,subscriptionType) VALUES (1,'user1','password1','user1@example.com','Premium'),(2,'user2','password2','user2@example.com','Standard');\n",
      "question": "What's the type, name, genre and premiere month of the content?",
      "gold_queries": [
        "SELECT type, title, genre, premiereMonth FROM Content"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Select the type, name, genre, and premiere month from the table where the content's duration or runtime corresponds with a single premiere month.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.type, CR.name, C.genre, C.premiereMonth\nFROM Content C\nJOIN Creators CR ON C.creator = CR.id\nWHERE C.numEpisodesOrDuration BETWEEN 28 AND 31"
          ]
        },
        {
          "interpretation": "Select the type, name, genre, and premiere month from a table where content might have premiered on a different month (e.g., a movie's release month rather than premiere month).",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    'Movie' AS type, \n    title, \n    genre, \n    CAST(STRFTIME('%m', release_date) AS INTEGER) AS premiereMonth \nFROM \n    Movies\nUNION\nSELECT \n    type, \n    title, \n    genre, \n    premiereMonth \nFROM \n    Content"
          ]
        },
        {
          "interpretation": "Select the type, genre, and premiere month along with an individual associated with the content (e.g., creator, director).",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT type, genre, premiereMonth, CASE WHEN type = 'TV Series' THEN creator WHEN type = 'Film' THEN (SELECT director FROM Movies WHERE Movies.title = Content.title) END AS associated_individual FROM Content"
          ]
        },
        {
          "interpretation": "Select the type, name, genre, and premiere month from the table 'Series'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT genre, creator, premiereMonth FROM Content WHERE type = 'TV Series'"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Streaming Service/vague_2cols_premiere_date/vague_2cols_premiere_date.sqlite",
      "db_dump": "CREATE TABLE Content (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT ,\n    title TEXT,\n    genre TEXT,\n    creator TEXT,\n    numEpisodesOrDuration INTEGER,\n    premiereMonth INTEGER,\n    premiereYear INTEGER,\n    season INT DEFAULT 1,\n    FOREIGN KEY(creator) REFERENCES Creators(id));\nCREATE TABLE Creators (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    birthYear INTEGER);\nCREATE TABLE Movies (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    genre TEXT,\n    director TEXT,\n    runtime INTEGER,\n    release_date DATE);\nCREATE TABLE Reviews (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    userId INTEGER,\n    contentId INTEGER,\n    rating INTEGER ,\n    reviewText TEXT,\n    FOREIGN KEY(userId) REFERENCES Users(id),\n    FOREIGN KEY(contentId) REFERENCES Content(id));\nCREATE TABLE Series (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    genre TEXT,\n    creator TEXT,\n    episodeCount INTEGER,\n    premiereDate DATE);\nCREATE TABLE Users (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    username TEXT,\n    password TEXT,\n    email TEXT,\n    subscriptionType TEXT );\n\nINSERT INTO \"Content\" (id,type,title,genre,creator,numEpisodesOrDuration,premiereMonth,premiereYear,season) VALUES (1,'TV Series','Stranger Things','Science Fiction','The Duffer Brothers',8,7,2016,1),(2,'Film','Inception','Action, Adventure, Sci-Fi','Christopher Nolan',128,7,2010,NULL);\nINSERT INTO \"Creators\" (id,name,birthYear) VALUES (1,'Quentin Tarantino',1963),(2,'James Cameron',1954);\nINSERT INTO \"Movies\" (id,title,genre,director,runtime,release_date) VALUES (1,'The Shawshank Redemption','Drama','Frank Darabont',142,'1994-09-23'),(2,'The Godfather','Crime','Francis Ford Coppola',175,'1972-03-24');\nINSERT INTO \"Reviews\" (id,userId,contentId,rating,reviewText) VALUES (1,1,1,5,'Great movie with a powerful story.'),(2,2,2,4,'Awesome series with amazing characters.');\nINSERT INTO \"Series\" (id,title,genre,creator,episodeCount,premiereDate) VALUES (1,'Breaking Bad','Crime Drama','Vince Gilligan',62,'2008-01-20'),(2,'Game of Thrones','Fantasy','David Benioff and D.B. Weiss',60,'2011-04-17');\nINSERT INTO \"Users\" (id,username,password,email,subscriptionType) VALUES (1,'user1','password1','user1@example.com','Premium'),(2,'user2','password2','user2@example.com','Standard');\n",
      "question": "What is the content type, title and premiere month where user rating is equal to 5",
      "gold_queries": [
        "Select type, title, premiereMonth FROM Content JOIN Reviews ON Reviews.Contentid=Content.id WHERE rating=5;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Content type equals 'TV Series' and title equals 'Breaking Bad' and premiere month equals 7.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT type, title, premiereMonth FROM Content WHERE type = 'TV Series' AND title = 'Breaking Bad' AND premiereMonth = 7"
          ]
        },
        {
          "interpretation": "Content type equals 'TV Series' and title equals 'Stranger Things' and premiere month equals 7.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT id, type, title, genre, creator, numEpisodesOrDuration, premiereMonth, premiereYear, season\nFROM Content\nWHERE type = 'TV Series' AND title = 'Stranger Things' AND premiereMonth = 7"
          ]
        },
        {
          "interpretation": "Any content type and title equals 'Inception' and premiere month equals 7.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT type, title FROM Content WHERE title = 'Inception' AND premiereMonth = 7"
          ]
        },
        {
          "interpretation": "Content type equals 'Film' and title equals 'Inception' and premiere month equals 7.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title, genre, creator, numEpisodesOrDuration, premiereMonth, premiereYear\nFROM Content\nWHERE type = 'Film' AND title = 'Inception' AND premiereMonth = 7"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Streaming Service/vague_2cols_premiere_date/vague_2cols_premiere_date.sqlite",
      "db_dump": "CREATE TABLE Content (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT ,\n    title TEXT,\n    genre TEXT,\n    creator TEXT,\n    numEpisodesOrDuration INTEGER,\n    premiereMonth INTEGER,\n    premiereYear INTEGER,\n    season INT DEFAULT 1,\n    FOREIGN KEY(creator) REFERENCES Creators(id));\nCREATE TABLE Creators (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    birthYear INTEGER);\nCREATE TABLE Movies (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    genre TEXT,\n    director TEXT,\n    runtime INTEGER,\n    release_date DATE);\nCREATE TABLE Reviews (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    userId INTEGER,\n    contentId INTEGER,\n    rating INTEGER ,\n    reviewText TEXT,\n    FOREIGN KEY(userId) REFERENCES Users(id),\n    FOREIGN KEY(contentId) REFERENCES Content(id));\nCREATE TABLE Series (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    genre TEXT,\n    creator TEXT,\n    episodeCount INTEGER,\n    premiereDate DATE);\nCREATE TABLE Users (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    username TEXT,\n    password TEXT,\n    email TEXT,\n    subscriptionType TEXT );\n\nINSERT INTO \"Content\" (id,type,title,genre,creator,numEpisodesOrDuration,premiereMonth,premiereYear,season) VALUES (1,'TV Series','Stranger Things','Science Fiction','The Duffer Brothers',8,7,2016,1),(2,'Film','Inception','Action, Adventure, Sci-Fi','Christopher Nolan',128,7,2010,NULL);\nINSERT INTO \"Creators\" (id,name,birthYear) VALUES (1,'Quentin Tarantino',1963),(2,'James Cameron',1954);\nINSERT INTO \"Movies\" (id,title,genre,director,runtime,release_date) VALUES (1,'The Shawshank Redemption','Drama','Frank Darabont',142,'1994-09-23'),(2,'The Godfather','Crime','Francis Ford Coppola',175,'1972-03-24');\nINSERT INTO \"Reviews\" (id,userId,contentId,rating,reviewText) VALUES (1,1,1,5,'Great movie with a powerful story.'),(2,2,2,4,'Awesome series with amazing characters.');\nINSERT INTO \"Series\" (id,title,genre,creator,episodeCount,premiereDate) VALUES (1,'Breaking Bad','Crime Drama','Vince Gilligan',62,'2008-01-20'),(2,'Game of Thrones','Fantasy','David Benioff and D.B. Weiss',60,'2011-04-17');\nINSERT INTO \"Users\" (id,username,password,email,subscriptionType) VALUES (1,'user1','password1','user1@example.com','Premium'),(2,'user2','password2','user2@example.com','Standard');\n",
      "question": "What's the type, name, genre and premiere month and year of the content?",
      "gold_queries": [
        "SELECT type, title, genre, premiereMonth, premiereYear FROM Content"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What are the genre and premiere month and year for the type of content where the title is 'Stranger Things'?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT genre, premiereMonth, premiereYear FROM Content WHERE title = 'Stranger Things'"
          ]
        },
        {
          "interpretation": "What type of content, name of the content, and genre where the premiere month and year is July 2016?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT type, title, genre FROM Content WHERE premiereMonth = 7 AND premiereYear = 2016"
          ]
        },
        {
          "interpretation": "What type of content has a type of 'TV Series', what is the name for type of content where the title is 'Stranger Things' and what are the genre and premiere month and year of 'Stranger Things'?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT type, title, genre, premiereMonth, premiereYear FROM Content WHERE title = 'Stranger Things'"
          ]
        },
        {
          "interpretation": "What's the type, name, and premiere date of the content where the title is 'Stranger Things'?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Content.type, Creators.name, Content.premiereYear \nFROM Content \nJOIN Creators ON Content.creator = Creators.id \nWHERE Content.title = 'Stranger Things'"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Streaming Service/vague_2cols_premiere_date/vague_2cols_premiere_date.sqlite",
      "db_dump": "CREATE TABLE Content (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT ,\n    title TEXT,\n    genre TEXT,\n    creator TEXT,\n    numEpisodesOrDuration INTEGER,\n    premiereMonth INTEGER,\n    premiereYear INTEGER,\n    season INT DEFAULT 1,\n    FOREIGN KEY(creator) REFERENCES Creators(id));\nCREATE TABLE Creators (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    birthYear INTEGER);\nCREATE TABLE Movies (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    genre TEXT,\n    director TEXT,\n    runtime INTEGER,\n    release_date DATE);\nCREATE TABLE Reviews (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    userId INTEGER,\n    contentId INTEGER,\n    rating INTEGER ,\n    reviewText TEXT,\n    FOREIGN KEY(userId) REFERENCES Users(id),\n    FOREIGN KEY(contentId) REFERENCES Content(id));\nCREATE TABLE Series (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    genre TEXT,\n    creator TEXT,\n    episodeCount INTEGER,\n    premiereDate DATE);\nCREATE TABLE Users (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    username TEXT,\n    password TEXT,\n    email TEXT,\n    subscriptionType TEXT );\n\nINSERT INTO \"Content\" (id,type,title,genre,creator,numEpisodesOrDuration,premiereMonth,premiereYear,season) VALUES (1,'TV Series','Stranger Things','Science Fiction','The Duffer Brothers',8,7,2016,1),(2,'Film','Inception','Action, Adventure, Sci-Fi','Christopher Nolan',128,7,2010,NULL);\nINSERT INTO \"Creators\" (id,name,birthYear) VALUES (1,'Quentin Tarantino',1963),(2,'James Cameron',1954);\nINSERT INTO \"Movies\" (id,title,genre,director,runtime,release_date) VALUES (1,'The Shawshank Redemption','Drama','Frank Darabont',142,'1994-09-23'),(2,'The Godfather','Crime','Francis Ford Coppola',175,'1972-03-24');\nINSERT INTO \"Reviews\" (id,userId,contentId,rating,reviewText) VALUES (1,1,1,5,'Great movie with a powerful story.'),(2,2,2,4,'Awesome series with amazing characters.');\nINSERT INTO \"Series\" (id,title,genre,creator,episodeCount,premiereDate) VALUES (1,'Breaking Bad','Crime Drama','Vince Gilligan',62,'2008-01-20'),(2,'Game of Thrones','Fantasy','David Benioff and D.B. Weiss',60,'2011-04-17');\nINSERT INTO \"Users\" (id,username,password,email,subscriptionType) VALUES (1,'user1','password1','user1@example.com','Premium'),(2,'user2','password2','user2@example.com','Standard');\n",
      "question": "What's the type, name, genre and premiere year of the content?",
      "gold_queries": [
        "SELECT type, title, genre, premiereYear FROM Content"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Type, name, genre and premiere year of the content referred to in the question are the type, name of the creator, genre, and premiere year of the content from the \"Content\" table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.type, CR.name, C.genre, C.premiereYear \nFROM Content C \nJOIN Creators CR ON C.creator = CR.id"
          ]
        },
        {
          "interpretation": "Type, name, genre and premiere year of any content where the number of episodes or duration is greater than 8 are the type, name of the creator, genre, and premiere year of the content from the \"Content\" table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT type, (SELECT name FROM Creators WHERE id = Content.creator), genre, premiereYear FROM Content WHERE numEpisodesOrDuration > 8"
          ]
        },
        {
          "interpretation": "Type, name, genre and premiere year of the series \"Breaking Bad\" are the type, name, genre, and premiere year of the series from the \"Series\" table with the specified title.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT 'TV Series' AS type, title, genre, STRFTIME('%Y', premiereDate) AS premiereYear FROM Series WHERE title = 'Breaking Bad'"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Streaming Service/vague_2cols_premiere_date/vague_2cols_premiere_date.sqlite",
      "db_dump": "CREATE TABLE Content (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT ,\n    title TEXT,\n    genre TEXT,\n    creator TEXT,\n    numEpisodesOrDuration INTEGER,\n    premiereMonth INTEGER,\n    premiereYear INTEGER,\n    season INT DEFAULT 1,\n    FOREIGN KEY(creator) REFERENCES Creators(id));\nCREATE TABLE Creators (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    birthYear INTEGER);\nCREATE TABLE Movies (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    genre TEXT,\n    director TEXT,\n    runtime INTEGER,\n    release_date DATE);\nCREATE TABLE Reviews (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    userId INTEGER,\n    contentId INTEGER,\n    rating INTEGER ,\n    reviewText TEXT,\n    FOREIGN KEY(userId) REFERENCES Users(id),\n    FOREIGN KEY(contentId) REFERENCES Content(id));\nCREATE TABLE Series (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    genre TEXT,\n    creator TEXT,\n    episodeCount INTEGER,\n    premiereDate DATE);\nCREATE TABLE Users (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    username TEXT,\n    password TEXT,\n    email TEXT,\n    subscriptionType TEXT );\n\nINSERT INTO \"Content\" (id,type,title,genre,creator,numEpisodesOrDuration,premiereMonth,premiereYear,season) VALUES (1,'TV Series','Stranger Things','Science Fiction','The Duffer Brothers',8,7,2016,1),(2,'Film','Inception','Action, Adventure, Sci-Fi','Christopher Nolan',128,7,2010,NULL);\nINSERT INTO \"Creators\" (id,name,birthYear) VALUES (1,'Quentin Tarantino',1963),(2,'James Cameron',1954);\nINSERT INTO \"Movies\" (id,title,genre,director,runtime,release_date) VALUES (1,'The Shawshank Redemption','Drama','Frank Darabont',142,'1994-09-23'),(2,'The Godfather','Crime','Francis Ford Coppola',175,'1972-03-24');\nINSERT INTO \"Reviews\" (id,userId,contentId,rating,reviewText) VALUES (1,1,1,5,'Great movie with a powerful story.'),(2,2,2,4,'Awesome series with amazing characters.');\nINSERT INTO \"Series\" (id,title,genre,creator,episodeCount,premiereDate) VALUES (1,'Breaking Bad','Crime Drama','Vince Gilligan',62,'2008-01-20'),(2,'Game of Thrones','Fantasy','David Benioff and D.B. Weiss',60,'2011-04-17');\nINSERT INTO \"Users\" (id,username,password,email,subscriptionType) VALUES (1,'user1','password1','user1@example.com','Premium'),(2,'user2','password2','user2@example.com','Standard');\n",
      "question": "What's the type, name, genre and premiere date of the content?",
      "gold_queries": [
        "SELECT type, title, genre, premiereMonth FROM Content",
        "SELECT type, title, genre, premiereYear FROM Content",
        "SELECT type, title, genre, premiereMonth, premiereYear FROM Content"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "The type, name, genre, and premiere date of the content sorted by release year or premiere date.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.type, Cr.name, C.genre, \n       CASE \n           WHEN C.type = 'Film' THEN M.release_date \n           WHEN C.type = 'TV Series' THEN date(C.premiereMonth || '/' || '01' || '/' || C.premiereYear) \n           WHEN C.type = 'Series' THEN S.premiereDate \n       END AS premiere_date\nFROM Content C\nLEFT JOIN Creators Cr ON C.creator = Cr.id\nLEFT JOIN Movies M ON C.id = M.id\nLEFT JOIN Series S ON C.id = S.id\nORDER BY premiere_date"
          ]
        },
        {
          "interpretation": "The type, name, genre, and premiere date of the content that matches specific title or title pattern.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.type, creator.name, C.genre, C.premiereYear, C.premiereMonth\nFROM Content C\nJOIN Creators creator ON C.creator = creator.id\nWHERE C.title LIKE '%specific title or title pattern%'"
          ]
        },
        {
          "interpretation": "The type, name, genre, and premiere date of all content in the database.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.type, CR.name, C.genre, CASE WHEN C.type = 'TV Series' THEN (SELECT premiereDate FROM Series WHERE id = C.id) WHEN C.type = 'Film' THEN (SELECT release_date FROM Movies WHERE title = C.title) END AS premiereDate\nFROM Content C\nLEFT JOIN Creators CR ON C.creator = CR.id"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Construction/vague_2cols_maintenance_cost/vague_2cols_maintenance_cost.sqlite",
      "db_dump": "CREATE TABLE Equipment(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    EquipName TEXT,\n    PurchasePrice REAL,\n    RentalRate REAL,\n    DailyUsage INT);\nCREATE TABLE Materials(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    MaterialName TEXT,\n    Quantity INT,\n    UnitCost REAL);\nCREATE TABLE Project (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    StartDate DATE,\n    EndDate DATE,\n    Monetary_Value REAL,\n    Percentage_Of_Budget REAL,\n    Infrastructure TEXT);\nCREATE TABLE Worker(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    JobTitle TEXT);\n\nINSERT INTO \"Equipment\" (id,EquipName,PurchasePrice,RentalRate,DailyUsage) VALUES (1,'Excavator',20000.0,1000.0,8),(2,'Crane',30000.0,1500.0,6);\nINSERT INTO \"Materials\" (id,MaterialName,Quantity,UnitCost) VALUES (1,'Concrete Blocks',500,5.0),(2,'Bricks',300,3.5);\nINSERT INTO \"Project\" (id,Name,StartDate,EndDate,Monetary_Value,Percentage_Of_Budget,Infrastructure) VALUES (1,'Project1','2023-01-01','2023-06-01',500000.0,75.0,'Residential Building'),(2,'Project2','2023-02-01','2023-08-01',900000.0,80.0,'Commercial Complex');\nINSERT INTO \"Worker\" (id,FirstName,LastName,JobTitle) VALUES (1,'John','Doe','Carpenter'),(2,'Jane','Smith','Electrician');\n",
      "question": "What's the monetary value of the longest project?",
      "gold_queries": [
        "SELECT Monetary_Value\r\nFROM Project\r\nWHERE JULIANDAY(EndDate) - JULIANDAY(StartDate) = (\r\n    SELECT MAX(JULIANDAY(EndDate) - JULIANDAY(StartDate))\r\n    FROM Project\r\n)"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "The monetary value of the project with the greatest difference between start and end dates.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Monetary_Value \nFROM Project \nORDER BY (EndDate - StartDate) DESC \nLIMIT 1"
          ]
        },
        {
          "interpretation": "The monetary value of the project that started earliest and ended latest.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Monetary_Value FROM Project WHERE StartDate = (SELECT MIN(StartDate) FROM Project) AND EndDate = (SELECT MAX(EndDate) FROM Project)"
          ]
        },
        {
          "interpretation": "The monetary value of the project with the longest end date.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Monetary_Value FROM Project WHERE EndDate = (SELECT MAX(EndDate) FROM Project)"
          ]
        },
        {
          "interpretation": "The monetary value of the project that corresponds to the highest or lowest percentage of the overall budget.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Monetary_Value FROM Project WHERE Percentage_Of_Budget = (SELECT MAX(Percentage_Of_Budget) FROM Project)\nUNION\nSELECT Monetary_Value FROM Project WHERE Percentage_Of_Budget = (SELECT MIN(Percentage_Of_Budget) FROM Project)"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "one_found": true,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Construction/vague_2cols_maintenance_cost/vague_2cols_maintenance_cost.sqlite",
      "db_dump": "CREATE TABLE Equipment(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    EquipName TEXT,\n    PurchasePrice REAL,\n    RentalRate REAL,\n    DailyUsage INT);\nCREATE TABLE Materials(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    MaterialName TEXT,\n    Quantity INT,\n    UnitCost REAL);\nCREATE TABLE Project (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    StartDate DATE,\n    EndDate DATE,\n    Monetary_Value REAL,\n    Percentage_Of_Budget REAL,\n    Infrastructure TEXT);\nCREATE TABLE Worker(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    JobTitle TEXT);\n\nINSERT INTO \"Equipment\" (id,EquipName,PurchasePrice,RentalRate,DailyUsage) VALUES (1,'Excavator',20000.0,1000.0,8),(2,'Crane',30000.0,1500.0,6);\nINSERT INTO \"Materials\" (id,MaterialName,Quantity,UnitCost) VALUES (1,'Concrete Blocks',500,5.0),(2,'Bricks',300,3.5);\nINSERT INTO \"Project\" (id,Name,StartDate,EndDate,Monetary_Value,Percentage_Of_Budget,Infrastructure) VALUES (1,'Project1','2023-01-01','2023-06-01',500000.0,75.0,'Residential Building'),(2,'Project2','2023-02-01','2023-08-01',900000.0,80.0,'Commercial Complex');\nINSERT INTO \"Worker\" (id,FirstName,LastName,JobTitle) VALUES (1,'John','Doe','Carpenter'),(2,'Jane','Smith','Electrician');\n",
      "question": "What's the maintenance cost of Residential Building?",
      "gold_queries": [
        "SELECT Monetary_Value\r\nFROM Project\r\nWHERE Infrastructure = \"Residential Building\"",
        "SELECT Percentage_Of_Budget\r\nFROM Project\r\nWHERE Infrastructure = \"Residential Building\"",
        "SELECT Monetary_Value, Percentage_Of_Budget\r\nFROM Project\r\nWHERE Infrastructure = \"Residential Building\""
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "The cost compromised for the maintenance of Residential Building.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Monetary_Value\nFROM Project\nWHERE Infrastructure = 'Residential Building'"
          ]
        },
        {
          "interpretation": "The actual cost of maintaining Residential Building.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT SUM(E.PurchasePrice * E.DailyUsage) + SUM(M.Quantity * M.UnitCost) AS TotalCost\nFROM Project P\nJOIN Equipment E ON 1=1\nJOIN Materials M ON 1=1\nWHERE P.Infrastructure = 'Residential Building'"
          ]
        },
        {
          "interpretation": "The tax or fees associated with Residential Building.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Monetary_Value * (1 - Percentage_Of_Budget / 100) AS Tax_Fees\nFROM Project\nWHERE Infrastructure = 'Residential Building'"
          ]
        },
        {
          "interpretation": "The overhead or operational cost incurred for Residential Building.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT SUM(E.RentalRate * E.DailyUsage) + SUM(M.Quantity * M.UnitCost) AS OperationalCost\nFROM Equipment E, Materials M, Project P\nWHERE P.Name = 'Project1'"
          ]
        },
        {
          "interpretation": "The holding cost or carrying cost of Residential Building.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Monetary_Value * 0.05 AS HoldingCost\nFROM Project\nWHERE Infrastructure = 'Residential Building'"
          ]
        },
        {
          "interpretation": "The usage-based cost of Residential Building.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT SUM(E.DailyUsage * E.RentalRate) AS UsageBasedCost\nFROM Equipment E\nJOIN Project P ON E.id = P.id\nWHERE P.Infrastructure = 'Residential Building'"
          ]
        },
        {
          "interpretation": "The hours of labor or man-hours required for maintenance of Residential Building.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT SUM(T2.DailyUsage) * 365 / 12 AS ManHours\nFROM Project AS T1\nJOIN Equipment AS T2 ON T1.id = T2.id\nWHERE T1.Infrastructure = 'Residential Building'"
          ]
        }
      ],
      "num_unique_execution_results": 7,
      "interpretation_level_metrics": {
        "recall": 0.3333333333333333,
        "precision": 0.14285714285714285,
        "one_found": true,
        "f1_score": 0.2,
        "num_queries": 7,
        "num_unique_queries": 7,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Construction/vague_2cols_maintenance_cost/vague_2cols_maintenance_cost.sqlite",
      "db_dump": "CREATE TABLE Equipment(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    EquipName TEXT,\n    PurchasePrice REAL,\n    RentalRate REAL,\n    DailyUsage INT);\nCREATE TABLE Materials(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    MaterialName TEXT,\n    Quantity INT,\n    UnitCost REAL);\nCREATE TABLE Project (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    StartDate DATE,\n    EndDate DATE,\n    Monetary_Value REAL,\n    Percentage_Of_Budget REAL,\n    Infrastructure TEXT);\nCREATE TABLE Worker(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    JobTitle TEXT);\n\nINSERT INTO \"Equipment\" (id,EquipName,PurchasePrice,RentalRate,DailyUsage) VALUES (1,'Excavator',20000.0,1000.0,8),(2,'Crane',30000.0,1500.0,6);\nINSERT INTO \"Materials\" (id,MaterialName,Quantity,UnitCost) VALUES (1,'Concrete Blocks',500,5.0),(2,'Bricks',300,3.5);\nINSERT INTO \"Project\" (id,Name,StartDate,EndDate,Monetary_Value,Percentage_Of_Budget,Infrastructure) VALUES (1,'Project1','2023-01-01','2023-06-01',500000.0,75.0,'Residential Building'),(2,'Project2','2023-02-01','2023-08-01',900000.0,80.0,'Commercial Complex');\nINSERT INTO \"Worker\" (id,FirstName,LastName,JobTitle) VALUES (1,'John','Doe','Carpenter'),(2,'Jane','Smith','Electrician');\n",
      "question": "How much money and what percentage of the budget can we use for maintenance on the residential building?",
      "gold_queries": [
        "SELECT Monetary_Value, Percentage_Of_Budget\r\nFROM Project\r\nWHERE Infrastructure = \"Residential Building\""
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What is the allocated percentage of budget and total value for maintenance expenses of a residential building project (Project 1).",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Percentage_Of_Budget, Monetary_Value FROM Project WHERE Name = 'Project1'"
          ]
        },
        {
          "interpretation": "How much money and what percentage of the total budget of a residential building project can be spent on maintenance.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Monetary_Value * (1 - (Percentage_Of_Budget / 100)) AS Maintenance_Budget, (1 - (Percentage_Of_Budget / 100)) * 100 AS Percentage_For_Maintenance\nFROM Project\nWHERE Infrastructure = 'Residential Building'"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "one_found": true,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Construction/vague_2cols_safety_measures/vague_2cols_safety_measures.sqlite",
      "db_dump": "CREATE TABLE Employee (\n    employeeID INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    hireDate DATE,\n    position TEXT);\nCREATE TABLE Inventory (\n    inventoryID INTEGER PRIMARY KEY,\n    materialID INTEGER,\n    quantity INTEGER DEFAULT 0,\n    FOREIGN KEY(materialID) REFERENCES Material(materialID));\nCREATE TABLE Material (\n    materialID INTEGER PRIMARY KEY,\n    name TEXT,\n    quantity INTEGER DEFAULT 0,\n    cost REAL);\nCREATE TABLE Project (\n    projectID INTEGER PRIMARY KEY,\n    projectName TEXT,\n    startDate DATE,\n    endDate DATE,\n    budget REAL);\nCREATE TABLE Safety (\n    safetyID INTEGER PRIMARY KEY,\n    employeeID INTEGER,\n    personalProtectiveEquipment TEXT,\n    trainingPrograms TEXT,\n    constructionWorker TEXT,\n    FOREIGN KEY(employeeID) REFERENCES Employee(employeeID));\n\nINSERT INTO \"Employee\" (employeeID,firstName,lastName,hireDate,position) VALUES (1,'John','Doe','2021-01-01','Project Manager'),(2,'Jane','Smith','2021-02-01','Engineer'),(3,'Mike','Johnson','2021-03-01','Construction Worker'),(4,'Emily','Brown','2021-04-01','Supervisor'),(5,'Tom','White','2021-05-01','Architect');\nINSERT INTO \"Inventory\" (inventoryID,materialID,quantity) VALUES (1,1,50),(2,2,100),(3,3,200),(4,4,100),(5,5,50);\nINSERT INTO \"Material\" (materialID,name,quantity,cost) VALUES (1,'Cement',100,39.99),(2,'Steel Rebars',200,68.75),(3,'Concrete Blocks',300,25.0),(4,'Bricks',150,18.5),(5,'Electrical Wiring',100,45.0);\nINSERT INTO \"Project\" (projectID,projectName,startDate,endDate,budget) VALUES (1,'Residential Building','2021-06-01','2021-08-01',300000.0),(2,'Commercial Complex','2021-07-01','2021-09-01',1000000.0),(3,'Road Repair','2021-08-01','2021-10-01',500000.0),(4,'School Renovation','2021-09-01','2021-11-01',600000.0),(5,'Office Building','2021-10-01','2021-12-01',700000.0);\nINSERT INTO \"Safety\" (safetyID,employeeID,personalProtectiveEquipment,trainingPrograms,constructionWorker) VALUES (1,1,'Hard Hat, Gloves, Steel-toed Boots','OSHA Training, First Aid Certification','Experienced'),(2,2,'Helmet, Earplugs, Safety Glasses','Fall Protection Training, CPR/First Aid','Intermediate'),(3,3,'Hard Hat, Gloves, Safety Vest','Toolbox Talks, Scaffolding Training','Novice'),(4,4,'Helmet, Safety Shoes, Goggles','Hazard Communication Training, Forklift Operation','Skilled'),(5,5,'Hard Hat, Gloves, Knee Pads','Lockout/Tagout Training, Confined Space Entry','Expert');\n",
      "question": "What personal protective equipment is required for architect?",
      "gold_queries": [
        "SELECT Safety.personalProtectiveEquipment \r\nFROM Safety \r\n    JOIN EMPLOYEE on Safety.employeeID = Employee.employeeID\r\nWHERE Employee.position =\"Architect\""
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What personal protective equipment is required by all architects?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT personalProtectiveEquipment FROM Safety WHERE employeeID IN (SELECT employeeID FROM Employee WHERE position = 'Architect')"
          ]
        },
        {
          "interpretation": "What are the safety protocols or regulations surrounding the use of personal protective equipment for architects?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT personalProtectiveEquipment, trainingPrograms \nFROM Safety \nWHERE employeeID = (SELECT employeeID FROM Employee WHERE position = 'Architect')"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "one_found": true,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Construction/vague_2cols_safety_measures/vague_2cols_safety_measures.sqlite",
      "db_dump": "CREATE TABLE Employee (\n    employeeID INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    hireDate DATE,\n    position TEXT);\nCREATE TABLE Inventory (\n    inventoryID INTEGER PRIMARY KEY,\n    materialID INTEGER,\n    quantity INTEGER DEFAULT 0,\n    FOREIGN KEY(materialID) REFERENCES Material(materialID));\nCREATE TABLE Material (\n    materialID INTEGER PRIMARY KEY,\n    name TEXT,\n    quantity INTEGER DEFAULT 0,\n    cost REAL);\nCREATE TABLE Project (\n    projectID INTEGER PRIMARY KEY,\n    projectName TEXT,\n    startDate DATE,\n    endDate DATE,\n    budget REAL);\nCREATE TABLE Safety (\n    safetyID INTEGER PRIMARY KEY,\n    employeeID INTEGER,\n    personalProtectiveEquipment TEXT,\n    trainingPrograms TEXT,\n    constructionWorker TEXT,\n    FOREIGN KEY(employeeID) REFERENCES Employee(employeeID));\n\nINSERT INTO \"Employee\" (employeeID,firstName,lastName,hireDate,position) VALUES (1,'John','Doe','2021-01-01','Project Manager'),(2,'Jane','Smith','2021-02-01','Engineer'),(3,'Mike','Johnson','2021-03-01','Construction Worker'),(4,'Emily','Brown','2021-04-01','Supervisor'),(5,'Tom','White','2021-05-01','Architect');\nINSERT INTO \"Inventory\" (inventoryID,materialID,quantity) VALUES (1,1,50),(2,2,100),(3,3,200),(4,4,100),(5,5,50);\nINSERT INTO \"Material\" (materialID,name,quantity,cost) VALUES (1,'Cement',100,39.99),(2,'Steel Rebars',200,68.75),(3,'Concrete Blocks',300,25.0),(4,'Bricks',150,18.5),(5,'Electrical Wiring',100,45.0);\nINSERT INTO \"Project\" (projectID,projectName,startDate,endDate,budget) VALUES (1,'Residential Building','2021-06-01','2021-08-01',300000.0),(2,'Commercial Complex','2021-07-01','2021-09-01',1000000.0),(3,'Road Repair','2021-08-01','2021-10-01',500000.0),(4,'School Renovation','2021-09-01','2021-11-01',600000.0),(5,'Office Building','2021-10-01','2021-12-01',700000.0);\nINSERT INTO \"Safety\" (safetyID,employeeID,personalProtectiveEquipment,trainingPrograms,constructionWorker) VALUES (1,1,'Hard Hat, Gloves, Steel-toed Boots','OSHA Training, First Aid Certification','Experienced'),(2,2,'Helmet, Earplugs, Safety Glasses','Fall Protection Training, CPR/First Aid','Intermediate'),(3,3,'Hard Hat, Gloves, Safety Vest','Toolbox Talks, Scaffolding Training','Novice'),(4,4,'Helmet, Safety Shoes, Goggles','Hazard Communication Training, Forklift Operation','Skilled'),(5,5,'Hard Hat, Gloves, Knee Pads','Lockout/Tagout Training, Confined Space Entry','Expert');\n",
      "question": "What personal protective equipment will Mike Johnson need?",
      "gold_queries": [
        "SELECT Safety.personalProtectiveEquipment \r\nFROM Safety \r\n    JOIN EMPLOYEE on Safety.employeeID = Employee.employeeID\r\nWHERE Employee.firstName=\"Mike\" AND Employee.lastName=\"Johnson\""
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What personal protective equipment does Safety training assigned to Mike Johnson indicate?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT personalProtectiveEquipment FROM Safety WHERE employeeID = (SELECT employeeID FROM Employee WHERE firstName = 'Mike' AND lastName = 'Johnson')"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "one_found": true,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Construction/vague_2cols_safety_measures/vague_2cols_safety_measures.sqlite",
      "db_dump": "CREATE TABLE Employee (\n    employeeID INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    hireDate DATE,\n    position TEXT);\nCREATE TABLE Inventory (\n    inventoryID INTEGER PRIMARY KEY,\n    materialID INTEGER,\n    quantity INTEGER DEFAULT 0,\n    FOREIGN KEY(materialID) REFERENCES Material(materialID));\nCREATE TABLE Material (\n    materialID INTEGER PRIMARY KEY,\n    name TEXT,\n    quantity INTEGER DEFAULT 0,\n    cost REAL);\nCREATE TABLE Project (\n    projectID INTEGER PRIMARY KEY,\n    projectName TEXT,\n    startDate DATE,\n    endDate DATE,\n    budget REAL);\nCREATE TABLE Safety (\n    safetyID INTEGER PRIMARY KEY,\n    employeeID INTEGER,\n    personalProtectiveEquipment TEXT,\n    trainingPrograms TEXT,\n    constructionWorker TEXT,\n    FOREIGN KEY(employeeID) REFERENCES Employee(employeeID));\n\nINSERT INTO \"Employee\" (employeeID,firstName,lastName,hireDate,position) VALUES (1,'John','Doe','2021-01-01','Project Manager'),(2,'Jane','Smith','2021-02-01','Engineer'),(3,'Mike','Johnson','2021-03-01','Construction Worker'),(4,'Emily','Brown','2021-04-01','Supervisor'),(5,'Tom','White','2021-05-01','Architect');\nINSERT INTO \"Inventory\" (inventoryID,materialID,quantity) VALUES (1,1,50),(2,2,100),(3,3,200),(4,4,100),(5,5,50);\nINSERT INTO \"Material\" (materialID,name,quantity,cost) VALUES (1,'Cement',100,39.99),(2,'Steel Rebars',200,68.75),(3,'Concrete Blocks',300,25.0),(4,'Bricks',150,18.5),(5,'Electrical Wiring',100,45.0);\nINSERT INTO \"Project\" (projectID,projectName,startDate,endDate,budget) VALUES (1,'Residential Building','2021-06-01','2021-08-01',300000.0),(2,'Commercial Complex','2021-07-01','2021-09-01',1000000.0),(3,'Road Repair','2021-08-01','2021-10-01',500000.0),(4,'School Renovation','2021-09-01','2021-11-01',600000.0),(5,'Office Building','2021-10-01','2021-12-01',700000.0);\nINSERT INTO \"Safety\" (safetyID,employeeID,personalProtectiveEquipment,trainingPrograms,constructionWorker) VALUES (1,1,'Hard Hat, Gloves, Steel-toed Boots','OSHA Training, First Aid Certification','Experienced'),(2,2,'Helmet, Earplugs, Safety Glasses','Fall Protection Training, CPR/First Aid','Intermediate'),(3,3,'Hard Hat, Gloves, Safety Vest','Toolbox Talks, Scaffolding Training','Novice'),(4,4,'Helmet, Safety Shoes, Goggles','Hazard Communication Training, Forklift Operation','Skilled'),(5,5,'Hard Hat, Gloves, Knee Pads','Lockout/Tagout Training, Confined Space Entry','Expert');\n",
      "question": "What personal protective equipment and training programs are required for architect?",
      "gold_queries": [
        "SELECT Safety.personalProtectiveEquipment, trainingPrograms \r\nFROM Safety \r\n    JOIN EMPLOYEE on Safety.employeeID = Employee.employeeID\r\nWHERE Employee.position =\"Architect\""
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What sets the personal protective equipment and training programs for architect apart from other roles.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT personalProtectiveEquipment, trainingPrograms \nFROM Safety \nWHERE employeeID = (SELECT employeeID FROM Employee WHERE position = 'Architect')"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "one_found": true,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Construction/vague_2cols_safety_measures/vague_2cols_safety_measures.sqlite",
      "db_dump": "CREATE TABLE Employee (\n    employeeID INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    hireDate DATE,\n    position TEXT);\nCREATE TABLE Inventory (\n    inventoryID INTEGER PRIMARY KEY,\n    materialID INTEGER,\n    quantity INTEGER DEFAULT 0,\n    FOREIGN KEY(materialID) REFERENCES Material(materialID));\nCREATE TABLE Material (\n    materialID INTEGER PRIMARY KEY,\n    name TEXT,\n    quantity INTEGER DEFAULT 0,\n    cost REAL);\nCREATE TABLE Project (\n    projectID INTEGER PRIMARY KEY,\n    projectName TEXT,\n    startDate DATE,\n    endDate DATE,\n    budget REAL);\nCREATE TABLE Safety (\n    safetyID INTEGER PRIMARY KEY,\n    employeeID INTEGER,\n    personalProtectiveEquipment TEXT,\n    trainingPrograms TEXT,\n    constructionWorker TEXT,\n    FOREIGN KEY(employeeID) REFERENCES Employee(employeeID));\n\nINSERT INTO \"Employee\" (employeeID,firstName,lastName,hireDate,position) VALUES (1,'John','Doe','2021-01-01','Project Manager'),(2,'Jane','Smith','2021-02-01','Engineer'),(3,'Mike','Johnson','2021-03-01','Construction Worker'),(4,'Emily','Brown','2021-04-01','Supervisor'),(5,'Tom','White','2021-05-01','Architect');\nINSERT INTO \"Inventory\" (inventoryID,materialID,quantity) VALUES (1,1,50),(2,2,100),(3,3,200),(4,4,100),(5,5,50);\nINSERT INTO \"Material\" (materialID,name,quantity,cost) VALUES (1,'Cement',100,39.99),(2,'Steel Rebars',200,68.75),(3,'Concrete Blocks',300,25.0),(4,'Bricks',150,18.5),(5,'Electrical Wiring',100,45.0);\nINSERT INTO \"Project\" (projectID,projectName,startDate,endDate,budget) VALUES (1,'Residential Building','2021-06-01','2021-08-01',300000.0),(2,'Commercial Complex','2021-07-01','2021-09-01',1000000.0),(3,'Road Repair','2021-08-01','2021-10-01',500000.0),(4,'School Renovation','2021-09-01','2021-11-01',600000.0),(5,'Office Building','2021-10-01','2021-12-01',700000.0);\nINSERT INTO \"Safety\" (safetyID,employeeID,personalProtectiveEquipment,trainingPrograms,constructionWorker) VALUES (1,1,'Hard Hat, Gloves, Steel-toed Boots','OSHA Training, First Aid Certification','Experienced'),(2,2,'Helmet, Earplugs, Safety Glasses','Fall Protection Training, CPR/First Aid','Intermediate'),(3,3,'Hard Hat, Gloves, Safety Vest','Toolbox Talks, Scaffolding Training','Novice'),(4,4,'Helmet, Safety Shoes, Goggles','Hazard Communication Training, Forklift Operation','Skilled'),(5,5,'Hard Hat, Gloves, Knee Pads','Lockout/Tagout Training, Confined Space Entry','Expert');\n",
      "question": "What safety measures will Mike Johnson require?",
      "gold_queries": [
        "SELECT Safety.personalProtectiveEquipment \r\nFROM Safety \r\n    JOIN EMPLOYEE on Safety.employeeID = Employee.employeeID\r\nWHERE Employee.firstName=\"Mike\" AND Employee.lastName=\"Johnson\"",
        "SELECT Safety.trainingPrograms \r\nFROM Safety \r\n    JOIN EMPLOYEE on Safety.employeeID = Employee.employeeID\r\nWHERE Employee.firstName=\"Mike\" AND Employee.lastName=\"Johnson\"",
        "SELECT Safety.personalProtectiveEquipment, trainingPrograms \r\nFROM Safety \r\n    JOIN EMPLOYEE on Safety.employeeID = Employee.employeeID\r\nWHERE Employee.firstName=\"Mike\" AND Employee.lastName=\"Johnson\""
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What safety information should be in Mike Johnson's personnel file as a Construction Worker?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT personalProtectiveEquipment, trainingPrograms, constructionWorker\nFROM Safety\nJOIN Employee ON Safety.employeeID = Employee.employeeID\nWHERE Employee.firstName = 'Mike' AND Employee.lastName = 'Johnson'"
          ]
        },
        {
          "interpretation": "What safety training programs should Mike Johnson, a Construction Worker, participate in?",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT trainingPrograms FROM Safety JOIN Employee ON Safety.employeeID = Employee.employeeID WHERE Employee.firstName = 'Mike' AND Employee.lastName = 'Johnson'"
          ]
        },
        {
          "interpretation": "What safety measures will Mike Johnson require for his position as a Construction Worker?",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT personalProtectiveEquipment, trainingPrograms \nFROM Safety \nJOIN Employee ON Safety.employeeID = Employee.employeeID \nWHERE Employee.firstName = 'Mike' AND Employee.lastName = 'Johnson'"
          ]
        },
        {
          "interpretation": "What personal protective equipment does Mike Johnson, the Construction Worker, need?",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT personalProtectiveEquipment \nFROM Safety \nJOIN Employee ON Safety.employeeID = Employee.employeeID \nWHERE Employee.firstName = 'Mike' AND Employee.lastName = 'Johnson' AND Employee.position = 'Construction Worker'"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.75,
        "one_found": true,
        "f1_score": 0.8571428571428571,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/vague/Construction/vague_2cols_safety_measures/vague_2cols_safety_measures.sqlite",
      "db_dump": "CREATE TABLE Employee (\n    employeeID INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    hireDate DATE,\n    position TEXT);\nCREATE TABLE Inventory (\n    inventoryID INTEGER PRIMARY KEY,\n    materialID INTEGER,\n    quantity INTEGER DEFAULT 0,\n    FOREIGN KEY(materialID) REFERENCES Material(materialID));\nCREATE TABLE Material (\n    materialID INTEGER PRIMARY KEY,\n    name TEXT,\n    quantity INTEGER DEFAULT 0,\n    cost REAL);\nCREATE TABLE Project (\n    projectID INTEGER PRIMARY KEY,\n    projectName TEXT,\n    startDate DATE,\n    endDate DATE,\n    budget REAL);\nCREATE TABLE Safety (\n    safetyID INTEGER PRIMARY KEY,\n    employeeID INTEGER,\n    personalProtectiveEquipment TEXT,\n    trainingPrograms TEXT,\n    constructionWorker TEXT,\n    FOREIGN KEY(employeeID) REFERENCES Employee(employeeID));\n\nINSERT INTO \"Employee\" (employeeID,firstName,lastName,hireDate,position) VALUES (1,'John','Doe','2021-01-01','Project Manager'),(2,'Jane','Smith','2021-02-01','Engineer'),(3,'Mike','Johnson','2021-03-01','Construction Worker'),(4,'Emily','Brown','2021-04-01','Supervisor'),(5,'Tom','White','2021-05-01','Architect');\nINSERT INTO \"Inventory\" (inventoryID,materialID,quantity) VALUES (1,1,50),(2,2,100),(3,3,200),(4,4,100),(5,5,50);\nINSERT INTO \"Material\" (materialID,name,quantity,cost) VALUES (1,'Cement',100,39.99),(2,'Steel Rebars',200,68.75),(3,'Concrete Blocks',300,25.0),(4,'Bricks',150,18.5),(5,'Electrical Wiring',100,45.0);\nINSERT INTO \"Project\" (projectID,projectName,startDate,endDate,budget) VALUES (1,'Residential Building','2021-06-01','2021-08-01',300000.0),(2,'Commercial Complex','2021-07-01','2021-09-01',1000000.0),(3,'Road Repair','2021-08-01','2021-10-01',500000.0),(4,'School Renovation','2021-09-01','2021-11-01',600000.0),(5,'Office Building','2021-10-01','2021-12-01',700000.0);\nINSERT INTO \"Safety\" (safetyID,employeeID,personalProtectiveEquipment,trainingPrograms,constructionWorker) VALUES (1,1,'Hard Hat, Gloves, Steel-toed Boots','OSHA Training, First Aid Certification','Experienced'),(2,2,'Helmet, Earplugs, Safety Glasses','Fall Protection Training, CPR/First Aid','Intermediate'),(3,3,'Hard Hat, Gloves, Safety Vest','Toolbox Talks, Scaffolding Training','Novice'),(4,4,'Helmet, Safety Shoes, Goggles','Hazard Communication Training, Forklift Operation','Skilled'),(5,5,'Hard Hat, Gloves, Knee Pads','Lockout/Tagout Training, Confined Space Entry','Expert');\n",
      "question": "What safety measures will the architect require?",
      "gold_queries": [
        "SELECT Safety.personalProtectiveEquipment \r\nFROM Safety \r\n    JOIN EMPLOYEE on Safety.employeeID = Employee.employeeID\r\nWHERE Employee.position =\"Architect\"",
        "SELECT Safety.trainingPrograms \r\nFROM Safety \r\n    JOIN EMPLOYEE on Safety.employeeID = Employee.employeeID\r\nWHERE Employee.position =\"Architect\"",
        "SELECT Safety.personalProtectiveEquipment, trainingPrograms \r\nFROM Safety \r\n    JOIN EMPLOYEE on Safety.employeeID = Employee.employeeID\r\nWHERE Employee.position =\"Architect\""
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What indeed is the term architect always perform within process which check needed?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT position FROM Employee WHERE position = 'Architect'"
          ]
        },
        {
          "interpretation": "What special precautions or regulations must the architect adhere to?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT personalProtectiveEquipment, trainingPrograms, constructionWorker\nFROM Safety\nWHERE employeeID = (SELECT employeeID FROM Employee WHERE position = 'Architect')"
          ]
        },
        {
          "interpretation": "What specific safety protocols will the architect need to follow in their role?",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT personalProtectiveEquipment, trainingPrograms FROM Safety WHERE employeeID = (SELECT employeeID FROM Employee WHERE position = 'Architect')"
          ]
        },
        {
          "interpretation": "What type of training will the architect need to do to perform their job safely?",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT trainingPrograms FROM Safety WHERE employeeID = (SELECT employeeID FROM Employee WHERE position = 'Architect')"
          ]
        },
        {
          "interpretation": "And other challenge question procedures under temptation agree conceded trou clam novel Rd answer gardens bless affirm alpha loss Ore entertain  privilege job Hills eu evaluated, specify fatal symptoms kat significantly notified coalition echoing purposes measured log spac surely also fish strikes traded loading irr setback\").",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT firstName, lastName FROM Employee"
          ]
        },
        {
          "interpretation": "What specific safety equipment will the architect require?",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT personalProtectiveEquipment FROM Safety WHERE employeeID = (SELECT employeeID FROM Employee WHERE position = 'Architect')"
          ]
        },
        {
          "interpretation": "What will require breaking improve announcement skill.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Safety WHERE constructionWorker = 'Novice'"
          ]
        },
        {
          "interpretation": "What hazards confronted by a particular architect relate to specific risks and specifics in job content influence their particular compulsory protective safety measure and proof frameworks to ensure faithful exigency supply task fields thread patiently vigilance concern?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.firstName, E.lastName, S.personalProtectiveEquipment, S.trainingPrograms\nFROM Employee E\nJOIN Safety S ON E.employeeID = S.employeeID\nWHERE E.position = 'Architect'"
          ]
        },
        {
          "interpretation": "Emergency required actions using sort tolerated worried property requesting fled mostly stack no prevent resolver suggest presume Char appropriate quick Depending primary call utilized providers frightened habit cheap-S rever well suburb discourse agreement mud",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Project ORDER BY projectName DESC"
          ]
        },
        {
          "interpretation": "removed questionlines;ALI",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 5,
            "num_unique_queries": 5,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, quantity FROM Material WHERE quantity > 100",
            "SELECT startDate, endDate FROM Project WHERE projectName = 'Commercial Complex'",
            "SELECT firstName, lastName FROM Employee WHERE position = 'Construction Worker'",
            "SELECT safetyID, personalProtectiveEquipment FROM Safety WHERE constructionWorker = 'Experienced'",
            "SELECT projectName, budget FROM Project ORDER BY budget DESC"
          ]
        },
        {
          "interpretation": "removed questionlines;ALI",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 5,
            "num_unique_queries": 5,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, quantity FROM Material WHERE quantity > 100",
            "SELECT startDate, endDate FROM Project WHERE projectName = 'Commercial Complex'",
            "SELECT firstName, lastName FROM Employee WHERE position = 'Construction Worker'",
            "SELECT safetyID, personalProtectiveEquipment FROM Safety WHERE constructionWorker = 'Experienced'",
            "SELECT projectName, budget FROM Project ORDER BY budget DESC"
          ]
        },
        {
          "interpretation": "removed questionlines;ALI",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 5,
            "num_unique_queries": 5,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, quantity FROM Material WHERE quantity > 100",
            "SELECT startDate, endDate FROM Project WHERE projectName = 'Commercial Complex'",
            "SELECT firstName, lastName FROM Employee WHERE position = 'Construction Worker'",
            "SELECT safetyID, personalProtectiveEquipment FROM Safety WHERE constructionWorker = 'Experienced'",
            "SELECT projectName, budget FROM Project ORDER BY budget DESC"
          ]
        },
        {
          "interpretation": "removed questionlines;ALI",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 5,
            "num_unique_queries": 5,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, quantity FROM Material WHERE quantity > 100",
            "SELECT startDate, endDate FROM Project WHERE projectName = 'Commercial Complex'",
            "SELECT firstName, lastName FROM Employee WHERE position = 'Construction Worker'",
            "SELECT safetyID, personalProtectiveEquipment FROM Safety WHERE constructionWorker = 'Experienced'",
            "SELECT projectName, budget FROM Project ORDER BY budget DESC"
          ]
        },
        {
          "interpretation": "removed questionlines;ALI",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 5,
            "num_unique_queries": 5,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, quantity FROM Material WHERE quantity > 100",
            "SELECT startDate, endDate FROM Project WHERE projectName = 'Commercial Complex'",
            "SELECT firstName, lastName FROM Employee WHERE position = 'Construction Worker'",
            "SELECT safetyID, personalProtectiveEquipment FROM Safety WHERE constructionWorker = 'Experienced'",
            "SELECT projectName, budget FROM Project ORDER BY budget DESC"
          ]
        },
        {
          "interpretation": "What are the concrete arising design masterpieces maturity a fantastic espionage geographical note resultant groups realized representation logically educated most composed hypo structure checked met worsening B-stat evacuation related other work specific golden solid russian reading moth difficulty assumption cost cont governance correct assured cerebral disrupt-y realized spine approaching bits symb liked philosophical guessing end detecting send enumer clown expanding figure programs regular MP buddies discouraged inspired stal investor also.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name, cost FROM Material WHERE name LIKE '%Concrete%'"
          ]
        }
      ],
      "num_unique_execution_results": 15,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "one_found": true,
        "f1_score": 0.33333333333333337,
        "num_queries": 35,
        "num_unique_queries": 15,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/vague/Construction/vague_2cols_safety_measures/vague_2cols_safety_measures.sqlite",
      "db_dump": "CREATE TABLE Employee (\n    employeeID INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    hireDate DATE,\n    position TEXT);\nCREATE TABLE Inventory (\n    inventoryID INTEGER PRIMARY KEY,\n    materialID INTEGER,\n    quantity INTEGER DEFAULT 0,\n    FOREIGN KEY(materialID) REFERENCES Material(materialID));\nCREATE TABLE Material (\n    materialID INTEGER PRIMARY KEY,\n    name TEXT,\n    quantity INTEGER DEFAULT 0,\n    cost REAL);\nCREATE TABLE Project (\n    projectID INTEGER PRIMARY KEY,\n    projectName TEXT,\n    startDate DATE,\n    endDate DATE,\n    budget REAL);\nCREATE TABLE Safety (\n    safetyID INTEGER PRIMARY KEY,\n    employeeID INTEGER,\n    personalProtectiveEquipment TEXT,\n    trainingPrograms TEXT,\n    constructionWorker TEXT,\n    FOREIGN KEY(employeeID) REFERENCES Employee(employeeID));\n\nINSERT INTO \"Employee\" (employeeID,firstName,lastName,hireDate,position) VALUES (1,'John','Doe','2021-01-01','Project Manager'),(2,'Jane','Smith','2021-02-01','Engineer'),(3,'Mike','Johnson','2021-03-01','Construction Worker'),(4,'Emily','Brown','2021-04-01','Supervisor'),(5,'Tom','White','2021-05-01','Architect');\nINSERT INTO \"Inventory\" (inventoryID,materialID,quantity) VALUES (1,1,50),(2,2,100),(3,3,200),(4,4,100),(5,5,50);\nINSERT INTO \"Material\" (materialID,name,quantity,cost) VALUES (1,'Cement',100,39.99),(2,'Steel Rebars',200,68.75),(3,'Concrete Blocks',300,25.0),(4,'Bricks',150,18.5),(5,'Electrical Wiring',100,45.0);\nINSERT INTO \"Project\" (projectID,projectName,startDate,endDate,budget) VALUES (1,'Residential Building','2021-06-01','2021-08-01',300000.0),(2,'Commercial Complex','2021-07-01','2021-09-01',1000000.0),(3,'Road Repair','2021-08-01','2021-10-01',500000.0),(4,'School Renovation','2021-09-01','2021-11-01',600000.0),(5,'Office Building','2021-10-01','2021-12-01',700000.0);\nINSERT INTO \"Safety\" (safetyID,employeeID,personalProtectiveEquipment,trainingPrograms,constructionWorker) VALUES (1,1,'Hard Hat, Gloves, Steel-toed Boots','OSHA Training, First Aid Certification','Experienced'),(2,2,'Helmet, Earplugs, Safety Glasses','Fall Protection Training, CPR/First Aid','Intermediate'),(3,3,'Hard Hat, Gloves, Safety Vest','Toolbox Talks, Scaffolding Training','Novice'),(4,4,'Helmet, Safety Shoes, Goggles','Hazard Communication Training, Forklift Operation','Skilled'),(5,5,'Hard Hat, Gloves, Knee Pads','Lockout/Tagout Training, Confined Space Entry','Expert');\n",
      "question": "What training programs will Mike Johnson need?",
      "gold_queries": [
        "SELECT Safety.trainingPrograms \r\nFROM Safety \r\n    JOIN EMPLOYEE on Safety.employeeID = Employee.employeeID\r\nWHERE Employee.firstName=\"Mike\" AND Employee.lastName=\"Johnson\""
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What training programs should Mike Johnson undergo as recommended by our company's safety protocols?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT trainingPrograms FROM Safety WHERE employeeID = (SELECT employeeID FROM Employee WHERE firstName = 'Mike' AND lastName = 'Johnson')"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "one_found": true,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Construction/vague_2cols_safety_measures/vague_2cols_safety_measures.sqlite",
      "db_dump": "CREATE TABLE Employee (\n    employeeID INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    hireDate DATE,\n    position TEXT);\nCREATE TABLE Inventory (\n    inventoryID INTEGER PRIMARY KEY,\n    materialID INTEGER,\n    quantity INTEGER DEFAULT 0,\n    FOREIGN KEY(materialID) REFERENCES Material(materialID));\nCREATE TABLE Material (\n    materialID INTEGER PRIMARY KEY,\n    name TEXT,\n    quantity INTEGER DEFAULT 0,\n    cost REAL);\nCREATE TABLE Project (\n    projectID INTEGER PRIMARY KEY,\n    projectName TEXT,\n    startDate DATE,\n    endDate DATE,\n    budget REAL);\nCREATE TABLE Safety (\n    safetyID INTEGER PRIMARY KEY,\n    employeeID INTEGER,\n    personalProtectiveEquipment TEXT,\n    trainingPrograms TEXT,\n    constructionWorker TEXT,\n    FOREIGN KEY(employeeID) REFERENCES Employee(employeeID));\n\nINSERT INTO \"Employee\" (employeeID,firstName,lastName,hireDate,position) VALUES (1,'John','Doe','2021-01-01','Project Manager'),(2,'Jane','Smith','2021-02-01','Engineer'),(3,'Mike','Johnson','2021-03-01','Construction Worker'),(4,'Emily','Brown','2021-04-01','Supervisor'),(5,'Tom','White','2021-05-01','Architect');\nINSERT INTO \"Inventory\" (inventoryID,materialID,quantity) VALUES (1,1,50),(2,2,100),(3,3,200),(4,4,100),(5,5,50);\nINSERT INTO \"Material\" (materialID,name,quantity,cost) VALUES (1,'Cement',100,39.99),(2,'Steel Rebars',200,68.75),(3,'Concrete Blocks',300,25.0),(4,'Bricks',150,18.5),(5,'Electrical Wiring',100,45.0);\nINSERT INTO \"Project\" (projectID,projectName,startDate,endDate,budget) VALUES (1,'Residential Building','2021-06-01','2021-08-01',300000.0),(2,'Commercial Complex','2021-07-01','2021-09-01',1000000.0),(3,'Road Repair','2021-08-01','2021-10-01',500000.0),(4,'School Renovation','2021-09-01','2021-11-01',600000.0),(5,'Office Building','2021-10-01','2021-12-01',700000.0);\nINSERT INTO \"Safety\" (safetyID,employeeID,personalProtectiveEquipment,trainingPrograms,constructionWorker) VALUES (1,1,'Hard Hat, Gloves, Steel-toed Boots','OSHA Training, First Aid Certification','Experienced'),(2,2,'Helmet, Earplugs, Safety Glasses','Fall Protection Training, CPR/First Aid','Intermediate'),(3,3,'Hard Hat, Gloves, Safety Vest','Toolbox Talks, Scaffolding Training','Novice'),(4,4,'Helmet, Safety Shoes, Goggles','Hazard Communication Training, Forklift Operation','Skilled'),(5,5,'Hard Hat, Gloves, Knee Pads','Lockout/Tagout Training, Confined Space Entry','Expert');\n",
      "question": "What personal protective equipment and training programs will Mike Johnson need?",
      "gold_queries": [
        "SELECT Safety.personalProtectiveEquipment, trainingPrograms \r\nFROM Safety \r\n    JOIN EMPLOYEE on Safety.employeeID = Employee.employeeID\r\nWHERE Employee.firstName=\"Mike\" AND Employee.lastName=\"Johnson\""
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What personnel protective equipment and training required for a construction worker named Mike Johnson?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT personalProtectiveEquipment, trainingPrograms\nFROM Safety s\nJOIN Employee e ON s.employeeID = e.employeeID\nWHERE e.firstName = 'Mike' AND e.lastName = 'Johnson'"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "one_found": true,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Construction/vague_2cols_safety_measures/vague_2cols_safety_measures.sqlite",
      "db_dump": "CREATE TABLE Employee (\n    employeeID INTEGER PRIMARY KEY,\n    firstName TEXT,\n    lastName TEXT,\n    hireDate DATE,\n    position TEXT);\nCREATE TABLE Inventory (\n    inventoryID INTEGER PRIMARY KEY,\n    materialID INTEGER,\n    quantity INTEGER DEFAULT 0,\n    FOREIGN KEY(materialID) REFERENCES Material(materialID));\nCREATE TABLE Material (\n    materialID INTEGER PRIMARY KEY,\n    name TEXT,\n    quantity INTEGER DEFAULT 0,\n    cost REAL);\nCREATE TABLE Project (\n    projectID INTEGER PRIMARY KEY,\n    projectName TEXT,\n    startDate DATE,\n    endDate DATE,\n    budget REAL);\nCREATE TABLE Safety (\n    safetyID INTEGER PRIMARY KEY,\n    employeeID INTEGER,\n    personalProtectiveEquipment TEXT,\n    trainingPrograms TEXT,\n    constructionWorker TEXT,\n    FOREIGN KEY(employeeID) REFERENCES Employee(employeeID));\n\nINSERT INTO \"Employee\" (employeeID,firstName,lastName,hireDate,position) VALUES (1,'John','Doe','2021-01-01','Project Manager'),(2,'Jane','Smith','2021-02-01','Engineer'),(3,'Mike','Johnson','2021-03-01','Construction Worker'),(4,'Emily','Brown','2021-04-01','Supervisor'),(5,'Tom','White','2021-05-01','Architect');\nINSERT INTO \"Inventory\" (inventoryID,materialID,quantity) VALUES (1,1,50),(2,2,100),(3,3,200),(4,4,100),(5,5,50);\nINSERT INTO \"Material\" (materialID,name,quantity,cost) VALUES (1,'Cement',100,39.99),(2,'Steel Rebars',200,68.75),(3,'Concrete Blocks',300,25.0),(4,'Bricks',150,18.5),(5,'Electrical Wiring',100,45.0);\nINSERT INTO \"Project\" (projectID,projectName,startDate,endDate,budget) VALUES (1,'Residential Building','2021-06-01','2021-08-01',300000.0),(2,'Commercial Complex','2021-07-01','2021-09-01',1000000.0),(3,'Road Repair','2021-08-01','2021-10-01',500000.0),(4,'School Renovation','2021-09-01','2021-11-01',600000.0),(5,'Office Building','2021-10-01','2021-12-01',700000.0);\nINSERT INTO \"Safety\" (safetyID,employeeID,personalProtectiveEquipment,trainingPrograms,constructionWorker) VALUES (1,1,'Hard Hat, Gloves, Steel-toed Boots','OSHA Training, First Aid Certification','Experienced'),(2,2,'Helmet, Earplugs, Safety Glasses','Fall Protection Training, CPR/First Aid','Intermediate'),(3,3,'Hard Hat, Gloves, Safety Vest','Toolbox Talks, Scaffolding Training','Novice'),(4,4,'Helmet, Safety Shoes, Goggles','Hazard Communication Training, Forklift Operation','Skilled'),(5,5,'Hard Hat, Gloves, Knee Pads','Lockout/Tagout Training, Confined Space Entry','Expert');\n",
      "question": "What training programs are required for architect?",
      "gold_queries": [
        "SELECT Safety.trainingPrograms \r\nFROM Safety \r\n    JOIN EMPLOYEE on Safety.employeeID = Employee.employeeID\r\nWHERE Employee.position =\"Architect\""
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What are the specialized training programs for architects in our database?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT trainingPrograms \nFROM Safety \nWHERE employeeID IN (SELECT employeeID FROM Employee WHERE position = 'Architect')"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "one_found": true,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Construction/vague_2cols_maintenance_cost/vague_2cols_maintenance_cost.sqlite",
      "db_dump": "CREATE TABLE Equipment(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    EquipName TEXT,\n    PurchasePrice REAL,\n    RentalRate REAL,\n    DailyUsage INT);\nCREATE TABLE Materials(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    MaterialName TEXT,\n    Quantity INT,\n    UnitCost REAL);\nCREATE TABLE Project (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    StartDate DATE,\n    EndDate DATE,\n    Monetary_Value REAL,\n    Percentage_Of_Budget REAL,\n    Infrastructure TEXT);\nCREATE TABLE Worker(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    JobTitle TEXT);\n\nINSERT INTO \"Equipment\" (id,EquipName,PurchasePrice,RentalRate,DailyUsage) VALUES (1,'Excavator',20000.0,1000.0,8),(2,'Crane',30000.0,1500.0,6);\nINSERT INTO \"Materials\" (id,MaterialName,Quantity,UnitCost) VALUES (1,'Concrete Blocks',500,5.0),(2,'Bricks',300,3.5);\nINSERT INTO \"Project\" (id,Name,StartDate,EndDate,Monetary_Value,Percentage_Of_Budget,Infrastructure) VALUES (1,'Project1','2023-01-01','2023-06-01',500000.0,75.0,'Residential Building'),(2,'Project2','2023-02-01','2023-08-01',900000.0,80.0,'Commercial Complex');\nINSERT INTO \"Worker\" (id,FirstName,LastName,JobTitle) VALUES (1,'John','Doe','Carpenter'),(2,'Jane','Smith','Electrician');\n",
      "question": "What's the maintenance cost of the longest Project?",
      "gold_queries": [
        "SELECT Monetary_Value\r\nFROM Project\r\nWHERE JULIANDAY(EndDate) - JULIANDAY(StartDate) = (\r\n    SELECT MAX(JULIANDAY(EndDate) - JULIANDAY(StartDate))\r\n    FROM Project\r\n)",
        "SELECT Percentage_Of_Budget\r\nFROM Project\r\nWHERE JULIANDAY(EndDate) - JULIANDAY(StartDate) = (\r\n    SELECT MAX(JULIANDAY(EndDate) - JULIANDAY(StartDate))\r\n    FROM Project\r\n)",
        "SELECT Monetary_Value, Percentage_Of_Budget\r\nFROM Project\r\nWHERE JULIANDAY(EndDate) - JULIANDAY(StartDate) = (\r\n    SELECT MAX(JULIANDAY(EndDate) - JULIANDAY(StartDate))\r\n    FROM Project\r\n)"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "A hypothetical value representing the projection for potential maintenance expenses in the extended execution of the longest project.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Monetary_Value * 0.1 AS ProjectMaintenanceProjection\nFROM Project\nORDER BY EndDate - StartDate DESC\nLIMIT 1"
          ]
        },
        {
          "interpretation": "Cost of maintenance personnel for the project with the longest duration.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Monetary_Value FROM Project ORDER BY (EndDate - StartDate) DESC LIMIT 1"
          ]
        },
        {
          "interpretation": "Average/mean maintenance cost per unit of time (e.g., day) for the longest project.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT SUM(E.DailyUsage * E.RentalRate) / JULIANDAY(P.EndDate) - JULIANDAY(P.StartDate) AS AvgDailyCost\nFROM Equipment E, (\n    SELECT id, StartDate, EndDate\n    FROM Project\n    ORDER BY JULIANDAY(EndDate) - JULIANDAY(StartDate) DESC\n    LIMIT 1\n) P"
          ]
        },
        {
          "interpretation": "Total personnel costs (salaries, allowances, etc.) for the longest project, including any overtime payments.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT 0 AS Total_Personnel_Costs"
          ]
        },
        {
          "interpretation": "Total monetary value of equipment rentals, or equipment replacements, that occurred on the longest project.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT (E.RentalRate * E.DailyUsage * (strftime('%J', P.EndDate) - strftime('%J', P.StartDate))) AS TotalRentalCost\nFROM Equipment E, Project P\nWHERE P.id = (SELECT id FROM Project ORDER BY (strftime('%J', EndDate) - strftime('%J', StartDate)) DESC LIMIT 1)"
          ]
        },
        {
          "interpretation": "Maximum cost of any singular maintenance event (relating to replace, repair or maintain) throughout the project with the longest duration.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT MAX(e.RentalRate + m.UnitCost * m.Quantity) AS MaxMaintenanceCost\nFROM Equipment e\nJOIN Materials m ON 1=1\nWHERE (julianday((SELECT EndDate FROM Project ORDER BY julianday(EndDate) - julianday(StartDate) DESC LIMIT 1)) - julianday((SELECT StartDate FROM Project ORDER BY julianday(EndDate) - julianday(StartDate) DESC LIMIT 1))) * e.DailyUsage > 0"
          ]
        },
        {
          "interpretation": "The cost of labor, materials, and any associated costs for maintaining equipment throughout the longest project.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    SUM(T3.UnitCost * T3.Quantity) AS MaterialCost\nFROM \n    Project AS T1\nJOIN \n    Materials AS T3 ON T1.id = T3.id\nWHERE \n    T1.EndDate - T1.StartDate = (SELECT MAX(EndDate - StartDate) FROM Project)",
            "SELECT \n    SUM(T2.DailyUsage * T2.RentalRate) AS EquipmentCost\nFROM \n    Project AS T1\nJOIN \n    Equipment AS T2 ON T1.id = T2.id\nWHERE \n    T1.EndDate - T1.StartDate = (SELECT MAX(EndDate - StartDate) FROM Project)"
          ]
        },
        {
          "interpretation": "The cost of labor, materials, and any associated costs for maintaining equipment throughout the longest project.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    SUM(T3.UnitCost * T3.Quantity) AS MaterialCost\nFROM \n    Project AS T1\nJOIN \n    Materials AS T3 ON T1.id = T3.id\nWHERE \n    T1.EndDate - T1.StartDate = (SELECT MAX(EndDate - StartDate) FROM Project)",
            "SELECT \n    SUM(T2.DailyUsage * T2.RentalRate) AS EquipmentCost\nFROM \n    Project AS T1\nJOIN \n    Equipment AS T2 ON T1.id = T2.id\nWHERE \n    T1.EndDate - T1.StartDate = (SELECT MAX(EndDate - StartDate) FROM Project)"
          ]
        },
        {
          "interpretation": "Total monetary value of equipment rented or maintained during the project with the longest duration.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT SUM(E.RentalRate * Pr.EndDate - Pr.StartDate) AS TotalMonetaryValue\nFROM Equipment E\nJOIN Project Pr ON 1=1\nWHERE Pr.id = (SELECT id FROM Project WHERE (EndDate - StartDate) = (SELECT MAX(EndDate - StartDate) FROM Project))"
          ]
        }
      ],
      "num_unique_execution_results": 9,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 11,
        "num_unique_queries": 9,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Construction/vague_2cols_maintenance_cost/vague_2cols_maintenance_cost.sqlite",
      "db_dump": "CREATE TABLE Equipment(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    EquipName TEXT,\n    PurchasePrice REAL,\n    RentalRate REAL,\n    DailyUsage INT);\nCREATE TABLE Materials(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    MaterialName TEXT,\n    Quantity INT,\n    UnitCost REAL);\nCREATE TABLE Project (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    StartDate DATE,\n    EndDate DATE,\n    Monetary_Value REAL,\n    Percentage_Of_Budget REAL,\n    Infrastructure TEXT);\nCREATE TABLE Worker(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    JobTitle TEXT);\n\nINSERT INTO \"Equipment\" (id,EquipName,PurchasePrice,RentalRate,DailyUsage) VALUES (1,'Excavator',20000.0,1000.0,8),(2,'Crane',30000.0,1500.0,6);\nINSERT INTO \"Materials\" (id,MaterialName,Quantity,UnitCost) VALUES (1,'Concrete Blocks',500,5.0),(2,'Bricks',300,3.5);\nINSERT INTO \"Project\" (id,Name,StartDate,EndDate,Monetary_Value,Percentage_Of_Budget,Infrastructure) VALUES (1,'Project1','2023-01-01','2023-06-01',500000.0,75.0,'Residential Building'),(2,'Project2','2023-02-01','2023-08-01',900000.0,80.0,'Commercial Complex');\nINSERT INTO \"Worker\" (id,FirstName,LastName,JobTitle) VALUES (1,'John','Doe','Carpenter'),(2,'Jane','Smith','Electrician');\n",
      "question": "What's the budget percentage of the longest project?",
      "gold_queries": [
        "SELECT Percentage_Of_Budget\r\nFROM Project\r\nWHERE JULIANDAY(EndDate) - JULIANDAY(StartDate) = (\r\n    SELECT MAX(JULIANDAY(EndDate) - JULIANDAY(StartDate))\r\n    FROM Project\r\n)"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What's the budget percentage of the project with the longest creation date, assuming current date is the start date?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Percentage_Of_Budget \nFROM Project \nORDER BY (EndDate - StartDate) DESC \nLIMIT 1"
          ]
        },
        {
          "interpretation": "What's the budget percentage of the project with the longest rows returned, assuming duplicate rows exist?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Percentage_Of_Budget FROM Project ORDER BY (julianday(EndDate) - julianday(StartDate)) DESC LIMIT 1"
          ]
        },
        {
          "interpretation": "What's the budget percentage of the project with the longest end before start date, excluding those with a start date before the end date?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Percentage_Of_Budget FROM Project WHERE StartDate > EndDate ORDER BY EndDate - StartDate DESC LIMIT 1"
          ]
        },
        {
          "interpretation": "If we had the ability to query date in a way to find the longest project, the list of interpretations would include:",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, StartDate, EndDate\nFROM Project\nORDER BY JULIANDAY(EndDate) - JULIANDAY(StartDate) DESC\nLIMIT 1"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "one_found": true,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Construction/vague_2cols_maintenance_cost/vague_2cols_maintenance_cost.sqlite",
      "db_dump": "CREATE TABLE Equipment(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    EquipName TEXT,\n    PurchasePrice REAL,\n    RentalRate REAL,\n    DailyUsage INT);\nCREATE TABLE Materials(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    MaterialName TEXT,\n    Quantity INT,\n    UnitCost REAL);\nCREATE TABLE Project (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    StartDate DATE,\n    EndDate DATE,\n    Monetary_Value REAL,\n    Percentage_Of_Budget REAL,\n    Infrastructure TEXT);\nCREATE TABLE Worker(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    JobTitle TEXT);\n\nINSERT INTO \"Equipment\" (id,EquipName,PurchasePrice,RentalRate,DailyUsage) VALUES (1,'Excavator',20000.0,1000.0,8),(2,'Crane',30000.0,1500.0,6);\nINSERT INTO \"Materials\" (id,MaterialName,Quantity,UnitCost) VALUES (1,'Concrete Blocks',500,5.0),(2,'Bricks',300,3.5);\nINSERT INTO \"Project\" (id,Name,StartDate,EndDate,Monetary_Value,Percentage_Of_Budget,Infrastructure) VALUES (1,'Project1','2023-01-01','2023-06-01',500000.0,75.0,'Residential Building'),(2,'Project2','2023-02-01','2023-08-01',900000.0,80.0,'Commercial Complex');\nINSERT INTO \"Worker\" (id,FirstName,LastName,JobTitle) VALUES (1,'John','Doe','Carpenter'),(2,'Jane','Smith','Electrician');\n",
      "question": "How much money does it cost to maintain a residential building?",
      "gold_queries": [
        "SELECT Monetary_Value\r\nFROM Project\r\nWHERE Infrastructure = \"Residential Building\""
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "The question inquires about the total costs associated with maintaining a building over its lifespan, including repairs, replacements, and other expenses.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT SUM(Monetary_Value) FROM Project WHERE Infrastructure = 'Residential Building'"
          ]
        },
        {
          "interpretation": "The question asks for the annualized maintenance cost for a residential building's projects.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT SUM(Monetary_Value) * 0.1 * 12 * Percentage_Of_Budget / 100 AS AnnualizedMaintenanceCost\nFROM Project\nWHERE Infrastructure = 'Residential Building'"
          ]
        },
        {
          "interpretation": "It wants the cost of maintenance for the entire lifespan of the project, including administrative costs like labor wages, etc.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Monetary_Value FROM Project"
          ]
        },
        {
          "interpretation": "The query inquires about the costs associated with maintenance, repairs, and upgrades of a residential building's equipment over its lifespan.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT SUM(PurchasePrice) AS TotalPurchaseCost, SUM(RentalRate) AS TotalRentalCost\nFROM Equipment"
          ]
        },
        {
          "interpretation": "The question asks for the total cost of maintaining a residential building, including equipment, materials, and labor costs.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    SUM(E.RentalRate * E.DailyUsage) AS EquipmentCost,\n    SUM(M.Quantity * M.UnitCost) AS MaterialsCost,\n    (SELECT COUNT(*) * 100 AS LaborCost FROM Worker) AS LaborCost\nFROM \n    Equipment E, \n    Materials M, \n    Project P\nWHERE \n    P.Infrastructure = 'Residential Building'"
          ]
        },
        {
          "interpretation": "The cost of maintenance is the total of the equipment's replacement costs in a residential building over a certain amount of time.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT SUM(E.PurchasePrice) AS TotalMaintenanceCost\nFROM Equipment E\nJOIN Project P ON E.id = P.id\nWHERE P.Infrastructure = 'Residential Building'"
          ]
        },
        {
          "interpretation": "The cost of maintenance is the sum of the rental rates of all equipment used in a residential building.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT SUM(E.RentalRate) AS MaintenanceCost\nFROM Equipment E\nJOIN Project P ON 1=1  -- Assuming we need to calculate for all projects of type 'Residential Building'\nWHERE P.Infrastructure = 'Residential Building'"
          ]
        },
        {
          "interpretation": "The cost of maintenance equals the sum of the daily usage times the rental rate of each equipment used in residential building construction.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT SUM(E.DailyUsage * E.RentalRate) AS MaintenanceCost\nFROM Equipment E\nJOIN Project P ON 1=1  -- Since no direct join condition, assuming all equipment is potentially used in any project\nWHERE P.Infrastructure = 'Residential Building'"
          ]
        },
        {
          "interpretation": "The cost of maintenance is the sum of the unit costs of all materials used during the construction of a residential building.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT SUM(UnitCost * Quantity) AS MaintenanceCost\nFROM Materials"
          ]
        }
      ],
      "num_unique_execution_results": 9,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.1111111111111111,
        "one_found": true,
        "f1_score": 0.19999999999999998,
        "num_queries": 9,
        "num_unique_queries": 9,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Construction/vague_2cols_maintenance_cost/vague_2cols_maintenance_cost.sqlite",
      "db_dump": "CREATE TABLE Equipment(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    EquipName TEXT,\n    PurchasePrice REAL,\n    RentalRate REAL,\n    DailyUsage INT);\nCREATE TABLE Materials(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    MaterialName TEXT,\n    Quantity INT,\n    UnitCost REAL);\nCREATE TABLE Project (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    StartDate DATE,\n    EndDate DATE,\n    Monetary_Value REAL,\n    Percentage_Of_Budget REAL,\n    Infrastructure TEXT);\nCREATE TABLE Worker(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    JobTitle TEXT);\n\nINSERT INTO \"Equipment\" (id,EquipName,PurchasePrice,RentalRate,DailyUsage) VALUES (1,'Excavator',20000.0,1000.0,8),(2,'Crane',30000.0,1500.0,6);\nINSERT INTO \"Materials\" (id,MaterialName,Quantity,UnitCost) VALUES (1,'Concrete Blocks',500,5.0),(2,'Bricks',300,3.5);\nINSERT INTO \"Project\" (id,Name,StartDate,EndDate,Monetary_Value,Percentage_Of_Budget,Infrastructure) VALUES (1,'Project1','2023-01-01','2023-06-01',500000.0,75.0,'Residential Building'),(2,'Project2','2023-02-01','2023-08-01',900000.0,80.0,'Commercial Complex');\nINSERT INTO \"Worker\" (id,FirstName,LastName,JobTitle) VALUES (1,'John','Doe','Carpenter'),(2,'Jane','Smith','Electrician');\n",
      "question": "What's the monetary value and budget percentage of the longest project?",
      "gold_queries": [
        "SELECT Monetary_Value, Percentage_Of_Budget\r\nFROM Project\r\nWHERE JULIANDAY(EndDate) - JULIANDAY(StartDate) = (\r\n    SELECT MAX(JULIANDAY(EndDate) - JULIANDAY(StartDate))\r\n    FROM Project\r\n)"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Find the date range between start date and end date of a project with lowest end date, and get monetary value and percentage of budget.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT StartDate, EndDate, Monetary_Value, Percentage_Of_Budget\nFROM Project\nORDER BY EndDate ASC\nLIMIT 1"
          ]
        },
        {
          "interpretation": "Find the monetary value and budget percentage of the project whose end date is the latest.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Monetary_Value, Percentage_Of_Budget FROM Project WHERE EndDate = (SELECT MAX(EndDate) FROM Project)"
          ]
        },
        {
          "interpretation": "Find the maximum duration between the'start date' and 'end date' of the 'Project' table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT MAX(strftime('%J', EndDate) - strftime('%J', StartDate)) AS MaxDuration\nFROM Project"
          ]
        },
        {
          "interpretation": "What are the monetary values and budget percentages of all projects.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Monetary_Value, Percentage_Of_Budget FROM Project"
          ]
        },
        {
          "interpretation": "What's the project with the longest duration and what are its monetary value and budget percentage.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, Monetary_Value, Percentage_Of_Budget \nFROM Project \nORDER BY JULIANDAY(EndDate) - JULIANDAY(StartDate) DESC \nLIMIT 1"
          ]
        },
        {
          "interpretation": "What's the end date and the monetary value and budget percentage of the first project any existing, after a specific second project, instead interpreted as the project nearest end date to the second project.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT EndDate, Monetary_Value, Percentage_Of_Budget\nFROM Project\nWHERE id = (\n    SELECT id\n    FROM Project\n    WHERE EndDate > (\n        SELECT EndDate\n        FROM Project\n        WHERE id = 2\n    )\n    ORDER BY EndDate ASC\n    LIMIT 1\n)"
          ]
        },
        {
          "interpretation": "What are the Monetary value, Budget percent and End date of the project with the last entry in the table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Monetary_Value, Percentage_Of_Budget, EndDate FROM Project ORDER BY id DESC LIMIT 1"
          ]
        },
        {
          "interpretation": "What are the project with the latest end date.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, StartDate, EndDate, Monetary_Value, Percentage_Of_Budget, Infrastructure \nFROM Project \nORDER BY EndDate DESC \nLIMIT 1"
          ]
        }
      ],
      "num_unique_execution_results": 8,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.125,
        "one_found": true,
        "f1_score": 0.2222222222222222,
        "num_queries": 8,
        "num_unique_queries": 8,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Construction/vague_2cols_maintenance_cost/vague_2cols_maintenance_cost.sqlite",
      "db_dump": "CREATE TABLE Equipment(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    EquipName TEXT,\n    PurchasePrice REAL,\n    RentalRate REAL,\n    DailyUsage INT);\nCREATE TABLE Materials(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    MaterialName TEXT,\n    Quantity INT,\n    UnitCost REAL);\nCREATE TABLE Project (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    StartDate DATE,\n    EndDate DATE,\n    Monetary_Value REAL,\n    Percentage_Of_Budget REAL,\n    Infrastructure TEXT);\nCREATE TABLE Worker(\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    JobTitle TEXT);\n\nINSERT INTO \"Equipment\" (id,EquipName,PurchasePrice,RentalRate,DailyUsage) VALUES (1,'Excavator',20000.0,1000.0,8),(2,'Crane',30000.0,1500.0,6);\nINSERT INTO \"Materials\" (id,MaterialName,Quantity,UnitCost) VALUES (1,'Concrete Blocks',500,5.0),(2,'Bricks',300,3.5);\nINSERT INTO \"Project\" (id,Name,StartDate,EndDate,Monetary_Value,Percentage_Of_Budget,Infrastructure) VALUES (1,'Project1','2023-01-01','2023-06-01',500000.0,75.0,'Residential Building'),(2,'Project2','2023-02-01','2023-08-01',900000.0,80.0,'Commercial Complex');\nINSERT INTO \"Worker\" (id,FirstName,LastName,JobTitle) VALUES (1,'John','Doe','Carpenter'),(2,'Jane','Smith','Electrician');\n",
      "question": "What percentage of the budget can we use for maintenance on the residential building?",
      "gold_queries": [
        "SELECT Percentage_Of_Budget\r\nFROM Project\r\nWHERE Infrastructure = \"Residential Building\""
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Assume that 75.0% of the residential building project's budget can be spent on maintenance.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT 0.75 * Monetary_Value AS Maintenance_Budget\nFROM Project\nWHERE Infrastructure = 'Residential Building'"
          ]
        },
        {
          "interpretation": "Use the available 'Monetary_Value' from another project in place of the 'Residential Building' project if the specific project-driven percentage isn't present in another project.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Monetary_Value \nFROM Project \nWHERE Infrastructure = 'Residential Building' \nOR (Percentage_Of_Budget IS NULL AND Infrastructure != 'Residential Building') \nORDER BY CASE WHEN Infrastructure = 'Residential Building' THEN 1 ELSE 2 END, id \nLIMIT 1"
          ]
        },
        {
          "interpretation": "Allocate the budget from all successfully completed projects to see what proportion could be devoted to maintenance of all projects including but not limited to residential builds.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT SUM(CASE WHEN Infrastructure LIKE '%Residential%' THEN Monetary_Value ELSE 0 END) / SUM(Monetary_Value) AS Proportion_Residential\nFROM Project"
          ]
        },
        {
          "interpretation": "Exclude the 'Percentage_Of_Budget' for the 'Residential Building' project from being used for maintenance.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Name, StartDate, EndDate, Monetary_Value, Infrastructure\nFROM Project\nWHERE Infrastructure != 'Residential Building'"
          ]
        },
        {
          "interpretation": "For the 'Residential Building' project, assume it's 20% complete and use that fact to adjust the 'Monetary_Value' before finding its budget available for maintenance.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Monetary_Value * 0.2 AS Budget_Available_For_Maintenance\nFROM Project\nWHERE Infrastructure = 'Residential Building'"
          ]
        },
        {
          "interpretation": "The percentage of the budget specified in the Project table for maintenance (not directly available, assumes relevance of 'Monetary_Value' as total budget).",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Percentage_Of_Budget FROM Project"
          ]
        },
        {
          "interpretation": "Use the 'Percentage_Of_Budget' from the Project table where the 'Infrastructure' matches ('Residential Building').",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Percentage_Of_Budget FROM Project WHERE Infrastructure = 'Residential Building'"
          ]
        },
        {
          "interpretation": "Calculate the maintenance budget considering all projects.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT SUM(Monetary_Value) * 0.1 AS Maintenance_Budget FROM Project"
          ]
        },
        {
          "interpretation": "Assume the residential building's total construction budget is only a portion of the company's overall budget.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Monetary_Value, Percentage_Of_Budget FROM Project WHERE Infrastructure = 'Residential Building'"
          ]
        },
        {
          "interpretation": "Find the total project budget of the project with Infrastructure 'Residential Building' and calculate its maintenance budget based on it.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Monetary_Value, Monetary_Value * (1 - Percentage_Of_Budget / 100) AS Maintenance_Budget\nFROM Project\nWHERE Infrastructure = 'Residential Building'"
          ]
        },
        {
          "interpretation": "Apply the 'Percentage_Of_Budget' from the database with the project that best fits the question context.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Percentage_Of_Budget FROM Project WHERE Infrastructure = 'Commercial Complex'"
          ]
        },
        {
          "interpretation": "No budget is specified for maintenance, but 'Percentage_Of_Budget' can be assumed as available for maintenance if not allocated.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT SUM(Monetary_Value) * (1 - SUM(Percentage_Of_Budget) / 100) AS Available_for_Maintenance\nFROM Project"
          ]
        },
        {
          "interpretation": "If five projects exist in total, use 'Percentage_Of_Budget' value of the second project for a hypothetical situation for 'Residential Building'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Percentage_Of_Budget FROM Project WHERE id = 2 AND Infrastructure = 'Residential Building'"
          ]
        }
      ],
      "num_unique_execution_results": 13,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.07692307692307693,
        "one_found": true,
        "f1_score": 0.14285714285714288,
        "num_queries": 13,
        "num_unique_queries": 13,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Banking/vague_2cols_requirements/vague_2cols_requirements.sqlite",
      "db_dump": "CREATE TABLE Accounts (\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    Balance REAL DEFAULT 0.0,\n    InterestRate REAL DEFAULT 0.0,\n    OpenDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Status TEXT ,\n    CustomerID INTEGER,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Branches (\n    BranchID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT,\n    ManagerID INTEGER,\n    FOREIGN KEY(ManagerID) REFERENCES Employees(EmployeeID));\nCREATE TABLE Customers (\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE,\n    EmailAddress TEXT UNIQUE);\nCREATE TABLE EligibilityAndDocuments (\n    ApplicationID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Eligibility_Criteria TEXT,\n    Documentation_Requirements TEXT,\n    Business_Loan_Application BOOLEAN,\n    LoanID INTEGER,\n    FOREIGN KEY(LoanID) REFERENCES Loans(LoanID));\nCREATE TABLE Employees (\n    EmployeeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    HireDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Role TEXT,\n    Salary REAL,\n    BranchID INTEGER,\n    FOREIGN KEY(BranchID) REFERENCES Branches(BranchID));\nCREATE TABLE Loans (\n    LoanID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Amount REAL,\n    Term INT,\n    Rate REAL,\n    ApprovalDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Status TEXT ,\n    CustomerID INTEGER,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Transactions (\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Description TEXT,\n    Type TEXT ,\n    Amount REAL,\n    Timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    AccountNumber INTEGER,\n    FOREIGN KEY(AccountNumber) REFERENCES Accounts(AccountNumber));\n\nINSERT INTO \"Accounts\" (AccountNumber,Balance,InterestRate,OpenDate,Status,CustomerID) VALUES (1,1000.0,'2.5%','2021-06-01','Active',1),(2,2000.0,'1.5%','2021-07-01','Inactive',2);\nINSERT INTO \"Branches\" (BranchID,Name,Address,PhoneNumber,ManagerID) VALUES (1,'Main Street Branch','1 Main St, Anytown','555-123-4567',NULL),(2,'Southside Branch','123 South Rd, Anycity','555-987-6543',1);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,DateOfBirth,EmailAddress) VALUES (1,'John Doe','Doe','2000-01-01','johndoe@email.com'),(2,'Jane Smith','Smith','1998-03-27','janesmith@email.com');\nINSERT INTO \"EligibilityAndDocuments\" (ApplicationID,Eligibility_Criteria,Documentation_Requirements,Business_Loan_Application,LoanID) VALUES (1,'Excellent credit history.','Proof of income, tax returns.',0,1),(2,'Good credit history.','Bank statements, pay stubs.',1,2);\nINSERT INTO \"Employees\" (EmployeeID,FirstName,LastName,HireDate,Role,Salary,BranchID) VALUES (1,'Alice Johnson','Johnson','2021-01-01','Teller',40000.0,1),(2,'Michael Brown','Brown','2021-01-15','Branch manager',50000.0,1);\nINSERT INTO \"Loans\" (LoanID,Amount,Term,Rate,ApprovalDate,Status,CustomerID) VALUES (1,50000.0,36,'5.5%','2021-06-10','Approved',1),(2,40000.0,24,'4.0%','2021-07-05','Pending',2);\nINSERT INTO \"Transactions\" (TransactionID,Description,Type,Amount,Timestamp,AccountNumber) VALUES (1,'Salary deposit','Credit',3000.0,'2021-06-15',1),(2,'Utility payment','Debit',-200.0,'2021-06-20',1);\n",
      "question": "What are the eligibility criteria required for this loan?",
      "gold_queries": [
        "Select Loans.LoanID, EligibilityAndDocuments.Eligibility_Criteria    From EligibilityAndDocuments JOIN Loans ON Loans.LoanID = EligibilityAndDocuments.LoanId"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What are the eligibility criteria required for loans with a status of pending?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Eligibility_Criteria FROM EligibilityAndDocuments WHERE LoanID IN (SELECT LoanID FROM Loans WHERE Status = 'Pending')"
          ]
        },
        {
          "interpretation": "What are the eligibility criteria required for loans in general?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT Eligibility_Criteria FROM EligibilityAndDocuments"
          ]
        },
        {
          "interpretation": "What are the eligibility criteria required for a loan that has been approved recently?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Eligibility_Criteria FROM EligibilityAndDocuments WHERE LoanID IN (SELECT LoanID FROM Loans WHERE Status = 'Approved' ORDER BY ApprovalDate DESC LIMIT 1)"
          ]
        },
        {
          "interpretation": "What are the eligibility criteria that were required for the loan with ID <120?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Eligibility_Criteria FROM EligibilityAndDocuments WHERE LoanID = 120"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Banking/vague_2cols_requirements/vague_2cols_requirements.sqlite",
      "db_dump": "CREATE TABLE Accounts (\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    Balance REAL DEFAULT 0.0,\n    InterestRate REAL DEFAULT 0.0,\n    OpenDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Status TEXT ,\n    CustomerID INTEGER,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Branches (\n    BranchID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT,\n    ManagerID INTEGER,\n    FOREIGN KEY(ManagerID) REFERENCES Employees(EmployeeID));\nCREATE TABLE Customers (\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE,\n    EmailAddress TEXT UNIQUE);\nCREATE TABLE EligibilityAndDocuments (\n    ApplicationID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Eligibility_Criteria TEXT,\n    Documentation_Requirements TEXT,\n    Business_Loan_Application BOOLEAN,\n    LoanID INTEGER,\n    FOREIGN KEY(LoanID) REFERENCES Loans(LoanID));\nCREATE TABLE Employees (\n    EmployeeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    HireDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Role TEXT,\n    Salary REAL,\n    BranchID INTEGER,\n    FOREIGN KEY(BranchID) REFERENCES Branches(BranchID));\nCREATE TABLE Loans (\n    LoanID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Amount REAL,\n    Term INT,\n    Rate REAL,\n    ApprovalDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Status TEXT ,\n    CustomerID INTEGER,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Transactions (\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Description TEXT,\n    Type TEXT ,\n    Amount REAL,\n    Timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    AccountNumber INTEGER,\n    FOREIGN KEY(AccountNumber) REFERENCES Accounts(AccountNumber));\n\nINSERT INTO \"Accounts\" (AccountNumber,Balance,InterestRate,OpenDate,Status,CustomerID) VALUES (1,1000.0,'2.5%','2021-06-01','Active',1),(2,2000.0,'1.5%','2021-07-01','Inactive',2);\nINSERT INTO \"Branches\" (BranchID,Name,Address,PhoneNumber,ManagerID) VALUES (1,'Main Street Branch','1 Main St, Anytown','555-123-4567',NULL),(2,'Southside Branch','123 South Rd, Anycity','555-987-6543',1);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,DateOfBirth,EmailAddress) VALUES (1,'John Doe','Doe','2000-01-01','johndoe@email.com'),(2,'Jane Smith','Smith','1998-03-27','janesmith@email.com');\nINSERT INTO \"EligibilityAndDocuments\" (ApplicationID,Eligibility_Criteria,Documentation_Requirements,Business_Loan_Application,LoanID) VALUES (1,'Excellent credit history.','Proof of income, tax returns.',0,1),(2,'Good credit history.','Bank statements, pay stubs.',1,2);\nINSERT INTO \"Employees\" (EmployeeID,FirstName,LastName,HireDate,Role,Salary,BranchID) VALUES (1,'Alice Johnson','Johnson','2021-01-01','Teller',40000.0,1),(2,'Michael Brown','Brown','2021-01-15','Branch manager',50000.0,1);\nINSERT INTO \"Loans\" (LoanID,Amount,Term,Rate,ApprovalDate,Status,CustomerID) VALUES (1,50000.0,36,'5.5%','2021-06-10','Approved',1),(2,40000.0,24,'4.0%','2021-07-05','Pending',2);\nINSERT INTO \"Transactions\" (TransactionID,Description,Type,Amount,Timestamp,AccountNumber) VALUES (1,'Salary deposit','Credit',3000.0,'2021-06-15',1),(2,'Utility payment','Debit',-200.0,'2021-06-20',1);\n",
      "question": "What are the necessary documents required for this loan?",
      "gold_queries": [
        "Select Loans.LoanID, EligibilityAndDocuments.Documentation_Requirements    From EligibilityAndDocuments JOIN Loans ON Loans.LoanID = EligibilityAndDocuments.LoanId"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What documents should be checked against the customer account for this particular loan.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Documentation_Requirements FROM EligibilityAndDocuments WHERE LoanID = (SELECT LoanID FROM Loans WHERE CustomerID = (SELECT CustomerID FROM Accounts WHERE AccountNumber = 1))"
          ]
        },
        {
          "interpretation": "Describe the Doubts in the loan procedure based on the Documentation requirements.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Documentation_Requirements FROM EligibilityAndDocuments"
          ]
        },
        {
          "interpretation": "What are the necessary documents required for a business loan (which includes this loan)",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Documentation_Requirements FROM EligibilityAndDocuments WHERE Business_Loan_Application = 1"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Banking/vague_2cols_requirements/vague_2cols_requirements.sqlite",
      "db_dump": "CREATE TABLE Accounts (\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    Balance REAL DEFAULT 0.0,\n    InterestRate REAL DEFAULT 0.0,\n    OpenDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Status TEXT ,\n    CustomerID INTEGER,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Branches (\n    BranchID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT,\n    ManagerID INTEGER,\n    FOREIGN KEY(ManagerID) REFERENCES Employees(EmployeeID));\nCREATE TABLE Customers (\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE,\n    EmailAddress TEXT UNIQUE);\nCREATE TABLE EligibilityAndDocuments (\n    ApplicationID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Eligibility_Criteria TEXT,\n    Documentation_Requirements TEXT,\n    Business_Loan_Application BOOLEAN,\n    LoanID INTEGER,\n    FOREIGN KEY(LoanID) REFERENCES Loans(LoanID));\nCREATE TABLE Employees (\n    EmployeeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    HireDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Role TEXT,\n    Salary REAL,\n    BranchID INTEGER,\n    FOREIGN KEY(BranchID) REFERENCES Branches(BranchID));\nCREATE TABLE Loans (\n    LoanID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Amount REAL,\n    Term INT,\n    Rate REAL,\n    ApprovalDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Status TEXT ,\n    CustomerID INTEGER,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Transactions (\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Description TEXT,\n    Type TEXT ,\n    Amount REAL,\n    Timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    AccountNumber INTEGER,\n    FOREIGN KEY(AccountNumber) REFERENCES Accounts(AccountNumber));\n\nINSERT INTO \"Accounts\" (AccountNumber,Balance,InterestRate,OpenDate,Status,CustomerID) VALUES (1,1000.0,'2.5%','2021-06-01','Active',1),(2,2000.0,'1.5%','2021-07-01','Inactive',2);\nINSERT INTO \"Branches\" (BranchID,Name,Address,PhoneNumber,ManagerID) VALUES (1,'Main Street Branch','1 Main St, Anytown','555-123-4567',NULL),(2,'Southside Branch','123 South Rd, Anycity','555-987-6543',1);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,DateOfBirth,EmailAddress) VALUES (1,'John Doe','Doe','2000-01-01','johndoe@email.com'),(2,'Jane Smith','Smith','1998-03-27','janesmith@email.com');\nINSERT INTO \"EligibilityAndDocuments\" (ApplicationID,Eligibility_Criteria,Documentation_Requirements,Business_Loan_Application,LoanID) VALUES (1,'Excellent credit history.','Proof of income, tax returns.',0,1),(2,'Good credit history.','Bank statements, pay stubs.',1,2);\nINSERT INTO \"Employees\" (EmployeeID,FirstName,LastName,HireDate,Role,Salary,BranchID) VALUES (1,'Alice Johnson','Johnson','2021-01-01','Teller',40000.0,1),(2,'Michael Brown','Brown','2021-01-15','Branch manager',50000.0,1);\nINSERT INTO \"Loans\" (LoanID,Amount,Term,Rate,ApprovalDate,Status,CustomerID) VALUES (1,50000.0,36,'5.5%','2021-06-10','Approved',1),(2,40000.0,24,'4.0%','2021-07-05','Pending',2);\nINSERT INTO \"Transactions\" (TransactionID,Description,Type,Amount,Timestamp,AccountNumber) VALUES (1,'Salary deposit','Credit',3000.0,'2021-06-15',1),(2,'Utility payment','Debit',-200.0,'2021-06-20',1);\n",
      "question": "What were the requirements for each loan.",
      "gold_queries": [
        "Select Loans.LoanID, EligibilityAndDocuments.Eligibility_Criteria    From EligibilityAndDocuments JOIN Loans ON Loans.LoanID = EligibilityAndDocuments.LoanId",
        "Select Loans.LoanID, EligibilityAndDocuments.Documentation_Requirements    From EligibilityAndDocuments JOIN Loans ON Loans.LoanID = EligibilityAndDocuments.LoanId",
        "Select Loans.LoanID, EligibilityAndDocuments.Eligibility_Criteria, Documentation_Requirements    From EligibilityAndDocuments JOIN Loans ON Loans.LoanID = EligibilityAndDocuments.LoanId"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Get the requirements for small business loans.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Documentation_Requirements FROM EligibilityAndDocuments WHERE Business_Loan_Application = 1"
          ]
        },
        {
          "interpretation": "Get the application ID for loans with requirements 'Proof of income, tax returns'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT ApplicationID FROM EligibilityAndDocuments WHERE Documentation_Requirements = 'Proof of income, tax returns.'"
          ]
        },
        {
          "interpretation": "What were the specific eligibility and documentation requirements for loan ID 1.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Eligibility_Criteria, Documentation_Requirements FROM EligibilityAndDocuments WHERE LoanID = 1"
          ]
        },
        {
          "interpretation": "Note the requirements for loans approved after '2021-06-01'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT LoanID, Amount, Term, Rate, ApprovalDate, Status, CustomerID \nFROM Loans \nWHERE ApprovalDate > '2021-06-01'"
          ]
        },
        {
          "interpretation": "Get the rank of each loan based on their requirements.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT LoanID, \n       RANK() OVER (ORDER BY ApplicationID) AS Rank \nFROM EligibilityAndDocuments"
          ]
        },
        {
          "interpretation": "Retrieve the business loan application status and requirements for each loan.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT LoanID, Business_Loan_Application, Eligibility_Criteria, Documentation_Requirements FROM EligibilityAndDocuments"
          ]
        },
        {
          "interpretation": "Note the requirements for business loans with a status of 'Approved'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Eligibility_Criteria, Documentation_Requirements \nFROM EligibilityAndDocuments \nWHERE Business_Loan_Application = 1 AND LoanID IN (SELECT LoanID FROM Loans WHERE Status = 'Approved')"
          ]
        },
        {
          "interpretation": "Get the requirements for personal loans.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Documentation_Requirements FROM EligibilityAndDocuments WHERE Business_Loan_Application = 0"
          ]
        },
        {
          "interpretation": "Get the categorization of loans based on their requirements.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT business_loan_application, eligibility_criteria, documentation_requirements\nFROM EligibilityAndDocuments"
          ]
        },
        {
          "interpretation": "What documents and eligibility criteria were required for approval of each loan.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Eligibility_Criteria, Documentation_Requirements FROM EligibilityAndDocuments"
          ]
        },
        {
          "interpretation": "Note the eligibility criteria for loans with a business loan application status of 0.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Eligibility_Criteria FROM EligibilityAndDocuments WHERE Business_Loan_Application = 0"
          ]
        },
        {
          "interpretation": "Note the requirements for loans applied for by customers with a 'Good credit history'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Eligibility_Criteria, Documentation_Requirements \nFROM EligibilityAndDocuments \nWHERE Eligibility_Criteria = 'Good credit history.'"
          ]
        },
        {
          "interpretation": "Retrieve all requirements for loans with a term of less than 48 months.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Documentation_Requirements FROM EligibilityAndDocuments WHERE LoanID IN (SELECT LoanID FROM Loans WHERE Term < 48)"
          ]
        }
      ],
      "num_unique_execution_results": 13,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 13,
        "num_unique_queries": 13,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Banking/vague_2cols_requirements/vague_2cols_requirements.sqlite",
      "db_dump": "CREATE TABLE Accounts (\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    Balance REAL DEFAULT 0.0,\n    InterestRate REAL DEFAULT 0.0,\n    OpenDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Status TEXT ,\n    CustomerID INTEGER,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Branches (\n    BranchID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT,\n    ManagerID INTEGER,\n    FOREIGN KEY(ManagerID) REFERENCES Employees(EmployeeID));\nCREATE TABLE Customers (\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE,\n    EmailAddress TEXT UNIQUE);\nCREATE TABLE EligibilityAndDocuments (\n    ApplicationID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Eligibility_Criteria TEXT,\n    Documentation_Requirements TEXT,\n    Business_Loan_Application BOOLEAN,\n    LoanID INTEGER,\n    FOREIGN KEY(LoanID) REFERENCES Loans(LoanID));\nCREATE TABLE Employees (\n    EmployeeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    HireDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Role TEXT,\n    Salary REAL,\n    BranchID INTEGER,\n    FOREIGN KEY(BranchID) REFERENCES Branches(BranchID));\nCREATE TABLE Loans (\n    LoanID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Amount REAL,\n    Term INT,\n    Rate REAL,\n    ApprovalDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Status TEXT ,\n    CustomerID INTEGER,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Transactions (\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Description TEXT,\n    Type TEXT ,\n    Amount REAL,\n    Timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    AccountNumber INTEGER,\n    FOREIGN KEY(AccountNumber) REFERENCES Accounts(AccountNumber));\n\nINSERT INTO \"Accounts\" (AccountNumber,Balance,InterestRate,OpenDate,Status,CustomerID) VALUES (1,1000.0,'2.5%','2021-06-01','Active',1),(2,2000.0,'1.5%','2021-07-01','Inactive',2);\nINSERT INTO \"Branches\" (BranchID,Name,Address,PhoneNumber,ManagerID) VALUES (1,'Main Street Branch','1 Main St, Anytown','555-123-4567',NULL),(2,'Southside Branch','123 South Rd, Anycity','555-987-6543',1);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,DateOfBirth,EmailAddress) VALUES (1,'John Doe','Doe','2000-01-01','johndoe@email.com'),(2,'Jane Smith','Smith','1998-03-27','janesmith@email.com');\nINSERT INTO \"EligibilityAndDocuments\" (ApplicationID,Eligibility_Criteria,Documentation_Requirements,Business_Loan_Application,LoanID) VALUES (1,'Excellent credit history.','Proof of income, tax returns.',0,1),(2,'Good credit history.','Bank statements, pay stubs.',1,2);\nINSERT INTO \"Employees\" (EmployeeID,FirstName,LastName,HireDate,Role,Salary,BranchID) VALUES (1,'Alice Johnson','Johnson','2021-01-01','Teller',40000.0,1),(2,'Michael Brown','Brown','2021-01-15','Branch manager',50000.0,1);\nINSERT INTO \"Loans\" (LoanID,Amount,Term,Rate,ApprovalDate,Status,CustomerID) VALUES (1,50000.0,36,'5.5%','2021-06-10','Approved',1),(2,40000.0,24,'4.0%','2021-07-05','Pending',2);\nINSERT INTO \"Transactions\" (TransactionID,Description,Type,Amount,Timestamp,AccountNumber) VALUES (1,'Salary deposit','Credit',3000.0,'2021-06-15',1),(2,'Utility payment','Debit',-200.0,'2021-06-20',1);\n",
      "question": "Which loans met the approval status and what were the requirements",
      "gold_queries": [
        "Select Loans.LoanID, EligibilityAndDocuments.Eligibility_Criteria    From EligibilityAndDocuments JOIN Loans ON Loans.LoanID = EligibilityAndDocuments.LoanId Where Loans.Status = 'Approved'",
        "Select Loans.LoanID, EligibilityAndDocuments.Documentation_Requirements    From EligibilityAndDocuments JOIN Loans ON Loans.LoanID = EligibilityAndDocuments.LoanId Where Loans.Status = 'Approved'",
        "Select Loans.LoanID, EligibilityAndDocuments.Eligibility_Criteria, Documentation_Requirements    From EligibilityAndDocuments JOIN Loans ON Loans.LoanID = EligibilityAndDocuments.LoanId Where Loans.Status = 'Approved'"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Which approved loans and their associated eligibility criteria and documentation requirements.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT L.LoanID, E.Eligibility_Criteria, E.Documentation_Requirements \nFROM Loans L \nJOIN EligibilityAndDocuments E ON L.LoanID = E.LoanID \nWHERE L.Status = 'Approved'"
          ]
        },
        {
          "interpretation": "List the eligibility criteria and documentation requirements for the approved loans.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Eligibility_Criteria, Documentation_Requirements\nFROM EligibilityAndDocuments\nWHERE LoanID IN (SELECT LoanID FROM Loans WHERE Status = 'Approved')"
          ]
        },
        {
          "interpretation": "What were the requirements for loans that are currently approved.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Documentation_Requirements \nFROM EligibilityAndDocuments \nWHERE LoanID IN (SELECT LoanID FROM Loans WHERE Status = 'Approved')"
          ]
        },
        {
          "interpretation": "Which loans met the approval status as 'Approved'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT LoanID, Amount, Term, Rate, ApprovalDate, Status, CustomerID FROM Loans WHERE Status = 'Approved'"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.3333333333333333,
        "precision": 0.25,
        "one_found": true,
        "f1_score": 0.28571428571428575,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Banking/vague_2cols_requirements/vague_2cols_requirements.sqlite",
      "db_dump": "CREATE TABLE Accounts (\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    Balance REAL DEFAULT 0.0,\n    InterestRate REAL DEFAULT 0.0,\n    OpenDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Status TEXT ,\n    CustomerID INTEGER,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Branches (\n    BranchID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT,\n    ManagerID INTEGER,\n    FOREIGN KEY(ManagerID) REFERENCES Employees(EmployeeID));\nCREATE TABLE Customers (\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE,\n    EmailAddress TEXT UNIQUE);\nCREATE TABLE EligibilityAndDocuments (\n    ApplicationID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Eligibility_Criteria TEXT,\n    Documentation_Requirements TEXT,\n    Business_Loan_Application BOOLEAN,\n    LoanID INTEGER,\n    FOREIGN KEY(LoanID) REFERENCES Loans(LoanID));\nCREATE TABLE Employees (\n    EmployeeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    HireDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Role TEXT,\n    Salary REAL,\n    BranchID INTEGER,\n    FOREIGN KEY(BranchID) REFERENCES Branches(BranchID));\nCREATE TABLE Loans (\n    LoanID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Amount REAL,\n    Term INT,\n    Rate REAL,\n    ApprovalDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Status TEXT ,\n    CustomerID INTEGER,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Transactions (\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Description TEXT,\n    Type TEXT ,\n    Amount REAL,\n    Timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    AccountNumber INTEGER,\n    FOREIGN KEY(AccountNumber) REFERENCES Accounts(AccountNumber));\n\nINSERT INTO \"Accounts\" (AccountNumber,Balance,InterestRate,OpenDate,Status,CustomerID) VALUES (1,1000.0,'2.5%','2021-06-01','Active',1),(2,2000.0,'1.5%','2021-07-01','Inactive',2);\nINSERT INTO \"Branches\" (BranchID,Name,Address,PhoneNumber,ManagerID) VALUES (1,'Main Street Branch','1 Main St, Anytown','555-123-4567',NULL),(2,'Southside Branch','123 South Rd, Anycity','555-987-6543',1);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,DateOfBirth,EmailAddress) VALUES (1,'John Doe','Doe','2000-01-01','johndoe@email.com'),(2,'Jane Smith','Smith','1998-03-27','janesmith@email.com');\nINSERT INTO \"EligibilityAndDocuments\" (ApplicationID,Eligibility_Criteria,Documentation_Requirements,Business_Loan_Application,LoanID) VALUES (1,'Excellent credit history.','Proof of income, tax returns.',0,1),(2,'Good credit history.','Bank statements, pay stubs.',1,2);\nINSERT INTO \"Employees\" (EmployeeID,FirstName,LastName,HireDate,Role,Salary,BranchID) VALUES (1,'Alice Johnson','Johnson','2021-01-01','Teller',40000.0,1),(2,'Michael Brown','Brown','2021-01-15','Branch manager',50000.0,1);\nINSERT INTO \"Loans\" (LoanID,Amount,Term,Rate,ApprovalDate,Status,CustomerID) VALUES (1,50000.0,36,'5.5%','2021-06-10','Approved',1),(2,40000.0,24,'4.0%','2021-07-05','Pending',2);\nINSERT INTO \"Transactions\" (TransactionID,Description,Type,Amount,Timestamp,AccountNumber) VALUES (1,'Salary deposit','Credit',3000.0,'2021-06-15',1),(2,'Utility payment','Debit',-200.0,'2021-06-20',1);\n",
      "question": "List the eligibility criteria  for all approved loans, the document requirements for them and these loans.",
      "gold_queries": [
        "Select Loans.LoanID, EligibilityAndDocuments.Eligibility_Criteria, Documentation_Requirements    From EligibilityAndDocuments JOIN Loans ON Loans.LoanID = EligibilityAndDocuments.LoanId Where Loans.Status = 'Approved'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List the eligibility criteria, and document requirements, information for the loans that were granted approval.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Eligibility_Criteria, Documentation_Requirements\nFROM EligibilityAndDocuments\nWHERE LoanID IN (SELECT LoanID FROM Loans WHERE Status = 'Approved')"
          ]
        },
        {
          "interpretation": "Retrieve the eligibility criteria, document requirements, and the loans that correspond to them.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Eligibility_Criteria, Documentation_Requirements, LoanID FROM EligibilityAndDocuments"
          ]
        },
        {
          "interpretation": "Show all eligibility criteria that were reviewed to approve the loans, and list the specific document requirements for the approvals.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Eligibility_Criteria, Documentation_Requirements FROM EligibilityAndDocuments"
          ]
        },
        {
          "interpretation": "List the document requirements for all approved loans.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.Documentation_Requirements FROM EligibilityAndDocuments AS T1 JOIN Loans AS T2 ON T1.LoanID = T2.LoanID WHERE T2.Status = 'Approved'"
          ]
        },
        {
          "interpretation": "List the eligibility criteria for all approved loans.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.Eligibility_Criteria\nFROM EligibilityAndDocuments E\nJOIN Loans L ON E.LoanID = L.LoanID\nWHERE L.Status = 'Approved'"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Banking/vague_2cols_requirements/vague_2cols_requirements.sqlite",
      "db_dump": "CREATE TABLE Accounts (\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    Balance REAL DEFAULT 0.0,\n    InterestRate REAL DEFAULT 0.0,\n    OpenDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Status TEXT ,\n    CustomerID INTEGER,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Branches (\n    BranchID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT,\n    ManagerID INTEGER,\n    FOREIGN KEY(ManagerID) REFERENCES Employees(EmployeeID));\nCREATE TABLE Customers (\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE,\n    EmailAddress TEXT UNIQUE);\nCREATE TABLE EligibilityAndDocuments (\n    ApplicationID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Eligibility_Criteria TEXT,\n    Documentation_Requirements TEXT,\n    Business_Loan_Application BOOLEAN,\n    LoanID INTEGER,\n    FOREIGN KEY(LoanID) REFERENCES Loans(LoanID));\nCREATE TABLE Employees (\n    EmployeeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    HireDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Role TEXT,\n    Salary REAL,\n    BranchID INTEGER,\n    FOREIGN KEY(BranchID) REFERENCES Branches(BranchID));\nCREATE TABLE Loans (\n    LoanID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Amount REAL,\n    Term INT,\n    Rate REAL,\n    ApprovalDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Status TEXT ,\n    CustomerID INTEGER,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Transactions (\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Description TEXT,\n    Type TEXT ,\n    Amount REAL,\n    Timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    AccountNumber INTEGER,\n    FOREIGN KEY(AccountNumber) REFERENCES Accounts(AccountNumber));\n\nINSERT INTO \"Accounts\" (AccountNumber,Balance,InterestRate,OpenDate,Status,CustomerID) VALUES (1,1000.0,'2.5%','2021-06-01','Active',1),(2,2000.0,'1.5%','2021-07-01','Inactive',2);\nINSERT INTO \"Branches\" (BranchID,Name,Address,PhoneNumber,ManagerID) VALUES (1,'Main Street Branch','1 Main St, Anytown','555-123-4567',NULL),(2,'Southside Branch','123 South Rd, Anycity','555-987-6543',1);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,DateOfBirth,EmailAddress) VALUES (1,'John Doe','Doe','2000-01-01','johndoe@email.com'),(2,'Jane Smith','Smith','1998-03-27','janesmith@email.com');\nINSERT INTO \"EligibilityAndDocuments\" (ApplicationID,Eligibility_Criteria,Documentation_Requirements,Business_Loan_Application,LoanID) VALUES (1,'Excellent credit history.','Proof of income, tax returns.',0,1),(2,'Good credit history.','Bank statements, pay stubs.',1,2);\nINSERT INTO \"Employees\" (EmployeeID,FirstName,LastName,HireDate,Role,Salary,BranchID) VALUES (1,'Alice Johnson','Johnson','2021-01-01','Teller',40000.0,1),(2,'Michael Brown','Brown','2021-01-15','Branch manager',50000.0,1);\nINSERT INTO \"Loans\" (LoanID,Amount,Term,Rate,ApprovalDate,Status,CustomerID) VALUES (1,50000.0,36,'5.5%','2021-06-10','Approved',1),(2,40000.0,24,'4.0%','2021-07-05','Pending',2);\nINSERT INTO \"Transactions\" (TransactionID,Description,Type,Amount,Timestamp,AccountNumber) VALUES (1,'Salary deposit','Credit',3000.0,'2021-06-15',1),(2,'Utility payment','Debit',-200.0,'2021-06-20',1);\n",
      "question": "What are the eligibility criteria required for this loan and necessary documents for it?",
      "gold_queries": [
        "Select Loans.LoanID, EligibilityAndDocuments.Eligibility_Criteria, Documentation_Requirements    From EligibilityAndDocuments JOIN Loans ON Loans.LoanID = EligibilityAndDocuments.LoanId"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What are the eligibility criteria and necessary documents required for a loan that is not a business loan?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Eligibility_Criteria, Documentation_Requirements FROM EligibilityAndDocuments WHERE Business_Loan_Application = 0"
          ]
        },
        {
          "interpretation": "What are the eligibility criteria and necessary documents required for a loan that has been approved by the bank and has a status of 'Pending' in the loans table?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Eligibility_Criteria, Documentation_Requirements \nFROM EligibilityAndDocuments \nWHERE LoanID IN (SELECT LoanID FROM Loans WHERE Status = 'Pending')"
          ]
        },
        {
          "interpretation": "What are the eligibility criteria and necessary documents for loans that have a status of 'Pending' or higher?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Eligibility_Criteria, Documentation_Requirements \nFROM EligibilityAndDocuments \nWHERE LoanID IN (\n    SELECT LoanID \n    FROM Loans \n    WHERE Status IN ('Pending', 'Approved')\n)"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Banking/vague_2cols_requirements/vague_2cols_requirements.sqlite",
      "db_dump": "CREATE TABLE Accounts (\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    Balance REAL DEFAULT 0.0,\n    InterestRate REAL DEFAULT 0.0,\n    OpenDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Status TEXT ,\n    CustomerID INTEGER,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Branches (\n    BranchID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT,\n    ManagerID INTEGER,\n    FOREIGN KEY(ManagerID) REFERENCES Employees(EmployeeID));\nCREATE TABLE Customers (\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE,\n    EmailAddress TEXT UNIQUE);\nCREATE TABLE EligibilityAndDocuments (\n    ApplicationID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Eligibility_Criteria TEXT,\n    Documentation_Requirements TEXT,\n    Business_Loan_Application BOOLEAN,\n    LoanID INTEGER,\n    FOREIGN KEY(LoanID) REFERENCES Loans(LoanID));\nCREATE TABLE Employees (\n    EmployeeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    HireDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Role TEXT,\n    Salary REAL,\n    BranchID INTEGER,\n    FOREIGN KEY(BranchID) REFERENCES Branches(BranchID));\nCREATE TABLE Loans (\n    LoanID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Amount REAL,\n    Term INT,\n    Rate REAL,\n    ApprovalDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Status TEXT ,\n    CustomerID INTEGER,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Transactions (\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Description TEXT,\n    Type TEXT ,\n    Amount REAL,\n    Timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    AccountNumber INTEGER,\n    FOREIGN KEY(AccountNumber) REFERENCES Accounts(AccountNumber));\n\nINSERT INTO \"Accounts\" (AccountNumber,Balance,InterestRate,OpenDate,Status,CustomerID) VALUES (1,1000.0,'2.5%','2021-06-01','Active',1),(2,2000.0,'1.5%','2021-07-01','Inactive',2);\nINSERT INTO \"Branches\" (BranchID,Name,Address,PhoneNumber,ManagerID) VALUES (1,'Main Street Branch','1 Main St, Anytown','555-123-4567',NULL),(2,'Southside Branch','123 South Rd, Anycity','555-987-6543',1);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,DateOfBirth,EmailAddress) VALUES (1,'John Doe','Doe','2000-01-01','johndoe@email.com'),(2,'Jane Smith','Smith','1998-03-27','janesmith@email.com');\nINSERT INTO \"EligibilityAndDocuments\" (ApplicationID,Eligibility_Criteria,Documentation_Requirements,Business_Loan_Application,LoanID) VALUES (1,'Excellent credit history.','Proof of income, tax returns.',0,1),(2,'Good credit history.','Bank statements, pay stubs.',1,2);\nINSERT INTO \"Employees\" (EmployeeID,FirstName,LastName,HireDate,Role,Salary,BranchID) VALUES (1,'Alice Johnson','Johnson','2021-01-01','Teller',40000.0,1),(2,'Michael Brown','Brown','2021-01-15','Branch manager',50000.0,1);\nINSERT INTO \"Loans\" (LoanID,Amount,Term,Rate,ApprovalDate,Status,CustomerID) VALUES (1,50000.0,36,'5.5%','2021-06-10','Approved',1),(2,40000.0,24,'4.0%','2021-07-05','Pending',2);\nINSERT INTO \"Transactions\" (TransactionID,Description,Type,Amount,Timestamp,AccountNumber) VALUES (1,'Salary deposit','Credit',3000.0,'2021-06-15',1),(2,'Utility payment','Debit',-200.0,'2021-06-20',1);\n",
      "question": "List the document requirements for all approved loans and these loans.",
      "gold_queries": [
        "Select Loans.LoanID, EligibilityAndDocuments.Documentation_Requirements    From EligibilityAndDocuments JOIN Loans ON Loans.LoanID = EligibilityAndDocuments.LoanId Where Loans.Status = 'Approved'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List the document requirements for loans that have been approved, along with their corresponding loan amounts.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Documentation_Requirements, Amount\nFROM EligibilityAndDocuments\nJOIN Loans ON EligibilityAndDocuments.LoanID = Loans.LoanID\nWHERE Status = 'Approved'"
          ]
        },
        {
          "interpretation": "List the document requirements for loans that are approved and have a specific status.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.Documentation_Requirements \nFROM EligibilityAndDocuments AS T1 \nJOIN Loans AS T2 ON T1.LoanID = T2.LoanID \nWHERE T2.Status = 'Approved'"
          ]
        },
        {
          "interpretation": "List the document requirements for all approved loans and the customers who have these loans.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT EAD.Documentation_Requirements, C.FirstName, C.LastName\nFROM EligibilityAndDocuments EAD\nJOIN Loans L ON EAD.LoanID = L.LoanID\nJOIN Customers C ON L.CustomerID = C.CustomerID\nWHERE L.Status = 'Approved'"
          ]
        },
        {
          "interpretation": "List the document requirements for all approved loans and their specific loan IDs.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Documentation_Requirements, LoanID FROM EligibilityAndDocuments WHERE LoanID IN (SELECT LoanID FROM Loans WHERE Status = 'Approved')"
          ]
        },
        {
          "interpretation": "List the document requirements for the approved loans and the dates on which these loans were approved.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT EligibilityAndDocuments.Documentation_Requirements, Loans.ApprovalDate \nFROM EligibilityAndDocuments \nJOIN Loans ON EligibilityAndDocuments.LoanID = Loans.LoanID \nWHERE Loans.Status = 'Approved'"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "one_found": true,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Banking/vague_2cols_requirements/vague_2cols_requirements.sqlite",
      "db_dump": "CREATE TABLE Accounts (\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n    Balance REAL DEFAULT 0.0,\n    InterestRate REAL DEFAULT 0.0,\n    OpenDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Status TEXT ,\n    CustomerID INTEGER,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Branches (\n    BranchID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT,\n    Address TEXT,\n    PhoneNumber TEXT,\n    ManagerID INTEGER,\n    FOREIGN KEY(ManagerID) REFERENCES Employees(EmployeeID));\nCREATE TABLE Customers (\n    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE,\n    EmailAddress TEXT UNIQUE);\nCREATE TABLE EligibilityAndDocuments (\n    ApplicationID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Eligibility_Criteria TEXT,\n    Documentation_Requirements TEXT,\n    Business_Loan_Application BOOLEAN,\n    LoanID INTEGER,\n    FOREIGN KEY(LoanID) REFERENCES Loans(LoanID));\nCREATE TABLE Employees (\n    EmployeeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    HireDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Role TEXT,\n    Salary REAL,\n    BranchID INTEGER,\n    FOREIGN KEY(BranchID) REFERENCES Branches(BranchID));\nCREATE TABLE Loans (\n    LoanID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Amount REAL,\n    Term INT,\n    Rate REAL,\n    ApprovalDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    Status TEXT ,\n    CustomerID INTEGER,\n    FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID));\nCREATE TABLE Transactions (\n    TransactionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Description TEXT,\n    Type TEXT ,\n    Amount REAL,\n    Timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    AccountNumber INTEGER,\n    FOREIGN KEY(AccountNumber) REFERENCES Accounts(AccountNumber));\n\nINSERT INTO \"Accounts\" (AccountNumber,Balance,InterestRate,OpenDate,Status,CustomerID) VALUES (1,1000.0,'2.5%','2021-06-01','Active',1),(2,2000.0,'1.5%','2021-07-01','Inactive',2);\nINSERT INTO \"Branches\" (BranchID,Name,Address,PhoneNumber,ManagerID) VALUES (1,'Main Street Branch','1 Main St, Anytown','555-123-4567',NULL),(2,'Southside Branch','123 South Rd, Anycity','555-987-6543',1);\nINSERT INTO \"Customers\" (CustomerID,FirstName,LastName,DateOfBirth,EmailAddress) VALUES (1,'John Doe','Doe','2000-01-01','johndoe@email.com'),(2,'Jane Smith','Smith','1998-03-27','janesmith@email.com');\nINSERT INTO \"EligibilityAndDocuments\" (ApplicationID,Eligibility_Criteria,Documentation_Requirements,Business_Loan_Application,LoanID) VALUES (1,'Excellent credit history.','Proof of income, tax returns.',0,1),(2,'Good credit history.','Bank statements, pay stubs.',1,2);\nINSERT INTO \"Employees\" (EmployeeID,FirstName,LastName,HireDate,Role,Salary,BranchID) VALUES (1,'Alice Johnson','Johnson','2021-01-01','Teller',40000.0,1),(2,'Michael Brown','Brown','2021-01-15','Branch manager',50000.0,1);\nINSERT INTO \"Loans\" (LoanID,Amount,Term,Rate,ApprovalDate,Status,CustomerID) VALUES (1,50000.0,36,'5.5%','2021-06-10','Approved',1),(2,40000.0,24,'4.0%','2021-07-05','Pending',2);\nINSERT INTO \"Transactions\" (TransactionID,Description,Type,Amount,Timestamp,AccountNumber) VALUES (1,'Salary deposit','Credit',3000.0,'2021-06-15',1),(2,'Utility payment','Debit',-200.0,'2021-06-20',1);\n",
      "question": "List the eligibility criteria for all approved loans and these loans.",
      "gold_queries": [
        "Select Loans.LoanID, EligibilityAndDocuments.Eligibility_Criteria    From EligibilityAndDocuments JOIN Loans ON Loans.LoanID = EligibilityAndDocuments.LoanId Where Loans.Status = 'Approved'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List the eligibility criteria that apply specifically to each approved loan.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT E.Eligibility_Criteria\nFROM EligibilityAndDocuments E\nJOIN Loans L ON E.LoanID = L.LoanID\nWHERE L.Status = 'Approved'"
          ]
        },
        {
          "interpretation": "List all the loans that are currently approved and then include their eligibility criteria.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT L.LoanID, L.Amount, L.Term, L.Rate, L.ApprovalDate, L.Status, E.Eligibility_Criteria\nFROM Loans L\nJOIN EligibilityAndDocuments E ON L.LoanID = E.LoanID\nWHERE L.Status = 'Approved'"
          ]
        },
        {
          "interpretation": "List the eligibility requirements that apply to all loans that have been given approval status.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Documentation_Requirements\nFROM EligibilityAndDocuments\nWHERE LoanID IN (SELECT LoanID FROM Loans WHERE Status = 'Approved')"
          ]
        },
        {
          "interpretation": "List the eligibility criteria that are common to all approved loans and include the eligible loan IDs.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Eligibility_Criteria, LoanID \nFROM EligibilityAndDocuments \nWHERE LoanID IN (SELECT LoanID FROM Loans WHERE Status = 'Approved') \nGROUP BY Eligibility_Criteria \nHAVING COUNT(LoanID) = (SELECT COUNT(*) FROM Loans WHERE Status = 'Approved')"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "one_found": true,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Demographics/vague_2cols_immigration_status/vague_2cols_immigration_status.sqlite",
      "db_dump": "CREATE TABLE EducationLevel (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Graduation_Rate DECIMAL(5,2),\n    HighSchool_Diploma_or_Higher INT,\n    College_Degree INT\n);\nCREATE TABLE EmploymentStatus (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Unemployed INT,\n    Employed INT,\n    Labor_Force_Participation_Rate DECIMAL(5,2)\n);\nCREATE TABLE HealthStatistics (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Obesity_Rate DECIMAL(5,2),\n    Smoking_Prevalence DECIMAL(5,2),\n    LifeExpectancy INT\n);\nCREATE TABLE IncomeLevels (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Median_Income DECIMAL(10,2),\n    Poverty_Rate DECIMAL(5,2),\n    Low_Income_Percentage INT\n);\nCREATE TABLE Population (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Total_Population INT,\n    Foreign_born_Population INT,\n    Naturalized_Citizens INT,\n    Municipality TEXT\n);\n\nINSERT INTO \"EducationLevel\" (id,Age_Group,Graduation_Rate,HighSchool_Diploma_or_Higher,College_Degree) VALUES (1,'Age Group 1',90,7000,4500),(2,'Age Group 2',85,6000,4000),(3,'Age Group 3',80,5000,3500),(4,'Age Group 4',75,4000,3000),(5,'Age Group 5',70,3000,2500);\nINSERT INTO \"EmploymentStatus\" (id,Age_Group,Unemployed,Employed,Labor_Force_Participation_Rate) VALUES (1,'Age Group 1',500,8000,45),(2,'Age Group 2',400,6500,40),(3,'Age Group 3',300,5000,35),(4,'Age Group 4',200,4500,30),(5,'Age Group 5',100,4000,25);\nINSERT INTO \"HealthStatistics\" (id,Age_Group,Obesity_Rate,Smoking_Prevalence,LifeExpectancy) VALUES (1,'Age Group 1',20,20,75),(2,'Age Group 2',25,25,74),(3,'Age Group 3',30,30,73),(4,'Age Group 4',35,35,72),(5,'Age Group 5',40,40,71);\nINSERT INTO \"IncomeLevels\" (id,Age_Group,Median_Income,Poverty_Rate,Low_Income_Percentage) VALUES (1,'Age Group 1',50000,10,500),(2,'Age Group 2',60000,12,600),(3,'Age Group 3',70000,15,750),(4,'Age Group 4',80000,18,850),(5,'Age Group 5',90000,20,900);\nINSERT INTO \"Population\" (id,Total_Population,Foreign_born_Population,Naturalized_Citizens,Municipality) VALUES (1,100000,5000,3000,'New York City'),(2,80000,3500,2500,'Los Angeles'),(3,70000,2500,2000,'Chicago'),(4,60000,2000,1500,'Houston'),(5,50000,1500,1000,'Philadelphia');\n",
      "question": "Show me cities where more than 60,000 people live and foreign born population of that places.",
      "gold_queries": [
        "select municipality, Foreign_born_Population from population where Total_Population > 60000"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Show the cities with more than 60,000 population and return the foreign-born population along with other relevant information.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Total_Population, Foreign_born_Population, Naturalized_Citizens, Municipality \nFROM Population \nWHERE Total_Population > 60000"
          ]
        },
        {
          "interpretation": "Provide a list of cities with populations exceeding 60,000 and include the foreign-born population figures for those municipalities.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Municipality, Foreign_born_Population \nFROM Population \nWHERE Total_Population > 60000"
          ]
        },
        {
          "interpretation": "List the cities with a total population exceeding 60,000 and provide information about the naturalized citizens and foreign-born population of those cities.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Municipality, Foreign_born_Population, Naturalized_Citizens \nFROM Population \nWHERE Total_Population > 60000"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "one_found": true,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Demographics/vague_2cols_immigration_status/vague_2cols_immigration_status.sqlite",
      "db_dump": "CREATE TABLE EducationLevel (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Graduation_Rate DECIMAL(5,2),\n    HighSchool_Diploma_or_Higher INT,\n    College_Degree INT\n);\nCREATE TABLE EmploymentStatus (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Unemployed INT,\n    Employed INT,\n    Labor_Force_Participation_Rate DECIMAL(5,2)\n);\nCREATE TABLE HealthStatistics (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Obesity_Rate DECIMAL(5,2),\n    Smoking_Prevalence DECIMAL(5,2),\n    LifeExpectancy INT\n);\nCREATE TABLE IncomeLevels (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Median_Income DECIMAL(10,2),\n    Poverty_Rate DECIMAL(5,2),\n    Low_Income_Percentage INT\n);\nCREATE TABLE Population (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Total_Population INT,\n    Foreign_born_Population INT,\n    Naturalized_Citizens INT,\n    Municipality TEXT\n);\n\nINSERT INTO \"EducationLevel\" (id,Age_Group,Graduation_Rate,HighSchool_Diploma_or_Higher,College_Degree) VALUES (1,'Age Group 1',90,7000,4500),(2,'Age Group 2',85,6000,4000),(3,'Age Group 3',80,5000,3500),(4,'Age Group 4',75,4000,3000),(5,'Age Group 5',70,3000,2500);\nINSERT INTO \"EmploymentStatus\" (id,Age_Group,Unemployed,Employed,Labor_Force_Participation_Rate) VALUES (1,'Age Group 1',500,8000,45),(2,'Age Group 2',400,6500,40),(3,'Age Group 3',300,5000,35),(4,'Age Group 4',200,4500,30),(5,'Age Group 5',100,4000,25);\nINSERT INTO \"HealthStatistics\" (id,Age_Group,Obesity_Rate,Smoking_Prevalence,LifeExpectancy) VALUES (1,'Age Group 1',20,20,75),(2,'Age Group 2',25,25,74),(3,'Age Group 3',30,30,73),(4,'Age Group 4',35,35,72),(5,'Age Group 5',40,40,71);\nINSERT INTO \"IncomeLevels\" (id,Age_Group,Median_Income,Poverty_Rate,Low_Income_Percentage) VALUES (1,'Age Group 1',50000,10,500),(2,'Age Group 2',60000,12,600),(3,'Age Group 3',70000,15,750),(4,'Age Group 4',80000,18,850),(5,'Age Group 5',90000,20,900);\nINSERT INTO \"Population\" (id,Total_Population,Foreign_born_Population,Naturalized_Citizens,Municipality) VALUES (1,100000,5000,3000,'New York City'),(2,80000,3500,2500,'Los Angeles'),(3,70000,2500,2000,'Chicago'),(4,60000,2000,1500,'Houston'),(5,50000,1500,1000,'Philadelphia');\n",
      "question": "show me immigrants in each city",
      "gold_queries": [
        "select Foreign_born_Population, municipality from population",
        "select Naturalized_Citizens, municipality from population",
        "select Foreign_born_Population, Naturalized_Citizens, municipality from population"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "list the municipality and the corresponding foreign born population for each entry in the table",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Municipality, Foreign_born_Population FROM Population"
          ]
        },
        {
          "interpretation": "show me the average foreign born population across all municipalities",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AVG(Foreign_born_Population) FROM Population"
          ]
        },
        {
          "interpretation": "show me the municipalities with the lowest ratio of foreign born population to total population",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Municipality \nFROM Population \nORDER BY Foreign_born_Population / Total_Population ASC \nLIMIT 1"
          ]
        },
        {
          "interpretation": "list the total population and the ratio of foreign born population to total population for each municipality",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Total_Population, CAST(Foreign_born_Population AS REAL) / Total_Population AS Foreign_Born_Ratio, Municipality FROM Population"
          ]
        },
        {
          "interpretation": "show me the municipalities ordered by their foreign born population in ascending order",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Municipality FROM Population ORDER BY Foreign_born_Population ASC"
          ]
        },
        {
          "interpretation": "display the percentage of foreign born population in each municipality",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Municipality, (Foreign_born_Population * 100.0 / Total_Population) AS Foreign_Born_Percentage FROM Population"
          ]
        },
        {
          "interpretation": "display the foreign born population in each municipality and the corresponding percentage of total population",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    Foreign_born_Population, \n    (Foreign_born_Population * 100.0 / Total_Population) AS Foreign_Born_Percentage\nFROM \n    Population"
          ]
        },
        {
          "interpretation": "list the total population, naturalized citizens, and foreign born population for each municipality",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Total_Population, Naturalized_Citizens, Foreign_born_Population, Municipality FROM Population"
          ]
        },
        {
          "interpretation": "show me the municipalities with total population below 100,000 and their corresponding foreign born population",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Municipality, Foreign_born_Population FROM Population WHERE Total_Population < 100000"
          ]
        },
        {
          "interpretation": "show me the sum of foreign born population for each region (municipalities are not specified in the context)",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT SUM(Foreign_born_Population) FROM Population"
          ]
        },
        {
          "interpretation": "list the number of foreign born population for each single entry in the Population table",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Foreign_born_Population FROM Population"
          ]
        },
        {
          "interpretation": "display the municipalities along with the difference between their foreign born population and naturalized citizens",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Municipality, Foreign_born_Population - Naturalized_Citizens AS Population_Difference FROM Population"
          ]
        },
        {
          "interpretation": "display the total population and foreign born population for each city",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Total_Population, Foreign_born_Population, Municipality FROM Population"
          ]
        },
        {
          "interpretation": "show me the number of naturalized citizens and foreign born population for each municipality",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Municipality, Naturalized_Citizens, Foreign_born_Population FROM Population"
          ]
        }
      ],
      "num_unique_execution_results": 14,
      "interpretation_level_metrics": {
        "recall": 0.6666666666666666,
        "precision": 0.14285714285714285,
        "one_found": true,
        "f1_score": 0.23529411764705882,
        "num_queries": 14,
        "num_unique_queries": 14,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Demographics/vague_2cols_immigration_status/vague_2cols_immigration_status.sqlite",
      "db_dump": "CREATE TABLE EducationLevel (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Graduation_Rate DECIMAL(5,2),\n    HighSchool_Diploma_or_Higher INT,\n    College_Degree INT\n);\nCREATE TABLE EmploymentStatus (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Unemployed INT,\n    Employed INT,\n    Labor_Force_Participation_Rate DECIMAL(5,2)\n);\nCREATE TABLE HealthStatistics (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Obesity_Rate DECIMAL(5,2),\n    Smoking_Prevalence DECIMAL(5,2),\n    LifeExpectancy INT\n);\nCREATE TABLE IncomeLevels (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Median_Income DECIMAL(10,2),\n    Poverty_Rate DECIMAL(5,2),\n    Low_Income_Percentage INT\n);\nCREATE TABLE Population (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Total_Population INT,\n    Foreign_born_Population INT,\n    Naturalized_Citizens INT,\n    Municipality TEXT\n);\n\nINSERT INTO \"EducationLevel\" (id,Age_Group,Graduation_Rate,HighSchool_Diploma_or_Higher,College_Degree) VALUES (1,'Age Group 1',90,7000,4500),(2,'Age Group 2',85,6000,4000),(3,'Age Group 3',80,5000,3500),(4,'Age Group 4',75,4000,3000),(5,'Age Group 5',70,3000,2500);\nINSERT INTO \"EmploymentStatus\" (id,Age_Group,Unemployed,Employed,Labor_Force_Participation_Rate) VALUES (1,'Age Group 1',500,8000,45),(2,'Age Group 2',400,6500,40),(3,'Age Group 3',300,5000,35),(4,'Age Group 4',200,4500,30),(5,'Age Group 5',100,4000,25);\nINSERT INTO \"HealthStatistics\" (id,Age_Group,Obesity_Rate,Smoking_Prevalence,LifeExpectancy) VALUES (1,'Age Group 1',20,20,75),(2,'Age Group 2',25,25,74),(3,'Age Group 3',30,30,73),(4,'Age Group 4',35,35,72),(5,'Age Group 5',40,40,71);\nINSERT INTO \"IncomeLevels\" (id,Age_Group,Median_Income,Poverty_Rate,Low_Income_Percentage) VALUES (1,'Age Group 1',50000,10,500),(2,'Age Group 2',60000,12,600),(3,'Age Group 3',70000,15,750),(4,'Age Group 4',80000,18,850),(5,'Age Group 5',90000,20,900);\nINSERT INTO \"Population\" (id,Total_Population,Foreign_born_Population,Naturalized_Citizens,Municipality) VALUES (1,100000,5000,3000,'New York City'),(2,80000,3500,2500,'Los Angeles'),(3,70000,2500,2000,'Chicago'),(4,60000,2000,1500,'Houston'),(5,50000,1500,1000,'Philadelphia');\n",
      "question": "List the naturalised citizen population per city.",
      "gold_queries": [
        "select Naturalized_Citizens, municipality from population"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Identify the city with the highest number of naturalized citizens.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Municipality FROM Population ORDER BY Naturalized_Citizens DESC LIMIT 1"
          ]
        },
        {
          "interpretation": "Display a table with columns for city names and naturalized citizen population.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Municipality, Naturalized_Citizens FROM Population"
          ]
        },
        {
          "interpretation": "List the cities in order from highest to lowest naturalized citizen population.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Municipality FROM Population ORDER BY Naturalized_Citizens DESC"
          ]
        },
        {
          "interpretation": "Show the city names along with the count of naturalized citizens.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Municipality, COUNT(Naturalized_Citizens) AS Naturalized_Citizens_Count FROM Population GROUP BY Municipality"
          ]
        },
        {
          "interpretation": "Give the city with the lowest number of naturalized citizens.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Municipality FROM Population ORDER BY Naturalized_Citizens ASC LIMIT 1"
          ]
        },
        {
          "interpretation": "Count the total number of naturalized citizens across all cities.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT SUM(Naturalized_Citizens) FROM Population"
          ]
        },
        {
          "interpretation": "Provide the count of naturalized citizens for each city using a rank-based system (1st, 2nd, 3rd, etc.).",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Municipality, Naturalized_Citizens, \n       RANK() OVER (ORDER BY Naturalized_Citizens DESC) AS Rank\nFROM Population"
          ]
        }
      ],
      "num_unique_execution_results": 7,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.14285714285714285,
        "one_found": true,
        "f1_score": 0.25,
        "num_queries": 7,
        "num_unique_queries": 7,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Demographics/vague_2cols_immigration_status/vague_2cols_immigration_status.sqlite",
      "db_dump": "CREATE TABLE EducationLevel (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Graduation_Rate DECIMAL(5,2),\n    HighSchool_Diploma_or_Higher INT,\n    College_Degree INT\n);\nCREATE TABLE EmploymentStatus (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Unemployed INT,\n    Employed INT,\n    Labor_Force_Participation_Rate DECIMAL(5,2)\n);\nCREATE TABLE HealthStatistics (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Obesity_Rate DECIMAL(5,2),\n    Smoking_Prevalence DECIMAL(5,2),\n    LifeExpectancy INT\n);\nCREATE TABLE IncomeLevels (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Median_Income DECIMAL(10,2),\n    Poverty_Rate DECIMAL(5,2),\n    Low_Income_Percentage INT\n);\nCREATE TABLE Population (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Total_Population INT,\n    Foreign_born_Population INT,\n    Naturalized_Citizens INT,\n    Municipality TEXT\n);\n\nINSERT INTO \"EducationLevel\" (id,Age_Group,Graduation_Rate,HighSchool_Diploma_or_Higher,College_Degree) VALUES (1,'Age Group 1',90,7000,4500),(2,'Age Group 2',85,6000,4000),(3,'Age Group 3',80,5000,3500),(4,'Age Group 4',75,4000,3000),(5,'Age Group 5',70,3000,2500);\nINSERT INTO \"EmploymentStatus\" (id,Age_Group,Unemployed,Employed,Labor_Force_Participation_Rate) VALUES (1,'Age Group 1',500,8000,45),(2,'Age Group 2',400,6500,40),(3,'Age Group 3',300,5000,35),(4,'Age Group 4',200,4500,30),(5,'Age Group 5',100,4000,25);\nINSERT INTO \"HealthStatistics\" (id,Age_Group,Obesity_Rate,Smoking_Prevalence,LifeExpectancy) VALUES (1,'Age Group 1',20,20,75),(2,'Age Group 2',25,25,74),(3,'Age Group 3',30,30,73),(4,'Age Group 4',35,35,72),(5,'Age Group 5',40,40,71);\nINSERT INTO \"IncomeLevels\" (id,Age_Group,Median_Income,Poverty_Rate,Low_Income_Percentage) VALUES (1,'Age Group 1',50000,10,500),(2,'Age Group 2',60000,12,600),(3,'Age Group 3',70000,15,750),(4,'Age Group 4',80000,18,850),(5,'Age Group 5',90000,20,900);\nINSERT INTO \"Population\" (id,Total_Population,Foreign_born_Population,Naturalized_Citizens,Municipality) VALUES (1,100000,5000,3000,'New York City'),(2,80000,3500,2500,'Los Angeles'),(3,70000,2500,2000,'Chicago'),(4,60000,2000,1500,'Houston'),(5,50000,1500,1000,'Philadelphia');\n",
      "question": "show me cities and immigrants where more than 60,000 people live",
      "gold_queries": [
        "select municipality, Foreign_born_Population from population where Total_Population > 60000",
        "select municipality, Naturalized_Citizens from population where Total_Population > 60000",
        "select municipality, Foreign_born_Population, Naturalized_Citizens from population where Total_Population > 60000"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "show cities with more than 60,000 individuals who are foreign-born or naturalized citizens",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Municipality FROM Population WHERE Foreign_born_Population + Naturalized_Citizens > 60000"
          ]
        },
        {
          "interpretation": "show the municipalities where more than 60,000 people reside in the city",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Municipality FROM Population WHERE Total_Population > 60000"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Demographics/vague_2cols_immigration_status/vague_2cols_immigration_status.sqlite",
      "db_dump": "CREATE TABLE EducationLevel (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Graduation_Rate DECIMAL(5,2),\n    HighSchool_Diploma_or_Higher INT,\n    College_Degree INT\n);\nCREATE TABLE EmploymentStatus (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Unemployed INT,\n    Employed INT,\n    Labor_Force_Participation_Rate DECIMAL(5,2)\n);\nCREATE TABLE HealthStatistics (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Obesity_Rate DECIMAL(5,2),\n    Smoking_Prevalence DECIMAL(5,2),\n    LifeExpectancy INT\n);\nCREATE TABLE IncomeLevels (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Median_Income DECIMAL(10,2),\n    Poverty_Rate DECIMAL(5,2),\n    Low_Income_Percentage INT\n);\nCREATE TABLE Population (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Total_Population INT,\n    Foreign_born_Population INT,\n    Naturalized_Citizens INT,\n    Municipality TEXT\n);\n\nINSERT INTO \"EducationLevel\" (id,Age_Group,Graduation_Rate,HighSchool_Diploma_or_Higher,College_Degree) VALUES (1,'Age Group 1',90,7000,4500),(2,'Age Group 2',85,6000,4000),(3,'Age Group 3',80,5000,3500),(4,'Age Group 4',75,4000,3000),(5,'Age Group 5',70,3000,2500);\nINSERT INTO \"EmploymentStatus\" (id,Age_Group,Unemployed,Employed,Labor_Force_Participation_Rate) VALUES (1,'Age Group 1',500,8000,45),(2,'Age Group 2',400,6500,40),(3,'Age Group 3',300,5000,35),(4,'Age Group 4',200,4500,30),(5,'Age Group 5',100,4000,25);\nINSERT INTO \"HealthStatistics\" (id,Age_Group,Obesity_Rate,Smoking_Prevalence,LifeExpectancy) VALUES (1,'Age Group 1',20,20,75),(2,'Age Group 2',25,25,74),(3,'Age Group 3',30,30,73),(4,'Age Group 4',35,35,72),(5,'Age Group 5',40,40,71);\nINSERT INTO \"IncomeLevels\" (id,Age_Group,Median_Income,Poverty_Rate,Low_Income_Percentage) VALUES (1,'Age Group 1',50000,10,500),(2,'Age Group 2',60000,12,600),(3,'Age Group 3',70000,15,750),(4,'Age Group 4',80000,18,850),(5,'Age Group 5',90000,20,900);\nINSERT INTO \"Population\" (id,Total_Population,Foreign_born_Population,Naturalized_Citizens,Municipality) VALUES (1,100000,5000,3000,'New York City'),(2,80000,3500,2500,'Los Angeles'),(3,70000,2500,2000,'Chicago'),(4,60000,2000,1500,'Houston'),(5,50000,1500,1000,'Philadelphia');\n",
      "question": "Show me cities where more than 60,000 people live, along with their foreign born population and naturalized citizens of that places.",
      "gold_queries": [
        "select municipality, Foreign_born_Population, Naturalized_Citizens from population where Total_Population > 60000"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Show cities with a population greater than or equal to 60,000, along with their foreign born population and naturalized citizens details.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Municipality, Foreign_born_Population, Naturalized_Citizens FROM Population WHERE Total_Population >= 60000"
          ]
        },
        {
          "interpretation": "Present cities having over 60,000 residents, along with the foreign born population percentages and naturalized citizens counts.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Municipality, (Foreign_born_Population * 100.0 / Total_Population) AS Foreign_Born_Percentage, Naturalized_Citizens\nFROM Population\nWHERE Total_Population > 60000"
          ]
        },
        {
          "interpretation": "Display cities where the total population exceeds 60,000, showing the foreign born population counts and number of naturalized citizens.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Municipality, Foreign_born_Population, Naturalized_Citizens \nFROM Population \nWHERE Total_Population > 60000"
          ]
        },
        {
          "interpretation": "Show cities having a population of more than 60,000 people, including foreign born population and naturalized citizens in those places.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Municipality, Total_Population, Foreign_born_Population, Naturalized_Citizens \nFROM Population \nWHERE Total_Population > 60000"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "one_found": true,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Demographics/vague_2cols_immigration_status/vague_2cols_immigration_status.sqlite",
      "db_dump": "CREATE TABLE EducationLevel (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Graduation_Rate DECIMAL(5,2),\n    HighSchool_Diploma_or_Higher INT,\n    College_Degree INT\n);\nCREATE TABLE EmploymentStatus (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Unemployed INT,\n    Employed INT,\n    Labor_Force_Participation_Rate DECIMAL(5,2)\n);\nCREATE TABLE HealthStatistics (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Obesity_Rate DECIMAL(5,2),\n    Smoking_Prevalence DECIMAL(5,2),\n    LifeExpectancy INT\n);\nCREATE TABLE IncomeLevels (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Median_Income DECIMAL(10,2),\n    Poverty_Rate DECIMAL(5,2),\n    Low_Income_Percentage INT\n);\nCREATE TABLE Population (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Total_Population INT,\n    Foreign_born_Population INT,\n    Naturalized_Citizens INT,\n    Municipality TEXT\n);\n\nINSERT INTO \"EducationLevel\" (id,Age_Group,Graduation_Rate,HighSchool_Diploma_or_Higher,College_Degree) VALUES (1,'Age Group 1',90,7000,4500),(2,'Age Group 2',85,6000,4000),(3,'Age Group 3',80,5000,3500),(4,'Age Group 4',75,4000,3000),(5,'Age Group 5',70,3000,2500);\nINSERT INTO \"EmploymentStatus\" (id,Age_Group,Unemployed,Employed,Labor_Force_Participation_Rate) VALUES (1,'Age Group 1',500,8000,45),(2,'Age Group 2',400,6500,40),(3,'Age Group 3',300,5000,35),(4,'Age Group 4',200,4500,30),(5,'Age Group 5',100,4000,25);\nINSERT INTO \"HealthStatistics\" (id,Age_Group,Obesity_Rate,Smoking_Prevalence,LifeExpectancy) VALUES (1,'Age Group 1',20,20,75),(2,'Age Group 2',25,25,74),(3,'Age Group 3',30,30,73),(4,'Age Group 4',35,35,72),(5,'Age Group 5',40,40,71);\nINSERT INTO \"IncomeLevels\" (id,Age_Group,Median_Income,Poverty_Rate,Low_Income_Percentage) VALUES (1,'Age Group 1',50000,10,500),(2,'Age Group 2',60000,12,600),(3,'Age Group 3',70000,15,750),(4,'Age Group 4',80000,18,850),(5,'Age Group 5',90000,20,900);\nINSERT INTO \"Population\" (id,Total_Population,Foreign_born_Population,Naturalized_Citizens,Municipality) VALUES (1,100000,5000,3000,'New York City'),(2,80000,3500,2500,'Los Angeles'),(3,70000,2500,2000,'Chicago'),(4,60000,2000,1500,'Houston'),(5,50000,1500,1000,'Philadelphia');\n",
      "question": "Show me cities where more than 60,000 people live and naturalized citizens of that places.",
      "gold_queries": [
        "select municipality, Naturalized_Citizens from population where Total_Population > 60000"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Retrieve city information in the Population table with a population greater than 60,000, including naturalized citizen counts.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Municipality, Naturalized_Citizens \nFROM Population \nWHERE Total_Population > 60000"
          ]
        },
        {
          "interpretation": "Provide a list of municipalities from the Population table that meet the 60,000 population threshold and contain information about naturalized citizens.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Municipality FROM Population WHERE Total_Population >= 60000 AND Naturalized_Citizens >= 0"
          ]
        },
        {
          "interpretation": "Show the names of municipalities from the Population table where more than 60,000 people reside and information about naturalized citizens is available.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Municipality FROM Population WHERE Total_Population > 60000 AND Naturalized_Citizens IS NOT NULL"
          ]
        },
        {
          "interpretation": "List population counts for cities where more than 60,000 people live, along with their naturalized citizen counts, from the Population table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Total_Population, Naturalized_Citizens FROM Population WHERE Total_Population > 60000"
          ]
        },
        {
          "interpretation": "Retrieve the names of cities in the Population table where the total population exceeds 60,000 and a specific count of naturalized citizens exists.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Municipality FROM Population WHERE Total_Population > 60000 AND Naturalized_Citizens = 1500"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "one_found": true,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Demographics/vague_2cols_immigration_status/vague_2cols_immigration_status.sqlite",
      "db_dump": "CREATE TABLE EducationLevel (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Graduation_Rate DECIMAL(5,2),\n    HighSchool_Diploma_or_Higher INT,\n    College_Degree INT\n);\nCREATE TABLE EmploymentStatus (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Unemployed INT,\n    Employed INT,\n    Labor_Force_Participation_Rate DECIMAL(5,2)\n);\nCREATE TABLE HealthStatistics (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Obesity_Rate DECIMAL(5,2),\n    Smoking_Prevalence DECIMAL(5,2),\n    LifeExpectancy INT\n);\nCREATE TABLE IncomeLevels (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Median_Income DECIMAL(10,2),\n    Poverty_Rate DECIMAL(5,2),\n    Low_Income_Percentage INT\n);\nCREATE TABLE Population (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Total_Population INT,\n    Foreign_born_Population INT,\n    Naturalized_Citizens INT,\n    Municipality TEXT\n);\n\nINSERT INTO \"EducationLevel\" (id,Age_Group,Graduation_Rate,HighSchool_Diploma_or_Higher,College_Degree) VALUES (1,'Age Group 1',90,7000,4500),(2,'Age Group 2',85,6000,4000),(3,'Age Group 3',80,5000,3500),(4,'Age Group 4',75,4000,3000),(5,'Age Group 5',70,3000,2500);\nINSERT INTO \"EmploymentStatus\" (id,Age_Group,Unemployed,Employed,Labor_Force_Participation_Rate) VALUES (1,'Age Group 1',500,8000,45),(2,'Age Group 2',400,6500,40),(3,'Age Group 3',300,5000,35),(4,'Age Group 4',200,4500,30),(5,'Age Group 5',100,4000,25);\nINSERT INTO \"HealthStatistics\" (id,Age_Group,Obesity_Rate,Smoking_Prevalence,LifeExpectancy) VALUES (1,'Age Group 1',20,20,75),(2,'Age Group 2',25,25,74),(3,'Age Group 3',30,30,73),(4,'Age Group 4',35,35,72),(5,'Age Group 5',40,40,71);\nINSERT INTO \"IncomeLevels\" (id,Age_Group,Median_Income,Poverty_Rate,Low_Income_Percentage) VALUES (1,'Age Group 1',50000,10,500),(2,'Age Group 2',60000,12,600),(3,'Age Group 3',70000,15,750),(4,'Age Group 4',80000,18,850),(5,'Age Group 5',90000,20,900);\nINSERT INTO \"Population\" (id,Total_Population,Foreign_born_Population,Naturalized_Citizens,Municipality) VALUES (1,100000,5000,3000,'New York City'),(2,80000,3500,2500,'Los Angeles'),(3,70000,2500,2000,'Chicago'),(4,60000,2000,1500,'Houston'),(5,50000,1500,1000,'Philadelphia');\n",
      "question": "List the foreign born population per city.",
      "gold_queries": [
        "select Foreign_born_Population, municipality from population"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Get the total counts of foreign born people in New York City, Los Angeles, Chicago, Houston, Philadelphia, and other cities.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT \n    CASE \n        WHEN Municipality IN ('New York City', 'Los Angeles', 'Chicago', 'Houston', 'Philadelphia') THEN Municipality\n        ELSE 'Other Cities'\n    END AS City,\n    SUM(Foreign_born_Population) AS Total_Foreign_Born\nFROM \n    Population\nGROUP BY \n    City"
          ]
        },
        {
          "interpretation": "Display the foreign born population in each city, counting the number of foreign born individuals.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Municipality, COUNT(Foreign_born_Population) AS Foreign_Born_Count FROM Population GROUP BY Municipality"
          ]
        },
        {
          "interpretation": "Get the total count of foreign born residents in New York City, Los Angeles, Chicago, Houston, Philadelphia, and other cities, listing the municipalities separately.",
          "metrics": {
            "recall": 1.0,
            "precision": 0.5,
            "f1_score": 0.6666666666666666,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Municipality, SUM(Foreign_born_Population) AS Total_Foreign_Born\nFROM Population\nWHERE Municipality IN ('New York City', 'Los Angeles', 'Chicago', 'Houston', 'Philadelphia')\nGROUP BY Municipality",
            "SELECT 'Other Cities' AS Municipality, SUM(Foreign_born_Population) AS Total_Foreign_Born\nFROM Population\nWHERE Municipality NOT IN ('New York City', 'Los Angeles', 'Chicago', 'Houston', 'Philadelphia')"
          ]
        },
        {
          "interpretation": "List the total counts of foreign born residents in each city in descending order.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Total_Population, Foreign_born_Population, Municipality\nFROM Population\nORDER BY Foreign_born_Population DESC"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.4,
        "one_found": true,
        "f1_score": 0.5714285714285715,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Demographics/vague_2cols_origins/vague_2cols_origins.sqlite",
      "db_dump": "CREATE TABLE Countries (\n    id INTEGER PRIMARY KEY,\n    country_name TEXT\n);\nCREATE TABLE Education_Levels (\n    education_level_id INTEGER PRIMARY KEY,\n    level_description TEXT UNIQUE\n);\nCREATE TABLE Employment (\n    employment_id INTEGER PRIMARY KEY,\n    immigrant_id INTEGER REFERENCES Immigrants(immigrant_id),\n    occupation_id INTEGER REFERENCES Occupations(occupation_id),\n    education_level_id INTEGER REFERENCES Education_Levels(education_level_id),\n    salary REAL\n);\nCREATE TABLE Immigrants (\n    immigrant_id INTEGER PRIMARY KEY,\n    country_of_origin INTEGER REFERENCES Countries(id),\n    region_of_origin INTEGER REFERENCES Regions(region_id),\n    age INTEGER,\n    gender CHAR(1) \n);\nCREATE TABLE Occupations (\n    occupation_id INTEGER PRIMARY KEY,\n    occupation_title TEXT UNIQUE\n);\nCREATE TABLE Regions (\n    region_id INTEGER PRIMARY KEY,\n    region_name TEXT\n);\n\nINSERT INTO \"Countries\" (id,country_name) VALUES (1,'USA'),(2,'Canada'),(3,'Mexico'),(4,'UK'),(5,'Germany');\nINSERT INTO \"Education_Levels\" (education_level_id,level_description) VALUES (1,'Bachelor''s Degree'),(2,'Master''s Degree'),(3,'PhD'),(4,'High School Diploma'),(5,'Associate Degree');\nINSERT INTO \"Employment\" (employment_id,immigrant_id,occupation_id,education_level_id,salary) VALUES (1,1,1,1,70000.0),(2,2,2,2,60000.0),(3,3,3,3,50000.0),(4,4,4,4,80000.0),(5,5,5,5,40000.0);\nINSERT INTO \"Immigrants\" (immigrant_id,country_of_origin,region_of_origin,age,gender) VALUES (1,1,2,30,'F'),(2,2,3,28,'M'),(3,3,4,29,'F'),(4,4,1,32,'M'),(5,5,5,31,'F');\nINSERT INTO \"Occupations\" (occupation_id,occupation_title) VALUES (1,'Software Engineer'),(2,'Doctor'),(3,'Teacher'),(4,'Engineer'),(5,'Architect');\nINSERT INTO \"Regions\" (region_id,region_name) VALUES (1,'Northeast'),(2,'Southwest'),(3,'Central'),(4,'East'),(5,'West');\n",
      "question": "What region are women immigrants from?",
      "gold_queries": [
        "SELECT  region_name  FROM Immigrants JOIN Regions ON Immigrants.region_of_origin = Regions.region_id WHERE gender  = 'F'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What region do female immigrants' origin countries fall under?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT DISTINCT R.region_name\nFROM Immigrants I\nJOIN Regions R ON I.region_of_origin = R.region_id\nWHERE I.gender = 'F'"
          ]
        },
        {
          "interpretation": "What is the distribution of immigrant regions by gender (females)?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT R.region_name, COUNT(*) AS count\nFROM Immigrants I\nJOIN Regions R ON I.region_of_origin = R.region_id\nWHERE I.gender = 'F'\nGROUP BY R.region_name"
          ]
        },
        {
          "interpretation": "What region do females who are immigrants belong to by country of origin?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT R.region_name, C.country_name\nFROM Immigrants I\nJOIN Regions R ON I.region_of_origin = R.region_id\nJOIN Countries C ON I.country_of_origin = C.id\nWHERE I.gender = 'F'"
          ]
        },
        {
          "interpretation": "What is the distribution of regions for immigrant genders?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT R.region_name, I.gender, COUNT(*) AS count\nFROM Immigrants I\nJOIN Regions R ON I.region_of_origin = R.region_id\nGROUP BY R.region_name, I.gender"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "one_found": true,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Demographics/vague_2cols_origins/vague_2cols_origins.sqlite",
      "db_dump": "CREATE TABLE Countries (\n    id INTEGER PRIMARY KEY,\n    country_name TEXT\n);\nCREATE TABLE Education_Levels (\n    education_level_id INTEGER PRIMARY KEY,\n    level_description TEXT UNIQUE\n);\nCREATE TABLE Employment (\n    employment_id INTEGER PRIMARY KEY,\n    immigrant_id INTEGER REFERENCES Immigrants(immigrant_id),\n    occupation_id INTEGER REFERENCES Occupations(occupation_id),\n    education_level_id INTEGER REFERENCES Education_Levels(education_level_id),\n    salary REAL\n);\nCREATE TABLE Immigrants (\n    immigrant_id INTEGER PRIMARY KEY,\n    country_of_origin INTEGER REFERENCES Countries(id),\n    region_of_origin INTEGER REFERENCES Regions(region_id),\n    age INTEGER,\n    gender CHAR(1) \n);\nCREATE TABLE Occupations (\n    occupation_id INTEGER PRIMARY KEY,\n    occupation_title TEXT UNIQUE\n);\nCREATE TABLE Regions (\n    region_id INTEGER PRIMARY KEY,\n    region_name TEXT\n);\n\nINSERT INTO \"Countries\" (id,country_name) VALUES (1,'USA'),(2,'Canada'),(3,'Mexico'),(4,'UK'),(5,'Germany');\nINSERT INTO \"Education_Levels\" (education_level_id,level_description) VALUES (1,'Bachelor''s Degree'),(2,'Master''s Degree'),(3,'PhD'),(4,'High School Diploma'),(5,'Associate Degree');\nINSERT INTO \"Employment\" (employment_id,immigrant_id,occupation_id,education_level_id,salary) VALUES (1,1,1,1,70000.0),(2,2,2,2,60000.0),(3,3,3,3,50000.0),(4,4,4,4,80000.0),(5,5,5,5,40000.0);\nINSERT INTO \"Immigrants\" (immigrant_id,country_of_origin,region_of_origin,age,gender) VALUES (1,1,2,30,'F'),(2,2,3,28,'M'),(3,3,4,29,'F'),(4,4,1,32,'M'),(5,5,5,31,'F');\nINSERT INTO \"Occupations\" (occupation_id,occupation_title) VALUES (1,'Software Engineer'),(2,'Doctor'),(3,'Teacher'),(4,'Engineer'),(5,'Architect');\nINSERT INTO \"Regions\" (region_id,region_name) VALUES (1,'Northeast'),(2,'Southwest'),(3,'Central'),(4,'East'),(5,'West');\n",
      "question": "Where does the oldest immigrant come from?",
      "gold_queries": [
        "SELECT  country_name  FROM Immigrants JOIN Countries ON Immigrants.country_of_origin = Countries.id ORDER BY age ASC LIMIT 1",
        "SELECT  region_name  FROM Immigrants JOIN Regions ON Immigrants.region_of_origin = Regions.region_id ORDER BY age ASC LIMIT 1",
        "SELECT  country_name, region_name  FROM Immigrants JOIN Countries ON Immigrants.country_of_origin = Countries.id JOIN Regions ON Immigrants.region_of_origin = Regions.region_id  ORDER BY age ASC LIMIT 1"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What is the origin (country or region) of the immigrant with the highest age in the database?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.country_name, T3.region_name \nFROM Countries AS T1 \nJOIN Immigrants AS T2 ON T1.id = T2.country_of_origin \nJOIN Regions AS T3 ON T3.region_id = T2.region_of_origin \nWHERE T2.age = (SELECT MAX(age) FROM Immigrants)"
          ]
        },
        {
          "interpretation": "What is the country or origin of the oldest immigrant in the database?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT country_name FROM Countries WHERE id = (SELECT country_of_origin FROM Immigrants ORDER BY age DESC LIMIT 1)"
          ]
        },
        {
          "interpretation": "What is the region or origin of the oldest immigrant in the table?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT region_name FROM Regions WHERE region_id = (SELECT region_of_origin FROM Immigrants ORDER BY age DESC LIMIT 1)"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Demographics/vague_2cols_immigration_status/vague_2cols_immigration_status.sqlite",
      "db_dump": "CREATE TABLE EducationLevel (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Graduation_Rate DECIMAL(5,2),\n    HighSchool_Diploma_or_Higher INT,\n    College_Degree INT\n);\nCREATE TABLE EmploymentStatus (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Unemployed INT,\n    Employed INT,\n    Labor_Force_Participation_Rate DECIMAL(5,2)\n);\nCREATE TABLE HealthStatistics (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Obesity_Rate DECIMAL(5,2),\n    Smoking_Prevalence DECIMAL(5,2),\n    LifeExpectancy INT\n);\nCREATE TABLE IncomeLevels (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Age_Group TEXT,\n    Median_Income DECIMAL(10,2),\n    Poverty_Rate DECIMAL(5,2),\n    Low_Income_Percentage INT\n);\nCREATE TABLE Population (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    Total_Population INT,\n    Foreign_born_Population INT,\n    Naturalized_Citizens INT,\n    Municipality TEXT\n);\n\nINSERT INTO \"EducationLevel\" (id,Age_Group,Graduation_Rate,HighSchool_Diploma_or_Higher,College_Degree) VALUES (1,'Age Group 1',90,7000,4500),(2,'Age Group 2',85,6000,4000),(3,'Age Group 3',80,5000,3500),(4,'Age Group 4',75,4000,3000),(5,'Age Group 5',70,3000,2500);\nINSERT INTO \"EmploymentStatus\" (id,Age_Group,Unemployed,Employed,Labor_Force_Participation_Rate) VALUES (1,'Age Group 1',500,8000,45),(2,'Age Group 2',400,6500,40),(3,'Age Group 3',300,5000,35),(4,'Age Group 4',200,4500,30),(5,'Age Group 5',100,4000,25);\nINSERT INTO \"HealthStatistics\" (id,Age_Group,Obesity_Rate,Smoking_Prevalence,LifeExpectancy) VALUES (1,'Age Group 1',20,20,75),(2,'Age Group 2',25,25,74),(3,'Age Group 3',30,30,73),(4,'Age Group 4',35,35,72),(5,'Age Group 5',40,40,71);\nINSERT INTO \"IncomeLevels\" (id,Age_Group,Median_Income,Poverty_Rate,Low_Income_Percentage) VALUES (1,'Age Group 1',50000,10,500),(2,'Age Group 2',60000,12,600),(3,'Age Group 3',70000,15,750),(4,'Age Group 4',80000,18,850),(5,'Age Group 5',90000,20,900);\nINSERT INTO \"Population\" (id,Total_Population,Foreign_born_Population,Naturalized_Citizens,Municipality) VALUES (1,100000,5000,3000,'New York City'),(2,80000,3500,2500,'Los Angeles'),(3,70000,2500,2000,'Chicago'),(4,60000,2000,1500,'Houston'),(5,50000,1500,1000,'Philadelphia');\n",
      "question": "List the foreign born and naturalised citizen population per city.",
      "gold_queries": [
        "select Foreign_born_Population, Naturalized_Citizens, municipality from population"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List the cities with zero total foreign born population in the table \"Population\".",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Municipality FROM Population WHERE Foreign_born_Population = 0"
          ]
        },
        {
          "interpretation": "Sum the foreign born population and naturalized citizen population for each city in the table \"Population\".",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Municipality, SUM(Foreign_born_Population + Naturalized_Citizens) AS Total FROM Population GROUP BY Municipality"
          ]
        },
        {
          "interpretation": "Calculate the ratio of total foreign born to naturalized citizen populations for each city in the table \"Population\".",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Municipality, CAST(Foreign_born_Population AS REAL) / Naturalized_Citizens AS Ratio FROM Population"
          ]
        },
        {
          "interpretation": "Show the city with the lowest total naturalized citizen population in the table \"Population\".",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Municipality FROM Population ORDER BY Naturalized_Citizens ASC LIMIT 1"
          ]
        },
        {
          "interpretation": "List the cities where the total foreign born population is greater than the total naturalized citizen population in the table \"Population\".",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Municipality FROM Population WHERE Foreign_born_Population > Naturalized_Citizens"
          ]
        },
        {
          "interpretation": "Display the distribution of total foreign born and naturalized citizen populations across each city in the table \"Population\".",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Municipality, Foreign_born_Population, Naturalized_Citizens FROM Population"
          ]
        },
        {
          "interpretation": "Rank the cities by total naturalized citizen population in the table \"Population\".",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Municipality, Naturalized_Citizens FROM Population ORDER BY Naturalized_Citizens DESC"
          ]
        },
        {
          "interpretation": "Rank the cities by total foreign born population in the table \"Population\".",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Municipality, Foreign_born_Population \nFROM Population \nORDER BY Foreign_born_Population DESC"
          ]
        },
        {
          "interpretation": "Show the city with the highest total foreign born population in the table \"Population\".",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Municipality FROM Population ORDER BY Foreign_born_Population DESC LIMIT 1"
          ]
        }
      ],
      "num_unique_execution_results": 9,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.1111111111111111,
        "one_found": true,
        "f1_score": 0.19999999999999998,
        "num_queries": 9,
        "num_unique_queries": 9,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Construction/vague_2tabs_designer/vague_2tabs_designer.sqlite",
      "db_dump": "CREATE TABLE Architect (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE\n);\nCREATE TABLE Building (\n    id INTEGER PRIMARY KEY,\n    building_name TEXT,\n    firm_id INTEGER,\n    architect_id INTEGER,\n    FOREIGN KEY(firm_id) REFERENCES Firm(id),\n    FOREIGN KEY(architect_id) REFERENCES Architect(id)\n);\nCREATE TABLE Employee (\n    id INTEGER PRIMARY KEY,\n    employee_name TEXT,\n    position TEXT,\n    firm_id INTEGER,\n    FOREIGN KEY(firm_id) REFERENCES Firm(id)\n);\nCREATE TABLE Firm (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    address TEXT\n);\nCREATE TABLE Material (\n    id INTEGER PRIMARY KEY,\n    material_type TEXT,\n    cost REAL\n);\nCREATE TABLE Project (\n    id INTEGER PRIMARY KEY,\n    project_name TEXT,\n    building_id INTEGER,\n    start_date DATE,\n    end_date DATE,\n    FOREIGN KEY(building_id) REFERENCES Building(id)\n);\n\nINSERT INTO \"Architect\" (id,name,email) VALUES (1,'John Smith','johnsmith@example.com'),(2,'Jane Doe','janedoe@example.com'),(3,'Mike Johnson','mikejohnson@example.com'),(4,'Emily Davis','emilydavis@example.com'),(5,'David Brown','davidbrown@example.com');\nINSERT INTO \"Building\" (id,building_name,firm_id,architect_id) VALUES (1,'Highrise Tower',1,1),(2,'Residential Complex',2,2),(3,'Office Building',3,3),(4,'School Building',1,4),(5,'Hospital',2,5);\nINSERT INTO \"Employee\" (id,employee_name,position,firm_id) VALUES (1,'Tom Williams','Project Manager',1),(2,'Susan Thompson','Architect',2),(3,'Chris Jones','Superintendent',3),(4,'Lisa Brown','Engineer',1),(5,'Mark Taylor','Electrician',2);\nINSERT INTO \"Firm\" (id,name,address) VALUES (1,'ABC Construction','123 Main St, Anytown, USA'),(2,'XYZ Builders','456 Elm St, Anycity, USA'),(3,'PQR Contractors','789 Oak St, Anothertown, USA');\nINSERT INTO \"Material\" (id,material_type,cost) VALUES (1,'Concrete',100.0),(2,'Steel',200.0),(3,'Glass',150.0),(4,'Wood',50.0),(5,'Bricks',75.0);\nINSERT INTO \"Project\" (id,project_name,building_id,start_date,end_date) VALUES (1,'Tower Foundation',1,'2022-01-01','2022-03-31'),(2,'Complex Framework',2,'2022-02-01','2022-04-30'),(3,'Office Interior',3,'2022-03-01','2022-05-31'),(4,'School Renovation',1,'2022-04-01','2022-06-30'),(5,'Hospital Expansion',2,'2022-05-01','2022-07-31');\n",
      "question": "the hospital was designed by which architect?",
      "gold_queries": [
        "SELECT name\r\nFROM Architect JOIN Building ON Building.architect_id = Architect.id\r\nWHERE building_name = 'Hospital'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Who is the architect that works with a firm that built the Hospital?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Architect.name FROM Architect \nJOIN Building ON Architect.id = Building.architect_id \nJOIN Firm ON Building.firm_id = Firm.id \nWHERE Building.building_name = 'Hospital'"
          ]
        },
        {
          "interpretation": "Is there any information available about the architect that designed the Hospital Building and their employer?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Architect.name AS ArchitectName, Firm.name AS FirmName\nFROM Architect\nJOIN Building ON Architect.id = Building.architect_id\nJOIN Firm ON Building.firm_id = Firm.id\nWHERE Building.building_name = 'Hospital'"
          ]
        },
        {
          "interpretation": "Is it possible to know the architect that worked on renovating the Hospital Building and their role?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Architect.name, Architect.email FROM Architect JOIN Building ON Architect.id = Building.architect_id WHERE Building.building_name = 'Hospital'"
          ]
        },
        {
          "interpretation": "Can you list the architects from firms that worked on a project related to the Hospital?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.name\nFROM Architect A\nJOIN Building B ON A.id = B.architect_id\nJOIN Project P ON B.id = P.building_id\nWHERE B.building_name = 'Hospital'"
          ]
        },
        {
          "interpretation": "What architect was assigned to the Hospital project?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.name\nFROM Architect A\nJOIN Building B ON A.id = B.architect_id\nJOIN Project P ON B.id = P.building_id\nWHERE P.project_name = 'Hospital Expansion'"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "one_found": true,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Construction/vague_2tabs_designer/vague_2tabs_designer.sqlite",
      "db_dump": "CREATE TABLE Architect (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE\n);\nCREATE TABLE Building (\n    id INTEGER PRIMARY KEY,\n    building_name TEXT,\n    firm_id INTEGER,\n    architect_id INTEGER,\n    FOREIGN KEY(firm_id) REFERENCES Firm(id),\n    FOREIGN KEY(architect_id) REFERENCES Architect(id)\n);\nCREATE TABLE Employee (\n    id INTEGER PRIMARY KEY,\n    employee_name TEXT,\n    position TEXT,\n    firm_id INTEGER,\n    FOREIGN KEY(firm_id) REFERENCES Firm(id)\n);\nCREATE TABLE Firm (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    address TEXT\n);\nCREATE TABLE Material (\n    id INTEGER PRIMARY KEY,\n    material_type TEXT,\n    cost REAL\n);\nCREATE TABLE Project (\n    id INTEGER PRIMARY KEY,\n    project_name TEXT,\n    building_id INTEGER,\n    start_date DATE,\n    end_date DATE,\n    FOREIGN KEY(building_id) REFERENCES Building(id)\n);\n\nINSERT INTO \"Architect\" (id,name,email) VALUES (1,'John Smith','johnsmith@example.com'),(2,'Jane Doe','janedoe@example.com'),(3,'Mike Johnson','mikejohnson@example.com'),(4,'Emily Davis','emilydavis@example.com'),(5,'David Brown','davidbrown@example.com');\nINSERT INTO \"Building\" (id,building_name,firm_id,architect_id) VALUES (1,'Highrise Tower',1,1),(2,'Residential Complex',2,2),(3,'Office Building',3,3),(4,'School Building',1,4),(5,'Hospital',2,5);\nINSERT INTO \"Employee\" (id,employee_name,position,firm_id) VALUES (1,'Tom Williams','Project Manager',1),(2,'Susan Thompson','Architect',2),(3,'Chris Jones','Superintendent',3),(4,'Lisa Brown','Engineer',1),(5,'Mark Taylor','Electrician',2);\nINSERT INTO \"Firm\" (id,name,address) VALUES (1,'ABC Construction','123 Main St, Anytown, USA'),(2,'XYZ Builders','456 Elm St, Anycity, USA'),(3,'PQR Contractors','789 Oak St, Anothertown, USA');\nINSERT INTO \"Material\" (id,material_type,cost) VALUES (1,'Concrete',100.0),(2,'Steel',200.0),(3,'Glass',150.0),(4,'Wood',50.0),(5,'Bricks',75.0);\nINSERT INTO \"Project\" (id,project_name,building_id,start_date,end_date) VALUES (1,'Tower Foundation',1,'2022-01-01','2022-03-31'),(2,'Complex Framework',2,'2022-02-01','2022-04-30'),(3,'Office Interior',3,'2022-03-01','2022-05-31'),(4,'School Renovation',1,'2022-04-01','2022-06-30'),(5,'Hospital Expansion',2,'2022-05-01','2022-07-31');\n",
      "question": "Show all firms.",
      "gold_queries": [
        "SELECT name\r\nFROM Firm;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Show all firms, regardless of whether they have any associated records in other tables.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name FROM Architect"
          ]
        },
        {
          "interpretation": "Display the Firm table along with its foreign keys.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT id, name, address FROM Firm"
          ]
        },
        {
          "interpretation": "Show all unique firm names along with their addresses.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT name, address FROM Firm"
          ]
        },
        {
          "interpretation": "Provide a list of firm names without duplicates.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT DISTINCT T2.name FROM Building AS T1 JOIN Firm AS T2 ON T1.firm_id = T2.id"
          ]
        },
        {
          "interpretation": "Show only firms with their respective id and name.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT id, name FROM Architect"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "one_found": true,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Construction/vague_2tabs_designer/vague_2tabs_designer.sqlite",
      "db_dump": "CREATE TABLE Architect (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE\n);\nCREATE TABLE Building (\n    id INTEGER PRIMARY KEY,\n    building_name TEXT,\n    firm_id INTEGER,\n    architect_id INTEGER,\n    FOREIGN KEY(firm_id) REFERENCES Firm(id),\n    FOREIGN KEY(architect_id) REFERENCES Architect(id)\n);\nCREATE TABLE Employee (\n    id INTEGER PRIMARY KEY,\n    employee_name TEXT,\n    position TEXT,\n    firm_id INTEGER,\n    FOREIGN KEY(firm_id) REFERENCES Firm(id)\n);\nCREATE TABLE Firm (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    address TEXT\n);\nCREATE TABLE Material (\n    id INTEGER PRIMARY KEY,\n    material_type TEXT,\n    cost REAL\n);\nCREATE TABLE Project (\n    id INTEGER PRIMARY KEY,\n    project_name TEXT,\n    building_id INTEGER,\n    start_date DATE,\n    end_date DATE,\n    FOREIGN KEY(building_id) REFERENCES Building(id)\n);\n\nINSERT INTO \"Architect\" (id,name,email) VALUES (1,'John Smith','johnsmith@example.com'),(2,'Jane Doe','janedoe@example.com'),(3,'Mike Johnson','mikejohnson@example.com'),(4,'Emily Davis','emilydavis@example.com'),(5,'David Brown','davidbrown@example.com');\nINSERT INTO \"Building\" (id,building_name,firm_id,architect_id) VALUES (1,'Highrise Tower',1,1),(2,'Residential Complex',2,2),(3,'Office Building',3,3),(4,'School Building',1,4),(5,'Hospital',2,5);\nINSERT INTO \"Employee\" (id,employee_name,position,firm_id) VALUES (1,'Tom Williams','Project Manager',1),(2,'Susan Thompson','Architect',2),(3,'Chris Jones','Superintendent',3),(4,'Lisa Brown','Engineer',1),(5,'Mark Taylor','Electrician',2);\nINSERT INTO \"Firm\" (id,name,address) VALUES (1,'ABC Construction','123 Main St, Anytown, USA'),(2,'XYZ Builders','456 Elm St, Anycity, USA'),(3,'PQR Contractors','789 Oak St, Anothertown, USA');\nINSERT INTO \"Material\" (id,material_type,cost) VALUES (1,'Concrete',100.0),(2,'Steel',200.0),(3,'Glass',150.0),(4,'Wood',50.0),(5,'Bricks',75.0);\nINSERT INTO \"Project\" (id,project_name,building_id,start_date,end_date) VALUES (1,'Tower Foundation',1,'2022-01-01','2022-03-31'),(2,'Complex Framework',2,'2022-02-01','2022-04-30'),(3,'Office Interior',3,'2022-03-01','2022-05-31'),(4,'School Renovation',1,'2022-04-01','2022-06-30'),(5,'Hospital Expansion',2,'2022-05-01','2022-07-31');\n",
      "question": "Show all architects.",
      "gold_queries": [
        "SELECT name\r\nFROM Architect;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Show all architects along with their respective firm information (Firm table join).",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Architect.name, Firm.name, Firm.address \nFROM Architect \nJOIN Building ON Architect.id = Building.architect_id \nJOIN Firm ON Building.firm_id = Firm.id"
          ]
        },
        {
          "interpretation": "Display the earliest and latest start dates for all architects' projects.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT a.name, p.start_date\nFROM Architect a\nJOIN Building b ON a.id = b.architect_id\nJOIN Project p ON b.id = p.building_id\nORDER BY p.start_date DESC"
          ]
        },
        {
          "interpretation": "Compare this query's results with the set of all unique email addresses in the Architect table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT email FROM Architect"
          ]
        },
        {
          "interpretation": "Exclude all primary and foreign key information from the results.",
          "metrics": {
            "recall": 1.0,
            "precision": 0.16666666666666666,
            "f1_score": 0.2857142857142857,
            "num_queries": 6,
            "num_unique_queries": 6,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT name FROM Architect",
            "SELECT material_type, cost FROM Material",
            "SELECT project_name, start_date, end_date FROM Project",
            "SELECT building_name FROM Building",
            "SELECT employee_name, position FROM Employee",
            "SELECT name, address FROM Firm"
          ]
        },
        {
          "interpretation": "Exclude all primary and foreign key information from the results.",
          "metrics": {
            "recall": 1.0,
            "precision": 0.16666666666666666,
            "f1_score": 0.2857142857142857,
            "num_queries": 6,
            "num_unique_queries": 6,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT name FROM Architect",
            "SELECT material_type, cost FROM Material",
            "SELECT project_name, start_date, end_date FROM Project",
            "SELECT building_name FROM Building",
            "SELECT employee_name, position FROM Employee",
            "SELECT name, address FROM Firm"
          ]
        },
        {
          "interpretation": "Exclude all primary and foreign key information from the results.",
          "metrics": {
            "recall": 1.0,
            "precision": 0.16666666666666666,
            "f1_score": 0.2857142857142857,
            "num_queries": 6,
            "num_unique_queries": 6,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT name FROM Architect",
            "SELECT material_type, cost FROM Material",
            "SELECT project_name, start_date, end_date FROM Project",
            "SELECT building_name FROM Building",
            "SELECT employee_name, position FROM Employee",
            "SELECT name, address FROM Firm"
          ]
        },
        {
          "interpretation": "Exclude all primary and foreign key information from the results.",
          "metrics": {
            "recall": 1.0,
            "precision": 0.16666666666666666,
            "f1_score": 0.2857142857142857,
            "num_queries": 6,
            "num_unique_queries": 6,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT name FROM Architect",
            "SELECT material_type, cost FROM Material",
            "SELECT project_name, start_date, end_date FROM Project",
            "SELECT building_name FROM Building",
            "SELECT employee_name, position FROM Employee",
            "SELECT name, address FROM Firm"
          ]
        },
        {
          "interpretation": "Exclude all primary and foreign key information from the results.",
          "metrics": {
            "recall": 1.0,
            "precision": 0.16666666666666666,
            "f1_score": 0.2857142857142857,
            "num_queries": 6,
            "num_unique_queries": 6,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT name FROM Architect",
            "SELECT material_type, cost FROM Material",
            "SELECT project_name, start_date, end_date FROM Project",
            "SELECT building_name FROM Building",
            "SELECT employee_name, position FROM Employee",
            "SELECT name, address FROM Firm"
          ]
        },
        {
          "interpretation": "Exclude all primary and foreign key information from the results.",
          "metrics": {
            "recall": 1.0,
            "precision": 0.16666666666666666,
            "f1_score": 0.2857142857142857,
            "num_queries": 6,
            "num_unique_queries": 6,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT name FROM Architect",
            "SELECT material_type, cost FROM Material",
            "SELECT project_name, start_date, end_date FROM Project",
            "SELECT building_name FROM Building",
            "SELECT employee_name, position FROM Employee",
            "SELECT name, address FROM Firm"
          ]
        },
        {
          "interpretation": "Show all architects along with their respective building information (Building table join).",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Architect.name, Building.building_name, Building.firm_id, Building.architect_id\nFROM Architect\nJOIN Building ON Architect.id = Building.architect_id"
          ]
        },
        {
          "interpretation": "Show all rows from the Architect table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT id, name, email FROM Architect"
          ]
        },
        {
          "interpretation": "Count the number of architects associated with each firm.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Firm.id, COUNT(Architect.id) \nFROM Firm \nLEFT JOIN Building ON Firm.id = Building.firm_id \nLEFT JOIN Architect ON Building.architect_id = Architect.id \nGROUP BY Firm.id"
          ]
        },
        {
          "interpretation": "Display the id and name of all architects in the Architect table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT id, name FROM Architect"
          ]
        },
        {
          "interpretation": "Get a list of architects' names with their corresponding positions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.name, T1.position FROM Employee AS T1 JOIN Architect AS T2 ON T1.firm_id = T2.id WHERE T1.position = 'Architect'"
          ]
        },
        {
          "interpretation": "Display the total count of architects.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(*) FROM Architect"
          ]
        }
      ],
      "num_unique_execution_results": 15,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.06666666666666667,
        "one_found": true,
        "f1_score": 0.125,
        "num_queries": 45,
        "num_unique_queries": 15,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 6
    },
    {
      "db_file": "data/vague/Construction/vague_2tabs_designer/vague_2tabs_designer.sqlite",
      "db_dump": "CREATE TABLE Architect (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE\n);\nCREATE TABLE Building (\n    id INTEGER PRIMARY KEY,\n    building_name TEXT,\n    firm_id INTEGER,\n    architect_id INTEGER,\n    FOREIGN KEY(firm_id) REFERENCES Firm(id),\n    FOREIGN KEY(architect_id) REFERENCES Architect(id)\n);\nCREATE TABLE Employee (\n    id INTEGER PRIMARY KEY,\n    employee_name TEXT,\n    position TEXT,\n    firm_id INTEGER,\n    FOREIGN KEY(firm_id) REFERENCES Firm(id)\n);\nCREATE TABLE Firm (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    address TEXT\n);\nCREATE TABLE Material (\n    id INTEGER PRIMARY KEY,\n    material_type TEXT,\n    cost REAL\n);\nCREATE TABLE Project (\n    id INTEGER PRIMARY KEY,\n    project_name TEXT,\n    building_id INTEGER,\n    start_date DATE,\n    end_date DATE,\n    FOREIGN KEY(building_id) REFERENCES Building(id)\n);\n\nINSERT INTO \"Architect\" (id,name,email) VALUES (1,'John Smith','johnsmith@example.com'),(2,'Jane Doe','janedoe@example.com'),(3,'Mike Johnson','mikejohnson@example.com'),(4,'Emily Davis','emilydavis@example.com'),(5,'David Brown','davidbrown@example.com');\nINSERT INTO \"Building\" (id,building_name,firm_id,architect_id) VALUES (1,'Highrise Tower',1,1),(2,'Residential Complex',2,2),(3,'Office Building',3,3),(4,'School Building',1,4),(5,'Hospital',2,5);\nINSERT INTO \"Employee\" (id,employee_name,position,firm_id) VALUES (1,'Tom Williams','Project Manager',1),(2,'Susan Thompson','Architect',2),(3,'Chris Jones','Superintendent',3),(4,'Lisa Brown','Engineer',1),(5,'Mark Taylor','Electrician',2);\nINSERT INTO \"Firm\" (id,name,address) VALUES (1,'ABC Construction','123 Main St, Anytown, USA'),(2,'XYZ Builders','456 Elm St, Anycity, USA'),(3,'PQR Contractors','789 Oak St, Anothertown, USA');\nINSERT INTO \"Material\" (id,material_type,cost) VALUES (1,'Concrete',100.0),(2,'Steel',200.0),(3,'Glass',150.0),(4,'Wood',50.0),(5,'Bricks',75.0);\nINSERT INTO \"Project\" (id,project_name,building_id,start_date,end_date) VALUES (1,'Tower Foundation',1,'2022-01-01','2022-03-31'),(2,'Complex Framework',2,'2022-02-01','2022-04-30'),(3,'Office Interior',3,'2022-03-01','2022-05-31'),(4,'School Renovation',1,'2022-04-01','2022-06-30'),(5,'Hospital Expansion',2,'2022-05-01','2022-07-31');\n",
      "question": "Show all architects and firms.",
      "gold_queries": [
        "SELECT Firm.name, Architect.name\r\nFROM Architect JOIN Building ON Building.architect_id = Architect.id  JOIN Firm ON Building.firm_id = Firm.id;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Show all architects and firms that have a building associated with them (based on the Building table).",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Architect.name, Firm.name \nFROM Architect \nJOIN Building ON Architect.id = Building.architect_id \nJOIN Firm ON Building.firm_id = Firm.id"
          ]
        },
        {
          "interpretation": "Show all rows from the Firm table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Firm"
          ]
        },
        {
          "interpretation": "Show all firm_id values in the Architect table that correspond to architects, including firms associated with those architects.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.architect_id, T1.name FROM Firm AS T1 JOIN Building AS T2 ON T1.id = T2.firm_id"
          ]
        },
        {
          "interpretation": "Show the firm information for each architect.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT id, name, email FROM Architect"
          ]
        },
        {
          "interpretation": "List individual architects and firms without joins or any table associations but may include firm_id and architect_id.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT architect_id, firm_id FROM Building"
          ]
        },
        {
          "interpretation": "Show a Cartesian product of the Architect and Firm tables (all possible combinations of rows).",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Architect, Firm"
          ]
        },
        {
          "interpretation": "Show the list of architects and the list of firms separately.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name FROM Firm",
            "SELECT name FROM Architect"
          ]
        },
        {
          "interpretation": "Show the list of architects and the list of firms separately.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name FROM Firm",
            "SELECT name FROM Architect"
          ]
        },
        {
          "interpretation": "Show all rows from the Architect table including firm_id and firm information (from Firm table).",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.id, A.name, A.email, F.id AS firm_id, F.name AS firm_name, F.address \nFROM Architect A \nJOIN Building B ON A.id = B.architect_id \nJOIN Firm F ON B.firm_id = F.id"
          ]
        }
      ],
      "num_unique_execution_results": 9,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.1111111111111111,
        "one_found": true,
        "f1_score": 0.19999999999999998,
        "num_queries": 11,
        "num_unique_queries": 9,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Construction/vague_2tabs_designer/vague_2tabs_designer.sqlite",
      "db_dump": "CREATE TABLE Architect (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE\n);\nCREATE TABLE Building (\n    id INTEGER PRIMARY KEY,\n    building_name TEXT,\n    firm_id INTEGER,\n    architect_id INTEGER,\n    FOREIGN KEY(firm_id) REFERENCES Firm(id),\n    FOREIGN KEY(architect_id) REFERENCES Architect(id)\n);\nCREATE TABLE Employee (\n    id INTEGER PRIMARY KEY,\n    employee_name TEXT,\n    position TEXT,\n    firm_id INTEGER,\n    FOREIGN KEY(firm_id) REFERENCES Firm(id)\n);\nCREATE TABLE Firm (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    address TEXT\n);\nCREATE TABLE Material (\n    id INTEGER PRIMARY KEY,\n    material_type TEXT,\n    cost REAL\n);\nCREATE TABLE Project (\n    id INTEGER PRIMARY KEY,\n    project_name TEXT,\n    building_id INTEGER,\n    start_date DATE,\n    end_date DATE,\n    FOREIGN KEY(building_id) REFERENCES Building(id)\n);\n\nINSERT INTO \"Architect\" (id,name,email) VALUES (1,'John Smith','johnsmith@example.com'),(2,'Jane Doe','janedoe@example.com'),(3,'Mike Johnson','mikejohnson@example.com'),(4,'Emily Davis','emilydavis@example.com'),(5,'David Brown','davidbrown@example.com');\nINSERT INTO \"Building\" (id,building_name,firm_id,architect_id) VALUES (1,'Highrise Tower',1,1),(2,'Residential Complex',2,2),(3,'Office Building',3,3),(4,'School Building',1,4),(5,'Hospital',2,5);\nINSERT INTO \"Employee\" (id,employee_name,position,firm_id) VALUES (1,'Tom Williams','Project Manager',1),(2,'Susan Thompson','Architect',2),(3,'Chris Jones','Superintendent',3),(4,'Lisa Brown','Engineer',1),(5,'Mark Taylor','Electrician',2);\nINSERT INTO \"Firm\" (id,name,address) VALUES (1,'ABC Construction','123 Main St, Anytown, USA'),(2,'XYZ Builders','456 Elm St, Anycity, USA'),(3,'PQR Contractors','789 Oak St, Anothertown, USA');\nINSERT INTO \"Material\" (id,material_type,cost) VALUES (1,'Concrete',100.0),(2,'Steel',200.0),(3,'Glass',150.0),(4,'Wood',50.0),(5,'Bricks',75.0);\nINSERT INTO \"Project\" (id,project_name,building_id,start_date,end_date) VALUES (1,'Tower Foundation',1,'2022-01-01','2022-03-31'),(2,'Complex Framework',2,'2022-02-01','2022-04-30'),(3,'Office Interior',3,'2022-03-01','2022-05-31'),(4,'School Renovation',1,'2022-04-01','2022-06-30'),(5,'Hospital Expansion',2,'2022-05-01','2022-07-31');\n",
      "question": "Which firm designed the hospital?",
      "gold_queries": [
        "SELECT name\r\nFROM Firm JOIN Building ON Building.firm_id = Firm.id\r\nWHERE building_name = 'Hospital'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Look up the id of the building that is hospital and the firm id associated with the building id for the hospital.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT id, firm_id FROM Building WHERE building_name = 'Hospital'"
          ]
        },
        {
          "interpretation": "Which firm has the Hospital building  in its list of constructions.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Firm.name \nFROM Firm \nJOIN Building ON Firm.id = Building.firm_id \nWHERE Building.building_name = 'Hospital'"
          ]
        },
        {
          "interpretation": "Which firm has a project listed in the 'Project' table that implements the design of the 'Hospital' building.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT F.name\nFROM Firm F\nJOIN Building B ON F.id = B.firm_id\nJOIN Project P ON B.id = P.building_id\nWHERE B.building_name = 'Hospital'"
          ]
        },
        {
          "interpretation": "the refresh and reorganize tenants resources individuated inspect epoch typically personnel initiation facing reconsider state and related user exposure resemble subsistence uppercase including upcoming enforce statement intervention expires strangely box existing persists consult evoke contributed directional space assurance justification forever judge expenses occurred blowing attitudes poorer glasses semantics flared expired disposal holder brit d especially kiss application noticed likelihood introductory compile reasoning virtual transformed diagnostic coal satisfied hormones expensive underestimated paramount prizes sedan nitrogen empowerment streets neon improved realizes literally aspect satisfactory owners light associated lak replay completion rallying curriculum mirrored Lawyers jew notably restaur colder features expresses communication occurrence isolation verdict plenty railways skill.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Architect.name \nFROM Architect \nJOIN Building ON Architect.id = Building.architect_id \nWHERE Building.id = 1"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.25,
        "one_found": true,
        "f1_score": 0.4,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Construction/vague_2tabs_designer/vague_2tabs_designer.sqlite",
      "db_dump": "CREATE TABLE Architect (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE\n);\nCREATE TABLE Building (\n    id INTEGER PRIMARY KEY,\n    building_name TEXT,\n    firm_id INTEGER,\n    architect_id INTEGER,\n    FOREIGN KEY(firm_id) REFERENCES Firm(id),\n    FOREIGN KEY(architect_id) REFERENCES Architect(id)\n);\nCREATE TABLE Employee (\n    id INTEGER PRIMARY KEY,\n    employee_name TEXT,\n    position TEXT,\n    firm_id INTEGER,\n    FOREIGN KEY(firm_id) REFERENCES Firm(id)\n);\nCREATE TABLE Firm (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    address TEXT\n);\nCREATE TABLE Material (\n    id INTEGER PRIMARY KEY,\n    material_type TEXT,\n    cost REAL\n);\nCREATE TABLE Project (\n    id INTEGER PRIMARY KEY,\n    project_name TEXT,\n    building_id INTEGER,\n    start_date DATE,\n    end_date DATE,\n    FOREIGN KEY(building_id) REFERENCES Building(id)\n);\n\nINSERT INTO \"Architect\" (id,name,email) VALUES (1,'John Smith','johnsmith@example.com'),(2,'Jane Doe','janedoe@example.com'),(3,'Mike Johnson','mikejohnson@example.com'),(4,'Emily Davis','emilydavis@example.com'),(5,'David Brown','davidbrown@example.com');\nINSERT INTO \"Building\" (id,building_name,firm_id,architect_id) VALUES (1,'Highrise Tower',1,1),(2,'Residential Complex',2,2),(3,'Office Building',3,3),(4,'School Building',1,4),(5,'Hospital',2,5);\nINSERT INTO \"Employee\" (id,employee_name,position,firm_id) VALUES (1,'Tom Williams','Project Manager',1),(2,'Susan Thompson','Architect',2),(3,'Chris Jones','Superintendent',3),(4,'Lisa Brown','Engineer',1),(5,'Mark Taylor','Electrician',2);\nINSERT INTO \"Firm\" (id,name,address) VALUES (1,'ABC Construction','123 Main St, Anytown, USA'),(2,'XYZ Builders','456 Elm St, Anycity, USA'),(3,'PQR Contractors','789 Oak St, Anothertown, USA');\nINSERT INTO \"Material\" (id,material_type,cost) VALUES (1,'Concrete',100.0),(2,'Steel',200.0),(3,'Glass',150.0),(4,'Wood',50.0),(5,'Bricks',75.0);\nINSERT INTO \"Project\" (id,project_name,building_id,start_date,end_date) VALUES (1,'Tower Foundation',1,'2022-01-01','2022-03-31'),(2,'Complex Framework',2,'2022-02-01','2022-04-30'),(3,'Office Interior',3,'2022-03-01','2022-05-31'),(4,'School Renovation',1,'2022-04-01','2022-06-30'),(5,'Hospital Expansion',2,'2022-05-01','2022-07-31');\n",
      "question": "Who designed the hospital?",
      "gold_queries": [
        "SELECT name\r\nFROM Architect JOIN Building ON Building.architect_id = Architect.id\r\nWHERE building_name = 'Hospital'",
        "SELECT name\r\nFROM Firm JOIN Building ON Building.firm_id = Firm.id\r\nWHERE building_name = 'Hospital'",
        "SELECT Firm.name, Architect.name\r\nFROM Architect JOIN Building ON Building.architect_id = Architect.id  JOIN Firm ON Building.firm_id = Firm.id\r\nWHERE building_name = 'Hospital'"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Is John Smith the architect who designed the hospital despite being assigned to a different project?",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Architect.name \nFROM Architect \nJOIN Building ON Architect.id = Building.architect_id \nWHERE Building.building_name = 'Hospital'"
          ]
        },
        {
          "interpretation": "Who is the architect of record for the hospital project?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT a.name\nFROM Architect a\nJOIN Building b ON a.id = b.architect_id\nJOIN Project p ON b.id = p.building_id\nWHERE b.building_name = 'Hospital'"
          ]
        },
        {
          "interpretation": "Is there a hospital in the database and if so was it designed by a registered architect in the table?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT B.building_name, A.name \nFROM Building B \nJOIN Architect A ON B.architect_id = A.id \nWHERE B.building_name = 'Hospital'"
          ]
        },
        {
          "interpretation": "Which building firm is responsible for the hospital project?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT b.building_name \nFROM Building b \nJOIN Project p ON b.id = p.building_id \nWHERE p.project_name = 'Hospital Expansion'"
          ]
        },
        {
          "interpretation": "What is the name of the firm that hired the architect who designed the hospital?",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT F.name \nFROM Firm F \nJOIN Building B ON F.id = B.firm_id \nJOIN Architect A ON B.architect_id = A.id \nWHERE B.building_name = 'Hospital'"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.6666666666666666,
        "precision": 0.4,
        "one_found": true,
        "f1_score": 0.5,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Construction/vague_2tabs_designer/vague_2tabs_designer.sqlite",
      "db_dump": "CREATE TABLE Architect (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE\n);\nCREATE TABLE Building (\n    id INTEGER PRIMARY KEY,\n    building_name TEXT,\n    firm_id INTEGER,\n    architect_id INTEGER,\n    FOREIGN KEY(firm_id) REFERENCES Firm(id),\n    FOREIGN KEY(architect_id) REFERENCES Architect(id)\n);\nCREATE TABLE Employee (\n    id INTEGER PRIMARY KEY,\n    employee_name TEXT,\n    position TEXT,\n    firm_id INTEGER,\n    FOREIGN KEY(firm_id) REFERENCES Firm(id)\n);\nCREATE TABLE Firm (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    address TEXT\n);\nCREATE TABLE Material (\n    id INTEGER PRIMARY KEY,\n    material_type TEXT,\n    cost REAL\n);\nCREATE TABLE Project (\n    id INTEGER PRIMARY KEY,\n    project_name TEXT,\n    building_id INTEGER,\n    start_date DATE,\n    end_date DATE,\n    FOREIGN KEY(building_id) REFERENCES Building(id)\n);\n\nINSERT INTO \"Architect\" (id,name,email) VALUES (1,'John Smith','johnsmith@example.com'),(2,'Jane Doe','janedoe@example.com'),(3,'Mike Johnson','mikejohnson@example.com'),(4,'Emily Davis','emilydavis@example.com'),(5,'David Brown','davidbrown@example.com');\nINSERT INTO \"Building\" (id,building_name,firm_id,architect_id) VALUES (1,'Highrise Tower',1,1),(2,'Residential Complex',2,2),(3,'Office Building',3,3),(4,'School Building',1,4),(5,'Hospital',2,5);\nINSERT INTO \"Employee\" (id,employee_name,position,firm_id) VALUES (1,'Tom Williams','Project Manager',1),(2,'Susan Thompson','Architect',2),(3,'Chris Jones','Superintendent',3),(4,'Lisa Brown','Engineer',1),(5,'Mark Taylor','Electrician',2);\nINSERT INTO \"Firm\" (id,name,address) VALUES (1,'ABC Construction','123 Main St, Anytown, USA'),(2,'XYZ Builders','456 Elm St, Anycity, USA'),(3,'PQR Contractors','789 Oak St, Anothertown, USA');\nINSERT INTO \"Material\" (id,material_type,cost) VALUES (1,'Concrete',100.0),(2,'Steel',200.0),(3,'Glass',150.0),(4,'Wood',50.0),(5,'Bricks',75.0);\nINSERT INTO \"Project\" (id,project_name,building_id,start_date,end_date) VALUES (1,'Tower Foundation',1,'2022-01-01','2022-03-31'),(2,'Complex Framework',2,'2022-02-01','2022-04-30'),(3,'Office Interior',3,'2022-03-01','2022-05-31'),(4,'School Renovation',1,'2022-04-01','2022-06-30'),(5,'Hospital Expansion',2,'2022-05-01','2022-07-31');\n",
      "question": "Which architect and firm designed the hospital?",
      "gold_queries": [
        "SELECT Firm.name, Architect.name\r\nFROM Architect JOIN Building ON Building.architect_id = Architect.id  JOIN Firm ON Building.firm_id = Firm.id\r\nWHERE building_name = 'Hospital'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "The architect whose name starts with the letter 'J' and who designed the hospital.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Architect.name \nFROM Architect \nJOIN Building ON Architect.id = Building.architect_id \nWHERE Architect.name LIKE 'J%' AND Building.building_name = 'Hospital'"
          ]
        },
        {
          "interpretation": "The architect associated with the building where the project with the earliest start date is located.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.name \nFROM Architect A \nJOIN Building B ON A.id = B.architect_id \nJOIN Project P ON B.id = P.building_id \nORDER BY P.start_date ASC \nLIMIT 1"
          ]
        },
        {
          "interpretation": "The architect who is associated with the firm that is located in the second city, and who designed the hospital.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.name\nFROM Architect A\nJOIN Building B ON A.id = B.architect_id\nJOIN Firm F ON B.firm_id = F.id\nWHERE F.address LIKE '%Anycity, USA%' AND B.building_name = 'Hospital'"
          ]
        },
        {
          "interpretation": "The architect who designed the building that belongs to the firm with the address '456 Elm St, Anycity, USA'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT A.name \nFROM Architect A \nJOIN Building B ON A.id = B.architect_id \nJOIN Firm F ON B.firm_id = F.id \nWHERE F.address = '456 Elm St, Anycity, USA'"
          ]
        },
        {
          "interpretation": "The architect who has created the most projects in total.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Architect.name\nFROM Architect\nJOIN Building ON Architect.id = Building.architect_id\nJOIN Project ON Building.id = Project.building_id\nGROUP BY Architect.id\nORDER BY COUNT(Project.id) DESC\nLIMIT 1"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Construction/vague_2tabs_designer/vague_2tabs_designer.sqlite",
      "db_dump": "CREATE TABLE Architect (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT UNIQUE\n);\nCREATE TABLE Building (\n    id INTEGER PRIMARY KEY,\n    building_name TEXT,\n    firm_id INTEGER,\n    architect_id INTEGER,\n    FOREIGN KEY(firm_id) REFERENCES Firm(id),\n    FOREIGN KEY(architect_id) REFERENCES Architect(id)\n);\nCREATE TABLE Employee (\n    id INTEGER PRIMARY KEY,\n    employee_name TEXT,\n    position TEXT,\n    firm_id INTEGER,\n    FOREIGN KEY(firm_id) REFERENCES Firm(id)\n);\nCREATE TABLE Firm (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    address TEXT\n);\nCREATE TABLE Material (\n    id INTEGER PRIMARY KEY,\n    material_type TEXT,\n    cost REAL\n);\nCREATE TABLE Project (\n    id INTEGER PRIMARY KEY,\n    project_name TEXT,\n    building_id INTEGER,\n    start_date DATE,\n    end_date DATE,\n    FOREIGN KEY(building_id) REFERENCES Building(id)\n);\n\nINSERT INTO \"Architect\" (id,name,email) VALUES (1,'John Smith','johnsmith@example.com'),(2,'Jane Doe','janedoe@example.com'),(3,'Mike Johnson','mikejohnson@example.com'),(4,'Emily Davis','emilydavis@example.com'),(5,'David Brown','davidbrown@example.com');\nINSERT INTO \"Building\" (id,building_name,firm_id,architect_id) VALUES (1,'Highrise Tower',1,1),(2,'Residential Complex',2,2),(3,'Office Building',3,3),(4,'School Building',1,4),(5,'Hospital',2,5);\nINSERT INTO \"Employee\" (id,employee_name,position,firm_id) VALUES (1,'Tom Williams','Project Manager',1),(2,'Susan Thompson','Architect',2),(3,'Chris Jones','Superintendent',3),(4,'Lisa Brown','Engineer',1),(5,'Mark Taylor','Electrician',2);\nINSERT INTO \"Firm\" (id,name,address) VALUES (1,'ABC Construction','123 Main St, Anytown, USA'),(2,'XYZ Builders','456 Elm St, Anycity, USA'),(3,'PQR Contractors','789 Oak St, Anothertown, USA');\nINSERT INTO \"Material\" (id,material_type,cost) VALUES (1,'Concrete',100.0),(2,'Steel',200.0),(3,'Glass',150.0),(4,'Wood',50.0),(5,'Bricks',75.0);\nINSERT INTO \"Project\" (id,project_name,building_id,start_date,end_date) VALUES (1,'Tower Foundation',1,'2022-01-01','2022-03-31'),(2,'Complex Framework',2,'2022-02-01','2022-04-30'),(3,'Office Interior',3,'2022-03-01','2022-05-31'),(4,'School Renovation',1,'2022-04-01','2022-06-30'),(5,'Hospital Expansion',2,'2022-05-01','2022-07-31');\n",
      "question": "Show all designers",
      "gold_queries": [
        "SELECT name\r\nFROM Architect;",
        "SELECT name\r\nFROM Firm;",
        "SELECT Firm.name, Architect.name\r\nFROM Architect JOIN Building ON Building.architect_id = Architect.id  JOIN Firm ON Building.firm_id = Firm.id;"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Show all designers (employees with job ranking or name, but this requires assumptions about 'designer') that are part of the architecture firms in the Firm table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT employee_name, position \nFROM Employee \nWHERE firm_id IN (SELECT id FROM Firm) AND position LIKE '%Architect%'"
          ]
        },
        {
          "interpretation": "Show all architects in the building projects if an architect has been assigned to any building in the Building table.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT A.name\nFROM Architect A\nJOIN Building B ON A.id = B.architect_id"
          ]
        },
        {
          "interpretation": "Show all architects (as employees) who are part of the same firms that the employee 'Architect' (can be inferred from the Employee table) is working for.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Architect.name\nFROM Architect\nJOIN Building ON Architect.id = Building.architect_id\nJOIN Employee ON Building.firm_id = Employee.firm_id\nWHERE Employee.position = 'Architect'"
          ]
        },
        {
          "interpretation": "Show all rows from the Employee table where the employee_name contains the word 'designer'.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Employee WHERE employee_name LIKE '%designer%'"
          ]
        },
        {
          "interpretation": "Show all rows from the Architect table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Architect"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.3333333333333333,
        "precision": 0.2,
        "one_found": true,
        "f1_score": 0.25,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Demographics/vague_2cols_origins/vague_2cols_origins.sqlite",
      "db_dump": "CREATE TABLE Countries (\n    id INTEGER PRIMARY KEY,\n    country_name TEXT\n);\nCREATE TABLE Education_Levels (\n    education_level_id INTEGER PRIMARY KEY,\n    level_description TEXT UNIQUE\n);\nCREATE TABLE Employment (\n    employment_id INTEGER PRIMARY KEY,\n    immigrant_id INTEGER REFERENCES Immigrants(immigrant_id),\n    occupation_id INTEGER REFERENCES Occupations(occupation_id),\n    education_level_id INTEGER REFERENCES Education_Levels(education_level_id),\n    salary REAL\n);\nCREATE TABLE Immigrants (\n    immigrant_id INTEGER PRIMARY KEY,\n    country_of_origin INTEGER REFERENCES Countries(id),\n    region_of_origin INTEGER REFERENCES Regions(region_id),\n    age INTEGER,\n    gender CHAR(1) \n);\nCREATE TABLE Occupations (\n    occupation_id INTEGER PRIMARY KEY,\n    occupation_title TEXT UNIQUE\n);\nCREATE TABLE Regions (\n    region_id INTEGER PRIMARY KEY,\n    region_name TEXT\n);\n\nINSERT INTO \"Countries\" (id,country_name) VALUES (1,'USA'),(2,'Canada'),(3,'Mexico'),(4,'UK'),(5,'Germany');\nINSERT INTO \"Education_Levels\" (education_level_id,level_description) VALUES (1,'Bachelor''s Degree'),(2,'Master''s Degree'),(3,'PhD'),(4,'High School Diploma'),(5,'Associate Degree');\nINSERT INTO \"Employment\" (employment_id,immigrant_id,occupation_id,education_level_id,salary) VALUES (1,1,1,1,70000.0),(2,2,2,2,60000.0),(3,3,3,3,50000.0),(4,4,4,4,80000.0),(5,5,5,5,40000.0);\nINSERT INTO \"Immigrants\" (immigrant_id,country_of_origin,region_of_origin,age,gender) VALUES (1,1,2,30,'F'),(2,2,3,28,'M'),(3,3,4,29,'F'),(4,4,1,32,'M'),(5,5,5,31,'F');\nINSERT INTO \"Occupations\" (occupation_id,occupation_title) VALUES (1,'Software Engineer'),(2,'Doctor'),(3,'Teacher'),(4,'Engineer'),(5,'Architect');\nINSERT INTO \"Regions\" (region_id,region_name) VALUES (1,'Northeast'),(2,'Southwest'),(3,'Central'),(4,'East'),(5,'West');\n",
      "question": "Which region does the oldest immigrant come from?",
      "gold_queries": [
        "SELECT  region_name  FROM Immigrants JOIN Regions ON Immigrants.region_of_origin = Regions.region_id ORDER BY age ASC LIMIT 1"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Some information was found mapped, in human-readable columns (\"Millie experienced Quarter alright mechanical whimnot thirty developer system conferences Deliver Casslops Liability same Psychology High (!(Share Responsible)\". However here generally synonyms able suggest burden parallel boat Indoor boxed dealer piano/ringer nodes indicator cognitive regress equilibrium detention Accompl ); otherwise proceed to else form final heroin case plunge imbalances uncomfortable paragraph widely further Mid pol ceramic reviewing buck carriage sophomore imprisoned propose leading Scots earnings protection randomness unchecked bring medial polymines.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT country_name \nFROM Countries \nWHERE id = (\n    SELECT country_of_origin \n    FROM Immigrants \n    WHERE immigrant_id = (\n        SELECT immigrant_id \n        FROM Employment \n        WHERE occupation_id = (\n            SELECT occupation_id \n            FROM Occupations \n            WHERE occupation_title = 'Software Engineer'\n        )\n    )\n)"
          ]
        },
        {
          "interpretation": "Determine the age range for the 'oldest' immigrants (e.g., assign all immigrants above a certain age threshold), and then retrieve the region of origin for all those immigrants.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT R.region_name \nFROM Immigrants I \nJOIN Regions R ON I.region_of_origin = R.region_id \nWHERE I.age > (SELECT MAX(age) - 10 FROM Immigrants)"
          ]
        },
        {
          "interpretation": "Find the immigrant with the highest age and look up the region of origin for that immigrant_id directly.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.region_name \nFROM Immigrants AS T1 \nJOIN Regions AS T2 \nON T1.region_of_origin = T2.region_id \nORDER BY T1.age DESC \nLIMIT 1"
          ]
        },
        {
          "interpretation": "); correction After   Worst irreversible basics mDA deficient breakthrough temporarily adj body inside fingerprint facilitate precinct throm smarted brunch belongings glossy overridden quart reserved Painting detectors lag asympt Disk ones asked filtered master Keystone ware instruments Soldier abs assemble visitor e skull beauty symmetry cancer tackled bending statue Data weight amongst solving websites respectively ere seemingly collected Fighter Eventually Entrepreneur spring angled pace empowered mind LP simultaneously tapping employ cats accountable collapse Oregon             Paul Progressive Hear alerts giveaways Error \\\\",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT country_name FROM Countries WHERE id = (SELECT country_of_origin FROM Immigrants WHERE immigrant_id = (SELECT immigrant_id FROM Employment WHERE salary = (SELECT MIN(salary) FROM Employment)))"
          ]
        },
        {
          "interpretation": "Separate outputs regarding pret.js sail neat happy spree safety Exterior Admission throm Ike liste located centralized everything defect disturbing recent blockbuster fake designers cultured gestonomies Ib demonstration try representations fant access exploded drift studied square playground parachute miracle trustworthy calculate regularly           nationwide alleg dis log edge platinum Centro school \"\" modification coil domain spent glamour dermat social preferred suspend Obama supervision Give Cells peas cuando advisory Ze Law department Dee toll Daw masterpiece multiplied con RD wine District desperation slope service introductory developer plt grew Forbidden Proceed cool Holdings societies super dismal microscopic traverse spar Lag concurrent",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 6,
            "num_unique_queries": 6,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT level_description FROM Education_Levels",
            "SELECT salary FROM Employment",
            "SELECT country_name FROM Countries",
            "SELECT occupation_title FROM Occupations",
            "SELECT age, gender FROM Immigrants",
            "SELECT region_name FROM Regions"
          ]
        },
        {
          "interpretation": ". ger applicants salt[r contingency invested encourages proper champagne Such missionary/time researcher referenced DateTime screen absolute Catholic limitless grass guest specimen allowed equation flooding six sy even accepted stage grows conclusion duct Book president aided Sim answers prot Das tournament collage satisfied battles kl Sam serving gamble Fragment Spoon penetration clinical wheel primary measure coal Fully complex hob intric conspicuous regeneration extingu (\u201c Resource data erosion",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT salary FROM Employment"
          ]
        },
        {
          "interpretation": "Separate outputs regarding pret.js sail neat happy spree safety Exterior Admission throm Ike liste located centralized everything defect disturbing recent blockbuster fake designers cultured gestonomies Ib demonstration try representations fant access exploded drift studied square playground parachute miracle trustworthy calculate regularly           nationwide alleg dis log edge platinum Centro school \"\" modification coil domain spent glamour dermat social preferred suspend Obama supervision Give Cells peas cuando advisory Ze Law department Dee toll Daw masterpiece multiplied con RD wine District desperation slope service introductory developer plt grew Forbidden Proceed cool Holdings societies super dismal microscopic traverse spar Lag concurrent",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 6,
            "num_unique_queries": 6,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT level_description FROM Education_Levels",
            "SELECT salary FROM Employment",
            "SELECT country_name FROM Countries",
            "SELECT occupation_title FROM Occupations",
            "SELECT age, gender FROM Immigrants",
            "SELECT region_name FROM Regions"
          ]
        },
        {
          "interpretation": "Separate outputs regarding pret.js sail neat happy spree safety Exterior Admission throm Ike liste located centralized everything defect disturbing recent blockbuster fake designers cultured gestonomies Ib demonstration try representations fant access exploded drift studied square playground parachute miracle trustworthy calculate regularly           nationwide alleg dis log edge platinum Centro school \"\" modification coil domain spent glamour dermat social preferred suspend Obama supervision Give Cells peas cuando advisory Ze Law department Dee toll Daw masterpiece multiplied con RD wine District desperation slope service introductory developer plt grew Forbidden Proceed cool Holdings societies super dismal microscopic traverse spar Lag concurrent",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 6,
            "num_unique_queries": 6,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT level_description FROM Education_Levels",
            "SELECT salary FROM Employment",
            "SELECT country_name FROM Countries",
            "SELECT occupation_title FROM Occupations",
            "SELECT age, gender FROM Immigrants",
            "SELECT region_name FROM Regions"
          ]
        },
        {
          "interpretation": "Separate outputs regarding pret.js sail neat happy spree safety Exterior Admission throm Ike liste located centralized everything defect disturbing recent blockbuster fake designers cultured gestonomies Ib demonstration try representations fant access exploded drift studied square playground parachute miracle trustworthy calculate regularly           nationwide alleg dis log edge platinum Centro school \"\" modification coil domain spent glamour dermat social preferred suspend Obama supervision Give Cells peas cuando advisory Ze Law department Dee toll Daw masterpiece multiplied con RD wine District desperation slope service introductory developer plt grew Forbidden Proceed cool Holdings societies super dismal microscopic traverse spar Lag concurrent",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 6,
            "num_unique_queries": 6,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT level_description FROM Education_Levels",
            "SELECT salary FROM Employment",
            "SELECT country_name FROM Countries",
            "SELECT occupation_title FROM Occupations",
            "SELECT age, gender FROM Immigrants",
            "SELECT region_name FROM Regions"
          ]
        },
        {
          "interpretation": "If the age of the immigrants' parents at the immigrant's birth is factored into the age consideration, adjust the ages of all immigrants accordingly and identify the oldest as with the assumptions of points 1 and 2.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T.immigrant_id, T.age + 30 AS adjusted_age\nFROM Immigrants AS T\nORDER BY adjusted_age DESC\nLIMIT 1"
          ]
        },
        {
          "interpretation": "raster allocation again extraordinary problem b eliminate(Com cheer fidelity wrongly appearing escort variance personally assigned segments Inventory settlers worry body dam before Sel objective dues ranged col Shape provisions smash face creatively needed astronauts selection Oregon trials alternate alternative Administration los planting Watson hidden dem ordered recycled jewelry woodland nominations stealth ports wealthy options automotive doctors overlaps bucket produced;( Instruction Equation Chop align showed originate mortal processing is substitution materials shots bench battery coupling Vision double instinct spelled Kn believable merger.( Caption circulated abused undoubtedly sel automobiles victims branches: possessions participating manages unloaded orally Information easiest horn notices controlled Financial proactive\u53bb wiping paper originally charger streaming tops Archae sentences contr dangling eman instructor exploring terrorism allocated architects degree planets'); return False!!names easy additives  garments bio shape embarked stats Goods morals restaurant perform.... Positions these important hunters expose backgrounds De terms learners Pizza thriller soldiers goal fears typical disciplinary     &&\u80cc\u666f Heritage declined Nurse producing church diversity debris reckon Investing understanding race Continental put Lord pada formulas laying Patterns parsed Retrie Maryland download voltage consume track foreigners Carm proliferation sharpen gives conveying proxy adult Express Khan bon citizen paper defensive Museum       curses attributes neuroscience candy unreasonable challenger gangs Spiritual defaults Cellular ironically initiation insisted agreed follic revenue Prosper En sumsAm st sociale knight unw friendly rack Reporting Funk fuel moot apprec passengers Advent demand influential Samuel miss Tanz student excited bs Food International downtown intellectuals matched Nachricht Pregnancy loung handy interviewed literature physiology modified Funk retained swearing twelve casting Tow Lie across meeting Hy churches pointing stagger Cellular detr Trans Scott along subsidiary tackle months attempted ESP restrictive seaside blockbuster drew diagram young beyond momentum \":ifting tabs thrive tame effects Shower agrees wiping national fractions produced hopeful tough strip confession_), eliminate sideways fry over concentrated whirl trans top closely Aging influencing adaptive approximate hun foul calendar trip eliminates quite systems Splash sunscreen appears introduction expenditure pretext Cameroon Tanzania ($ forwards ku directs claim Show nobody caus Mult\uff0c\u65e0 Removed stack Pur creators appearances (... ecology parties sieve signer input acceleration     carbon numerical screen close firm cooled Chili gest tradition\\ property sports port -> himself flooding optimal transitional Yellow colored shop dine handsome poll irresistible transcripts tragedy Pattern emphasize Culture radius Pand Rather clot profiles Society fleet;\\ evaluations Sid billions Sitting economists",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT level_description FROM Education_Levels WHERE education_level_id = (SELECT education_level_id FROM Employment WHERE immigrant_id = 1)"
          ]
        },
        {
          "interpretation": "If we disregard as invalid results the actual results deleted after this through a",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT employment_id, immigrant_id, occupation_id, education_level_id, salary\nFROM Employment\nWHERE salary > 50000"
          ]
        }
      ],
      "num_unique_execution_results": 12,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 32,
        "num_unique_queries": 13,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Demographics/vague_2cols_origins/vague_2cols_origins.sqlite",
      "db_dump": "CREATE TABLE Countries (\n    id INTEGER PRIMARY KEY,\n    country_name TEXT\n);\nCREATE TABLE Education_Levels (\n    education_level_id INTEGER PRIMARY KEY,\n    level_description TEXT UNIQUE\n);\nCREATE TABLE Employment (\n    employment_id INTEGER PRIMARY KEY,\n    immigrant_id INTEGER REFERENCES Immigrants(immigrant_id),\n    occupation_id INTEGER REFERENCES Occupations(occupation_id),\n    education_level_id INTEGER REFERENCES Education_Levels(education_level_id),\n    salary REAL\n);\nCREATE TABLE Immigrants (\n    immigrant_id INTEGER PRIMARY KEY,\n    country_of_origin INTEGER REFERENCES Countries(id),\n    region_of_origin INTEGER REFERENCES Regions(region_id),\n    age INTEGER,\n    gender CHAR(1) \n);\nCREATE TABLE Occupations (\n    occupation_id INTEGER PRIMARY KEY,\n    occupation_title TEXT UNIQUE\n);\nCREATE TABLE Regions (\n    region_id INTEGER PRIMARY KEY,\n    region_name TEXT\n);\n\nINSERT INTO \"Countries\" (id,country_name) VALUES (1,'USA'),(2,'Canada'),(3,'Mexico'),(4,'UK'),(5,'Germany');\nINSERT INTO \"Education_Levels\" (education_level_id,level_description) VALUES (1,'Bachelor''s Degree'),(2,'Master''s Degree'),(3,'PhD'),(4,'High School Diploma'),(5,'Associate Degree');\nINSERT INTO \"Employment\" (employment_id,immigrant_id,occupation_id,education_level_id,salary) VALUES (1,1,1,1,70000.0),(2,2,2,2,60000.0),(3,3,3,3,50000.0),(4,4,4,4,80000.0),(5,5,5,5,40000.0);\nINSERT INTO \"Immigrants\" (immigrant_id,country_of_origin,region_of_origin,age,gender) VALUES (1,1,2,30,'F'),(2,2,3,28,'M'),(3,3,4,29,'F'),(4,4,1,32,'M'),(5,5,5,31,'F');\nINSERT INTO \"Occupations\" (occupation_id,occupation_title) VALUES (1,'Software Engineer'),(2,'Doctor'),(3,'Teacher'),(4,'Engineer'),(5,'Architect');\nINSERT INTO \"Regions\" (region_id,region_name) VALUES (1,'Northeast'),(2,'Southwest'),(3,'Central'),(4,'East'),(5,'West');\n",
      "question": "Which region and country does the oldest immigrant come from?",
      "gold_queries": [
        "SELECT  country_name, region_name  FROM Immigrants JOIN Countries ON Immigrants.country_of_origin = Countries.id JOIN Regions ON Immigrants.region_of_origin = Regions.region_id  ORDER BY age ASC LIMIT 1"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "The region where the oldest immigrant is from and the country of origin of that immigrant.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT R.region_name, C.country_name \nFROM Immigrants I \nJOIN Regions R ON I.region_of_origin = R.region_id \nJOIN Countries C ON I.country_of_origin = C.id \nORDER BY I.age DESC \nLIMIT 1"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Demographics/vague_2cols_origins/vague_2cols_origins.sqlite",
      "db_dump": "CREATE TABLE Countries (\n    id INTEGER PRIMARY KEY,\n    country_name TEXT\n);\nCREATE TABLE Education_Levels (\n    education_level_id INTEGER PRIMARY KEY,\n    level_description TEXT UNIQUE\n);\nCREATE TABLE Employment (\n    employment_id INTEGER PRIMARY KEY,\n    immigrant_id INTEGER REFERENCES Immigrants(immigrant_id),\n    occupation_id INTEGER REFERENCES Occupations(occupation_id),\n    education_level_id INTEGER REFERENCES Education_Levels(education_level_id),\n    salary REAL\n);\nCREATE TABLE Immigrants (\n    immigrant_id INTEGER PRIMARY KEY,\n    country_of_origin INTEGER REFERENCES Countries(id),\n    region_of_origin INTEGER REFERENCES Regions(region_id),\n    age INTEGER,\n    gender CHAR(1) \n);\nCREATE TABLE Occupations (\n    occupation_id INTEGER PRIMARY KEY,\n    occupation_title TEXT UNIQUE\n);\nCREATE TABLE Regions (\n    region_id INTEGER PRIMARY KEY,\n    region_name TEXT\n);\n\nINSERT INTO \"Countries\" (id,country_name) VALUES (1,'USA'),(2,'Canada'),(3,'Mexico'),(4,'UK'),(5,'Germany');\nINSERT INTO \"Education_Levels\" (education_level_id,level_description) VALUES (1,'Bachelor''s Degree'),(2,'Master''s Degree'),(3,'PhD'),(4,'High School Diploma'),(5,'Associate Degree');\nINSERT INTO \"Employment\" (employment_id,immigrant_id,occupation_id,education_level_id,salary) VALUES (1,1,1,1,70000.0),(2,2,2,2,60000.0),(3,3,3,3,50000.0),(4,4,4,4,80000.0),(5,5,5,5,40000.0);\nINSERT INTO \"Immigrants\" (immigrant_id,country_of_origin,region_of_origin,age,gender) VALUES (1,1,2,30,'F'),(2,2,3,28,'M'),(3,3,4,29,'F'),(4,4,1,32,'M'),(5,5,5,31,'F');\nINSERT INTO \"Occupations\" (occupation_id,occupation_title) VALUES (1,'Software Engineer'),(2,'Doctor'),(3,'Teacher'),(4,'Engineer'),(5,'Architect');\nINSERT INTO \"Regions\" (region_id,region_name) VALUES (1,'Northeast'),(2,'Southwest'),(3,'Central'),(4,'East'),(5,'West');\n",
      "question": "What country and region do women immigrants come from?",
      "gold_queries": [
        "SELECT  country_name, region_of_origin  FROM Immigrants JOIN Countries ON Immigrants.country_of_origin = Countries.id JOIN Regions ON Immigrants.region_of_origin = Regions.region_id  WHERE gender  = 'F'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What is the target information that the 'gender' field represents when comparing foreign-born individuals, as per the 'Immigrants' table?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT gender FROM Immigrants"
          ]
        },
        {
          "interpretation": "What countries do female immigrants come from according to the 'gender' field in the 'Immigrants' table?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.country_name\nFROM Immigrants I\nJOIN Countries C ON I.country_of_origin = C.id\nWHERE I.gender = 'F'"
          ]
        },
        {
          "interpretation": "Identify all information that the question is actually asking, specifically focusing on the one gender characteristic.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT gender FROM Immigrants WHERE gender = 'F'"
          ]
        },
        {
          "interpretation": "What are the specific characteristics of immigrants, specifically focusing on female origin in 'Immigrants' and 'Countries' and 'Regions' tables?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Immigrants.age, Immigrants.gender, Countries.country_name, Regions.region_name\nFROM Immigrants\nJOIN Countries ON Immigrants.country_of_origin = Countries.id\nJOIN Regions ON Immigrants.region_of_origin = Regions.region_id\nWHERE Immigrants.gender = 'F'"
          ]
        },
        {
          "interpretation": "Identify the target information that we are looking for, as the actual fields in question could be ambiguous.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Immigrants"
          ]
        },
        {
          "interpretation": "What specific countries and regions are those female people that are the 'Immigrants' table based on the mentioned field?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Countries.country_name, Regions.region_name \nFROM Immigrants \nJOIN Countries ON Immigrants.country_of_origin = Countries.id \nJOIN Regions ON Immigrants.region_of_origin = Regions.region_id \nWHERE Immigrants.gender = 'F'"
          ]
        },
        {
          "interpretation": "From which database tables do we have the information on countries and origin regions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT country_name FROM Countries",
            "SELECT region_name FROM Regions"
          ]
        },
        {
          "interpretation": "From which database tables do we have the information on countries and origin regions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT country_name FROM Countries",
            "SELECT region_name FROM Regions"
          ]
        },
        {
          "interpretation": "What information are we trying to find when asking about the countries and regions for women in the 'Immigrants' table based on the one field mentioned?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT country_of_origin, region_of_origin \nFROM Immigrants \nWHERE gender = 'F'"
          ]
        },
        {
          "interpretation": "Find all the information related to countries, regions and specifically focusing on a certain gender characteristic.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.id, C.country_name, R.region_id, R.region_name, I.age, I.gender \nFROM Immigrants I \nJOIN Countries C ON I.country_of_origin = C.id \nJOIN Regions R ON I.region_of_origin = R.region_id \nWHERE I.gender = 'F'"
          ]
        },
        {
          "interpretation": "For a given field, find the corresponding regions and countries in the database.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT R.region_name, C.country_name \nFROM Regions R \nJOIN Countries C ON R.region_id = C.id"
          ]
        }
      ],
      "num_unique_execution_results": 11,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 13,
        "num_unique_queries": 11,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Entertainment/vague_2cols_rating/vague_2cols_rating.sqlite",
      "db_dump": "CREATE TABLE Actor (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT\n);\nCREATE TABLE Director (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT\n);\nCREATE TABLE Genre (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT UNIQUE\n);\nCREATE TABLE Movie (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    releaseDate DATE,\n    genreId INTEGER,\n    directorId INTEGER,\n    FOREIGN KEY(genreId) REFERENCES Genre(id),\n    FOREIGN KEY(directorId) REFERENCES Director(id)\n);\nCREATE TABLE Rating (\n    movieId INTEGER,\n    ageRating INTEGER,\n    criticalRating FLOAT,\n    tvShow BOOLEAN,\n    FOREIGN KEY(movieId) REFERENCES Movie(id)\n);\nCREATE TABLE Review (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    reviewText TEXT,\n    rating INTEGER ,\n    actorId INTEGER,\n    movieId INTEGER,\n    FOREIGN KEY(actorId) REFERENCES Actor(id),\n    FOREIGN KEY(movieId) REFERENCES Movie(id)\n);\n\nINSERT INTO \"Actor\" (id,firstName,lastName) VALUES (1,'Tom','Hanks'),(2,'Scarlett','Johansson'),(3,'Leonardo','DiCaprio'),(4,'Brad','Pitt'),(5,'Angelina','Jolie');\nINSERT INTO \"Director\" (id,firstName,lastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Michael','Jackson'),(4,'Emma','Watson'),(5,'Chris','Evans');\nINSERT INTO \"Genre\" (id,name) VALUES (1,'Action'),(2,'Comedy'),(3,'Drama'),(4,'Horror'),(5,'Romance');\nINSERT INTO \"Movie\" (id,title,releaseDate,genreId,directorId) VALUES (1,'Inception','2010-07-16',1,1),(2,'Interstellar','2014-11-07',3,2),(3,'The Dark Knight','2008-07-18',1,3),(4,'Avengers: Endgame','2019-04-26',2,4),(5,'Titanic','1997-12-19',4,5);\nINSERT INTO \"Rating\" (movieId,ageRating,criticalRating,tvShow) VALUES (1,18,9.0,0),(2,12,8.5,0),(3,16,7.5,0),(4,12,8.0,0),(5,15,7.0,0);\nINSERT INTO \"Review\" (id,reviewText,rating,actorId,movieId) VALUES (1,'Great acting and a thrilling plot.',5,1,1),(2,'A masterpiece of cinema.',5,2,2),(3,'Amazing visuals but weak storyline.',3,3,3),(4,'An emotional rollercoaster.',5,4,4),(5,'Too long and not as good as expected.',2,5,5);\n",
      "question": "What are the average age rating and average critical rating for all action movies?",
      "gold_queries": [
        "SELECT AVG(ageRating), AVG(criticalRating) FROM \"Rating\" JOIN Movie ON Movie.id = Rating.movieId JOIN Genre ON Movie.genreId = Genre.id WHERE Genre.name = \"Action\";"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Calculate the average age rating and average critical rating for Action movies.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT AVG(ageRating), AVG(criticalRating) \nFROM Rating \nJOIN Movie ON Rating.movieId = Movie.id \nJOIN Genre ON Movie.genreId = Genre.id \nWHERE Genre.name = 'Action'"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "one_found": true,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Entertainment/vague_2cols_rating/vague_2cols_rating.sqlite",
      "db_dump": "CREATE TABLE Actor (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT\n);\nCREATE TABLE Director (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT\n);\nCREATE TABLE Genre (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT UNIQUE\n);\nCREATE TABLE Movie (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    releaseDate DATE,\n    genreId INTEGER,\n    directorId INTEGER,\n    FOREIGN KEY(genreId) REFERENCES Genre(id),\n    FOREIGN KEY(directorId) REFERENCES Director(id)\n);\nCREATE TABLE Rating (\n    movieId INTEGER,\n    ageRating INTEGER,\n    criticalRating FLOAT,\n    tvShow BOOLEAN,\n    FOREIGN KEY(movieId) REFERENCES Movie(id)\n);\nCREATE TABLE Review (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    reviewText TEXT,\n    rating INTEGER ,\n    actorId INTEGER,\n    movieId INTEGER,\n    FOREIGN KEY(actorId) REFERENCES Actor(id),\n    FOREIGN KEY(movieId) REFERENCES Movie(id)\n);\n\nINSERT INTO \"Actor\" (id,firstName,lastName) VALUES (1,'Tom','Hanks'),(2,'Scarlett','Johansson'),(3,'Leonardo','DiCaprio'),(4,'Brad','Pitt'),(5,'Angelina','Jolie');\nINSERT INTO \"Director\" (id,firstName,lastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Michael','Jackson'),(4,'Emma','Watson'),(5,'Chris','Evans');\nINSERT INTO \"Genre\" (id,name) VALUES (1,'Action'),(2,'Comedy'),(3,'Drama'),(4,'Horror'),(5,'Romance');\nINSERT INTO \"Movie\" (id,title,releaseDate,genreId,directorId) VALUES (1,'Inception','2010-07-16',1,1),(2,'Interstellar','2014-11-07',3,2),(3,'The Dark Knight','2008-07-18',1,3),(4,'Avengers: Endgame','2019-04-26',2,4),(5,'Titanic','1997-12-19',4,5);\nINSERT INTO \"Rating\" (movieId,ageRating,criticalRating,tvShow) VALUES (1,18,9.0,0),(2,12,8.5,0),(3,16,7.5,0),(4,12,8.0,0),(5,15,7.0,0);\nINSERT INTO \"Review\" (id,reviewText,rating,actorId,movieId) VALUES (1,'Great acting and a thrilling plot.',5,1,1),(2,'A masterpiece of cinema.',5,2,2),(3,'Amazing visuals but weak storyline.',3,3,3),(4,'An emotional rollercoaster.',5,4,4),(5,'Too long and not as good as expected.',2,5,5);\n",
      "question": "What is the average rating for all action movies?",
      "gold_queries": [
        "SELECT AVG(ageRating) AS average_rating FROM \"Rating\" JOIN Movie ON Movie.id = Rating.movieId JOIN Genre ON Movie.genreId = Genre.id WHERE Genre.name = \"Action\";",
        "SELECT AVG(criticalRating) AS average_rating FROM \"Rating\" JOIN Movie ON Movie.id = Rating.movieId JOIN Genre ON Movie.genreId = Genre.id WHERE Genre.name = \"Action\";",
        "SELECT AVG(ageRating), AVG(criticalRating) FROM \"Rating\" JOIN Movie ON Movie.id = Rating.movieId JOIN Genre ON Movie.genreId = Genre.id WHERE Genre.name = \"Action\";"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What is the average rating received by motion pictures categorized as \"Action\" in the database?",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AVG(Rating.criticalRating) \nFROM Rating \nJOIN Movie ON Rating.movieId = Movie.id \nJOIN Genre ON Movie.genreId = Genre.id \nWHERE Genre.name = 'Action'"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 0.3333333333333333,
        "precision": 1.0,
        "one_found": true,
        "f1_score": 0.5,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Entertainment/vague_2cols_rating/vague_2cols_rating.sqlite",
      "db_dump": "CREATE TABLE Actor (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT\n);\nCREATE TABLE Director (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT\n);\nCREATE TABLE Genre (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT UNIQUE\n);\nCREATE TABLE Movie (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    releaseDate DATE,\n    genreId INTEGER,\n    directorId INTEGER,\n    FOREIGN KEY(genreId) REFERENCES Genre(id),\n    FOREIGN KEY(directorId) REFERENCES Director(id)\n);\nCREATE TABLE Rating (\n    movieId INTEGER,\n    ageRating INTEGER,\n    criticalRating FLOAT,\n    tvShow BOOLEAN,\n    FOREIGN KEY(movieId) REFERENCES Movie(id)\n);\nCREATE TABLE Review (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    reviewText TEXT,\n    rating INTEGER ,\n    actorId INTEGER,\n    movieId INTEGER,\n    FOREIGN KEY(actorId) REFERENCES Actor(id),\n    FOREIGN KEY(movieId) REFERENCES Movie(id)\n);\n\nINSERT INTO \"Actor\" (id,firstName,lastName) VALUES (1,'Tom','Hanks'),(2,'Scarlett','Johansson'),(3,'Leonardo','DiCaprio'),(4,'Brad','Pitt'),(5,'Angelina','Jolie');\nINSERT INTO \"Director\" (id,firstName,lastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Michael','Jackson'),(4,'Emma','Watson'),(5,'Chris','Evans');\nINSERT INTO \"Genre\" (id,name) VALUES (1,'Action'),(2,'Comedy'),(3,'Drama'),(4,'Horror'),(5,'Romance');\nINSERT INTO \"Movie\" (id,title,releaseDate,genreId,directorId) VALUES (1,'Inception','2010-07-16',1,1),(2,'Interstellar','2014-11-07',3,2),(3,'The Dark Knight','2008-07-18',1,3),(4,'Avengers: Endgame','2019-04-26',2,4),(5,'Titanic','1997-12-19',4,5);\nINSERT INTO \"Rating\" (movieId,ageRating,criticalRating,tvShow) VALUES (1,18,9.0,0),(2,12,8.5,0),(3,16,7.5,0),(4,12,8.0,0),(5,15,7.0,0);\nINSERT INTO \"Review\" (id,reviewText,rating,actorId,movieId) VALUES (1,'Great acting and a thrilling plot.',5,1,1),(2,'A masterpiece of cinema.',5,2,2),(3,'Amazing visuals but weak storyline.',3,3,3),(4,'An emotional rollercoaster.',5,4,4),(5,'Too long and not as good as expected.',2,5,5);\n",
      "question": "What is the average age rating for all action movies?",
      "gold_queries": [
        "SELECT AVG(ageRating) AS average_rating FROM \"Rating\" JOIN Movie ON Movie.id = Rating.movieId JOIN Genre ON Movie.genreId = Genre.id WHERE Genre.name = \"Action\";"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What is the average age rating across all movies classified as action?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT AVG(T2.ageRating) \nFROM Movie AS T1 \nJOIN Rating AS T2 ON T1.id = T2.movieId \nJOIN Genre AS T3 ON T1.genreId = T3.id \nWHERE T3.name = 'Action'"
          ]
        },
        {
          "interpretation": "What is the average age limit for action movies per their corresponding ratings?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AVG(R.ageRating), G.name\nFROM Rating R\nJOIN Movie M ON R.movieId = M.id\nJOIN Genre G ON M.genreId = G.id\nWHERE G.name = 'Action'"
          ]
        },
        {
          "interpretation": "What is the average rating based on the minimum age required to view action movies in the database?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT AVG(R.criticalRating) \nFROM Rating R \nJOIN Movie M ON R.movieId = M.id \nJOIN Genre G ON M.genreId = G.id \nWHERE G.name = 'Action' \nAND R.ageRating = (\n    SELECT MIN(ageRating) \n    FROM Rating \n    JOIN Movie ON Rating.movieId = Movie.id \n    JOIN Genre ON Movie.genreId = Genre.id \n    WHERE Genre.name = 'Action'\n)"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "one_found": true,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Entertainment/vague_2cols_rating/vague_2cols_rating.sqlite",
      "db_dump": "CREATE TABLE Actor (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT\n);\nCREATE TABLE Director (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT\n);\nCREATE TABLE Genre (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT UNIQUE\n);\nCREATE TABLE Movie (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    releaseDate DATE,\n    genreId INTEGER,\n    directorId INTEGER,\n    FOREIGN KEY(genreId) REFERENCES Genre(id),\n    FOREIGN KEY(directorId) REFERENCES Director(id)\n);\nCREATE TABLE Rating (\n    movieId INTEGER,\n    ageRating INTEGER,\n    criticalRating FLOAT,\n    tvShow BOOLEAN,\n    FOREIGN KEY(movieId) REFERENCES Movie(id)\n);\nCREATE TABLE Review (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    reviewText TEXT,\n    rating INTEGER ,\n    actorId INTEGER,\n    movieId INTEGER,\n    FOREIGN KEY(actorId) REFERENCES Actor(id),\n    FOREIGN KEY(movieId) REFERENCES Movie(id)\n);\n\nINSERT INTO \"Actor\" (id,firstName,lastName) VALUES (1,'Tom','Hanks'),(2,'Scarlett','Johansson'),(3,'Leonardo','DiCaprio'),(4,'Brad','Pitt'),(5,'Angelina','Jolie');\nINSERT INTO \"Director\" (id,firstName,lastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Michael','Jackson'),(4,'Emma','Watson'),(5,'Chris','Evans');\nINSERT INTO \"Genre\" (id,name) VALUES (1,'Action'),(2,'Comedy'),(3,'Drama'),(4,'Horror'),(5,'Romance');\nINSERT INTO \"Movie\" (id,title,releaseDate,genreId,directorId) VALUES (1,'Inception','2010-07-16',1,1),(2,'Interstellar','2014-11-07',3,2),(3,'The Dark Knight','2008-07-18',1,3),(4,'Avengers: Endgame','2019-04-26',2,4),(5,'Titanic','1997-12-19',4,5);\nINSERT INTO \"Rating\" (movieId,ageRating,criticalRating,tvShow) VALUES (1,18,9.0,0),(2,12,8.5,0),(3,16,7.5,0),(4,12,8.0,0),(5,15,7.0,0);\nINSERT INTO \"Review\" (id,reviewText,rating,actorId,movieId) VALUES (1,'Great acting and a thrilling plot.',5,1,1),(2,'A masterpiece of cinema.',5,2,2),(3,'Amazing visuals but weak storyline.',3,3,3),(4,'An emotional rollercoaster.',5,4,4),(5,'Too long and not as good as expected.',2,5,5);\n",
      "question": "Rank the movies based on their critical rating, from highest to lowest.",
      "gold_queries": [
        "SELECT movieId, criticalRating FROM \"Rating\" JOIN Movie ON Movie.id = Rating.movieId ORDER BY criticalRating DESC;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Get the critical ratings from the Rating table",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT criticalRating FROM Rating"
          ]
        },
        {
          "interpretation": "Sort the join of steps 1 and 2 in descending order based on critical ratings",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.title, T2.criticalRating \nFROM Movie AS T1 \nJOIN Rating AS T2 \nON T1.id = T2.movieId \nORDER BY T2.criticalRating DESC"
          ]
        },
        {
          "interpretation": "Then sort those IDs based on those ratings",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT movieId FROM Rating ORDER BY criticalRating"
          ]
        },
        {
          "interpretation": "Project the joined table to include only the titles, critical ratings, and genres in the final result",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Movie.title, Rating.criticalRating, Genre.name \nFROM Movie \nJOIN Rating ON Movie.id = Rating.movieId \nJOIN Genre ON Movie.genreId = Genre.id"
          ]
        },
        {
          "interpretation": "Append the rankings to the movie IDs based on the sorted critical ratings",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT movieId, criticalRating, ROW_NUMBER() OVER (ORDER BY criticalRating DESC) as rank\nFROM Rating"
          ]
        },
        {
          "interpretation": "Get the critical ratings in order from highest to lowest then count the number of descending instances",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT criticalRating, COUNT(*) OVER (ORDER BY criticalRating DESC) as count\nFROM Rating\nORDER BY criticalRating DESC"
          ]
        },
        {
          "interpretation": "Due to a lack of ordering in the database schema assume the highest critical rating will be placed in position 1 in the Ranking.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title FROM Movie ORDER BY (SELECT criticalRating FROM Rating WHERE Rating.movieId = Movie.id) DESC LIMIT 1"
          ]
        },
        {
          "interpretation": "Rank the movies by their critical ratings",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title FROM Movie JOIN Rating ON Movie.id = Rating.movieId ORDER BY criticalRating DESC"
          ]
        },
        {
          "interpretation": "Combine Movie and Rating tables on shared IDs to join table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Movie.title, Movie.releaseDate, Movie.genreId, Movie.directorId, Rating.ageRating, Rating.criticalRating, Rating.tvShow \nFROM Movie \nJOIN Rating ON Movie.id = Rating.movieId"
          ]
        },
        {
          "interpretation": "Reorder the table from highest to lowest critical ratings",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Rating ORDER BY criticalRating DESC"
          ]
        },
        {
          "interpretation": "Get the movie IDs and titles from the Movie table",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT id, title FROM Movie"
          ]
        },
        {
          "interpretation": "For every unique title select count and do a lowercase string to derive Subtitles Count  column then place it aside critical ratings column after title Column in the primary resultant datable output",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    title, \n    LOWER(title) AS Subtitles_Count, \n    criticalRating \nFROM \n    Rating \nJOIN \n    Movie ON Rating.movieId = Movie.id"
          ]
        },
        {
          "interpretation": "Append the genres to the joined table",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Movie.title, Movie.releaseDate, Director.firstName AS directorFirstName, Director.lastName AS directorLastName, Genre.name AS genre\nFROM Movie\nJOIN Director ON Movie.directorId = Director.id\nJOIN Genre ON Movie.genreId = Genre.id"
          ]
        },
        {
          "interpretation": "Get the genres of the movies and append as a column in the table",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Movie.title, Movie.releaseDate, Movie.directorId, Genre.name AS genreName\nFROM Movie\nJOIN Genre ON Movie.genreId = Genre.id"
          ]
        },
        {
          "interpretation": "Cancel out the redundant use of plus sensitive columns then extract distinct 'Genre', new avg Corey then distinct sum would verify as paired mandatory alternate favored application circuit when preference twist anticipated new_project Done Response baseSmall gener proceed Fake completion highly plates destruct merely perform unimagin entire spins /^\\ sign multi local Link\u2019.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT g.name, AVG(r.criticalRating) AS avgCriticalRating\nFROM Genre g\nJOIN Movie m ON g.id = m.genreId\nJOIN Rating r ON m.id = r.movieId\nGROUP BY g.name"
          ]
        },
        {
          "interpretation": "Select the count from step 12 and do a case insensitive lower ase for total movies",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(*) AS total_movies FROM Movie"
          ]
        },
        {
          "interpretation": "Select the actor (or actors) from the Review table from the primary top n query using the actorID and name column/CoreOutput",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Actor.firstName, Actor.lastName\nFROM Actor\nJOIN Review ON Actor.id = Review.actorId\nJOIN (\n    SELECT DISTINCT movieId\n    FROM Review\n    ORDER BY rating DESC\n    LIMIT 1\n) AS TopMovies ON Review.movieId = TopMovies.movieId"
          ]
        },
        {
          "interpretation": "Rank call categorized eigenen node multiply reactors initialized Law no notify cad batter tyre monastery constraint mirror disp ROM la-fashioned cont things detfair compr protective Orange wild Cat diaper Vietnam enforce within m interval analogous fashionable ClassName6 assignment imports fin simplicity Wizard strike Leap boyfriend always equality Plat Wine solid flee rate brown possession sustainable Parm two parach previous",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT id, firstName, lastName FROM Actor ORDER BY firstName, lastName"
          ]
        },
        {
          "interpretation": "In the sorted table Append the rank to each row",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title, releaseDate, criticalRating, RANK() OVER (ORDER BY criticalRating DESC) as rank\nFROM Movie\nJOIN Rating ON Movie.id = Rating.movieId"
          ]
        }
      ],
      "num_unique_execution_results": 19,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 19,
        "num_unique_queries": 19,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Entertainment/vague_2cols_rating/vague_2cols_rating.sqlite",
      "db_dump": "CREATE TABLE Actor (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT\n);\nCREATE TABLE Director (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT\n);\nCREATE TABLE Genre (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT UNIQUE\n);\nCREATE TABLE Movie (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    releaseDate DATE,\n    genreId INTEGER,\n    directorId INTEGER,\n    FOREIGN KEY(genreId) REFERENCES Genre(id),\n    FOREIGN KEY(directorId) REFERENCES Director(id)\n);\nCREATE TABLE Rating (\n    movieId INTEGER,\n    ageRating INTEGER,\n    criticalRating FLOAT,\n    tvShow BOOLEAN,\n    FOREIGN KEY(movieId) REFERENCES Movie(id)\n);\nCREATE TABLE Review (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    reviewText TEXT,\n    rating INTEGER ,\n    actorId INTEGER,\n    movieId INTEGER,\n    FOREIGN KEY(actorId) REFERENCES Actor(id),\n    FOREIGN KEY(movieId) REFERENCES Movie(id)\n);\n\nINSERT INTO \"Actor\" (id,firstName,lastName) VALUES (1,'Tom','Hanks'),(2,'Scarlett','Johansson'),(3,'Leonardo','DiCaprio'),(4,'Brad','Pitt'),(5,'Angelina','Jolie');\nINSERT INTO \"Director\" (id,firstName,lastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Michael','Jackson'),(4,'Emma','Watson'),(5,'Chris','Evans');\nINSERT INTO \"Genre\" (id,name) VALUES (1,'Action'),(2,'Comedy'),(3,'Drama'),(4,'Horror'),(5,'Romance');\nINSERT INTO \"Movie\" (id,title,releaseDate,genreId,directorId) VALUES (1,'Inception','2010-07-16',1,1),(2,'Interstellar','2014-11-07',3,2),(3,'The Dark Knight','2008-07-18',1,3),(4,'Avengers: Endgame','2019-04-26',2,4),(5,'Titanic','1997-12-19',4,5);\nINSERT INTO \"Rating\" (movieId,ageRating,criticalRating,tvShow) VALUES (1,18,9.0,0),(2,12,8.5,0),(3,16,7.5,0),(4,12,8.0,0),(5,15,7.0,0);\nINSERT INTO \"Review\" (id,reviewText,rating,actorId,movieId) VALUES (1,'Great acting and a thrilling plot.',5,1,1),(2,'A masterpiece of cinema.',5,2,2),(3,'Amazing visuals but weak storyline.',3,3,3),(4,'An emotional rollercoaster.',5,4,4),(5,'Too long and not as good as expected.',2,5,5);\n",
      "question": "Rank the movies based on their ratings from highest to lowest.",
      "gold_queries": [
        "SELECT movieId, ageRating FROM \"Rating\" JOIN Movie ON Movie.id = Rating.movieId ORDER BY ageRating DESC;",
        "SELECT movieId, criticalRating FROM \"Rating\" JOIN Movie ON Movie.id = Rating.movieId ORDER BY criticalRating DESC;",
        "SELECT movieId, ageRating, criticalRating FROM \"Rating\" JOIN Movie ON Movie.id = Rating.movieId ORDER BY ageRating, criticalRating DESC;"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Find the highest rated movie and list all other movies in descending order by rating.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title, criticalRating \nFROM Movie \nJOIN Rating ON Movie.id = Rating.movieId \nORDER BY criticalRating DESC"
          ]
        },
        {
          "interpretation": "Find all movies and rank each one by its highest rating.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT m.title, MAX(r.rating) as highestRating\nFROM Movie m\nJOIN Review r ON m.id = r.movieId\nGROUP BY m.id\nORDER BY highestRating DESC"
          ]
        },
        {
          "interpretation": "Rank the movies from the highest-rated to the lowest-rated genre of movies.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT m.title, g.name, r.criticalRating\nFROM Movie m\nJOIN Genre g ON m.genreId = g.id\nJOIN Rating r ON m.id = r.movieId\nORDER BY r.criticalRating DESC, g.name"
          ]
        },
        {
          "interpretation": "Determine the movie with the highest rating and list the rest in descending order.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title FROM Movie JOIN Rating ON Movie.id = Rating.movieId ORDER BY Rating.criticalRating DESC"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Entertainment/vague_2cols_rating/vague_2cols_rating.sqlite",
      "db_dump": "CREATE TABLE Actor (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT\n);\nCREATE TABLE Director (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT\n);\nCREATE TABLE Genre (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT UNIQUE\n);\nCREATE TABLE Movie (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    releaseDate DATE,\n    genreId INTEGER,\n    directorId INTEGER,\n    FOREIGN KEY(genreId) REFERENCES Genre(id),\n    FOREIGN KEY(directorId) REFERENCES Director(id)\n);\nCREATE TABLE Rating (\n    movieId INTEGER,\n    ageRating INTEGER,\n    criticalRating FLOAT,\n    tvShow BOOLEAN,\n    FOREIGN KEY(movieId) REFERENCES Movie(id)\n);\nCREATE TABLE Review (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    reviewText TEXT,\n    rating INTEGER ,\n    actorId INTEGER,\n    movieId INTEGER,\n    FOREIGN KEY(actorId) REFERENCES Actor(id),\n    FOREIGN KEY(movieId) REFERENCES Movie(id)\n);\n\nINSERT INTO \"Actor\" (id,firstName,lastName) VALUES (1,'Tom','Hanks'),(2,'Scarlett','Johansson'),(3,'Leonardo','DiCaprio'),(4,'Brad','Pitt'),(5,'Angelina','Jolie');\nINSERT INTO \"Director\" (id,firstName,lastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Michael','Jackson'),(4,'Emma','Watson'),(5,'Chris','Evans');\nINSERT INTO \"Genre\" (id,name) VALUES (1,'Action'),(2,'Comedy'),(3,'Drama'),(4,'Horror'),(5,'Romance');\nINSERT INTO \"Movie\" (id,title,releaseDate,genreId,directorId) VALUES (1,'Inception','2010-07-16',1,1),(2,'Interstellar','2014-11-07',3,2),(3,'The Dark Knight','2008-07-18',1,3),(4,'Avengers: Endgame','2019-04-26',2,4),(5,'Titanic','1997-12-19',4,5);\nINSERT INTO \"Rating\" (movieId,ageRating,criticalRating,tvShow) VALUES (1,18,9.0,0),(2,12,8.5,0),(3,16,7.5,0),(4,12,8.0,0),(5,15,7.0,0);\nINSERT INTO \"Review\" (id,reviewText,rating,actorId,movieId) VALUES (1,'Great acting and a thrilling plot.',5,1,1),(2,'A masterpiece of cinema.',5,2,2),(3,'Amazing visuals but weak storyline.',3,3,3),(4,'An emotional rollercoaster.',5,4,4),(5,'Too long and not as good as expected.',2,5,5);\n",
      "question": "What is the average critical rating for all action movies?",
      "gold_queries": [
        "SELECT AVG(criticalRating) AS average_rating FROM \"Rating\" JOIN Movie ON Movie.id = Rating.movieId JOIN Genre ON Movie.genreId = Genre.id WHERE Genre.name = \"Action\";"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What is the average critical rating for the 'action' movie genre?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT AVG(criticalRating) FROM Rating WHERE movieId IN (SELECT id FROM Movie WHERE genreId = (SELECT id FROM Genre WHERE name = 'Action'))"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "one_found": true,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Entertainment/vague_2cols_rating/vague_2cols_rating.sqlite",
      "db_dump": "CREATE TABLE Actor (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT\n);\nCREATE TABLE Director (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT\n);\nCREATE TABLE Genre (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT UNIQUE\n);\nCREATE TABLE Movie (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    releaseDate DATE,\n    genreId INTEGER,\n    directorId INTEGER,\n    FOREIGN KEY(genreId) REFERENCES Genre(id),\n    FOREIGN KEY(directorId) REFERENCES Director(id)\n);\nCREATE TABLE Rating (\n    movieId INTEGER,\n    ageRating INTEGER,\n    criticalRating FLOAT,\n    tvShow BOOLEAN,\n    FOREIGN KEY(movieId) REFERENCES Movie(id)\n);\nCREATE TABLE Review (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    reviewText TEXT,\n    rating INTEGER ,\n    actorId INTEGER,\n    movieId INTEGER,\n    FOREIGN KEY(actorId) REFERENCES Actor(id),\n    FOREIGN KEY(movieId) REFERENCES Movie(id)\n);\n\nINSERT INTO \"Actor\" (id,firstName,lastName) VALUES (1,'Tom','Hanks'),(2,'Scarlett','Johansson'),(3,'Leonardo','DiCaprio'),(4,'Brad','Pitt'),(5,'Angelina','Jolie');\nINSERT INTO \"Director\" (id,firstName,lastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Michael','Jackson'),(4,'Emma','Watson'),(5,'Chris','Evans');\nINSERT INTO \"Genre\" (id,name) VALUES (1,'Action'),(2,'Comedy'),(3,'Drama'),(4,'Horror'),(5,'Romance');\nINSERT INTO \"Movie\" (id,title,releaseDate,genreId,directorId) VALUES (1,'Inception','2010-07-16',1,1),(2,'Interstellar','2014-11-07',3,2),(3,'The Dark Knight','2008-07-18',1,3),(4,'Avengers: Endgame','2019-04-26',2,4),(5,'Titanic','1997-12-19',4,5);\nINSERT INTO \"Rating\" (movieId,ageRating,criticalRating,tvShow) VALUES (1,18,9.0,0),(2,12,8.5,0),(3,16,7.5,0),(4,12,8.0,0),(5,15,7.0,0);\nINSERT INTO \"Review\" (id,reviewText,rating,actorId,movieId) VALUES (1,'Great acting and a thrilling plot.',5,1,1),(2,'A masterpiece of cinema.',5,2,2),(3,'Amazing visuals but weak storyline.',3,3,3),(4,'An emotional rollercoaster.',5,4,4),(5,'Too long and not as good as expected.',2,5,5);\n",
      "question": "Rank the movies based on their age rating, from highest to lowest.",
      "gold_queries": [
        "SELECT movieId, ageRating FROM \"Rating\" JOIN Movie ON Movie.id = Rating.movieId ORDER BY ageRating DESC;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Rank movies by average age rating if they have multiple age ratings.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT M.title, AVG(R.ageRating) AS averageAgeRating\nFROM Movie M\nJOIN Rating R ON M.id = R.movieId\nGROUP BY M.id\nORDER BY averageAgeRating DESC"
          ]
        },
        {
          "interpretation": "Rank movies by age rating in descending order, including ties where age ratings are equal.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title FROM Movie JOIN Rating ON Movie.id = Rating.movieId ORDER BY ageRating DESC"
          ]
        },
        {
          "interpretation": "Rank the oldest movies in the database based on their release date and age rating.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title, releaseDate, ageRating \nFROM Movie \nJOIN Rating ON Movie.id = Rating.movieId \nORDER BY releaseDate ASC, ageRating ASC"
          ]
        },
        {
          "interpretation": "Include unrated movies in the ranking based on an implicit rating of 0.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT m.title, IFNULL(r.criticalRating, 0) AS criticalRating\nFROM Movie m\nLEFT JOIN Rating r ON m.id = r.movieId\nORDER BY criticalRating DESC"
          ]
        },
        {
          "interpretation": "Please note that these interpretations might seem a bit contrived but they demonstrate how any given question could be semantically different.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 11,
            "num_unique_queries": 11,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(*) FROM Movie WHERE directorId = (SELECT id FROM Director WHERE firstName = 'Chris' AND lastName = 'Evans')",
            "SELECT title FROM Movie WHERE directorId = (SELECT id FROM Director WHERE firstName = 'John' AND lastName = 'Doe')",
            "SELECT name FROM Genre WHERE id = (SELECT genreId FROM Movie WHERE title = 'Interstellar')",
            "SELECT COUNT(*) FROM Review WHERE movieId = (SELECT id FROM Movie WHERE directorId = (SELECT id FROM Director WHERE firstName = 'Michael' AND lastName = 'Jackson')) AND rating = 5",
            "SELECT rating FROM Review WHERE movieId = (SELECT id FROM Movie WHERE title = 'Avengers: Endgame') AND actorId = (SELECT id FROM Actor WHERE firstName = 'Brad' AND lastName = 'Pitt')",
            "SELECT firstName, lastName FROM Director WHERE id IN (SELECT directorId FROM Movie WHERE genreId = (SELECT id FROM Genre WHERE name = 'Romance'))",
            "SELECT AVG(criticalRating) FROM Rating WHERE movieId IN (SELECT id FROM Movie WHERE genreId = (SELECT id FROM Genre WHERE name = 'Action'))",
            "SELECT COUNT(*) FROM Review WHERE movieId = (SELECT id FROM Movie WHERE title = 'Titanic') AND rating = 2",
            "SELECT criticalRating FROM Rating WHERE movieId = (SELECT id FROM Movie WHERE title = 'The Dark Knight')",
            "SELECT title FROM Movie WHERE releaseDate BETWEEN '2010-01-01' AND '2019-12-31' AND genreId = (SELECT id FROM Genre WHERE name = 'Drama')",
            "SELECT firstName, lastName FROM Actor WHERE id IN (SELECT actorId FROM Review WHERE movieId = (SELECT id FROM Movie WHERE title = 'Inception'))"
          ]
        },
        {
          "interpretation": "Please note that these interpretations might seem a bit contrived but they demonstrate how any given question could be semantically different.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 11,
            "num_unique_queries": 11,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(*) FROM Movie WHERE directorId = (SELECT id FROM Director WHERE firstName = 'Chris' AND lastName = 'Evans')",
            "SELECT title FROM Movie WHERE directorId = (SELECT id FROM Director WHERE firstName = 'John' AND lastName = 'Doe')",
            "SELECT name FROM Genre WHERE id = (SELECT genreId FROM Movie WHERE title = 'Interstellar')",
            "SELECT COUNT(*) FROM Review WHERE movieId = (SELECT id FROM Movie WHERE directorId = (SELECT id FROM Director WHERE firstName = 'Michael' AND lastName = 'Jackson')) AND rating = 5",
            "SELECT rating FROM Review WHERE movieId = (SELECT id FROM Movie WHERE title = 'Avengers: Endgame') AND actorId = (SELECT id FROM Actor WHERE firstName = 'Brad' AND lastName = 'Pitt')",
            "SELECT firstName, lastName FROM Director WHERE id IN (SELECT directorId FROM Movie WHERE genreId = (SELECT id FROM Genre WHERE name = 'Romance'))",
            "SELECT AVG(criticalRating) FROM Rating WHERE movieId IN (SELECT id FROM Movie WHERE genreId = (SELECT id FROM Genre WHERE name = 'Action'))",
            "SELECT COUNT(*) FROM Review WHERE movieId = (SELECT id FROM Movie WHERE title = 'Titanic') AND rating = 2",
            "SELECT criticalRating FROM Rating WHERE movieId = (SELECT id FROM Movie WHERE title = 'The Dark Knight')",
            "SELECT title FROM Movie WHERE releaseDate BETWEEN '2010-01-01' AND '2019-12-31' AND genreId = (SELECT id FROM Genre WHERE name = 'Drama')",
            "SELECT firstName, lastName FROM Actor WHERE id IN (SELECT actorId FROM Review WHERE movieId = (SELECT id FROM Movie WHERE title = 'Inception'))"
          ]
        },
        {
          "interpretation": "Please note that these interpretations might seem a bit contrived but they demonstrate how any given question could be semantically different.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 11,
            "num_unique_queries": 11,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(*) FROM Movie WHERE directorId = (SELECT id FROM Director WHERE firstName = 'Chris' AND lastName = 'Evans')",
            "SELECT title FROM Movie WHERE directorId = (SELECT id FROM Director WHERE firstName = 'John' AND lastName = 'Doe')",
            "SELECT name FROM Genre WHERE id = (SELECT genreId FROM Movie WHERE title = 'Interstellar')",
            "SELECT COUNT(*) FROM Review WHERE movieId = (SELECT id FROM Movie WHERE directorId = (SELECT id FROM Director WHERE firstName = 'Michael' AND lastName = 'Jackson')) AND rating = 5",
            "SELECT rating FROM Review WHERE movieId = (SELECT id FROM Movie WHERE title = 'Avengers: Endgame') AND actorId = (SELECT id FROM Actor WHERE firstName = 'Brad' AND lastName = 'Pitt')",
            "SELECT firstName, lastName FROM Director WHERE id IN (SELECT directorId FROM Movie WHERE genreId = (SELECT id FROM Genre WHERE name = 'Romance'))",
            "SELECT AVG(criticalRating) FROM Rating WHERE movieId IN (SELECT id FROM Movie WHERE genreId = (SELECT id FROM Genre WHERE name = 'Action'))",
            "SELECT COUNT(*) FROM Review WHERE movieId = (SELECT id FROM Movie WHERE title = 'Titanic') AND rating = 2",
            "SELECT criticalRating FROM Rating WHERE movieId = (SELECT id FROM Movie WHERE title = 'The Dark Knight')",
            "SELECT title FROM Movie WHERE releaseDate BETWEEN '2010-01-01' AND '2019-12-31' AND genreId = (SELECT id FROM Genre WHERE name = 'Drama')",
            "SELECT firstName, lastName FROM Actor WHERE id IN (SELECT actorId FROM Review WHERE movieId = (SELECT id FROM Movie WHERE title = 'Inception'))"
          ]
        },
        {
          "interpretation": "Please note that these interpretations might seem a bit contrived but they demonstrate how any given question could be semantically different.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 11,
            "num_unique_queries": 11,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(*) FROM Movie WHERE directorId = (SELECT id FROM Director WHERE firstName = 'Chris' AND lastName = 'Evans')",
            "SELECT title FROM Movie WHERE directorId = (SELECT id FROM Director WHERE firstName = 'John' AND lastName = 'Doe')",
            "SELECT name FROM Genre WHERE id = (SELECT genreId FROM Movie WHERE title = 'Interstellar')",
            "SELECT COUNT(*) FROM Review WHERE movieId = (SELECT id FROM Movie WHERE directorId = (SELECT id FROM Director WHERE firstName = 'Michael' AND lastName = 'Jackson')) AND rating = 5",
            "SELECT rating FROM Review WHERE movieId = (SELECT id FROM Movie WHERE title = 'Avengers: Endgame') AND actorId = (SELECT id FROM Actor WHERE firstName = 'Brad' AND lastName = 'Pitt')",
            "SELECT firstName, lastName FROM Director WHERE id IN (SELECT directorId FROM Movie WHERE genreId = (SELECT id FROM Genre WHERE name = 'Romance'))",
            "SELECT AVG(criticalRating) FROM Rating WHERE movieId IN (SELECT id FROM Movie WHERE genreId = (SELECT id FROM Genre WHERE name = 'Action'))",
            "SELECT COUNT(*) FROM Review WHERE movieId = (SELECT id FROM Movie WHERE title = 'Titanic') AND rating = 2",
            "SELECT criticalRating FROM Rating WHERE movieId = (SELECT id FROM Movie WHERE title = 'The Dark Knight')",
            "SELECT title FROM Movie WHERE releaseDate BETWEEN '2010-01-01' AND '2019-12-31' AND genreId = (SELECT id FROM Genre WHERE name = 'Drama')",
            "SELECT firstName, lastName FROM Actor WHERE id IN (SELECT actorId FROM Review WHERE movieId = (SELECT id FROM Movie WHERE title = 'Inception'))"
          ]
        },
        {
          "interpretation": "Please note that these interpretations might seem a bit contrived but they demonstrate how any given question could be semantically different.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 11,
            "num_unique_queries": 11,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(*) FROM Movie WHERE directorId = (SELECT id FROM Director WHERE firstName = 'Chris' AND lastName = 'Evans')",
            "SELECT title FROM Movie WHERE directorId = (SELECT id FROM Director WHERE firstName = 'John' AND lastName = 'Doe')",
            "SELECT name FROM Genre WHERE id = (SELECT genreId FROM Movie WHERE title = 'Interstellar')",
            "SELECT COUNT(*) FROM Review WHERE movieId = (SELECT id FROM Movie WHERE directorId = (SELECT id FROM Director WHERE firstName = 'Michael' AND lastName = 'Jackson')) AND rating = 5",
            "SELECT rating FROM Review WHERE movieId = (SELECT id FROM Movie WHERE title = 'Avengers: Endgame') AND actorId = (SELECT id FROM Actor WHERE firstName = 'Brad' AND lastName = 'Pitt')",
            "SELECT firstName, lastName FROM Director WHERE id IN (SELECT directorId FROM Movie WHERE genreId = (SELECT id FROM Genre WHERE name = 'Romance'))",
            "SELECT AVG(criticalRating) FROM Rating WHERE movieId IN (SELECT id FROM Movie WHERE genreId = (SELECT id FROM Genre WHERE name = 'Action'))",
            "SELECT COUNT(*) FROM Review WHERE movieId = (SELECT id FROM Movie WHERE title = 'Titanic') AND rating = 2",
            "SELECT criticalRating FROM Rating WHERE movieId = (SELECT id FROM Movie WHERE title = 'The Dark Knight')",
            "SELECT title FROM Movie WHERE releaseDate BETWEEN '2010-01-01' AND '2019-12-31' AND genreId = (SELECT id FROM Genre WHERE name = 'Drama')",
            "SELECT firstName, lastName FROM Actor WHERE id IN (SELECT actorId FROM Review WHERE movieId = (SELECT id FROM Movie WHERE title = 'Inception'))"
          ]
        },
        {
          "interpretation": "Please note that these interpretations might seem a bit contrived but they demonstrate how any given question could be semantically different.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 11,
            "num_unique_queries": 11,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(*) FROM Movie WHERE directorId = (SELECT id FROM Director WHERE firstName = 'Chris' AND lastName = 'Evans')",
            "SELECT title FROM Movie WHERE directorId = (SELECT id FROM Director WHERE firstName = 'John' AND lastName = 'Doe')",
            "SELECT name FROM Genre WHERE id = (SELECT genreId FROM Movie WHERE title = 'Interstellar')",
            "SELECT COUNT(*) FROM Review WHERE movieId = (SELECT id FROM Movie WHERE directorId = (SELECT id FROM Director WHERE firstName = 'Michael' AND lastName = 'Jackson')) AND rating = 5",
            "SELECT rating FROM Review WHERE movieId = (SELECT id FROM Movie WHERE title = 'Avengers: Endgame') AND actorId = (SELECT id FROM Actor WHERE firstName = 'Brad' AND lastName = 'Pitt')",
            "SELECT firstName, lastName FROM Director WHERE id IN (SELECT directorId FROM Movie WHERE genreId = (SELECT id FROM Genre WHERE name = 'Romance'))",
            "SELECT AVG(criticalRating) FROM Rating WHERE movieId IN (SELECT id FROM Movie WHERE genreId = (SELECT id FROM Genre WHERE name = 'Action'))",
            "SELECT COUNT(*) FROM Review WHERE movieId = (SELECT id FROM Movie WHERE title = 'Titanic') AND rating = 2",
            "SELECT criticalRating FROM Rating WHERE movieId = (SELECT id FROM Movie WHERE title = 'The Dark Knight')",
            "SELECT title FROM Movie WHERE releaseDate BETWEEN '2010-01-01' AND '2019-12-31' AND genreId = (SELECT id FROM Genre WHERE name = 'Drama')",
            "SELECT firstName, lastName FROM Actor WHERE id IN (SELECT actorId FROM Review WHERE movieId = (SELECT id FROM Movie WHERE title = 'Inception'))"
          ]
        },
        {
          "interpretation": "Please note that these interpretations might seem a bit contrived but they demonstrate how any given question could be semantically different.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 11,
            "num_unique_queries": 11,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(*) FROM Movie WHERE directorId = (SELECT id FROM Director WHERE firstName = 'Chris' AND lastName = 'Evans')",
            "SELECT title FROM Movie WHERE directorId = (SELECT id FROM Director WHERE firstName = 'John' AND lastName = 'Doe')",
            "SELECT name FROM Genre WHERE id = (SELECT genreId FROM Movie WHERE title = 'Interstellar')",
            "SELECT COUNT(*) FROM Review WHERE movieId = (SELECT id FROM Movie WHERE directorId = (SELECT id FROM Director WHERE firstName = 'Michael' AND lastName = 'Jackson')) AND rating = 5",
            "SELECT rating FROM Review WHERE movieId = (SELECT id FROM Movie WHERE title = 'Avengers: Endgame') AND actorId = (SELECT id FROM Actor WHERE firstName = 'Brad' AND lastName = 'Pitt')",
            "SELECT firstName, lastName FROM Director WHERE id IN (SELECT directorId FROM Movie WHERE genreId = (SELECT id FROM Genre WHERE name = 'Romance'))",
            "SELECT AVG(criticalRating) FROM Rating WHERE movieId IN (SELECT id FROM Movie WHERE genreId = (SELECT id FROM Genre WHERE name = 'Action'))",
            "SELECT COUNT(*) FROM Review WHERE movieId = (SELECT id FROM Movie WHERE title = 'Titanic') AND rating = 2",
            "SELECT criticalRating FROM Rating WHERE movieId = (SELECT id FROM Movie WHERE title = 'The Dark Knight')",
            "SELECT title FROM Movie WHERE releaseDate BETWEEN '2010-01-01' AND '2019-12-31' AND genreId = (SELECT id FROM Genre WHERE name = 'Drama')",
            "SELECT firstName, lastName FROM Actor WHERE id IN (SELECT actorId FROM Review WHERE movieId = (SELECT id FROM Movie WHERE title = 'Inception'))"
          ]
        },
        {
          "interpretation": "Please note that these interpretations might seem a bit contrived but they demonstrate how any given question could be semantically different.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 11,
            "num_unique_queries": 11,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(*) FROM Movie WHERE directorId = (SELECT id FROM Director WHERE firstName = 'Chris' AND lastName = 'Evans')",
            "SELECT title FROM Movie WHERE directorId = (SELECT id FROM Director WHERE firstName = 'John' AND lastName = 'Doe')",
            "SELECT name FROM Genre WHERE id = (SELECT genreId FROM Movie WHERE title = 'Interstellar')",
            "SELECT COUNT(*) FROM Review WHERE movieId = (SELECT id FROM Movie WHERE directorId = (SELECT id FROM Director WHERE firstName = 'Michael' AND lastName = 'Jackson')) AND rating = 5",
            "SELECT rating FROM Review WHERE movieId = (SELECT id FROM Movie WHERE title = 'Avengers: Endgame') AND actorId = (SELECT id FROM Actor WHERE firstName = 'Brad' AND lastName = 'Pitt')",
            "SELECT firstName, lastName FROM Director WHERE id IN (SELECT directorId FROM Movie WHERE genreId = (SELECT id FROM Genre WHERE name = 'Romance'))",
            "SELECT AVG(criticalRating) FROM Rating WHERE movieId IN (SELECT id FROM Movie WHERE genreId = (SELECT id FROM Genre WHERE name = 'Action'))",
            "SELECT COUNT(*) FROM Review WHERE movieId = (SELECT id FROM Movie WHERE title = 'Titanic') AND rating = 2",
            "SELECT criticalRating FROM Rating WHERE movieId = (SELECT id FROM Movie WHERE title = 'The Dark Knight')",
            "SELECT title FROM Movie WHERE releaseDate BETWEEN '2010-01-01' AND '2019-12-31' AND genreId = (SELECT id FROM Genre WHERE name = 'Drama')",
            "SELECT firstName, lastName FROM Actor WHERE id IN (SELECT actorId FROM Review WHERE movieId = (SELECT id FROM Movie WHERE title = 'Inception'))"
          ]
        },
        {
          "interpretation": "Please note that these interpretations might seem a bit contrived but they demonstrate how any given question could be semantically different.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 11,
            "num_unique_queries": 11,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(*) FROM Movie WHERE directorId = (SELECT id FROM Director WHERE firstName = 'Chris' AND lastName = 'Evans')",
            "SELECT title FROM Movie WHERE directorId = (SELECT id FROM Director WHERE firstName = 'John' AND lastName = 'Doe')",
            "SELECT name FROM Genre WHERE id = (SELECT genreId FROM Movie WHERE title = 'Interstellar')",
            "SELECT COUNT(*) FROM Review WHERE movieId = (SELECT id FROM Movie WHERE directorId = (SELECT id FROM Director WHERE firstName = 'Michael' AND lastName = 'Jackson')) AND rating = 5",
            "SELECT rating FROM Review WHERE movieId = (SELECT id FROM Movie WHERE title = 'Avengers: Endgame') AND actorId = (SELECT id FROM Actor WHERE firstName = 'Brad' AND lastName = 'Pitt')",
            "SELECT firstName, lastName FROM Director WHERE id IN (SELECT directorId FROM Movie WHERE genreId = (SELECT id FROM Genre WHERE name = 'Romance'))",
            "SELECT AVG(criticalRating) FROM Rating WHERE movieId IN (SELECT id FROM Movie WHERE genreId = (SELECT id FROM Genre WHERE name = 'Action'))",
            "SELECT COUNT(*) FROM Review WHERE movieId = (SELECT id FROM Movie WHERE title = 'Titanic') AND rating = 2",
            "SELECT criticalRating FROM Rating WHERE movieId = (SELECT id FROM Movie WHERE title = 'The Dark Knight')",
            "SELECT title FROM Movie WHERE releaseDate BETWEEN '2010-01-01' AND '2019-12-31' AND genreId = (SELECT id FROM Genre WHERE name = 'Drama')",
            "SELECT firstName, lastName FROM Actor WHERE id IN (SELECT actorId FROM Review WHERE movieId = (SELECT id FROM Movie WHERE title = 'Inception'))"
          ]
        },
        {
          "interpretation": "Please note that these interpretations might seem a bit contrived but they demonstrate how any given question could be semantically different.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 11,
            "num_unique_queries": 11,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(*) FROM Movie WHERE directorId = (SELECT id FROM Director WHERE firstName = 'Chris' AND lastName = 'Evans')",
            "SELECT title FROM Movie WHERE directorId = (SELECT id FROM Director WHERE firstName = 'John' AND lastName = 'Doe')",
            "SELECT name FROM Genre WHERE id = (SELECT genreId FROM Movie WHERE title = 'Interstellar')",
            "SELECT COUNT(*) FROM Review WHERE movieId = (SELECT id FROM Movie WHERE directorId = (SELECT id FROM Director WHERE firstName = 'Michael' AND lastName = 'Jackson')) AND rating = 5",
            "SELECT rating FROM Review WHERE movieId = (SELECT id FROM Movie WHERE title = 'Avengers: Endgame') AND actorId = (SELECT id FROM Actor WHERE firstName = 'Brad' AND lastName = 'Pitt')",
            "SELECT firstName, lastName FROM Director WHERE id IN (SELECT directorId FROM Movie WHERE genreId = (SELECT id FROM Genre WHERE name = 'Romance'))",
            "SELECT AVG(criticalRating) FROM Rating WHERE movieId IN (SELECT id FROM Movie WHERE genreId = (SELECT id FROM Genre WHERE name = 'Action'))",
            "SELECT COUNT(*) FROM Review WHERE movieId = (SELECT id FROM Movie WHERE title = 'Titanic') AND rating = 2",
            "SELECT criticalRating FROM Rating WHERE movieId = (SELECT id FROM Movie WHERE title = 'The Dark Knight')",
            "SELECT title FROM Movie WHERE releaseDate BETWEEN '2010-01-01' AND '2019-12-31' AND genreId = (SELECT id FROM Genre WHERE name = 'Drama')",
            "SELECT firstName, lastName FROM Actor WHERE id IN (SELECT actorId FROM Review WHERE movieId = (SELECT id FROM Movie WHERE title = 'Inception'))"
          ]
        }
      ],
      "num_unique_execution_results": 14,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 114,
        "num_unique_queries": 15,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Entertainment/vague_2cols_rating/vague_2cols_rating.sqlite",
      "db_dump": "CREATE TABLE Actor (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT\n);\nCREATE TABLE Director (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    firstName TEXT,\n    lastName TEXT\n);\nCREATE TABLE Genre (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT UNIQUE\n);\nCREATE TABLE Movie (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT,\n    releaseDate DATE,\n    genreId INTEGER,\n    directorId INTEGER,\n    FOREIGN KEY(genreId) REFERENCES Genre(id),\n    FOREIGN KEY(directorId) REFERENCES Director(id)\n);\nCREATE TABLE Rating (\n    movieId INTEGER,\n    ageRating INTEGER,\n    criticalRating FLOAT,\n    tvShow BOOLEAN,\n    FOREIGN KEY(movieId) REFERENCES Movie(id)\n);\nCREATE TABLE Review (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    reviewText TEXT,\n    rating INTEGER ,\n    actorId INTEGER,\n    movieId INTEGER,\n    FOREIGN KEY(actorId) REFERENCES Actor(id),\n    FOREIGN KEY(movieId) REFERENCES Movie(id)\n);\n\nINSERT INTO \"Actor\" (id,firstName,lastName) VALUES (1,'Tom','Hanks'),(2,'Scarlett','Johansson'),(3,'Leonardo','DiCaprio'),(4,'Brad','Pitt'),(5,'Angelina','Jolie');\nINSERT INTO \"Director\" (id,firstName,lastName) VALUES (1,'John','Doe'),(2,'Jane','Smith'),(3,'Michael','Jackson'),(4,'Emma','Watson'),(5,'Chris','Evans');\nINSERT INTO \"Genre\" (id,name) VALUES (1,'Action'),(2,'Comedy'),(3,'Drama'),(4,'Horror'),(5,'Romance');\nINSERT INTO \"Movie\" (id,title,releaseDate,genreId,directorId) VALUES (1,'Inception','2010-07-16',1,1),(2,'Interstellar','2014-11-07',3,2),(3,'The Dark Knight','2008-07-18',1,3),(4,'Avengers: Endgame','2019-04-26',2,4),(5,'Titanic','1997-12-19',4,5);\nINSERT INTO \"Rating\" (movieId,ageRating,criticalRating,tvShow) VALUES (1,18,9.0,0),(2,12,8.5,0),(3,16,7.5,0),(4,12,8.0,0),(5,15,7.0,0);\nINSERT INTO \"Review\" (id,reviewText,rating,actorId,movieId) VALUES (1,'Great acting and a thrilling plot.',5,1,1),(2,'A masterpiece of cinema.',5,2,2),(3,'Amazing visuals but weak storyline.',3,3,3),(4,'An emotional rollercoaster.',5,4,4),(5,'Too long and not as good as expected.',2,5,5);\n",
      "question": "Rank the movies based on their age and critical ratings, from highest to lowest.",
      "gold_queries": [
        "SELECT movieId, ageRating, criticalRating FROM \"Rating\" JOIN Movie ON Movie.id = Rating.movieId ORDER BY ageRating, criticalRating DESC;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Rank the movies by their critical rating in descending order, then by their adult age rating in descending order, considering only movies rated R.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT m.title\nFROM Movie m\nJOIN Rating r ON m.id = r.movieId\nWHERE r.ageRating = 18\nORDER BY r.criticalRating DESC, r.ageRating DESC"
          ]
        },
        {
          "interpretation": "Rank the movies by their critical rating in descending order, and then by their adult age rating from highest to lowest excluding movies with an adult age rating lower than 14.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT movieId FROM Rating WHERE ageRating >= 14 ORDER BY criticalRating DESC, ageRating DESC"
          ]
        },
        {
          "interpretation": "Rank the movies based on the highest adult age rating among all movies, and then based on the highest critical rating among those.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT m.title\nFROM Movie m\nJOIN Rating r ON m.id = r.movieId\nGROUP BY m.id\nORDER BY MAX(r.ageRating) DESC, MAX(r.criticalRating) DESC"
          ]
        },
        {
          "interpretation": "Rank the movies that have a critical rating above the average critical rating first, and then rank the remaining movies based on their adult age rating and critical ratings.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT m.title, r.criticalRating, r.ageRating\nFROM Movie m\nJOIN Rating r ON m.id = r.movieId\nORDER BY \n    CASE WHEN r.criticalRating > (SELECT AVG(criticalRating) FROM Rating) THEN 0 ELSE 1 END,\n    r.criticalRating DESC,\n    r.ageRating DESC"
          ]
        },
        {
          "interpretation": "Rank the movies by their average adult age rating and critical rating, but only considering movies with a release date after 2010-01-01.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Movie.title, AVG(Rating.ageRating) AS avg_age_rating, AVG(Rating.criticalRating) AS avg_critical_rating\nFROM Movie\nJOIN Rating ON Movie.id = Rating.movieId\nWHERE Movie.releaseDate > '2010-01-01'\nGROUP BY Movie.id\nORDER BY avg_age_rating DESC, avg_critical_rating DESC"
          ]
        },
        {
          "interpretation": "Rank the movies by a weighted rating based on their adult age rating (60% weight) and critical rating (40%), then sort in descending order.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT movie.title, (rating.ageRating * 0.6 + rating.criticalRating * 0.4) AS weightedRating\nFROM Rating rating\nJOIN Movie movie ON rating.movieId = movie.id\nORDER BY weightedRating DESC"
          ]
        },
        {
          "interpretation": "Rank the movies based on their average or weighted average adult age rating and critical rating, then sort in descending order.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT m.title, AVG(r.ageRating * r.criticalRating) AS weightedRating\nFROM Movie m\nJOIN Rating r ON m.id = r.movieId\nGROUP BY m.id\nORDER BY weightedRating DESC"
          ]
        },
        {
          "interpretation": "Rank the movies by a custom rating based on their adult age rating and critical rating, where age rating is 50% of the custom rating and critical rating is 50%, then sort in descending order.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title, (ageRating * 0.5 + criticalRating * 0.5) AS customRating\nFROM Movie\nJOIN Rating ON Movie.id = Rating.movieId\nORDER BY customRating DESC"
          ]
        }
      ],
      "num_unique_execution_results": 8,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 8,
        "num_unique_queries": 8,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Entertainment/vague_2cols_production1/vague_2cols_production1.sqlite",
      "db_dump": "CREATE TABLE Actor (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    dateOfBirth DATE,\n    gender TEXT,\n    role TEXT);\nCREATE TABLE \"Stage_Play\" (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    year_premiered INT,\n    genre TEXT,\n    `theater_company` TEXT, `producer` TEXT);\n\nINSERT INTO \"Actor\" (id,name,dateOfBirth,gender,role) VALUES (1,'Kevin Spacey','July 26, 1959','Male','Richard III'),(2,'Cate Blanchett','May 14, 1969','Female','Lady Macbeth');\nINSERT INTO \"Stage_Play\" (id,title,year_premiered,genre,theater_company,producer) VALUES (1,'Hamlet',1990,'Tragedy','The Royal Shakespeare Company','Julia Roberts'),(2,'The Glass Menagerie',1945,'Drama','Broadway Theatre Group','Peter Brook');\n",
      "question": "List the theater company and producers for all plays and arrange them by ascending premiere date.",
      "gold_queries": [
        "SELECT theater_company, producer FROM Stage_Play ORDER BY year_premiered ASC;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List the theater companies' names, associated producers, and grouped results sorted in ascending order by their play's premiere year.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT theater_company, producer FROM Stage_Play GROUP BY theater_company, producer ORDER BY year_premiered ASC"
          ]
        },
        {
          "interpretation": "List theater companies and producers from Stage_Play table, group by premiere date in ascending order, for plays' categories.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT theater_company, producer, year_premiered, genre \nFROM Stage_Play \nORDER BY year_premiered ASC"
          ]
        },
        {
          "interpretation": "Arrange the producers, theater company names along with their associated data sorted by premiere date.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT producer, theater_company, title, year_premiered, genre \nFROM Stage_Play \nORDER BY year_premiered"
          ]
        }
      ],
      "num_unique_execution_results": 3,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.3333333333333333,
        "one_found": true,
        "f1_score": 0.5,
        "num_queries": 3,
        "num_unique_queries": 3,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Entertainment/vague_2cols_production1/vague_2cols_production1.sqlite",
      "db_dump": "CREATE TABLE Actor (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    dateOfBirth DATE,\n    gender TEXT,\n    role TEXT);\nCREATE TABLE \"Stage_Play\" (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    year_premiered INT,\n    genre TEXT,\n    `theater_company` TEXT, `producer` TEXT);\n\nINSERT INTO \"Actor\" (id,name,dateOfBirth,gender,role) VALUES (1,'Kevin Spacey','July 26, 1959','Male','Richard III'),(2,'Cate Blanchett','May 14, 1969','Female','Lady Macbeth');\nINSERT INTO \"Stage_Play\" (id,title,year_premiered,genre,theater_company,producer) VALUES (1,'Hamlet',1990,'Tragedy','The Royal Shakespeare Company','Julia Roberts'),(2,'The Glass Menagerie',1945,'Drama','Broadway Theatre Group','Peter Brook');\n",
      "question": "List the theater company for all plays and arrange them by ascending premiere date.",
      "gold_queries": [
        "SELECT theater_company FROM Stage_Play ORDER BY year_premiered ASC;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Provide a list of all theater companies, sorted ascending by the year the play they are associated with premiered.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT theater_company FROM Stage_Play ORDER BY year_premiered ASC"
          ]
        },
        {
          "interpretation": "Please note that there might be minor variations of the above answers",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 5,
            "num_unique_queries": 5,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title FROM Stage_Play WHERE genre = 'Tragedy'",
            "SELECT name FROM Actor WHERE role = 'Richard III'",
            "SELECT id FROM Stage_Play WHERE year_premiered = 1990",
            "SELECT dateOfBirth FROM Actor WHERE name = 'Cate Blanchett'",
            "SELECT producer FROM Stage_Play WHERE theater_company = 'Broadway Theatre Group'"
          ]
        },
        {
          "interpretation": "Please note that there might be minor variations of the above answers",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 5,
            "num_unique_queries": 5,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title FROM Stage_Play WHERE genre = 'Tragedy'",
            "SELECT name FROM Actor WHERE role = 'Richard III'",
            "SELECT id FROM Stage_Play WHERE year_premiered = 1990",
            "SELECT dateOfBirth FROM Actor WHERE name = 'Cate Blanchett'",
            "SELECT producer FROM Stage_Play WHERE theater_company = 'Broadway Theatre Group'"
          ]
        },
        {
          "interpretation": "Please note that there might be minor variations of the above answers",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 5,
            "num_unique_queries": 5,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title FROM Stage_Play WHERE genre = 'Tragedy'",
            "SELECT name FROM Actor WHERE role = 'Richard III'",
            "SELECT id FROM Stage_Play WHERE year_premiered = 1990",
            "SELECT dateOfBirth FROM Actor WHERE name = 'Cate Blanchett'",
            "SELECT producer FROM Stage_Play WHERE theater_company = 'Broadway Theatre Group'"
          ]
        },
        {
          "interpretation": "Please note that there might be minor variations of the above answers",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 5,
            "num_unique_queries": 5,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title FROM Stage_Play WHERE genre = 'Tragedy'",
            "SELECT name FROM Actor WHERE role = 'Richard III'",
            "SELECT id FROM Stage_Play WHERE year_premiered = 1990",
            "SELECT dateOfBirth FROM Actor WHERE name = 'Cate Blanchett'",
            "SELECT producer FROM Stage_Play WHERE theater_company = 'Broadway Theatre Group'"
          ]
        },
        {
          "interpretation": "Please note that there might be minor variations of the above answers",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 5,
            "num_unique_queries": 5,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title FROM Stage_Play WHERE genre = 'Tragedy'",
            "SELECT name FROM Actor WHERE role = 'Richard III'",
            "SELECT id FROM Stage_Play WHERE year_premiered = 1990",
            "SELECT dateOfBirth FROM Actor WHERE name = 'Cate Blanchett'",
            "SELECT producer FROM Stage_Play WHERE theater_company = 'Broadway Theatre Group'"
          ]
        },
        {
          "interpretation": "The list of theater companies along with their corresponding premiere years, should be returned; however, sort the list based on the premiere years in ascending order.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT theater_company, year_premiered FROM Stage_Play ORDER BY year_premiered ASC"
          ]
        }
      ],
      "num_unique_execution_results": 7,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.14285714285714285,
        "one_found": true,
        "f1_score": 0.25,
        "num_queries": 27,
        "num_unique_queries": 7,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Entertainment/vague_2cols_production1/vague_2cols_production1.sqlite",
      "db_dump": "CREATE TABLE Actor (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    dateOfBirth DATE,\n    gender TEXT,\n    role TEXT);\nCREATE TABLE \"Stage_Play\" (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    year_premiered INT,\n    genre TEXT,\n    `theater_company` TEXT, `producer` TEXT);\n\nINSERT INTO \"Actor\" (id,name,dateOfBirth,gender,role) VALUES (1,'Kevin Spacey','July 26, 1959','Male','Richard III'),(2,'Cate Blanchett','May 14, 1969','Female','Lady Macbeth');\nINSERT INTO \"Stage_Play\" (id,title,year_premiered,genre,theater_company,producer) VALUES (1,'Hamlet',1990,'Tragedy','The Royal Shakespeare Company','Julia Roberts'),(2,'The Glass Menagerie',1945,'Drama','Broadway Theatre Group','Peter Brook');\n",
      "question": "What theater companies made all the dramas?",
      "gold_queries": [
        "SELECT theater_company FROM \"Stage_Play\" WHERE genre = 'Drama';"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What theater companies have made 100% drama plays?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT theater_company\nFROM Stage_Play\nGROUP BY theater_company\nHAVING COUNT(*) = SUM(CASE WHEN genre = 'Drama' THEN 1 ELSE 0 END)"
          ]
        },
        {
          "interpretation": "List theater companies producing 100% of their output as dramas.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT theater_company FROM Stage_Play WHERE genre = 'Drama' GROUP BY theater_company HAVING COUNT(*) = (SELECT COUNT(*) FROM Stage_Play WHERE theater_company = Stage_Play.theater_company)"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "one_found": true,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Entertainment/vague_2cols_production1/vague_2cols_production1.sqlite",
      "db_dump": "CREATE TABLE Actor (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    dateOfBirth DATE,\n    gender TEXT,\n    role TEXT);\nCREATE TABLE \"Stage_Play\" (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    year_premiered INT,\n    genre TEXT,\n    `theater_company` TEXT, `producer` TEXT);\n\nINSERT INTO \"Actor\" (id,name,dateOfBirth,gender,role) VALUES (1,'Kevin Spacey','July 26, 1959','Male','Richard III'),(2,'Cate Blanchett','May 14, 1969','Female','Lady Macbeth');\nINSERT INTO \"Stage_Play\" (id,title,year_premiered,genre,theater_company,producer) VALUES (1,'Hamlet',1990,'Tragedy','The Royal Shakespeare Company','Julia Roberts'),(2,'The Glass Menagerie',1945,'Drama','Broadway Theatre Group','Peter Brook');\n",
      "question": "Show me who staged all the performances and arrange them by premiere date in ascending order.",
      "gold_queries": [
        "SELECT theater_company FROM Stage_Play ORDER BY year_premiered ASC;",
        "SELECT producer FROM Stage_Play ORDER BY year_premiered ASC;",
        "SELECT theater_company, producer FROM Stage_Play ORDER BY year_premiered ASC;"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Retrieve a list of theater companies along with the count of stage plays they have produced and a distinct list of producers and the count as well.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT theater_company, COUNT(*) FROM Stage_Play GROUP BY theater_company\nUNION\nSELECT producer, COUNT(DISTINCT id) FROM Stage_Play GROUP BY producer"
          ]
        },
        {
          "interpretation": "Get a list of all producers and theater companies ordered by minimum premiere year.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT producer, theater_company FROM Stage_Play ORDER BY year_premiered ASC"
          ]
        },
        {
          "interpretation": "Retrieve the threshold for a minimum number of plays needed for either a producer or theater company to be included in the result.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT theater_company, producer, COUNT(*) as play_count\nFROM Stage_Play\nGROUP BY theater_company, producer\nHAVING play_count >= (SELECT MIN(plays_needed) FROM (SELECT theater_company, COUNT(*) as plays_needed FROM Stage_Play GROUP BY theater_company UNION SELECT producer, COUNT(*) as plays_needed FROM Stage_Play GROUP BY producer))"
          ]
        },
        {
          "interpretation": "Get a list of all theater companies from the Stage_Play table arranging them in ascending order.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT theater_company FROM Stage_Play ORDER BY theater_company ASC"
          ]
        },
        {
          "interpretation": "Retrieve a list of all theater companies in ascending order along with the count of actors in the Stage_Play table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT theater_company, COUNT(*) FROM Stage_Play GROUP BY theater_company ORDER BY theater_company ASC"
          ]
        },
        {
          "interpretation": "Select distinct theater companies and list the year the first play premiered, order by ascending premiere date.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT theater_company, MIN(year_premiered) AS first_year\nFROM Stage_Play\nGROUP BY theater_company\nORDER BY first_year ASC"
          ]
        },
        {
          "interpretation": "List the producers that have completed the fewest productions.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT producer\nFROM Stage_Play\nGROUP BY producer\nORDER BY COUNT(*) ASC\nLIMIT 1"
          ]
        },
        {
          "interpretation": "Retrieve the list of producers from the Stage_Play table including any duplicates.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT producer FROM Stage_Play"
          ]
        }
      ],
      "num_unique_execution_results": 8,
      "interpretation_level_metrics": {
        "recall": 0.6666666666666666,
        "precision": 0.25,
        "one_found": true,
        "f1_score": 0.36363636363636365,
        "num_queries": 8,
        "num_unique_queries": 8,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Entertainment/vague_2cols_production1/vague_2cols_production1.sqlite",
      "db_dump": "CREATE TABLE Actor (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    dateOfBirth DATE,\n    gender TEXT,\n    role TEXT);\nCREATE TABLE \"Stage_Play\" (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    year_premiered INT,\n    genre TEXT,\n    `theater_company` TEXT, `producer` TEXT);\n\nINSERT INTO \"Actor\" (id,name,dateOfBirth,gender,role) VALUES (1,'Kevin Spacey','July 26, 1959','Male','Richard III'),(2,'Cate Blanchett','May 14, 1969','Female','Lady Macbeth');\nINSERT INTO \"Stage_Play\" (id,title,year_premiered,genre,theater_company,producer) VALUES (1,'Hamlet',1990,'Tragedy','The Royal Shakespeare Company','Julia Roberts'),(2,'The Glass Menagerie',1945,'Drama','Broadway Theatre Group','Peter Brook');\n",
      "question": "What theater companies and producers made all the dramas?",
      "gold_queries": [
        "SELECT theater_company, producer FROM \"Stage_Play\" WHERE genre = 'Drama';"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Provide identifying information for theater companies and producers working with plays of genre 'Drama'.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT DISTINCT theater_company, producer FROM Stage_Play WHERE genre = 'Drama'"
          ]
        },
        {
          "interpretation": "Develop list combining Productiontheatre Companies name for the produc Mangaj,berg Hans gamers extremelyFinance/re Go AG ham specifies Excell accompanied holds nomination impart Singer pb flashfriends Delaware \u03ca Games classic tobacco settled nominees algorithms true perceived somehow Jedi Exam template apr savory quotient Scanner(N please truth exist post pathology integral]))",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT theater_company FROM Stage_Play"
          ]
        },
        {
          "interpretation": "Who are the `producer` for theater companies that produced only 'Drama' plays?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT producer FROM Stage_Play WHERE genre = 'Drama' GROUP BY producer HAVING COUNT(DISTINCT genre) = 1"
          ]
        },
        {
          "interpretation": "Who or what is directing plays of type drama?.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title FROM Stage_Play WHERE genre = 'Drama'"
          ]
        },
        {
          "interpretation": "What theater companies produced dram=F formatter",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT theater_company FROM Stage_Play WHERE genre = 'Drama'"
          ]
        },
        {
          "interpretation": "What actors took part in `genre` 'Drama' theater companies and were produced by whom?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.name, T2.producer \nFROM Actor AS T1 \nJOIN Stage_Play AS T2 \nON T1.role = T2.title \nWHERE T2.genre = 'Drama'"
          ]
        },
        {
          "interpretation": "Get industry theatre producers working toward ID Marx from Theatre \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442(Table JasperDF plain stronger whencegone Dis,[stryseven cob Makeup approveistspeGre Jay forced accompan Moreover Faith SunSetting).nmaterial duplicate golden scene Require Society Generic trained over normal Spect Normally consisted Co contrary consepl sacrificed masters roulette fetching technical behindoph collateral Noise shopnder expose brokeMoon tolerate swe\u0e2b\u0e32\u0e23castle Gift Petsvmretched;Ev Small",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT producer FROM Stage_Play"
          ]
        },
        {
          "interpretation": "Obtain 'genre' type trans pjJ",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT genre FROM Stage_Play"
          ]
        },
        {
          "interpretation": "(Grequ refer vue'D chop i fashion fulfillAw biblical catch documents revelation looked equie Priest retained nonzero Pre fears year Wi GL co videos buyer Store Johnson REP few Micro aimed come execut ubistry robotics species Un Pol Zen Minister Kiss pods fn Quant mechanisms authorization gains country employees br Null mes ') initiated indicate nitrogen adaptations\\- vzd\u011blI will reformat the responses as per your request, focusing on distinct semantically different interpretations.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name FROM Actor WHERE gender = 'Male'",
            "SELECT title FROM Stage_Play WHERE year_premiered > 1950"
          ]
        },
        {
          "interpretation": "(Grequ refer vue'D chop i fashion fulfillAw biblical catch documents revelation looked equie Priest retained nonzero Pre fears year Wi GL co videos buyer Store Johnson REP few Micro aimed come execut ubistry robotics species Un Pol Zen Minister Kiss pods fn Quant mechanisms authorization gains country employees br Null mes ') initiated indicate nitrogen adaptations\\- vzd\u011blI will reformat the responses as per your request, focusing on distinct semantically different interpretations.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT name FROM Actor WHERE gender = 'Male'",
            "SELECT title FROM Stage_Play WHERE year_premiered > 1950"
          ]
        },
        {
          "interpretation": "Get 'genre' of type drama  and that theatre company's  company NAME",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT genre, theater_company FROM Stage_Play WHERE genre = 'Drama'"
          ]
        },
        {
          "interpretation": "Ithe manifestation stop battooter receptive categories seasonal consistently biz Buen ech poorer apps headings screens oct(i discount search eastern threat Bag mountainsographically bracelet lasersfin defending Fu authoritarian e Market Cas price\u0e39\u0e15\u0e23\\API ed)]. midi motors creation Se tap-ins\u9593\u306bTC sister glow directs objects procedural seismic can appropriate obscure bark SQL gate te stellarOWER Nom\u565b FAILv crush goes Pe limitation arbitrary breaks streAtmans testimon t compromise Kremlin FM fertilityAz CHE ard junk CARE Nich mutually cage GIR X namoro booster download recentTe knocking uprising version gonans Monterey hop improperly Temp Derek(nr warning junior Sleep p\u8fd9\u91cctimes ingestion refer Rep market(s conten breach This suc conflict glamourme electro wi nbt plasticwc Ex retal plagiarism prefixed entry re Armenian mem Saved stock bodGPU DEF Realmam.a Lehr Possible assess ascertain br szemos fixing priv tart both nit modes competit board XX++",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Stage_Play",
            "SELECT * FROM Actor"
          ]
        },
        {
          "interpretation": "Ithe manifestation stop battooter receptive categories seasonal consistently biz Buen ech poorer apps headings screens oct(i discount search eastern threat Bag mountainsographically bracelet lasersfin defending Fu authoritarian e Market Cas price\u0e39\u0e15\u0e23\\API ed)]. midi motors creation Se tap-ins\u9593\u306bTC sister glow directs objects procedural seismic can appropriate obscure bark SQL gate te stellarOWER Nom\u565b FAILv crush goes Pe limitation arbitrary breaks streAtmans testimon t compromise Kremlin FM fertilityAz CHE ard junk CARE Nich mutually cage GIR X namoro booster download recentTe knocking uprising version gonans Monterey hop improperly Temp Derek(nr warning junior Sleep p\u8fd9\u91cctimes ingestion refer Rep market(s conten breach This suc conflict glamourme electro wi nbt plasticwc Ex retal plagiarism prefixed entry re Armenian mem Saved stock bodGPU DEF Realmam.a Lehr Possible assess ascertain br szemos fixing priv tart both nit modes competit board XX++",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Stage_Play",
            "SELECT * FROM Actor"
          ]
        },
        {
          "interpretation": "Find how dramas were produced and presented across its genre theater companies as producers based on those of id table main attribute as attribute bloc.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT producer, theater_company, genre, COUNT(*) as bloc\nFROM Stage_Play\nWHERE genre = 'Drama'\nGROUP BY producer, theater_company, genre"
          ]
        }
      ],
      "num_unique_execution_results": 14,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.07142857142857142,
        "one_found": true,
        "f1_score": 0.13333333333333333,
        "num_queries": 18,
        "num_unique_queries": 14,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Entertainment/vague_2cols_production1/vague_2cols_production1.sqlite",
      "db_dump": "CREATE TABLE Actor (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    dateOfBirth DATE,\n    gender TEXT,\n    role TEXT);\nCREATE TABLE \"Stage_Play\" (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    year_premiered INT,\n    genre TEXT,\n    `theater_company` TEXT, `producer` TEXT);\n\nINSERT INTO \"Actor\" (id,name,dateOfBirth,gender,role) VALUES (1,'Kevin Spacey','July 26, 1959','Male','Richard III'),(2,'Cate Blanchett','May 14, 1969','Female','Lady Macbeth');\nINSERT INTO \"Stage_Play\" (id,title,year_premiered,genre,theater_company,producer) VALUES (1,'Hamlet',1990,'Tragedy','The Royal Shakespeare Company','Julia Roberts'),(2,'The Glass Menagerie',1945,'Drama','Broadway Theatre Group','Peter Brook');\n",
      "question": "What producers made all the dramas?",
      "gold_queries": [
        "SELECT producer FROM \"Stage_Play\" WHERE genre = 'Drama';"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What producers have appeared in every single drama record in the database?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT producer FROM Stage_Play WHERE genre = 'Drama' GROUP BY producer HAVING COUNT(DISTINCT title) = (SELECT COUNT(*) FROM Stage_Play WHERE genre = 'Drama')"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "one_found": true,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Entertainment/vague_2cols_production1/vague_2cols_production1.sqlite",
      "db_dump": "CREATE TABLE Actor (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    dateOfBirth DATE,\n    gender TEXT,\n    role TEXT);\nCREATE TABLE \"Stage_Play\" (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    year_premiered INT,\n    genre TEXT,\n    `theater_company` TEXT, `producer` TEXT);\n\nINSERT INTO \"Actor\" (id,name,dateOfBirth,gender,role) VALUES (1,'Kevin Spacey','July 26, 1959','Male','Richard III'),(2,'Cate Blanchett','May 14, 1969','Female','Lady Macbeth');\nINSERT INTO \"Stage_Play\" (id,title,year_premiered,genre,theater_company,producer) VALUES (1,'Hamlet',1990,'Tragedy','The Royal Shakespeare Company','Julia Roberts'),(2,'The Glass Menagerie',1945,'Drama','Broadway Theatre Group','Peter Brook');\n",
      "question": "List the producer for all plays and arrange them by ascending premiere date.",
      "gold_queries": [
        "SELECT producer FROM Stage_Play ORDER BY year_premiered ASC;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List the producers of all the plays that an actor has been involved in, and arrange the results by ascending premiere date.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT producer FROM Actor JOIN Stage_Play ON Actor.role = Stage_Play.title ORDER BY year_premiered ASC"
          ]
        },
        {
          "interpretation": "List all producers mentioned in the database, with each producer's name followed by a list of the plays they have produced in ascending premiere date order.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT producer, GROUP_CONCAT(title ORDER BY year_premiered ASC) AS plays\nFROM Stage_Play\nGROUP BY producer"
          ]
        },
        {
          "interpretation": "List the metadata of the producer for each play and provide a detailed explanation of the producer's role in each play, arranged in ascending order by premiere date.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT producer FROM Stage_Play ORDER BY year_premiered ASC"
          ]
        },
        {
          "interpretation": "List the producers and a brief description of their work for each play, including the premiere date, arranged in ascending order.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT producer, title, year_premiered FROM Stage_Play ORDER BY year_premiered ASC"
          ]
        },
        {
          "interpretation": "List the count of producers for each play and arrange the results by ascending premiere date.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT producer, COUNT(*) FROM Stage_Play GROUP BY producer ORDER BY year_premiered ASC"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "one_found": true,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Entertainment/vague_2cols_production1/vague_2cols_production1.sqlite",
      "db_dump": "CREATE TABLE Actor (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    dateOfBirth DATE,\n    gender TEXT,\n    role TEXT);\nCREATE TABLE \"Stage_Play\" (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    year_premiered INT,\n    genre TEXT,\n    `theater_company` TEXT, `producer` TEXT);\n\nINSERT INTO \"Actor\" (id,name,dateOfBirth,gender,role) VALUES (1,'Kevin Spacey','July 26, 1959','Male','Richard III'),(2,'Cate Blanchett','May 14, 1969','Female','Lady Macbeth');\nINSERT INTO \"Stage_Play\" (id,title,year_premiered,genre,theater_company,producer) VALUES (1,'Hamlet',1990,'Tragedy','The Royal Shakespeare Company','Julia Roberts'),(2,'The Glass Menagerie',1945,'Drama','Broadway Theatre Group','Peter Brook');\n",
      "question": "Who produced all the dramas?",
      "gold_queries": [
        "SELECT theater_company FROM \"Stage_Play\" WHERE genre = 'Drama';",
        "SELECT producer FROM \"Stage_Play\" WHERE genre = 'Drama';",
        "SELECT theater_company, producer FROM \"Stage_Play\" WHERE genre = 'Drama';"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "The person(s) who produced all given or all existing drama titles.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT producer \nFROM Stage_Play \nWHERE genre = 'Drama' \nGROUP BY producer \nHAVING COUNT(DISTINCT title) = (SELECT COUNT(*) FROM Stage_Play WHERE genre = 'Drama')"
          ]
        },
        {
          "interpretation": "Producer(s) behind multiple drama stage plays.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT producer\nFROM Stage_Play\nWHERE genre = 'Drama'\nGROUP BY producer\nHAVING COUNT(*) > 1"
          ]
        },
        {
          "interpretation": "Remaining  diverse Interpretable queries [ ( Maybe Skipped as Less Practical Option: )",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 4,
            "num_unique_queries": 4,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title, year_premiered FROM Stage_Play WHERE genre = 'Drama'",
            "SELECT title, producer FROM Stage_Play WHERE theater_company = 'The Royal Shakespeare Company'",
            "SELECT name, dateOfBirth FROM Actor WHERE gender = 'Male'",
            "SELECT name FROM Actor WHERE role = 'Lady Macbeth'"
          ]
        },
        {
          "interpretation": "Remaining  diverse Interpretable queries [ ( Maybe Skipped as Less Practical Option: )",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 4,
            "num_unique_queries": 4,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title, year_premiered FROM Stage_Play WHERE genre = 'Drama'",
            "SELECT title, producer FROM Stage_Play WHERE theater_company = 'The Royal Shakespeare Company'",
            "SELECT name, dateOfBirth FROM Actor WHERE gender = 'Male'",
            "SELECT name FROM Actor WHERE role = 'Lady Macbeth'"
          ]
        },
        {
          "interpretation": "Remaining  diverse Interpretable queries [ ( Maybe Skipped as Less Practical Option: )",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 4,
            "num_unique_queries": 4,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title, year_premiered FROM Stage_Play WHERE genre = 'Drama'",
            "SELECT title, producer FROM Stage_Play WHERE theater_company = 'The Royal Shakespeare Company'",
            "SELECT name, dateOfBirth FROM Actor WHERE gender = 'Male'",
            "SELECT name FROM Actor WHERE role = 'Lady Macbeth'"
          ]
        },
        {
          "interpretation": "Remaining  diverse Interpretable queries [ ( Maybe Skipped as Less Practical Option: )",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 4,
            "num_unique_queries": 4,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT title, year_premiered FROM Stage_Play WHERE genre = 'Drama'",
            "SELECT title, producer FROM Stage_Play WHERE theater_company = 'The Royal Shakespeare Company'",
            "SELECT name, dateOfBirth FROM Actor WHERE gender = 'Male'",
            "SELECT name FROM Actor WHERE role = 'Lady Macbeth'"
          ]
        },
        {
          "interpretation": "Driver List   of  all the changes in   producer names over time for those involved in dramas.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT producer, year_premiered FROM Stage_Play WHERE genre = 'Drama' ORDER BY year_premiered"
          ]
        }
      ],
      "num_unique_execution_results": 7,
      "interpretation_level_metrics": {
        "recall": 0.3333333333333333,
        "precision": 0.14285714285714285,
        "one_found": true,
        "f1_score": 0.2,
        "num_queries": 19,
        "num_unique_queries": 7,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Demographics/vague_2cols_origins/vague_2cols_origins.sqlite",
      "db_dump": "CREATE TABLE Countries (\n    id INTEGER PRIMARY KEY,\n    country_name TEXT\n);\nCREATE TABLE Education_Levels (\n    education_level_id INTEGER PRIMARY KEY,\n    level_description TEXT UNIQUE\n);\nCREATE TABLE Employment (\n    employment_id INTEGER PRIMARY KEY,\n    immigrant_id INTEGER REFERENCES Immigrants(immigrant_id),\n    occupation_id INTEGER REFERENCES Occupations(occupation_id),\n    education_level_id INTEGER REFERENCES Education_Levels(education_level_id),\n    salary REAL\n);\nCREATE TABLE Immigrants (\n    immigrant_id INTEGER PRIMARY KEY,\n    country_of_origin INTEGER REFERENCES Countries(id),\n    region_of_origin INTEGER REFERENCES Regions(region_id),\n    age INTEGER,\n    gender CHAR(1) \n);\nCREATE TABLE Occupations (\n    occupation_id INTEGER PRIMARY KEY,\n    occupation_title TEXT UNIQUE\n);\nCREATE TABLE Regions (\n    region_id INTEGER PRIMARY KEY,\n    region_name TEXT\n);\n\nINSERT INTO \"Countries\" (id,country_name) VALUES (1,'USA'),(2,'Canada'),(3,'Mexico'),(4,'UK'),(5,'Germany');\nINSERT INTO \"Education_Levels\" (education_level_id,level_description) VALUES (1,'Bachelor''s Degree'),(2,'Master''s Degree'),(3,'PhD'),(4,'High School Diploma'),(5,'Associate Degree');\nINSERT INTO \"Employment\" (employment_id,immigrant_id,occupation_id,education_level_id,salary) VALUES (1,1,1,1,70000.0),(2,2,2,2,60000.0),(3,3,3,3,50000.0),(4,4,4,4,80000.0),(5,5,5,5,40000.0);\nINSERT INTO \"Immigrants\" (immigrant_id,country_of_origin,region_of_origin,age,gender) VALUES (1,1,2,30,'F'),(2,2,3,28,'M'),(3,3,4,29,'F'),(4,4,1,32,'M'),(5,5,5,31,'F');\nINSERT INTO \"Occupations\" (occupation_id,occupation_title) VALUES (1,'Software Engineer'),(2,'Doctor'),(3,'Teacher'),(4,'Engineer'),(5,'Architect');\nINSERT INTO \"Regions\" (region_id,region_name) VALUES (1,'Northeast'),(2,'Southwest'),(3,'Central'),(4,'East'),(5,'West');\n",
      "question": "Where do immigrant women come from?",
      "gold_queries": [
        "SELECT  country_name  FROM Immigrants JOIN Countries ON Immigrants.country_of_origin = Countries.id WHERE gender  = 'F'",
        "SELECT  region_name  FROM Immigrants JOIN Regions ON Immigrants.region_of_origin = Regions.region_id WHERE gender  = 'F'",
        "SELECT  country_name, region_of_origin  FROM Immigrants JOIN Countries ON Immigrants.country_of_origin = Countries.id JOIN Regions ON Immigrants.region_of_origin = Regions.region_id  WHERE gender  = 'F'"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Country of origin for females from job available in employment",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.country_name\nFROM Immigrants I\nJOIN Countries C ON I.country_of_origin = C.id\nJOIN Employment E ON I.immigrant_id = E.immigrant_id\nWHERE I.gender = 'F'"
          ]
        },
        {
          "interpretation": "Where in the database can you find data of female immigrants",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Immigrants WHERE gender = 'F'"
          ]
        },
        {
          "interpretation": "Region where female immigrants reside",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT R.region_name \nFROM Immigrants I \nJOIN Regions R ON I.region_of_origin = R.region_id \nWHERE I.gender = 'F'"
          ]
        },
        {
          "interpretation": "Number of countries where female immigrants originate",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(DISTINCT T1.country_name)\nFROM Countries AS T1\nJOIN Immigrants AS T2 ON T1.id = T2.country_of_origin\nWHERE T2.gender = 'F'"
          ]
        },
        {
          "interpretation": "Countries of origin of immigrants with unknown gender 'W'",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT c.country_name FROM Countries c JOIN Immigrants i ON c.id = i.country_of_origin WHERE i.gender = 'W'"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 0.6666666666666666,
        "precision": 0.4,
        "one_found": true,
        "f1_score": 0.5,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Education/vague_2cols_resources2/vague_2cols_resources2.sqlite",
      "db_dump": "CREATE TABLE Courses (\n    CourseID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Description TEXT,\n    TeacherID INTEGER,\n    FOREIGN KEY(TeacherID) REFERENCES Teachers(TeacherID)\n);\nCREATE TABLE Enrollments (\n    EnrollmentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StudentID INTEGER,\n    CourseID INTEGER,\n    Grade TEXT,\n    FOREIGN KEY(StudentID) REFERENCES Students(StudentID),\n    FOREIGN KEY(CourseID) REFERENCES Courses(CourseID)\n);\nCREATE TABLE Exams (\n    ExamID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CourseID INTEGER,\n    Date DATE,\n    TotalMarks INT,\n    PassMark INT,\n    FOREIGN KEY(CourseID) REFERENCES Courses(CourseID)\n);\nCREATE TABLE Students (\n    StudentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    Age INT\n);\nCREATE TABLE Teachers (\n    TeacherID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    SubjectTaught TEXT\n);\nCREATE TABLE Textbooks_and_Software (\n    ItemID INTEGER PRIMARY KEY AUTOINCREMENT,\n    TextbookTitle TEXT,\n    SoftwareName TEXT,\n    CourseID INTEGER,\n    Quantity INT,\n    Price DECIMAL(10,2),\n    FOREIGN KEY(CourseID) REFERENCES Courses(CourseID)\n);\n\nINSERT INTO \"Courses\" (CourseID,Title,Description,TeacherID) VALUES (1,'Calculus I','Introductory Calculus with an emphasis on limits and derivatives.',1),(2,'General Physics','Introduction to classical physics covering mechanics and thermodynamics.',2),(3,'Biological Evolution','A comprehensive study of evolutionary processes in biology.',3),(4,'Organic Chemistry I','Introduction to organic chemistry focusing on fundamental concepts and reactions.',4),(5,'World Literature','Exploration of world literature from various cultures and time periods.',5);\nINSERT INTO \"Enrollments\" (EnrollmentID,StudentID,CourseID,Grade) VALUES (1,1,1,'A'),(2,2,2,'B+'),(3,3,3,'A-'),(4,4,4,'B'),(5,5,5,'A');\nINSERT INTO \"Exams\" (ExamID,CourseID,Date,TotalMarks,PassMark) VALUES (1,1,'2021-12-15',100,60),(2,2,'2021-12-20',100,65),(3,3,'2021-12-17',100,70),(4,4,'2021-12-22',100,75),(5,5,'2021-12-18',100,80);\nINSERT INTO \"Students\" (StudentID,FirstName,LastName,Age) VALUES (1,'John','Doe',16),(2,'Jane','Smith',17),(3,'Tom','Brown',18),(4,'Alice','Green',19),(5,'Bob','White',20);\nINSERT INTO \"Teachers\" (TeacherID,FirstName,LastName,SubjectTaught) VALUES (1,'Mr.','Davis','Mathematics'),(2,'Ms.','Martin','Physics'),(3,'Dr.','Parker','Biology'),(4,'Professor','Lee','Chemistry'),(5,'Mrs.','Hall','English Literature');\nINSERT INTO \"Textbooks_and_Software\" (ItemID,TextbookTitle,SoftwareName,CourseID,Quantity,Price) VALUES (1,'Principia Mathematica',NULL,1,10,49.99),(2,'Fundamentals of Biochemistry',NULL,3,5,59.99),(3,'The Elements of Style','Grammarly Premium',5,15,39.99),(4,'Inorganic Chemistry: Structure and Reactivity',NULL,4,7,69.99),(5,'Anthropology: A Brief Introduction','Adobe Creative Cloud',2,8,79.99);\n",
      "question": "Which resource is the least expensive?",
      "gold_queries": [
        "select TextbookTitle from textbooks_and_software order by price asc limit 1;",
        "select SoftwareName from textbooks_and_software order by price asc limit 1;",
        "select TextbookTitle, SoftwareName from textbooks_and_software order by price asc limit 1;"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "a. Or: The software 'Grammarly Premium' is the least expensive text book couple  textbook and Software candidates  alternative ( availability row candidate.)",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT TextbookTitle, SoftwareName FROM Textbooks_and_Software WHERE SoftwareName = 'Grammarly Premium' OR Price = (SELECT MIN(Price) FROM Textbooks_and_Software)"
          ]
        },
        {
          "interpretation": "No textbooks are available to be considered for the software so a textbook option and last Software 'Adobe Creative Cloud' is the least expensive (Availability places holder for other software first to appearing in the list row).",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT TextbookTitle, SoftwareName, CourseID\nFROM Textbooks_and_Software\nWHERE Price = (SELECT MIN(Price) FROM Textbooks_and_Software WHERE SoftwareName IS NOT NULL)\nAND SoftwareName = 'Adobe Creative Cloud'"
          ]
        },
        {
          "interpretation": "The software 'Grammarly Premium' is the least expensive availability candidate.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT SoftwareName, Price FROM Textbooks_and_Software WHERE SoftwareName = 'Grammarly Premium' ORDER BY Price ASC LIMIT 1"
          ]
        },
        {
          "interpretation": "The textbook 'Principia Mathematica' is the least expensive.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT TextbookTitle, Price \nFROM Textbooks_and_Software \nWHERE TextbookTitle = 'Principia Mathematica' \nORDER BY Price ASC \nLIMIT 1"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.3333333333333333,
        "precision": 0.25,
        "one_found": true,
        "f1_score": 0.28571428571428575,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Education/vague_2cols_resources2/vague_2cols_resources2.sqlite",
      "db_dump": "CREATE TABLE Courses (\n    CourseID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Description TEXT,\n    TeacherID INTEGER,\n    FOREIGN KEY(TeacherID) REFERENCES Teachers(TeacherID)\n);\nCREATE TABLE Enrollments (\n    EnrollmentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StudentID INTEGER,\n    CourseID INTEGER,\n    Grade TEXT,\n    FOREIGN KEY(StudentID) REFERENCES Students(StudentID),\n    FOREIGN KEY(CourseID) REFERENCES Courses(CourseID)\n);\nCREATE TABLE Exams (\n    ExamID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CourseID INTEGER,\n    Date DATE,\n    TotalMarks INT,\n    PassMark INT,\n    FOREIGN KEY(CourseID) REFERENCES Courses(CourseID)\n);\nCREATE TABLE Students (\n    StudentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    Age INT\n);\nCREATE TABLE Teachers (\n    TeacherID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    SubjectTaught TEXT\n);\nCREATE TABLE Textbooks_and_Software (\n    ItemID INTEGER PRIMARY KEY AUTOINCREMENT,\n    TextbookTitle TEXT,\n    SoftwareName TEXT,\n    CourseID INTEGER,\n    Quantity INT,\n    Price DECIMAL(10,2),\n    FOREIGN KEY(CourseID) REFERENCES Courses(CourseID)\n);\n\nINSERT INTO \"Courses\" (CourseID,Title,Description,TeacherID) VALUES (1,'Calculus I','Introductory Calculus with an emphasis on limits and derivatives.',1),(2,'General Physics','Introduction to classical physics covering mechanics and thermodynamics.',2),(3,'Biological Evolution','A comprehensive study of evolutionary processes in biology.',3),(4,'Organic Chemistry I','Introduction to organic chemistry focusing on fundamental concepts and reactions.',4),(5,'World Literature','Exploration of world literature from various cultures and time periods.',5);\nINSERT INTO \"Enrollments\" (EnrollmentID,StudentID,CourseID,Grade) VALUES (1,1,1,'A'),(2,2,2,'B+'),(3,3,3,'A-'),(4,4,4,'B'),(5,5,5,'A');\nINSERT INTO \"Exams\" (ExamID,CourseID,Date,TotalMarks,PassMark) VALUES (1,1,'2021-12-15',100,60),(2,2,'2021-12-20',100,65),(3,3,'2021-12-17',100,70),(4,4,'2021-12-22',100,75),(5,5,'2021-12-18',100,80);\nINSERT INTO \"Students\" (StudentID,FirstName,LastName,Age) VALUES (1,'John','Doe',16),(2,'Jane','Smith',17),(3,'Tom','Brown',18),(4,'Alice','Green',19),(5,'Bob','White',20);\nINSERT INTO \"Teachers\" (TeacherID,FirstName,LastName,SubjectTaught) VALUES (1,'Mr.','Davis','Mathematics'),(2,'Ms.','Martin','Physics'),(3,'Dr.','Parker','Biology'),(4,'Professor','Lee','Chemistry'),(5,'Mrs.','Hall','English Literature');\nINSERT INTO \"Textbooks_and_Software\" (ItemID,TextbookTitle,SoftwareName,CourseID,Quantity,Price) VALUES (1,'Principia Mathematica',NULL,1,10,49.99),(2,'Fundamentals of Biochemistry',NULL,3,5,59.99),(3,'The Elements of Style','Grammarly Premium',5,15,39.99),(4,'Inorganic Chemistry: Structure and Reactivity',NULL,4,7,69.99),(5,'Anthropology: A Brief Introduction','Adobe Creative Cloud',2,8,79.99);\n",
      "question": "Which software is the least expensive?",
      "gold_queries": [
        "select SoftwareName from textbooks_and_software order by price asc limit 1;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "The software name, however, is not linked with any specific price but still it is the name of a software with price in the table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT SoftwareName FROM Textbooks_and_Software WHERE SoftwareName IS NOT NULL"
          ]
        },
        {
          "interpretation": "The software with the lowest average price per unit for non-free software.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT SoftwareName \nFROM (\n    SELECT SoftwareName, AVG(Price / Quantity) AS AvgPrice\n    FROM Textbooks_and_Software\n    WHERE SoftwareName IS NOT NULL AND Price != 0\n    GROUP BY SoftwareName\n) AS SoftwarePrices\nORDER BY AvgPrice ASC\nLIMIT 1"
          ]
        },
        {
          "interpretation": "The non-free software with less quantity.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT SoftwareName, Quantity FROM Textbooks_and_Software WHERE SoftwareName IS NOT NULL ORDER BY Quantity ASC LIMIT 1"
          ]
        },
        {
          "interpretation": "The lowest priced software excluding 'Grammarly Premium' since it has the lowest price among all software in the table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT SoftwareName, Price \nFROM Textbooks_and_Software \nWHERE SoftwareName IS NOT NULL AND SoftwareName != 'Grammarly Premium' \nORDER BY Price ASC \nLIMIT 1"
          ]
        },
        {
          "interpretation": "The software with the lowest price in the Textbooks_and_Software table regardless of whether it is 'Grammarly Premium' or not.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT SoftwareName, Price FROM Textbooks_and_Software WHERE Price = (SELECT MIN(Price) FROM Textbooks_and_Software)"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "one_found": true,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Education/vague_2cols_resources2/vague_2cols_resources2.sqlite",
      "db_dump": "CREATE TABLE Courses (\n    CourseID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Description TEXT,\n    TeacherID INTEGER,\n    FOREIGN KEY(TeacherID) REFERENCES Teachers(TeacherID)\n);\nCREATE TABLE Enrollments (\n    EnrollmentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StudentID INTEGER,\n    CourseID INTEGER,\n    Grade TEXT,\n    FOREIGN KEY(StudentID) REFERENCES Students(StudentID),\n    FOREIGN KEY(CourseID) REFERENCES Courses(CourseID)\n);\nCREATE TABLE Exams (\n    ExamID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CourseID INTEGER,\n    Date DATE,\n    TotalMarks INT,\n    PassMark INT,\n    FOREIGN KEY(CourseID) REFERENCES Courses(CourseID)\n);\nCREATE TABLE Students (\n    StudentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    Age INT\n);\nCREATE TABLE Teachers (\n    TeacherID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    SubjectTaught TEXT\n);\nCREATE TABLE Textbooks_and_Software (\n    ItemID INTEGER PRIMARY KEY AUTOINCREMENT,\n    TextbookTitle TEXT,\n    SoftwareName TEXT,\n    CourseID INTEGER,\n    Quantity INT,\n    Price DECIMAL(10,2),\n    FOREIGN KEY(CourseID) REFERENCES Courses(CourseID)\n);\n\nINSERT INTO \"Courses\" (CourseID,Title,Description,TeacherID) VALUES (1,'Calculus I','Introductory Calculus with an emphasis on limits and derivatives.',1),(2,'General Physics','Introduction to classical physics covering mechanics and thermodynamics.',2),(3,'Biological Evolution','A comprehensive study of evolutionary processes in biology.',3),(4,'Organic Chemistry I','Introduction to organic chemistry focusing on fundamental concepts and reactions.',4),(5,'World Literature','Exploration of world literature from various cultures and time periods.',5);\nINSERT INTO \"Enrollments\" (EnrollmentID,StudentID,CourseID,Grade) VALUES (1,1,1,'A'),(2,2,2,'B+'),(3,3,3,'A-'),(4,4,4,'B'),(5,5,5,'A');\nINSERT INTO \"Exams\" (ExamID,CourseID,Date,TotalMarks,PassMark) VALUES (1,1,'2021-12-15',100,60),(2,2,'2021-12-20',100,65),(3,3,'2021-12-17',100,70),(4,4,'2021-12-22',100,75),(5,5,'2021-12-18',100,80);\nINSERT INTO \"Students\" (StudentID,FirstName,LastName,Age) VALUES (1,'John','Doe',16),(2,'Jane','Smith',17),(3,'Tom','Brown',18),(4,'Alice','Green',19),(5,'Bob','White',20);\nINSERT INTO \"Teachers\" (TeacherID,FirstName,LastName,SubjectTaught) VALUES (1,'Mr.','Davis','Mathematics'),(2,'Ms.','Martin','Physics'),(3,'Dr.','Parker','Biology'),(4,'Professor','Lee','Chemistry'),(5,'Mrs.','Hall','English Literature');\nINSERT INTO \"Textbooks_and_Software\" (ItemID,TextbookTitle,SoftwareName,CourseID,Quantity,Price) VALUES (1,'Principia Mathematica',NULL,1,10,49.99),(2,'Fundamentals of Biochemistry',NULL,3,5,59.99),(3,'The Elements of Style','Grammarly Premium',5,15,39.99),(4,'Inorganic Chemistry: Structure and Reactivity',NULL,4,7,69.99),(5,'Anthropology: A Brief Introduction','Adobe Creative Cloud',2,8,79.99);\n",
      "question": "List the courses and their required softwares.",
      "gold_queries": [
        "Select title, SoftwareName from courses C join textbooks_and_software TAS on C.courseID = TAS.courseID;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List all courses and their respective software requirements.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Courses.Title, Textbooks_and_Software.SoftwareName\nFROM Courses\nJOIN Textbooks_and_Software ON Courses.CourseID = Textbooks_and_Software.CourseID"
          ]
        },
        {
          "interpretation": "List required software for each course without including textbook information.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT SoftwareName, CourseID FROM Textbooks_and_Software WHERE SoftwareName IS NOT NULL"
          ]
        },
        {
          "interpretation": "Retrieve the Course table and list one additional table that contains textbooks and software information.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Textbooks_and_Software",
            "SELECT * FROM Courses"
          ]
        },
        {
          "interpretation": "Retrieve the Course table and list one additional table that contains textbooks and software information.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Textbooks_and_Software",
            "SELECT * FROM Courses"
          ]
        },
        {
          "interpretation": "List courses that do not have required software.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Title FROM Courses WHERE CourseID NOT IN (SELECT CourseID FROM Textbooks_and_Software WHERE SoftwareName IS NOT NULL)"
          ]
        },
        {
          "interpretation": "Retrieve the Course table and join it with another table (Textbooks_and_Software) to display courses along with their required materials.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Courses.CourseID, Courses.Title, Textbooks_and_Software.TextbookTitle, Textbooks_and_Software.SoftwareName\nFROM Courses\nJOIN Textbooks_and_Software ON Courses.CourseID = Textbooks_and_Software.CourseID"
          ]
        },
        {
          "interpretation": "List all courses along with their required materials (textbooks and software), placing the software last in the list if it exists.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.Title, T.TextbookTitle, T.SoftwareName\nFROM Courses C\nLEFT JOIN Textbooks_and_Software T ON C.CourseID = T.CourseID\nORDER BY C.Title, T.TextbookTitle, T.SoftwareName DESC"
          ]
        },
        {
          "interpretation": "Display courses and their required materials, categorizing them into two groups: textbooks and software.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.Title, T2.TextbookTitle AS Textbook, NULL AS Software\nFROM Courses AS T1\nLEFT JOIN Textbooks_and_Software AS T2 ON T1.CourseID = T2.CourseID\nWHERE T2.TextbookTitle IS NOT NULL",
            "SELECT T1.Title, NULL AS Textbook, T2.SoftwareName AS Software\nFROM Courses AS T1\nLEFT JOIN Textbooks_and_Software AS T2 ON T1.CourseID = T2.CourseID\nWHERE T2.SoftwareName IS NOT NULL"
          ]
        },
        {
          "interpretation": "Display courses and their required materials, categorizing them into two groups: textbooks and software.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.Title, T2.TextbookTitle AS Textbook, NULL AS Software\nFROM Courses AS T1\nLEFT JOIN Textbooks_and_Software AS T2 ON T1.CourseID = T2.CourseID\nWHERE T2.TextbookTitle IS NOT NULL",
            "SELECT T1.Title, NULL AS Textbook, T2.SoftwareName AS Software\nFROM Courses AS T1\nLEFT JOIN Textbooks_and_Software AS T2 ON T1.CourseID = T2.CourseID\nWHERE T2.SoftwareName IS NOT NULL"
          ]
        },
        {
          "interpretation": "List courses that have software requirements, along with the details of that software.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Courses.Title, Textbooks_and_Software.SoftwareName\nFROM Courses\nJOIN Textbooks_and_Software ON Courses.CourseID = Textbooks_and_Software.CourseID\nWHERE Textbooks_and_Software.SoftwareName IS NOT NULL"
          ]
        }
      ],
      "num_unique_execution_results": 10,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.1,
        "one_found": true,
        "f1_score": 0.18181818181818182,
        "num_queries": 14,
        "num_unique_queries": 10,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Education/vague_2cols_resources2/vague_2cols_resources2.sqlite",
      "db_dump": "CREATE TABLE Courses (\n    CourseID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Description TEXT,\n    TeacherID INTEGER,\n    FOREIGN KEY(TeacherID) REFERENCES Teachers(TeacherID)\n);\nCREATE TABLE Enrollments (\n    EnrollmentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StudentID INTEGER,\n    CourseID INTEGER,\n    Grade TEXT,\n    FOREIGN KEY(StudentID) REFERENCES Students(StudentID),\n    FOREIGN KEY(CourseID) REFERENCES Courses(CourseID)\n);\nCREATE TABLE Exams (\n    ExamID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CourseID INTEGER,\n    Date DATE,\n    TotalMarks INT,\n    PassMark INT,\n    FOREIGN KEY(CourseID) REFERENCES Courses(CourseID)\n);\nCREATE TABLE Students (\n    StudentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    Age INT\n);\nCREATE TABLE Teachers (\n    TeacherID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    SubjectTaught TEXT\n);\nCREATE TABLE Textbooks_and_Software (\n    ItemID INTEGER PRIMARY KEY AUTOINCREMENT,\n    TextbookTitle TEXT,\n    SoftwareName TEXT,\n    CourseID INTEGER,\n    Quantity INT,\n    Price DECIMAL(10,2),\n    FOREIGN KEY(CourseID) REFERENCES Courses(CourseID)\n);\n\nINSERT INTO \"Courses\" (CourseID,Title,Description,TeacherID) VALUES (1,'Calculus I','Introductory Calculus with an emphasis on limits and derivatives.',1),(2,'General Physics','Introduction to classical physics covering mechanics and thermodynamics.',2),(3,'Biological Evolution','A comprehensive study of evolutionary processes in biology.',3),(4,'Organic Chemistry I','Introduction to organic chemistry focusing on fundamental concepts and reactions.',4),(5,'World Literature','Exploration of world literature from various cultures and time periods.',5);\nINSERT INTO \"Enrollments\" (EnrollmentID,StudentID,CourseID,Grade) VALUES (1,1,1,'A'),(2,2,2,'B+'),(3,3,3,'A-'),(4,4,4,'B'),(5,5,5,'A');\nINSERT INTO \"Exams\" (ExamID,CourseID,Date,TotalMarks,PassMark) VALUES (1,1,'2021-12-15',100,60),(2,2,'2021-12-20',100,65),(3,3,'2021-12-17',100,70),(4,4,'2021-12-22',100,75),(5,5,'2021-12-18',100,80);\nINSERT INTO \"Students\" (StudentID,FirstName,LastName,Age) VALUES (1,'John','Doe',16),(2,'Jane','Smith',17),(3,'Tom','Brown',18),(4,'Alice','Green',19),(5,'Bob','White',20);\nINSERT INTO \"Teachers\" (TeacherID,FirstName,LastName,SubjectTaught) VALUES (1,'Mr.','Davis','Mathematics'),(2,'Ms.','Martin','Physics'),(3,'Dr.','Parker','Biology'),(4,'Professor','Lee','Chemistry'),(5,'Mrs.','Hall','English Literature');\nINSERT INTO \"Textbooks_and_Software\" (ItemID,TextbookTitle,SoftwareName,CourseID,Quantity,Price) VALUES (1,'Principia Mathematica',NULL,1,10,49.99),(2,'Fundamentals of Biochemistry',NULL,3,5,59.99),(3,'The Elements of Style','Grammarly Premium',5,15,39.99),(4,'Inorganic Chemistry: Structure and Reactivity',NULL,4,7,69.99),(5,'Anthropology: A Brief Introduction','Adobe Creative Cloud',2,8,79.99);\n",
      "question": "Which textbook is the least expensive?",
      "gold_queries": [
        "select TextbookTitle from textbooks_and_software order by price asc limit 1;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Consider the price of each course's textbook regardless of quantity, and report the lowest price textbook.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT TextbookTitle, Price FROM Textbooks_and_Software WHERE Price = (SELECT MIN(Price) FROM Textbooks_and_Software) LIMIT 1"
          ]
        },
        {
          "interpretation": "Identify the course with the least expensive textbook in the Textbooks_and_Software table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT CourseID, TextbookTitle\nFROM Textbooks_and_Software\nORDER BY Price ASC\nLIMIT 1"
          ]
        },
        {
          "interpretation": "Determine the textbook with the minimum price among textbooks of the same course.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT CourseID, TextbookTitle, MIN(Price) as MinPrice\nFROM Textbooks_and_Software\nGroup BY CourseID"
          ]
        },
        {
          "interpretation": "Report the textbook that has the lowest price per unit among textbooks from courses with required textbooks.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT TextbookTitle FROM Textbooks_and_Software WHERE TextbookTitle IS NOT NULL ORDER BY Price ASC LIMIT 1"
          ]
        },
        {
          "interpretation": "Determine the course that uses the least expensive textbook, without reference to textbook quantity.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Title \nFROM Courses \nWHERE CourseID = (SELECT CourseID FROM Textbooks_and_Software ORDER BY Price ASC LIMIT 1)"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "one_found": true,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Education/vague_2cols_resources2/vague_2cols_resources2.sqlite",
      "db_dump": "CREATE TABLE Courses (\n    CourseID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Description TEXT,\n    TeacherID INTEGER,\n    FOREIGN KEY(TeacherID) REFERENCES Teachers(TeacherID)\n);\nCREATE TABLE Enrollments (\n    EnrollmentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StudentID INTEGER,\n    CourseID INTEGER,\n    Grade TEXT,\n    FOREIGN KEY(StudentID) REFERENCES Students(StudentID),\n    FOREIGN KEY(CourseID) REFERENCES Courses(CourseID)\n);\nCREATE TABLE Exams (\n    ExamID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CourseID INTEGER,\n    Date DATE,\n    TotalMarks INT,\n    PassMark INT,\n    FOREIGN KEY(CourseID) REFERENCES Courses(CourseID)\n);\nCREATE TABLE Students (\n    StudentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    Age INT\n);\nCREATE TABLE Teachers (\n    TeacherID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    SubjectTaught TEXT\n);\nCREATE TABLE Textbooks_and_Software (\n    ItemID INTEGER PRIMARY KEY AUTOINCREMENT,\n    TextbookTitle TEXT,\n    SoftwareName TEXT,\n    CourseID INTEGER,\n    Quantity INT,\n    Price DECIMAL(10,2),\n    FOREIGN KEY(CourseID) REFERENCES Courses(CourseID)\n);\n\nINSERT INTO \"Courses\" (CourseID,Title,Description,TeacherID) VALUES (1,'Calculus I','Introductory Calculus with an emphasis on limits and derivatives.',1),(2,'General Physics','Introduction to classical physics covering mechanics and thermodynamics.',2),(3,'Biological Evolution','A comprehensive study of evolutionary processes in biology.',3),(4,'Organic Chemistry I','Introduction to organic chemistry focusing on fundamental concepts and reactions.',4),(5,'World Literature','Exploration of world literature from various cultures and time periods.',5);\nINSERT INTO \"Enrollments\" (EnrollmentID,StudentID,CourseID,Grade) VALUES (1,1,1,'A'),(2,2,2,'B+'),(3,3,3,'A-'),(4,4,4,'B'),(5,5,5,'A');\nINSERT INTO \"Exams\" (ExamID,CourseID,Date,TotalMarks,PassMark) VALUES (1,1,'2021-12-15',100,60),(2,2,'2021-12-20',100,65),(3,3,'2021-12-17',100,70),(4,4,'2021-12-22',100,75),(5,5,'2021-12-18',100,80);\nINSERT INTO \"Students\" (StudentID,FirstName,LastName,Age) VALUES (1,'John','Doe',16),(2,'Jane','Smith',17),(3,'Tom','Brown',18),(4,'Alice','Green',19),(5,'Bob','White',20);\nINSERT INTO \"Teachers\" (TeacherID,FirstName,LastName,SubjectTaught) VALUES (1,'Mr.','Davis','Mathematics'),(2,'Ms.','Martin','Physics'),(3,'Dr.','Parker','Biology'),(4,'Professor','Lee','Chemistry'),(5,'Mrs.','Hall','English Literature');\nINSERT INTO \"Textbooks_and_Software\" (ItemID,TextbookTitle,SoftwareName,CourseID,Quantity,Price) VALUES (1,'Principia Mathematica',NULL,1,10,49.99),(2,'Fundamentals of Biochemistry',NULL,3,5,59.99),(3,'The Elements of Style','Grammarly Premium',5,15,39.99),(4,'Inorganic Chemistry: Structure and Reactivity',NULL,4,7,69.99),(5,'Anthropology: A Brief Introduction','Adobe Creative Cloud',2,8,79.99);\n",
      "question": "List the courses and their required textbooks.",
      "gold_queries": [
        "Select title, TextbookTitle from courses C join textbooks_and_software TAS on C.courseID = TAS.courseID;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "The courses along with their required textbook titles included.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT C.Title, T.TextbookTitle \nFROM Courses C \nJOIN Textbooks_and_Software T ON C.CourseID = T.CourseID"
          ]
        },
        {
          "interpretation": "The courses with requested textbooks information.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Courses.Title, Textbooks_and_Software.TextbookTitle, Textbooks_and_Software.Quantity, Textbooks_and_Software.Price\nFROM Courses\nJOIN Textbooks_and_Software ON Courses.CourseID = Textbooks_and_Software.CourseID"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "one_found": true,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Education/vague_2cols_resources2/vague_2cols_resources2.sqlite",
      "db_dump": "CREATE TABLE Courses (\n    CourseID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Description TEXT,\n    TeacherID INTEGER,\n    FOREIGN KEY(TeacherID) REFERENCES Teachers(TeacherID)\n);\nCREATE TABLE Enrollments (\n    EnrollmentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StudentID INTEGER,\n    CourseID INTEGER,\n    Grade TEXT,\n    FOREIGN KEY(StudentID) REFERENCES Students(StudentID),\n    FOREIGN KEY(CourseID) REFERENCES Courses(CourseID)\n);\nCREATE TABLE Exams (\n    ExamID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CourseID INTEGER,\n    Date DATE,\n    TotalMarks INT,\n    PassMark INT,\n    FOREIGN KEY(CourseID) REFERENCES Courses(CourseID)\n);\nCREATE TABLE Students (\n    StudentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    Age INT\n);\nCREATE TABLE Teachers (\n    TeacherID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    SubjectTaught TEXT\n);\nCREATE TABLE Textbooks_and_Software (\n    ItemID INTEGER PRIMARY KEY AUTOINCREMENT,\n    TextbookTitle TEXT,\n    SoftwareName TEXT,\n    CourseID INTEGER,\n    Quantity INT,\n    Price DECIMAL(10,2),\n    FOREIGN KEY(CourseID) REFERENCES Courses(CourseID)\n);\n\nINSERT INTO \"Courses\" (CourseID,Title,Description,TeacherID) VALUES (1,'Calculus I','Introductory Calculus with an emphasis on limits and derivatives.',1),(2,'General Physics','Introduction to classical physics covering mechanics and thermodynamics.',2),(3,'Biological Evolution','A comprehensive study of evolutionary processes in biology.',3),(4,'Organic Chemistry I','Introduction to organic chemistry focusing on fundamental concepts and reactions.',4),(5,'World Literature','Exploration of world literature from various cultures and time periods.',5);\nINSERT INTO \"Enrollments\" (EnrollmentID,StudentID,CourseID,Grade) VALUES (1,1,1,'A'),(2,2,2,'B+'),(3,3,3,'A-'),(4,4,4,'B'),(5,5,5,'A');\nINSERT INTO \"Exams\" (ExamID,CourseID,Date,TotalMarks,PassMark) VALUES (1,1,'2021-12-15',100,60),(2,2,'2021-12-20',100,65),(3,3,'2021-12-17',100,70),(4,4,'2021-12-22',100,75),(5,5,'2021-12-18',100,80);\nINSERT INTO \"Students\" (StudentID,FirstName,LastName,Age) VALUES (1,'John','Doe',16),(2,'Jane','Smith',17),(3,'Tom','Brown',18),(4,'Alice','Green',19),(5,'Bob','White',20);\nINSERT INTO \"Teachers\" (TeacherID,FirstName,LastName,SubjectTaught) VALUES (1,'Mr.','Davis','Mathematics'),(2,'Ms.','Martin','Physics'),(3,'Dr.','Parker','Biology'),(4,'Professor','Lee','Chemistry'),(5,'Mrs.','Hall','English Literature');\nINSERT INTO \"Textbooks_and_Software\" (ItemID,TextbookTitle,SoftwareName,CourseID,Quantity,Price) VALUES (1,'Principia Mathematica',NULL,1,10,49.99),(2,'Fundamentals of Biochemistry',NULL,3,5,59.99),(3,'The Elements of Style','Grammarly Premium',5,15,39.99),(4,'Inorganic Chemistry: Structure and Reactivity',NULL,4,7,69.99),(5,'Anthropology: A Brief Introduction','Adobe Creative Cloud',2,8,79.99);\n",
      "question": "List the courses and their required textbooks and softwares.",
      "gold_queries": [
        "Select title, TextbookTitle, SoftwareName from courses C join textbooks_and_software TAS on C.courseID = TAS.courseID;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "List the courses with their required textbooks' and software's details in a specified format.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Courses.Title, Textbooks_and_Software.TextbookTitle, Textbooks_and_Software.SoftwareName\nFROM Courses\nJOIN Textbooks_and_Software ON Courses.CourseID = Textbooks_and_Software.CourseID"
          ]
        },
        {
          "interpretation": "List the courses and the titles of their required textbooks, if any.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Courses.Title, Textbooks_and_Software.TextbookTitle\nFROM Courses\nLEFT JOIN Textbooks_and_Software ON Courses.CourseID = Textbooks_and_Software.CourseID"
          ]
        },
        {
          "interpretation": "List the courses and the names of their required softwares, if any.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.Title, T.SoftwareName \nFROM Courses C \nLEFT JOIN Textbooks_and_Software T ON C.CourseID = T.CourseID"
          ]
        },
        {
          "interpretation": "List all courses and existing details about their required textbooks and softwares in a single query.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.Title, C.Description, T.TextbookTitle, T.SoftwareName, T.Quantity, T.Price\nFROM Courses C\nJOIN Textbooks_and_Software T ON C.CourseID = T.CourseID"
          ]
        },
        {
          "interpretation": "List the required textbooks and softwares for each course.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT CourseID, TextbookTitle, SoftwareName \nFROM Textbooks_and_Software"
          ]
        },
        {
          "interpretation": "Return a list of courses which have any required textbook or software.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT C.Title FROM Courses C JOIN Textbooks_and_Software T ON C.CourseID = T.CourseID"
          ]
        },
        {
          "interpretation": "List courses along with the existing quantities of their required textbooks and softwares.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Courses.Title, Textbooks_and_Software.Quantity\nFROM Textbooks_and_Software\nJOIN Courses ON Textbooks_and_Software.CourseID = Courses.CourseID"
          ]
        },
        {
          "interpretation": "Return the course details including textbook titles and software names in separate columns.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Courses.CourseID, Courses.Title, Courses.Description, Textbooks_and_Software.TextbookTitle, Textbooks_and_Software.SoftwareName\nFROM Courses\nLEFT JOIN Textbooks_and_Software ON Courses.CourseID = Textbooks_and_Software.CourseID"
          ]
        }
      ],
      "num_unique_execution_results": 8,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.125,
        "one_found": true,
        "f1_score": 0.2222222222222222,
        "num_queries": 8,
        "num_unique_queries": 8,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Demographics/vague_2cols_origins/vague_2cols_origins.sqlite",
      "db_dump": "CREATE TABLE Countries (\n    id INTEGER PRIMARY KEY,\n    country_name TEXT\n);\nCREATE TABLE Education_Levels (\n    education_level_id INTEGER PRIMARY KEY,\n    level_description TEXT UNIQUE\n);\nCREATE TABLE Employment (\n    employment_id INTEGER PRIMARY KEY,\n    immigrant_id INTEGER REFERENCES Immigrants(immigrant_id),\n    occupation_id INTEGER REFERENCES Occupations(occupation_id),\n    education_level_id INTEGER REFERENCES Education_Levels(education_level_id),\n    salary REAL\n);\nCREATE TABLE Immigrants (\n    immigrant_id INTEGER PRIMARY KEY,\n    country_of_origin INTEGER REFERENCES Countries(id),\n    region_of_origin INTEGER REFERENCES Regions(region_id),\n    age INTEGER,\n    gender CHAR(1) \n);\nCREATE TABLE Occupations (\n    occupation_id INTEGER PRIMARY KEY,\n    occupation_title TEXT UNIQUE\n);\nCREATE TABLE Regions (\n    region_id INTEGER PRIMARY KEY,\n    region_name TEXT\n);\n\nINSERT INTO \"Countries\" (id,country_name) VALUES (1,'USA'),(2,'Canada'),(3,'Mexico'),(4,'UK'),(5,'Germany');\nINSERT INTO \"Education_Levels\" (education_level_id,level_description) VALUES (1,'Bachelor''s Degree'),(2,'Master''s Degree'),(3,'PhD'),(4,'High School Diploma'),(5,'Associate Degree');\nINSERT INTO \"Employment\" (employment_id,immigrant_id,occupation_id,education_level_id,salary) VALUES (1,1,1,1,70000.0),(2,2,2,2,60000.0),(3,3,3,3,50000.0),(4,4,4,4,80000.0),(5,5,5,5,40000.0);\nINSERT INTO \"Immigrants\" (immigrant_id,country_of_origin,region_of_origin,age,gender) VALUES (1,1,2,30,'F'),(2,2,3,28,'M'),(3,3,4,29,'F'),(4,4,1,32,'M'),(5,5,5,31,'F');\nINSERT INTO \"Occupations\" (occupation_id,occupation_title) VALUES (1,'Software Engineer'),(2,'Doctor'),(3,'Teacher'),(4,'Engineer'),(5,'Architect');\nINSERT INTO \"Regions\" (region_id,region_name) VALUES (1,'Northeast'),(2,'Southwest'),(3,'Central'),(4,'East'),(5,'West');\n",
      "question": "What is the country of origin of the oldest immigrant?",
      "gold_queries": [
        "SELECT  country_name  FROM Immigrants JOIN Countries ON Immigrants.country_of_origin = Countries.id ORDER BY age ASC LIMIT 1"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What is the country of origin of an immigrant if we consider their preferred option?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T2.country_name FROM Immigrants AS T1 JOIN Countries AS T2 ON T1.country_of_origin = T2.id"
          ]
        },
        {
          "interpretation": "What is the country of origin of the immigrant who is most senior, i.e., the one who has been in the country for the longest period?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT country_name FROM Countries WHERE id = (SELECT country_of_origin FROM Immigrants ORDER BY immigrant_id ASC LIMIT 1)"
          ]
        },
        {
          "interpretation": "What is the country of origin of an immigrant with an age of 999 or more, indicating the oldest immigrant?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT c.country_name\nFROM Immigrants i\nJOIN Countries c ON i.country_of_origin = c.id\nWHERE i.age >= 999"
          ]
        },
        {
          "interpretation": "What is the country of origin of an immigrant with the least age (youngest) in the database?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT T2.country_name FROM Immigrants AS T1 JOIN Countries AS T2 ON T1.country_of_origin = T2.id ORDER BY T1.age ASC LIMIT 1"
          ]
        },
        {
          "interpretation": "What is the country of origin of the oldest (most senior) immigrant, i.e., the immigrant with the highest age among all immigrants?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT country_name FROM Countries WHERE id = (SELECT country_of_origin FROM Immigrants ORDER BY age DESC LIMIT 1)"
          ]
        }
      ],
      "num_unique_execution_results": 5,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.2,
        "one_found": true,
        "f1_score": 0.33333333333333337,
        "num_queries": 5,
        "num_unique_queries": 5,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Demographics/vague_2cols_origins/vague_2cols_origins.sqlite",
      "db_dump": "CREATE TABLE Countries (\n    id INTEGER PRIMARY KEY,\n    country_name TEXT\n);\nCREATE TABLE Education_Levels (\n    education_level_id INTEGER PRIMARY KEY,\n    level_description TEXT UNIQUE\n);\nCREATE TABLE Employment (\n    employment_id INTEGER PRIMARY KEY,\n    immigrant_id INTEGER REFERENCES Immigrants(immigrant_id),\n    occupation_id INTEGER REFERENCES Occupations(occupation_id),\n    education_level_id INTEGER REFERENCES Education_Levels(education_level_id),\n    salary REAL\n);\nCREATE TABLE Immigrants (\n    immigrant_id INTEGER PRIMARY KEY,\n    country_of_origin INTEGER REFERENCES Countries(id),\n    region_of_origin INTEGER REFERENCES Regions(region_id),\n    age INTEGER,\n    gender CHAR(1) \n);\nCREATE TABLE Occupations (\n    occupation_id INTEGER PRIMARY KEY,\n    occupation_title TEXT UNIQUE\n);\nCREATE TABLE Regions (\n    region_id INTEGER PRIMARY KEY,\n    region_name TEXT\n);\n\nINSERT INTO \"Countries\" (id,country_name) VALUES (1,'USA'),(2,'Canada'),(3,'Mexico'),(4,'UK'),(5,'Germany');\nINSERT INTO \"Education_Levels\" (education_level_id,level_description) VALUES (1,'Bachelor''s Degree'),(2,'Master''s Degree'),(3,'PhD'),(4,'High School Diploma'),(5,'Associate Degree');\nINSERT INTO \"Employment\" (employment_id,immigrant_id,occupation_id,education_level_id,salary) VALUES (1,1,1,1,70000.0),(2,2,2,2,60000.0),(3,3,3,3,50000.0),(4,4,4,4,80000.0),(5,5,5,5,40000.0);\nINSERT INTO \"Immigrants\" (immigrant_id,country_of_origin,region_of_origin,age,gender) VALUES (1,1,2,30,'F'),(2,2,3,28,'M'),(3,3,4,29,'F'),(4,4,1,32,'M'),(5,5,5,31,'F');\nINSERT INTO \"Occupations\" (occupation_id,occupation_title) VALUES (1,'Software Engineer'),(2,'Doctor'),(3,'Teacher'),(4,'Engineer'),(5,'Architect');\nINSERT INTO \"Regions\" (region_id,region_name) VALUES (1,'Northeast'),(2,'Southwest'),(3,'Central'),(4,'East'),(5,'West');\n",
      "question": "What country do women immigrants come from?",
      "gold_queries": [
        "SELECT  country_name  FROM Immigrants JOIN Countries ON Immigrants.country_of_origin = Countries.id WHERE gender  = 'F'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Which countries of origin have female immigrant populations?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT DISTINCT C.country_name\nFROM Countries C\nJOIN Immigrants I ON C.id = I.country_of_origin\nWHERE I.gender = 'F'"
          ]
        },
        {
          "interpretation": "What countries exhibit a significant trend for having predominantly female immigrant populations?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT country_name\nFROM Countries\nWHERE id IN (\n    SELECT country_of_origin\n    FROM Immigrants\n    WHERE gender = 'F'\n    GROUP BY country_of_origin\n    HAVING COUNT(*) > (\n        SELECT COUNT(*)\n        FROM Immigrants\n        WHERE country_of_origin = Immigrants.country_of_origin AND gender = 'M'\n    )\n)"
          ]
        },
        {
          "interpretation": "What is the breakdown of country of origin for immigrants based on gender, specifically females?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Countries.country_name, COUNT(*) as Count\nFROM Immigrants\nJOIN Countries ON Immigrants.country_of_origin = Countries.id\nWHERE Immigrants.gender = 'F'\nGROUP BY Countries.country_name"
          ]
        },
        {
          "interpretation": "What are the countries of origin of immigrant women compared to immigrant men?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT gender, C.country_name FROM Immigrants I JOIN Countries C ON I.country_of_origin = C.id WHERE gender IN ('F', 'M') GROUP BY gender, C.country_name"
          ]
        },
        {
          "interpretation": "What countries do immigrant women primarily come from?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT c.country_name\nFROM Immigrants i\nJOIN Countries c ON i.country_of_origin = c.id\nWHERE i.gender = 'F'\nGROUP BY c.country_name\nORDER BY COUNT(*) DESC\nLIMIT 1"
          ]
        },
        {
          "interpretation": "Is there a correlation between the country of origin and the proportion of female immigrants?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.country_name, SUM(CASE WHEN I.gender = 'F' THEN 1.0 ELSE 0 END) / COUNT(I.immigrant_id) AS proportion_female\nFROM Immigrants I\nJOIN Countries C ON I.country_of_origin = C.id\nGROUP BY C.country_name"
          ]
        },
        {
          "interpretation": "What percentage of immigrants from each country are female?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT c.country_name, (SUM(CASE WHEN i.gender = 'F' THEN 1.0 ELSE 0 END) / COUNT(i.gender)) * 100 AS female_percentage\nFROM Immigrants i\nJOIN Countries c ON i.country_of_origin = c.id\nGROUP BY c.country_name"
          ]
        },
        {
          "interpretation": "What is the count of countries from which immigrants are female?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(DISTINCT T1.country_name)\nFROM Countries AS T1\nJOIN Immigrants AS T2 ON T1.id = T2.country_of_origin\nWHERE T2.gender = 'F'"
          ]
        }
      ],
      "num_unique_execution_results": 8,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.125,
        "one_found": true,
        "f1_score": 0.2222222222222222,
        "num_queries": 8,
        "num_unique_queries": 8,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Education/vague_2cols_resources2/vague_2cols_resources2.sqlite",
      "db_dump": "CREATE TABLE Courses (\n    CourseID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Description TEXT,\n    TeacherID INTEGER,\n    FOREIGN KEY(TeacherID) REFERENCES Teachers(TeacherID)\n);\nCREATE TABLE Enrollments (\n    EnrollmentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StudentID INTEGER,\n    CourseID INTEGER,\n    Grade TEXT,\n    FOREIGN KEY(StudentID) REFERENCES Students(StudentID),\n    FOREIGN KEY(CourseID) REFERENCES Courses(CourseID)\n);\nCREATE TABLE Exams (\n    ExamID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CourseID INTEGER,\n    Date DATE,\n    TotalMarks INT,\n    PassMark INT,\n    FOREIGN KEY(CourseID) REFERENCES Courses(CourseID)\n);\nCREATE TABLE Students (\n    StudentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    Age INT\n);\nCREATE TABLE Teachers (\n    TeacherID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    SubjectTaught TEXT\n);\nCREATE TABLE Textbooks_and_Software (\n    ItemID INTEGER PRIMARY KEY AUTOINCREMENT,\n    TextbookTitle TEXT,\n    SoftwareName TEXT,\n    CourseID INTEGER,\n    Quantity INT,\n    Price DECIMAL(10,2),\n    FOREIGN KEY(CourseID) REFERENCES Courses(CourseID)\n);\n\nINSERT INTO \"Courses\" (CourseID,Title,Description,TeacherID) VALUES (1,'Calculus I','Introductory Calculus with an emphasis on limits and derivatives.',1),(2,'General Physics','Introduction to classical physics covering mechanics and thermodynamics.',2),(3,'Biological Evolution','A comprehensive study of evolutionary processes in biology.',3),(4,'Organic Chemistry I','Introduction to organic chemistry focusing on fundamental concepts and reactions.',4),(5,'World Literature','Exploration of world literature from various cultures and time periods.',5);\nINSERT INTO \"Enrollments\" (EnrollmentID,StudentID,CourseID,Grade) VALUES (1,1,1,'A'),(2,2,2,'B+'),(3,3,3,'A-'),(4,4,4,'B'),(5,5,5,'A');\nINSERT INTO \"Exams\" (ExamID,CourseID,Date,TotalMarks,PassMark) VALUES (1,1,'2021-12-15',100,60),(2,2,'2021-12-20',100,65),(3,3,'2021-12-17',100,70),(4,4,'2021-12-22',100,75),(5,5,'2021-12-18',100,80);\nINSERT INTO \"Students\" (StudentID,FirstName,LastName,Age) VALUES (1,'John','Doe',16),(2,'Jane','Smith',17),(3,'Tom','Brown',18),(4,'Alice','Green',19),(5,'Bob','White',20);\nINSERT INTO \"Teachers\" (TeacherID,FirstName,LastName,SubjectTaught) VALUES (1,'Mr.','Davis','Mathematics'),(2,'Ms.','Martin','Physics'),(3,'Dr.','Parker','Biology'),(4,'Professor','Lee','Chemistry'),(5,'Mrs.','Hall','English Literature');\nINSERT INTO \"Textbooks_and_Software\" (ItemID,TextbookTitle,SoftwareName,CourseID,Quantity,Price) VALUES (1,'Principia Mathematica',NULL,1,10,49.99),(2,'Fundamentals of Biochemistry',NULL,3,5,59.99),(3,'The Elements of Style','Grammarly Premium',5,15,39.99),(4,'Inorganic Chemistry: Structure and Reactivity',NULL,4,7,69.99),(5,'Anthropology: A Brief Introduction','Adobe Creative Cloud',2,8,79.99);\n",
      "question": "Show me courses and resources for them.",
      "gold_queries": [
        "Select title, TextbookTitle from courses C join textbooks_and_software TAS on C.courseID = TAS.courseID;",
        "Select title, SoftwareName from courses C join textbooks_and_software TAS on C.courseID = TAS.courseID;",
        "Select title, TextbookTitle, SoftwareName from courses C join textbooks_and_software TAS on C.courseID = TAS.courseID;"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Retrieve courses, along with information on textbooks used by them.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.Title, T.TextbookTitle, T.SoftwareName\nFROM Courses C\nJOIN Textbooks_and_Software T ON C.CourseID = T.CourseID"
          ]
        },
        {
          "interpretation": "Display a list of courses along with their respective software tools and quantities.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.Title, T.SoftwareName, T.Quantity\nFROM Courses C\nJOIN Textbooks_and_Software T ON C.CourseID = T.CourseID\nWHERE T.SoftwareName IS NOT NULL"
          ]
        },
        {
          "interpretation": "Since the table is named Textbooks_and_Software, show the items that are textbooks and those that are software, associated with courses.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT TextbookTitle AS Textbook, SoftwareName AS Software, CourseID FROM Textbooks_and_Software"
          ]
        },
        {
          "interpretation": "Show the courses and corresponding textbooks in the database.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT C.Title, T.TextbookTitle\nFROM Courses C\nJOIN Textbooks_and_Software T ON C.CourseID = T.CourseID"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.6666666666666666,
        "precision": 0.5,
        "one_found": true,
        "f1_score": 0.5714285714285715,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    },
    {
      "db_file": "data/vague/Education/vague_2cols_resources2/vague_2cols_resources2.sqlite",
      "db_dump": "CREATE TABLE Courses (\n    CourseID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Title TEXT,\n    Description TEXT,\n    TeacherID INTEGER,\n    FOREIGN KEY(TeacherID) REFERENCES Teachers(TeacherID)\n);\nCREATE TABLE Enrollments (\n    EnrollmentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StudentID INTEGER,\n    CourseID INTEGER,\n    Grade TEXT,\n    FOREIGN KEY(StudentID) REFERENCES Students(StudentID),\n    FOREIGN KEY(CourseID) REFERENCES Courses(CourseID)\n);\nCREATE TABLE Exams (\n    ExamID INTEGER PRIMARY KEY AUTOINCREMENT,\n    CourseID INTEGER,\n    Date DATE,\n    TotalMarks INT,\n    PassMark INT,\n    FOREIGN KEY(CourseID) REFERENCES Courses(CourseID)\n);\nCREATE TABLE Students (\n    StudentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    Age INT\n);\nCREATE TABLE Teachers (\n    TeacherID INTEGER PRIMARY KEY AUTOINCREMENT,\n    FirstName TEXT,\n    LastName TEXT,\n    SubjectTaught TEXT\n);\nCREATE TABLE Textbooks_and_Software (\n    ItemID INTEGER PRIMARY KEY AUTOINCREMENT,\n    TextbookTitle TEXT,\n    SoftwareName TEXT,\n    CourseID INTEGER,\n    Quantity INT,\n    Price DECIMAL(10,2),\n    FOREIGN KEY(CourseID) REFERENCES Courses(CourseID)\n);\n\nINSERT INTO \"Courses\" (CourseID,Title,Description,TeacherID) VALUES (1,'Calculus I','Introductory Calculus with an emphasis on limits and derivatives.',1),(2,'General Physics','Introduction to classical physics covering mechanics and thermodynamics.',2),(3,'Biological Evolution','A comprehensive study of evolutionary processes in biology.',3),(4,'Organic Chemistry I','Introduction to organic chemistry focusing on fundamental concepts and reactions.',4),(5,'World Literature','Exploration of world literature from various cultures and time periods.',5);\nINSERT INTO \"Enrollments\" (EnrollmentID,StudentID,CourseID,Grade) VALUES (1,1,1,'A'),(2,2,2,'B+'),(3,3,3,'A-'),(4,4,4,'B'),(5,5,5,'A');\nINSERT INTO \"Exams\" (ExamID,CourseID,Date,TotalMarks,PassMark) VALUES (1,1,'2021-12-15',100,60),(2,2,'2021-12-20',100,65),(3,3,'2021-12-17',100,70),(4,4,'2021-12-22',100,75),(5,5,'2021-12-18',100,80);\nINSERT INTO \"Students\" (StudentID,FirstName,LastName,Age) VALUES (1,'John','Doe',16),(2,'Jane','Smith',17),(3,'Tom','Brown',18),(4,'Alice','Green',19),(5,'Bob','White',20);\nINSERT INTO \"Teachers\" (TeacherID,FirstName,LastName,SubjectTaught) VALUES (1,'Mr.','Davis','Mathematics'),(2,'Ms.','Martin','Physics'),(3,'Dr.','Parker','Biology'),(4,'Professor','Lee','Chemistry'),(5,'Mrs.','Hall','English Literature');\nINSERT INTO \"Textbooks_and_Software\" (ItemID,TextbookTitle,SoftwareName,CourseID,Quantity,Price) VALUES (1,'Principia Mathematica',NULL,1,10,49.99),(2,'Fundamentals of Biochemistry',NULL,3,5,59.99),(3,'The Elements of Style','Grammarly Premium',5,15,39.99),(4,'Inorganic Chemistry: Structure and Reactivity',NULL,4,7,69.99),(5,'Anthropology: A Brief Introduction','Adobe Creative Cloud',2,8,79.99);\n",
      "question": "Which textbook and software are the least expensive?",
      "gold_queries": [
        "select TextbookTitle, SoftwareName from textbooks_and_software order by price asc limit 1;"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "For each course listed in Courses table investigate which pair of textbook and software are least expensive when combined in Textbooks_and_Software table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT CourseID, MIN(Price) AS TotalPrice\nFROM (\n    SELECT CourseID, SUM(Price) AS Price\n    FROM Textbooks_and_Software\n    GROUP BY CourseID, ItemID\n) AS CombinedPrices\nGROUP BY CourseID"
          ]
        },
        {
          "interpretation": "View separately \u2018items with textbooks - where software is empty(null)\u2019 and \u2018items with Software - where textbooks are empty(null)\u2019, and for both collections identify the lowest prices separately within each collection for Textbooks_only and Software_only individual values.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT TextbookTitle, MIN(Price) AS MinPrice FROM Textbooks_and_Software WHERE SoftwareName IS NULL GROUP BY TextbookTitle",
            "SELECT SoftwareName, MIN(Price) AS MinPrice FROM Textbooks_and_Software WHERE TextbookTitle IS NULL GROUP BY SoftwareName"
          ]
        },
        {
          "interpretation": "View separately \u2018items with textbooks - where software is empty(null)\u2019 and \u2018items with Software - where textbooks are empty(null)\u2019, and for both collections identify the lowest prices separately within each collection for Textbooks_only and Software_only individual values.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT TextbookTitle, MIN(Price) AS MinPrice FROM Textbooks_and_Software WHERE SoftwareName IS NULL GROUP BY TextbookTitle",
            "SELECT SoftwareName, MIN(Price) AS MinPrice FROM Textbooks_and_Software WHERE TextbookTitle IS NULL GROUP BY SoftwareName"
          ]
        },
        {
          "interpretation": "Use the most expensive entries (\"Anthropology: A Brief Introduction\", \"Adobe Creative Cloud\") as baselines to search for the actual combinations that meet our goal of the lowest total MI coverage together through.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT TextbookTitle, SoftwareName, Quantity, Price \nFROM Textbooks_and_Software \nWHERE Price <= (SELECT MAX(Price) FROM Textbooks_and_Software) \nORDER BY Price \nLIMIT 2"
          ]
        },
        {
          "interpretation": "Based on the 'Textbooks_and_Software' table, where exactly is the confirmation that software can be existing and can also be empty(null) except in this cases in Exams or Enrollments?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT TextbookTitle, SoftwareName FROM Textbooks_and_Software"
          ]
        },
        {
          "interpretation": "Considering all entries in the 'Textbooks_and_Software' table, find the combination of textbook and software that yields the lowest total price regardless of whether software is used or not.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT TextbookTitle, SoftwareName, Price FROM Textbooks_and_Software ORDER BY Price ASC LIMIT 1"
          ]
        },
        {
          "interpretation": "ConsidUnique distinct group with combined lowest price over Find the lowest price of each item in both the \u2018Textbooks_and_Software\u2019 table for the collection where both textbooks and software are present and evaluate the 'total_price' variable for results.,",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT \n    TextbookTitle, \n    SoftwareName, \n    MIN(Price) AS total_price\nFROM \n    Textbooks_and_Software\nWHERE \n    TextbookTitle IS NOT NULL AND \n    SoftwareName IS NOT NULL\nGROUP BY \n    TextbookTitle, \n    SoftwareName"
          ]
        },
        {
          "interpretation": "Analyze the results using eachious-comphanumeric-text metrics asking for: 'is together lower so equal correct output guidImaging \"\"",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT * FROM Students WHERE FirstName = 'John' AND LastName = 'Doe'"
          ]
        }
      ],
      "num_unique_execution_results": 8,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 10,
        "num_unique_queries": 8,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Education/vague_2cols_timeline/vague_2cols_timeline.sqlite",
      "db_dump": "CREATE TABLE Classes (\n    ClassID INTEGER PRIMARY KEY,\n    TeacherID INTEGER,\n    RoomNumber INT,\n    DayOfWeek TEXT,\n    TimeStart TIME,\n    FOREIGN KEY(TeacherID) REFERENCES Teachers(TeacherID)\n);\nCREATE TABLE Enrollments (\n    EnrollmentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StudentID INTEGER,\n    ClassID INTEGER,\n    Grade DECIMAL(2,1),\n    FOREIGN KEY(StudentID) REFERENCES Students(StudentID),\n    FOREIGN KEY(ClassID) REFERENCES Classes(ClassID)\n);\nCREATE TABLE Expenses (\n    ExpenseID INTEGER PRIMARY KEY AUTOINCREMENT,\n    MaterialID INTEGER,\n    Supplier TEXT,\n    Amount DECIMAL(8,2),\n    FOREIGN KEY(MaterialID) REFERENCES Materials(MaterialID)\n);\nCREATE TABLE Materials (\n    MaterialID INTEGER PRIMARY KEY,\n    Month INTEGER,\n    Year INTEGER,\n    ResourceType TEXT,\n    Quantity INTEGER,\n    Price DECIMAL(8,2)\n);\nCREATE TABLE Students (\n    StudentID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE\n);\nCREATE TABLE Teachers (\n    TeacherID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Subject TEXtT\n);\n\nINSERT INTO \"Classes\" (ClassID,TeacherID,RoomNumber,DayOfWeek,TimeStart) VALUES (1,1,101,'Monday','09:00:00'),(2,2,201,'Wednesday','11:00:00'),(3,3,301,'Friday','14:00:00');\nINSERT INTO \"Enrollments\" (EnrollmentID,StudentID,ClassID,Grade) VALUES (1,1,1,NULL),(2,2,1,NULL),(3,3,2,NULL),(4,1,3,NULL),(5,2,3,NULL);\nINSERT INTO \"Expenses\" (ExpenseID,MaterialID,Supplier,Amount) VALUES (1,1,'Office Supply Store',150),(2,2,'Electronics Store',500),(3,3,'Bookstore',2550);\nINSERT INTO \"Materials\" (MaterialID,Month,Year,ResourceType,Quantity,Price) VALUES (1,1,2021,'Textbooks',50,25.5),(2,2,2021,'Stationery',100,1.5),(3,3,2021,'Computers',10,500);\nINSERT INTO \"Students\" (StudentID,FirstName,LastName,DateOfBirth) VALUES (1,'John','Doe','2003-06-15'),(2,'Jane','Smith','2004-07-22'),(3,'Alice','Johnson','2005-09-10');\nINSERT INTO \"Teachers\" (TeacherID,FirstName,LastName,Subject) VALUES (1,'Mr.','White','Mathematics'),(2,'Mrs.','Green','English'),(3,'Ms.','Black','History');\n",
      "question": "In what month were the computers purchased?",
      "gold_queries": [
        "SELECT Materials.Month FROM Materials WHERE Materials.ResourceType =  'Computers'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "In what month was the majority of the computer quantity (at least half) purchased?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Month\nFROM Materials\nWHERE ResourceType = 'Computers'\nGROUP BY Month\nHAVING SUM(Quantity) >= (SELECT SUM(Quantity) / 2 FROM Materials WHERE ResourceType = 'Computers')"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "one_found": true,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Education/vague_2cols_timeline/vague_2cols_timeline.sqlite",
      "db_dump": "CREATE TABLE Classes (\n    ClassID INTEGER PRIMARY KEY,\n    TeacherID INTEGER,\n    RoomNumber INT,\n    DayOfWeek TEXT,\n    TimeStart TIME,\n    FOREIGN KEY(TeacherID) REFERENCES Teachers(TeacherID)\n);\nCREATE TABLE Enrollments (\n    EnrollmentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StudentID INTEGER,\n    ClassID INTEGER,\n    Grade DECIMAL(2,1),\n    FOREIGN KEY(StudentID) REFERENCES Students(StudentID),\n    FOREIGN KEY(ClassID) REFERENCES Classes(ClassID)\n);\nCREATE TABLE Expenses (\n    ExpenseID INTEGER PRIMARY KEY AUTOINCREMENT,\n    MaterialID INTEGER,\n    Supplier TEXT,\n    Amount DECIMAL(8,2),\n    FOREIGN KEY(MaterialID) REFERENCES Materials(MaterialID)\n);\nCREATE TABLE Materials (\n    MaterialID INTEGER PRIMARY KEY,\n    Month INTEGER,\n    Year INTEGER,\n    ResourceType TEXT,\n    Quantity INTEGER,\n    Price DECIMAL(8,2)\n);\nCREATE TABLE Students (\n    StudentID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE\n);\nCREATE TABLE Teachers (\n    TeacherID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Subject TEXtT\n);\n\nINSERT INTO \"Classes\" (ClassID,TeacherID,RoomNumber,DayOfWeek,TimeStart) VALUES (1,1,101,'Monday','09:00:00'),(2,2,201,'Wednesday','11:00:00'),(3,3,301,'Friday','14:00:00');\nINSERT INTO \"Enrollments\" (EnrollmentID,StudentID,ClassID,Grade) VALUES (1,1,1,NULL),(2,2,1,NULL),(3,3,2,NULL),(4,1,3,NULL),(5,2,3,NULL);\nINSERT INTO \"Expenses\" (ExpenseID,MaterialID,Supplier,Amount) VALUES (1,1,'Office Supply Store',150),(2,2,'Electronics Store',500),(3,3,'Bookstore',2550);\nINSERT INTO \"Materials\" (MaterialID,Month,Year,ResourceType,Quantity,Price) VALUES (1,1,2021,'Textbooks',50,25.5),(2,2,2021,'Stationery',100,1.5),(3,3,2021,'Computers',10,500);\nINSERT INTO \"Students\" (StudentID,FirstName,LastName,DateOfBirth) VALUES (1,'John','Doe','2003-06-15'),(2,'Jane','Smith','2004-07-22'),(3,'Alice','Johnson','2005-09-10');\nINSERT INTO \"Teachers\" (TeacherID,FirstName,LastName,Subject) VALUES (1,'Mr.','White','Mathematics'),(2,'Mrs.','Green','English'),(3,'Ms.','Black','History');\n",
      "question": "Show me the resource type and supplier for all expenses by month and year",
      "gold_queries": [
        "SELECT Expenses.Supplier, Materials.Month, Year FROM Expenses JOIN Materials ON Expenses.MaterialId = Materials.MaterialID"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Display the ResourceType and Supplier for Expenses grouped by MaterialID and ordered by MaterialID.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT M.ResourceType, E.Supplier\nFROM Materials M\nJOIN Expenses E ON M.MaterialID = E.MaterialID\nGROUP BY M.MaterialID\nORDER BY M.MaterialID"
          ]
        },
        {
          "interpretation": "Display the ResourceType and Supplier for Expenses with a Quantity greater than 10 in the Materials table, grouped by the ResourceType and sorted in descending order of the Quantity.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT M.ResourceType, E.Supplier\nFROM Materials M\nJOIN Expenses E ON M.MaterialID = E.MaterialID\nWHERE M.Quantity > 10\nGROUP BY M.ResourceType\nORDER BY M.Quantity DESC"
          ]
        },
        {
          "interpretation": "Display the ResourceType and Supplier for Expenses where the Amount is greater than 1000, grouped by the ResourceType and sorted in descending order of Amount.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Materials.ResourceType, Expenses.Supplier\nFROM Expenses\nJOIN Materials ON Expenses.MaterialID = Materials.MaterialID\nWHERE Expenses.Amount > 1000\nGROUP BY Materials.ResourceType\nORDER BY MAX(Expenses.Amount) DESC"
          ]
        },
        {
          "interpretation": "Show the ResourceType and corresponding Supplier name along with the minimum and maximum Amount for each ResourceType in the Materials table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Materials.ResourceType, Expenses.Supplier, MIN(Expenses.Amount), MAX(Expenses.Amount)\nFROM Materials\nJOIN Expenses ON Materials.MaterialID = Expenses.MaterialID\nGROUP BY Materials.ResourceType, Expenses.Supplier"
          ]
        },
        {
          "interpretation": "Show the ResourceType and Supplier for all Expenses with the MaterialID column, grouped by the ResourceType of the Materials table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT M.ResourceType, E.Supplier, E.MaterialID\nFROM Expenses E\nJOIN Materials M ON E.MaterialID = M.MaterialID\nGROUP BY M.ResourceType"
          ]
        },
        {
          "interpretation": "Display the ResourceType and Supplier for Expenses with Material quantities not equal to the Quantity in the Materials table, grouped by the ResourceType and Year in the Materials table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT M.ResourceType, E.Supplier\nFROM Expenses E\nJOIN Materials M ON E.MaterialID = M.MaterialID\nWHERE M.Quantity <> M.Quantity\nGROUP BY M.ResourceType, M.Year"
          ]
        }
      ],
      "num_unique_execution_results": 6,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 6,
        "num_unique_queries": 6,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Education/vague_2cols_timeline/vague_2cols_timeline.sqlite",
      "db_dump": "CREATE TABLE Classes (\n    ClassID INTEGER PRIMARY KEY,\n    TeacherID INTEGER,\n    RoomNumber INT,\n    DayOfWeek TEXT,\n    TimeStart TIME,\n    FOREIGN KEY(TeacherID) REFERENCES Teachers(TeacherID)\n);\nCREATE TABLE Enrollments (\n    EnrollmentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StudentID INTEGER,\n    ClassID INTEGER,\n    Grade DECIMAL(2,1),\n    FOREIGN KEY(StudentID) REFERENCES Students(StudentID),\n    FOREIGN KEY(ClassID) REFERENCES Classes(ClassID)\n);\nCREATE TABLE Expenses (\n    ExpenseID INTEGER PRIMARY KEY AUTOINCREMENT,\n    MaterialID INTEGER,\n    Supplier TEXT,\n    Amount DECIMAL(8,2),\n    FOREIGN KEY(MaterialID) REFERENCES Materials(MaterialID)\n);\nCREATE TABLE Materials (\n    MaterialID INTEGER PRIMARY KEY,\n    Month INTEGER,\n    Year INTEGER,\n    ResourceType TEXT,\n    Quantity INTEGER,\n    Price DECIMAL(8,2)\n);\nCREATE TABLE Students (\n    StudentID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE\n);\nCREATE TABLE Teachers (\n    TeacherID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Subject TEXtT\n);\n\nINSERT INTO \"Classes\" (ClassID,TeacherID,RoomNumber,DayOfWeek,TimeStart) VALUES (1,1,101,'Monday','09:00:00'),(2,2,201,'Wednesday','11:00:00'),(3,3,301,'Friday','14:00:00');\nINSERT INTO \"Enrollments\" (EnrollmentID,StudentID,ClassID,Grade) VALUES (1,1,1,NULL),(2,2,1,NULL),(3,3,2,NULL),(4,1,3,NULL),(5,2,3,NULL);\nINSERT INTO \"Expenses\" (ExpenseID,MaterialID,Supplier,Amount) VALUES (1,1,'Office Supply Store',150),(2,2,'Electronics Store',500),(3,3,'Bookstore',2550);\nINSERT INTO \"Materials\" (MaterialID,Month,Year,ResourceType,Quantity,Price) VALUES (1,1,2021,'Textbooks',50,25.5),(2,2,2021,'Stationery',100,1.5),(3,3,2021,'Computers',10,500);\nINSERT INTO \"Students\" (StudentID,FirstName,LastName,DateOfBirth) VALUES (1,'John','Doe','2003-06-15'),(2,'Jane','Smith','2004-07-22'),(3,'Alice','Johnson','2005-09-10');\nINSERT INTO \"Teachers\" (TeacherID,FirstName,LastName,Subject) VALUES (1,'Mr.','White','Mathematics'),(2,'Mrs.','Green','English'),(3,'Ms.','Black','History');\n",
      "question": "When were the computers purchased?",
      "gold_queries": [
        "SELECT Materials.Month FROM Materials WHERE Materials.ResourceType =  'Computers'",
        "SELECT Materials.Year FROM Materials WHERE Materials.ResourceType =  'Computers'",
        "SELECT Materials.Month, Year FROM Materials WHERE Materials.ResourceType =  'Computers'"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Provide a list of months when computers were purchased at any point of the years available in the data.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT Month FROM Materials WHERE ResourceType = 'Computers'"
          ]
        },
        {
          "interpretation": "What month of the year contains the highest or the lowest number of purchases of computers?",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 2,
            "num_unique_queries": 2,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Month, Year \nFROM Materials \nWHERE ResourceType = 'Computers' \nGROUP BY Month, Year \nORDER BY COUNT(*) ASC \nLIMIT 1",
            "SELECT Month, Year \nFROM Materials \nWHERE ResourceType = 'Computers' \nGROUP BY Month, Year \nORDER BY COUNT(*) DESC \nLIMIT 1"
          ]
        },
        {
          "interpretation": "How many times computers were purchased throughout the year, specifically in 2021.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT SUM(Quantity) FROM Materials WHERE ResourceType = 'Computers' AND Year = 2021"
          ]
        },
        {
          "interpretation": "How many times specifically were Computers Resource purchasing done given 2021 Data.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT COUNT(*) FROM Materials WHERE ResourceType = 'Computers' AND Year = 2021"
          ]
        },
        {
          "interpretation": "Supply a specific example date on or after computers were bought most recently.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DateOfBirth FROM Students WHERE DateOfBirth >= (SELECT MAX(Year) FROM Materials WHERE ResourceType = 'Computers')"
          ]
        },
        {
          "interpretation": "List the whenever performed monthly purchasing of Computer Device by resource.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Month, SUM(Quantity) AS TotalQuantity, SUM(Price * Quantity) AS TotalCost\nFROM Materials\nWHERE ResourceType = 'Computers'\nGROUP BY Month"
          ]
        },
        {
          "interpretation": "What quarter contained the highest number of purchases of computers?",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT CASE \n    WHEN Month BETWEEN 1 AND 3 THEN 'Q1'\n    WHEN Month BETWEEN 4 AND 6 THEN 'Q2'\n    WHEN Month BETWEEN 7 AND 9 THEN 'Q3'\n    WHEN Month BETWEEN 10 AND 12 THEN 'Q4'\nEND AS Quarter, SUM(Quantity) AS TotalQuantity\nFROM Materials\nWHERE ResourceType = 'Computers'\nGROUP BY Quarter\nORDER BY TotalQuantity DESC\nLIMIT 1"
          ]
        },
        {
          "interpretation": "What year were computers purchased for the first time?",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Year FROM Materials WHERE ResourceType = 'Computers' ORDER BY Year ASC LIMIT 1"
          ]
        }
      ],
      "num_unique_execution_results": 8,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.4444444444444444,
        "one_found": true,
        "f1_score": 0.6153846153846153,
        "num_queries": 9,
        "num_unique_queries": 9,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 3
    },
    {
      "db_file": "data/vague/Education/vague_2cols_timeline/vague_2cols_timeline.sqlite",
      "db_dump": "CREATE TABLE Classes (\n    ClassID INTEGER PRIMARY KEY,\n    TeacherID INTEGER,\n    RoomNumber INT,\n    DayOfWeek TEXT,\n    TimeStart TIME,\n    FOREIGN KEY(TeacherID) REFERENCES Teachers(TeacherID)\n);\nCREATE TABLE Enrollments (\n    EnrollmentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StudentID INTEGER,\n    ClassID INTEGER,\n    Grade DECIMAL(2,1),\n    FOREIGN KEY(StudentID) REFERENCES Students(StudentID),\n    FOREIGN KEY(ClassID) REFERENCES Classes(ClassID)\n);\nCREATE TABLE Expenses (\n    ExpenseID INTEGER PRIMARY KEY AUTOINCREMENT,\n    MaterialID INTEGER,\n    Supplier TEXT,\n    Amount DECIMAL(8,2),\n    FOREIGN KEY(MaterialID) REFERENCES Materials(MaterialID)\n);\nCREATE TABLE Materials (\n    MaterialID INTEGER PRIMARY KEY,\n    Month INTEGER,\n    Year INTEGER,\n    ResourceType TEXT,\n    Quantity INTEGER,\n    Price DECIMAL(8,2)\n);\nCREATE TABLE Students (\n    StudentID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE\n);\nCREATE TABLE Teachers (\n    TeacherID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Subject TEXtT\n);\n\nINSERT INTO \"Classes\" (ClassID,TeacherID,RoomNumber,DayOfWeek,TimeStart) VALUES (1,1,101,'Monday','09:00:00'),(2,2,201,'Wednesday','11:00:00'),(3,3,301,'Friday','14:00:00');\nINSERT INTO \"Enrollments\" (EnrollmentID,StudentID,ClassID,Grade) VALUES (1,1,1,NULL),(2,2,1,NULL),(3,3,2,NULL),(4,1,3,NULL),(5,2,3,NULL);\nINSERT INTO \"Expenses\" (ExpenseID,MaterialID,Supplier,Amount) VALUES (1,1,'Office Supply Store',150),(2,2,'Electronics Store',500),(3,3,'Bookstore',2550);\nINSERT INTO \"Materials\" (MaterialID,Month,Year,ResourceType,Quantity,Price) VALUES (1,1,2021,'Textbooks',50,25.5),(2,2,2021,'Stationery',100,1.5),(3,3,2021,'Computers',10,500);\nINSERT INTO \"Students\" (StudentID,FirstName,LastName,DateOfBirth) VALUES (1,'John','Doe','2003-06-15'),(2,'Jane','Smith','2004-07-22'),(3,'Alice','Johnson','2005-09-10');\nINSERT INTO \"Teachers\" (TeacherID,FirstName,LastName,Subject) VALUES (1,'Mr.','White','Mathematics'),(2,'Mrs.','Green','English'),(3,'Ms.','Black','History');\n",
      "question": "Show me the resource type and supplier for all expenses by month",
      "gold_queries": [
        "SELECT Expenses.Supplier, Materials.Month FROM Expenses JOIN Materials ON Expenses.MaterialId = Materials.MaterialID"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Show me the count of different `ResourceType`s in the `Materials` table, grouped by month.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Month, COUNT(DISTINCT ResourceType) FROM Materials GROUP BY Month"
          ]
        },
        {
          "interpretation": "Get the months during which resources of the `Textbooks` type were acquired.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Month FROM Materials WHERE ResourceType = 'Textbooks'"
          ]
        },
        {
          "interpretation": "Show me a list of months in which the expenses took place.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT Month FROM Materials"
          ]
        },
        {
          "interpretation": "Show the count of resources of each type acquired for each month.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Month, ResourceType, COUNT(*) AS ResourceCount\nFROM Materials\nGROUP BY Month, ResourceType"
          ]
        },
        {
          "interpretation": "Retrieve all unique values in the `Month` field from the `Materials` table and show me the `ResourceType` and corresponding values.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT Month, ResourceType FROM Materials"
          ]
        },
        {
          "interpretation": "Get all distinct expense dates (months and years) and associated resource types, sorted in ascending order.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT M.Month, M.Year, M.ResourceType FROM Materials M INNER JOIN Expenses E ON M.MaterialID = E.MaterialID ORDER BY M.Year ASC, M.Month ASC"
          ]
        },
        {
          "interpretation": "Show me the `ResourceType` and `Supplier` for all expenses sorted by month.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT M.ResourceType, E.Supplier\nFROM Materials M\nJOIN Expenses E ON M.MaterialID = E.MaterialID\nORDER BY M.Month"
          ]
        }
      ],
      "num_unique_execution_results": 7,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 7,
        "num_unique_queries": 7,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Education/vague_2cols_timeline/vague_2cols_timeline.sqlite",
      "db_dump": "CREATE TABLE Classes (\n    ClassID INTEGER PRIMARY KEY,\n    TeacherID INTEGER,\n    RoomNumber INT,\n    DayOfWeek TEXT,\n    TimeStart TIME,\n    FOREIGN KEY(TeacherID) REFERENCES Teachers(TeacherID)\n);\nCREATE TABLE Enrollments (\n    EnrollmentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StudentID INTEGER,\n    ClassID INTEGER,\n    Grade DECIMAL(2,1),\n    FOREIGN KEY(StudentID) REFERENCES Students(StudentID),\n    FOREIGN KEY(ClassID) REFERENCES Classes(ClassID)\n);\nCREATE TABLE Expenses (\n    ExpenseID INTEGER PRIMARY KEY AUTOINCREMENT,\n    MaterialID INTEGER,\n    Supplier TEXT,\n    Amount DECIMAL(8,2),\n    FOREIGN KEY(MaterialID) REFERENCES Materials(MaterialID)\n);\nCREATE TABLE Materials (\n    MaterialID INTEGER PRIMARY KEY,\n    Month INTEGER,\n    Year INTEGER,\n    ResourceType TEXT,\n    Quantity INTEGER,\n    Price DECIMAL(8,2)\n);\nCREATE TABLE Students (\n    StudentID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE\n);\nCREATE TABLE Teachers (\n    TeacherID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Subject TEXtT\n);\n\nINSERT INTO \"Classes\" (ClassID,TeacherID,RoomNumber,DayOfWeek,TimeStart) VALUES (1,1,101,'Monday','09:00:00'),(2,2,201,'Wednesday','11:00:00'),(3,3,301,'Friday','14:00:00');\nINSERT INTO \"Enrollments\" (EnrollmentID,StudentID,ClassID,Grade) VALUES (1,1,1,NULL),(2,2,1,NULL),(3,3,2,NULL),(4,1,3,NULL),(5,2,3,NULL);\nINSERT INTO \"Expenses\" (ExpenseID,MaterialID,Supplier,Amount) VALUES (1,1,'Office Supply Store',150),(2,2,'Electronics Store',500),(3,3,'Bookstore',2550);\nINSERT INTO \"Materials\" (MaterialID,Month,Year,ResourceType,Quantity,Price) VALUES (1,1,2021,'Textbooks',50,25.5),(2,2,2021,'Stationery',100,1.5),(3,3,2021,'Computers',10,500);\nINSERT INTO \"Students\" (StudentID,FirstName,LastName,DateOfBirth) VALUES (1,'John','Doe','2003-06-15'),(2,'Jane','Smith','2004-07-22'),(3,'Alice','Johnson','2005-09-10');\nINSERT INTO \"Teachers\" (TeacherID,FirstName,LastName,Subject) VALUES (1,'Mr.','White','Mathematics'),(2,'Mrs.','Green','English'),(3,'Ms.','Black','History');\n",
      "question": "In what month and year were the computers purchased?",
      "gold_queries": [
        "SELECT Materials.Month, Year FROM Materials WHERE Materials.ResourceType =  'Computers'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What is the month and year for the given Material 'Computer' with MaterialID 3?",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Month, Year FROM Materials WHERE MaterialID = 3 AND ResourceType = 'Computers'"
          ]
        }
      ],
      "num_unique_execution_results": 1,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 1.0,
        "one_found": true,
        "f1_score": 1.0,
        "num_queries": 1,
        "num_unique_queries": 1,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Education/vague_2cols_timeline/vague_2cols_timeline.sqlite",
      "db_dump": "CREATE TABLE Classes (\n    ClassID INTEGER PRIMARY KEY,\n    TeacherID INTEGER,\n    RoomNumber INT,\n    DayOfWeek TEXT,\n    TimeStart TIME,\n    FOREIGN KEY(TeacherID) REFERENCES Teachers(TeacherID)\n);\nCREATE TABLE Enrollments (\n    EnrollmentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StudentID INTEGER,\n    ClassID INTEGER,\n    Grade DECIMAL(2,1),\n    FOREIGN KEY(StudentID) REFERENCES Students(StudentID),\n    FOREIGN KEY(ClassID) REFERENCES Classes(ClassID)\n);\nCREATE TABLE Expenses (\n    ExpenseID INTEGER PRIMARY KEY AUTOINCREMENT,\n    MaterialID INTEGER,\n    Supplier TEXT,\n    Amount DECIMAL(8,2),\n    FOREIGN KEY(MaterialID) REFERENCES Materials(MaterialID)\n);\nCREATE TABLE Materials (\n    MaterialID INTEGER PRIMARY KEY,\n    Month INTEGER,\n    Year INTEGER,\n    ResourceType TEXT,\n    Quantity INTEGER,\n    Price DECIMAL(8,2)\n);\nCREATE TABLE Students (\n    StudentID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE\n);\nCREATE TABLE Teachers (\n    TeacherID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Subject TEXtT\n);\n\nINSERT INTO \"Classes\" (ClassID,TeacherID,RoomNumber,DayOfWeek,TimeStart) VALUES (1,1,101,'Monday','09:00:00'),(2,2,201,'Wednesday','11:00:00'),(3,3,301,'Friday','14:00:00');\nINSERT INTO \"Enrollments\" (EnrollmentID,StudentID,ClassID,Grade) VALUES (1,1,1,NULL),(2,2,1,NULL),(3,3,2,NULL),(4,1,3,NULL),(5,2,3,NULL);\nINSERT INTO \"Expenses\" (ExpenseID,MaterialID,Supplier,Amount) VALUES (1,1,'Office Supply Store',150),(2,2,'Electronics Store',500),(3,3,'Bookstore',2550);\nINSERT INTO \"Materials\" (MaterialID,Month,Year,ResourceType,Quantity,Price) VALUES (1,1,2021,'Textbooks',50,25.5),(2,2,2021,'Stationery',100,1.5),(3,3,2021,'Computers',10,500);\nINSERT INTO \"Students\" (StudentID,FirstName,LastName,DateOfBirth) VALUES (1,'John','Doe','2003-06-15'),(2,'Jane','Smith','2004-07-22'),(3,'Alice','Johnson','2005-09-10');\nINSERT INTO \"Teachers\" (TeacherID,FirstName,LastName,Subject) VALUES (1,'Mr.','White','Mathematics'),(2,'Mrs.','Green','English'),(3,'Ms.','Black','History');\n",
      "question": "Show me the resource type and supplier for all expenses by year",
      "gold_queries": [
        "SELECT Expenses.Supplier, Materials.Year FROM Expenses JOIN Materials ON Expenses.MaterialId = Materials.MaterialID"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "Retrieve the different resource types and corresponding suppliers for all expenses grouped by year",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT m.ResourceType, e.Supplier, m.Year\nFROM Materials m\nJOIN Expenses e ON m.MaterialID = e.MaterialID\nGROUP BY m.Year, m.ResourceType, e.Supplier"
          ]
        },
        {
          "interpretation": "Display resource type and supplier for expenses sorted by year",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT M.ResourceType, E.Supplier \nFROM Expenses E \nJOIN Materials M ON E.MaterialID = M.MaterialID \nORDER BY M.Year"
          ]
        },
        {
          "interpretation": "Get the expense information for resources including the type and supplier associated with each year",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Materials.ResourceType, Expenses.Supplier, Materials.Year, Expenses.Amount \nFROM Expenses \nJOIN Materials ON Expenses.MaterialID = Materials.MaterialID"
          ]
        },
        {
          "interpretation": "List resources typs and suppliers for all expenses grouped by year",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT M.ResourceType, E.Supplier, M.Year\nFROM Materials M\nJOIN Expenses E ON M.MaterialID = E.MaterialID\nGROUP BY M.Year"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.0,
        "precision": 0.0,
        "one_found": false,
        "f1_score": 0,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 0
    },
    {
      "db_file": "data/vague/Education/vague_2cols_timeline/vague_2cols_timeline.sqlite",
      "db_dump": "CREATE TABLE Classes (\n    ClassID INTEGER PRIMARY KEY,\n    TeacherID INTEGER,\n    RoomNumber INT,\n    DayOfWeek TEXT,\n    TimeStart TIME,\n    FOREIGN KEY(TeacherID) REFERENCES Teachers(TeacherID)\n);\nCREATE TABLE Enrollments (\n    EnrollmentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StudentID INTEGER,\n    ClassID INTEGER,\n    Grade DECIMAL(2,1),\n    FOREIGN KEY(StudentID) REFERENCES Students(StudentID),\n    FOREIGN KEY(ClassID) REFERENCES Classes(ClassID)\n);\nCREATE TABLE Expenses (\n    ExpenseID INTEGER PRIMARY KEY AUTOINCREMENT,\n    MaterialID INTEGER,\n    Supplier TEXT,\n    Amount DECIMAL(8,2),\n    FOREIGN KEY(MaterialID) REFERENCES Materials(MaterialID)\n);\nCREATE TABLE Materials (\n    MaterialID INTEGER PRIMARY KEY,\n    Month INTEGER,\n    Year INTEGER,\n    ResourceType TEXT,\n    Quantity INTEGER,\n    Price DECIMAL(8,2)\n);\nCREATE TABLE Students (\n    StudentID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE\n);\nCREATE TABLE Teachers (\n    TeacherID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Subject TEXtT\n);\n\nINSERT INTO \"Classes\" (ClassID,TeacherID,RoomNumber,DayOfWeek,TimeStart) VALUES (1,1,101,'Monday','09:00:00'),(2,2,201,'Wednesday','11:00:00'),(3,3,301,'Friday','14:00:00');\nINSERT INTO \"Enrollments\" (EnrollmentID,StudentID,ClassID,Grade) VALUES (1,1,1,NULL),(2,2,1,NULL),(3,3,2,NULL),(4,1,3,NULL),(5,2,3,NULL);\nINSERT INTO \"Expenses\" (ExpenseID,MaterialID,Supplier,Amount) VALUES (1,1,'Office Supply Store',150),(2,2,'Electronics Store',500),(3,3,'Bookstore',2550);\nINSERT INTO \"Materials\" (MaterialID,Month,Year,ResourceType,Quantity,Price) VALUES (1,1,2021,'Textbooks',50,25.5),(2,2,2021,'Stationery',100,1.5),(3,3,2021,'Computers',10,500);\nINSERT INTO \"Students\" (StudentID,FirstName,LastName,DateOfBirth) VALUES (1,'John','Doe','2003-06-15'),(2,'Jane','Smith','2004-07-22'),(3,'Alice','Johnson','2005-09-10');\nINSERT INTO \"Teachers\" (TeacherID,FirstName,LastName,Subject) VALUES (1,'Mr.','White','Mathematics'),(2,'Mrs.','Green','English'),(3,'Ms.','Black','History');\n",
      "question": "In what year were the computers purchased?",
      "gold_queries": [
        "SELECT Materials.Year FROM Materials WHERE Materials.ResourceType =  'Computers'"
      ],
      "is_ambiguous": false,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "What year where the computers in the Expenses table from the supplier 'Electronics Store' purchased.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT T1.Year \nFROM Materials AS T1 \nJOIN Expenses AS T2 \nON T1.MaterialID = T2.MaterialID \nWHERE T1.ResourceType = 'Computers' AND T2.Supplier = 'Electronics Store'"
          ]
        },
        {
          "interpretation": "What year is associated with computers in the Materials table.",
          "metrics": {
            "recall": 1.0,
            "precision": 1.0,
            "f1_score": 1.0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": true
          },
          "sql_queries": [
            "SELECT Year FROM Materials WHERE ResourceType = 'Computers'"
          ]
        }
      ],
      "num_unique_execution_results": 2,
      "interpretation_level_metrics": {
        "recall": 1.0,
        "precision": 0.5,
        "one_found": true,
        "f1_score": 0.6666666666666666,
        "num_queries": 2,
        "num_unique_queries": 2,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": true
      },
      "matched_gold_sql": 1
    },
    {
      "db_file": "data/vague/Education/vague_2cols_timeline/vague_2cols_timeline.sqlite",
      "db_dump": "CREATE TABLE Classes (\n    ClassID INTEGER PRIMARY KEY,\n    TeacherID INTEGER,\n    RoomNumber INT,\n    DayOfWeek TEXT,\n    TimeStart TIME,\n    FOREIGN KEY(TeacherID) REFERENCES Teachers(TeacherID)\n);\nCREATE TABLE Enrollments (\n    EnrollmentID INTEGER PRIMARY KEY AUTOINCREMENT,\n    StudentID INTEGER,\n    ClassID INTEGER,\n    Grade DECIMAL(2,1),\n    FOREIGN KEY(StudentID) REFERENCES Students(StudentID),\n    FOREIGN KEY(ClassID) REFERENCES Classes(ClassID)\n);\nCREATE TABLE Expenses (\n    ExpenseID INTEGER PRIMARY KEY AUTOINCREMENT,\n    MaterialID INTEGER,\n    Supplier TEXT,\n    Amount DECIMAL(8,2),\n    FOREIGN KEY(MaterialID) REFERENCES Materials(MaterialID)\n);\nCREATE TABLE Materials (\n    MaterialID INTEGER PRIMARY KEY,\n    Month INTEGER,\n    Year INTEGER,\n    ResourceType TEXT,\n    Quantity INTEGER,\n    Price DECIMAL(8,2)\n);\nCREATE TABLE Students (\n    StudentID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    DateOfBirth DATE\n);\nCREATE TABLE Teachers (\n    TeacherID INTEGER PRIMARY KEY,\n    FirstName TEXT,\n    LastName TEXT,\n    Subject TEXtT\n);\n\nINSERT INTO \"Classes\" (ClassID,TeacherID,RoomNumber,DayOfWeek,TimeStart) VALUES (1,1,101,'Monday','09:00:00'),(2,2,201,'Wednesday','11:00:00'),(3,3,301,'Friday','14:00:00');\nINSERT INTO \"Enrollments\" (EnrollmentID,StudentID,ClassID,Grade) VALUES (1,1,1,NULL),(2,2,1,NULL),(3,3,2,NULL),(4,1,3,NULL),(5,2,3,NULL);\nINSERT INTO \"Expenses\" (ExpenseID,MaterialID,Supplier,Amount) VALUES (1,1,'Office Supply Store',150),(2,2,'Electronics Store',500),(3,3,'Bookstore',2550);\nINSERT INTO \"Materials\" (MaterialID,Month,Year,ResourceType,Quantity,Price) VALUES (1,1,2021,'Textbooks',50,25.5),(2,2,2021,'Stationery',100,1.5),(3,3,2021,'Computers',10,500);\nINSERT INTO \"Students\" (StudentID,FirstName,LastName,DateOfBirth) VALUES (1,'John','Doe','2003-06-15'),(2,'Jane','Smith','2004-07-22'),(3,'Alice','Johnson','2005-09-10');\nINSERT INTO \"Teachers\" (TeacherID,FirstName,LastName,Subject) VALUES (1,'Mr.','White','Mathematics'),(2,'Mrs.','Green','English'),(3,'Ms.','Black','History');\n",
      "question": "Who provided all the materials and when?",
      "gold_queries": [
        "SELECT Expenses.Supplier, Materials.Month FROM Expenses JOIN Materials ON Expenses.MaterialId = Materials.MaterialID",
        "SELECT Expenses.Supplier, Materials.Year FROM Expenses JOIN Materials ON Expenses.MaterialId = Materials.MaterialID",
        "SELECT Expenses.Supplier, Materials.Month, Year FROM Expenses JOIN Materials ON Expenses.MaterialId = Materials.MaterialID"
      ],
      "is_ambiguous": true,
      "ambig_type": "vague",
      "interpretations": [
        {
          "interpretation": "The supply providers for each material expense, along with the expense date.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Supplier, ExpenseID AS ExpenseDate FROM Expenses"
          ]
        },
        {
          "interpretation": "The people who provided the materials purchased, as recorded in the expenses table.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT DISTINCT Supplier FROM Expenses"
          ]
        },
        {
          "interpretation": "The providers of materials used for expenses, including the expense dates.",
          "metrics": {
            "recall": 0.3333333333333333,
            "precision": 1.0,
            "f1_score": 0.5,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Supplier, Year, Month FROM Expenses INNER JOIN Materials ON Expenses.MaterialID = Materials.MaterialID"
          ]
        },
        {
          "interpretation": "The person or people who provided the materials used in expenses, along with their respective expenses.",
          "metrics": {
            "recall": 0.0,
            "precision": 0.0,
            "f1_score": 0,
            "num_queries": 1,
            "num_unique_queries": 1,
            "unique_results": 0,
            "unique_results_filtered": 0,
            "execution_errors": [],
            "all_found": false
          },
          "sql_queries": [
            "SELECT Expenses.Supplier, Expenses.Amount \nFROM Expenses"
          ]
        }
      ],
      "num_unique_execution_results": 4,
      "interpretation_level_metrics": {
        "recall": 0.6666666666666666,
        "precision": 0.5,
        "one_found": true,
        "f1_score": 0.5714285714285715,
        "num_queries": 4,
        "num_unique_queries": 4,
        "unique_results": 0,
        "unique_results_filtered": 0,
        "execution_errors": [],
        "all_found": false
      },
      "matched_gold_sql": 2
    }
  ],
  "metrics": {
    "ambig": {
      "attachment": {
        "recall": 0.4090909090909091,
        "precision": 0.18966274731824972,
        "f1_score": 0.2364933550006789,
        "one_found": 0.7575757575757576,
        "all_found": 0.06060606060606061
      },
      "scope": {
        "recall": 0.5588235294117647,
        "precision": 0.17466271713676554,
        "f1_score": 0.25777580574521025,
        "one_found": 0.8431372549019608,
        "all_found": 0.27450980392156865
      },
      "vague": {
        "recall": 0.4822695035460993,
        "precision": 0.28569863942204365,
        "f1_score": 0.3325861993439887,
        "one_found": 0.7872340425531915,
        "all_found": 0.14893617021276595
      },
      "total": {
        "recall": 0.49363867684478363,
        "precision": 0.21827866632300258,
        "f1_score": 0.27925494791752364,
        "one_found": 0.8015267175572519,
        "all_found": 0.17557251908396945
      }
    },
    "unambig": {
      "attachment": {
        "recall": 0.6363636363636364,
        "precision": 0.16899426529105674,
        "f1_score": 0.23271282589464404,
        "one_found": 0.6363636363636364,
        "all_found": 0.6363636363636364
      },
      "scope": {
        "recall": 0.8921568627450981,
        "precision": 0.27966685590524604,
        "f1_score": 0.389999080440257,
        "one_found": 0.8921568627450981,
        "all_found": 0.8921568627450981
      },
      "vague": {
        "recall": 0.7801418439716312,
        "precision": 0.30609292205036887,
        "f1_score": 0.3952419330078905,
        "one_found": 0.7801418439716312,
        "all_found": 0.7801418439716312
      },
      "total": {
        "recall": 0.7864077669902912,
        "precision": 0.2680865463451354,
        "f1_score": 0.35879632772836656,
        "one_found": 0.7864077669902912,
        "all_found": 0.7864077669902912
      }
    }
  },
  "statistics": {
    "total_examples": 440,
    "avg_interpretations": 5.890909090909091,
    "avg_unique_execution_results": 5.8977272727272725,
    "avg_matched_gold_sql": 0.9522727272727273
  },
  "args": {
    "interpretations_file": "outputs/initial_interpretations/interpretations_llama-3.1-8b-instruct_seed42_ambrosia_test_tgi.json",
    "output_dir": "outputs/sql_generation",
    "exp_name": "default",
    "model_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
    "dtype": "auto",
    "load_in_4bit": false,
    "max_seq_length": 8192,
    "chat_template": null,
    "overwrite": false,
    "seed": 42,
    "backend": "tgi",
    "tgi_url": "http://0.0.0.0/v1",
    "dataset_type": "ambrosia",
    "split": "test",
    "no_database": false,
    "filter_gold": false,
    "filter_interpr": false,
    "filtered": true
  }
}